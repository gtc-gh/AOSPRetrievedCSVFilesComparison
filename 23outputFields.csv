"Variable","Annotation","Modifier","Comment"
"[TAG = ""JobService""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[PERMISSION_BIND = ""android.permission.BIND_JOB_SERVICE""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Job services must be protected with this permission:
 *
 * <pre class=""prettyprint"">
 * <service android:name=""MyJobService""
 * android:permission=""android.permission.BIND_JOB_SERVICE"" >
 * ...
 * </service>
 * </pre>
 *
 * <p>If a job service is declared in the manifest but not protected with this
 * permission, that service will be ignored by the OS.
 */
]"
"[MSG_EXECUTE_JOB = 0]","[]","[PRIVATE, FINAL]","Optional[/**
 * Identifier for a message that will result in a call to
 * {@link #onStartJob(android.app.job.JobParameters)}.
 */
]"
"[MSG_STOP_JOB = 1]","[]","[PRIVATE, FINAL]","Optional[/**
 * Message that will result in a call to {@link #onStopJob(android.app.job.JobParameters)}.
 */
]"
"[MSG_JOB_FINISHED = 2]","[]","[PRIVATE, FINAL]","Optional[/**
 * Message that the client has completed execution of this job.
 */
]"
"[mHandlerLock = new Object()]","[]","[PRIVATE, FINAL]","Optional[/**
 * Lock object for {@link #mHandler}.
 */
]"
"[mHandler]","[@GuardedBy(""mHandlerLock"")]","[]","Optional[/**
 * Handler we post jobs to. Responsible for calling into the client logic, and handling the
 * callback to the system.
 */
]"
"[mBinder = new IJobService.Stub() {

    @Override
    public void startJob(JobParameters jobParams) {
        ensureHandler();
        Message m = Message.obtain(mHandler, MSG_EXECUTE_JOB, jobParams);
        m.sendToTarget();
    }

    @Override
    public void stopJob(JobParameters jobParams) {
        ensureHandler();
        Message m = Message.obtain(mHandler, MSG_STOP_JOB, jobParams);
        m.sendToTarget();
    }
}]","[]","[]","Optional[/**
 * Binder for this service.
 */
]"
"[ERROR_CLIENT = 5]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Other client side errors.
 */
]"
"[ERROR_SPEECH_TIMEOUT = 6]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * No speech input
 */
]"
"[ERROR_NO_MATCH = 7]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * No recognition result matched.
 */
]"
"[ERROR_RECOGNIZER_BUSY = 8]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * RecognitionService busy.
 */
]"
"[ERROR_INSUFFICIENT_PERMISSIONS = 9]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Insufficient permissions
 */
]"
"[MSG_START = 1]","[]","[PRIVATE, STATIC, FINAL]","Optional[/**
 * action codes
 */
]"
"[MSG_STOP = 2]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[MSG_CANCEL = 3]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[MSG_CHANGE_LISTENER = 4]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[mService]","[]","[PRIVATE]","Optional[/**
 * The actual RecognitionService endpoint
 */
]"
"[mConnection]","[]","[PRIVATE]","Optional[/**
 * The connection to the actual service
 */
]"
"[mContext]","[]","[PRIVATE, FINAL]","Optional[/**
 * Context with which the manager was created
 */
]"
"[mServiceComponent]","[]","[PRIVATE, FINAL]","Optional[/**
 * Component to direct service intent to
 */
]"
"[mHandler = new Handler() {

    @Override
    public void handleMessage(Message msg) {
        switch(msg.what) {
            case MSG_START:
                handleStartListening((Intent) msg.obj);
                break;
            case MSG_STOP:
                handleStopMessage();
                break;
            case MSG_CANCEL:
                handleCancelMessage();
                break;
            case MSG_CHANGE_LISTENER:
                handleChangeListener((RecognitionListener) msg.obj);
                break;
        }
    }
}]","[]","[PRIVATE]","Optional[/**
 * Handler that will execute the main tasks
 */
]"
"[mPendingTasks = new LinkedList<Message>()]","[]","[PRIVATE, FINAL]","Optional[/**
 * Temporary queue, saving the messages until the connection will be established, afterwards,
 * only mHandler will receive the messages
 */
]"
"[mListener = new InternalListener()]","[]","[PRIVATE, FINAL]","Optional[/**
 * The Listener that will receive all the callbacks
 */
]"
"[mInternalListener]","[]","[PRIVATE]","Optional.empty"
"[MSG_BEGINNING_OF_SPEECH = 1]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[MSG_BUFFER_RECEIVED = 2]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[MSG_END_OF_SPEECH = 3]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[MSG_ERROR = 4]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[MSG_READY_FOR_SPEECH = 5]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[MSG_RESULTS = 6]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[MSG_PARTIAL_RESULTS = 7]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[MSG_RMS_CHANGED = 8]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[MSG_ON_EVENT = 9]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[mInternalHandler = new Handler() {

    @Override
    public void handleMessage(Message msg) {
        if (mInternalListener == null) {
            return;
        }
        switch(msg.what) {
            case MSG_BEGINNING_OF_SPEECH:
                mInternalListener.onBeginningOfSpeech();
                break;
            case MSG_BUFFER_RECEIVED:
                mInternalListener.onBufferReceived((byte[]) msg.obj);
                break;
            case MSG_END_OF_SPEECH:
                mInternalListener.onEndOfSpeech();
                break;
            case MSG_ERROR:
                mInternalListener.onError((Integer) msg.obj);
                break;
            case MSG_READY_FOR_SPEECH:
                mInternalListener.onReadyForSpeech((Bundle) msg.obj);
                break;
            case MSG_RESULTS:
                mInternalListener.onResults((Bundle) msg.obj);
                break;
            case MSG_PARTIAL_RESULTS:
                mInternalListener.onPartialResults((Bundle) msg.obj);
                break;
            case MSG_RMS_CHANGED:
                mInternalListener.onRmsChanged((Float) msg.obj);
                break;
            case MSG_ON_EVENT:
                mInternalListener.onEvent(msg.arg1, (Bundle) msg.obj);
                break;
        }
    }
}]","[]","[PRIVATE, FINAL]","Optional.empty"
"[TAG_ARRAYITEM = ""value""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[ATTR_NAME = ""name""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[ACTION_PAIRING_CANCEL = ""android.bluetooth.device.action.PAIRING_CANCEL""]","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[ACTION_CONNECTION_ACCESS_REQUEST = ""android.bluetooth.device.action.CONNECTION_ACCESS_REQUEST""]","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[ACTION_CONNECTION_ACCESS_REPLY = ""android.bluetooth.device.action.CONNECTION_ACCESS_REPLY""]","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[ACTION_CONNECTION_ACCESS_CANCEL = ""android.bluetooth.device.action.CONNECTION_ACCESS_CANCEL""]","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[EXTRA_ACCESS_REQUEST_TYPE = ""android.bluetooth.device.extra.ACCESS_REQUEST_TYPE""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used as an extra field in {@link #ACTION_CONNECTION_ACCESS_REQUEST} intent.
 * @hide
 */
]"
"[REQUEST_TYPE_PROFILE_CONNECTION = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[REQUEST_TYPE_PHONEBOOK_ACCESS = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[REQUEST_TYPE_MESSAGE_ACCESS = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[REQUEST_TYPE_SIM_ACCESS = 4]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[EXTRA_PACKAGE_NAME = ""android.bluetooth.device.extra.PACKAGE_NAME""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used as an extra field in {@link #ACTION_CONNECTION_ACCESS_REQUEST} intents,
 * Contains package name to return reply intent to.
 * @hide
 */
]"
"[EXTRA_CLASS_NAME = ""android.bluetooth.device.extra.CLASS_NAME""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used as an extra field in {@link #ACTION_CONNECTION_ACCESS_REQUEST} intents,
 * Contains class name to return reply intent to.
 * @hide
 */
]"
"[EXTRA_CONNECTION_ACCESS_RESULT = ""android.bluetooth.device.extra.CONNECTION_ACCESS_RESULT""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used as an extra field in {@link #ACTION_CONNECTION_ACCESS_REPLY} intent.
 * @hide
 */
]"
"[CONNECTION_ACCESS_YES = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[CONNECTION_ACCESS_NO = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[EXTRA_ALWAYS_ALLOWED = ""android.bluetooth.device.extra.ALWAYS_ALLOWED""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used as an extra field in {@link #ACTION_CONNECTION_ACCESS_REPLY} intents,
 * Contains boolean to indicate if the allowed response is once-for-all so that
 * next request will be granted without asking user again.
 * @hide
 */
]"
"[BOND_SUCCESS = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A bond attempt succeeded
 * @hide
 */
]"
"[UNBOND_REASON_AUTH_FAILED = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A bond attempt failed because pins did not match, or remote device did
 * not respond to pin request in time
 * @hide
 */
]"
"[UNBOND_REASON_AUTH_REJECTED = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A bond attempt failed because the other side explicitly rejected
 * bonding
 * @hide
 */
]"
"[UNBOND_REASON_AUTH_CANCELED = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A bond attempt failed because we canceled the bonding process
 * @hide
 */
]"
"[UNBOND_REASON_REMOTE_DEVICE_DOWN = 4]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A bond attempt failed because we could not contact the remote device
 * @hide
 */
]"
"[UNBOND_REASON_DISCOVERY_IN_PROGRESS = 5]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A bond attempt failed because a discovery is in progress
 * @hide
 */
]"
"[UNBOND_REASON_AUTH_TIMEOUT = 6]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A bond attempt failed because of authentication timeout
 * @hide
 */
]"
"[UNBOND_REASON_REPEATED_ATTEMPTS = 7]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A bond attempt failed because of repeated attempts
 * @hide
 */
]"
"[UNBOND_REASON_REMOTE_AUTH_CANCELED = 8]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A bond attempt failed because we received an Authentication Cancel
 * by remote end
 * @hide
 */
]"
"[UNBOND_REASON_REMOVED = 9]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * An existing bond was explicitly revoked
 * @hide
 */
]"
"[PAIRING_VARIANT_PIN = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The user will be prompted to enter a pin or
 * an app will enter a pin for user.
 */
]"
"[PAIRING_VARIANT_PASSKEY = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The user will be prompted to enter a passkey
 * @hide
 */
]"
"[PAIRING_VARIANT_PASSKEY_CONFIRMATION = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The user will be prompted to confirm the passkey displayed on the screen or
 * an app will confirm the passkey for the user.
 */
]"
"[PAIRING_VARIANT_CONSENT = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The user will be prompted to accept or deny the incoming pairing request
 * @hide
 */
]"
"[PAIRING_VARIANT_DISPLAY_PASSKEY = 4]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The user will be prompted to enter the passkey displayed on remote device
 * This is used for Bluetooth 2.1 pairing.
 * @hide
 */
]"
"[PAIRING_VARIANT_DISPLAY_PIN = 5]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The user will be prompted to enter the PIN displayed on remote device.
 * This is used for Bluetooth 2.0 pairing.
 * @hide
 */
]"
"[PAIRING_VARIANT_OOB_CONSENT = 6]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The user will be prompted to accept or deny the OOB pairing request
 * @hide
 */
]"
"[PAIRING_VARIANT_PIN_16_DIGITS = 7]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The user will be prompted to enter a 16 digit pin or
 * an app will enter a 16 digit pin for user.
 * @hide
 */
]"
"[EXTRA_UUID = ""android.bluetooth.device.extra.UUID""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used as an extra field in {@link #ACTION_UUID} intents,
 * Contains the {@link android.os.ParcelUuid}s of the remote device which
 * is a parcelable version of {@link UUID}.
 */
]"
"[EXTRA_SDP_RECORD = ""android.bluetooth.device.extra.SDP_RECORD""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[EXTRA_SDP_SEARCH_STATUS = ""android.bluetooth.device.extra.SDP_SEARCH_STATUS""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[ACCESS_UNKNOWN = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * For {@link #getPhonebookAccessPermission}, {@link #setPhonebookAccessPermission},
 * {@link #getMessageAccessPermission} and {@link #setMessageAccessPermission}.
 * @hide
 */
]"
"[ACCESS_ALLOWED = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * For {@link #getPhonebookAccessPermission}, {@link #setPhonebookAccessPermission},
 * {@link #getMessageAccessPermission} and {@link #setMessageAccessPermission}.
 * @hide
 */
]"
"[ACCESS_REJECTED = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * For {@link #getPhonebookAccessPermission}, {@link #setPhonebookAccessPermission},
 * {@link #getMessageAccessPermission} and {@link #setMessageAccessPermission}.
 * @hide
 */
]"
"[TRANSPORT_AUTO = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * No preferrence of physical transport for GATT connections to remote dual-mode devices
 */
]"
"[TRANSPORT_BREDR = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Prefer BR/EDR transport for GATT connections to remote dual-mode devices
 */
]"
"[TRANSPORT_LE = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Prefer LE transport for GATT connections to remote dual-mode devices
 */
]"
"[EXTRA_MAS_INSTANCE = ""android.bluetooth.device.extra.MAS_INSTANCE""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[sService]","[]","[PRIVATE, STATIC]","Optional[/**
 * Lazy initialization. Guaranteed final after first object constructed, or
 * getService() called.
 * TODO: Unify implementation of sService amongst BluetoothFoo API's
 */
]"
"[mAddress]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mStateChangeCallback = new IBluetoothManagerCallback.Stub() {

    public void onBluetoothServiceUp(IBluetooth bluetoothService) throws RemoteException {
        synchronized (BluetoothDevice.class) {
            if (sService == null) {
                sService = bluetoothService;
            }
        }
    }

    public void onBluetoothServiceDown() throws RemoteException {
        synchronized (BluetoothDevice.class) {
            sService = null;
        }
    }

    public void onBrEdrDown() {
        if (DBG)
            Log.d(TAG, ""onBrEdrDown: reached BLE ON state"");
    }
}]","[]","[STATIC]","Optional.empty"
"[CREATOR = new Parcelable.Creator<BluetoothDevice>() {

    public BluetoothDevice createFromParcel(Parcel in) {
        return new BluetoothDevice(in.readString());
    }

    public BluetoothDevice[] newArray(int size) {
        return new BluetoothDevice[size];
    }
}]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[nextIdle]","[]","[]","Optional.empty"
"[profilerInfo]","[]","[]","Optional.empty"
"[activityInfo]","[]","[]","Optional.empty"
"[compatInfo]","[]","[]","Optional.empty"
"[packageInfo]","[]","[]","Optional.empty"
"[pendingResults]","[]","[]","Optional.empty"
"[pendingIntents]","[]","[]","Optional.empty"
"[startsNotResumed]","[]","[]","Optional.empty"
"[isForward]","[]","[]","Optional.empty"
"[pendingConfigChanges]","[]","[]","Optional.empty"
"[onlyLocalRequest]","[]","[]","Optional.empty"
"[mPendingRemoveWindow]","[]","[]","Optional.empty"
"[mPendingRemoveWindowManager]","[]","[]","Optional.empty"
"[mNames]","[]","[FINAL]","Optional.empty"
"[mProvider]","[]","[FINAL]","Optional.empty"
"[mLocalProvider]","[]","[FINAL]","Optional.empty"
"[mHolder]","[]","[FINAL]","Optional.empty"
"[intents]","[]","[]","Optional.empty"
"[token]","[]","[]","Optional.empty"
"[intent]","[]","[]","Optional.empty"
"[info]","[]","[]","Optional.empty"
"[compatInfo]","[]","[]","Optional.empty"
"[appInfo]","[]","[]","Optional.empty"
"[compatInfo]","[]","[]","Optional.empty"
"[backupMode]","[]","[]","Optional.empty"
"[token]","[]","[]","Optional.empty"
"[info]","[]","[]","Optional.empty"
"[compatInfo]","[]","[]","Optional.empty"
"[intent]","[]","[]","Optional.empty"
"[token]","[]","[]","Optional.empty"
"[intent]","[]","[]","Optional.empty"
"[rebind]","[]","[]","Optional.empty"
"[token]","[]","[]","Optional.empty"
"[taskRemoved]","[]","[]","Optional.empty"
"[startId]","[]","[]","Optional.empty"
"[flags]","[]","[]","Optional.empty"
"[args]","[]","[]","Optional.empty"
"[info]","[]","[]","Optional.empty"
"[processName]","[]","[]","Optional.empty"
"[appInfo]","[]","[]","Optional.empty"
"[providers]","[]","[]","Optional.empty"
"[instrumentationName]","[]","[]","Optional.empty"
"[instrumentationArgs]","[]","[]","Optional.empty"
"[instrumentationWatcher]","[]","[]","Optional.empty"
"[instrumentationUiAutomationConnection]","[]","[]","Optional.empty"
"[debugMode]","[]","[]","Optional.empty"
"[enableOpenGlTrace]","[]","[]","Optional.empty"
"[restrictedBackupMode]","[]","[]","Optional.empty"
"[persistent]","[]","[]","Optional.empty"
"[config]","[]","[]","Optional.empty"
"[compatInfo]","[]","[]","Optional.empty"
"[initProfilerInfo]","[]","[]","Optional[/**
 * Initial values for {@link Profiler}.
 */
]"
"[profileFile]","[]","[]","Optional.empty"
"[profileFd]","[]","[]","Optional.empty"
"[samplingInterval]","[]","[]","Optional.empty"
"[autoStopProfiler]","[]","[]","Optional.empty"
"[profiling]","[]","[]","Optional.empty"
"[handlingProfiling]","[]","[]","Optional.empty"
"[fd]","[]","[]","Optional.empty"
"[token]","[]","[]","Optional.empty"
"[prefix]","[]","[]","Optional.empty"
"[args]","[]","[]","Optional.empty"
"[token]","[]","[]","Optional.empty"
"[results]","[]","[]","Optional.empty"
"[context]","[]","[]","Optional.empty"
"[what]","[]","[]","Optional.empty"
"[who]","[]","[]","Optional.empty"
"[path]","[]","[]","Optional.empty"
"[fd]","[]","[]","Optional.empty"
"[pkg]","[]","[]","Optional.empty"
"[info]","[]","[]","Optional.empty"
"[activityToken]","[]","[]","Optional.empty"
"[requestToken]","[]","[]","Optional.empty"
"[requestType]","[]","[]","Optional.empty"
"[activityToken]","[]","[FINAL]","Optional.empty"
"[overrideConfig]","[]","[FINAL]","Optional.empty"
"[DB_INFO_FORMAT = ""  %8s %8s %14s %14s  %s""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[mLastProcessState = -1]","[]","[PRIVATE]","Optional.empty"
"[LAUNCH_ACTIVITY = 100]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PAUSE_ACTIVITY = 101]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PAUSE_ACTIVITY_FINISHING = 102]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[STOP_ACTIVITY_SHOW = 103]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[STOP_ACTIVITY_HIDE = 104]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[SHOW_WINDOW = 105]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[HIDE_WINDOW = 106]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[RESUME_ACTIVITY = 107]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[SEND_RESULT = 108]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[DESTROY_ACTIVITY = 109]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[BIND_APPLICATION = 110]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[EXIT_APPLICATION = 111]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[NEW_INTENT = 112]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[RECEIVER = 113]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[CREATE_SERVICE = 114]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[SERVICE_ARGS = 115]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[STOP_SERVICE = 116]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[CONFIGURATION_CHANGED = 118]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[CLEAN_UP_CONTEXT = 119]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[GC_WHEN_IDLE = 120]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[BIND_SERVICE = 121]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[UNBIND_SERVICE = 122]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[DUMP_SERVICE = 123]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[LOW_MEMORY = 124]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[ACTIVITY_CONFIGURATION_CHANGED = 125]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[RELAUNCH_ACTIVITY = 126]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROFILER_CONTROL = 127]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[CREATE_BACKUP_AGENT = 128]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[DESTROY_BACKUP_AGENT = 129]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[SUICIDE = 130]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[REMOVE_PROVIDER = 131]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[ENABLE_JIT = 132]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[DISPATCH_PACKAGE_BROADCAST = 133]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[SCHEDULE_CRASH = 134]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[DUMP_HEAP = 135]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[DUMP_ACTIVITY = 136]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[SLEEPING = 137]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[SET_CORE_SETTINGS = 138]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[UPDATE_PACKAGE_COMPATIBILITY_INFO = 139]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TRIM_MEMORY = 140]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[DUMP_PROVIDER = 141]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[UNSTABLE_PROVIDER_DIED = 142]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[REQUEST_ASSIST_CONTEXT_EXTRAS = 143]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TRANSLUCENT_CONVERSION_COMPLETE = 144]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[INSTALL_PROVIDER = 145]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[ON_NEW_ACTIVITY_OPTIONS = 146]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[CANCEL_VISIBLE_BEHIND = 147]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[BACKGROUND_VISIBLE_BEHIND_CHANGED = 148]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[ENTER_ANIMATION_COMPLETE = 149]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[mMainThreadConfig = new Configuration()]","[]","[PRIVATE]","Optional.empty"
"[HEAP_FULL_COLUMN = ""%13s %8s %8s %8s %8s %8s %8s %8s %8s %8s %8s""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[HEAP_COLUMN = ""%13s %8s %8s %8s %8s %8s %8s %8s""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[ONE_COUNT_COLUMN = ""%21s %8d""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[TWO_COUNT_COLUMNS = ""%21s %8d %21s %8d""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[ONE_COUNT_COLUMN_HEADER = ""%21s %8s""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[ACTIVITY_THREAD_CHECKIN_VERSION = 3]","[]","[PRIVATE, STATIC, FINAL]","Optional[// Formatting for checkin service - update version if row format changes
]"
"[sCurrentBroadcastIntent = new ThreadLocal<Intent>()]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[mThumbnailWidth = -1]","[]","[PRIVATE]","Optional.empty"
"[mThumbnailHeight = -1]","[]","[PRIVATE]","Optional.empty"
"[mAvailThumbnailBitmap = null]","[]","[PRIVATE]","Optional.empty"
"[mThumbnailCanvas = null]","[]","[PRIVATE]","Optional.empty"
"[activity]","[]","[]","Optional.empty"
"[state]","[]","[]","Optional.empty"
"[persistentState]","[]","[]","Optional.empty"
"[description]","[]","[]","Optional.empty"
"[holder]","[]","[PUBLIC, FINAL]","Optional.empty"
"[client]","[]","[PUBLIC, FINAL]","Optional.empty"
"[stableCount]","[]","[PUBLIC]","Optional.empty"
"[unstableCount]","[]","[PUBLIC]","Optional.empty"
"[removePending]","[]","[PUBLIC]","Optional[// here.
]"
"[dropBox]","[]","[PRIVATE]","Optional.empty"
"[mDisplayIntent]","[]","[PRIVATE]","Optional.empty"
"[mPages = new ArrayList<Notification>()]","[]","[PRIVATE]","Optional.empty"
"[mBackground]","[]","[PRIVATE]","Optional.empty"
"[mContentIcon]","[]","[PRIVATE]","Optional.empty"
"[mContentIconGravity = DEFAULT_CONTENT_ICON_GRAVITY]","[]","[PRIVATE]","Optional.empty"
"[mContentActionIndex = UNSET_ACTION_INDEX]","[]","[PRIVATE]","Optional.empty"
"[mCustomSizePreset = SIZE_DEFAULT]","[]","[PRIVATE]","Optional.empty"
"[mCustomContentHeight]","[]","[PRIVATE]","Optional.empty"
"[mGravity = DEFAULT_GRAVITY]","[]","[PRIVATE]","Optional.empty"
"[mHintScreenTimeout]","[]","[PRIVATE]","Optional.empty"
"[TAG = ""CarExtender""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[EXTRA_CAR_EXTENDER = ""android.car.EXTENSIONS""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[EXTRA_LARGE_ICON = ""large_icon""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[EXTRA_CONVERSATION = ""car_conversation""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[EXTRA_COLOR = ""app_color""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[mLargeIcon]","[]","[PRIVATE]","Optional.empty"
"[mUnreadConversation]","[]","[PRIVATE]","Optional.empty"
"[mColor = Notification.COLOR_DEFAULT]","[]","[PRIVATE]","Optional.empty"
"[KEY_AUTHOR = ""author""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[KEY_TEXT = ""text""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[KEY_MESSAGES = ""messages""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[KEY_REMOTE_INPUT = ""remote_input""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[KEY_ON_REPLY = ""on_reply""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[KEY_ON_READ = ""on_read""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[KEY_PARTICIPANTS = ""participants""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[KEY_TIMESTAMP = ""timestamp""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[mMessages]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mRemoteInput]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mReplyPendingIntent]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mReadPendingIntent]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mParticipants]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mLatestTimestamp]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mMessages = new ArrayList<String>()]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mParticipant]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mRemoteInput]","[]","[PRIVATE]","Optional.empty"
"[mReadPendingIntent]","[]","[PRIVATE]","Optional.empty"
"[mReplyPendingIntent]","[]","[PRIVATE]","Optional.empty"
"[mLatestTimestamp]","[]","[PRIVATE]","Optional.empty"
"[IM_HANDLE = ""im_handle""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The IM handle the presence item is for. The handle is scoped to
 * {@link #PROTOCOL}.
 * <P>Type: TEXT</P>
 */
]"
"[IM_ACCOUNT = ""im_account""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The IM account for the local user that the presence data came from.
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(AUTHORITY_URI, ""status_updates"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table
 */
]"
"[PROFILE_CONTENT_URI = Uri.withAppendedPath(Profile.CONTENT_URI, ""status_updates"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table, specific to the user's profile.
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/status-update""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of {@link #CONTENT_URI} providing a directory of
 * status update details.
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/status-update""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of a {@link #CONTENT_URI} subdirectory of a single
 * status update detail.
 */
]"
"[SNIPPET = ""snippet""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The search snippet constructed by SQLite snippeting functionality.
 * <p>
 * The snippet may contain (parts of) several data elements belonging to the contact,
 * with the matching parts optionally surrounded by special characters that indicate the
 * start and end of matching text.
 *
 * For example, if a contact has an address ""123 Main Street"", using a filter ""mai"" would
 * return the formatted snippet ""123 [Mai]n street"".
 *
 * @see <a href=""http://www.sqlite.org/fts3.html#snippet"">
 * http://www.sqlite.org/fts3.html#snippet</a>
 */
]"
"[SNIPPET_ARGS_PARAM_KEY = ""snippet_args""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Comma-separated parameters for the generation of the snippet:
 * <ul>
 * <li>The ""start match"" text. Default is '['</li>
 * <li>The ""end match"" text. Default is ']'</li>
 * <li>The ""ellipsis"" text. Default is ""...""</li>
 * <li>Maximum number of tokens to include in the snippet. Can be either
 * a positive or a negative number: A positive number indicates how many
 * tokens can be returned in total. A negative number indicates how many
 * tokens can be returned per occurrence of the search terms.</li>
 * </ul>
 *
 * @hide
 */
]"
"[DEFERRED_SNIPPETING_KEY = ""deferred_snippeting""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The key to ask the provider to defer the formatting of the snippet to the client if
 * possible, for performance reasons.
 * A value of 1 indicates true, 0 indicates false. False is the default.
 * When a cursor is returned to the client, it should check for an extra with the name
 * {@link ContactsContract#DEFERRED_SNIPPETING} in the cursor. If it exists, the client
 * should do its own formatting of the snippet. If it doesn't exist, the snippet column
 * in the cursor should already contain a formatted snippet.
 */
]"
"[PACKAGE_COMMON = ""common""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The {@link Data#RES_PACKAGE} value for common data that should be
 * shown using a default style.
 *
 * @hide RES_PACKAGE is hidden
 */
]"
"[TYPE_CUSTOM = 0]","[]","[PUBLIC, STATIC]","Optional[/**
 * A custom type. The custom label should be supplied by user.
 */
]"
"[DATA = DataColumns.DATA1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The data for the contact method.
 * <P>Type: TEXT</P>
 */
]"
"[TYPE = DataColumns.DATA2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The type of data, for example Home or Work.
 * <P>Type: INTEGER</P>
 */
]"
"[LABEL = DataColumns.DATA3]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The user defined label for the the contact method.
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[DISPLAY_NAME = DATA1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The name that should be used to display the contact.
 * <i>Unstructured component of the name should be consistent with
 * its structured representation.</i>
 * <p>
 * Type: TEXT
 */
]"
"[GIVEN_NAME = DATA2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The given name for the contact.
 * <P>Type: TEXT</P>
 */
]"
"[FAMILY_NAME = DATA3]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The family name for the contact.
 * <P>Type: TEXT</P>
 */
]"
"[PREFIX = DATA4]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The contact's honorific prefix, e.g. ""Sir""
 * <P>Type: TEXT</P>
 */
]"
"[MIDDLE_NAME = DATA5]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The contact's middle name
 * <P>Type: TEXT</P>
 */
]"
"[SUFFIX = DATA6]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The contact's honorific suffix, e.g. ""Jr""
 */
]"
"[PHONETIC_GIVEN_NAME = DATA7]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The phonetic version of the given name for the contact.
 * <P>Type: TEXT</P>
 */
]"
"[PHONETIC_MIDDLE_NAME = DATA8]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The phonetic version of the additional name for the contact.
 * <P>Type: TEXT</P>
 */
]"
"[PHONETIC_FAMILY_NAME = DATA9]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The phonetic version of the family name for the contact.
 * <P>Type: TEXT</P>
 */
]"
"[FULL_NAME_STYLE = DATA10]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The style used for combining given/middle/family name into a full name.
 * See {@link ContactsContract.FullNameStyle}.
 */
]"
"[PHONETIC_NAME_STYLE = DATA11]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The alphabet used for capturing the phonetic name.
 * See ContactsContract.PhoneticNameStyle.
 * @hide
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/nickname""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[TYPE_DEFAULT = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_OTHER_NAME = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_MAIDEN_NAME = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_MAINDEN_NAME = 3]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @deprecated Use TYPE_MAIDEN_NAME instead.
 */
]"
"[TYPE_SHORT_NAME = 4]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_INITIALS = 5]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[NAME = DATA]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The name itself
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/phone_v2""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/phone_v2""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of {@link #CONTENT_URI} providing a directory of
 * phones.
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(Data.CONTENT_URI, ""phones"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for all data records of the
 * {@link #CONTENT_ITEM_TYPE} MIME type, combined with the
 * associated raw contact and aggregate contact data.
 */
]"
"[ENTERPRISE_CONTENT_URI = Uri.withAppendedPath(Data.ENTERPRISE_CONTENT_URI, ""phones"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URI used for getting all contacts from primary and managed profile.
 *
 * It supports the same semantics as {@link #CONTENT_URI} and returns the same
 * columns.  If the device has no corp profile that is linked to the current profile, it
 * behaves in the exact same way as {@link #CONTENT_URI}.  If there is a corp profile
 * linked to the current profile, it will merge corp profile and current profile's
 * results and return
 *
 * @hide
 */
]"
"[CONTENT_FILTER_URI = Uri.withAppendedPath(CONTENT_URI, ""filter"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URL for phone lookup using a filter. The filter returns
 * records of MIME type {@link #CONTENT_ITEM_TYPE}. The filter is applied
 * to display names as well as phone numbers. The filter argument should be passed
 * as an additional path segment after this URI.
 */
]"
"[SEARCH_DISPLAY_NAME_KEY = ""search_display_name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A boolean query parameter that can be used with {@link #CONTENT_FILTER_URI}.
 * If ""1"" or ""true"", display names are searched.  If ""0"" or ""false"", display names
 * are not searched.  Default is ""1"".
 */
]"
"[SEARCH_PHONE_NUMBER_KEY = ""search_phone_number""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A boolean query parameter that can be used with {@link #CONTENT_FILTER_URI}.
 * If ""1"" or ""true"", phone numbers are searched.  If ""0"" or ""false"", phone numbers
 * are not searched.  Default is ""1"".
 */
]"
"[TYPE_HOME = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_MOBILE = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_WORK = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_FAX_WORK = 4]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_FAX_HOME = 5]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_PAGER = 6]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_OTHER = 7]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_CALLBACK = 8]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_CAR = 9]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_COMPANY_MAIN = 10]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_ISDN = 11]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_MAIN = 12]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_OTHER_FAX = 13]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_RADIO = 14]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_TELEX = 15]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_TTY_TDD = 16]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_WORK_MOBILE = 17]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_WORK_PAGER = 18]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_ASSISTANT = 19]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_MMS = 20]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[NUMBER = DATA]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The phone number as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[NORMALIZED_NUMBER = DATA4]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The phone number's E164 representation. This value can be omitted in which
 * case the provider will try to automatically infer it.  (It'll be left null if the
 * provider fails to infer.)
 * If present, {@link #NUMBER} has to be set as well (it will be ignored otherwise).
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/email_v2""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/email_v2""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of {@link #CONTENT_URI} providing a directory of email addresses.
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(Data.CONTENT_URI, ""emails"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for all data records of the
 * {@link #CONTENT_ITEM_TYPE} MIME type, combined with the
 * associated raw contact and aggregate contact data.
 */
]"
"[CONTENT_LOOKUP_URI = Uri.withAppendedPath(CONTENT_URI, ""lookup"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>
 * The content:// style URL for looking up data rows by email address. The
 * lookup argument, an email address, should be passed as an additional path segment
 * after this URI.
 * </p>
 * <p>Example:
 * <pre>
 * Uri uri = Uri.withAppendedPath(Email.CONTENT_LOOKUP_URI, Uri.encode(email));
 * Cursor c = getContentResolver().query(uri,
 * new String[]{Email.CONTACT_ID, Email.DISPLAY_NAME, Email.DATA},
 * null, null, null);
 * </pre>
 * </p>
 */
]"
"[ENTERPRISE_CONTENT_LOOKUP_URI = Uri.withAppendedPath(CONTENT_URI, ""lookup_enterprise"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>URI used for enterprise email lookup.</p>
 *
 * <p>
 * It supports the same semantics as {@link #CONTENT_LOOKUP_URI} and returns the same
 * columns.  If the device has no corp profile that is linked to the current profile, it
 * behaves in the exact same way as {@link #CONTENT_LOOKUP_URI}.  If there is a
 * corp profile linked to the current profile, it first queries against the personal contact database,
 * and if no matching contacts are found there, then queries against the
 * corp contacts database.
 * </p>
 * <p>
 * If a result is from the corp profile, it makes the following changes to the data:
 * <ul>
 * <li>
 * {@link #PHOTO_THUMBNAIL_URI} and {@link #PHOTO_URI} will be rewritten to special
 * URIs.  Use {@link ContentResolver#openAssetFileDescriptor} or its siblings to
 * load pictures from them.
 * {@link #PHOTO_ID} and {@link #PHOTO_FILE_ID} will be set to null.  Do not
 * use them.
 * </li>
 * <li>
 * Corp contacts will get artificial {@link #CONTACT_ID}s.  In order to tell whether
 * a contact
 * is from the corp profile, use
 * {@link ContactsContract.Contacts#isEnterpriseContactId(long)}.
 * </li>
 * <li>
 * Corp contacts will get artificial {@link #LOOKUP_KEY}s too.
 * </li>
 * </ul>
 * <p>
 * A contact lookup URL built by
 * {@link ContactsContract.Contacts#getLookupUri(long, String)}
 * with an {@link #_ID} and a {@link #LOOKUP_KEY} returned by this API can be passed to
 * {@link ContactsContract.QuickContact#showQuickContact} even if a contact is from the
 * corp profile.
 * </p>
 *
 * <pre>
 * Uri lookupUri = Uri.withAppendedPath(Email.ENTERPRISE_CONTENT_LOOKUP_URI,
 * Uri.encode(email));
 * </pre>
 */
]"
"[CONTENT_FILTER_URI = Uri.withAppendedPath(CONTENT_URI, ""filter"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>
 * The content:// style URL for email lookup using a filter. The filter returns
 * records of MIME type {@link #CONTENT_ITEM_TYPE}. The filter is applied
 * to display names as well as email addresses. The filter argument should be passed
 * as an additional path segment after this URI.
 * </p>
 * <p>The query in the following example will return ""Robert Parr (bob@incredibles.com)""
 * as well as ""Bob Parr (incredible@android.com)"".
 * <pre>
 * Uri uri = Uri.withAppendedPath(Email.CONTENT_LOOKUP_URI, Uri.encode(""bob""));
 * Cursor c = getContentResolver().query(uri,
 * new String[]{Email.DISPLAY_NAME, Email.DATA},
 * null, null, null);
 * </pre>
 * </p>
 */
]"
"[ADDRESS = DATA1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The email address.
 * <P>Type: TEXT</P>
 */
]"
"[TYPE_HOME = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_WORK = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_OTHER = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_MOBILE = 4]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[DISPLAY_NAME = DATA4]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The display name for the email address
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/postal-address_v2""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/postal-address_v2""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of {@link #CONTENT_URI} providing a directory of
 * postal addresses.
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(Data.CONTENT_URI, ""postals"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for all data records of the
 * {@link StructuredPostal#CONTENT_ITEM_TYPE} MIME type.
 */
]"
"[TYPE_HOME = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_WORK = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_OTHER = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[FORMATTED_ADDRESS = DATA]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The full, unstructured postal address. <i>This field must be
 * consistent with any structured data.</i>
 * <p>
 * Type: TEXT
 */
]"
"[STREET = DATA4]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Can be street, avenue, road, etc. This element also includes the
 * house number and room/apartment/flat/floor number.
 * <p>
 * Type: TEXT
 */
]"
"[POBOX = DATA5]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Covers actual P.O. boxes, drawers, locked bags, etc. This is
 * usually but not always mutually exclusive with street.
 * <p>
 * Type: TEXT
 */
]"
"[NEIGHBORHOOD = DATA6]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This is used to disambiguate a street address when a city
 * contains more than one street with the same name, or to specify a
 * small place whose mail is routed through a larger postal town. In
 * China it could be a county or a minor city.
 * <p>
 * Type: TEXT
 */
]"
"[CITY = DATA7]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Can be city, village, town, borough, etc. This is the postal town
 * and not necessarily the place of residence or place of business.
 * <p>
 * Type: TEXT
 */
]"
"[REGION = DATA8]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A state, province, county (in Ireland), Land (in Germany),
 * departement (in France), etc.
 * <p>
 * Type: TEXT
 */
]"
"[POSTCODE = DATA9]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Postal code. Usually country-wide, but sometimes specific to the
 * city (e.g. ""2"" in ""Dublin 2, Ireland"" addresses).
 * <p>
 * Type: TEXT
 */
]"
"[COUNTRY = DATA10]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The name or code of the country.
 * <p>
 * Type: TEXT
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/im""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[TYPE_HOME = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_WORK = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_OTHER = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL = DATA5]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This column should be populated with one of the defined
 * constants, e.g. {@link #PROTOCOL_YAHOO}. If the value of this
 * column is {@link #PROTOCOL_CUSTOM}, the {@link #CUSTOM_PROTOCOL}
 * should contain the name of the custom protocol.
 */
]"
"[CUSTOM_PROTOCOL = DATA6]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_CUSTOM = -1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/*
             * The predefined IM protocol types.
             */
]"
"[PROTOCOL_AIM = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_MSN = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_YAHOO = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_SKYPE = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_QQ = 4]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_GOOGLE_TALK = 5]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_ICQ = 6]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_JABBER = 7]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_NETMEETING = 8]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/organization""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[TYPE_WORK = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_OTHER = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[COMPANY = DATA]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The company as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[TITLE = DATA4]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The position title at this company as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[DEPARTMENT = DATA5]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The department at this company as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[JOB_DESCRIPTION = DATA6]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The job description at this company as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[SYMBOL = DATA7]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The symbol of this company as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[PHONETIC_NAME = DATA8]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The phonetic name of this company as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[OFFICE_LOCATION = DATA9]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The office location of this organization.
 * <P>Type: TEXT</P>
 */
]"
"[PHONETIC_NAME_STYLE = DATA10]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The alphabet used for capturing the phonetic name.
 * See {@link ContactsContract.PhoneticNameStyle}.
 * @hide
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/relation""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[TYPE_ASSISTANT = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_BROTHER = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_CHILD = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_DOMESTIC_PARTNER = 4]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_FATHER = 5]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_FRIEND = 6]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_MANAGER = 7]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_MOTHER = 8]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_PARENT = 9]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_PARTNER = 10]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_REFERRED_BY = 11]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_RELATIVE = 12]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_SISTER = 13]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_SPOUSE = 14]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[NAME = DATA]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The name of the relative as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/contact_event""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[TYPE_ANNIVERSARY = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_OTHER = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_BIRTHDAY = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[START_DATE = DATA]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The event start date as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/photo""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[PHOTO_FILE_ID = DATA14]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Photo file ID for the display photo of the raw contact.
 * See {@link ContactsContract.DisplayPhoto}.
 * <p>
 * Type: NUMBER
 */
]"
"[PHOTO = DATA15]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Thumbnail photo of the raw contact. This is the raw bytes of an image
 * that could be inflated using {@link android.graphics.BitmapFactory}.
 * <p>
 * Type: BLOB
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/note""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[NOTE = DATA1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The note text.
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/group_membership""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[GROUP_ROW_ID = DATA1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The row id of the group that this group membership refers to. Exactly one of
 * this or {@link #GROUP_SOURCE_ID} must be set when inserting a row.
 * <P>Type: INTEGER</P>
 */
]"
"[GROUP_SOURCE_ID = ""group_sourceid""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The sourceid of the group that this group membership refers to.  Exactly one of
 * this or {@link #GROUP_ROW_ID} must be set when inserting a row.
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/website""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[TYPE_HOMEPAGE = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_BLOG = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_PROFILE = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_HOME = 4]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_WORK = 5]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_FTP = 6]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_OTHER = 7]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[URL = DATA]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The website URL string.
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/sip_address""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[TYPE_HOME = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_WORK = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_OTHER = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[SIP_ADDRESS = DATA1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The SIP address.
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/identity""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[IDENTITY = DataColumns.DATA1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The identity string.
 * <P>Type: TEXT</P>
 */
]"
"[NAMESPACE = DataColumns.DATA2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The namespace of the identity string, e.g. ""com.google""
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(Data.CONTENT_URI, ""callables"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Similar to {@link Phone#CONTENT_URI}, but returns callable data instead of only
 * phone numbers.
 */
]"
"[CONTENT_FILTER_URI = Uri.withAppendedPath(CONTENT_URI, ""filter"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Similar to {@link Phone#CONTENT_FILTER_URI}, but allows users to filter callable
 * data.
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(Data.CONTENT_URI, ""contactables"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for these data items, which requests a directory of data
 * rows matching the selection criteria.
 */
]"
"[CONTENT_FILTER_URI = Uri.withAppendedPath(Contactables.CONTENT_URI, ""filter"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for these data items, which allows for a query parameter to
 * be appended onto the end to filter for data items matching the query.
 */
]"
"[VISIBLE_CONTACTS_ONLY = ""visible_contacts_only""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A boolean parameter for {@link Data#CONTENT_URI}.
 * This specifies whether or not the returned data items should be filtered to show
 * data items belonging to visible contacts only.
 */
]"
"[DATA_SET = ""data_set""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The data set within the account that this group belongs to.  This allows
 * multiple sync adapters for the same account type to distinguish between
 * each others' group data.
 *
 * This is empty by default, and is completely optional.  It only needs to
 * be populated if multiple sync adapters are entering distinct group data
 * for the same account type and account name.
 * <P>Type: TEXT</P>
 */
]"
"[ACCOUNT_TYPE_AND_DATA_SET = ""account_type_and_data_set""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A concatenation of the account type and data set (delimited by a forward
 * slash) - if the data set is empty, this will be the same as the account
 * type.  For applications that need to be aware of the data set, this can
 * be used instead of account type to distinguish sets of data.  This is
 * never intended to be used for specifying accounts.
 * @hide
 */
]"
"[TITLE = ""title""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The display title of this group.
 * <p>
 * Type: TEXT
 */
]"
"[RES_PACKAGE = ""res_package""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The package name to use when creating {@link Resources} objects for
 * this group. This value is only designed for use when building user
 * interfaces, and should not be used to infer the owner.
 */
]"
"[TITLE_RES = ""title_res""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The display title of this group to load as a resource from
 * {@link #RES_PACKAGE}, which may be localized.
 * <P>Type: TEXT</P>
 */
]"
"[NOTES = ""notes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Notes about the group.
 * <p>
 * Type: TEXT
 */
]"
"[SYSTEM_ID = ""system_id""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The ID of this group if it is a System Group, i.e. a group that has a special meaning
 * to the sync adapter, null otherwise.
 * <P>Type: TEXT</P>
 */
]"
"[SUMMARY_COUNT = ""summ_count""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The total number of {@link Contacts} that have
 * {@link CommonDataKinds.GroupMembership} in this group. Read-only value that is only
 * present when querying {@link Groups#CONTENT_SUMMARY_URI}.
 * <p>
 * Type: INTEGER
 */
]"
"[PARAM_RETURN_GROUP_COUNT_PER_ACCOUNT = ""return_group_count_per_account""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A boolean query parameter that can be used with {@link Groups#CONTENT_SUMMARY_URI}.
 * It will additionally return {@link #SUMMARY_GROUP_COUNT_PER_ACCOUNT}.
 *
 * @hide
 */
]"
"[SUMMARY_GROUP_COUNT_PER_ACCOUNT = ""group_count_per_account""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The total number of groups of the account that a group belongs to.
 * This column is available only when the parameter
 * {@link #PARAM_RETURN_GROUP_COUNT_PER_ACCOUNT} is specified in
 * {@link Groups#CONTENT_SUMMARY_URI}.
 *
 * For example, when the account ""A"" has two groups ""group1"" and ""group2"", and the account
 * ""B"" has a group ""group3"", the rows for ""group1"" and ""group2"" return ""2"" and the row for
 * ""group3"" returns ""1"" for this column.
 *
 * Note: This counts only non-favorites, non-auto-add, and not deleted groups.
 *
 * Type: INTEGER
 * @hide
 */
]"
"[SUMMARY_WITH_PHONES = ""summ_phones""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The total number of {@link Contacts} that have both
 * {@link CommonDataKinds.GroupMembership} in this group, and also have phone numbers.
 * Read-only value that is only present when querying
 * {@link Groups#CONTENT_SUMMARY_URI}.
 * <p>
 * Type: INTEGER
 */
]"
"[GROUP_VISIBLE = ""group_visible""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Flag indicating if the contacts belonging to this group should be
 * visible in any user interface.
 * <p>
 * Type: INTEGER (boolean)
 */
]"
"[DELETED = ""deleted""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The ""deleted"" flag: ""0"" by default, ""1"" if the row has been marked
 * for deletion. When {@link android.content.ContentResolver#delete} is
 * called on a group, it is marked for deletion. The sync adaptor
 * deletes the group on the server and then calls ContactResolver.delete
 * once more, this time setting the the
 * {@link ContactsContract#CALLER_IS_SYNCADAPTER} query parameter to
 * finalize the data removal.
 * <P>Type: INTEGER</P>
 */
]"
"[SHOULD_SYNC = ""should_sync""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether this group should be synced if the SYNC_EVERYTHING settings
 * is false for this group's account.
 * <p>
 * Type: INTEGER (boolean)
 */
]"
"[AUTO_ADD = ""auto_add""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Any newly created contacts will automatically be added to groups that have this
 * flag set to true.
 * <p>
 * Type: INTEGER (boolean)
 */
]"
"[FAVORITES = ""favorites""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * When a contacts is marked as a favorites it will be automatically added
 * to the groups that have this flag set, and when it is removed from favorites
 * it will be removed from these groups.
 * <p>
 * Type: INTEGER (boolean)
 */
]"
"[GROUP_IS_READ_ONLY = ""group_is_read_only""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The ""read-only"" flag: ""0"" by default, ""1"" if the row cannot be modified or
 * deleted except by a sync adapter.  See {@link ContactsContract#CALLER_IS_SYNCADAPTER}.
 * <P>Type: INTEGER</P>
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(AUTHORITY_URI, ""groups"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table
 */
]"
"[CONTENT_SUMMARY_URI = Uri.withAppendedPath(AUTHORITY_URI, ""groups_summary"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table joined with details data from
 * {@link ContactsContract.Data}.
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/group""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of a directory of groups.
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/group""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of a single group.
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(AUTHORITY_URI, ""aggregation_exceptions"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/aggregation_exception""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of {@link #CONTENT_URI} providing a directory of data.
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/aggregation_exception""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of a {@link #CONTENT_URI} subdirectory of an aggregation exception
 */
]"
"[TYPE = ""type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The type of exception: {@link #TYPE_KEEP_TOGETHER}, {@link #TYPE_KEEP_SEPARATE} or
 * {@link #TYPE_AUTOMATIC}.
 *
 * <P>Type: INTEGER</P>
 */
]"
"[TYPE_AUTOMATIC = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Allows the provider to automatically decide whether the specified raw contacts should
 * be included in the same aggregate contact or not.
 */
]"
"[TYPE_KEEP_TOGETHER = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Makes sure that the specified raw contacts are included in the same
 * aggregate contact.
 */
]"
"[TYPE_KEEP_SEPARATE = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Makes sure that the specified raw contacts are NOT included in the same
 * aggregate contact.
 */
]"
"[RAW_CONTACT_ID1 = ""raw_contact_id1""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A reference to the {@link RawContacts#_ID} of the raw contact that the rule applies to.
 */
]"
"[RAW_CONTACT_ID2 = ""raw_contact_id2""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A reference to the other {@link RawContacts#_ID} of the raw contact that the rule
 * applies to.
 */
]"
"[ACCOUNT_NAME = ""account_name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The name of the account instance to which this row belongs.
 * <P>Type: TEXT</P>
 */
]"
"[ACCOUNT_TYPE = ""account_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The type of account to which this row belongs, which when paired with
 * {@link #ACCOUNT_NAME} identifies a specific account.
 * <P>Type: TEXT</P>
 */
]"
"[DATA_SET = ""data_set""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The data set within the account that this row belongs to.  This allows
 * multiple sync adapters for the same account type to distinguish between
 * each others' data.
 *
 * This is empty by default, and is completely optional.  It only needs to
 * be populated if multiple sync adapters are entering distinct data for
 * the same account type and account name.
 * <P>Type: TEXT</P>
 */
]"
"[SHOULD_SYNC = ""should_sync""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Depending on the mode defined by the sync-adapter, this flag controls
 * the top-level sync behavior for this data source.
 * <p>
 * Type: INTEGER (boolean)
 */
]"
"[UNGROUPED_VISIBLE = ""ungrouped_visible""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Flag indicating if contacts without any {@link CommonDataKinds.GroupMembership}
 * entries should be visible in any user interface.
 * <p>
 * Type: INTEGER (boolean)
 */
]"
"[ANY_UNSYNCED = ""any_unsynced""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Read-only flag indicating if this {@link #SHOULD_SYNC} or any
 * {@link Groups#SHOULD_SYNC} under this account have been marked as
 * unsynced.
 */
]"
"[UNGROUPED_COUNT = ""summ_count""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Read-only count of {@link Contacts} from a specific source that have
 * no {@link CommonDataKinds.GroupMembership} entries.
 * <p>
 * Type: INTEGER
 */
]"
"[UNGROUPED_WITH_PHONES = ""summ_phones""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Read-only count of {@link Contacts} from a specific source that have
 * no {@link CommonDataKinds.GroupMembership} entries, and also have phone numbers.
 * <p>
 * Type: INTEGER
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(AUTHORITY_URI, ""settings"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/setting""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME-type of {@link #CONTENT_URI} providing a directory of
 * settings.
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/setting""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME-type of {@link #CONTENT_URI} providing a single setting.
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(AUTHORITY_URI, ""provider_status"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table.  Requests to this URI can be
 * performed on the UI thread because they are always unblocking.
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/provider_status""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME-type of {@link #CONTENT_URI} providing a directory of
 * settings.
 */
]"
"[STATUS = ""status""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * An integer representing the current status of the provider.
 */
]"
"[STATUS_NORMAL = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Default status of the provider.
 */
]"
"[STATUS_BUSY = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The provider won't respond to queries. It is in the middle of a long running task, such
 * as a database upgrade or locale change.
 */
]"
"[STATUS_EMPTY = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The status that indicates that there are no accounts and no contacts
 * on the device.
 */
]"
"[FEEDBACK_URI = Uri.withAppendedPath(Data.CONTENT_URI, ""usagefeedback"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for sending usage feedback.
 * Must be used with {@link ContentResolver#update(Uri, ContentValues, String, String[])}.
 */
]"
"[DELETE_USAGE_URI = Uri.withAppendedPath(Contacts.CONTENT_URI, ""delete_usage"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for deleting all usage information.
 * Must be used with {@link ContentResolver#delete(Uri, String, String[])}.
 * The {@code where} and {@code selectionArgs} parameters are ignored.
 */
]"
"[USAGE_TYPE = ""type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>
 * Name for query parameter specifying the type of data usage.
 * </p>
 */
]"
"[USAGE_TYPE_CALL = ""call""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>
 * Type of usage for voice interaction, which includes phone call, voice chat, and
 * video chat.
 * </p>
 */
]"
"[USAGE_TYPE_LONG_TEXT = ""long_text""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>
 * Type of usage for text interaction involving longer messages, which includes email.
 * </p>
 */
]"
"[USAGE_TYPE_SHORT_TEXT = ""short_text""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>
 * Type of usage for text interaction involving shorter messages, which includes SMS,
 * text chat with email addresses.
 * </p>
 */
]"
"[UNDEMOTE_METHOD = ""undemote""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The method to invoke in order to undemote a formerly demoted contact. The contact id of
 * the contact must be provided as an argument. If the contact was not previously demoted,
 * nothing will be done.
 * @hide
 */
]"
"[UNPINNED = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Default value for the pinned position of an unpinned contact.
 */
]"
"[DEMOTED = -1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value of pinned position for a contact that a user has indicated should be considered
 * of the lowest priority. It is up to the client application to determine how to present
 * such a contact - for example all the way at the bottom of a contact list, or simply
 * just hidden from view.
 */
]"
"[ACTION_QUICK_CONTACT = ""android.provider.action.QUICK_CONTACT""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Action used to launch the system contacts application and bring up a QuickContact dialog
 * for the provided {@link Contacts} entry.
 */
]"
"[EXTRA_TARGET_RECT = ""android.provider.extra.TARGET_RECT""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Extra used to specify pivot dialog location in screen coordinates.
 * @deprecated Use {@link Intent#setSourceBounds(Rect)} instead.
 * @hide
 */
]"
"[EXTRA_MODE = ""android.provider.extra.MODE""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Extra used to specify size of QuickContacts. Not all implementations of QuickContacts
 * will respect this extra's value.
 *
 * One of {@link #MODE_SMALL}, {@link #MODE_MEDIUM}, or {@link #MODE_LARGE}.
 */
]"
"[EXTRA_PRIORITIZED_MIMETYPE = ""android.provider.extra.PRIORITIZED_MIMETYPE""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Extra used to specify which mimetype should be prioritized in the QuickContacts UI.
 * For example, passing the value {@link CommonDataKinds.Phone#CONTENT_ITEM_TYPE} can
 * cause phone numbers to be displayed more prominently in QuickContacts.
 */
]"
"[EXTRA_EXCLUDE_MIMES = ""android.provider.extra.EXCLUDE_MIMES""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Extra used to indicate a list of specific MIME-types to exclude and not display in the
 * QuickContacts dialog. Stored as a {@link String} array.
 */
]"
"[MODE_SMALL = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Small QuickContact mode, usually presented with minimal actions.
 */
]"
"[MODE_MEDIUM = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Medium QuickContact mode, includes actions and light summary describing
 * the {@link Contacts} entry being shown. This may include social
 * status and presence details.
 */
]"
"[MODE_LARGE = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Large QuickContact mode, includes actions and larger, card-like summary
 * of the {@link Contacts} entry being shown. This may include detailed
 * information, such as a photo.
 */
]"
"[MODE_DEFAULT = MODE_LARGE]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(AUTHORITY_URI, ""display_photo"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this class, which allows access to full-size photos,
 * given a key.
 */
]"
"[CONTENT_MAX_DIMENSIONS_URI = Uri.withAppendedPath(AUTHORITY_URI, ""photo_dimensions"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This URI allows the caller to query for the maximum dimensions of a display photo
 * or thumbnail.  Requests to this URI can be performed on the UI thread because
 * they are always unblocking.
 */
]"
"[DISPLAY_MAX_DIM = ""display_max_dim""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Queries to {@link ContactsContract.DisplayPhoto#CONTENT_MAX_DIMENSIONS_URI} will
 * contain this column, populated with the maximum height and width (in pixels)
 * that will be stored for a display photo.  Larger photos will be down-sized to
 * fit within a square of this many pixels.
 */
]"
"[THUMBNAIL_MAX_DIM = ""thumbnail_max_dim""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Queries to {@link ContactsContract.DisplayPhoto#CONTENT_MAX_DIMENSIONS_URI} will
 * contain this column, populated with the height and width (in pixels) for photo
 * thumbnails.
 */
]"
"[SEARCH_SUGGESTION_CLICKED = ""android.provider.Contacts.SEARCH_SUGGESTION_CLICKED""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This is the intent that is fired when a search suggestion is clicked on.
 */
]"
"[SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED = ""android.provider.Contacts.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This is the intent that is fired when a search suggestion for dialing a number
 * is clicked on.
 */
]"
"[SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED = ""android.provider.Contacts.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This is the intent that is fired when a search suggestion for creating a contact
 * is clicked on.
 */
]"
"[CONTACTS_DATABASE_CREATED = ""android.provider.Contacts.DATABASE_CREATED""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This is the intent that is fired when the contacts database is created. <p> The
 * READ_CONTACT permission is required to receive these broadcasts.
 */
]"
"[ATTACH_IMAGE = ""com.android.contacts.action.ATTACH_IMAGE""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Starts an Activity that lets the user pick a contact to attach an image to.
 * After picking the contact it launches the image cropper in face detection mode.
 */
]"
"[INVITE_CONTACT = ""com.android.contacts.action.INVITE_CONTACT""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This is the intent that is fired when the user clicks the ""invite to the network"" button
 * on a contact.  Only sent to an activity which is explicitly registered by a contact
 * provider which supports the ""invite to the network"" feature.
 * <p>
 * {@link Intent#getData()} contains the lookup URI for the contact.
 */
]"
"[SHOW_OR_CREATE_CONTACT = ""com.android.contacts.action.SHOW_OR_CREATE_CONTACT""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Takes as input a data URI with a mailto: or tel: scheme. If a single
 * contact exists with the given data it will be shown. If no contact
 * exists, a dialog will ask the user if they want to create a new
 * contact with the provided details filled in. If multiple contacts
 * share the data the user will be prompted to pick which contact they
 * want to view.
 * <p>
 * For <code>mailto:</code> URIs, the scheme specific portion must be a
 * raw email address, such as one built using
 * {@link Uri#fromParts(String, String, String)}.
 * <p>
 * For <code>tel:</code> URIs, the scheme specific portion is compared
 * to existing numbers using the standard caller ID lookup algorithm.
 * The number must be properly encoded, for example using
 * {@link Uri#fromParts(String, String, String)}.
 * <p>
 * Any extras from the {@link Insert} class will be passed along to the
 * create activity if there are no contacts to show.
 * <p>
 * Passing true for the {@link #EXTRA_FORCE_CREATE} extra will skip
 * prompting the user when the contact doesn't exist.
 */
]"
"[ACTION_GET_MULTIPLE_PHONES = ""com.android.contacts.action.GET_MULTIPLE_PHONES""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Starts an Activity that lets the user select the multiple phones from a
 * list of phone numbers which come from the contacts or
 * {@link #EXTRA_PHONE_URIS}.
 * <p>
 * The phone numbers being passed in through {@link #EXTRA_PHONE_URIS}
 * could belong to the contacts or not, and will be selected by default.
 * <p>
 * The user's selection will be returned from
 * {@link android.app.Activity#onActivityResult(int, int, android.content.Intent)}
 * if the resultCode is
 * {@link android.app.Activity#RESULT_OK}, the array of picked phone
 * numbers are in the Intent's
 * {@link #EXTRA_PHONE_URIS}; otherwise, the
 * {@link android.app.Activity#RESULT_CANCELED} is returned if the user
 * left the Activity without changing the selection.
 *
 * @hide
 */
]"
"[ACTION_PROFILE_CHANGED = ""android.provider.Contacts.PROFILE_CHANGED""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A broadcast action which is sent when any change has been made to the profile, such
 * as the profile name or the picture.  A receiver must have
 * the android.permission.READ_PROFILE permission.
 *
 * @hide
 */
]"
"[EXTRA_FORCE_CREATE = ""com.android.contacts.action.FORCE_CREATE""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used with {@link #SHOW_OR_CREATE_CONTACT} to force creating a new
 * contact if no matching contact found. Otherwise, default behavior is
 * to prompt user with dialog before creating.
 * <p>
 * Type: BOOLEAN
 */
]"
"[EXTRA_CREATE_DESCRIPTION = ""com.android.contacts.action.CREATE_DESCRIPTION""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used with {@link #SHOW_OR_CREATE_CONTACT} to specify an exact
 * description to be shown when prompting user about creating a new
 * contact.
 * <p>
 * Type: STRING
 */
]"
"[EXTRA_PHONE_URIS = ""com.android.contacts.extra.PHONE_URIS""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used with {@link #ACTION_GET_MULTIPLE_PHONES} as the input or output value.
 * <p>
 * The phone numbers want to be picked by default should be passed in as
 * input value. These phone numbers could belong to the contacts or not.
 * <p>
 * The phone numbers which were picked by the user are returned as output
 * value.
 * <p>
 * Type: array of URIs, the tel URI is used for the phone numbers which don't
 * belong to any contact, the content URI is used for phone id in contacts.
 *
 * @hide
 */
]"
"[EXTRA_TARGET_RECT = ""target_rect""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Optional extra used with {@link #SHOW_OR_CREATE_CONTACT} to specify a
 * dialog location using screen coordinates. When not specified, the
 * dialog will be centered.
 *
 * @hide
 */
]"
"[EXTRA_MODE = ""mode""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Optional extra used with {@link #SHOW_OR_CREATE_CONTACT} to specify a
 * desired dialog style, usually a variation on size. One of
 * {@link #MODE_SMALL}, {@link #MODE_MEDIUM}, or {@link #MODE_LARGE}.
 *
 * @hide
 */
]"
"[MODE_SMALL = 1]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value for {@link #EXTRA_MODE} to show a small-sized dialog.
 *
 * @hide
 */
]"
"[MODE_MEDIUM = 2]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value for {@link #EXTRA_MODE} to show a medium-sized dialog.
 *
 * @hide
 */
]"
"[MODE_LARGE = 3]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value for {@link #EXTRA_MODE} to show a large-sized dialog.
 *
 * @hide
 */
]"
"[EXTRA_EXCLUDE_MIMES = ""exclude_mimes""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Optional extra used with {@link #SHOW_OR_CREATE_CONTACT} to indicate
 * a list of specific MIME-types to exclude and not display. Stored as a
 * {@link String} array.
 *
 * @hide
 */
]"
"[ACTION = Intent.ACTION_INSERT]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The action code to use when adding a contact
 */
]"
"[FULL_MODE = ""full_mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If present, forces a bypass of quick insert mode.
 */
]"
"[NAME = ""name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact name.
 * <P>Type: String</P>
 */
]"
"[PHONETIC_NAME = ""phonetic_name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact phonetic name.
 * <P>Type: String</P>
 */
]"
"[COMPANY = ""company""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact company.
 * <P>Type: String</P>
 */
]"
"[JOB_TITLE = ""job_title""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact job title.
 * <P>Type: String</P>
 */
]"
"[NOTES = ""notes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact notes.
 * <P>Type: String</P>
 */
]"
"[PHONE = ""phone""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact phone number.
 * <P>Type: String</P>
 */
]"
"[PHONE_TYPE = ""phone_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact phone number type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Phone},
 * or a string specifying a custom label.</P>
 */
]"
"[PHONE_ISPRIMARY = ""phone_isprimary""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the phone isprimary flag.
 * <P>Type: boolean</P>
 */
]"
"[SECONDARY_PHONE = ""secondary_phone""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional second contact phone number.
 * <P>Type: String</P>
 */
]"
"[SECONDARY_PHONE_TYPE = ""secondary_phone_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional second contact phone number type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Phone},
 * or a string specifying a custom label.</P>
 */
]"
"[TERTIARY_PHONE = ""tertiary_phone""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional third contact phone number.
 * <P>Type: String</P>
 */
]"
"[TERTIARY_PHONE_TYPE = ""tertiary_phone_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional third contact phone number type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Phone},
 * or a string specifying a custom label.</P>
 */
]"
"[EMAIL = ""email""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact email address.
 * <P>Type: String</P>
 */
]"
"[EMAIL_TYPE = ""email_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact email type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Email}
 * or a string specifying a custom label.</P>
 */
]"
"[EMAIL_ISPRIMARY = ""email_isprimary""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the email isprimary flag.
 * <P>Type: boolean</P>
 */
]"
"[SECONDARY_EMAIL = ""secondary_email""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional second contact email address.
 * <P>Type: String</P>
 */
]"
"[SECONDARY_EMAIL_TYPE = ""secondary_email_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional second contact email type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Email}
 * or a string specifying a custom label.</P>
 */
]"
"[TERTIARY_EMAIL = ""tertiary_email""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional third contact email address.
 * <P>Type: String</P>
 */
]"
"[TERTIARY_EMAIL_TYPE = ""tertiary_email_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional third contact email type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Email}
 * or a string specifying a custom label.</P>
 */
]"
"[POSTAL = ""postal""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact postal address.
 * <P>Type: String</P>
 */
]"
"[POSTAL_TYPE = ""postal_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact postal address type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.StructuredPostal}
 * or a string specifying a custom label.</P>
 */
]"
"[POSTAL_ISPRIMARY = ""postal_isprimary""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the postal isprimary flag.
 * <P>Type: boolean</P>
 */
]"
"[IM_HANDLE = ""im_handle""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an IM handle.
 * <P>Type: String</P>
 */
]"
"[IM_PROTOCOL = ""im_protocol""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the IM protocol
 */
]"
"[IM_ISPRIMARY = ""im_isprimary""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the IM isprimary flag.
 * <P>Type: boolean</P>
 */
]"
"[DATA = ""data""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field that allows the client to supply multiple rows of
 * arbitrary data for a single contact created using the {@link Intent#ACTION_INSERT}
 * or edited using {@link Intent#ACTION_EDIT}. It is an ArrayList of
 * {@link ContentValues}, one per data row. Supplying this extra is
 * similar to inserting multiple rows into the {@link Data} table,
 * except the user gets a chance to see and edit them before saving.
 * Each ContentValues object must have a value for {@link Data#MIMETYPE}.
 * If supplied values are not visible in the editor UI, they will be
 * dropped.  Duplicate data will dropped.  Some fields
 * like {@link CommonDataKinds.Email#TYPE Email.TYPE} may be automatically
 * adjusted to comply with the constraints of the specific account type.
 * For example, an Exchange contact can only have one phone numbers of type Home,
 * so the contact editor may choose a different type for this phone number to
 * avoid dropping the valueable part of the row, which is the phone number.
 * <p>
 * Example:
 * <pre>
 * ArrayList&lt;ContentValues&gt; data = new ArrayList&lt;ContentValues&gt;();
 *
 * ContentValues row1 = new ContentValues();
 * row1.put(Data.MIMETYPE, Organization.CONTENT_ITEM_TYPE);
 * row1.put(Organization.COMPANY, ""Android"");
 * data.add(row1);
 *
 * ContentValues row2 = new ContentValues();
 * row2.put(Data.MIMETYPE, Email.CONTENT_ITEM_TYPE);
 * row2.put(Email.TYPE, Email.TYPE_CUSTOM);
 * row2.put(Email.LABEL, ""Green Bot"");
 * row2.put(Email.ADDRESS, ""android@android.com"");
 * data.add(row2);
 *
 * Intent intent = new Intent(Intent.ACTION_INSERT, Contacts.CONTENT_URI);
 * intent.putParcelableArrayListExtra(Insert.DATA, data);
 *
 * startActivity(intent);
 * </pre>
 */
]"
"[EXTRA_ACCOUNT = ""android.provider.extra.ACCOUNT""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to specify the account in which to create the new contact.
 * <p>
 * If this value is not provided, the user is presented with a disambiguation
 * dialog to chose an account
 * <p>
 * Type: {@link Account}
 */
]"
"[EXTRA_DATA_SET = ""android.provider.extra.DATA_SET""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to specify the data set within the account in which to create the
 * new contact.
 * <p>
 * This value is optional - if it is not specified, the contact will be
 * created in the base account, with no data set.
 * <p>
 * Type: String
 */
]"
"[DOCK_SOUNDS_ENABLED = ""dock_sounds_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to play a sound for dock events.
 * @hide
 */
]"
"[LOCK_SOUND = ""lock_sound""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URI for the ""device locked"" (keyguard shown) sound.
 * @hide
 */
]"
"[UNLOCK_SOUND = ""unlock_sound""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URI for the ""device unlocked"" sound.
 * @hide
 */
]"
"[TRUSTED_SOUND = ""trusted_sound""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URI for the ""device is trusted"" sound, which is played when the device enters the trusted
 * state without unlocking.
 * @hide
 */
]"
"[LOW_BATTERY_SOUND = ""low_battery_sound""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URI for the low battery sound file.
 * @hide
 */
]"
"[POWER_SOUNDS_ENABLED = ""power_sounds_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to play a sound for low-battery alerts.
 * @hide
 */
]"
"[WIRELESS_CHARGING_STARTED_SOUND = ""wireless_charging_started_sound""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URI for the ""wireless charging started"" sound.
 * @hide
 */
]"
"[CHARGING_SOUNDS_ENABLED = ""charging_sounds_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to play a sound for charging events.
 * @hide
 */
]"
"[STAY_ON_WHILE_PLUGGED_IN = ""stay_on_while_plugged_in""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether we keep the device on while the device is plugged in.
 * Supported values are:
 * <ul>
 * <li>{@code 0} to never stay on while plugged in</li>
 * <li>{@link BatteryManager#BATTERY_PLUGGED_AC} to stay on for AC charger</li>
 * <li>{@link BatteryManager#BATTERY_PLUGGED_USB} to stay on for USB charger</li>
 * <li>{@link BatteryManager#BATTERY_PLUGGED_WIRELESS} to stay on for wireless charger</li>
 * </ul>
 * These values can be OR-ed together.
 */
]"
"[BUGREPORT_IN_POWER_MENU = ""bugreport_in_power_menu""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * When the user has enable the option to have a ""bug report"" command
 * in the power menu.
 * @hide
 */
]"
"[ADB_ENABLED = ""adb_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether ADB is enabled.
 */
]"
"[DEBUG_VIEW_ATTRIBUTES = ""debug_view_attributes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether Views are allowed to save their attribute data.
 * @hide
 */
]"
"[ASSISTED_GPS_ENABLED = ""assisted_gps_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether assisted GPS should be enabled or not.
 * @hide
 */
]"
"[BLUETOOTH_ON = ""bluetooth_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether bluetooth is enabled/disabled
 * 0=disabled. 1=enabled.
 */
]"
"[CDMA_CELL_BROADCAST_SMS = ""cdma_cell_broadcast_sms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * CDMA Cell Broadcast SMS
 * 0 = CDMA Cell Broadcast SMS disabled
 * 1 = CDMA Cell Broadcast SMS enabled
 * @hide
 */
]"
"[CDMA_ROAMING_MODE = ""roaming_settings""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The CDMA roaming mode 0 = Home Networks, CDMA default
 * 1 = Roaming on Affiliated networks
 * 2 = Roaming on any networks
 * @hide
 */
]"
"[CDMA_SUBSCRIPTION_MODE = ""subscription_mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The CDMA subscription mode 0 = RUIM/SIM (default)
 * 1 = NV
 * @hide
 */
]"
"[DATA_ACTIVITY_TIMEOUT_MOBILE = ""data_activity_timeout_mobile""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Inactivity timeout to track mobile data activity.
 *
 * If set to a positive integer, it indicates the inactivity timeout value in seconds to
 * infer the data activity of mobile network. After a period of no activity on mobile
 * networks with length specified by the timeout, an {@code ACTION_DATA_ACTIVITY_CHANGE}
 * intent is fired to indicate a transition of network status from ""active"" to ""idle"". Any
 * subsequent activity on mobile networks triggers the firing of {@code
 * ACTION_DATA_ACTIVITY_CHANGE} intent indicating transition from ""idle"" to ""active"".
 *
 * Network activity refers to transmitting or receiving data on the network interfaces.
 *
 * Tracking is disabled if set to zero or negative value.
 *
 * @hide
 */
]"
"[DATA_ACTIVITY_TIMEOUT_WIFI = ""data_activity_timeout_wifi""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Timeout to tracking Wifi data activity. Same as {@code DATA_ACTIVITY_TIMEOUT_MOBILE}
 * but for Wifi network.
 * @hide
 */
]"
"[DATA_ROAMING = ""data_roaming""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether or not data roaming is enabled. (0 = false, 1 = true)
 */
]"
"[MDC_INITIAL_MAX_RETRY = ""mdc_initial_max_retry""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The value passed to a Mobile DataConnection via bringUp which defines the
 * number of retries to preform when setting up the initial connection. The default
 * value defined in DataConnectionTrackerBase#DEFAULT_MDC_INITIAL_RETRY is currently 1.
 * @hide
 */
]"
"[DEVELOPMENT_SETTINGS_ENABLED = ""development_settings_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether user has enabled development settings.
 */
]"
"[DEVICE_PROVISIONED = ""device_provisioned""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the device has been provisioned (0 = false, 1 = true)
 */
]"
"[DISPLAY_DENSITY_FORCED = ""display_density_forced""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The saved value for WindowManagerService.setForcedDisplayDensity().
 * One integer in dpi.  If unset, then use the real display density.
 * @hide
 */
]"
"[DISPLAY_SIZE_FORCED = ""display_size_forced""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The saved value for WindowManagerService.setForcedDisplaySize().
 * Two integers separated by a comma.  If unset, then use the real display size.
 * @hide
 */
]"
"[DISPLAY_SCALING_FORCE = ""display_scaling_force""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The saved value for WindowManagerService.setForcedDisplayScalingMode().
 * 0 or unset if scaling is automatic, 1 if scaling is disabled.
 * @hide
 */
]"
"[DOWNLOAD_MAX_BYTES_OVER_MOBILE = ""download_manager_max_bytes_over_mobile""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The maximum size, in bytes, of a download that the download manager will transfer over
 * a non-wifi connection.
 * @hide
 */
]"
"[DOWNLOAD_RECOMMENDED_MAX_BYTES_OVER_MOBILE = ""download_manager_recommended_max_bytes_over_mobile""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The recommended maximum size, in bytes, of a download that the download manager should
 * transfer over a non-wifi connection. Over this size, the use will be warned, but will
 * have the option to start the download over the mobile connection anyway.
 * @hide
 */
]"
"[INSTALL_NON_MARKET_APPS = Secure.INSTALL_NON_MARKET_APPS]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @deprecated Use {@link android.provider.Settings.Secure#INSTALL_NON_MARKET_APPS} instead
 */
]"
"[HDMI_CONTROL_ENABLED = ""hdmi_control_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether HDMI control shall be enabled. If disabled, no CEC/MHL command will be
 * sent or processed. (0 = false, 1 = true)
 * @hide
 */
]"
"[HDMI_SYSTEM_AUDIO_ENABLED = ""hdmi_system_audio_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether HDMI system audio is enabled. If enabled, TV internal speaker is muted,
 * and the output is redirected to AV Receiver connected via
 * {@Global#HDMI_SYSTEM_AUDIO_OUTPUT}.
 * @hide
 */
]"
"[HDMI_CONTROL_AUTO_WAKEUP_ENABLED = ""hdmi_control_auto_wakeup_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether TV will automatically turn on upon reception of the CEC command
 * &lt;Text View On&gt; or &lt;Image View On&gt;. (0 = false, 1 = true)
 * @hide
 */
]"
"[HDMI_CONTROL_AUTO_DEVICE_OFF_ENABLED = ""hdmi_control_auto_device_off_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether TV will also turn off other CEC devices when it goes to standby mode.
 * (0 = false, 1 = true)
 * @hide
 */
]"
"[LEGACY_DHCP_CLIENT = ""legacy_dhcp_client""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to use the DHCP client from Lollipop and earlier instead of the newer Android DHCP
 * client.
 * (0 = false, 1 = true)
 * @hide
 */
]"
"[MHL_INPUT_SWITCHING_ENABLED = ""mhl_input_switching_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether TV will switch to MHL port when a mobile device is plugged in.
 * (0 = false, 1 = true)
 * @hide
 */
]"
"[MHL_POWER_CHARGE_ENABLED = ""mhl_power_charge_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether TV will charge the mobile device connected at MHL port. (0 = false, 1 = true)
 * @hide
 */
]"
"[MOBILE_DATA = ""mobile_data""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether mobile data connections are allowed by the user.  See
 * ConnectivityManager for more info.
 * @hide
 */
]"
"[MOBILE_DATA_ALWAYS_ON = ""mobile_data_always_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the mobile data connection should remain active even when higher
 * priority networks like WiFi are active, to help make network switching faster.
 *
 * See ConnectivityService for more info.
 *
 * (0 = disabled, 1 = enabled)
 * @hide
 */
]"
"[NETSTATS_ENABLED = ""netstats_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_POLL_INTERVAL = ""netstats_poll_interval""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_TIME_CACHE_MAX_AGE = ""netstats_time_cache_max_age""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_GLOBAL_ALERT_BYTES = ""netstats_global_alert_bytes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_SAMPLE_ENABLED = ""netstats_sample_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_DEV_BUCKET_DURATION = ""netstats_dev_bucket_duration""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_DEV_PERSIST_BYTES = ""netstats_dev_persist_bytes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_DEV_ROTATE_AGE = ""netstats_dev_rotate_age""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_DEV_DELETE_AGE = ""netstats_dev_delete_age""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_UID_BUCKET_DURATION = ""netstats_uid_bucket_duration""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_UID_PERSIST_BYTES = ""netstats_uid_persist_bytes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_UID_ROTATE_AGE = ""netstats_uid_rotate_age""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_UID_DELETE_AGE = ""netstats_uid_delete_age""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_UID_TAG_BUCKET_DURATION = ""netstats_uid_tag_bucket_duration""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_UID_TAG_PERSIST_BYTES = ""netstats_uid_tag_persist_bytes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_UID_TAG_ROTATE_AGE = ""netstats_uid_tag_rotate_age""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_UID_TAG_DELETE_AGE = ""netstats_uid_tag_delete_age""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETWORK_PREFERENCE = ""network_preference""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * User preference for which network(s) should be used. Only the
 * connectivity service should touch this.
 */
]"
"[NETWORK_SCORER_APP = ""network_scorer_app""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Which package name to use for network scoring. If null, or if the package is not a valid
 * scorer app, external network scores will neither be requested nor accepted.
 * @hide
 */
]"
"[NITZ_UPDATE_DIFF = ""nitz_update_diff""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If the NITZ_UPDATE_DIFF time is exceeded then an automatic adjustment
 * to SystemClock will be allowed even if NITZ_UPDATE_SPACING has not been
 * exceeded.
 * @hide
 */
]"
"[NITZ_UPDATE_SPACING = ""nitz_update_spacing""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The length of time in milli-seconds that automatic small adjustments to
 * SystemClock are ignored if NITZ_UPDATE_DIFF is not exceeded.
 * @hide
 */
]"
"[NTP_SERVER = ""ntp_server""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Preferred NTP server. {@hide}
 */
]"
"[NTP_TIMEOUT = ""ntp_timeout""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Timeout in milliseconds to wait for NTP server. {@hide}
 */
]"
"[STORAGE_BENCHMARK_INTERVAL = ""storage_benchmark_interval""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[PACKAGE_VERIFIER_ENABLE = ""package_verifier_enable""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the package manager should send package verification broadcasts for verifiers to
 * review apps prior to installation.
 * 1 = request apps to be verified prior to installation, if a verifier exists.
 * 0 = do not verify apps before installation
 * @hide
 */
]"
"[PACKAGE_VERIFIER_TIMEOUT = ""verifier_timeout""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Timeout for package verification.
 * @hide
 */
]"
"[PACKAGE_VERIFIER_DEFAULT_RESPONSE = ""verifier_default_response""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Default response code for package verification.
 * @hide
 */
]"
"[PACKAGE_VERIFIER_SETTING_VISIBLE = ""verifier_setting_visible""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Show package verification setting in the Settings app.
 * 1 = show (default)
 * 0 = hide
 * @hide
 */
]"
"[PACKAGE_VERIFIER_INCLUDE_ADB = ""verifier_verify_adb_installs""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Run package verification on apps installed through ADB/ADT/USB
 * 1 = perform package verification on ADB installs (default)
 * 0 = bypass package verification on ADB installs
 * @hide
 */
]"
"[FSTRIM_MANDATORY_INTERVAL = ""fstrim_mandatory_interval""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Time since last fstrim (milliseconds) after which we force one to happen
 * during device startup.  If unset, the default is 3 days.
 * @hide
 */
]"
"[PDP_WATCHDOG_POLL_INTERVAL_MS = ""pdp_watchdog_poll_interval_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds at which to check packet counts on the
 * mobile data interface when screen is on, to detect possible data
 * connection problems.
 * @hide
 */
]"
"[PDP_WATCHDOG_LONG_POLL_INTERVAL_MS = ""pdp_watchdog_long_poll_interval_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds at which to check packet counts on the
 * mobile data interface when screen is off, to detect possible data
 * connection problems.
 * @hide
 */
]"
"[PDP_WATCHDOG_ERROR_POLL_INTERVAL_MS = ""pdp_watchdog_error_poll_interval_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds at which to check packet counts on the
 * mobile data interface after {@link #PDP_WATCHDOG_TRIGGER_PACKET_COUNT}
 * outgoing packets has been reached without incoming packets.
 * @hide
 */
]"
"[PDP_WATCHDOG_TRIGGER_PACKET_COUNT = ""pdp_watchdog_trigger_packet_count""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of outgoing packets sent without seeing an incoming packet
 * that triggers a countdown (of {@link #PDP_WATCHDOG_ERROR_POLL_COUNT}
 * device is logged to the event log
 * @hide
 */
]"
"[PDP_WATCHDOG_ERROR_POLL_COUNT = ""pdp_watchdog_error_poll_count""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of polls to perform (at {@link #PDP_WATCHDOG_ERROR_POLL_INTERVAL_MS})
 * after hitting {@link #PDP_WATCHDOG_TRIGGER_PACKET_COUNT} before
 * attempting data connection recovery.
 * @hide
 */
]"
"[PDP_WATCHDOG_MAX_PDP_RESET_FAIL_COUNT = ""pdp_watchdog_max_pdp_reset_fail_count""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of failed PDP reset attempts before moving to something more
 * drastic: re-registering to the network.
 * @hide
 */
]"
"[SAMPLING_PROFILER_MS = ""sampling_profiler_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A positive value indicates how often the SamplingProfiler
 * should take snapshots. Zero value means SamplingProfiler
 * is disabled.
 *
 * @hide
 */
]"
"[SETUP_PREPAID_DATA_SERVICE_URL = ""setup_prepaid_data_service_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL to open browser on to allow user to manage a prepay account
 * @hide
 */
]"
"[SETUP_PREPAID_DETECTION_TARGET_URL = ""setup_prepaid_detection_target_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL to attempt a GET on to see if this is a prepay device
 * @hide
 */
]"
"[SETUP_PREPAID_DETECTION_REDIR_HOST = ""setup_prepaid_detection_redir_host""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Host to check for a redirect to after an attempt to GET
 * SETUP_PREPAID_DETECTION_TARGET_URL. (If we redirected there,
 * this is a prepaid device with zero balance.)
 * @hide
 */
]"
"[SMS_OUTGOING_CHECK_INTERVAL_MS = ""sms_outgoing_check_interval_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds at which to check the number of SMS sent out without asking
 * for use permit, to limit the un-authorized SMS usage.
 *
 * @hide
 */
]"
"[SMS_OUTGOING_CHECK_MAX_COUNT = ""sms_outgoing_check_max_count""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of outgoing SMS sent without asking for user permit (of {@link
 * #SMS_OUTGOING_CHECK_INTERVAL_MS}
 *
 * @hide
 */
]"
"[SMS_SHORT_CODE_CONFIRMATION = ""sms_short_code_confirmation""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to disable SMS short code confirmation - defaults to true.
 * True indcates we will do the check, etc.  Set to false to disable.
 * @see com.android.internal.telephony.SmsUsageMonitor
 * @hide
 */
]"
"[SMS_SHORT_CODE_RULE = ""sms_short_code_rule""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to select which country we use to determine premium sms codes.
 * One of com.android.internal.telephony.SMSDispatcher.PREMIUM_RULE_USE_SIM,
 * com.android.internal.telephony.SMSDispatcher.PREMIUM_RULE_USE_NETWORK,
 * or com.android.internal.telephony.SMSDispatcher.PREMIUM_RULE_USE_BOTH.
 * @hide
 */
]"
"[TCP_DEFAULT_INIT_RWND = ""tcp_default_init_rwnd""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to select TCP's default initial receiver window size in segments - defaults to a build config value
 * @hide
 */
]"
"[TETHER_SUPPORTED = ""tether_supported""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to disable Tethering on a device - defaults to true
 * @hide
 */
]"
"[TETHER_DUN_REQUIRED = ""tether_dun_required""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to require DUN APN on the device or not - defaults to a build config value
 * which defaults to false
 * @hide
 */
]"
"[TETHER_DUN_APN = ""tether_dun_apn""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to hold a gservices-provisioned apn value for DUN.  If set, or the
 * corresponding build config values are set it will override the APN DB
 * values.
 * Consists of a comma seperated list of strings:
 * ""name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type""
 * note that empty fields can be ommitted: ""name,apn,,,,,,,,,310,260,,DUN""
 * @hide
 */
]"
"[USB_MASS_STORAGE_ENABLED = ""usb_mass_storage_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * USB Mass Storage Enabled
 */
]"
"[USE_GOOGLE_MAIL = ""use_google_mail""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If this setting is set (to anything), then all references
 * to Gmail on the device must change to Google Mail.
 */
]"
"[WEBVIEW_DATA_REDUCTION_PROXY_KEY = ""webview_data_reduction_proxy_key""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Webview Data reduction proxy key.
 * @hide
 */
]"
"[WIFI_DISPLAY_ON = ""wifi_display_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether Wifi display is enabled/disabled
 * 0=disabled. 1=enabled.
 * @hide
 */
]"
"[WIFI_DISPLAY_CERTIFICATION_ON = ""wifi_display_certification_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether Wifi display certification mode is enabled/disabled
 * 0=disabled. 1=enabled.
 * @hide
 */
]"
"[WIFI_DISPLAY_WPS_CONFIG = ""wifi_display_wps_config""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * WPS Configuration method used by Wifi display, this setting only
 * takes effect when WIFI_DISPLAY_CERTIFICATION_ON is 1 (enabled).
 *
 * Possible values are:
 *
 * WpsInfo.INVALID: use default WPS method chosen by framework
 * WpsInfo.PBC    : use Push button
 * WpsInfo.KEYPAD : use Keypad
 * WpsInfo.DISPLAY: use Display
 * @hide
 */
]"
"[WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON = ""wifi_networks_available_notification_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to notify the user of open networks.
 * <p>
 * If not connected and the scan results have an open network, we will
 * put this notification up. If we attempt to connect to a network or
 * the open network(s) disappear, we remove the notification. When we
 * show the notification, we will not show it again for
 * {@link android.provider.Settings.Secure#WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY} time.
 */
]"
"[WIMAX_NETWORKS_AVAILABLE_NOTIFICATION_ON = ""wimax_networks_available_notification_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY = ""wifi_networks_available_repeat_delay""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Delay (in seconds) before repeating the Wi-Fi networks available notification.
 * Connecting to a network will reset the timer.
 */
]"
"[WIFI_COUNTRY_CODE = ""wifi_country_code""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * 802.11 country code in ISO 3166 format
 * @hide
 */
]"
"[WIFI_FRAMEWORK_SCAN_INTERVAL_MS = ""wifi_framework_scan_interval_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds to issue wake up scans when wifi needs
 * to connect. This is necessary to connect to an access point when
 * device is on the move and the screen is off.
 * @hide
 */
]"
"[WIFI_IDLE_MS = ""wifi_idle_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds after which Wi-Fi is considered idle.
 * When idle, it is possible for the device to be switched from Wi-Fi to
 * the mobile data network.
 * @hide
 */
]"
"[WIFI_NUM_OPEN_NETWORKS_KEPT = ""wifi_num_open_networks_kept""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * When the number of open networks exceeds this number, the
 * least-recently-used excess networks will be removed.
 */
]"
"[WIFI_ON = ""wifi_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the Wi-Fi should be on.  Only the Wi-Fi service should touch this.
 */
]"
"[WIFI_SCAN_ALWAYS_AVAILABLE = ""wifi_scan_always_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Setting to allow scans to be enabled even wifi is turned off for connectivity.
 * @hide
 */
]"
"[BLE_SCAN_ALWAYS_AVAILABLE = ""ble_scan_always_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Settings to allow BLE scans to be enabled even when Bluetooth is turned off for
 * connectivity.
 * @hide
 */
]"
"[WIFI_SAVED_STATE = ""wifi_saved_state""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to save the Wifi_ON state prior to tethering.
 * This state will be checked to restore Wifi after
 * the user turns off tethering.
 *
 * @hide
 */
]"
"[WIFI_SUPPLICANT_SCAN_INTERVAL_MS = ""wifi_supplicant_scan_interval_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds to scan as used by the wifi supplicant
 * @hide
 */
]"
"[WIFI_ENHANCED_AUTO_JOIN = ""wifi_enhanced_auto_join""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * whether frameworks handles wifi auto-join
 * @hide
 */
]"
"[WIFI_NETWORK_SHOW_RSSI = ""wifi_network_show_rssi""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * whether settings show RSSI
 * @hide
 */
]"
"[WIFI_SCAN_INTERVAL_WHEN_P2P_CONNECTED_MS = ""wifi_scan_interval_p2p_connected_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds to scan at supplicant when p2p is connected
 * @hide
 */
]"
"[WIFI_WATCHDOG_ON = ""wifi_watchdog_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the Wi-Fi watchdog is enabled.
 */
]"
"[WIFI_WATCHDOG_POOR_NETWORK_TEST_ENABLED = ""wifi_watchdog_poor_network_test_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Setting to turn off poor network avoidance on Wi-Fi. Feature is enabled by default and
 * the setting needs to be set to 0 to disable it.
 * @hide
 */
]"
"[WIFI_SUSPEND_OPTIMIZATIONS_ENABLED = ""wifi_suspend_optimizations_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Setting to turn on suspend optimizations at screen off on Wi-Fi. Enabled by default and
 * needs to be set to 0 to disable it.
 * @hide
 */
]"
"[WIFI_MAX_DHCP_RETRY_COUNT = ""wifi_max_dhcp_retry_count""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The maximum number of times we will retry a connection to an access
 * point for which we have failed in acquiring an IP address from DHCP.
 * A value of N means that we will make N+1 connection attempts in all.
 */
]"
"[WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS = ""wifi_mobile_data_transition_wakelock_timeout_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Maximum amount of time in milliseconds to hold a wakelock while waiting for mobile
 * data connectivity to be established after a disconnect from Wi-Fi.
 */
]"
"[WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN = ""wifi_device_owner_configs_lockdown""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This setting controls whether WiFi configurations created by a Device Owner app
 * should be locked down (that is, be editable or removable only by the Device Owner App,
 * not even by Settings app).
 * This setting takes integer values. Non-zero values mean DO created configurations
 * are locked down. Value of zero means they are not. Default value in the absence of
 * actual value to this setting is 0.
 */
]"
"[WIFI_FREQUENCY_BAND = ""wifi_frequency_band""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The operational wifi frequency band
 * Set to one of {@link WifiManager#WIFI_FREQUENCY_BAND_AUTO},
 * {@link WifiManager#WIFI_FREQUENCY_BAND_5GHZ} or
 * {@link WifiManager#WIFI_FREQUENCY_BAND_2GHZ}
 *
 * @hide
 */
]"
"[WIFI_P2P_DEVICE_NAME = ""wifi_p2p_device_name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The Wi-Fi peer-to-peer device name
 * @hide
 */
]"
"[WIFI_REENABLE_DELAY_MS = ""wifi_reenable_delay""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The min time between wifi disable and wifi enable
 * @hide
 */
]"
"[WIFI_EPHEMERAL_OUT_OF_RANGE_TIMEOUT_MS = ""wifi_ephemeral_out_of_range_timeout_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Timeout for ephemeral networks when all known BSSIDs go out of range. We will disconnect
 * from an ephemeral network if there is no BSSID for that network with a non-null score that
 * has been seen in this time period.
 *
 * If this is less than or equal to zero, we use a more conservative behavior and only check
 * for a non-null score from the currently connected or target BSSID.
 * @hide
 */
]"
"[DATA_STALL_ALARM_NON_AGGRESSIVE_DELAY_IN_MS = ""data_stall_alarm_non_aggressive_delay_in_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of milliseconds to delay when checking for data stalls during
 * non-aggressive detection. (screen is turned off.)
 * @hide
 */
]"
"[DATA_STALL_ALARM_AGGRESSIVE_DELAY_IN_MS = ""data_stall_alarm_aggressive_delay_in_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of milliseconds to delay when checking for data stalls during
 * aggressive detection. (screen on or suspected data stall)
 * @hide
 */
]"
"[PROVISIONING_APN_ALARM_DELAY_IN_MS = ""provisioning_apn_alarm_delay_in_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of milliseconds to allow the provisioning apn to remain active
 * @hide
 */
]"
"[GPRS_REGISTER_CHECK_PERIOD_MS = ""gprs_register_check_period_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds at which to check gprs registration
 * after the first registration mismatch of gprs and voice service,
 * to detect possible data network registration problems.
 *
 * @hide
 */
]"
"[WTF_IS_FATAL = ""wtf_is_fatal""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Nonzero causes Log.wtf() to crash.
 * @hide
 */
]"
"[MODE_RINGER = ""mode_ringer""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Ringer mode. This is used internally, changing this value will not
 * change the ringer mode. See AudioManager.
 */
]"
"[OVERLAY_DISPLAY_DEVICES = ""overlay_display_devices""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Overlay display devices setting.
 * The associated value is a specially formatted string that describes the
 * size and density of simulated secondary display devices.
 * <p>
 * Format: {width}x{height}/{dpi};...
 * </p><p>
 * Example:
 * <ul>
 * <li><code>1280x720/213</code>: make one overlay that is 1280x720 at 213dpi.</li>
 * <li><code>1920x1080/320;1280x720/213</code>: make two overlays, the first
 * at 1080p and the second at 720p.</li>
 * <li>If the value is empty, then no overlay display devices are created.</li>
 * </ul></p>
 *
 * @hide
 */
]"
"[BATTERY_DISCHARGE_DURATION_THRESHOLD = ""battery_discharge_duration_threshold""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Threshold values for the duration and level of a discharge cycle,
 * under which we log discharge cycle info.
 *
 * @hide
 */
]"
"[BATTERY_DISCHARGE_THRESHOLD = ""battery_discharge_threshold""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[SEND_ACTION_APP_ERROR = ""send_action_app_error""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Flag for allowing ActivityManagerService to send ACTION_APP_ERROR
 * intents on application crashes and ANRs. If this is disabled, the
 * crash/ANR dialog will never display the ""Report"" button.
 * <p>
 * Type: int (0 = disallow, 1 = allow)
 *
 * @hide
 */
]"
"[DROPBOX_AGE_SECONDS = ""dropbox_age_seconds""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Maximum age of entries kept by {@link DropBoxManager}.
 *
 * @hide
 */
]"
"[DROPBOX_MAX_FILES = ""dropbox_max_files""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Maximum number of entry files which {@link DropBoxManager} will keep
 * around.
 *
 * @hide
 */
]"
"[DROPBOX_QUOTA_KB = ""dropbox_quota_kb""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Maximum amount of disk space used by {@link DropBoxManager} no matter
 * what.
 *
 * @hide
 */
]"
"[DROPBOX_QUOTA_PERCENT = ""dropbox_quota_percent""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Percent of free disk (excluding reserve) which {@link DropBoxManager}
 * will use.
 *
 * @hide
 */
]"
"[DROPBOX_RESERVE_PERCENT = ""dropbox_reserve_percent""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Percent of total disk which {@link DropBoxManager} will never dip
 * into.
 *
 * @hide
 */
]"
"[DROPBOX_TAG_PREFIX = ""dropbox:""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Prefix for per-tag dropbox disable/enable settings.
 *
 * @hide
 */
]"
"[ERROR_LOGCAT_PREFIX = ""logcat_for_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Lines of logcat to include with system crash/ANR/etc. reports, as a
 * prefix of the dropbox tag of the report type. For example,
 * ""logcat_for_system_server_anr"" controls the lines of logcat captured
 * with system server ANR reports. 0 to disable.
 *
 * @hide
 */
]"
"[SYS_FREE_STORAGE_LOG_INTERVAL = ""sys_free_storage_log_interval""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in minutes after which the amount of free storage left
 * on the device is logged to the event log
 *
 * @hide
 */
]"
"[DISK_FREE_CHANGE_REPORTING_THRESHOLD = ""disk_free_change_reporting_threshold""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Threshold for the amount of change in disk free space required to
 * report the amount of free space. Used to prevent spamming the logs
 * when the disk free space isn't changing frequently.
 *
 * @hide
 */
]"
"[SYS_STORAGE_THRESHOLD_PERCENTAGE = ""sys_storage_threshold_percentage""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Minimum percentage of free storage on the device that is used to
 * determine if the device is running low on storage. The default is 10.
 * <p>
 * Say this value is set to 10, the device is considered running low on
 * storage if 90% or more of the device storage is filled up.
 *
 * @hide
 */
]"
"[SYS_STORAGE_THRESHOLD_MAX_BYTES = ""sys_storage_threshold_max_bytes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Maximum byte size of the low storage threshold. This is to ensure
 * that {@link #SYS_STORAGE_THRESHOLD_PERCENTAGE} does not result in an
 * overly large threshold for large storage devices. Currently this must
 * be less than 2GB. This default is 500MB.
 *
 * @hide
 */
]"
"[SYS_STORAGE_FULL_THRESHOLD_BYTES = ""sys_storage_full_threshold_bytes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Minimum bytes of free storage on the device before the data partition
 * is considered full. By default, 1 MB is reserved to avoid system-wide
 * SQLite disk full exceptions.
 *
 * @hide
 */
]"
"[SYNC_MAX_RETRY_DELAY_IN_SECONDS = ""sync_max_retry_delay_in_seconds""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The maximum reconnect delay for short network outages or when the
 * network is suspended due to phone use.
 *
 * @hide
 */
]"
"[CONNECTIVITY_CHANGE_DELAY = ""connectivity_change_delay""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of milliseconds to delay before sending out
 * {@link ConnectivityManager#CONNECTIVITY_ACTION} broadcasts. Ignored.
 *
 * @hide
 */
]"
"[CONNECTIVITY_SAMPLING_INTERVAL_IN_SECONDS = ""connectivity_sampling_interval_in_seconds""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PAC_CHANGE_DELAY = ""pac_change_delay""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The series of successively longer delays used in retrying to download PAC file.
 * Last delay is used between successful PAC downloads.
 *
 * @hide
 */
]"
"[CAPTIVE_PORTAL_DETECTION_ENABLED = ""captive_portal_detection_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Setting to turn off captive portal detection. Feature is enabled by
 * default and the setting needs to be set to 0 to disable it.
 *
 * @hide
 */
]"
"[CAPTIVE_PORTAL_SERVER = ""captive_portal_server""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The server used for captive portal detection upon a new conection. A
 * 204 response code from the server is used for validation.
 *
 * @hide
 */
]"
"[NSD_ON = ""nsd_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether network service discovery is enabled.
 *
 * @hide
 */
]"
"[SET_INSTALL_LOCATION = ""set_install_location""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Let user pick default install location.
 *
 * @hide
 */
]"
"[DEFAULT_INSTALL_LOCATION = ""default_install_location""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Default install location value.
 * 0 = auto, let system decide
 * 1 = internal
 * 2 = sdcard
 * @hide
 */
]"
"[INET_CONDITION_DEBOUNCE_UP_DELAY = ""inet_condition_debounce_up_delay""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * ms during which to consume extra events related to Inet connection
 * condition after a transtion to fully-connected
 *
 * @hide
 */
]"
"[INET_CONDITION_DEBOUNCE_DOWN_DELAY = ""inet_condition_debounce_down_delay""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * ms during which to consume extra events related to Inet connection
 * condtion after a transtion to partly-connected
 *
 * @hide
 */
]"
"[READ_EXTERNAL_STORAGE_ENFORCED_DEFAULT = ""read_external_storage_enforced_default""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[HTTP_PROXY = ""http_proxy""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Host name and port for global http proxy. Uses ':' seperator for
 * between host and port.
 */
]"
"[GLOBAL_HTTP_PROXY_HOST = ""global_http_proxy_host""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Host name for global http proxy. Set via ConnectivityManager.
 *
 * @hide
 */
]"
"[GLOBAL_HTTP_PROXY_PORT = ""global_http_proxy_port""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Integer host port for global http proxy. Set via ConnectivityManager.
 *
 * @hide
 */
]"
"[GLOBAL_HTTP_PROXY_EXCLUSION_LIST = ""global_http_proxy_exclusion_list""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Exclusion list for global proxy. This string contains a list of
 * comma-separated domains where the global proxy does not apply.
 * Domains should be listed in a comma- separated list. Example of
 * acceptable formats: "".domain1.com,my.domain2.com"" Use
 * ConnectivityManager to set/get.
 *
 * @hide
 */
]"
"[GLOBAL_HTTP_PROXY_PAC = ""global_proxy_pac_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The location PAC File for the proxy.
 * @hide
 */
]"
"[SET_GLOBAL_HTTP_PROXY = ""set_global_http_proxy""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Enables the UI setting to allow the user to specify the global HTTP
 * proxy and associated exclusion list.
 *
 * @hide
 */
]"
"[DEFAULT_DNS_SERVER = ""default_dns_server""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Setting for default DNS in case nobody suggests one
 *
 * @hide
 */
]"
"[BLUETOOTH_HEADSET_PRIORITY_PREFIX = ""bluetooth_headset_priority_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[BLUETOOTH_A2DP_SINK_PRIORITY_PREFIX = ""bluetooth_a2dp_sink_priority_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[BLUETOOTH_INPUT_DEVICE_PRIORITY_PREFIX = ""bluetooth_input_device_priority_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[BLUETOOTH_MAP_PRIORITY_PREFIX = ""bluetooth_map_priority_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[BLUETOOTH_SAP_PRIORITY_PREFIX = ""bluetooth_sap_priority_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[DEVICE_IDLE_CONSTANTS = ""device_idle_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Device Idle (Doze) specific settings.
 * This is encoded as a key=value list, separated by commas. Ex:
 *
 * ""inactive_timeout=60000,sensing_timeout=400000""
 *
 * The following keys are supported:
 *
 * <pre>
 * inactive_to                      (long)
 * sensing_to                       (long)
 * motion_inactive_to               (long)
 * idle_after_inactive_to           (long)
 * idle_pending_to                  (long)
 * max_idle_pending_to              (long)
 * idle_pending_factor              (float)
 * idle_to                          (long)
 * max_idle_to                      (long)
 * idle_factor                      (float)
 * min_time_to_alarm                (long)
 * max_temp_app_whitelist_duration  (long)
 * </pre>
 *
 * <p>
 * Type: string
 * @hide
 * @see com.android.server.DeviceIdleController.Constants
 */
]"
"[APP_IDLE_CONSTANTS = ""app_idle_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * App standby (app idle) specific settings.
 * This is encoded as a key=value list, separated by commas. Ex:
 *
 * ""idle_duration=5000,parole_interval=4500""
 *
 * The following keys are supported:
 *
 * <pre>
 * idle_duration        (long)
 * wallclock_threshold  (long)
 * parole_interval      (long)
 * parole_duration      (long)
 * </pre>
 *
 * <p>
 * Type: string
 * @hide
 * @see com.android.server.usage.UsageStatsService.SettingsObserver
 */
]"
"[ALARM_MANAGER_CONSTANTS = ""alarm_manager_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Alarm manager specific settings.
 * This is encoded as a key=value list, separated by commas. Ex:
 *
 * ""min_futurity=5000,allow_while_idle_short_time=4500""
 *
 * The following keys are supported:
 *
 * <pre>
 * min_futurity                         (long)
 * min_interval                         (long)
 * allow_while_idle_short_time          (long)
 * allow_while_idle_long_time           (long)
 * allow_while_idle_whitelist_duration  (long)
 * </pre>
 *
 * <p>
 * Type: string
 * @hide
 * @see com.android.server.AlarmManagerService.Constants
 */
]"
"[WINDOW_ANIMATION_SCALE = ""window_animation_scale""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Scaling factor for normal window animations. Setting to 0 will
 * disable window animations.
 */
]"
"[TRANSITION_ANIMATION_SCALE = ""transition_animation_scale""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Scaling factor for activity transition animations. Setting to 0 will
 * disable window animations.
 */
]"
"[ANIMATOR_DURATION_SCALE = ""animator_duration_scale""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Scaling factor for Animator-based animations. This affects both the
 * start delay and duration of all such animations. Setting to 0 will
 * cause animations to end immediately. The default value is 1.
 */
]"
"[FANCY_IME_ANIMATIONS = ""fancy_ime_animations""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Scaling factor for normal window animations. Setting to 0 will
 * disable window animations.
 *
 * @hide
 */
]"
"[COMPATIBILITY_MODE = ""compatibility_mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If 0, the compatibility mode is off for all applications.
 * If 1, older applications run under compatibility mode.
 * TODO: remove this settings before code freeze (bug/1907571)
 * @hide
 */
]"
"[EMERGENCY_TONE = ""emergency_tone""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * CDMA only settings
 * Emergency Tone  0 = Off
 * 1 = Alert
 * 2 = Vibrate
 * @hide
 */
]"
"[CALL_AUTO_RETRY = ""call_auto_retry""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * CDMA only settings
 * Whether the auto retry is enabled. The value is
 * boolean (1 or 0).
 * @hide
 */
]"
"[PREFERRED_NETWORK_MODE = ""preferred_network_mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * See RIL_PreferredNetworkType in ril.h
 * @hide
 */
]"
"[DEBUG_APP = ""debug_app""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Name of an application package to be debugged.
 */
]"
"[WAIT_FOR_DEBUGGER = ""wait_for_debugger""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If 1, when launching DEBUG_APP it will wait for the debugger before
 * starting user code.  If 0, it will run normally.
 */
]"
"[SHOW_PROCESSES = ""show_processes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Control whether the process CPU usage meter should be shown.
 */
]"
"[LOW_POWER_MODE = ""low_power""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If 1 low power mode is enabled.
 * @hide
 */
]"
"[LOW_POWER_MODE_TRIGGER_LEVEL = ""low_power_trigger_level""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Battery level [1-99] at which low power mode automatically turns on.
 * If 0, it will not automatically turn on.
 * @hide
 */
]"
"[ALWAYS_FINISH_ACTIVITIES = ""always_finish_activities""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If 1, the activity manager will aggressively finish activities and
 * processes as soon as they are no longer needed.  If 0, the normal
 * extended lifetime is used.
 */
]"
"[DOCK_AUDIO_MEDIA_ENABLED = ""dock_audio_media_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Use Dock audio output for media:
 * 0 = disabled
 * 1 = enabled
 * @hide
 */
]"
"[AUDIO_SAFE_VOLUME_STATE = ""audio_safe_volume_state""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Persisted safe headphone volume management state by AudioService
 * @hide
 */
]"
"[TZINFO_UPDATE_CONTENT_URL = ""tzinfo_content_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for tzinfo (time zone) updates
 * @hide
 */
]"
"[TZINFO_UPDATE_METADATA_URL = ""tzinfo_metadata_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for tzinfo (time zone) update metadata
 * @hide
 */
]"
"[SELINUX_UPDATE_CONTENT_URL = ""selinux_content_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for selinux (mandatory access control) updates
 * @hide
 */
]"
"[SELINUX_UPDATE_METADATA_URL = ""selinux_metadata_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for selinux (mandatory access control) update metadata
 * @hide
 */
]"
"[SMS_SHORT_CODES_UPDATE_CONTENT_URL = ""sms_short_codes_content_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for sms short code updates
 * @hide
 */
]"
"[SMS_SHORT_CODES_UPDATE_METADATA_URL = ""sms_short_codes_metadata_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for sms short code update metadata
 * @hide
 */
]"
"[CERT_PIN_UPDATE_CONTENT_URL = ""cert_pin_content_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for cert pinlist updates
 * @hide
 */
]"
"[CERT_PIN_UPDATE_METADATA_URL = ""cert_pin_metadata_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for cert pinlist updates
 * @hide
 */
]"
"[INTENT_FIREWALL_UPDATE_CONTENT_URL = ""intent_firewall_content_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for intent firewall updates
 * @hide
 */
]"
"[INTENT_FIREWALL_UPDATE_METADATA_URL = ""intent_firewall_metadata_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for intent firewall update metadata
 * @hide
 */
]"
"[SELINUX_STATUS = ""selinux_status""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * SELinux enforcement status. If 0, permissive; if 1, enforcing.
 * @hide
 */
]"
"[DEVELOPMENT_FORCE_RTL = ""debug.force_rtl""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Developer setting to force RTL layout.
 * @hide
 */
]"
"[LOW_BATTERY_SOUND_TIMEOUT = ""low_battery_sound_timeout""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Milliseconds after screen-off after which low battery sounds will be silenced.
 *
 * If zero, battery sounds will always play.
 * Defaults to @integer/def_low_battery_sound_timeout in SettingsProvider.
 *
 * @hide
 */
]"
"[WIFI_BOUNCE_DELAY_OVERRIDE_MS = ""wifi_bounce_delay_override_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Milliseconds to wait before bouncing Wi-Fi after settings is restored. Note that after
 * the caller is done with this, they should call {@link ContentResolver#delete} to
 * clean up any value that they may have written.
 *
 * @hide
 */
]"
"[POLICY_CONTROL = ""policy_control""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Defines global runtime overrides to window policy.
 *
 * See {@link com.android.server.policy.PolicyControl} for value format.
 *
 * @hide
 */
]"
"[ZEN_MODE = ""zen_mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Defines global zen mode.  ZEN_MODE_OFF, ZEN_MODE_IMPORTANT_INTERRUPTIONS,
 * or ZEN_MODE_NO_INTERRUPTIONS.
 *
 * @hide
 */
]"
"[ZEN_MODE_OFF = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[ZEN_MODE_IMPORTANT_INTERRUPTIONS = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[ZEN_MODE_NO_INTERRUPTIONS = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[ZEN_MODE_ALARMS = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[ZEN_MODE_RINGER_LEVEL = ""zen_mode_ringer_level""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value of the ringer before entering zen mode.
 *
 * @hide
 */
]"
"[ZEN_MODE_CONFIG_ETAG = ""zen_mode_config_etag""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Opaque value, changes when persisted zen mode configuration changes.
 *
 * @hide
 */
]"
"[HEADS_UP_NOTIFICATIONS_ENABLED = ""heads_up_notifications_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Defines global heads up toggle.  One of HEADS_UP_OFF, HEADS_UP_ON.
 *
 * @hide
 */
]"
"[HEADS_UP_OFF = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[HEADS_UP_ON = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[DEVICE_NAME = ""device_name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The name of the device
 *
 * @hide
 */
]"
"[GUEST_USER_ENABLED = ""guest_user_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether it should be possible to create a guest user on the device.
 * <p>
 * Type: int (0 for disabled, 1 for enabled)
 * @hide
 */
]"
"[NETWORK_SCORING_PROVISIONED = ""network_scoring_provisioned""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the NetworkScoringService has been first initialized.
 * <p>
 * Type: int (0 for false, 1 for true)
 * @hide
 */
]"
"[REQUIRE_PASSWORD_TO_DECRYPT = ""require_password_to_decrypt""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the user wants to be prompted for password to decrypt the device on boot.
 * This only matters if the storage is encrypted.
 * <p>
 * Type: int (0 for false, 1 for true)
 * @hide
 */
]"
"[ENHANCED_4G_MODE_ENABLED = ""volte_vt_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the Volte/VT is enabled
 * <p>
 * Type: int (0 for false, 1 for true)
 * @hide
 */
]"
"[WFC_IMS_ENABLED = ""wfc_ims_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether WFC is enabled
 * <p>
 * Type: int (0 for false, 1 for true)
 *
 * @hide
 */
]"
"[WFC_IMS_MODE = ""wfc_ims_mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * WFC Mode.
 * <p>
 * Type: int - 2=Wi-Fi preferred, 1=Cellular preferred, 0=Wi-Fi only
 *
 * @hide
 */
]"
"[WFC_IMS_ROAMING_ENABLED = ""wfc_ims_roaming_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether WFC roaming is enabled
 * <p>
 * Type: int (0 for false, 1 for true)
 *
 * @hide
 */
]"
"[LTE_SERVICE_FORCED = ""lte_service_forced""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether user can enable/disable LTE as a preferred network. A carrier might control
 * this via gservices, OMA-DM, carrier app, etc.
 * <p>
 * Type: int (0 for false, 1 for true)
 * @hide
 */
]"
"[SETTINGS_TO_BACKUP = { BUGREPORT_IN_POWER_MENU, STAY_ON_WHILE_PLUGGED_IN, AUTO_TIME, AUTO_TIME_ZONE, POWER_SOUNDS_ENABLED, DOCK_SOUNDS_ENABLED, USB_MASS_STORAGE_ENABLED, ENABLE_ACCESSIBILITY_GLOBAL_GESTURE_ENABLED, WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON, WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY, WIFI_WATCHDOG_POOR_NETWORK_TEST_ENABLED, WIFI_NUM_OPEN_NETWORKS_KEPT, EMERGENCY_TONE, CALL_AUTO_RETRY, DOCK_AUDIO_MEDIA_ENABLED, LOW_POWER_MODE_TRIGGER_LEVEL }]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Settings to backup. This is here so that it's in the same place as the settings
 * keys and easy to update.
 *
 * These keys may be mentioned in the SETTINGS_TO_BACKUP arrays in System
 * and Secure as well.  This is because those tables drive both backup and
 * restore, and restore needs to properly whitelist keys that used to live
 * in those namespaces.  The keys will only actually be backed up / restored
 * if they are also mentioned in this table (Global.SETTINGS_TO_BACKUP).
 *
 * NOTE: Settings are backed up and restored in the order they appear
 * in this array. If you have one setting depending on another,
 * make sure that they are ordered appropriately.
 *
 * @hide
 */
]"
"[sNameValueCache = new NameValueCache(SYS_PROP_SETTING_VERSION, CONTENT_URI, CALL_METHOD_GET_GLOBAL, CALL_METHOD_PUT_GLOBAL)]","[]","[PRIVATE, STATIC]","Optional[// Populated lazily, guarded by class object:
]"
"[MOVED_TO_SECURE]","[]","[PRIVATE, STATIC, FINAL]","Optional[// Certain settings have been moved from global to the per-user secure namespace
]"
"[MULTI_SIM_VOICE_CALL_SUBSCRIPTION = ""multi_sim_voice_call""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Subscription to be used for voice call on a multi sim device. The supported values
 * are 0 = SUB1, 1 = SUB2 and etc.
 * @hide
 */
]"
"[MULTI_SIM_VOICE_PROMPT = ""multi_sim_voice_prompt""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to provide option to user to select subscription during dial.
 * The supported values are 0 = disable or 1 = enable prompt.
 * @hide
 */
]"
"[MULTI_SIM_DATA_CALL_SUBSCRIPTION = ""multi_sim_data_call""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Subscription to be used for data call on a multi sim device. The supported values
 * are 0 = SUB1, 1 = SUB2 and etc.
 * @hide
 */
]"
"[MULTI_SIM_SMS_SUBSCRIPTION = ""multi_sim_sms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Subscription to be used for SMS on a multi sim device. The supported values
 * are 0 = SUB1, 1 = SUB2 and etc.
 * @hide
 */
]"
"[MULTI_SIM_SMS_PROMPT = ""multi_sim_sms_prompt""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to provide option to user to select subscription during send SMS.
 * The value 1 - enable, 0 - disable
 * @hide
 */
]"
"[MULTI_SIM_USER_PREFERRED_SUBS = { ""user_preferred_sub1"", ""user_preferred_sub2"", ""user_preferred_sub3"" }]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * User preferred subscriptions setting.
 * This holds the details of the user selected subscription from the card and
 * the activation status. Each settings string have the coma separated values
 * iccId,appType,appId,activationStatus,3gppIndex,3gpp2Index
 * @hide
 */
]"
"[NEW_CONTACT_AGGREGATOR = ""new_contact_aggregator""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to enable new contacts aggregator or not.
 * The value 1 - enable, 0 - disable
 * @hide
 */
]"
"[CONTACT_METADATA_SYNC = ""contact_metadata_sync""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to enable contacts metadata syncing or not
 * The value 1 - enable, 0 - disable
 * @hide
 */
]"
"[TAG = ""Bookmarks""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[CONTENT_URI = Uri.parse(""content://"" + AUTHORITY + ""/bookmarks"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URL for this table
 */
]"
"[ID = ""_id""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The row ID.
 * <p>Type: INTEGER</p>
 */
]"
"[TITLE = ""title""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Descriptive name of the bookmark that can be displayed to the user.
 * If this is empty, the title should be resolved at display time (use
 * {@link #getTitle(Context, Cursor)} any time you want to display the
 * title of a bookmark.)
 * <P>
 * Type: TEXT
 * </P>
 */
]"
"[FOLDER = ""folder""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Arbitrary string (displayed to the user) that allows bookmarks to be
 * organized into categories.  There are some special names for
 * standard folders, which all start with '@'.  The label displayed for
 * the folder changes with the locale (via {@link #getLabelForFolder}) but
 * the folder name does not change so you can consistently query for
 * the folder regardless of the current locale.
 *
 * <P>Type: TEXT</P>
 */
]"
"[INTENT = ""intent""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The Intent URL of the bookmark, describing what it points to.  This
 * value is given to {@link android.content.Intent#getIntent} to create
 * an Intent that can be launched.
 * <P>Type: TEXT</P>
 */
]"
"[SHORTCUT = ""shortcut""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Optional shortcut character associated with this bookmark.
 * <P>Type: INTEGER</P>
 */
]"
"[ORDERING = ""ordering""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The order in which the bookmark should be displayed
 * <P>Type: INTEGER</P>
 */
]"
"[sIntentProjection = { INTENT }]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[sShortcutProjection = { ID, SHORTCUT }]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[sShortcutSelection = SHORTCUT + ""=?""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[PM_WRITE_SETTINGS = { android.Manifest.permission.WRITE_SETTINGS }]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[PM_CHANGE_NETWORK_STATE = { android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.WRITE_SETTINGS }]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[PM_SYSTEM_ALERT_WINDOW = { android.Manifest.permission.SYSTEM_ALERT_WINDOW }]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
