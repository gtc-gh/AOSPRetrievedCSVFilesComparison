"Variable","Annotation","Modifier","Comment"
"[mInstances]","[]","[PRIVATE, FINAL]","Optional.empty"
"[FAKE_STACK = { new StackTraceElement(""android.os.StrictMode"", ""setClassInstanceLimit"", ""StrictMode.java"", 1) }]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[RESULTS_RECOGNITION = ""results_recognition""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Key used to retrieve an {@code ArrayList<String>} from the {@link Bundle} passed to the
 * {@link RecognitionListener#onResults(Bundle)} and
 * {@link RecognitionListener#onPartialResults(Bundle)} methods. These strings are the possible
 * recognition results, where the first element is the most likely candidate.
 */
]"
"[CONFIDENCE_SCORES = ""confidence_scores""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Key used to retrieve a float array from the {@link Bundle} passed to the
 * {@link RecognitionListener#onResults(Bundle)} and
 * {@link RecognitionListener#onPartialResults(Bundle)} methods. The array should be
 * the same size as the ArrayList provided in {@link #RESULTS_RECOGNITION}, and should contain
 * values ranging from 0.0 to 1.0, or -1 to represent an unavailable confidence score.
 * <p>
 * Confidence values close to 1.0 indicate high confidence (the speech recognizer is confident
 * that the recognition result is correct), while values close to 0.0 indicate low confidence.
 * <p>
 * This value is optional and might not be provided.
 */
]"
"[ERROR_NETWORK_TIMEOUT = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Network operation timed out.
 */
]"
"[ERROR_NETWORK = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Other network related errors.
 */
]"
"[ERROR_AUDIO = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Audio recording error.
 */
]"
"[ERROR_SERVER = 4]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Server sends error status.
 */
]"
"[ERROR_CLIENT = 5]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Other client side errors.
 */
]"
"[ERROR_SPEECH_TIMEOUT = 6]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * No speech input
 */
]"
"[ERROR_NO_MATCH = 7]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * No recognition result matched.
 */
]"
"[ERROR_RECOGNIZER_BUSY = 8]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * RecognitionService busy.
 */
]"
"[ERROR_INSUFFICIENT_PERMISSIONS = 9]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Insufficient permissions
 */
]"
"[MSG_START = 1]","[]","[PRIVATE, STATIC, FINAL]","Optional[/**
 * action codes
 */
]"
"[MSG_STOP = 2]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[MSG_CANCEL = 3]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[MSG_CHANGE_LISTENER = 4]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[mService]","[]","[PRIVATE]","Optional[/**
 * The actual RecognitionService endpoint
 */
]"
"[mConnection]","[]","[PRIVATE]","Optional[/**
 * The connection to the actual service
 */
]"
"[mContext]","[]","[PRIVATE, FINAL]","Optional[/**
 * Context with which the manager was created
 */
]"
"[mServiceComponent]","[]","[PRIVATE, FINAL]","Optional[/**
 * Component to direct service intent to
 */
]"
"[mHandler = new Handler() {

    @Override
    public void handleMessage(Message msg) {
        switch(msg.what) {
            case MSG_START:
                handleStartListening((Intent) msg.obj);
                break;
            case MSG_STOP:
                handleStopMessage();
                break;
            case MSG_CANCEL:
                handleCancelMessage();
                break;
            case MSG_CHANGE_LISTENER:
                handleChangeListener((RecognitionListener) msg.obj);
                break;
        }
    }
}]","[]","[PRIVATE]","Optional[/**
 * Handler that will execute the main tasks
 */
]"
"[mPendingTasks = new LinkedList<Message>()]","[]","[PRIVATE, FINAL]","Optional[/**
 * Temporary queue, saving the messages until the connection will be established, afterwards,
 * only mHandler will receive the messages
 */
]"
"[mListener = new InternalListener()]","[]","[PRIVATE, FINAL]","Optional[/**
 * The Listener that will receive all the callbacks
 */
]"
"[mInternalListener]","[]","[PRIVATE]","Optional.empty"
"[MSG_BEGINNING_OF_SPEECH = 1]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[MSG_BUFFER_RECEIVED = 2]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[MSG_END_OF_SPEECH = 3]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[MSG_ERROR = 4]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[MSG_READY_FOR_SPEECH = 5]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[MSG_RESULTS = 6]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[MSG_PARTIAL_RESULTS = 7]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[MSG_RMS_CHANGED = 8]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[MSG_ON_EVENT = 9]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[mInternalHandler = new Handler() {

    @Override
    public void handleMessage(Message msg) {
        if (mInternalListener == null) {
            return;
        }
        switch(msg.what) {
            case MSG_BEGINNING_OF_SPEECH:
                mInternalListener.onBeginningOfSpeech();
                break;
            case MSG_BUFFER_RECEIVED:
                mInternalListener.onBufferReceived((byte[]) msg.obj);
                break;
            case MSG_END_OF_SPEECH:
                mInternalListener.onEndOfSpeech();
                break;
            case MSG_ERROR:
                mInternalListener.onError((Integer) msg.obj);
                break;
            case MSG_READY_FOR_SPEECH:
                mInternalListener.onReadyForSpeech((Bundle) msg.obj);
                break;
            case MSG_RESULTS:
                mInternalListener.onResults((Bundle) msg.obj);
                break;
            case MSG_PARTIAL_RESULTS:
                mInternalListener.onPartialResults((Bundle) msg.obj);
                break;
            case MSG_RMS_CHANGED:
                mInternalListener.onRmsChanged((Float) msg.obj);
                break;
            case MSG_ON_EVENT:
                mInternalListener.onEvent(msg.arg1, (Bundle) msg.obj);
                break;
        }
    }
}]","[]","[PRIVATE, FINAL]","Optional.empty"
"[FIELD_COUNT_PACKED = 5L << FIELD_COUNT_SHIFT]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Repeated packed field count, encoded into a field id used with a
 * <code>{@link ProtoOutputStream}.write(...)</code> method.
 *
 * @see #FIELD_COUNT_SHIFT
 * @see #FIELD_COUNT_MASK
 * @see #FIELD_COUNT_UNKNOWN
 * @see #FIELD_COUNT_SINGLE
 * @see #FIELD_COUNT_REPEATED
 * @see <a href=""https://developers.google.com/protocol-buffers/docs/encoding"">Protobuf
 * Encoding</a>
 */
]"
"[mVoiceMaxResults]","[]","[PRIVATE, FINAL]","Optional[// voiceMaxResults
]"
"[mKeyCode]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mQueryActionMsg]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mSuggestActionMsg]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mSuggestActionMsgColumn]","[]","[PRIVATE, FINAL]","Optional.empty"
"[CREATOR = new Parcelable.Creator<SearchableInfo>() {

    public SearchableInfo createFromParcel(Parcel in) {
        return new SearchableInfo(in);
    }

    public SearchableInfo[] newArray(int size) {
        return new SearchableInfo[size];
    }
}]","[@android.annotation.NonNull]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Support for parcelable and aidl operations.
 */
]"
"[mCameraPowerCalculator]","[]","[]","Optional.empty"
"[mFlashlightPowerCalculator]","[]","[]","Optional.empty"
"[mMemoryPowerCalculator]","[]","[]","Optional.empty"
"[mMediaPowerCalculator]","[]","[]","Optional.empty"
"[mHasWifiPowerReporting = false]","[]","[]","Optional.empty"
"[mHasBluetoothPowerReporting = false]","[]","[]","Optional.empty"
"[PRIORITY_CATEGORY_MEDIA = 1 << 6]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Media, game, voice navigation are prioritized
 */
]"
"[PRIORITY_CATEGORY_SYSTEM = 1 << 7]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * System (catch-all for non-never suppressible sounds) are prioritized
 */
]"
"[PRIORITY_CATEGORY_CONVERSATIONS = 1 << 8]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Conversations are allowed through DND.
 */
]"
"[ALL_PRIORITY_CATEGORIES = { PRIORITY_CATEGORY_ALARMS, PRIORITY_CATEGORY_MEDIA, PRIORITY_CATEGORY_SYSTEM, PRIORITY_CATEGORY_REMINDERS, PRIORITY_CATEGORY_EVENTS, PRIORITY_CATEGORY_MESSAGES, PRIORITY_CATEGORY_CALLS, PRIORITY_CATEGORY_REPEAT_CALLERS, PRIORITY_CATEGORY_CONVERSATIONS }]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[PRIORITY_SENDERS_ANY = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Any sender is prioritized.
 */
]"
"[PRIORITY_SENDERS_CONTACTS = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Saved contacts are prioritized.
 */
]"
"[PRIORITY_SENDERS_STARRED = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Only starred contacts are prioritized.
 */
]"
"[CONVERSATION_SENDERS_ANYONE = ZenPolicy.CONVERSATION_SENDERS_ANYONE]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to indicate all conversations can bypass dnd.
 */
]"
"[CONVERSATION_SENDERS_IMPORTANT = ZenPolicy.CONVERSATION_SENDERS_IMPORTANT]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to indicate important conversations can bypass dnd.
 */
]"
"[CONVERSATION_SENDERS_NONE = ZenPolicy.CONVERSATION_SENDERS_NONE]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to indicate no conversations can bypass dnd.
 */
]"
"[priorityCategories]","[]","[PUBLIC, FINAL]","Optional[/**
 * Notification categories to prioritize. Bitmask of PRIORITY_CATEGORY_* constants.
 */
]"
"[priorityCallSenders]","[]","[PUBLIC, FINAL]","Optional[/**
 * Notification senders to prioritize for calls. One of:
 * PRIORITY_SENDERS_ANY, PRIORITY_SENDERS_CONTACTS, PRIORITY_SENDERS_STARRED
 */
]"
"[priorityMessageSenders]","[]","[PUBLIC, FINAL]","Optional[/**
 * Notification senders to prioritize for messages. One of:
 * PRIORITY_SENDERS_ANY, PRIORITY_SENDERS_CONTACTS, PRIORITY_SENDERS_STARRED
 */
]"
"[priorityConversationSenders]","[]","[PUBLIC, FINAL]","Optional[/**
 * Notification senders to prioritize for conversations. One of:
 * {@link #CONVERSATION_SENDERS_NONE}, {@link #CONVERSATION_SENDERS_IMPORTANT},
 * {@link #CONVERSATION_SENDERS_ANYONE}.
 */
]"
"[CONVERSATION_SENDERS_UNSET = -1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[SUPPRESSED_EFFECTS_UNSET = -1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[SUPPRESSED_EFFECT_SCREEN_OFF = 1 << 0]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether notifications suppressed by DND should not interrupt visually (e.g. with
 * notification lights or by turning the screen on) when the screen is off.
 *
 * @deprecated use {@link #SUPPRESSED_EFFECT_FULL_SCREEN_INTENT} and
 * {@link #SUPPRESSED_EFFECT_AMBIENT} and {@link #SUPPRESSED_EFFECT_LIGHTS} individually.
 */
]"
"[SUPPRESSED_EFFECT_SCREEN_ON = 1 << 1]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether notifications suppressed by DND should not interrupt visually when the screen
 * is on (e.g. by peeking onto the screen).
 *
 * @deprecated use {@link #SUPPRESSED_EFFECT_PEEK}.
 */
]"
"[SUPPRESSED_EFFECT_FULL_SCREEN_INTENT = 1 << 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether {@link Notification#fullScreenIntent full screen intents} from
 * notifications intercepted by DND are blocked.
 */
]"
"[SUPPRESSED_EFFECT_LIGHTS = 1 << 3]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether {@link NotificationChannel#shouldShowLights() notification lights} from
 * notifications intercepted by DND are blocked.
 */
]"
"[SUPPRESSED_EFFECT_PEEK = 1 << 4]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether notifications intercepted by DND are prevented from peeking.
 */
]"
"[SUPPRESSED_EFFECT_STATUS_BAR = 1 << 5]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether notifications intercepted by DND are prevented from appearing in the status bar,
 * on devices that support status bars.
 */
]"
"[SUPPRESSED_EFFECT_BADGE = 1 << 6]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether {@link NotificationChannel#canShowBadge() badges} from
 * notifications intercepted by DND are blocked on devices that support badging.
 */
]"
"[SUPPRESSED_EFFECT_AMBIENT = 1 << 7]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether notification intercepted by DND are prevented from appearing on ambient displays
 * on devices that support ambient display.
 */
]"
"[SUPPRESSED_EFFECT_NOTIFICATION_LIST = 1 << 8]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether notification intercepted by DND are prevented from appearing in notification
 * list views like the notification shade or lockscreen on devices that support those
 * views.
 */
]"
"[ALL_SUPPRESSED_EFFECTS = { SUPPRESSED_EFFECT_SCREEN_OFF, SUPPRESSED_EFFECT_SCREEN_ON, SUPPRESSED_EFFECT_FULL_SCREEN_INTENT, SUPPRESSED_EFFECT_LIGHTS, SUPPRESSED_EFFECT_PEEK, SUPPRESSED_EFFECT_STATUS_BAR, SUPPRESSED_EFFECT_BADGE, SUPPRESSED_EFFECT_AMBIENT, SUPPRESSED_EFFECT_NOTIFICATION_LIST }]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[suppressedVisualEffects]","[]","[PUBLIC, FINAL]","Optional[/**
 * Visual effects to suppress for a notification that is filtered by Do Not Disturb mode.
 * Bitmask of SUPPRESSED_EFFECT_* constants.
 */
]"
"[STATE_CHANNELS_BYPASSING_DND = 1 << 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[STATE_UNSET = -1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[state]","[]","[PUBLIC, FINAL]","Optional[/**
 * Notification state information that is necessary to determine Do Not Disturb behavior.
 * Bitmask of STATE_* constants.
 * @hide
 */
]"
"[CREATOR = new Parcelable.Creator<Policy>() {

    @Override
    public Policy createFromParcel(Parcel in) {
        return new Policy(in);
    }

    @Override
    public Policy[] newArray(int size) {
        return new Policy[size];
    }
}]","[@android.annotation.NonNull]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[mLocalProvidersByName = new ArrayMap<ComponentName, ProviderClientRecord>()]","[@UnsupportedAppUsage]","[FINAL]","Optional.empty"
"[mGetProviderLocks = new ArrayMap<>()]","[@GuardedBy(""mGetProviderLocks"")]","[FINAL]","Optional[// TODO Remove it once we move CPR.wait() from AMS to the client side.
]"
"[mOnPauseListeners = new ArrayMap<Activity, ArrayList<OnActivityPausedListener>>()]","[]","[FINAL]","Optional.empty"
"[mGcIdler = new GcIdler()]","[]","[FINAL]","Optional.empty"
"[mPurgeIdler = new PurgeIdler()]","[]","[FINAL]","Optional.empty"
"[mPurgeIdlerScheduled = false]","[]","[]","Optional.empty"
"[mGcIdlerScheduled = false]","[]","[]","Optional.empty"
"[// set once in main()
sMainThreadHandler]","[@UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.P, trackingBug = 115609023)]","[STATIC, VOLATILE]","Optional.empty"
"[mCoreSettings = null]","[]","[]","Optional.empty"
"[mHasImeComponent = false]","[]","[]","Optional.empty"
"[token]","[@UnsupportedAppUsage]","[PUBLIC]","Optional.empty"
"[assistToken]","[]","[PUBLIC]","Optional.empty"
"[ident]","[]","[]","Optional.empty"
"[intent]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[referrer]","[]","[]","Optional.empty"
"[voiceInteractor]","[]","[]","Optional.empty"
"[state]","[]","[]","Optional.empty"
"[persistentState]","[]","[]","Optional.empty"
"[activity]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[window]","[]","[]","Optional.empty"
"[parent]","[]","[]","Optional.empty"
"[embeddedID]","[]","[]","Optional.empty"
"[lastNonConfigurationInstances]","[]","[]","Optional.empty"
"[paused]","[@UnsupportedAppUsage]","[]","Optional[// TODO(lifecycler): Use mLifecycleState instead.
]"
"[stopped]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[hideForNow]","[]","[]","Optional.empty"
"[newConfig]","[]","[]","Optional.empty"
"[createdConfig]","[]","[]","Optional.empty"
"[overrideConfig]","[]","[]","Optional.empty"
"[mPendingOverrideConfig]","[@GuardedBy(""this"")]","[PRIVATE]","Optional[// configuration transactions can always use the latest configuration.
]"
"[tmpConfig = new Configuration()]","[]","[PRIVATE]","Optional[// Used for consolidating configs before sending on to Activity.
]"
"[configCallback]","[]","[]","Optional[// Callback used for updating activity override config.
]"
"[nextIdle]","[]","[]","Optional.empty"
"[isTopResumedActivity]","[]","[]","Optional[// This holds the last reported value from server.
]"
"[lastReportedTopResumedState]","[]","[]","Optional[// and ON_PAUSE to the app.
]"
"[profilerInfo]","[]","[]","Optional.empty"
"[activityInfo]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[compatInfo]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[packageInfo]","[@UnsupportedAppUsage]","[PUBLIC]","Optional.empty"
"[pendingResults]","[]","[]","Optional.empty"
"[pendingIntents]","[]","[]","Optional.empty"
"[startsNotResumed]","[]","[]","Optional.empty"
"[isForward]","[]","[PUBLIC, FINAL]","Optional.empty"
"[pendingConfigChanges]","[]","[]","Optional.empty"
"[mIsUserLeaving]","[]","[]","Optional[// Whether we are in the process of performing on user leaving.
]"
"[mPendingRemoveWindow]","[]","[]","Optional.empty"
"[mPendingRemoveWindowManager]","[]","[]","Optional.empty"
"[mPreserveWindow]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[mPendingFixedRotationAdjustments]","[]","[]","Optional[/**
 * If non-null, the activity is launching with a specified rotation, the adjustments should
 * be consumed before activity creation.
 */
]"
"[mLifecycleState = PRE_ON_CREATE]","[@LifecycleState]","[PRIVATE]","Optional.empty"
"[mNames]","[]","[FINAL]","Optional.empty"
"[mProvider]","[@UnsupportedAppUsage]","[FINAL]","Optional.empty"
"[mLocalProvider]","[@UnsupportedAppUsage]","[FINAL]","Optional.empty"
"[mHolder]","[@UnsupportedAppUsage]","[FINAL]","Optional.empty"
"[intent]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[info]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[compatInfo]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[appInfo]","[]","[]","Optional.empty"
"[compatInfo]","[]","[]","Optional.empty"
"[backupMode]","[]","[]","Optional.empty"
"[userId]","[]","[]","Optional.empty"
"[token]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[info]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[compatInfo]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[intent]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[token]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[intent]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[rebind]","[]","[]","Optional.empty"
"[token]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[taskRemoved]","[]","[]","Optional.empty"
"[startId]","[]","[]","Optional.empty"
"[flags]","[]","[]","Optional.empty"
"[args]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[info]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[processName]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[appInfo]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[providers]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[instrumentationName]","[]","[]","Optional.empty"
"[instrumentationArgs]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[instrumentationWatcher]","[]","[]","Optional.empty"
"[instrumentationUiAutomationConnection]","[]","[]","Optional.empty"
"[debugMode]","[]","[]","Optional.empty"
"[enableBinderTracking]","[]","[]","Optional.empty"
"[trackAllocation]","[]","[]","Optional.empty"
"[restrictedBackupMode]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[persistent]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[config]","[]","[]","Optional.empty"
"[compatInfo]","[@UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.P, trackingBug = 115609023)]","[]","Optional.empty"
"[buildSerial]","[]","[]","Optional.empty"
"[initProfilerInfo]","[]","[]","Optional[/**
 * Initial values for {@link Profiler}.
 */
]"
"[autofillOptions]","[]","[]","Optional.empty"
"[contentCaptureOptions]","[@Nullable]","[]","Optional[/**
 * Content capture options for the application - when null, it means ContentCapture is not
 * enabled for the package.
 */
]"
"[disabledCompatChanges]","[]","[]","Optional.empty"
"[profileFile]","[]","[]","Optional.empty"
"[profileFd]","[]","[]","Optional.empty"
"[samplingInterval]","[]","[]","Optional.empty"
"[autoStopProfiler]","[]","[]","Optional.empty"
"[streamingOutput]","[]","[]","Optional.empty"
"[profiling]","[]","[]","Optional.empty"
"[handlingProfiling]","[]","[]","Optional.empty"
"[fd]","[]","[]","Optional.empty"
"[token]","[]","[]","Optional.empty"
"[prefix]","[]","[]","Optional.empty"
"[args]","[]","[]","Optional.empty"
"[context]","[]","[]","Optional.empty"
"[what]","[]","[]","Optional.empty"
"[who]","[]","[]","Optional.empty"
"[managed]","[]","[PUBLIC]","Optional[// Whether to dump the native or managed heap.
]"
"[mallocInfo]","[]","[PUBLIC]","Optional.empty"
"[runGc]","[]","[PUBLIC]","Optional.empty"
"[path]","[]","[]","Optional.empty"
"[fd]","[]","[]","Optional.empty"
"[finishCallback]","[]","[]","Optional.empty"
"[pkg]","[]","[]","Optional.empty"
"[info]","[]","[]","Optional.empty"
"[activityToken]","[]","[]","Optional.empty"
"[requestToken]","[]","[]","Optional.empty"
"[requestType]","[]","[]","Optional.empty"
"[sessionId]","[]","[]","Optional.empty"
"[flags]","[]","[]","Optional.empty"
"[DB_INFO_FORMAT = ""  %8s %8s %14s %14s  %s""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[mWeakActivityThread]","[@NonNull]","[PRIVATE, FINAL]","Optional.empty"
"[BIND_APPLICATION = 110]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[EXIT_APPLICATION = 111]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[RECEIVER = 113]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[CREATE_SERVICE = 114]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[SERVICE_ARGS = 115]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[STOP_SERVICE = 116]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[CONFIGURATION_CHANGED = 118]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[CLEAN_UP_CONTEXT = 119]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[GC_WHEN_IDLE = 120]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[BIND_SERVICE = 121]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[UNBIND_SERVICE = 122]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[DUMP_SERVICE = 123]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[LOW_MEMORY = 124]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROFILER_CONTROL = 127]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[CREATE_BACKUP_AGENT = 128]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[DESTROY_BACKUP_AGENT = 129]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[SUICIDE = 130]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[REMOVE_PROVIDER = 131]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[DISPATCH_PACKAGE_BROADCAST = 133]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[SCHEDULE_CRASH = 134]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[DUMP_HEAP = 135]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[DUMP_ACTIVITY = 136]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[SLEEPING = 137]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[SET_CORE_SETTINGS = 138]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[UPDATE_PACKAGE_COMPATIBILITY_INFO = 139]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[DUMP_PROVIDER = 141]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[UNSTABLE_PROVIDER_DIED = 142]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[REQUEST_ASSIST_CONTEXT_EXTRAS = 143]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TRANSLUCENT_CONVERSION_COMPLETE = 144]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[INSTALL_PROVIDER = 145]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[ON_NEW_ACTIVITY_OPTIONS = 146]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[ENTER_ANIMATION_COMPLETE = 149]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[START_BINDER_TRACKING = 150]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[STOP_BINDER_TRACKING_AND_DUMP = 151]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[LOCAL_VOICE_INTERACTION_STARTED = 154]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[ATTACH_AGENT = 155]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[APPLICATION_INFO_CHANGED = 156]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[RUN_ISOLATED_ENTRY_POINT = 158]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[EXECUTE_TRANSACTION = 159]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[RELAUNCH_ACTIVITY = 160]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PURGE_RESOURCES = 161]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[ATTACH_STARTUP_AGENTS = 162]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[mMainThreadConfig = new Configuration()]","[]","[PRIVATE]","Optional.empty"
"[HEAP_FULL_COLUMN = ""%13s %8s %8s %8s %8s %8s %8s %8s %8s %8s %8s %8s""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[HEAP_COLUMN = ""%13s %8s %8s %8s %8s %8s %8s %8s %8s""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[ONE_COUNT_COLUMN = ""%21s %8d""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[TWO_COUNT_COLUMNS = ""%21s %8d %21s %8d""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[THREE_COUNT_COLUMNS = ""%21s %8d %21s %8s %21s %8d""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[TWO_COUNT_COLUMN_HEADER = ""%21s %8s %21s %8s""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[ONE_ALT_COUNT_COLUMN = ""%21s %8s %21s %8d""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[ACTIVITY_THREAD_CHECKIN_VERSION = 4]","[]","[PRIVATE, STATIC, FINAL]","Optional[// Formatting for checkin service - update version if row format changes
]"
"[sCurrentBroadcastIntent = new ThreadLocal<Intent>()]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[holder]","[]","[PUBLIC, FINAL]","Optional.empty"
"[client]","[]","[PUBLIC, FINAL]","Optional.empty"
"[stableCount]","[]","[PUBLIC]","Optional.empty"
"[unstableCount]","[]","[PUBLIC]","Optional.empty"
"[removePending]","[]","[PUBLIC]","Optional[// here.
]"
"[SYNC4 = ""data_sync4""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Generic column for use by sync adapters.
 */
]"
"[CARRIER_PRESENCE = ""carrier_presence""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Carrier presence information.
 * <P>
 * Type: INTEGER (A bitmask of CARRIER_PRESENCE_* fields)
 * </P>
 */
]"
"[CARRIER_PRESENCE_VT_CAPABLE = 0x01]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Indicates that the entry is Video Telephony (VT) capable on the
 * current carrier. An allowed bitmask of {@link #CARRIER_PRESENCE}.
 */
]"
"[PREFERRED_PHONE_ACCOUNT_COMPONENT_NAME = ""preferred_phone_account_component_name""]","[]","[]","Optional[/**
 * The flattened {@link android.content.ComponentName} of a  {@link
 * android.telecom.PhoneAccountHandle} that is the preferred {@code PhoneAccountHandle} to
 * call the contact with.
 *
 * <p> On a multi-SIM device this field can be used in a {@link CommonDataKinds.Phone} row
 * to indicate the {@link PhoneAccountHandle} to call the number with, instead of using
 * {@link android.telecom.TelecomManager#getDefaultOutgoingPhoneAccount(String)} or asking
 * every time.
 *
 * <p>{@link android.telecom.TelecomManager#placeCall(Uri, android.os.Bundle)}
 * should be called with {@link android.telecom.TelecomManager#EXTRA_PHONE_ACCOUNT_HANDLE}
 * set to the {@link PhoneAccountHandle} using the {@link ComponentName} from this field.
 *
 * @see #PREFERRED_PHONE_ACCOUNT_ID
 * @see PhoneAccountHandle#getComponentName()
 * @see ComponentName#flattenToString()
 */
]"
"[PREFERRED_PHONE_ACCOUNT_ID = ""preferred_phone_account_id""]","[]","[]","Optional[/**
 * The ID of a {@link
 * android.telecom.PhoneAccountHandle} that is the preferred {@code PhoneAccountHandle} to
 * call the contact with. Used by {@link CommonDataKinds.Phone}.
 *
 * <p> On a multi-SIM device this field can be used in a {@link CommonDataKinds.Phone} row
 * to indicate the {@link PhoneAccountHandle} to call the number with, instead of using
 * {@link android.telecom.TelecomManager#getDefaultOutgoingPhoneAccount(String)} or asking
 * every time.
 *
 * <p>{@link android.telecom.TelecomManager#placeCall(Uri, android.os.Bundle)}
 * should be called with {@link android.telecom.TelecomManager#EXTRA_PHONE_ACCOUNT_HANDLE}
 * set to the {@link PhoneAccountHandle} using the id from this field.
 *
 * @see #PREFERRED_PHONE_ACCOUNT_COMPONENT_NAME
 * @see PhoneAccountHandle#getId()
 */
]"
"[LAST_TIME_USED = ""last_time_used""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The last time (in milliseconds) this {@link Data} was used.
 * @deprecated Contacts affinity information is no longer supported as of
 * Android version {@link android.os.Build.VERSION_CODES#Q}.
 * This column always contains 0.
 *
 * <p class=""caution""><b>Caution: </b>If you publish your app to the Google Play Store,
 * this field is obsolete, regardless of Android version. For more information, see the
 * <a href=""/guide/topics/providers/contacts-provider#ObsoleteData"">Contacts Provider</a>
 * page.</p>
 */
]"
"[TIMES_USED = ""times_used""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of times the referenced {@link Data} has been used.
 * @deprecated Contacts affinity information is no longer supported as of
 * Android version {@link android.os.Build.VERSION_CODES#Q}.
 * This column always contains 0.
 *
 * <p class=""caution""><b>Caution: </b>If you publish your app to the Google Play Store,
 * this field is obsolete, regardless of Android version. For more information, see the
 * <a href=""/guide/topics/providers/contacts-provider#ObsoleteData"">Contacts Provider</a>
 * page.</p>
 */
]"
"[RAW_LAST_TIME_USED = HIDDEN_COLUMN_PREFIX + LAST_TIME_USED]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide Raw value.
 */
]"
"[RAW_TIMES_USED = HIDDEN_COLUMN_PREFIX + TIMES_USED]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide Raw value.
 */
]"
"[LR_LAST_TIME_USED = LAST_TIME_USED]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 * Low res version.  Same as {@link #LAST_TIME_USED} but use it in CP2 for clarification.
 */
]"
"[LR_TIMES_USED = TIMES_USED]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 * Low res version.  Same as {@link #TIMES_USED} but use it in CP2 for clarification.
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(AUTHORITY_URI, ""data"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table, which requests a directory
 * of data rows matching the selection criteria.
 */
]"
"[ENTERPRISE_CONTENT_URI = Uri.withAppendedPath(AUTHORITY_URI, ""data_enterprise"")]","[]","[STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table in managed profile, which requests a directory
 * of data rows matching the selection criteria.
 *
 * @hide
 */
]"
"[VISIBLE_CONTACTS_ONLY = ""visible_contacts_only""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A boolean parameter for {@link Data#CONTENT_URI}.
 * This specifies whether or not the returned data items should be filtered to show
 * data items belonging to visible contacts only.
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/data""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of the results from {@link #CONTENT_URI}.
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(AUTHORITY_URI, ""raw_contact_entities"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table
 */
]"
"[CORP_CONTENT_URI = Uri.withAppendedPath(AUTHORITY_URI, ""raw_contact_entities_corp"")]","[@TestApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table in corp profile
 *
 * @hide
 */
]"
"[PROFILE_CONTENT_URI = Uri.withAppendedPath(Profile.CONTENT_URI, ""raw_contact_entities"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table, specific to the user's profile.
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/raw_contact_entity""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of {@link #CONTENT_URI} providing a directory of raw contact entities.
 */
]"
"[FOR_EXPORT_ONLY = ""for_export_only""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If {@link #FOR_EXPORT_ONLY} is explicitly set to ""1"", returned Cursor toward
 * Data.CONTENT_URI contains only exportable data.
 *
 * This flag is useful (currently) only for vCard exporter in Contacts app, which
 * needs to exclude ""un-exportable"" data from available data to export, while
 * Contacts app itself has priviledge to access all data including ""un-expotable""
 * ones and providers return all of them regardless of the callers' intention.
 * <P>Type: INTEGER</p>
 *
 * @hide Maybe available only in Eclair and not really ready for public use.
 * TODO: remove, or implement this feature completely. As of now (Eclair),
 * we only use this flag in queryEntities(), not query().
 */
]"
"[DATA_ID = ""data_id""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The ID of the data column. The value will be null if this raw contact has no data rows.
 * <P>Type: INTEGER</P>
 */
]"
"[DATA_ID = ""data_id""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The ID of the data row.
 * <P>Type: INTEGER</P>
 */
]"
"[CONTACT_ID = ""contact_id""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A reference to the {@link ContactsContract.Contacts#_ID} that this
 * data belongs to.
 * <P>Type: INTEGER</P>
 */
]"
"[NUMBER = ""number""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The phone number as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[TYPE = ""type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The type of phone number, for example Home or Work.
 * <P>Type: INTEGER</P>
 */
]"
"[LABEL = ""label""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The user defined label for the phone number.
 * <P>Type: TEXT</P>
 */
]"
"[NORMALIZED_NUMBER = ""normalized_number""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The phone number's E164 representation.
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_FILTER_URI = Uri.withAppendedPath(AUTHORITY_URI, ""phone_lookup"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table.
 *
 * <p class=""caution""><b>Caution: </b>If you publish your app to the Google Play Store, this
 * field doesn't sort results based on contacts frequency. For more information, see the
 * <a href=""/guide/topics/providers/contacts-provider#ObsoleteData"">Contacts Provider</a>
 * page.
 *
 * Append the phone number you want to lookup
 * to this URI and query it to perform a lookup. For example:
 * <pre>
 * Uri lookupUri = Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,
 * Uri.encode(phoneNumber));
 * </pre>
 */
]"
"[ENTERPRISE_CONTENT_FILTER_URI = Uri.withAppendedPath(AUTHORITY_URI, ""phone_lookup_enterprise"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>URI used for the ""enterprise caller-id"".</p>
 *
 * <p class=""caution""><b>Caution: </b>If you publish your app to the Google Play Store, this
 * field doesn't sort results based on contacts frequency. For more information, see the
 * <a href=""/guide/topics/providers/contacts-provider#ObsoleteData"">Contacts Provider</a>
 * page.
 *
 * <p>
 * It supports the same semantics as {@link #CONTENT_FILTER_URI} and returns the same
 * columns.  If the device has no corp profile that is linked to the current profile, it
 * behaves in the exact same way as {@link #CONTENT_FILTER_URI}.  If there is a corp profile
 * linked to the current profile, it first queries against the personal contact database,
 * and if no matching contacts are found there, then queries against the
 * corp contacts database.
 * </p>
 * <p>
 * If a result is from the corp profile, it makes the following changes to the data:
 * <ul>
 * <li>
 * {@link #PHOTO_THUMBNAIL_URI} and {@link #PHOTO_URI} will be rewritten to special
 * URIs.  Use {@link ContentResolver#openAssetFileDescriptor} or its siblings to
 * load pictures from them.
 * {@link #PHOTO_ID} and {@link #PHOTO_FILE_ID} will be set to null.  Do not use them.
 * </li>
 * <li>
 * Corp contacts will get artificial {@link #_ID}s.  In order to tell whether a contact
 * is from the corp profile, use
 * {@link ContactsContract.Contacts#isEnterpriseContactId(long)}.
 * </li>
 * <li>
 * Corp contacts will get artificial {@link #LOOKUP_KEY}s too.
 * </li>
 * <li>
 * Returned work contact IDs and lookup keys are not accepted in places that not
 * explicitly say to accept them.
 * </li>
 * </ul>
 * <p>
 * A contact lookup URL built by
 * {@link ContactsContract.Contacts#getLookupUri(long, String)}
 * with an {@link #_ID} and a {@link #LOOKUP_KEY} returned by this API can be passed to
 * {@link ContactsContract.QuickContact#showQuickContact} even if a contact is from the
 * corp profile.
 * </p>
 *
 * <pre>
 * Uri lookupUri = Uri.withAppendedPath(PhoneLookup.ENTERPRISE_CONTENT_FILTER_URI,
 * Uri.encode(phoneNumber));
 * </pre>
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/phone_lookup""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of {@link #CONTENT_FILTER_URI} providing a directory of phone lookup rows.
 *
 * @hide
 */
]"
"[QUERY_PARAMETER_SIP_ADDRESS = ""sip""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If this boolean parameter is set to true, then the appended query is treated as a
 * SIP address and the lookup will be performed against SIP addresses in the user's
 * contacts.
 */
]"
"[DATA_ID = ""presence_data_id""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Reference to the {@link Data#_ID} entry that owns this presence.
 * <P>Type: INTEGER</P>
 */
]"
"[PROTOCOL = ""protocol""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * See {@link CommonDataKinds.Im} for a list of defined protocol constants.
 * <p>Type: NUMBER</p>
 */
]"
"[CUSTOM_PROTOCOL = ""custom_protocol""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Name of the custom protocol.  Should be supplied along with the {@link #PROTOCOL} value
 * {@link ContactsContract.CommonDataKinds.Im#PROTOCOL_CUSTOM}.  Should be null or
 * omitted if {@link #PROTOCOL} value is not
 * {@link ContactsContract.CommonDataKinds.Im#PROTOCOL_CUSTOM}.
 *
 * <p>Type: NUMBER</p>
 */
]"
"[IM_HANDLE = ""im_handle""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The IM handle the presence item is for. The handle is scoped to
 * {@link #PROTOCOL}.
 * <P>Type: TEXT</P>
 */
]"
"[IM_ACCOUNT = ""im_account""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The IM account for the local user that the presence data came from.
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(AUTHORITY_URI, ""status_updates"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table
 */
]"
"[PROFILE_CONTENT_URI = Uri.withAppendedPath(Profile.CONTENT_URI, ""status_updates"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table, specific to the user's profile.
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/status-update""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of {@link #CONTENT_URI} providing a directory of
 * status update details.
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/status-update""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of a {@link #CONTENT_URI} subdirectory of a single
 * status update detail.
 */
]"
"[SNIPPET = ""snippet""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The search snippet constructed by SQLite snippeting functionality.
 * <p>
 * The snippet may contain (parts of) several data elements belonging to the contact,
 * with the matching parts optionally surrounded by special characters that indicate the
 * start and end of matching text.
 *
 * For example, if a contact has an address ""123 Main Street"", using a filter ""mai"" would
 * return the formatted snippet ""123 [Mai]n street"".
 *
 * @see <a href=""http://www.sqlite.org/fts3.html#snippet"">
 * http://www.sqlite.org/fts3.html#snippet</a>
 */
]"
"[SNIPPET_ARGS_PARAM_KEY = ""snippet_args""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Comma-separated parameters for the generation of the snippet:
 * <ul>
 * <li>The ""start match"" text. Default is '['</li>
 * <li>The ""end match"" text. Default is ']'</li>
 * <li>The ""ellipsis"" text. Default is ""...""</li>
 * <li>Maximum number of tokens to include in the snippet. Can be either
 * a positive or a negative number: A positive number indicates how many
 * tokens can be returned in total. A negative number indicates how many
 * tokens can be returned per occurrence of the search terms.</li>
 * </ul>
 *
 * @hide
 */
]"
"[DEFERRED_SNIPPETING_KEY = ""deferred_snippeting""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The key to ask the provider to defer the formatting of the snippet to the client if
 * possible, for performance reasons.
 * A value of 1 indicates true, 0 indicates false. False is the default.
 * When a cursor is returned to the client, it should check for an extra with the name
 * {@link ContactsContract#DEFERRED_SNIPPETING} in the cursor. If it exists, the client
 * should do its own formatting of the snippet. If it doesn't exist, the snippet column
 * in the cursor should already contain a formatted snippet.
 */
]"
"[PACKAGE_COMMON = ""common""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The {@link Data#RES_PACKAGE} value for common data that should be
 * shown using a default style.
 *
 * @hide RES_PACKAGE is hidden
 */
]"
"[TYPE_CUSTOM = 0]","[]","[PUBLIC, STATIC]","Optional[/**
 * A custom type. The custom label should be supplied by user.
 */
]"
"[DATA = DataColumns.DATA1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The data for the contact method.
 * <P>Type: TEXT</P>
 */
]"
"[TYPE = DataColumns.DATA2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The type of data, for example Home or Work.
 * <P>Type: INTEGER</P>
 */
]"
"[LABEL = DataColumns.DATA3]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The user defined label for the the contact method.
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[DISPLAY_NAME = DATA1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The name that should be used to display the contact.
 * <i>Unstructured component of the name should be consistent with
 * its structured representation.</i>
 * <p>
 * Type: TEXT
 */
]"
"[GIVEN_NAME = DATA2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The given name for the contact.
 * <P>Type: TEXT</P>
 */
]"
"[FAMILY_NAME = DATA3]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The family name for the contact.
 * <P>Type: TEXT</P>
 */
]"
"[PREFIX = DATA4]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The contact's honorific prefix, e.g. ""Sir""
 * <P>Type: TEXT</P>
 */
]"
"[MIDDLE_NAME = DATA5]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The contact's middle name
 * <P>Type: TEXT</P>
 */
]"
"[SUFFIX = DATA6]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The contact's honorific suffix, e.g. ""Jr""
 */
]"
"[PHONETIC_GIVEN_NAME = DATA7]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The phonetic version of the given name for the contact.
 * <P>Type: TEXT</P>
 */
]"
"[PHONETIC_MIDDLE_NAME = DATA8]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The phonetic version of the additional name for the contact.
 * <P>Type: TEXT</P>
 */
]"
"[PHONETIC_FAMILY_NAME = DATA9]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The phonetic version of the family name for the contact.
 * <P>Type: TEXT</P>
 */
]"
"[FULL_NAME_STYLE = DATA10]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The style used for combining given/middle/family name into a full name.
 * See {@link ContactsContract.FullNameStyle}.
 */
]"
"[PHONETIC_NAME_STYLE = DATA11]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The alphabet used for capturing the phonetic name.
 * See ContactsContract.PhoneticNameStyle.
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/nickname""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[TYPE_DEFAULT = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_OTHER_NAME = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_MAIDEN_NAME = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_MAINDEN_NAME = 3]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @deprecated Use TYPE_MAIDEN_NAME instead.
 */
]"
"[TYPE_SHORT_NAME = 4]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_INITIALS = 5]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[NAME = DATA]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The name itself
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/phone_v2""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/phone_v2""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of {@link #CONTENT_URI} providing a directory of
 * phones.
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(Data.CONTENT_URI, ""phones"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for all data records of the
 * {@link #CONTENT_ITEM_TYPE} MIME type, combined with the
 * associated raw contact and aggregate contact data.
 */
]"
"[ENTERPRISE_CONTENT_URI = Uri.withAppendedPath(Data.ENTERPRISE_CONTENT_URI, ""phones"")]","[@UnsupportedAppUsage, @TestApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URI used for getting all contacts from primary and managed profile.
 *
 * It supports the same semantics as {@link #CONTENT_URI} and returns the same
 * columns.  If the device has no corp profile that is linked to the current profile, it
 * behaves in the exact same way as {@link #CONTENT_URI}.  If there is a corp profile
 * linked to the current profile, it will merge corp profile and current profile's
 * results and return
 *
 * @hide
 */
]"
"[CONTENT_FILTER_URI = Uri.withAppendedPath(CONTENT_URI, ""filter"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>The content:// style URL for phone lookup using a filter. The filter returns
 * records of MIME type {@link #CONTENT_ITEM_TYPE}. The filter is applied
 * to display names as well as phone numbers. The filter argument should be passed
 * as an additional path segment after this URI.
 *
 * <p class=""caution""><b>Caution: </b>This field deosn't sort results based on contacts
 * frequency. For more information, see the
 * <a href=""/guide/topics/providers/contacts-provider#ObsoleteData"">Contacts Provider</a>
 * page.
 */
]"
"[ENTERPRISE_CONTENT_FILTER_URI = Uri.withAppendedPath(CONTENT_URI, ""filter_enterprise"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>It supports the similar semantics as {@link #CONTENT_FILTER_URI} and returns the
 * same columns. This URI requires {@link ContactsContract#DIRECTORY_PARAM_KEY} in
 * parameters, otherwise it will throw IllegalArgumentException.
 *
 * <p class=""caution""><b>Caution: </b>If you publish your app to the Google Play Store,
 * this field doesn't sort results based on contacts frequency. For more information,
 * see the
 * <a href=""/guide/topics/providers/contacts-provider#ObsoleteData"">Contacts Provider</a>
 * page.
 */
]"
"[SEARCH_DISPLAY_NAME_KEY = ""search_display_name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A boolean query parameter that can be used with {@link #CONTENT_FILTER_URI}.
 * If ""1"" or ""true"", display names are searched.  If ""0"" or ""false"", display names
 * are not searched.  Default is ""1"".
 */
]"
"[SEARCH_PHONE_NUMBER_KEY = ""search_phone_number""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A boolean query parameter that can be used with {@link #CONTENT_FILTER_URI}.
 * If ""1"" or ""true"", phone numbers are searched.  If ""0"" or ""false"", phone numbers
 * are not searched.  Default is ""1"".
 */
]"
"[TYPE_HOME = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_MOBILE = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_WORK = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_FAX_WORK = 4]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_FAX_HOME = 5]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_PAGER = 6]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_OTHER = 7]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_CALLBACK = 8]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_CAR = 9]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_COMPANY_MAIN = 10]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_ISDN = 11]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_MAIN = 12]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_OTHER_FAX = 13]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_RADIO = 14]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_TELEX = 15]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_TTY_TDD = 16]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_WORK_MOBILE = 17]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_WORK_PAGER = 18]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_ASSISTANT = 19]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_MMS = 20]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[NUMBER = DATA]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The phone number as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[NORMALIZED_NUMBER = DATA4]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The phone number's E164 representation. This value can be omitted in which
 * case the provider will try to automatically infer it.  (It'll be left null if the
 * provider fails to infer.)
 * If present, {@link #NUMBER} has to be set as well (it will be ignored otherwise).
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/email_v2""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/email_v2""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of {@link #CONTENT_URI} providing a directory of email addresses.
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(Data.CONTENT_URI, ""emails"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for all data records of the
 * {@link #CONTENT_ITEM_TYPE} MIME type, combined with the
 * associated raw contact and aggregate contact data.
 */
]"
"[CONTENT_LOOKUP_URI = Uri.withAppendedPath(CONTENT_URI, ""lookup"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>
 * The content:// style URL for looking up data rows by email address. The
 * lookup argument, an email address, should be passed as an additional path segment
 * after this URI.
 * </p>
 * <p>Example:
 * <pre>
 * Uri uri = Uri.withAppendedPath(Email.CONTENT_LOOKUP_URI, Uri.encode(email));
 * Cursor c = getContentResolver().query(uri,
 * new String[]{Email.CONTACT_ID, Email.DISPLAY_NAME, Email.DATA},
 * null, null, null);
 * </pre>
 * </p>
 */
]"
"[ENTERPRISE_CONTENT_LOOKUP_URI = Uri.withAppendedPath(CONTENT_URI, ""lookup_enterprise"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>URI used for enterprise email lookup.</p>
 *
 * <p>
 * It supports the same semantics as {@link #CONTENT_LOOKUP_URI} and returns the same
 * columns.  If the device has no corp profile that is linked to the current profile, it
 * behaves in the exact same way as {@link #CONTENT_LOOKUP_URI}.  If there is a
 * corp profile linked to the current profile, it first queries against the personal contact database,
 * and if no matching contacts are found there, then queries against the
 * corp contacts database.
 * </p>
 * <p>
 * If a result is from the corp profile, it makes the following changes to the data:
 * <ul>
 * <li>
 * {@link #PHOTO_THUMBNAIL_URI} and {@link #PHOTO_URI} will be rewritten to special
 * URIs.  Use {@link ContentResolver#openAssetFileDescriptor} or its siblings to
 * load pictures from them.
 * {@link #PHOTO_ID} and {@link #PHOTO_FILE_ID} will be set to null.  Do not
 * use them.
 * </li>
 * <li>
 * Corp contacts will get artificial {@link #CONTACT_ID}s.  In order to tell whether
 * a contact
 * is from the corp profile, use
 * {@link ContactsContract.Contacts#isEnterpriseContactId(long)}.
 * </li>
 * <li>
 * Corp contacts will get artificial {@link #LOOKUP_KEY}s too.
 * </li>
 * <li>
 * Returned work contact IDs and lookup keys are not accepted in places that not
 * explicitly say to accept them.
 * </li>
 * </ul>
 * <p>
 * A contact lookup URL built by
 * {@link ContactsContract.Contacts#getLookupUri(long, String)}
 * with an {@link #_ID} and a {@link #LOOKUP_KEY} returned by this API can be passed to
 * {@link ContactsContract.QuickContact#showQuickContact} even if a contact is from the
 * corp profile.
 * </p>
 *
 * <pre>
 * Uri lookupUri = Uri.withAppendedPath(Email.ENTERPRISE_CONTENT_LOOKUP_URI,
 * Uri.encode(email));
 * </pre>
 */
]"
"[CONTENT_FILTER_URI = Uri.withAppendedPath(CONTENT_URI, ""filter"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>The content:// style URL for email lookup using a filter. The filter returns
 * records of MIME type {@link #CONTENT_ITEM_TYPE}. The filter is applied
 * to display names as well as email addresses. The filter argument should be passed
 * as an additional path segment after this URI.
 * </p>
 *
 * <p class=""caution""><b>Caution: </b>If you publish your app to the Google Play Store,
 * this field doesn't sort results based on contacts frequency. For more information,
 * see the
 * <a href=""/guide/topics/providers/contacts-provider#ObsoleteData"">Contacts Provider</a>
 * page.</p>
 *
 * <p>The query in the following example will return ""Robert Parr (bob@incredibles.com)""
 * as well as ""Bob Parr (incredible@android.com)"".
 * <pre>
 * Uri uri = Uri.withAppendedPath(Email.CONTENT_LOOKUP_URI, Uri.encode(""bob""));
 * Cursor c = getContentResolver().query(uri,
 * new String[]{Email.DISPLAY_NAME, Email.DATA},
 * null, null, null);
 * </pre>
 * </p>
 */
]"
"[ENTERPRISE_CONTENT_FILTER_URI = Uri.withAppendedPath(CONTENT_URI, ""filter_enterprise"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>It supports the similar semantics as {@link #CONTENT_FILTER_URI} and returns the
 * same columns. This URI requires {@link ContactsContract#DIRECTORY_PARAM_KEY} in
 * parameters, otherwise it will throw IllegalArgumentException.
 *
 * <p class=""caution""><b>Caution: </b>If you publish your app to the Google Play Store,
 * this field doesn't sort results based on contacts frequency. For more information,
 * see the
 * <a href=""/guide/topics/providers/contacts-provider#ObsoleteData"">Contacts Provider</a>
 * page.
 */
]"
"[ADDRESS = DATA1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The email address.
 * <P>Type: TEXT</P>
 */
]"
"[TYPE_HOME = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_WORK = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_OTHER = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_MOBILE = 4]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[DISPLAY_NAME = DATA4]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The display name for the email address
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/postal-address_v2""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/postal-address_v2""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of {@link #CONTENT_URI} providing a directory of
 * postal addresses.
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(Data.CONTENT_URI, ""postals"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for all data records of the
 * {@link StructuredPostal#CONTENT_ITEM_TYPE} MIME type.
 */
]"
"[TYPE_HOME = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_WORK = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_OTHER = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[FORMATTED_ADDRESS = DATA]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The full, unstructured postal address. <i>This field must be
 * consistent with any structured data.</i>
 * <p>
 * Type: TEXT
 */
]"
"[STREET = DATA4]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Can be street, avenue, road, etc. This element also includes the
 * house number and room/apartment/flat/floor number.
 * <p>
 * Type: TEXT
 */
]"
"[POBOX = DATA5]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Covers actual P.O. boxes, drawers, locked bags, etc. This is
 * usually but not always mutually exclusive with street.
 * <p>
 * Type: TEXT
 */
]"
"[NEIGHBORHOOD = DATA6]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This is used to disambiguate a street address when a city
 * contains more than one street with the same name, or to specify a
 * small place whose mail is routed through a larger postal town. In
 * China it could be a county or a minor city.
 * <p>
 * Type: TEXT
 */
]"
"[CITY = DATA7]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Can be city, village, town, borough, etc. This is the postal town
 * and not necessarily the place of residence or place of business.
 * <p>
 * Type: TEXT
 */
]"
"[REGION = DATA8]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A state, province, county (in Ireland), Land (in Germany),
 * departement (in France), etc.
 * <p>
 * Type: TEXT
 */
]"
"[POSTCODE = DATA9]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Postal code. Usually country-wide, but sometimes specific to the
 * city (e.g. ""2"" in ""Dublin 2, Ireland"" addresses).
 * <p>
 * Type: TEXT
 */
]"
"[COUNTRY = DATA10]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The name or code of the country.
 * <p>
 * Type: TEXT
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/im""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[TYPE_HOME = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_WORK = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_OTHER = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL = DATA5]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This column should be populated with one of the defined
 * constants, e.g. {@link #PROTOCOL_YAHOO}. If the value of this
 * column is {@link #PROTOCOL_CUSTOM}, the {@link #CUSTOM_PROTOCOL}
 * should contain the name of the custom protocol.
 */
]"
"[CUSTOM_PROTOCOL = DATA6]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_CUSTOM = -1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/*
             * The predefined IM protocol types.
             */
]"
"[PROTOCOL_AIM = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_MSN = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_YAHOO = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_SKYPE = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_QQ = 4]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_GOOGLE_TALK = 5]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_ICQ = 6]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_JABBER = 7]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_NETMEETING = 8]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/organization""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[TYPE_WORK = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_OTHER = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[COMPANY = DATA]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The company as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[TITLE = DATA4]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The position title at this company as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[DEPARTMENT = DATA5]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The department at this company as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[JOB_DESCRIPTION = DATA6]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The job description at this company as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[SYMBOL = DATA7]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The symbol of this company as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[PHONETIC_NAME = DATA8]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The phonetic name of this company as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[OFFICE_LOCATION = DATA9]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The office location of this organization.
 * <P>Type: TEXT</P>
 */
]"
"[PHONETIC_NAME_STYLE = DATA10]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The alphabet used for capturing the phonetic name.
 * See {@link ContactsContract.PhoneticNameStyle}.
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/relation""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[TYPE_ASSISTANT = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_BROTHER = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_CHILD = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_DOMESTIC_PARTNER = 4]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_FATHER = 5]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_FRIEND = 6]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_MANAGER = 7]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_MOTHER = 8]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_PARENT = 9]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_PARTNER = 10]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_REFERRED_BY = 11]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_RELATIVE = 12]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_SISTER = 13]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_SPOUSE = 14]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[NAME = DATA]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The name of the relative as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/contact_event""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[TYPE_ANNIVERSARY = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_OTHER = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_BIRTHDAY = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[START_DATE = DATA]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The event start date as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/photo""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[PHOTO_FILE_ID = DATA14]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Photo file ID for the display photo of the raw contact.
 * See {@link ContactsContract.DisplayPhoto}.
 * <p>
 * Type: NUMBER
 */
]"
"[PHOTO = DATA15]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Thumbnail photo of the raw contact. This is the raw bytes of an image
 * that could be inflated using {@link android.graphics.BitmapFactory}.
 * <p>
 * Type: BLOB
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/note""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[NOTE = DATA1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The note text.
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/group_membership""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[GROUP_ROW_ID = DATA1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The row id of the group that this group membership refers to. Exactly one of
 * this or {@link #GROUP_SOURCE_ID} must be set when inserting a row.
 * <P>Type: INTEGER</P>
 */
]"
"[GROUP_SOURCE_ID = ""group_sourceid""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The sourceid of the group that this group membership refers to.  Exactly one of
 * this or {@link #GROUP_ROW_ID} must be set when inserting a row.
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/website""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[TYPE_HOMEPAGE = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_BLOG = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_PROFILE = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_HOME = 4]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_WORK = 5]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_FTP = 6]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_OTHER = 7]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[URL = DATA]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The website URL string.
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/sip_address""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[TYPE_HOME = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_WORK = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_OTHER = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[SIP_ADDRESS = DATA1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The SIP address.
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/identity""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[IDENTITY = DataColumns.DATA1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The identity string.
 * <P>Type: TEXT</P>
 */
]"
"[NAMESPACE = DataColumns.DATA2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The namespace of the identity string, e.g. ""com.google""
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(Data.CONTENT_URI, ""callables"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Similar to {@link Phone#CONTENT_URI}, but returns callable data instead of only
 * phone numbers.
 */
]"
"[CONTENT_FILTER_URI = Uri.withAppendedPath(CONTENT_URI, ""filter"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>Similar to {@link Phone#CONTENT_FILTER_URI}, but allows users to filter callable
 * data.
 *
 * <p class=""caution""><b>Caution: </b>This field no longer sorts results based on
 * contacts frequency. For more information, see the
 * <a href=""/guide/topics/providers/contacts-provider#ObsoleteData"">Contacts Provider</a>
 * page.
 */
]"
"[ENTERPRISE_CONTENT_FILTER_URI = Uri.withAppendedPath(CONTENT_URI, ""filter_enterprise"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>Similar to {@link Phone#ENTERPRISE_CONTENT_FILTER_URI}, but allows users to filter
 * callable data. This URI requires {@link ContactsContract#DIRECTORY_PARAM_KEY} in
 * parameters, otherwise it will throw IllegalArgumentException.
 *
 * <p class=""caution""><b>Caution: </b>If you publish your app to the Google Play Store,
 * this field doesn't sort results based on contacts frequency. For more information,
 * see the
 * <a href=""/guide/topics/providers/contacts-provider#ObsoleteData"">Contacts Provider</a>
 * page.</p>
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(Data.CONTENT_URI, ""contactables"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for these data items, which requests a directory of data
 * rows matching the selection criteria.
 */
]"
"[CONTENT_FILTER_URI = Uri.withAppendedPath(Contactables.CONTENT_URI, ""filter"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>The content:// style URI for these data items, which allows for a query parameter
 * to be appended onto the end to filter for data items matching the query.
 *
 * <p class=""caution""><b>Caution: </b>If you publish your app to the Google Play Store,
 * this field doesn't sort results based on contacts frequency. For more information,
 * see the
 * <a href=""/guide/topics/providers/contacts-provider#ObsoleteData"">Contacts Provider</a>
 * page.
 */
]"
"[VISIBLE_CONTACTS_ONLY = ""visible_contacts_only""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A boolean parameter for {@link Data#CONTENT_URI}.
 * This specifies whether or not the returned data items should be filtered to show
 * data items belonging to visible contacts only.
 */
]"
"[DATA_SET = ""data_set""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The data set within the account that this group belongs to.  This allows
 * multiple sync adapters for the same account type to distinguish between
 * each others' group data.
 *
 * This is empty by default, and is completely optional.  It only needs to
 * be populated if multiple sync adapters are entering distinct group data
 * for the same account type and account name.
 * <P>Type: TEXT</P>
 */
]"
"[ACCOUNT_TYPE_AND_DATA_SET = ""account_type_and_data_set""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A concatenation of the account type and data set (delimited by a forward
 * slash) - if the data set is empty, this will be the same as the account
 * type.  For applications that need to be aware of the data set, this can
 * be used instead of account type to distinguish sets of data.  This is
 * never intended to be used for specifying accounts.
 * @hide
 */
]"
"[TITLE = ""title""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The display title of this group.
 * <p>
 * Type: TEXT
 */
]"
"[RES_PACKAGE = ""res_package""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The package name to use when creating {@link Resources} objects for
 * this group. This value is only designed for use when building user
 * interfaces, and should not be used to infer the owner.
 */
]"
"[TITLE_RES = ""title_res""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The display title of this group to load as a resource from
 * {@link #RES_PACKAGE}, which may be localized.
 * <P>Type: TEXT</P>
 */
]"
"[NOTES = ""notes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Notes about the group.
 * <p>
 * Type: TEXT
 */
]"
"[SYSTEM_ID = ""system_id""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The ID of this group if it is a System Group, i.e. a group that has a special meaning
 * to the sync adapter, null otherwise.
 * <P>Type: TEXT</P>
 */
]"
"[SUMMARY_COUNT = ""summ_count""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The total number of {@link Contacts} that have
 * {@link CommonDataKinds.GroupMembership} in this group. Read-only value that is only
 * present when querying {@link Groups#CONTENT_SUMMARY_URI}.
 * <p>
 * Type: INTEGER
 */
]"
"[PARAM_RETURN_GROUP_COUNT_PER_ACCOUNT = ""return_group_count_per_account""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A boolean query parameter that can be used with {@link Groups#CONTENT_SUMMARY_URI}.
 * It will additionally return {@link #SUMMARY_GROUP_COUNT_PER_ACCOUNT}.
 *
 * @hide
 */
]"
"[SUMMARY_GROUP_COUNT_PER_ACCOUNT = ""group_count_per_account""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The total number of groups of the account that a group belongs to.
 * This column is available only when the parameter
 * {@link #PARAM_RETURN_GROUP_COUNT_PER_ACCOUNT} is specified in
 * {@link Groups#CONTENT_SUMMARY_URI}.
 *
 * For example, when the account ""A"" has two groups ""group1"" and ""group2"", and the account
 * ""B"" has a group ""group3"", the rows for ""group1"" and ""group2"" return ""2"" and the row for
 * ""group3"" returns ""1"" for this column.
 *
 * Note: This counts only non-favorites, non-auto-add, and not deleted groups.
 *
 * Type: INTEGER
 * @hide
 */
]"
"[SUMMARY_WITH_PHONES = ""summ_phones""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The total number of {@link Contacts} that have both
 * {@link CommonDataKinds.GroupMembership} in this group, and also have phone numbers.
 * Read-only value that is only present when querying
 * {@link Groups#CONTENT_SUMMARY_URI}.
 * <p>
 * Type: INTEGER
 */
]"
"[GROUP_VISIBLE = ""group_visible""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Flag indicating if the contacts belonging to this group should be
 * visible in any user interface.
 * <p>
 * Type: INTEGER (boolean)
 */
]"
"[DELETED = ""deleted""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The ""deleted"" flag: ""0"" by default, ""1"" if the row has been marked
 * for deletion. When {@link android.content.ContentResolver#delete} is
 * called on a group, it is marked for deletion. The sync adaptor
 * deletes the group on the server and then calls ContactResolver.delete
 * once more, this time setting the the
 * {@link ContactsContract#CALLER_IS_SYNCADAPTER} query parameter to
 * finalize the data removal.
 * <P>Type: INTEGER</P>
 */
]"
"[SHOULD_SYNC = ""should_sync""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether this group should be synced if the SYNC_EVERYTHING settings
 * is false for this group's account.
 * <p>
 * Type: INTEGER (boolean)
 */
]"
"[AUTO_ADD = ""auto_add""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Any newly created contacts will automatically be added to groups that have this
 * flag set to true.
 * <p>
 * Type: INTEGER (boolean)
 */
]"
"[FAVORITES = ""favorites""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * When a contacts is marked as a favorites it will be automatically added
 * to the groups that have this flag set, and when it is removed from favorites
 * it will be removed from these groups.
 * <p>
 * Type: INTEGER (boolean)
 */
]"
"[GROUP_IS_READ_ONLY = ""group_is_read_only""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The ""read-only"" flag: ""0"" by default, ""1"" if the row cannot be modified or
 * deleted except by a sync adapter.  See {@link ContactsContract#CALLER_IS_SYNCADAPTER}.
 * <P>Type: INTEGER</P>
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(AUTHORITY_URI, ""groups"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table
 */
]"
"[CONTENT_SUMMARY_URI = Uri.withAppendedPath(AUTHORITY_URI, ""groups_summary"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table joined with details data from
 * {@link ContactsContract.Data}.
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/group""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of a directory of groups.
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/group""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of a single group.
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(AUTHORITY_URI, ""aggregation_exceptions"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/aggregation_exception""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of {@link #CONTENT_URI} providing a directory of data.
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/aggregation_exception""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of a {@link #CONTENT_URI} subdirectory of an aggregation exception
 */
]"
"[TYPE = ""type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The type of exception: {@link #TYPE_KEEP_TOGETHER}, {@link #TYPE_KEEP_SEPARATE} or
 * {@link #TYPE_AUTOMATIC}.
 *
 * <P>Type: INTEGER</P>
 */
]"
"[TYPE_AUTOMATIC = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Allows the provider to automatically decide whether the specified raw contacts should
 * be included in the same aggregate contact or not.
 */
]"
"[TYPE_KEEP_TOGETHER = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Makes sure that the specified raw contacts are included in the same
 * aggregate contact.
 */
]"
"[TYPE_KEEP_SEPARATE = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Makes sure that the specified raw contacts are NOT included in the same
 * aggregate contact.
 */
]"
"[RAW_CONTACT_ID1 = ""raw_contact_id1""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A reference to the {@link RawContacts#_ID} of the raw contact that the rule applies to.
 */
]"
"[RAW_CONTACT_ID2 = ""raw_contact_id2""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A reference to the other {@link RawContacts#_ID} of the raw contact that the rule
 * applies to.
 */
]"
"[ACCOUNT_NAME = ""account_name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The name of the account instance to which this row belongs.
 * <P>Type: TEXT</P>
 */
]"
"[ACCOUNT_TYPE = ""account_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The type of account to which this row belongs, which when paired with
 * {@link #ACCOUNT_NAME} identifies a specific account.
 * <P>Type: TEXT</P>
 */
]"
"[DATA_SET = ""data_set""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The data set within the account that this row belongs to.  This allows
 * multiple sync adapters for the same account type to distinguish between
 * each others' data.
 *
 * This is empty by default, and is completely optional.  It only needs to
 * be populated if multiple sync adapters are entering distinct data for
 * the same account type and account name.
 * <P>Type: TEXT</P>
 */
]"
"[SHOULD_SYNC = ""should_sync""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Depending on the mode defined by the sync-adapter, this flag controls
 * the top-level sync behavior for this data source.
 * <p>
 * Type: INTEGER (boolean)
 */
]"
"[UNGROUPED_VISIBLE = ""ungrouped_visible""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Flag indicating if contacts without any {@link CommonDataKinds.GroupMembership}
 * entries should be visible in any user interface.
 * <p>
 * Type: INTEGER (boolean)
 */
]"
"[ANY_UNSYNCED = ""any_unsynced""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Read-only flag indicating if this {@link #SHOULD_SYNC} or any
 * {@link Groups#SHOULD_SYNC} under this account have been marked as
 * unsynced.
 */
]"
"[UNGROUPED_COUNT = ""summ_count""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Read-only count of {@link Contacts} from a specific source that have
 * no {@link CommonDataKinds.GroupMembership} entries.
 * <p>
 * Type: INTEGER
 */
]"
"[UNGROUPED_WITH_PHONES = ""summ_phones""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Read-only count of {@link Contacts} from a specific source that have
 * no {@link CommonDataKinds.GroupMembership} entries, and also have phone numbers.
 * <p>
 * Type: INTEGER
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(AUTHORITY_URI, ""settings"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/setting""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME-type of {@link #CONTENT_URI} providing a directory of
 * settings.
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/setting""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME-type of {@link #CONTENT_URI} providing a single setting.
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(AUTHORITY_URI, ""provider_status"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table.  Requests to this URI can be
 * performed on the UI thread because they are always unblocking.
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/provider_status""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME-type of {@link #CONTENT_URI} providing a directory of
 * settings.
 */
]"
"[STATUS = ""status""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * An integer representing the current status of the provider.
 */
]"
"[STATUS_NORMAL = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Default status of the provider.
 */
]"
"[STATUS_BUSY = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The provider won't respond to queries. It is in the middle of a long running task, such
 * as a database upgrade or locale change.
 */
]"
"[STATUS_EMPTY = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The status that indicates that there are no accounts and no contacts
 * on the device.
 */
]"
"[DATABASE_CREATION_TIMESTAMP = ""database_creation_timestamp""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Timestamp (milliseconds since epoch) of when the provider's database was created.
 *
 * <P>Type: long
 */
]"
"[FEEDBACK_URI = Uri.withAppendedPath(Data.CONTENT_URI, ""usagefeedback"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for sending usage feedback.
 * Must be used with {@link ContentResolver#update(Uri, ContentValues, String, String[])}.
 */
]"
"[DELETE_USAGE_URI = Uri.withAppendedPath(Contacts.CONTENT_URI, ""delete_usage"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for deleting all usage information.
 * Must be used with {@link ContentResolver#delete(Uri, String, String[])}.
 * The {@code where} and {@code selectionArgs} parameters are ignored.
 */
]"
"[USAGE_TYPE = ""type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>
 * Name for query parameter specifying the type of data usage.
 * </p>
 */
]"
"[USAGE_TYPE_CALL = ""call""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>
 * Type of usage for voice interaction, which includes phone call, voice chat, and
 * video chat.
 * </p>
 */
]"
"[USAGE_TYPE_LONG_TEXT = ""long_text""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>
 * Type of usage for text interaction involving longer messages, which includes email.
 * </p>
 */
]"
"[USAGE_TYPE_SHORT_TEXT = ""short_text""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>
 * Type of usage for text interaction involving shorter messages, which includes SMS,
 * text chat with email addresses.
 * </p>
 */
]"
"[UNDEMOTE_METHOD = ""undemote""]","[@TestApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The method to invoke in order to undemote a formerly demoted contact. The contact id of
 * the contact must be provided as an argument. If the contact was not previously demoted,
 * nothing will be done.
 * @hide
 */
]"
"[UNPINNED = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Default value for the pinned position of an unpinned contact.
 */
]"
"[DEMOTED = -1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value of pinned position for a contact that a user has indicated should be considered
 * of the lowest priority. It is up to the client application to determine how to present
 * such a contact - for example all the way at the bottom of a contact list, or simply
 * just hidden from view.
 */
]"
"[ACTION_QUICK_CONTACT = ""android.provider.action.QUICK_CONTACT""]","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Action used to launch the system contacts application and bring up a QuickContact dialog
 * for the provided {@link Contacts} entry.
 */
]"
"[EXTRA_TARGET_RECT = ""android.provider.extra.TARGET_RECT""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Extra used to specify pivot dialog location in screen coordinates.
 * @deprecated Use {@link Intent#setSourceBounds(Rect)} instead.
 * @hide
 */
]"
"[EXTRA_MODE = ""android.provider.extra.MODE""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Extra used to specify size of QuickContacts. Not all implementations of QuickContacts
 * will respect this extra's value.
 *
 * One of {@link #MODE_SMALL}, {@link #MODE_MEDIUM}, or {@link #MODE_LARGE}.
 */
]"
"[EXTRA_PRIORITIZED_MIMETYPE = ""android.provider.extra.PRIORITIZED_MIMETYPE""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Extra used to specify which mimetype should be prioritized in the QuickContacts UI.
 * For example, passing the value {@link CommonDataKinds.Phone#CONTENT_ITEM_TYPE} can
 * cause phone numbers to be displayed more prominently in QuickContacts.
 */
]"
"[EXTRA_EXCLUDE_MIMES = ""android.provider.extra.EXCLUDE_MIMES""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Extra used to indicate a list of specific MIME-types to exclude and not display in the
 * QuickContacts dialog. Stored as a {@link String} array.
 */
]"
"[MODE_SMALL = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Small QuickContact mode, usually presented with minimal actions.
 */
]"
"[MODE_MEDIUM = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Medium QuickContact mode, includes actions and light summary describing
 * the {@link Contacts} entry being shown. This may include social
 * status and presence details.
 */
]"
"[MODE_LARGE = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Large QuickContact mode, includes actions and larger, card-like summary
 * of the {@link Contacts} entry being shown. This may include detailed
 * information, such as a photo.
 */
]"
"[MODE_DEFAULT = MODE_LARGE]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(AUTHORITY_URI, ""display_photo"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this class, which allows access to full-size photos,
 * given a key.
 */
]"
"[CONTENT_MAX_DIMENSIONS_URI = Uri.withAppendedPath(AUTHORITY_URI, ""photo_dimensions"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This URI allows the caller to query for the maximum dimensions of a display photo
 * or thumbnail.  Requests to this URI can be performed on the UI thread because
 * they are always unblocking.
 */
]"
"[DISPLAY_MAX_DIM = ""display_max_dim""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Queries to {@link ContactsContract.DisplayPhoto#CONTENT_MAX_DIMENSIONS_URI} will
 * contain this column, populated with the maximum height and width (in pixels)
 * that will be stored for a display photo.  Larger photos will be down-sized to
 * fit within a square of this many pixels.
 */
]"
"[THUMBNAIL_MAX_DIM = ""thumbnail_max_dim""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Queries to {@link ContactsContract.DisplayPhoto#CONTENT_MAX_DIMENSIONS_URI} will
 * contain this column, populated with the height and width (in pixels) for photo
 * thumbnails.
 */
]"
"[SEARCH_SUGGESTION_CLICKED = ""android.provider.Contacts.SEARCH_SUGGESTION_CLICKED""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This is the intent that is fired when a search suggestion is clicked on.
 */
]"
"[SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED = ""android.provider.Contacts.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This is the intent that is fired when a search suggestion for dialing a number
 * is clicked on.
 */
]"
"[SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED = ""android.provider.Contacts.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This is the intent that is fired when a search suggestion for creating a contact
 * is clicked on.
 */
]"
"[CONTACTS_DATABASE_CREATED = ""android.provider.Contacts.DATABASE_CREATED""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This is the intent that is fired when the contacts database is created. <p> The
 * READ_CONTACT permission is required to receive these broadcasts.
 *
 * <p>Because this is an implicit broadcast, apps targeting Android O will no longer
 * receive this broadcast via a manifest broadcast receiver.  (Broadcast receivers
 * registered at runtime with
 * {@link Context#registerReceiver(BroadcastReceiver, IntentFilter)} will still receive it.)
 * Instead, an app can use {@link ProviderStatus#DATABASE_CREATION_TIMESTAMP} to see if the
 * contacts database has been initialized when it starts.
 */
]"
"[ATTACH_IMAGE = ""com.android.contacts.action.ATTACH_IMAGE""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Starts an Activity that lets the user pick a contact to attach an image to.
 * After picking the contact it launches the image cropper in face detection mode.
 */
]"
"[INVITE_CONTACT = ""com.android.contacts.action.INVITE_CONTACT""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This is the intent that is fired when the user clicks the ""invite to the network"" button
 * on a contact.  Only sent to an activity which is explicitly registered by a contact
 * provider which supports the ""invite to the network"" feature.
 * <p>
 * {@link Intent#getData()} contains the lookup URI for the contact.
 */
]"
"[SHOW_OR_CREATE_CONTACT = ""com.android.contacts.action.SHOW_OR_CREATE_CONTACT""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Takes as input a data URI with a mailto: or tel: scheme. If a single
 * contact exists with the given data it will be shown. If no contact
 * exists, a dialog will ask the user if they want to create a new
 * contact with the provided details filled in. If multiple contacts
 * share the data the user will be prompted to pick which contact they
 * want to view.
 * <p>
 * For <code>mailto:</code> URIs, the scheme specific portion must be a
 * raw email address, such as one built using
 * {@link Uri#fromParts(String, String, String)}.
 * <p>
 * For <code>tel:</code> URIs, the scheme specific portion is compared
 * to existing numbers using the standard caller ID lookup algorithm.
 * The number must be properly encoded, for example using
 * {@link Uri#fromParts(String, String, String)}.
 * <p>
 * Any extras from the {@link Insert} class will be passed along to the
 * create activity if there are no contacts to show.
 * <p>
 * Passing true for the {@link #EXTRA_FORCE_CREATE} extra will skip
 * prompting the user when the contact doesn't exist.
 */
]"
"[ACTION_VOICE_SEND_MESSAGE_TO_CONTACTS = ""android.provider.action.VOICE_SEND_MESSAGE_TO_CONTACTS""]","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Activity Action: Initiate a message to someone by voice. The message could be text,
 * audio, video or image(photo). This action supports messaging with a specific contact
 * regardless of the underlying messaging protocol used.
 * <p>
 * The action could be originated from the Voice Assistant as a voice interaction. In such
 * case, a receiving activity that supports {@link android.content.Intent#CATEGORY_VOICE}
 * could check return value of {@link android.app.Activity#isVoiceInteractionRoot} before
 * proceeding. By doing this check the activity verifies that the action indeed was
 * initiated by Voice Assistant and could send a message right away, without any further
 * input from the user. This allows for a smooth user experience when sending a message by
 * voice. Note: this activity must also support the {@link
 * android.content.Intent#CATEGORY_DEFAULT} so it can be found by {@link
 * android.service.voice.VoiceInteractionSession#startVoiceActivity}.
 * <p>
 * When the action was not initiated by Voice Assistant or when the receiving activity does
 * not support {@link android.content.Intent#CATEGORY_VOICE}, the activity must confirm
 * with the user before sending the message (because in this case it is unknown which app
 * sent the intent, it could be malicious).
 * <p>
 * To allow the Voice Assistant to help users with contacts disambiguation, the messaging
 * app may choose to integrate with the Contacts Provider. You will need to specify a new
 * MIME type in order to store your app’s unique contact IDs and optional human readable
 * labels in the Data table. The Voice Assistant needs to know this MIME type and {@link
 * RawContacts#ACCOUNT_TYPE} that you are using in order to provide the smooth contact
 * disambiguation user experience. The following convention should be met when performing
 * such integration:
 * <ul>
 * <li>This activity should have a string meta-data field associated with it, {@link
 * #METADATA_ACCOUNT_TYPE}, which defines {@link RawContacts#ACCOUNT_TYPE} for your Contacts
 * Provider implementation. The account type should be globally unique, for example you can
 * use your app package name as the account type.</li>
 * <li>This activity should have a string meta-data field associated with it, {@link
 * #METADATA_MIMETYPE}, which defines {@link DataColumns#MIMETYPE} for your Contacts
 * Provider implementation. For example, you can use
 * ""vnd.android.cursor.item/vnd.{$app_package_name}.profile"" as MIME type.</li>
 * <li>When filling Data table row for METADATA_MIMETYPE, column {@link DataColumns#DATA1}
 * should store the unique contact ID as understood by the app. This value will be used in
 * the {@link #EXTRA_RECIPIENT_CONTACT_CHAT_ID}.</li>
 * <li>Optionally, when filling Data table row for METADATA_MIMETYPE, column {@link
 * DataColumns#DATA3} could store a human readable label for the ID. For example it could be
 * phone number or human readable username/user_id like ""a_super_cool_user_name"". This label
 * may be shown below the Contact Name by the Voice Assistant as the user completes the
 * voice action. If DATA3 is empty, the ID in DATA1 may be shown instead.</li>
 * <li><em>Note: Do not use DATA3 to store the Contact Name. The Voice Assistant will
 * already get the Contact Name from the RawContact’s display_name.</em></li>
 * <li><em>Note: Some apps may choose to use phone number as the unique contact ID in DATA1.
 * If this applies to you and you’d like phone number to be shown below the Contact Name by
 * the Voice Assistant, then you may choose to leave DATA3 empty.</em></li>
 * <li><em>Note: If your app also uses DATA3 to display contact details in the Contacts App,
 * make sure it does not include prefix text such as ""Message +<phone>"" or ""Free Message
 * +<phone>"", etc. If you must show the prefix text in the Contacts App, please use a
 * different DATA# column, and update your contacts.xml to point to this new column. </em>
 * </li>
 * </ul>
 * If the app chooses not to integrate with the Contacts Provider (in particular, when
 * either METADATA_ACCOUNT_TYPE or METADATA_MIMETYPE field is missing), Voice Assistant
 * will use existing phone number entries as contact ID's for such app.
 * <p>
 * Input: {@link android.content.Intent#getType} is the MIME type of the data being sent.
 * The intent sender will always put the concrete mime type in the intent type, like
 * ""text/plain"" or ""audio/wav"" for example. If the MIME type is ""text/plain"", message to
 * sent will be provided via {@link android.content.Intent#EXTRA_TEXT} as a styled
 * CharSequence. Otherwise, the message content will be supplied through {@link
 * android.content.Intent#setClipData(ClipData)} as a content provider URI(s). In the latter
 * case, EXTRA_TEXT could still be supplied optionally; for example, for audio messages
 * ClipData will contain URI of a recording and EXTRA_TEXT could contain the text
 * transcription of this recording.
 * <p>
 * The message can have n recipients. The n-th recipient of the message will be provided as
 * n-th elements of {@link #EXTRA_RECIPIENT_CONTACT_URI}, {@link
 * #EXTRA_RECIPIENT_CONTACT_CHAT_ID} and {@link #EXTRA_RECIPIENT_CONTACT_NAME} (as a
 * consequence, EXTRA_RECIPIENT_CONTACT_URI, EXTRA_RECIPIENT_CONTACT_CHAT_ID and
 * EXTRA_RECIPIENT_CONTACT_NAME should all be of length n). If neither of these 3 elements
 * is provided (e.g. all 3 are null) for the recipient or if the information provided is
 * ambiguous then the activity should prompt the user for the recipient to send the message
 * to.
 * <p>
 * Output: nothing
 *
 * @see #EXTRA_RECIPIENT_CONTACT_URI
 * @see #EXTRA_RECIPIENT_CONTACT_CHAT_ID
 * @see #EXTRA_RECIPIENT_CONTACT_NAME
 * @see #METADATA_ACCOUNT_TYPE
 * @see #METADATA_MIMETYPE
 */
]"
"[EXTRA_RECIPIENT_CONTACT_URI = ""android.provider.extra.RECIPIENT_CONTACT_URI""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This extra specifies a content provider uri(s) for the contact(s) (if the contacts were
 * located in the Contacts Provider), used with {@link
 * #ACTION_VOICE_SEND_MESSAGE_TO_CONTACTS} to supply the recipient(s). The value of this
 * extra is a {@code String[]}. The number of elements in the array should be equal to
 * number of recipients (and consistent with {@link #EXTRA_RECIPIENT_CONTACT_CHAT_ID} and
 * {@link #EXTRA_RECIPIENT_CONTACT_NAME}). When the value of the element for the particular
 * recipient is absent, it will be set to null.
 * <p>
 * <em>Note: one contact may have multiple accounts (e.g. Chat IDs) on a specific messaging
 * platform, so this may be ambiguous. E.g., one contact “John Smith” could have two
 * accounts on the same messaging app.</em>
 * <p>
 * <em>Example value: {""content://com.android.contacts/contacts/16""}</em>
 */
]"
"[EXTRA_RECIPIENT_CONTACT_CHAT_ID = ""android.provider.extra.RECIPIENT_CONTACT_CHAT_ID""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This extra specifies a messaging app’s unique ID(s) for the contact(s), used with {@link
 * #ACTION_VOICE_SEND_MESSAGE_TO_CONTACTS} to supply the recipient(s). The value of this
 * extra is a {@code String[]}. The number of elements in the array should be equal to
 * number of recipients (and consistent with {@link #EXTRA_RECIPIENT_CONTACT_URI} and {@link
 * #EXTRA_RECIPIENT_CONTACT_NAME}). When the value of the element for the particular
 * recipient is absent, it will be set to null.
 * <p>
 * The value of the elements comes from the {@link DataColumns#DATA1} column in Contacts
 * Provider with {@link DataColumns#MIMETYPE} from {@link #METADATA_MIMETYPE} (if both
 * {@link #METADATA_ACCOUNT_TYPE} and {@link #METADATA_MIMETYPE} are specified by the app;
 * otherwise, the value will be a phone number), and should be the unambiguous contact
 * endpoint. This value is app-specific, it could be some proprietary ID or a phone number.
 */
]"
"[EXTRA_RECIPIENT_CONTACT_NAME = ""android.provider.extra.RECIPIENT_CONTACT_NAME""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This extra specifies the contact name (full name from the Contacts Provider), used with
 * {@link #ACTION_VOICE_SEND_MESSAGE_TO_CONTACTS} to supply the recipient. The value of this
 * extra is a {@code String[]}. The number of elements in the array should be equal to
 * number of recipients (and consistent with {@link #EXTRA_RECIPIENT_CONTACT_URI} and {@link
 * #EXTRA_RECIPIENT_CONTACT_CHAT_ID}). When the value of the element for the particular
 * recipient is absent, it will be set to null.
 * <p>
 * The value of the elements comes from RawContact's display_name column.
 * <p>
 * <em>Example value: {""Jane Doe""}</em>
 */
]"
"[METADATA_ACCOUNT_TYPE = ""android.provider.account_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A string associated with an {@link #ACTION_VOICE_SEND_MESSAGE_TO_CONTACTS} activity
 * describing {@link RawContacts#ACCOUNT_TYPE} for the corresponding Contacts Provider
 * implementation.
 */
]"
"[METADATA_MIMETYPE = ""android.provider.mimetype""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A string associated with an {@link #ACTION_VOICE_SEND_MESSAGE_TO_CONTACTS} activity
 * describing {@link DataColumns#MIMETYPE} for the corresponding Contacts Provider
 * implementation.
 */
]"
"[ACTION_GET_MULTIPLE_PHONES = ""com.android.contacts.action.GET_MULTIPLE_PHONES""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Starts an Activity that lets the user select the multiple phones from a
 * list of phone numbers which come from the contacts or
 * {@link #EXTRA_PHONE_URIS}.
 * <p>
 * The phone numbers being passed in through {@link #EXTRA_PHONE_URIS}
 * could belong to the contacts or not, and will be selected by default.
 * <p>
 * The user's selection will be returned from
 * {@link android.app.Activity#onActivityResult(int, int, android.content.Intent)}
 * if the resultCode is
 * {@link android.app.Activity#RESULT_OK}, the array of picked phone
 * numbers are in the Intent's
 * {@link #EXTRA_PHONE_URIS}; otherwise, the
 * {@link android.app.Activity#RESULT_CANCELED} is returned if the user
 * left the Activity without changing the selection.
 *
 * @hide
 */
]"
"[ACTION_PROFILE_CHANGED = ""android.provider.Contacts.PROFILE_CHANGED""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A broadcast action which is sent when any change has been made to the profile, such
 * as the profile name or the picture.  A receiver must have
 * the android.permission.READ_PROFILE permission.
 *
 * @hide
 */
]"
"[EXTRA_FORCE_CREATE = ""com.android.contacts.action.FORCE_CREATE""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used with {@link #SHOW_OR_CREATE_CONTACT} to force creating a new
 * contact if no matching contact found. Otherwise, default behavior is
 * to prompt user with dialog before creating.
 * <p>
 * Type: BOOLEAN
 */
]"
"[EXTRA_CREATE_DESCRIPTION = ""com.android.contacts.action.CREATE_DESCRIPTION""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used with {@link #SHOW_OR_CREATE_CONTACT} to specify an exact
 * description to be shown when prompting user about creating a new
 * contact.
 * <p>
 * Type: STRING
 */
]"
"[EXTRA_PHONE_URIS = ""com.android.contacts.extra.PHONE_URIS""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used with {@link #ACTION_GET_MULTIPLE_PHONES} as the input or output value.
 * <p>
 * The phone numbers want to be picked by default should be passed in as
 * input value. These phone numbers could belong to the contacts or not.
 * <p>
 * The phone numbers which were picked by the user are returned as output
 * value.
 * <p>
 * Type: array of URIs, the tel URI is used for the phone numbers which don't
 * belong to any contact, the content URI is used for phone id in contacts.
 *
 * @hide
 */
]"
"[EXTRA_TARGET_RECT = ""target_rect""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Optional extra used with {@link #SHOW_OR_CREATE_CONTACT} to specify a
 * dialog location using screen coordinates. When not specified, the
 * dialog will be centered.
 *
 * @hide
 */
]"
"[EXTRA_MODE = ""mode""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Optional extra used with {@link #SHOW_OR_CREATE_CONTACT} to specify a
 * desired dialog style, usually a variation on size. One of
 * {@link #MODE_SMALL}, {@link #MODE_MEDIUM}, or {@link #MODE_LARGE}.
 *
 * @hide
 */
]"
"[MODE_SMALL = 1]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value for {@link #EXTRA_MODE} to show a small-sized dialog.
 *
 * @hide
 */
]"
"[MODE_MEDIUM = 2]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value for {@link #EXTRA_MODE} to show a medium-sized dialog.
 *
 * @hide
 */
]"
"[MODE_LARGE = 3]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value for {@link #EXTRA_MODE} to show a large-sized dialog.
 *
 * @hide
 */
]"
"[EXTRA_EXCLUDE_MIMES = ""exclude_mimes""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Optional extra used with {@link #SHOW_OR_CREATE_CONTACT} to indicate
 * a list of specific MIME-types to exclude and not display. Stored as a
 * {@link String} array.
 *
 * @hide
 */
]"
"[ACTION = Intent.ACTION_INSERT]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The action code to use when adding a contact
 */
]"
"[FULL_MODE = ""full_mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If present, forces a bypass of quick insert mode.
 */
]"
"[NAME = ""name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact name.
 * <P>Type: String</P>
 */
]"
"[PHONETIC_NAME = ""phonetic_name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact phonetic name.
 * <P>Type: String</P>
 */
]"
"[COMPANY = ""company""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact company.
 * <P>Type: String</P>
 */
]"
"[JOB_TITLE = ""job_title""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact job title.
 * <P>Type: String</P>
 */
]"
"[NOTES = ""notes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact notes.
 * <P>Type: String</P>
 */
]"
"[PHONE = ""phone""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact phone number.
 * <P>Type: String</P>
 */
]"
"[PHONE_TYPE = ""phone_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact phone number type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Phone},
 * or a string specifying a custom label.</P>
 */
]"
"[PHONE_ISPRIMARY = ""phone_isprimary""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the phone isprimary flag.
 * <P>Type: boolean</P>
 */
]"
"[SECONDARY_PHONE = ""secondary_phone""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional second contact phone number.
 * <P>Type: String</P>
 */
]"
"[SECONDARY_PHONE_TYPE = ""secondary_phone_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional second contact phone number type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Phone},
 * or a string specifying a custom label.</P>
 */
]"
"[TERTIARY_PHONE = ""tertiary_phone""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional third contact phone number.
 * <P>Type: String</P>
 */
]"
"[TERTIARY_PHONE_TYPE = ""tertiary_phone_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional third contact phone number type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Phone},
 * or a string specifying a custom label.</P>
 */
]"
"[EMAIL = ""email""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact email address.
 * <P>Type: String</P>
 */
]"
"[EMAIL_TYPE = ""email_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact email type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Email}
 * or a string specifying a custom label.</P>
 */
]"
"[EMAIL_ISPRIMARY = ""email_isprimary""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the email isprimary flag.
 * <P>Type: boolean</P>
 */
]"
"[SECONDARY_EMAIL = ""secondary_email""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional second contact email address.
 * <P>Type: String</P>
 */
]"
"[SECONDARY_EMAIL_TYPE = ""secondary_email_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional second contact email type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Email}
 * or a string specifying a custom label.</P>
 */
]"
"[TERTIARY_EMAIL = ""tertiary_email""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional third contact email address.
 * <P>Type: String</P>
 */
]"
"[TERTIARY_EMAIL_TYPE = ""tertiary_email_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional third contact email type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Email}
 * or a string specifying a custom label.</P>
 */
]"
"[POSTAL = ""postal""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact postal address.
 * <P>Type: String</P>
 */
]"
"[POSTAL_TYPE = ""postal_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact postal address type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.StructuredPostal}
 * or a string specifying a custom label.</P>
 */
]"
"[POSTAL_ISPRIMARY = ""postal_isprimary""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the postal isprimary flag.
 * <P>Type: boolean</P>
 */
]"
"[IM_HANDLE = ""im_handle""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an IM handle.
 * <P>Type: String</P>
 */
]"
"[IM_PROTOCOL = ""im_protocol""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the IM protocol
 */
]"
"[IM_ISPRIMARY = ""im_isprimary""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the IM isprimary flag.
 * <P>Type: boolean</P>
 */
]"
"[DATA = ""data""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field that allows the client to supply multiple rows of
 * arbitrary data for a single contact created using the {@link Intent#ACTION_INSERT}
 * or edited using {@link Intent#ACTION_EDIT}. It is an ArrayList of
 * {@link ContentValues}, one per data row. Supplying this extra is
 * similar to inserting multiple rows into the {@link Data} table,
 * except the user gets a chance to see and edit them before saving.
 * Each ContentValues object must have a value for {@link Data#MIMETYPE}.
 * If supplied values are not visible in the editor UI, they will be
 * dropped.  Duplicate data will dropped.  Some fields
 * like {@link CommonDataKinds.Email#TYPE Email.TYPE} may be automatically
 * adjusted to comply with the constraints of the specific account type.
 * For example, an Exchange contact can only have one phone numbers of type Home,
 * so the contact editor may choose a different type for this phone number to
 * avoid dropping the valueable part of the row, which is the phone number.
 * <p>
 * Example:
 * <pre>
 * ArrayList&lt;ContentValues&gt; data = new ArrayList&lt;ContentValues&gt;();
 *
 * ContentValues row1 = new ContentValues();
 * row1.put(Data.MIMETYPE, Organization.CONTENT_ITEM_TYPE);
 * row1.put(Organization.COMPANY, ""Android"");
 * data.add(row1);
 *
 * ContentValues row2 = new ContentValues();
 * row2.put(Data.MIMETYPE, Email.CONTENT_ITEM_TYPE);
 * row2.put(Email.TYPE, Email.TYPE_CUSTOM);
 * row2.put(Email.LABEL, ""Green Bot"");
 * row2.put(Email.ADDRESS, ""android@android.com"");
 * data.add(row2);
 *
 * Intent intent = new Intent(Intent.ACTION_INSERT, Contacts.CONTENT_URI);
 * intent.putParcelableArrayListExtra(Insert.DATA, data);
 *
 * startActivity(intent);
 * </pre>
 */
]"
"[EXTRA_ACCOUNT = ""android.provider.extra.ACCOUNT""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to specify the account in which to create the new contact.
 * <p>
 * If this value is not provided, the user is presented with a disambiguation
 * dialog to chose an account
 * <p>
 * Type: {@link Account}
 */
]"
"[EXTRA_DATA_SET = ""android.provider.extra.DATA_SET""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to specify the data set within the account in which to create the
 * new contact.
 * <p>
 * This value is optional - if it is not specified, the contact will be
 * created in the base account, with no data set.
 * <p>
 * Type: String
 */
]"
"[RAW_CONTACT_BACKUP_ID = ""raw_contact_backup_id""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The raw contact backup id.
 * A reference to the {@link ContactsContract.RawContacts#BACKUP_ID} that save the
 * persistent unique id for each raw contact within its source system.
 */
]"
"[ACCOUNT_TYPE = ""account_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The account type to which the raw_contact of this item is associated. See
 * {@link RawContacts#ACCOUNT_TYPE}
 */
]"
"[ACCOUNT_NAME = ""account_name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The account name to which the raw_contact of this item is associated. See
 * {@link RawContacts#ACCOUNT_NAME}
 */
]"
"[DATA_SET = ""data_set""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The data set within the account that the raw_contact of this row belongs to. This allows
 * multiple sync adapters for the same account type to distinguish between
 * each others' data.
 * {@link RawContacts#DATA_SET}
 */
]"
"[DATA = ""data""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A text column contains the Json string got from People API. The Json string contains
 * all the metadata related to the raw contact, i.e., all the data fields and
 * aggregation exceptions.
 *
 * Here is an example of the Json string got from the actual schema.
 * <pre>
 * {
 * ""unique_contact_id"": {
 * ""account_type"": ""CUSTOM_ACCOUNT"",
 * ""custom_account_type"": ""facebook"",
 * ""account_name"": ""android-test"",
 * ""contact_id"": ""1111111"",
 * ""data_set"": ""FOCUS""
 * },
 * ""contact_prefs"": {
 * ""send_to_voicemail"": true,
 * ""starred"": false,
 * ""pinned"": 2
 * },
 * ""aggregation_data"": [
 * {
 * ""type"": ""TOGETHER"",
 * ""contact_ids"": [
 * {
 * ""account_type"": ""GOOGLE_ACCOUNT"",
 * ""account_name"": ""android-test2"",
 * ""contact_id"": ""2222222"",
 * ""data_set"": ""GOOGLE_PLUS""
 * },
 * {
 * ""account_type"": ""GOOGLE_ACCOUNT"",
 * ""account_name"": ""android-test3"",
 * ""contact_id"": ""3333333"",
 * ""data_set"": ""CUSTOM"",
 * ""custom_data_set"": ""custom type""
 * }
 * ]
 * }
 * ],
 * ""field_data"": [
 * {
 * ""field_data_id"": ""1001"",
 * ""field_data_prefs"": {
 * ""is_primary"": true,
 * ""is_super_primary"": true
 * },
 * ""usage_stats"": [
 * {
 * ""usage_type"": ""CALL"",
 * ""last_time_used"": 10000001,
 * ""usage_count"": 10
 * }
 * ]
 * }
 * ]
 * }
 * </pre>
 */
]"
"[DELETED = ""deleted""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The ""deleted"" flag: ""0"" by default, ""1"" if the row has been marked
 * for deletion. When {@link android.content.ContentResolver#delete} is
 * called on a raw contact, updating MetadataSync table to set the flag of the raw contact
 * as ""1"", then metadata sync adapter deletes the raw contact metadata on the server.
 * <P>Type: INTEGER</P>
 */
]"
"[METADATA_AUTHORITY = ""com.android.contacts.metadata""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The authority for the contacts metadata
 */
]"
"[METADATA_AUTHORITY_URI = Uri.parse(""content://"" + METADATA_AUTHORITY)]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A content:// style uri to the authority for the contacts metadata
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(METADATA_AUTHORITY_URI, ""metadata_sync"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table.
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/contact_metadata""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of {@link #CONTENT_URI} providing a directory of contact metadata
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/contact_metadata""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of a {@link #CONTENT_URI} subdirectory of a single contact metadata.
 */
]"
"[ACCOUNT_TYPE = ""account_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A reference to the name of the account to which this state belongs
 * <P>Type: STRING</P>
 */
]"
"[ACCOUNT_NAME = ""account_name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A reference to the type of the account to which this state belongs
 * <P>Type: STRING</P>
 */
]"
"[DATA_SET = ""data_set""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A reference to the data set within the account to which this state belongs
 * <P>Type: STRING</P>
 */
]"
"[STATE = ""state""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The sync state associated with this account.
 * <P>Type: Blob</P>
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(MetadataSync.METADATA_AUTHORITY_URI, ""metadata_sync_state"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table.
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/contact_metadata_sync_state""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of {@link #CONTENT_URI} providing a directory of contact metadata sync
 * states.
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/contact_metadata_sync_state""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of a {@link #CONTENT_URI} subdirectory of a single contact metadata sync
 * state.
 */
]"
"[target]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[left]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[top]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[right]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[bottom]","[@UnsupportedAppUsage]","[]","Optional.empty"
"[mSession]","[@UnsupportedAppUsage]","[FINAL]","Optional.empty"
"[mWindow]","[@UnsupportedAppUsage]","[FINAL]","Optional.empty"
"[mWindowToken]","[]","[FINAL]","Optional.empty"
"[mDisplay]","[]","[]","Optional.empty"
"[mRootCallbacks]","[]","[FINAL]","Optional.empty"
"[mIWindowId]","[]","[]","Optional.empty"
"[mWindowId]","[]","[]","Optional.empty"
"[mRootView]","[]","[]","Optional[/**
 * The top view of the hierarchy.
 */
]"
"[mPanelParentWindowToken]","[]","[]","Optional.empty"
"[mHardwareAccelerated]","[]","[]","Optional.empty"
"[mHardwareAccelerationRequested]","[]","[]","Optional.empty"
"[mThreadedRenderer]","[]","[]","Optional.empty"
"[mPendingAnimatingRenderNodes]","[]","[]","Optional.empty"
"[mDisplayState = Display.STATE_UNKNOWN]","[@UnsupportedAppUsage]","[]","Optional[/**
 * The state of the display to which the window is attached, as reported
 * by {@link Display#getState()}.  Note that the display state constants
 * declared by {@link Display} do not exactly line up with the screen state
 * constants declared by {@link View} (there are more display states than
 * screen states).
 */
]"
"[mApplicationScale]","[@UnsupportedAppUsage]","[]","Optional[/**
 * Scale factor used by the compatibility mode
 */
]"
"[mScalingRequired]","[@UnsupportedAppUsage]","[]","Optional[/**
 * Indicates whether the application is in compatibility mode
 */
]"
"[mWindowLeft]","[]","[]","Optional[/**
 * Left position of this view's window
 */
]"
"[mWindowTop]","[]","[]","Optional[/**
 * Top position of this view's window
 */
]"
"[mUse32BitDrawingCache]","[]","[]","Optional[/**
 * Indicates whether views need to use 32-bit drawing caches
 */
]"
"[mContentInsets = new Rect()]","[@UnsupportedAppUsage(maxTargetSdk = VERSION_CODES.Q, publicAlternatives = ""Use {@link WindowInsets#getInsets(int)}"")]","[FINAL]","Optional[/**
 * For windows that are full-screen but using insets to layout inside
 * of the screen decorations, these are the current insets for the
 * content of the window.
 */
]"
"[mVisibleInsets = new Rect()]","[@UnsupportedAppUsage(maxTargetSdk = VERSION_CODES.Q, publicAlternatives = ""Use {@link WindowInsets#getInsets(int)}"")]","[FINAL]","Optional[/**
 * For windows that are full-screen but using insets to layout inside
 * of the screen decorations, these are the current insets for the
 * actual visible parts of the window.
 */
]"
"[mStableInsets = new Rect()]","[@UnsupportedAppUsage(maxTargetSdk = VERSION_CODES.Q, publicAlternatives = ""Use {@link WindowInsets#getInsets(int)}"")]","[FINAL]","Optional[/**
 * For windows that are full-screen but using insets to layout inside
 * of the screen decorations, these are the current insets for the
 * stable system windows.
 */
]"
"[mCaptionInsets = new Rect()]","[]","[FINAL]","Optional[/**
 * Current caption insets to the display coordinate.
 */
]"
"[mDisplayCutout = new DisplayCutout.ParcelableWrapper(DisplayCutout.NO_CUTOUT)]","[]","[FINAL]","Optional.empty"
"[mAlwaysConsumeSystemBars]","[]","[]","Optional[/**
 * In multi-window we force show the system bars. Because we don't want that the surface
 * size changes in this mode, we instead have a flag whether the system bars sizes should
 * always be consumed, so the app is treated like there are no virtual system bars at all.
 */
]"
"[mGivenInternalInsets = new ViewTreeObserver.InternalInsetsInfo()]","[@UnsupportedAppUsage]","[FINAL]","Optional[/**
 * The internal insets given by this window.  This value is
 * supplied by the client (through
 * {@link ViewTreeObserver.OnComputeInternalInsetsListener}) and will
 * be given to the window manager when changed to be used in laying
 * out windows behind it.
 */
]"
"[mHasNonEmptyGivenInternalInsets]","[]","[]","Optional[/**
 * Set to true when mGivenInternalInsets is non-empty.
 */
]"
"[mScrollContainers = new ArrayList<View>()]","[@UnsupportedAppUsage]","[FINAL]","Optional[/**
 * All views in the window's hierarchy that serve as scroll containers,
 * used to determine if the window can be resized or must be panned
 * to adjust for a soft input area.
 */
]"
"[mKeyDispatchState = new KeyEvent.DispatcherState()]","[@UnsupportedAppUsage]","[FINAL]","Optional.empty"
"[mHasWindowFocus]","[@UnsupportedAppUsage]","[]","Optional[/**
 * Indicates whether the view's window currently has the focus.
 */
]"
"[mWindowVisibility]","[]","[]","Optional[/**
 * The current visibility of the window.
 */
]"
"[mDrawingTime]","[@UnsupportedAppUsage]","[]","Optional[/**
 * Indicates the time at which drawing started to occur.
 */
]"
"[mInTouchMode]","[@UnsupportedAppUsage]","[]","Optional[/**
 * Indicates whether the view's window is currently in touch mode.
 */
]"
"[mUnbufferedDispatchRequested]","[]","[]","Optional[/**
 * Indicates whether the view has requested unbuffered input dispatching for the current
 * event stream.
 */
]"
"[mRecomputeGlobalAttributes]","[@UnsupportedAppUsage]","[]","Optional[/**
 * Indicates that ViewAncestor should trigger a global layout change
 * the next time it performs a traversal
 */
]"
"[mForceReportNewAttributes]","[]","[]","Optional[/**
 * Always report new attributes at next traversal.
 */
]"
"[mKeepScreenOn]","[@UnsupportedAppUsage]","[]","Optional[/**
 * Set during a traveral if any views want to keep the screen on.
 */
]"
"[mNeedsUpdateLightCenter]","[]","[]","Optional[/**
 * Set during a traveral if the light center needs to be updated.
 */
]"
"[mSystemUiVisibility]","[]","[]","Optional[/**
 * Bitwise-or of all of the values that views have passed to setSystemUiVisibility().
 */
]"
"[mDisabledSystemUiVisibility]","[]","[]","Optional[/**
 * Hack to force certain system UI visibility flags to be cleared.
 */
]"
"[mHasSystemUiListeners]","[]","[]","Optional[/**
 * True if a view in this hierarchy has an OnSystemUiVisibilityChangeListener
 * attached.
 */
]"
"[mViewVisibilityChanged]","[@UnsupportedAppUsage]","[]","Optional[/**
 * Set if the visibility of any views has changed.
 */
]"
"[mViewScrollChanged]","[@UnsupportedAppUsage]","[]","Optional[/**
 * Set to true if a view has been scrolled.
 */
]"
"[mHandlingPointerEvent]","[]","[]","Optional[/**
 * Set to true if a pointer event is currently being handled.
 */
]"
"[mLocationInParentDisplay = new Point()]","[]","[FINAL]","Optional[/**
 * The offset of this view's window when it's on an embedded display that is re-parented
 * to another window.
 */
]"
"[mScreenMatrixInEmbeddedHierarchy]","[]","[]","Optional[/**
 * The screen matrix of this view when it's on a {@link SurfaceControlViewHost} that is
 * embedded within a SurfaceView.
 */
]"
"[mTransparentLocation = new int[2]]","[]","[FINAL]","Optional[/**
 * Global to the view hierarchy used as a temporary for dealing with
 * x/y points in the transparent region computations.
 */
]"
"[mInvalidateChildLocation = new int[2]]","[]","[FINAL]","Optional[/**
 * Global to the view hierarchy used as a temporary for dealing with
 * x/y points in the ViewGroup.invalidateChild implementation.
 */
]"
"[mTmpLocation = new int[2]]","[]","[FINAL]","Optional[/**
 * Global to the view hierarchy used as a temporary for dealing with
 * computing absolute on-screen location.
 */
]"
"[mTmpTransformLocation = new float[2]]","[]","[FINAL]","Optional[/**
 * Global to the view hierarchy used as a temporary for dealing with
 * x/y location when view is transformed.
 */
]"
"[mTreeObserver]","[@UnsupportedAppUsage]","[FINAL]","Optional[/**
 * The view tree observer used to dispatch global events like
 * layout, pre-draw, touch mode change, etc.
 */
]"
"[mCanvas]","[]","[]","Optional[/**
 * A Canvas used by the view hierarchy to perform bitmap caching.
 */
]"
"[mViewRootImpl]","[]","[FINAL]","Optional[/**
 * The view root impl.
 */
]"
"[mHandler]","[@UnsupportedAppUsage]","[FINAL]","Optional[/**
 * A Handler supplied by a view's {@link android.view.ViewRootImpl}. This
 * handler can be used to pump events in the UI events queue.
 */
]"
"[mTmpInvalRect = new Rect()]","[]","[FINAL]","Optional[/**
 * Temporary for use in computing invalidate rectangles while
 * calling up the hierarchy.
 */
]"
"[mTmpTransformRect = new RectF()]","[]","[FINAL]","Optional[/**
 * Temporary for use in computing hit areas with transformed views
 */
]"
"[mTmpTransformRect1 = new RectF()]","[]","[FINAL]","Optional[/**
 * Temporary for use in computing hit areas with transformed views
 */
]"
"[mTmpRectList = new ArrayList<>()]","[]","[FINAL]","Optional[/**
 * Temporary list of rectanges.
 */
]"
"[mTmpMatrix = new Matrix()]","[]","[FINAL]","Optional[/**
 * Temporary for use in transforming invalidation rect
 */
]"
"[mTmpTransformation = new Transformation()]","[]","[FINAL]","Optional[/**
 * Temporary for use in transforming invalidation rect
 */
]"
"[mTmpOutline = new Outline()]","[]","[FINAL]","Optional[/**
 * Temporary for use in querying outlines from OutlineProviders
 */
]"
"[mTempArrayList = new ArrayList<View>(24)]","[]","[FINAL]","Optional[/**
 * Temporary list for use in collecting focusable descendents of a view.
 */
]"
"[mAccessibilityWindowId = AccessibilityWindowInfo.UNDEFINED_WINDOW_ID]","[]","[]","Optional[/**
 * The id of the window for accessibility purposes.
 */
]"
"[mAccessibilityFetchFlags]","[]","[]","Optional[/**
 * Flags related to accessibility processing.
 *
 * @see AccessibilityNodeInfo#FLAG_INCLUDE_NOT_IMPORTANT_VIEWS
 * @see AccessibilityNodeInfo#FLAG_REPORT_VIEW_IDS
 */
]"
"[mAccessibilityFocusDrawable]","[]","[]","Optional[/**
 * The drawable for highlighting accessibility focus.
 */
]"
"[mAutofilledDrawable]","[]","[]","Optional[/**
 * The drawable for highlighting autofilled views.
 *
 * @see #isAutofilled()
 */
]"
"[mDebugLayout = DisplayProperties.debug_layout().orElse(false)]","[]","[]","Optional[/**
 * Show where the margins, bounds and layout bounds are for each view.
 */
]"
"[mPoint = new Point()]","[]","[FINAL]","Optional[/**
 * Point used to compute visible regions.
 */
]"
"[mViewRequestingLayout]","[]","[]","Optional[/**
 * Used to track which View originated a requestLayout() call, used when
 * requestLayout() is called during layout.
 */
]"
"[mDragToken]","[]","[]","Optional[/**
 * Used to track the identity of the current drag operation.
 */
]"
"[mDragSurface]","[]","[PUBLIC]","Optional[/**
 * The drag shadow surface for the current drag operation.
 */
]"
"[mTooltipHost]","[]","[]","Optional[/**
 * The view that currently has a tooltip displayed.
 */
]"
"[mReadyForContentCaptureUpdates]","[]","[]","Optional[/**
 * The initial structure has been reported so the view is ready to report updates.
 */
]"
"[mContentCaptureEvents]","[]","[]","Optional[/**
 * Map(keyed by session) of content capture events that need to be notified after the view
 * hierarchy is traversed: value is either the view itself for appearead events, or its
 * autofill id for disappeared.
 */
]"
"[mContentCaptureManager]","[]","[]","Optional[/**
 * Cached reference to the {@link ContentCaptureManager}.
 */
]"
"[mContentOnApplyWindowInsetsListener]","[]","[]","Optional[/**
 * Listener used to fit content on window level.
 */
]"
"[mLeashedParentToken]","[]","[]","Optional[/**
 * The leash token of this view's parent when it's in an embedded hierarchy that is
 * re-parented to another window.
 */
]"
"[mLeashedParentAccessibilityViewId]","[]","[]","Optional[/**
 * The accessibility view id of this view's parent when it's in an embedded
 * hierarchy that is re-parented to another window.
 */
]"
"[mScrollCaptureInternal]","[]","[]","Optional[/**
 */
]"
"[OFF = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Scrollbars are not visible
 */
]"
"[ON = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Scrollbars are visible
 */
]"
"[FADING = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Scrollbars are fading away
 */
]"
"[fadeScrollBars]","[]","[PUBLIC]","Optional.empty"
"[fadingEdgeLength]","[]","[PUBLIC]","Optional.empty"
"[scrollBarDefaultDelayBeforeFade]","[]","[PUBLIC]","Optional.empty"
"[scrollBarFadeDuration]","[]","[PUBLIC]","Optional.empty"
"[scrollBarSize]","[]","[PUBLIC]","Optional.empty"
"[scrollBarMinTouchTarget]","[]","[PUBLIC]","Optional.empty"
"[scrollBar]","[@UnsupportedAppUsage]","[PUBLIC]","Optional.empty"
"[interpolatorValues]","[]","[PUBLIC]","Optional.empty"
"[host]","[@UnsupportedAppUsage]","[PUBLIC]","Optional.empty"
"[paint]","[]","[PUBLIC, FINAL]","Optional.empty"
"[matrix]","[]","[PUBLIC, FINAL]","Optional.empty"
"[shader]","[]","[PUBLIC]","Optional.empty"
"[scrollBarInterpolator = new Interpolator(1, 2)]","[]","[PUBLIC, FINAL]","Optional.empty"
"[OPAQUE = { 255 }]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[TRANSPARENT = { 0.0f }]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[fadeStartTime]","[]","[PUBLIC]","Optional[/**
 * When fading should start. This time moves into the future every time
 * a new scroll happens. Measured based on SystemClock.uptimeMillis()
 */
]"
"[state = OFF]","[@UnsupportedAppUsage]","[PUBLIC]","Optional[/**
 * The current state of the scrollbars: ON, OFF, or FADING
 */
]"
"[mLastColor]","[]","[PRIVATE]","Optional.empty"
"[mScrollBarBounds = new Rect()]","[]","[PUBLIC, FINAL]","Optional.empty"
"[mScrollBarTouchBounds = new Rect()]","[]","[PUBLIC, FINAL]","Optional.empty"
"[NOT_DRAGGING = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[DRAGGING_VERTICAL_SCROLL_BAR = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[DRAGGING_HORIZONTAL_SCROLL_BAR = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[mScrollBarDraggingState = NOT_DRAGGING]","[]","[PUBLIC]","Optional.empty"
"[mScrollBarDraggingPos = 0]","[]","[PUBLIC]","Optional.empty"
"[mIsPending]","[]","[PUBLIC, VOLATILE]","Optional.empty"
"[mAccessibilityEvent]","[]","[PRIVATE]","Optional.empty"
"[mDeltaX]","[]","[PUBLIC]","Optional.empty"
"[mDeltaY]","[]","[PUBLIC]","Optional.empty"
"[mId]","[]","[PUBLIC]","Optional.empty"
"[mLabeledId]","[]","[PRIVATE]","Optional.empty"
"[TRUST_AGENTS_EXTEND_UNLOCK = ""trust_agents_extend_unlock""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Control whether Trust Agents are in active unlock or extend unlock mode.
 * @hide
 */
]"
"[LOCK_SCREEN_WHEN_TRUST_LOST = ""lock_screen_when_trust_lost""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Control whether the screen locks when trust is lost.
 * @hide
 */
]"
"[NIGHT_DISPLAY_ACTIVATED = ""night_display_activated""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Control whether Night display is currently activated.
 * @hide
 */
]"
"[NIGHT_DISPLAY_AUTO_MODE = ""night_display_auto_mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Control whether Night display will automatically activate/deactivate.
 * @hide
 */
]"
"[NIGHT_DISPLAY_COLOR_TEMPERATURE = ""night_display_color_temperature""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Control the color temperature of Night Display, represented in Kelvin.
 * @hide
 */
]"
"[NIGHT_DISPLAY_CUSTOM_START_TIME = ""night_display_custom_start_time""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Custom time when Night display is scheduled to activate.
 * Represented as milliseconds from midnight (e.g. 79200000 == 10pm).
 * @hide
 */
]"
"[NIGHT_DISPLAY_CUSTOM_END_TIME = ""night_display_custom_end_time""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Custom time when Night display is scheduled to deactivate.
 * Represented as milliseconds from midnight (e.g. 21600000 == 6am).
 * @hide
 */
]"
"[NIGHT_DISPLAY_LAST_ACTIVATED_TIME = ""night_display_last_activated_time""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A String representing the LocalDateTime when Night display was last activated. Use to
 * decide whether to apply the current activated state after a reboot or user change. In
 * legacy cases, this is represented by the time in milliseconds (since epoch).
 * @hide
 */
]"
"[DISPLAY_WHITE_BALANCE_ENABLED = ""display_white_balance_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Control whether display white balance is currently enabled.
 * @hide
 */
]"
"[ENABLED_VR_LISTENERS = ""enabled_vr_listeners""]","[@UnsupportedAppUsage, @TestApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Names of the service components that the current user has explicitly allowed to
 * be a VR mode listener, separated by ':'.
 *
 * @hide
 */
]"
"[VR_DISPLAY_MODE = ""vr_display_mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Behavior of the display while in VR mode.
 *
 * One of {@link #VR_DISPLAY_MODE_LOW_PERSISTENCE} or {@link #VR_DISPLAY_MODE_OFF}.
 *
 * @hide
 */
]"
"[VR_DISPLAY_MODE_LOW_PERSISTENCE = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Lower the display persistence while the system is in VR mode.
 *
 * @see PackageManager#FEATURE_VR_MODE_HIGH_PERFORMANCE
 *
 * @hide.
 */
]"
"[VR_DISPLAY_MODE_OFF = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Do not alter the display persistence while the system is in VR mode.
 *
 * @see PackageManager#FEATURE_VR_MODE_HIGH_PERFORMANCE
 *
 * @hide.
 */
]"
"[CARRIER_APPS_HANDLED = ""carrier_apps_handled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The latest SDK version that CarrierAppUtils#disableCarrierAppsUntilPrivileged has been
 * executed for.
 *
 * <p>This is used to ensure that we only take one pass which will disable apps that are not
 * privileged (if any). From then on, we only want to enable apps (when a matching SIM is
 * inserted), to avoid disabling an app that the user might actively be using.
 *
 * <p>Will be set to {@link android.os.Build.VERSION#SDK_INT} once executed. Note that older
 * SDK versions prior to R set 1 for this value.
 *
 * @hide
 */
]"
"[MANAGED_PROFILE_CONTACT_REMOTE_SEARCH = ""managed_profile_contact_remote_search""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether parent user can access remote contact in managed profile.
 *
 * @hide
 */
]"
"[CROSS_PROFILE_CALENDAR_ENABLED = ""cross_profile_calendar_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether parent profile can access remote calendar data in managed profile.
 *
 * @hide
 */
]"
"[AUTOMATIC_STORAGE_MANAGER_ENABLED = ""automatic_storage_manager_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether or not the automatic storage manager is enabled and should run on the device.
 *
 * @hide
 */
]"
"[AUTOMATIC_STORAGE_MANAGER_DAYS_TO_RETAIN = ""automatic_storage_manager_days_to_retain""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * How many days of information for the automatic storage manager to retain on the device.
 *
 * @hide
 */
]"
"[AUTOMATIC_STORAGE_MANAGER_DAYS_TO_RETAIN_DEFAULT = 90]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Default number of days of information for the automatic storage manager to retain.
 *
 * @hide
 */
]"
"[AUTOMATIC_STORAGE_MANAGER_BYTES_CLEARED = ""automatic_storage_manager_bytes_cleared""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * How many bytes the automatic storage manager has cleared out.
 *
 * @hide
 */
]"
"[AUTOMATIC_STORAGE_MANAGER_LAST_RUN = ""automatic_storage_manager_last_run""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Last run time for the automatic storage manager.
 *
 * @hide
 */
]"
"[AUTOMATIC_STORAGE_MANAGER_TURNED_OFF_BY_POLICY = ""automatic_storage_manager_turned_off_by_policy""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If the automatic storage manager has been disabled by policy. Note that this doesn't
 * mean that the automatic storage manager is prevented from being re-enabled -- this only
 * means that it was turned off by policy at least once.
 *
 * @hide
 */
]"
"[SYSTEM_NAVIGATION_KEYS_ENABLED = ""system_navigation_keys_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether SystemUI navigation keys is enabled.
 * @hide
 */
]"
"[QS_TILES = ""sysui_qs_tiles""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Holds comma separated list of ordering of QS tiles.
 *
 * @hide
 */
]"
"[CONTROLS_ENABLED = ""controls_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether this user has enabled Quick controls.
 *
 * 0 indicates disabled and 1 indicates enabled. A non existent value should be treated as
 * enabled.
 *
 * @hide
 */
]"
"[POWER_MENU_LOCKED_SHOW_CONTENT = ""power_menu_locked_show_content""]","[@TestApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether power menu content (cards, passes, controls) will be shown when device is locked.
 *
 * 0 indicates hide and 1 indicates show. A non existent value will be treated as hide.
 * @hide
 */
]"
"[INSTANT_APPS_ENABLED = ""instant_apps_enabled""]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Specifies whether the web action API is enabled.
 *
 * @hide
 */
]"
"[DEVICE_PAIRED = ""device_paired""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Has this pairable device been paired or upgraded from a previously paired system.
 * @hide
 */
]"
"[CMAS_ADDITIONAL_BROADCAST_PKG = ""cmas_additional_broadcast_pkg""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Specifies additional package name for broadcasting the CMAS messages.
 * @hide
 */
]"
"[NOTIFICATION_BADGING = ""notification_badging""]","[@UnsupportedAppUsage, @TestApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the launcher should show any notification badges.
 * The value is boolean (1 or 0).
 * @hide
 */
]"
"[NOTIFICATION_HISTORY_ENABLED = ""notification_history_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * When enabled the system will maintain a rolling history of received notifications. When
 * disabled the history will be disabled and deleted.
 *
 * The value 1 - enable, 0 - disable
 * @hide
 */
]"
"[BUBBLE_IMPORTANT_CONVERSATIONS = ""bubble_important_conversations""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * When enabled conversations marked as favorites will be set to bubble.
 *
 * The value 1 - enable, 0 - disable
 * @hide
 */
]"
"[NOTIFICATION_DISMISS_RTL = ""notification_dismiss_rtl""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether notifications are dismissed by a right-to-left swipe (instead of a left-to-right
 * swipe).
 *
 * @hide
 */
]"
"[QS_AUTO_ADDED_TILES = ""qs_auto_tiles""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Comma separated list of QS tiles that have been auto-added already.
 * @hide
 */
]"
"[LOCKDOWN_IN_POWER_MENU = ""lockdown_in_power_menu""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the Lockdown button should be shown in the power menu.
 * @hide
 */
]"
"[BACKUP_MANAGER_CONSTANTS = ""backup_manager_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Backup manager behavioral parameters.
 * This is encoded as a key=value list, separated by commas. Ex:
 *
 * ""key_value_backup_interval_milliseconds=14400000,key_value_backup_require_charging=true""
 *
 * The following keys are supported:
 *
 * <pre>
 * key_value_backup_interval_milliseconds  (long)
 * key_value_backup_fuzz_milliseconds      (long)
 * key_value_backup_require_charging       (boolean)
 * key_value_backup_required_network_type  (int)
 * full_backup_interval_milliseconds       (long)
 * full_backup_require_charging            (boolean)
 * full_backup_required_network_type       (int)
 * backup_finished_notification_receivers  (String[])
 * </pre>
 *
 * backup_finished_notification_receivers uses "":"" as delimeter for values.
 *
 * <p>
 * Type: string
 * @hide
 */
]"
"[BACKUP_LOCAL_TRANSPORT_PARAMETERS = ""backup_local_transport_parameters""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Local transport parameters so we can configure it for tests.
 * This is encoded as a key=value list, separated by commas.
 *
 * The following keys are supported:
 *
 * <pre>
 * fake_encryption_flag  (boolean)
 * </pre>
 *
 * <p>
 * Type: string
 * @hide
 */
]"
"[BLUETOOTH_ON_WHILE_DRIVING = ""bluetooth_on_while_driving""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Flag to set if the system should predictively attempt to re-enable Bluetooth while
 * the user is driving.
 * @hide
 */
]"
"[VOLUME_HUSH_GESTURE = ""volume_hush_gesture""]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * What behavior should be invoked when the volume hush gesture is triggered
 * One of VOLUME_HUSH_OFF, VOLUME_HUSH_VIBRATE, VOLUME_HUSH_MUTE.
 *
 * @hide
 */
]"
"[VOLUME_HUSH_OFF = 0]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[VOLUME_HUSH_VIBRATE = 1]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[VOLUME_HUSH_MUTE = 2]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[LOW_POWER_MANUAL_ACTIVATION_COUNT = ""low_power_manual_activation_count""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of times (integer) the user has manually enabled battery saver.
 * @hide
 */
]"
"[LOW_POWER_WARNING_ACKNOWLEDGED = ""low_power_warning_acknowledged""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the ""first time battery saver warning"" dialog needs to be shown (0: default)
 * or not (1).
 *
 * @hide
 */
]"
"[SUPPRESS_AUTO_BATTERY_SAVER_SUGGESTION = ""suppress_auto_battery_saver_suggestion""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * 0 (default) Auto battery saver suggestion has not been suppressed. 1) it has been
 * suppressed.
 * @hide
 */
]"
"[PACKAGES_TO_CLEAR_DATA_BEFORE_FULL_RESTORE = ""packages_to_clear_data_before_full_restore""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * List of packages, which data need to be unconditionally cleared before full restore.
 * Type: string
 * @hide
 */
]"
"[NOTIFICATION_NEW_INTERRUPTION_MODEL = ""new_interruption_model""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Setting to determine whether to use the new notification priority handling features.
 * @hide
 */
]"
"[LOCATION_ACCESS_CHECK_INTERVAL_MILLIS = ""location_access_check_interval_millis""]","[@SystemApi, @TestApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * How often to check for location access.
 * @hide
 */
]"
"[LOCATION_ACCESS_CHECK_DELAY_MILLIS = ""location_access_check_delay_millis""]","[@SystemApi, @TestApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Delay between granting location access and checking it.
 * @hide
 */
]"
"[LOCATION_PERMISSIONS_UPGRADE_TO_Q_MODE = ""location_permissions_upgrade_to_q_mode""]","[@SystemApi, @Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @deprecated This setting does not have any effect anymore
 * @hide
 */
]"
"[AUTO_REVOKE_DISABLED = ""auto_revoke_disabled""]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether or not the system Auto Revoke feature is disabled.
 * @hide
 */
]"
"[THEME_CUSTOMIZATION_OVERLAY_PACKAGES = ""theme_customization_overlay_packages""]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Map of android.theme.customization.* categories to the enabled overlay package for that
 * category, formatted as a serialized {@link org.json.JSONObject}. If there is no
 * corresponding package included for a category, then all overlay packages in that
 * category must be disabled.
 * @hide
 */
]"
"[NAVIGATION_MODE = ""navigation_mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Navigation bar mode.
 * 0 = 3 button
 * 1 = 2 button
 * 2 = fully gestural
 * @hide
 */
]"
"[BACK_GESTURE_INSET_SCALE_LEFT = ""back_gesture_inset_scale_left""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Scale factor for the back gesture inset size on the left side of the screen.
 * @hide
 */
]"
"[BACK_GESTURE_INSET_SCALE_RIGHT = ""back_gesture_inset_scale_right""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Scale factor for the back gesture inset size on the right side of the screen.
 * @hide
 */
]"
"[NEARBY_SHARING_COMPONENT = ""nearby_sharing_component""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Current provider of proximity-based sharing services.
 * Default value in @string/config_defaultNearbySharingComponent.
 * No VALIDATOR as this setting will not be backed up.
 * @hide
 */
]"
"[AWARE_ENABLED = ""aware_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Controls whether aware is enabled.
 * @hide
 */
]"
"[AWARE_LOCK_ENABLED = ""aware_lock_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Controls whether aware_lock is enabled.
 * @hide
 */
]"
"[TAP_GESTURE = ""tap_gesture""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Controls whether tap gesture is enabled.
 * @hide
 */
]"
"[PEOPLE_STRIP = ""people_strip""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Controls whether the people strip is enabled.
 * @hide
 */
]"
"[MEDIA_CONTROLS_RESUME = ""qs_media_resumption""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether or not to enable media resumption
 * When enabled, media controls in quick settings will populate on boot and persist if
 * resumable via a MediaBrowserService.
 * @see Settings.Global#SHOW_MEDIA_ON_QUICK_SETTINGS
 * @hide
 */
]"
"[WINDOW_MAGNIFICATION = ""window_magnification""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Controls if window magnification is enabled.
 * @hide
 */
]"
"[ACCESSIBILITY_MAGNIFICATION_MODE = ""accessibility_magnification_mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Controls magnification mode when magnification is enabled via a system-wide
 * triple tap gesture or the accessibility shortcut.
 *
 * @see#ACCESSIBILITY_MAGNIFICATION_MODE_FULLSCREEN
 * @see#ACCESSIBILITY_MAGNIFICATION_MODE_WINDOW
 * @hide
 */
]"
"[ACCESSIBILITY_MAGNIFICATION_MODE_FULLSCREEN = 0x1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Magnification mode value that magnifies whole display.
 * @hide
 */
]"
"[ACCESSIBILITY_MAGNIFICATION_MODE_WINDOW = 0x2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Magnification mode value that magnifies magnify particular region in a window
 * @hide
 */
]"
"[LEGACY_RESTORE_SETTINGS = { ENABLED_NOTIFICATION_LISTENERS, ENABLED_NOTIFICATION_ASSISTANT, ENABLED_NOTIFICATION_POLICY_ACCESS_PACKAGES }]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Keys we no longer back up under the current schema, but want to continue to
 * process when restoring historical backup datasets.
 *
 * All settings in {@link LEGACY_RESTORE_SETTINGS} array *must* have a non-null validator,
 * otherwise they won't be restored.
 *
 * @hide
 */
]"
"[CLONE_TO_MANAGED_PROFILE = new ArraySet<>()]","[]","[PRIVATE, STATIC, FINAL]","Optional[/**
 * These entries are considered common between the personal and the managed profile,
 * since the managed profile doesn't get to change them.
 */
]"
"[INSTANT_APP_SETTINGS = new ArraySet<>()]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Secure settings which can be accessed by instant apps.
 * @hide
 */
]"
"[CONTENT_URI = Uri.parse(""content://"" + AUTHORITY + ""/global"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URL for global secure settings items.  Not public.
 */
]"
"[NOTIFICATION_BUBBLES = ""notification_bubbles""]","[@TestApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the notification bubbles are globally enabled
 * The value is boolean (1 or 0).
 * @hide
 */
]"
"[ADD_USERS_WHEN_LOCKED = ""add_users_when_locked""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether users are allowed to add more users or guest from lockscreen.
 * <p>
 * Type: int
 * @hide
 */
]"
"[APPLY_RAMPING_RINGER = ""apply_ramping_ringer""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether applying ramping ringer on incoming phone call ringtone.
 * <p>1 = apply ramping ringer
 * <p>0 = do not apply ramping ringer
 */
]"
"[ENABLE_ACCESSIBILITY_GLOBAL_GESTURE_ENABLED = ""enable_accessibility_global_gesture_enabled""]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Setting whether the global gesture for enabling accessibility is enabled.
 * If this gesture is enabled the user will be able to perfrom it to enable
 * the accessibility state without visiting the settings app.
 *
 * @hide
 * No longer used. Should be removed once all dependencies have been updated.
 */
]"
"[AIRPLANE_MODE_ON = ""airplane_mode_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether Airplane Mode is on.
 */
]"
"[THEATER_MODE_ON = ""theater_mode_on""]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether Theater Mode is on.
 * {@hide}
 */
]"
"[RADIO_BLUETOOTH = ""bluetooth""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Constant for use in AIRPLANE_MODE_RADIOS to specify Bluetooth radio.
 */
]"
"[RADIO_WIFI = ""wifi""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Constant for use in AIRPLANE_MODE_RADIOS to specify Wi-Fi radio.
 */
]"
"[RADIO_WIMAX = ""wimax""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[RADIO_CELL = ""cell""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Constant for use in AIRPLANE_MODE_RADIOS to specify Cellular radio.
 */
]"
"[RADIO_NFC = ""nfc""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Constant for use in AIRPLANE_MODE_RADIOS to specify NFC radio.
 */
]"
"[AIRPLANE_MODE_RADIOS = ""airplane_mode_radios""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A comma separated list of radios that need to be disabled when airplane mode
 * is on. This overrides WIFI_ON and BLUETOOTH_ON, if Wi-Fi and bluetooth are
 * included in the comma separated list.
 */
]"
"[AIRPLANE_MODE_TOGGLEABLE_RADIOS = ""airplane_mode_toggleable_radios""]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A comma separated list of radios that should to be disabled when airplane mode
 * is on, but can be manually reenabled by the user.  For example, if RADIO_WIFI is
 * added to both AIRPLANE_MODE_RADIOS and AIRPLANE_MODE_TOGGLEABLE_RADIOS, then Wifi
 * will be turned off when entering airplane mode, but the user will be able to reenable
 * Wifi in the Settings app.
 * @hide
 */
]"
"[BLUETOOTH_CLASS_OF_DEVICE = ""bluetooth_class_of_device""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * An integer representing the Bluetooth Class of Device (CoD).
 *
 * @hide
 */
]"
"[BLUETOOTH_DISABLED_PROFILES = ""bluetooth_disabled_profiles""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A Long representing a bitmap of profiles that should be disabled when bluetooth starts.
 * See {@link android.bluetooth.BluetoothProfile}.
 * {@hide}
 */
]"
"[BLUETOOTH_INTEROPERABILITY_LIST = ""bluetooth_interoperability_list""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A semi-colon separated list of Bluetooth interoperability workarounds.
 * Each entry is a partial Bluetooth device address string and an integer representing
 * the feature to be disabled, separated by a comma. The integer must correspond
 * to a interoperability feature as defined in ""interop.h"" in /system/bt.
 * <p>
 * Example: <br/>
 * ""00:11:22,0;01:02:03:04,2""
 * @hide
 */
]"
"[WIFI_SLEEP_POLICY = ""wifi_sleep_policy""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The policy for deciding when Wi-Fi should go to sleep (which will in
 * turn switch to using the mobile data as an Internet connection).
 * <p>
 * Set to one of {@link #WIFI_SLEEP_POLICY_DEFAULT},
 * {@link #WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED}, or
 * {@link #WIFI_SLEEP_POLICY_NEVER}.
 * @deprecated This is no longer used or set by the platform.
 */
]"
"[WIFI_SLEEP_POLICY_DEFAULT = 0]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value for {@link #WIFI_SLEEP_POLICY} to use the default Wi-Fi sleep
 * policy, which is to sleep shortly after the turning off
 * according to the {@link #STAY_ON_WHILE_PLUGGED_IN} setting.
 * @deprecated This is no longer used by the platform.
 */
]"
"[WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED = 1]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value for {@link #WIFI_SLEEP_POLICY} to use the default policy when
 * the device is on battery, and never go to sleep when the device is
 * plugged in.
 * @deprecated This is no longer used by the platform.
 */
]"
"[WIFI_SLEEP_POLICY_NEVER = 2]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value for {@link #WIFI_SLEEP_POLICY} to never go to sleep.
 * @deprecated This is no longer used by the platform.
 */
]"
"[AUTO_TIME = ""auto_time""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value to specify if the user prefers the date, time and time zone
 * to be automatically fetched from the network (NITZ). 1=yes, 0=no
 */
]"
"[AUTO_TIME_ZONE = ""auto_time_zone""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value to specify if the user prefers the time zone
 * to be automatically fetched from the network (NITZ). 1=yes, 0=no
 */
]"
"[CAR_DOCK_SOUND = ""car_dock_sound""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URI for the car dock ""in"" event sound.
 * @hide
 */
]"
"[CAR_UNDOCK_SOUND = ""car_undock_sound""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URI for the car dock ""out"" event sound.
 * @hide
 */
]"
"[DESK_DOCK_SOUND = ""desk_dock_sound""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URI for the desk dock ""in"" event sound.
 * @hide
 */
]"
"[DESK_UNDOCK_SOUND = ""desk_undock_sound""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URI for the desk dock ""out"" event sound.
 * @hide
 */
]"
"[DOCK_SOUNDS_ENABLED = ""dock_sounds_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to play a sound for dock events.
 * @hide
 */
]"
"[DOCK_SOUNDS_ENABLED_WHEN_ACCESSIBILITY = ""dock_sounds_enabled_when_accessbility""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to play a sound for dock events, only when an accessibility service is on.
 * @hide
 */
]"
"[LOCK_SOUND = ""lock_sound""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URI for the ""device locked"" (keyguard shown) sound.
 * @hide
 */
]"
"[UNLOCK_SOUND = ""unlock_sound""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URI for the ""device unlocked"" sound.
 * @hide
 */
]"
"[TRUSTED_SOUND = ""trusted_sound""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URI for the ""device is trusted"" sound, which is played when the device enters the trusted
 * state without unlocking.
 * @hide
 */
]"
"[LOW_BATTERY_SOUND = ""low_battery_sound""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URI for the low battery sound file.
 * @hide
 */
]"
"[POWER_SOUNDS_ENABLED = ""power_sounds_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to play a sound for low-battery alerts.
 * @hide
 */
]"
"[WIRELESS_CHARGING_STARTED_SOUND = ""wireless_charging_started_sound""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URI for the ""wireless charging started"" sound.
 * @hide
 */
]"
"[CHARGING_STARTED_SOUND = ""charging_started_sound""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URI for ""wired charging started"" sound.
 * @hide
 */
]"
"[CHARGING_SOUNDS_ENABLED = ""charging_sounds_enabled""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to play a sound for charging events.
 * @deprecated Use {@link android.provider.Settings.Secure#CHARGING_SOUNDS_ENABLED} instead
 * @hide
 */
]"
"[CHARGING_VIBRATION_ENABLED = ""charging_vibration_enabled""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to vibrate for wireless charging events.
 * @deprecated Use {@link android.provider.Settings.Secure#CHARGING_VIBRATION_ENABLED}
 * @hide
 */
]"
"[STAY_ON_WHILE_PLUGGED_IN = ""stay_on_while_plugged_in""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether we keep the device on while the device is plugged in.
 * Supported values are:
 * <ul>
 * <li>{@code 0} to never stay on while plugged in</li>
 * <li>{@link BatteryManager#BATTERY_PLUGGED_AC} to stay on for AC charger</li>
 * <li>{@link BatteryManager#BATTERY_PLUGGED_USB} to stay on for USB charger</li>
 * <li>{@link BatteryManager#BATTERY_PLUGGED_WIRELESS} to stay on for wireless charger</li>
 * </ul>
 * These values can be OR-ed together.
 */
]"
"[BUGREPORT_IN_POWER_MENU = ""bugreport_in_power_menu""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * When the user has enable the option to have a ""bug report"" command
 * in the power menu.
 * @hide
 */
]"
"[CUSTOM_BUGREPORT_HANDLER_APP = ""custom_bugreport_handler_app""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The package name for the custom bugreport handler app. This app must be whitelisted.
 * This is currently used only by Power Menu short press.
 *
 * @hide
 */
]"
"[CUSTOM_BUGREPORT_HANDLER_USER = ""custom_bugreport_handler_user""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The user id for the custom bugreport handler app. This is currently used only by Power
 * Menu short press.
 *
 * @hide
 */
]"
"[ADB_ENABLED = ""adb_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether ADB over USB is enabled.
 */
]"
"[ADB_WIFI_ENABLED = ""adb_wifi_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether ADB over Wifi is enabled.
 * @hide
 */
]"
"[DEBUG_VIEW_ATTRIBUTES = ""debug_view_attributes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether Views are allowed to save their attribute data.
 * @hide
 */
]"
"[DEBUG_VIEW_ATTRIBUTES_APPLICATION_PACKAGE = ""debug_view_attributes_application_package""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Which application package is allowed to save View attribute data.
 * @hide
 */
]"
"[ASSISTED_GPS_ENABLED = ""assisted_gps_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether assisted GPS should be enabled or not.
 * @hide
 */
]"
"[BLUETOOTH_ON = ""bluetooth_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether bluetooth is enabled/disabled
 * 0=disabled. 1=enabled.
 */
]"
"[CDMA_CELL_BROADCAST_SMS = ""cdma_cell_broadcast_sms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * CDMA Cell Broadcast SMS
 * 0 = CDMA Cell Broadcast SMS disabled
 * 1 = CDMA Cell Broadcast SMS enabled
 * @hide
 */
]"
"[CDMA_ROAMING_MODE = ""roaming_settings""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The CDMA roaming mode 0 = Home Networks, CDMA default
 * 1 = Roaming on Affiliated networks
 * 2 = Roaming on any networks
 * @hide
 */
]"
"[CDMA_SUBSCRIPTION_MODE = ""subscription_mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The CDMA subscription mode 0 = RUIM/SIM (default)
 * 1 = NV
 * @hide
 */
]"
"[DEFAULT_RESTRICT_BACKGROUND_DATA = ""default_restrict_background_data""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The default value for whether background data is enabled or not.
 *
 * Used by {@code NetworkPolicyManagerService}.
 *
 * @hide
 */
]"
"[DATA_ACTIVITY_TIMEOUT_MOBILE = ""data_activity_timeout_mobile""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Inactivity timeout to track mobile data activity.
 *
 * If set to a positive integer, it indicates the inactivity timeout value in seconds to
 * infer the data activity of mobile network. After a period of no activity on mobile
 * networks with length specified by the timeout, an {@code ACTION_DATA_ACTIVITY_CHANGE}
 * intent is fired to indicate a transition of network status from ""active"" to ""idle"". Any
 * subsequent activity on mobile networks triggers the firing of {@code
 * ACTION_DATA_ACTIVITY_CHANGE} intent indicating transition from ""idle"" to ""active"".
 *
 * Network activity refers to transmitting or receiving data on the network interfaces.
 *
 * Tracking is disabled if set to zero or negative value.
 *
 * @hide
 */
]"
"[DATA_ACTIVITY_TIMEOUT_WIFI = ""data_activity_timeout_wifi""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Timeout to tracking Wifi data activity. Same as {@code DATA_ACTIVITY_TIMEOUT_MOBILE}
 * but for Wifi network.
 * @hide
 */
]"
"[DATA_ROAMING = ""data_roaming""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether or not data roaming is enabled. (0 = false, 1 = true)
 */
]"
"[MDC_INITIAL_MAX_RETRY = ""mdc_initial_max_retry""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The value passed to a Mobile DataConnection via bringUp which defines the
 * number of retries to preform when setting up the initial connection. The default
 * value defined in DataConnectionTrackerBase#DEFAULT_MDC_INITIAL_RETRY is currently 1.
 * @hide
 */
]"
"[FORCE_ALLOW_ON_EXTERNAL = ""force_allow_on_external""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether any package can be on external storage. When this is true, any
 * package, regardless of manifest values, is a candidate for installing
 * or moving onto external storage. (0 = false, 1 = true)
 * @hide
 */
]"
"[DEFAULT_SM_DP_PLUS = ""default_sm_dp_plus""]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The default SM-DP+ configured for this device.
 *
 * <p>An SM-DP+ is used by an LPA (see {@link android.service.euicc.EuiccService}) to
 * download profiles. If this value is set, the LPA will query this server for any profiles
 * available to this device. If any are available, they may be downloaded during device
 * provisioning or in settings without needing the user to enter an activation code.
 *
 * @see android.service.euicc.EuiccService
 * @hide
 */
]"
"[EUICC_PROVISIONED = ""euicc_provisioned""]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether any profile has ever been downloaded onto a eUICC on the device.
 *
 * <p>Used to hide eUICC UI from users who have never made use of it and would only be
 * confused by seeing references to it in settings.
 * (0 = false, 1 = true)
 * @hide
 */
]"
"[EUICC_SUPPORTED_COUNTRIES = ""euicc_supported_countries""]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * List of ISO country codes in which eUICC UI is shown. Country codes should be separated
 * by comma.
 *
 * Note: if {@link #EUICC_SUPPORTED_COUNTRIES} is empty, then {@link
 * #EUICC_UNSUPPORTED_COUNTRIES} is used.
 *
 * <p>Used to hide eUICC UI from users who are currently in countries where no carriers
 * support eUICC.
 *
 * @hide
 */
]"
"[EUICC_UNSUPPORTED_COUNTRIES = ""euicc_unsupported_countries""]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * List of ISO country codes in which eUICC UI is not shown. Country codes should be
 * separated by comma.
 *
 * Note: if {@link #EUICC_SUPPORTED_COUNTRIES} is empty, then {@link
 * #EUICC_UNSUPPORTED_COUNTRIES} is used.
 *
 * <p>Used to hide eUICC UI from users who are currently in countries where no carriers
 * support eUICC.
 *
 * @hide
 */
]"
"[DEVELOPMENT_FORCE_RESIZABLE_ACTIVITIES = ""force_resizable_activities""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether any activity can be resized. When this is true, any
 * activity, regardless of manifest values, can be resized for multi-window.
 * (0 = false, 1 = true)
 * @hide
 */
]"
"[DEVELOPMENT_ENABLE_FREEFORM_WINDOWS_SUPPORT = ""enable_freeform_support""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to enable experimental freeform support for windows.
 * @hide
 */
]"
"[DEVELOPMENT_FORCE_DESKTOP_MODE_ON_EXTERNAL_DISPLAYS = ""force_desktop_mode_on_external_displays""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to enable experimental desktop mode on secondary displays.
 * @hide
 */
]"
"[DEVELOPMENT_ENABLE_SIZECOMPAT_FREEFORM = ""enable_sizecompat_freeform""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to allow non-resizable apps to be freeform.
 * @hide
 */
]"
"[DEVELOPMENT_RENDER_SHADOWS_IN_COMPOSITOR = ""render_shadows_in_compositor""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If true, shadows drawn around the window will be rendered by the system compositor. If
 * false, shadows will be drawn by the client by setting an elevation on the root view and
 * the contents will be inset by the surface insets.
 * (0 = false, 1 = true)
 * @hide
 */
]"
"[DEVELOPMENT_SETTINGS_ENABLED = ""development_settings_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether user has enabled development settings.
 */
]"
"[DEVICE_PROVISIONED = ""device_provisioned""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the device has been provisioned (0 = false, 1 = true).
 * <p>On a multiuser device with a separate system user, the screen may be locked
 * as soon as this is set to true and further activities cannot be launched on the
 * system user unless they are marked to show over keyguard.
 */
]"
"[DEVICE_PROVISIONING_MOBILE_DATA_ENABLED = ""device_provisioning_mobile_data""]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Indicates whether mobile data should be allowed while the device is being provisioned.
 * This allows the provisioning process to turn off mobile data before the user
 * has an opportunity to set things up, preventing other processes from burning
 * precious bytes before wifi is setup.
 * <p>
 * Type: int (0 for false, 1 for true)
 *
 * @hide
 */
]"
"[DISPLAY_SIZE_FORCED = ""display_size_forced""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The saved value for WindowManagerService.setForcedDisplaySize().
 * Two integers separated by a comma.  If unset, then use the real display size.
 * @hide
 */
]"
"[DISPLAY_SCALING_FORCE = ""display_scaling_force""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The saved value for WindowManagerService.setForcedDisplayScalingMode().
 * 0 or unset if scaling is automatic, 1 if scaling is disabled.
 * @hide
 */
]"
"[DOWNLOAD_MAX_BYTES_OVER_MOBILE = ""download_manager_max_bytes_over_mobile""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The maximum size, in bytes, of a download that the download manager will transfer over
 * a non-wifi connection.
 * @hide
 */
]"
"[DOWNLOAD_RECOMMENDED_MAX_BYTES_OVER_MOBILE = ""download_manager_recommended_max_bytes_over_mobile""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The recommended maximum size, in bytes, of a download that the download manager should
 * transfer over a non-wifi connection. Over this size, the use will be warned, but will
 * have the option to start the download over the mobile connection anyway.
 * @hide
 */
]"
"[INSTALL_NON_MARKET_APPS = Secure.INSTALL_NON_MARKET_APPS]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @deprecated Use {@link android.provider.Settings.Secure#INSTALL_NON_MARKET_APPS} instead
 */
]"
"[HDMI_CONTROL_ENABLED = ""hdmi_control_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether HDMI control shall be enabled. If disabled, no CEC/MHL command will be
 * sent or processed. (0 = false, 1 = true)
 * @hide
 */
]"
"[HDMI_CONTROL_VOLUME_CONTROL_ENABLED = ""hdmi_control_volume_control_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Controls whether volume control commands via HDMI CEC are enabled. (0 = false, 1 =
 * true).
 *
 * <p>Effects on different device types:
 * <table>
 * <tr><th>HDMI CEC device type</th><th>0: disabled</th><th>1: enabled</th></tr>
 * <tr>
 * <td>TV (type: 0)</td>
 * <td>Per CEC specification.</td>
 * <td>TV changes system volume. TV no longer reacts to incoming volume changes
 * via {@code <User Control Pressed>}. TV no longer handles {@code <Report Audio
 * Status>}.</td>
 * </tr>
 * <tr>
 * <td>Playback device (type: 4)</td>
 * <td>Device sends volume commands to TV/Audio system via {@code <User Control
 * Pressed>}</td>
 * <td>Device does not send volume commands via {@code <User Control Pressed>}.</td>
 * </tr>
 * <tr>
 * <td>Audio device (type: 5)</td>
 * <td>Full ""System Audio Control"" capabilities.</td>
 * <td>Audio device no longer reacts to incoming {@code <User Control Pressed>}
 * volume commands. Audio device no longer reports volume changes via {@code
 * <Report Audio Status>}.</td>
 * </tr>
 * </table>
 *
 * <p> Due to the resulting behavior, usage on TV and Audio devices is discouraged.
 *
 * @hide
 * @see android.hardware.hdmi.HdmiControlManager#setHdmiCecVolumeControlEnabled(boolean)
 */
]"
"[HDMI_SYSTEM_AUDIO_CONTROL_ENABLED = ""hdmi_system_audio_control_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether HDMI System Audio Control feature is enabled. If enabled, TV will try to turn on
 * system audio mode if there's a connected CEC-enabled AV Receiver. Then audio stream will
 * be played on AVR instead of TV spaeker. If disabled, the system audio mode will never be
 * activated.
 * @hide
 */
]"
"[HDMI_CEC_SWITCH_ENABLED = ""hdmi_cec_switch_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether HDMI Routing Control feature is enabled. If enabled, the switch device will
 * route to the correct input source on receiving Routing Control related messages. If
 * disabled, you can only switch the input via controls on this device.
 * @hide
 */
]"
"[HDMI_CONTROL_AUTO_WAKEUP_ENABLED = ""hdmi_control_auto_wakeup_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether TV will automatically turn on upon reception of the CEC command
 * &lt;Text View On&gt; or &lt;Image View On&gt;. (0 = false, 1 = true)
 *
 * @hide
 */
]"
"[HDMI_CONTROL_AUTO_DEVICE_OFF_ENABLED = ""hdmi_control_auto_device_off_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether TV will also turn off other CEC devices when it goes to standby mode.
 * (0 = false, 1 = true)
 *
 * @hide
 */
]"
"[SHOW_MEDIA_ON_QUICK_SETTINGS = ""qs_media_player""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether or not media is shown automatically when bypassing as a heads up.
 * @hide
 */
]"
"[LOCATION_BACKGROUND_THROTTLE_INTERVAL_MS = ""location_background_throttle_interval_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds at which location requests will be throttled when they are
 * coming from the background.
 *
 * @hide
 */
]"
"[LOCATION_BACKGROUND_THROTTLE_PROXIMITY_ALERT_INTERVAL_MS = ""location_background_throttle_proximity_alert_interval_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Most frequent location update interval in milliseconds that proximity alert is allowed
 * to request.
 * @hide
 */
]"
"[LOCATION_BACKGROUND_THROTTLE_PACKAGE_WHITELIST = ""location_background_throttle_package_whitelist""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Packages that are whitelisted for background throttling (throttling will not be applied).
 * @hide
 */
]"
"[LOCATION_IGNORE_SETTINGS_PACKAGE_WHITELIST = ""location_ignore_settings_package_whitelist""]","[@TestApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Packages that are whitelisted for ignoring location settings (may retrieve location even
 * when user location settings are off), for emergency purposes.
 * @hide
 */
]"
"[MHL_INPUT_SWITCHING_ENABLED = ""mhl_input_switching_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether TV will switch to MHL port when a mobile device is plugged in.
 * (0 = false, 1 = true)
 * @hide
 */
]"
"[MHL_POWER_CHARGE_ENABLED = ""mhl_power_charge_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether TV will charge the mobile device connected at MHL port. (0 = false, 1 = true)
 * @hide
 */
]"
"[MOBILE_DATA = ""mobile_data""]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether mobile data connections are allowed by the user.  See
 * ConnectivityManager for more info.
 * @hide
 */
]"
"[MOBILE_DATA_ALWAYS_ON = ""mobile_data_always_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the mobile data connection should remain active even when higher
 * priority networks like WiFi are active, to help make network switching faster.
 *
 * See ConnectivityService for more info.
 *
 * (0 = disabled, 1 = enabled)
 * @hide
 */
]"
"[WIFI_ALWAYS_REQUESTED = ""wifi_always_requested""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the wifi data connection should remain active even when higher
 * priority networks like Ethernet are active, to keep both networks.
 * In the case where higher priority networks are connected, wifi will be
 * unused unless an application explicitly requests to use it.
 *
 * See ConnectivityService for more info.
 *
 * (0 = disabled, 1 = enabled)
 * @hide
 */
]"
"[CONNECTIVITY_METRICS_BUFFER_SIZE = ""connectivity_metrics_buffer_size""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Size of the event buffer for IP connectivity metrics.
 * @hide
 */
]"
"[NETSTATS_ENABLED = ""netstats_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_POLL_INTERVAL = ""netstats_poll_interval""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_TIME_CACHE_MAX_AGE = ""netstats_time_cache_max_age""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_GLOBAL_ALERT_BYTES = ""netstats_global_alert_bytes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_SAMPLE_ENABLED = ""netstats_sample_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_AUGMENT_ENABLED = ""netstats_augment_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_COMBINE_SUBTYPE_ENABLED = ""netstats_combine_subtype_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_DEV_BUCKET_DURATION = ""netstats_dev_bucket_duration""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_DEV_PERSIST_BYTES = ""netstats_dev_persist_bytes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_DEV_ROTATE_AGE = ""netstats_dev_rotate_age""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_DEV_DELETE_AGE = ""netstats_dev_delete_age""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_UID_BUCKET_DURATION = ""netstats_uid_bucket_duration""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_UID_PERSIST_BYTES = ""netstats_uid_persist_bytes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_UID_ROTATE_AGE = ""netstats_uid_rotate_age""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_UID_DELETE_AGE = ""netstats_uid_delete_age""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_UID_TAG_BUCKET_DURATION = ""netstats_uid_tag_bucket_duration""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_UID_TAG_PERSIST_BYTES = ""netstats_uid_tag_persist_bytes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_UID_TAG_ROTATE_AGE = ""netstats_uid_tag_rotate_age""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_UID_TAG_DELETE_AGE = ""netstats_uid_tag_delete_age""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETPOLICY_QUOTA_ENABLED = ""netpolicy_quota_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETPOLICY_QUOTA_UNLIMITED = ""netpolicy_quota_unlimited""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETPOLICY_QUOTA_LIMITED = ""netpolicy_quota_limited""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETPOLICY_QUOTA_FRAC_JOBS = ""netpolicy_quota_frac_jobs""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETPOLICY_QUOTA_FRAC_MULTIPATH = ""netpolicy_quota_frac_multipath""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETPOLICY_OVERRIDE_ENABLED = ""netpolicy_override_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETWORK_PREFERENCE = ""network_preference""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * User preference for which network(s) should be used. Only the
 * connectivity service should touch this.
 */
]"
"[NETWORK_SCORER_APP = ""network_scorer_app""]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Which package name to use for network scoring. If null, or if the package is not a valid
 * scorer app, external network scores will neither be requested nor accepted.
 * @hide
 */
]"
"[NIGHT_DISPLAY_FORCED_AUTO_MODE_AVAILABLE = ""night_display_forced_auto_mode_available""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether night display forced auto mode is available.
 * 0 = unavailable, 1 = available.
 * @hide
 */
]"
"[NITZ_UPDATE_DIFF = ""nitz_update_diff""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If the NITZ_UPDATE_DIFF time is exceeded then an automatic adjustment
 * to SystemClock will be allowed even if NITZ_UPDATE_SPACING has not been
 * exceeded.
 * @hide
 */
]"
"[NITZ_UPDATE_SPACING = ""nitz_update_spacing""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The length of time in milli-seconds that automatic small adjustments to
 * SystemClock are ignored if NITZ_UPDATE_DIFF is not exceeded.
 * @hide
 */
]"
"[NTP_SERVER = ""ntp_server""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Preferred NTP server. {@hide}
 */
]"
"[NTP_TIMEOUT = ""ntp_timeout""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Timeout in milliseconds to wait for NTP server. {@hide}
 */
]"
"[STORAGE_BENCHMARK_INTERVAL = ""storage_benchmark_interval""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[SETTINGS_USE_PSD_API = ""settings_use_psd_api""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether or not Settings should enable psd API.
 * {@hide}
 */
]"
"[SETTINGS_USE_EXTERNAL_PROVIDER_API = ""settings_use_external_provider_api""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether or not Settings should enable external provider API.
 * {@hide}
 */
]"
"[DNS_RESOLVER_SAMPLE_VALIDITY_SECONDS = ""dns_resolver_sample_validity_seconds""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Sample validity in seconds to configure for the system DNS resolver.
 * {@hide}
 */
]"
"[DNS_RESOLVER_SUCCESS_THRESHOLD_PERCENT = ""dns_resolver_success_threshold_percent""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Success threshold in percent for use with the system DNS resolver.
 * {@hide}
 */
]"
"[DNS_RESOLVER_MIN_SAMPLES = ""dns_resolver_min_samples""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Minimum number of samples needed for statistics to be considered meaningful in the
 * system DNS resolver.
 * {@hide}
 */
]"
"[DNS_RESOLVER_MAX_SAMPLES = ""dns_resolver_max_samples""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Maximum number taken into account for statistics purposes in the system DNS resolver.
 * {@hide}
 */
]"
"[OTA_DISABLE_AUTOMATIC_UPDATE = ""ota_disable_automatic_update""]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to disable the automatic scheduling of system updates.
 * 1 = system updates won't be automatically scheduled (will always
 * present notification instead).
 * 0 = system updates will be automatically scheduled. (default)
 * @hide
 */
]"
"[PACKAGE_VERIFIER_TIMEOUT = ""verifier_timeout""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Timeout for package verification.
 * @hide
 */
]"
"[APP_INTEGRITY_VERIFICATION_TIMEOUT = ""app_integrity_verification_timeout""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Timeout for app integrity verification.
 * @hide
 */
]"
"[PACKAGE_VERIFIER_DEFAULT_RESPONSE = ""verifier_default_response""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Default response code for package verification.
 * @hide
 */
]"
"[PACKAGE_VERIFIER_SETTING_VISIBLE = ""verifier_setting_visible""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Show package verification setting in the Settings app.
 * 1 = show (default)
 * 0 = hide
 * @hide
 */
]"
"[PACKAGE_VERIFIER_INCLUDE_ADB = ""verifier_verify_adb_installs""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Run package verification on apps installed through ADB/ADT/USB
 * 1 = perform package verification on ADB installs (default)
 * 0 = bypass package verification on ADB installs
 * @hide
 */
]"
"[INTEGRITY_CHECK_INCLUDES_RULE_PROVIDER = ""verify_integrity_for_rule_provider""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Run integrity checks for integrity rule providers.
 * 0 = bypass integrity verification on installs from rule providers (default)
 * 1 = perform integrity verification on installs from rule providers
 * @hide
 */
]"
"[FSTRIM_MANDATORY_INTERVAL = ""fstrim_mandatory_interval""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Time since last fstrim (milliseconds) after which we force one to happen
 * during device startup.  If unset, the default is 3 days.
 * @hide
 */
]"
"[PDP_WATCHDOG_POLL_INTERVAL_MS = ""pdp_watchdog_poll_interval_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds at which to check packet counts on the
 * mobile data interface when screen is on, to detect possible data
 * connection problems.
 * @hide
 */
]"
"[PDP_WATCHDOG_LONG_POLL_INTERVAL_MS = ""pdp_watchdog_long_poll_interval_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds at which to check packet counts on the
 * mobile data interface when screen is off, to detect possible data
 * connection problems.
 * @hide
 */
]"
"[PDP_WATCHDOG_ERROR_POLL_INTERVAL_MS = ""pdp_watchdog_error_poll_interval_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds at which to check packet counts on the
 * mobile data interface after {@link #PDP_WATCHDOG_TRIGGER_PACKET_COUNT}
 * outgoing packets has been reached without incoming packets.
 * @hide
 */
]"
"[PDP_WATCHDOG_TRIGGER_PACKET_COUNT = ""pdp_watchdog_trigger_packet_count""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of outgoing packets sent without seeing an incoming packet
 * that triggers a countdown (of {@link #PDP_WATCHDOG_ERROR_POLL_COUNT}
 * device is logged to the event log
 * @hide
 */
]"
"[PDP_WATCHDOG_ERROR_POLL_COUNT = ""pdp_watchdog_error_poll_count""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of polls to perform (at {@link #PDP_WATCHDOG_ERROR_POLL_INTERVAL_MS})
 * after hitting {@link #PDP_WATCHDOG_TRIGGER_PACKET_COUNT} before
 * attempting data connection recovery.
 * @hide
 */
]"
"[PDP_WATCHDOG_MAX_PDP_RESET_FAIL_COUNT = ""pdp_watchdog_max_pdp_reset_fail_count""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of failed PDP reset attempts before moving to something more
 * drastic: re-registering to the network.
 * @hide
 */
]"
"[SETUP_PREPAID_DATA_SERVICE_URL = ""setup_prepaid_data_service_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL to open browser on to allow user to manage a prepay account
 * @hide
 */
]"
"[SETUP_PREPAID_DETECTION_TARGET_URL = ""setup_prepaid_detection_target_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL to attempt a GET on to see if this is a prepay device
 * @hide
 */
]"
"[SETUP_PREPAID_DETECTION_REDIR_HOST = ""setup_prepaid_detection_redir_host""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Host to check for a redirect to after an attempt to GET
 * SETUP_PREPAID_DETECTION_TARGET_URL. (If we redirected there,
 * this is a prepaid device with zero balance.)
 * @hide
 */
]"
"[SMS_OUTGOING_CHECK_INTERVAL_MS = ""sms_outgoing_check_interval_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds at which to check the number of SMS sent out without asking
 * for use permit, to limit the un-authorized SMS usage.
 *
 * @hide
 */
]"
"[SMS_OUTGOING_CHECK_MAX_COUNT = ""sms_outgoing_check_max_count""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of outgoing SMS sent without asking for user permit (of {@link
 * #SMS_OUTGOING_CHECK_INTERVAL_MS}
 *
 * @hide
 */
]"
"[SMS_SHORT_CODE_CONFIRMATION = ""sms_short_code_confirmation""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to disable SMS short code confirmation - defaults to true.
 * True indcates we will do the check, etc.  Set to false to disable.
 * @see com.android.internal.telephony.SmsUsageMonitor
 * @hide
 */
]"
"[SMS_SHORT_CODE_RULE = ""sms_short_code_rule""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to select which country we use to determine premium sms codes.
 * One of com.android.internal.telephony.SMSDispatcher.PREMIUM_RULE_USE_SIM,
 * com.android.internal.telephony.SMSDispatcher.PREMIUM_RULE_USE_NETWORK,
 * or com.android.internal.telephony.SMSDispatcher.PREMIUM_RULE_USE_BOTH.
 * @hide
 */
]"
"[TCP_DEFAULT_INIT_RWND = ""tcp_default_init_rwnd""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to select TCP's default initial receiver window size in segments - defaults to a
 * build config value.
 * @hide
 */
]"
"[TETHER_SUPPORTED = ""tether_supported""]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to disable Tethering on a device - defaults to true.
 * @hide
 */
]"
"[TETHER_DUN_REQUIRED = ""tether_dun_required""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to require DUN APN on the device or not - defaults to a build config value
 * which defaults to false.
 * @hide
 */
]"
"[TETHER_DUN_APN = ""tether_dun_apn""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to hold a gservices-provisioned apn value for DUN.  If set, or the
 * corresponding build config values are set it will override the APN DB
 * values.
 * Consists of a comma separated list of strings:
 * ""name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type""
 * note that empty fields can be omitted: ""name,apn,,,,,,,,,310,260,,DUN""
 * @hide
 */
]"
"[TETHER_OFFLOAD_DISABLED = ""tether_offload_disabled""]","[@SystemApi, @TestApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to disable trying to talk to any available tethering offload HAL.
 *
 * Integer values are interpreted as boolean, and the absence of an explicit setting
 * is interpreted as |false|.
 * @hide
 */
]"
"[TETHER_ENABLE_LEGACY_DHCP_SERVER = ""tether_enable_legacy_dhcp_server""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Use the old dnsmasq DHCP server for tethering instead of the framework implementation.
 *
 * Integer values are interpreted as boolean, and the absence of an explicit setting
 * is interpreted as |false|.
 * @hide
 */
]"
"[CARRIER_APP_WHITELIST = ""carrier_app_whitelist""]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * List of certificate (hex string representation of the application's certificate - SHA-1
 * or SHA-256) and carrier app package pairs which are whitelisted to prompt the user for
 * install when a sim card with matching UICC carrier privilege rules is inserted.  The
 * certificate is used as a key, so the certificate encoding here must be the same as the
 * certificate encoding used on the SIM.
 *
 * The value is ""cert1:package1;cert2:package2;...""
 * @hide
 */
]"
"[CARRIER_APP_NAMES = ""carrier_app_names""]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Map of package name to application names. The application names cannot and will not be
 * localized. App names may not contain colons or semicolons.
 *
 * The value is ""packageName1:appName1;packageName2:appName2;...""
 * @hide
 */
]"
"[USB_MASS_STORAGE_ENABLED = ""usb_mass_storage_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * USB Mass Storage Enabled
 */
]"
"[USE_GOOGLE_MAIL = ""use_google_mail""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If this setting is set (to anything), then all references
 * to Gmail on the device must change to Google Mail.
 */
]"
"[USER_SWITCHER_ENABLED = ""user_switcher_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether or not switching/creating users is enabled by user.
 * @hide
 */
]"
"[WEBVIEW_DATA_REDUCTION_PROXY_KEY = ""webview_data_reduction_proxy_key""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Webview Data reduction proxy key.
 * @hide
 */
]"
"[WEBVIEW_FALLBACK_LOGIC_ENABLED = ""webview_fallback_logic_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether or not the WebView fallback mechanism should be enabled.
 * 0=disabled, 1=enabled.
 * @hide
 */
]"
"[WEBVIEW_PROVIDER = ""webview_provider""]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Name of the package used as WebView provider (if unset the provider is instead determined
 * by the system).
 * @hide
 */
]"
"[WEBVIEW_MULTIPROCESS = ""webview_multiprocess""]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Developer setting to enable WebView multiprocess rendering.
 * @hide
 */
]"
"[NETWORK_SWITCH_NOTIFICATION_DAILY_LIMIT = ""network_switch_notification_daily_limit""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The maximum number of notifications shown in 24 hours when switching networks.
 * @hide
 */
]"
"[NETWORK_SWITCH_NOTIFICATION_RATE_LIMIT_MILLIS = ""network_switch_notification_rate_limit_millis""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The minimum time in milliseconds between notifications when switching networks.
 * @hide
 */
]"
"[NETWORK_AVOID_BAD_WIFI = ""network_avoid_bad_wifi""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to automatically switch away from wifi networks that lose Internet access.
 * Only meaningful if config_networkAvoidBadWifi is set to 0, otherwise the system always
 * avoids such networks. Valid values are:
 *
 * 0: Don't avoid bad wifi, don't prompt the user. Get stuck on bad wifi like it's 2013.
 * null: Ask the user whether to switch away from bad wifi.
 * 1: Avoid bad wifi.
 *
 * @hide
 */
]"
"[NETWORK_METERED_MULTIPATH_PREFERENCE = ""network_metered_multipath_preference""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * User setting for ConnectivityManager.getMeteredMultipathPreference(). This value may be
 * overridden by the system based on device or application state. If null, the value
 * specified by config_networkMeteredMultipathPreference is used.
 *
 * @hide
 */
]"
"[NETWORK_DEFAULT_DAILY_MULTIPATH_QUOTA_BYTES = ""network_default_daily_multipath_quota_bytes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Default daily multipath budget used by ConnectivityManager.getMultipathPreference()
 * on metered networks. This default quota is only used if quota could not be determined
 * from data plan or data limit/warning set by the user.
 * @hide
 */
]"
"[NETWORK_WATCHLIST_LAST_REPORT_TIME = ""network_watchlist_last_report_time""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Network watchlist last report time.
 * @hide
 */
]"
"[WIFI_BADGING_THRESHOLDS = ""wifi_badging_thresholds""]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The thresholds of the wifi throughput badging (SD, HD etc.) as a comma-delimited list of
 * colon-delimited key-value pairs. The key is the badging enum value defined in
 * android.net.ScoredNetwork and the value is the minimum sustained network throughput in
 * kbps required for the badge. For example: ""10:3000,20:5000,30:25000""
 *
 * @hide
 */
]"
"[WIFI_DISPLAY_ON = ""wifi_display_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether Wifi display is enabled/disabled
 * 0=disabled. 1=enabled.
 * @hide
 */
]"
"[WIFI_DISPLAY_CERTIFICATION_ON = ""wifi_display_certification_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether Wifi display certification mode is enabled/disabled
 * 0=disabled. 1=enabled.
 * @hide
 */
]"
"[WIFI_DISPLAY_WPS_CONFIG = ""wifi_display_wps_config""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * WPS Configuration method used by Wifi display, this setting only
 * takes effect when WIFI_DISPLAY_CERTIFICATION_ON is 1 (enabled).
 *
 * Possible values are:
 *
 * WpsInfo.INVALID: use default WPS method chosen by framework
 * WpsInfo.PBC    : use Push button
 * WpsInfo.KEYPAD : use Keypad
 * WpsInfo.DISPLAY: use Display
 * @hide
 */
]"
"[WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON = ""wifi_networks_available_notification_on""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to notify the user of open networks.
 * <p>
 * If not connected and the scan results have an open network, we will
 * put this notification up. If we attempt to connect to a network or
 * the open network(s) disappear, we remove the notification. When we
 * show the notification, we will not show it again for
 * {@link android.provider.Settings.Secure#WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY} time.
 *
 * @deprecated This feature is no longer controlled by this setting in
 * {@link android.os.Build.VERSION_CODES#O}.
 */
]"
"[WIMAX_NETWORKS_AVAILABLE_NOTIFICATION_ON = ""wimax_networks_available_notification_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY = ""wifi_networks_available_repeat_delay""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Delay (in seconds) before repeating the Wi-Fi networks available notification.
 * Connecting to a network will reset the timer.
 * @deprecated This is no longer used or set by the platform.
 */
]"
"[WIFI_COUNTRY_CODE = ""wifi_country_code""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * 802.11 country code in ISO 3166 format
 * @hide
 */
]"
"[WIFI_FRAMEWORK_SCAN_INTERVAL_MS = ""wifi_framework_scan_interval_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds to issue wake up scans when wifi needs
 * to connect. This is necessary to connect to an access point when
 * device is on the move and the screen is off.
 * @hide
 */
]"
"[WIFI_IDLE_MS = ""wifi_idle_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds after which Wi-Fi is considered idle.
 * When idle, it is possible for the device to be switched from Wi-Fi to
 * the mobile data network.
 * @hide
 */
]"
"[WIFI_NUM_OPEN_NETWORKS_KEPT = ""wifi_num_open_networks_kept""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * When the number of open networks exceeds this number, the
 * least-recently-used excess networks will be removed.
 * @deprecated This is no longer used or set by the platform.
 */
]"
"[WIFI_ON = ""wifi_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the Wi-Fi should be on.  Only the Wi-Fi service should touch this.
 */
]"
"[WIFI_SCAN_ALWAYS_AVAILABLE = ""wifi_scan_always_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Setting to allow scans to be enabled even wifi is turned off for connectivity.
 * @hide
 * @deprecated To be removed. Use {@link WifiManager#setScanAlwaysAvailable(boolean)} for
 * setting the value and {@link WifiManager#isScanAlwaysAvailable()} for query.
 */
]"
"[WIFI_P2P_PENDING_FACTORY_RESET = ""wifi_p2p_pending_factory_reset""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Indicate whether factory reset request is pending.
 *
 * Type: int (0 for false, 1 for true)
 * @hide
 * @deprecated To be removed.
 */
]"
"[SOFT_AP_TIMEOUT_ENABLED = ""soft_ap_timeout_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether soft AP will shut down after a timeout period when no devices are connected.
 *
 * Type: int (0 for false, 1 for true)
 * @hide
 * @deprecated To be removed. Use {@link SoftApConfiguration.Builder#
 * setAutoShutdownEnabled(boolean)} for setting the value and {@link SoftApConfiguration#
 * isAutoShutdownEnabled()} for query.
 */
]"
"[WIFI_WAKEUP_ENABLED = ""wifi_wakeup_enabled""]","[@Deprecated, @SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value to specify if Wi-Fi Wakeup feature is enabled.
 *
 * Type: int (0 for false, 1 for true)
 * @hide
 * @deprecated Use {@link WifiManager#setAutoWakeupEnabled(boolean)} for setting the value
 * and {@link WifiManager#isAutoWakeupEnabled()} for query.
 */
]"
"[WIFI_MIGRATION_COMPLETED = ""wifi_migration_completed""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value to specify if wifi settings migration is complete or not.
 * Note: This should only be used from within {@link android.net.wifi.WifiMigration} class.
 *
 * Type: int (0 for false, 1 for true)
 * @hide
 */
]"
"[NETWORK_SCORING_UI_ENABLED = ""network_scoring_ui_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value to specify whether network quality scores and badging should be shown in the UI.
 *
 * Type: int (0 for false, 1 for true)
 * @hide
 */
]"
"[SPEED_LABEL_CACHE_EVICTION_AGE_MILLIS = ""speed_label_cache_eviction_age_millis""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value to specify how long in milliseconds to retain seen score cache curves to be used
 * when generating SSID only bases score curves.
 *
 * Type: long
 * @hide
 */
]"
"[NETWORK_RECOMMENDATIONS_ENABLED = ""network_recommendations_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value to specify if network recommendations from
 * {@link com.android.server.NetworkScoreService} are enabled.
 *
 * Type: int
 * Valid values:
 * -1 = Forced off
 * 0 = Disabled
 * 1 = Enabled
 *
 * Most readers of this setting should simply check if value == 1 to determined the
 * enabled state.
 * @hide
 * @deprecated To be removed.
 */
]"
"[NETWORK_RECOMMENDATIONS_PACKAGE = ""network_recommendations_package""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Which package name to use for network recommendations. If null, network recommendations
 * will neither be requested nor accepted.
 *
 * Use {@link NetworkScoreManager#getActiveScorerPackage()} to read this value and
 * {@link NetworkScoreManager#setActiveScorer(String)} to write it.
 *
 * Type: string - package name
 * @hide
 */
]"
"[USE_OPEN_WIFI_PACKAGE = ""use_open_wifi_package""]","[@TestApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The package name of the application that connect and secures high quality open wifi
 * networks automatically.
 *
 * Type: string package name or null if the feature is either not provided or disabled.
 * @hide
 */
]"
"[RECOMMENDED_NETWORK_EVALUATOR_CACHE_EXPIRY_MS = ""recommended_network_evaluator_cache_expiry_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The expiration time in milliseconds for the {@link android.net.WifiKey} request cache in
 * {@link com.android.server.wifi.RecommendedNetworkEvaluator}.
 *
 * Type: long
 * @hide
 */
]"
"[WIFI_SCAN_THROTTLE_ENABLED = ""wifi_scan_throttle_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether wifi scan throttle is enabled or not.
 *
 * Type: int (0 for false, 1 for true)
 * @hide
 * @deprecated Use {@link WifiManager#setScanThrottleEnabled(boolean)} for setting the value
 * and {@link WifiManager#isScanThrottleEnabled()} for query.
 */
]"
"[BLE_SCAN_ALWAYS_AVAILABLE = ""ble_scan_always_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Settings to allow BLE scans to be enabled even when Bluetooth is turned off for
 * connectivity.
 * @hide
 */
]"
"[BLE_SCAN_LOW_POWER_WINDOW_MS = ""ble_scan_low_power_window_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The length in milliseconds of a BLE scan window in a low-power scan mode.
 * @hide
 */
]"
"[BLE_SCAN_BALANCED_WINDOW_MS = ""ble_scan_balanced_window_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The length in milliseconds of a BLE scan window in a balanced scan mode.
 * @hide
 */
]"
"[BLE_SCAN_LOW_LATENCY_WINDOW_MS = ""ble_scan_low_latency_window_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The length in milliseconds of a BLE scan window in a low-latency scan mode.
 * @hide
 */
]"
"[BLE_SCAN_LOW_POWER_INTERVAL_MS = ""ble_scan_low_power_interval_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The length in milliseconds of a BLE scan interval in a low-power scan mode.
 * @hide
 */
]"
"[BLE_SCAN_BALANCED_INTERVAL_MS = ""ble_scan_balanced_interval_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The length in milliseconds of a BLE scan interval in a balanced scan mode.
 * @hide
 */
]"
"[BLE_SCAN_LOW_LATENCY_INTERVAL_MS = ""ble_scan_low_latency_interval_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The length in milliseconds of a BLE scan interval in a low-latency scan mode.
 * @hide
 */
]"
"[BLE_SCAN_BACKGROUND_MODE = ""ble_scan_background_mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The mode that BLE scanning clients will be moved to when in the background.
 * @hide
 */
]"
"[WIFI_SUPPLICANT_SCAN_INTERVAL_MS = ""wifi_supplicant_scan_interval_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds to scan as used by the wifi supplicant
 * @hide
 */
]"
"[WIFI_ENHANCED_AUTO_JOIN = ""wifi_enhanced_auto_join""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * whether frameworks handles wifi auto-join
 * @hide
 */
]"
"[WIFI_NETWORK_SHOW_RSSI = ""wifi_network_show_rssi""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * whether settings show RSSI
 * @hide
 */
]"
"[WIFI_SCAN_INTERVAL_WHEN_P2P_CONNECTED_MS = ""wifi_scan_interval_p2p_connected_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds to scan at supplicant when p2p is connected
 * @hide
 */
]"
"[WIFI_WATCHDOG_ON = ""wifi_watchdog_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the Wi-Fi watchdog is enabled.
 */
]"
"[WIFI_WATCHDOG_POOR_NETWORK_TEST_ENABLED = ""wifi_watchdog_poor_network_test_enabled""]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Setting to turn off poor network avoidance on Wi-Fi. Feature is enabled by default and
 * the setting needs to be set to 0 to disable it.
 * @hide
 */
]"
"[WIFI_VERBOSE_LOGGING_ENABLED = ""wifi_verbose_logging_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Setting to enable verbose logging in Wi-Fi; disabled by default, and setting to 1
 * will enable it. In the future, additional values may be supported.
 * @hide
 * @deprecated Use {@link WifiManager#setVerboseLoggingEnabled(boolean)} for setting the
 * value and {@link WifiManager#isVerboseLoggingEnabled()} for query.
 */
]"
"[WIFI_CONNECTED_MAC_RANDOMIZATION_ENABLED = ""wifi_connected_mac_randomization_enabled""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Setting to enable connected MAC randomization in Wi-Fi; disabled by default, and
 * setting to 1 will enable it. In the future, additional values may be supported.
 * @deprecated MAC randomization is now a per-network setting
 * @hide
 */
]"
"[WIFI_SCORE_PARAMS = ""wifi_score_params""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Parameters to adjust the performance of framework wifi scoring methods.
 * <p>
 * Encoded as a comma-separated key=value list, for example:
 * ""rssi5=-80:-77:-70:-57,rssi2=-83:-80:-73:-60,horizon=15""
 * This is intended for experimenting with new parameter values,
 * and is normally unset or empty. The example does not include all
 * parameters that may be honored.
 * Default values are provided by code or device configurations.
 * Errors in the parameters will cause the entire setting to be ignored.
 * @hide
 * @deprecated This is no longer used or set by the platform.
 */
]"
"[WIFI_MAX_DHCP_RETRY_COUNT = ""wifi_max_dhcp_retry_count""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The maximum number of times we will retry a connection to an access
 * point for which we have failed in acquiring an IP address from DHCP.
 * A value of N means that we will make N+1 connection attempts in all.
 */
]"
"[WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS = ""wifi_mobile_data_transition_wakelock_timeout_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Maximum amount of time in milliseconds to hold a wakelock while waiting for mobile
 * data connectivity to be established after a disconnect from Wi-Fi.
 */
]"
"[WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN = ""wifi_device_owner_configs_lockdown""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This setting controls whether WiFi configurations created by a Device Owner app
 * should be locked down (that is, be editable or removable only by the Device Owner App,
 * not even by Settings app).
 * This setting takes integer values. Non-zero values mean DO created configurations
 * are locked down. Value of zero means they are not. Default value in the absence of
 * actual value to this setting is 0.
 */
]"
"[WIFI_FREQUENCY_BAND = ""wifi_frequency_band""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The operational wifi frequency band
 * Set to one of {@link WifiManager#WIFI_FREQUENCY_BAND_AUTO},
 * {@link WifiManager#WIFI_FREQUENCY_BAND_5GHZ} or
 * {@link WifiManager#WIFI_FREQUENCY_BAND_2GHZ}
 *
 * @hide
 */
]"
"[WIFI_P2P_DEVICE_NAME = ""wifi_p2p_device_name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The Wi-Fi peer-to-peer device name
 * @hide
 * @deprecated Use {@link WifiP2pManager#setDeviceName(WifiP2pManager.Channel, String,
 * WifiP2pManager.ActionListener)} for setting the value and
 * {@link android.net.wifi.p2p.WifiP2pDevice#deviceName} for query.
 */
]"
"[WIFI_EPHEMERAL_OUT_OF_RANGE_TIMEOUT_MS = ""wifi_ephemeral_out_of_range_timeout_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Timeout for ephemeral networks when all known BSSIDs go out of range. We will disconnect
 * from an ephemeral network if there is no BSSID for that network with a non-null score that
 * has been seen in this time period.
 *
 * If this is less than or equal to zero, we use a more conservative behavior and only check
 * for a non-null score from the currently connected or target BSSID.
 * @hide
 */
]"
"[DATA_STALL_ALARM_NON_AGGRESSIVE_DELAY_IN_MS = ""data_stall_alarm_non_aggressive_delay_in_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of milliseconds to delay when checking for data stalls during
 * non-aggressive detection. (screen is turned off.)
 * @hide
 */
]"
"[DATA_STALL_ALARM_AGGRESSIVE_DELAY_IN_MS = ""data_stall_alarm_aggressive_delay_in_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of milliseconds to delay when checking for data stalls during
 * aggressive detection. (screen on or suspected data stall)
 * @hide
 */
]"
"[PROVISIONING_APN_ALARM_DELAY_IN_MS = ""provisioning_apn_alarm_delay_in_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of milliseconds to allow the provisioning apn to remain active
 * @hide
 */
]"
"[GPRS_REGISTER_CHECK_PERIOD_MS = ""gprs_register_check_period_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds at which to check gprs registration
 * after the first registration mismatch of gprs and voice service,
 * to detect possible data network registration problems.
 *
 * @hide
 */
]"
"[WTF_IS_FATAL = ""wtf_is_fatal""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Nonzero causes Log.wtf() to crash.
 * @hide
 */
]"
"[MODE_RINGER = ""mode_ringer""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Ringer mode. This is used internally, changing this value will not
 * change the ringer mode. See AudioManager.
 */
]"
"[ENHANCED_CONNECTIVITY_ENABLED = ""enhanced_connectivity_enable""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Specifies whether Enhanced Connectivity is enabled or not. This setting allows the
 * Connectivity Thermal Power Manager to actively help the device to save power in 5G
 * scenarios
 * Type: int 1 is enabled, 0 is disabled
 *
 * @hide
 */
]"
"[OVERLAY_DISPLAY_DEVICES = ""overlay_display_devices""]","[@UnsupportedAppUsage, @TestApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Overlay display devices setting.
 * The associated value is a specially formatted string that describes the
 * size and density of simulated secondary display devices.
 * <p>
 * Format:
 * <pre>
 * [display1];[display2];...
 * </pre>
 * with each display specified as:
 * <pre>
 * [mode1]|[mode2]|...,[flag1],[flag2],...
 * </pre>
 * with each mode specified as:
 * <pre>
 * [width]x[height]/[densityDpi]
 * </pre>
 * Supported flags:
 * <ul>
 * <li><pre>secure</pre>: creates a secure display</li>
 * <li><pre>own_content_only</pre>: only shows this display's own content</li>
 * <li><pre>should_show_system_decorations</pre>: supports system decorations</li>
 * </ul>
 * </p><p>
 * Example:
 * <ul>
 * <li><code>1280x720/213</code>: make one overlay that is 1280x720 at 213dpi.</li>
 * <li><code>1920x1080/320,secure;1280x720/213</code>: make two overlays, the first at
 * 1080p and secure; the second at 720p.</li>
 * <li><code>1920x1080/320|3840x2160/640</code>: make one overlay that is 1920x1080 at
 * 213dpi by default, but can also be upscaled to 3840x2160 at 640dpi by the system if the
 * display device allows.</li>
 * <li>If the value is empty, then no overlay display devices are created.</li>
 * </ul></p>
 *
 * @hide
 */
]"
"[BATTERY_DISCHARGE_DURATION_THRESHOLD = ""battery_discharge_duration_threshold""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Threshold values for the duration and level of a discharge cycle,
 * under which we log discharge cycle info.
 *
 * @hide
 */
]"
"[BATTERY_DISCHARGE_THRESHOLD = ""battery_discharge_threshold""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[SEND_ACTION_APP_ERROR = ""send_action_app_error""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Flag for allowing ActivityManagerService to send ACTION_APP_ERROR
 * intents on application crashes and ANRs. If this is disabled, the
 * crash/ANR dialog will never display the ""Report"" button.
 * <p>
 * Type: int (0 = disallow, 1 = allow)
 *
 * @hide
 */
]"
"[DROPBOX_AGE_SECONDS = ""dropbox_age_seconds""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Maximum age of entries kept by {@link DropBoxManager}.
 *
 * @hide
 */
]"
"[DROPBOX_MAX_FILES = ""dropbox_max_files""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Maximum number of entry files which {@link DropBoxManager} will keep
 * around.
 *
 * @hide
 */
]"
"[DROPBOX_QUOTA_KB = ""dropbox_quota_kb""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Maximum amount of disk space used by {@link DropBoxManager} no matter
 * what.
 *
 * @hide
 */
]"
"[DROPBOX_QUOTA_PERCENT = ""dropbox_quota_percent""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Percent of free disk (excluding reserve) which {@link DropBoxManager}
 * will use.
 *
 * @hide
 */
]"
"[DROPBOX_RESERVE_PERCENT = ""dropbox_reserve_percent""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Percent of total disk which {@link DropBoxManager} will never dip
 * into.
 *
 * @hide
 */
]"
"[DROPBOX_TAG_PREFIX = ""dropbox:""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Prefix for per-tag dropbox disable/enable settings.
 *
 * @hide
 */
]"
"[ERROR_LOGCAT_PREFIX = ""logcat_for_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Lines of logcat to include with system crash/ANR/etc. reports, as a
 * prefix of the dropbox tag of the report type. For example,
 * ""logcat_for_system_server_anr"" controls the lines of logcat captured
 * with system server ANR reports. 0 to disable.
 *
 * @hide
 */
]"
"[MAX_ERROR_BYTES_PREFIX = ""max_error_bytes_for_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Maximum number of bytes of a system crash/ANR/etc. report that
 * ActivityManagerService should send to DropBox, as a prefix of the
 * dropbox tag of the report type. For example,
 * ""max_error_bytes_for_system_server_anr"" controls the maximum
 * number of bytes captured with system server ANR reports.
 * <p>
 * Type: int (max size in bytes)
 *
 * @hide
 */
]"
"[SYS_FREE_STORAGE_LOG_INTERVAL = ""sys_free_storage_log_interval""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in minutes after which the amount of free storage left
 * on the device is logged to the event log
 *
 * @hide
 */
]"
"[DISK_FREE_CHANGE_REPORTING_THRESHOLD = ""disk_free_change_reporting_threshold""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Threshold for the amount of change in disk free space required to
 * report the amount of free space. Used to prevent spamming the logs
 * when the disk free space isn't changing frequently.
 *
 * @hide
 */
]"
"[SYS_STORAGE_THRESHOLD_PERCENTAGE = ""sys_storage_threshold_percentage""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Minimum percentage of free storage on the device that is used to
 * determine if the device is running low on storage. The default is 10.
 * <p>
 * Say this value is set to 10, the device is considered running low on
 * storage if 90% or more of the device storage is filled up.
 *
 * @hide
 */
]"
"[SYS_STORAGE_THRESHOLD_MAX_BYTES = ""sys_storage_threshold_max_bytes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Maximum byte size of the low storage threshold. This is to ensure
 * that {@link #SYS_STORAGE_THRESHOLD_PERCENTAGE} does not result in an
 * overly large threshold for large storage devices. Currently this must
 * be less than 2GB. This default is 500MB.
 *
 * @hide
 */
]"
"[SYS_STORAGE_FULL_THRESHOLD_BYTES = ""sys_storage_full_threshold_bytes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Minimum bytes of free storage on the device before the data partition
 * is considered full. By default, 1 MB is reserved to avoid system-wide
 * SQLite disk full exceptions.
 *
 * @hide
 */
]"
"[SYS_STORAGE_CACHE_PERCENTAGE = ""sys_storage_cache_percentage""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Minimum percentage of storage on the device that is reserved for
 * cached data.
 *
 * @hide
 */
]"
"[SYS_STORAGE_CACHE_MAX_BYTES = ""sys_storage_cache_max_bytes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Maximum bytes of storage on the device that is reserved for cached
 * data.
 *
 * @hide
 */
]"
"[SYNC_MAX_RETRY_DELAY_IN_SECONDS = ""sync_max_retry_delay_in_seconds""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The maximum reconnect delay for short network outages or when the
 * network is suspended due to phone use.
 *
 * @hide
 */
]"
"[CONNECTIVITY_CHANGE_DELAY = ""connectivity_change_delay""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of milliseconds to delay before sending out
 * {@link ConnectivityManager#CONNECTIVITY_ACTION} broadcasts. Ignored.
 *
 * @hide
 */
]"
"[CONNECTIVITY_SAMPLING_INTERVAL_IN_SECONDS = ""connectivity_sampling_interval_in_seconds""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PAC_CHANGE_DELAY = ""pac_change_delay""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The series of successively longer delays used in retrying to download PAC file.
 * Last delay is used between successful PAC downloads.
 *
 * @hide
 */
]"
"[CAPTIVE_PORTAL_MODE_IGNORE = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Don't attempt to detect captive portals.
 *
 * @hide
 */
]"
"[CAPTIVE_PORTAL_MODE_PROMPT = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * When detecting a captive portal, display a notification that
 * prompts the user to sign in.
 *
 * @hide
 */
]"
"[CAPTIVE_PORTAL_MODE_AVOID = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * When detecting a captive portal, immediately disconnect from the
 * network and do not reconnect to that network in the future.
 *
 * @hide
 */
]"
"[CAPTIVE_PORTAL_MODE = ""captive_portal_mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * What to do when connecting a network that presents a captive portal.
 * Must be one of the CAPTIVE_PORTAL_MODE_* constants above.
 *
 * The default for this setting is CAPTIVE_PORTAL_MODE_PROMPT.
 * @hide
 */
]"
"[CAPTIVE_PORTAL_DETECTION_ENABLED = ""captive_portal_detection_enabled""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Setting to turn off captive portal detection. Feature is enabled by
 * default and the setting needs to be set to 0 to disable it.
 *
 * @deprecated use CAPTIVE_PORTAL_MODE_IGNORE to disable captive portal detection
 * @hide
 */
]"
"[CAPTIVE_PORTAL_SERVER = ""captive_portal_server""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The server used for captive portal detection upon a new conection. A
 * 204 response code from the server is used for validation.
 * TODO: remove this deprecated symbol.
 *
 * @hide
 */
]"
"[CAPTIVE_PORTAL_HTTPS_URL = ""captive_portal_https_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The URL used for HTTPS captive portal detection upon a new connection.
 * A 204 response code from the server is used for validation.
 *
 * @hide
 */
]"
"[CAPTIVE_PORTAL_HTTP_URL = ""captive_portal_http_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The URL used for HTTP captive portal detection upon a new connection.
 * A 204 response code from the server is used for validation.
 *
 * @hide
 */
]"
"[CAPTIVE_PORTAL_FALLBACK_URL = ""captive_portal_fallback_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The URL used for fallback HTTP captive portal detection when previous HTTP
 * and HTTPS captive portal detection attemps did not return a conclusive answer.
 *
 * @hide
 */
]"
"[CAPTIVE_PORTAL_OTHER_FALLBACK_URLS = ""captive_portal_other_fallback_urls""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A comma separated list of URLs used for captive portal detection in addition to the
 * fallback HTTP url associated with the CAPTIVE_PORTAL_FALLBACK_URL settings.
 *
 * @hide
 */
]"
"[CAPTIVE_PORTAL_FALLBACK_PROBE_SPECS = ""captive_portal_fallback_probe_specs""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A list of captive portal detection specifications used in addition to the fallback URLs.
 * Each spec has the format url@@/@@statusCodeRegex@@/@@contentRegex. Specs are separated
 * by ""@@,@@"".
 * @hide
 */
]"
"[CAPTIVE_PORTAL_USE_HTTPS = ""captive_portal_use_https""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to use HTTPS for network validation. This is enabled by default and the setting
 * needs to be set to 0 to disable it. This setting is a misnomer because captive portals
 * don't actually use HTTPS, but it's consistent with the other settings.
 *
 * @hide
 */
]"
"[CAPTIVE_PORTAL_USER_AGENT = ""captive_portal_user_agent""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Which User-Agent string to use in the header of the captive portal detection probes.
 * The User-Agent field is unset when this setting has no value (HttpUrlConnection default).
 *
 * @hide
 */
]"
"[DATA_STALL_RECOVERY_ON_BAD_NETWORK = ""data_stall_recovery_on_bad_network""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to try cellular data recovery when a bad network is reported.
 *
 * @hide
 */
]"
"[MIN_DURATION_BETWEEN_RECOVERY_STEPS_IN_MS = ""min_duration_between_recovery_steps""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Minumim duration in millisecodns between cellular data recovery attempts
 *
 * @hide
 */
]"
"[NSD_ON = ""nsd_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether network service discovery is enabled.
 *
 * @hide
 */
]"
"[SET_INSTALL_LOCATION = ""set_install_location""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Let user pick default install location.
 *
 * @hide
 */
]"
"[DEFAULT_INSTALL_LOCATION = ""default_install_location""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Default install location value.
 * 0 = auto, let system decide
 * 1 = internal
 * 2 = sdcard
 * @hide
 */
]"
"[INET_CONDITION_DEBOUNCE_UP_DELAY = ""inet_condition_debounce_up_delay""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * ms during which to consume extra events related to Inet connection
 * condition after a transtion to fully-connected
 *
 * @hide
 */
]"
"[INET_CONDITION_DEBOUNCE_DOWN_DELAY = ""inet_condition_debounce_down_delay""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * ms during which to consume extra events related to Inet connection
 * condtion after a transtion to partly-connected
 *
 * @hide
 */
]"
"[READ_EXTERNAL_STORAGE_ENFORCED_DEFAULT = ""read_external_storage_enforced_default""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[HTTP_PROXY = ""http_proxy""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Host name and port for global http proxy. Uses ':' seperator for
 * between host and port.
 */
]"
"[GLOBAL_HTTP_PROXY_HOST = ""global_http_proxy_host""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Host name for global http proxy. Set via ConnectivityManager.
 *
 * @hide
 */
]"
"[GLOBAL_HTTP_PROXY_PORT = ""global_http_proxy_port""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Integer host port for global http proxy. Set via ConnectivityManager.
 *
 * @hide
 */
]"
"[GLOBAL_HTTP_PROXY_EXCLUSION_LIST = ""global_http_proxy_exclusion_list""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Exclusion list for global proxy. This string contains a list of
 * comma-separated domains where the global proxy does not apply.
 * Domains should be listed in a comma- separated list. Example of
 * acceptable formats: "".domain1.com,my.domain2.com"" Use
 * ConnectivityManager to set/get.
 *
 * @hide
 */
]"
"[GLOBAL_HTTP_PROXY_PAC = ""global_proxy_pac_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The location PAC File for the proxy.
 * @hide
 */
]"
"[SET_GLOBAL_HTTP_PROXY = ""set_global_http_proxy""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Enables the UI setting to allow the user to specify the global HTTP
 * proxy and associated exclusion list.
 *
 * @hide
 */
]"
"[DEFAULT_DNS_SERVER = ""default_dns_server""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Setting for default DNS in case nobody suggests one
 *
 * @hide
 */
]"
"[PRIVATE_DNS_MODE = ""private_dns_mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The requested Private DNS mode (string), and an accompanying specifier (string).
 *
 * Currently, the specifier holds the chosen provider name when the mode requests
 * a specific provider. It may be used to store the provider name even when the
 * mode changes so that temporarily disabling and re-enabling the specific
 * provider mode does not necessitate retyping the provider hostname.
 *
 * @hide
 */
]"
"[PRIVATE_DNS_SPECIFIER = ""private_dns_specifier""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[PRIVATE_DNS_DEFAULT_MODE = ""private_dns_default_mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Forced override of the default mode (hardcoded as ""automatic"", nee ""opportunistic"").
 * This allows changing the default mode without effectively disabling other modes,
 * all of which require explicit user action to enable/configure. See also b/79719289.
 *
 * Value is a string, suitable for assignment to PRIVATE_DNS_MODE above.
 *
 * {@hide}
 */
]"
"[BLUETOOTH_BTSNOOP_DEFAULT_MODE = ""bluetooth_btsnoop_default_mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[BLUETOOTH_HEADSET_PRIORITY_PREFIX = ""bluetooth_headset_priority_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[BLUETOOTH_A2DP_SINK_PRIORITY_PREFIX = ""bluetooth_a2dp_sink_priority_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[BLUETOOTH_A2DP_SRC_PRIORITY_PREFIX = ""bluetooth_a2dp_src_priority_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[BLUETOOTH_A2DP_SUPPORTS_OPTIONAL_CODECS_PREFIX = ""bluetooth_a2dp_supports_optional_codecs_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[BLUETOOTH_A2DP_OPTIONAL_CODECS_ENABLED_PREFIX = ""bluetooth_a2dp_optional_codecs_enabled_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[BLUETOOTH_INPUT_DEVICE_PRIORITY_PREFIX = ""bluetooth_input_device_priority_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[BLUETOOTH_MAP_PRIORITY_PREFIX = ""bluetooth_map_priority_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[BLUETOOTH_MAP_CLIENT_PRIORITY_PREFIX = ""bluetooth_map_client_priority_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[BLUETOOTH_PBAP_CLIENT_PRIORITY_PREFIX = ""bluetooth_pbap_client_priority_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[BLUETOOTH_SAP_PRIORITY_PREFIX = ""bluetooth_sap_priority_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[BLUETOOTH_PAN_PRIORITY_PREFIX = ""bluetooth_pan_priority_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[BLUETOOTH_HEARING_AID_PRIORITY_PREFIX = ""bluetooth_hearing_aid_priority_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[ENABLE_RADIO_BUG_DETECTION = ""enable_radio_bug_detection""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Enable/disable radio bug detection
 *
 * {@hide}
 */
]"
"[RADIO_BUG_WAKELOCK_TIMEOUT_COUNT_THRESHOLD = ""radio_bug_wakelock_timeout_count_threshold""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Count threshold of RIL wakelock timeout for radio bug detection
 *
 * {@hide}
 */
]"
"[RADIO_BUG_SYSTEM_ERROR_COUNT_THRESHOLD = ""radio_bug_system_error_count_threshold""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Count threshold of RIL system error for radio bug detection
 *
 * {@hide}
 */
]"
"[ACTIVITY_MANAGER_CONSTANTS = ""activity_manager_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Activity manager specific settings.
 * This is encoded as a key=value list, separated by commas. Ex:
 *
 * ""gc_timeout=5000,max_cached_processes=24""
 *
 * The following keys are supported:
 *
 * <pre>
 * max_cached_processes                 (int)
 * background_settle_time               (long)
 * fgservice_min_shown_time             (long)
 * fgservice_min_report_time            (long)
 * fgservice_screen_on_before_time      (long)
 * fgservice_screen_on_after_time       (long)
 * content_provider_retain_time         (long)
 * gc_timeout                           (long)
 * gc_min_interval                      (long)
 * full_pss_min_interval                (long)
 * full_pss_lowered_interval            (long)
 * power_check_interval                 (long)
 * power_check_max_cpu_1                (int)
 * power_check_max_cpu_2                (int)
 * power_check_max_cpu_3                (int)
 * power_check_max_cpu_4                (int)
 * service_usage_interaction_time       (long)
 * usage_stats_interaction_interval     (long)
 * service_restart_duration             (long)
 * service_reset_run_duration           (long)
 * service_restart_duration_factor      (int)
 * service_min_restart_time_between     (long)
 * service_max_inactivity               (long)
 * service_bg_start_timeout             (long)
 * service_bg_activity_start_timeout    (long)
 * process_start_async                  (boolean)
 * </pre>
 *
 * <p>
 * Type: string
 * @hide
 * @see com.android.server.am.ActivityManagerConstants
 */
]"
"[ACTIVITY_STARTS_LOGGING_ENABLED = ""activity_starts_logging_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Feature flag to enable or disable the activity starts logging feature.
 * Type: int (0 for false, 1 for true)
 * Default: 1
 * @hide
 */
]"
"[FOREGROUND_SERVICE_STARTS_LOGGING_ENABLED = ""foreground_service_starts_logging_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Feature flag to enable or disable the foreground service starts logging feature.
 * Type: int (0 for false, 1 for true)
 * Default: 1
 * @hide
 */
]"
"[APP_BINDING_CONSTANTS = ""app_binding_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 * @see com.android.server.appbinding.AppBindingConstants
 */
]"
"[APP_OPS_CONSTANTS = ""app_ops_constants""]","[@TestApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * App ops specific settings.
 * This is encoded as a key=value list, separated by commas. Ex:
 *
 * ""state_settle_time=10000""
 *
 * The following keys are supported:
 *
 * <pre>
 * top_state_settle_time                (long)
 * fg_service_state_settle_time         (long)
 * bg_state_settle_time                 (long)
 * </pre>
 *
 * <p>
 * Type: string
 * @hide
 * @see com.android.server.AppOpsService.Constants
 */
]"
"[DEVICE_IDLE_CONSTANTS = ""device_idle_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Device Idle (Doze) specific settings.
 * This is encoded as a key=value list, separated by commas. Ex:
 *
 * ""inactive_to=60000,sensing_to=400000""
 *
 * The following keys are supported:
 *
 * <pre>
 * inactive_to                      (long)
 * sensing_to                       (long)
 * motion_inactive_to               (long)
 * idle_after_inactive_to           (long)
 * idle_pending_to                  (long)
 * max_idle_pending_to              (long)
 * idle_pending_factor              (float)
 * quick_doze_delay_to              (long)
 * idle_to                          (long)
 * max_idle_to                      (long)
 * idle_factor                      (float)
 * min_time_to_alarm                (long)
 * max_temp_app_whitelist_duration  (long)
 * notification_whitelist_duration  (long)
 * </pre>
 *
 * <p>
 * Type: string
 * @hide
 * @see com.android.server.DeviceIdleController.Constants
 */
]"
"[BATTERY_SAVER_CONSTANTS = ""battery_saver_constants""]","[@UnsupportedAppUsage, @TestApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Battery Saver specific settings
 * This is encoded as a key=value list, separated by commas. Ex:
 *
 * ""vibration_disabled=true,adjust_brightness_factor=0.5""
 *
 * The following keys are supported:
 *
 * <pre>
 * advertise_is_enabled              (boolean)
 * datasaver_disabled                (boolean)
 * enable_night_mode                 (boolean)
 * launch_boost_disabled             (boolean)
 * vibration_disabled                (boolean)
 * animation_disabled                (boolean)
 * soundtrigger_disabled             (boolean)
 * fullbackup_deferred               (boolean)
 * keyvaluebackup_deferred           (boolean)
 * firewall_disabled                 (boolean)
 * gps_mode                          (int)
 * adjust_brightness_disabled        (boolean)
 * adjust_brightness_factor          (float)
 * force_all_apps_standby            (boolean)
 * force_background_check            (boolean)
 * optional_sensors_disabled         (boolean)
 * aod_disabled                      (boolean)
 * quick_doze_enabled                (boolean)
 * </pre>
 * @hide
 * @see com.android.server.power.batterysaver.BatterySaverPolicy
 */
]"
"[BATTERY_SAVER_DEVICE_SPECIFIC_CONSTANTS = ""battery_saver_device_specific_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Battery Saver device specific settings
 * This is encoded as a key=value list, separated by commas.
 *
 * The following keys are supported:
 *
 * <pre>
 * cpufreq-i (list of ""core-number:frequency"" pairs concatenated with /)
 * cpufreq-n (list of ""core-number:frequency"" pairs concatenated with /)
 * </pre>
 *
 * See {@link com.android.server.power.batterysaver.BatterySaverPolicy} for the details.
 *
 * @hide
 */
]"
"[BATTERY_SAVER_ADAPTIVE_CONSTANTS = ""battery_saver_adaptive_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Settings for adaptive Battery Saver mode. Uses the same flags as
 * {@link #BATTERY_SAVER_CONSTANTS}.
 *
 * @hide
 */
]"
"[BATTERY_SAVER_ADAPTIVE_DEVICE_SPECIFIC_CONSTANTS = ""battery_saver_adaptive_device_specific_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Device specific settings for adaptive Battery Saver mode. Uses the same flags as
 * {@link #BATTERY_SAVER_DEVICE_SPECIFIC_CONSTANTS}.
 *
 * @hide
 */
]"
"[BATTERY_TIP_CONSTANTS = ""battery_tip_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Battery tip specific settings
 * This is encoded as a key=value list, separated by commas. Ex:
 *
 * ""battery_tip_enabled=true,summary_enabled=true,high_usage_enabled=true,""
 * ""high_usage_app_count=3,reduced_battery_enabled=false,reduced_battery_percent=50,""
 * ""high_usage_battery_draining=25,high_usage_period_ms=3000""
 *
 * The following keys are supported:
 *
 * <pre>
 * battery_tip_enabled              (boolean)
 * summary_enabled                  (boolean)
 * battery_saver_tip_enabled        (boolean)
 * high_usage_enabled               (boolean)
 * high_usage_app_count             (int)
 * high_usage_period_ms             (long)
 * high_usage_battery_draining      (int)
 * app_restriction_enabled          (boolean)
 * reduced_battery_enabled          (boolean)
 * reduced_battery_percent          (int)
 * low_battery_enabled              (boolean)
 * low_battery_hour                 (int)
 * </pre>
 * @hide
 */
]"
"[ANOMALY_DETECTION_CONSTANTS = ""anomaly_detection_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Battery anomaly detection specific settings
 * This is encoded as a key=value list, separated by commas.
 * wakeup_blacklisted_tags is a string, encoded as a set of tags, encoded via
 * {@link Uri#encode(String)}, separated by colons. Ex:
 *
 * ""anomaly_detection_enabled=true,wakelock_threshold=2000,wakeup_alarm_enabled=true,""
 * ""wakeup_alarm_threshold=10,wakeup_blacklisted_tags=tag1:tag2:with%2Ccomma:with%3Acolon""
 *
 * The following keys are supported:
 *
 * <pre>
 * anomaly_detection_enabled       (boolean)
 * wakelock_enabled                (boolean)
 * wakelock_threshold              (long)
 * wakeup_alarm_enabled            (boolean)
 * wakeup_alarm_threshold          (long)
 * wakeup_blacklisted_tags         (string)
 * bluetooth_scan_enabled          (boolean)
 * bluetooth_scan_threshold        (long)
 * </pre>
 * @hide
 */
]"
"[ANOMALY_CONFIG_VERSION = ""anomaly_config_version""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * An integer to show the version of the anomaly config. Ex: 1, which means
 * current version is 1.
 * @hide
 */
]"
"[ANOMALY_CONFIG = ""anomaly_config""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A base64-encoded string represents anomaly stats config, used for
 * {@link android.app.StatsManager}.
 * @hide
 */
]"
"[ALWAYS_ON_DISPLAY_CONSTANTS = ""always_on_display_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Always on display(AOD) specific settings
 * This is encoded as a key=value list, separated by commas. Ex:
 *
 * ""prox_screen_off_delay=10000,screen_brightness_array=0:1:2:3:4""
 *
 * The following keys are supported:
 *
 * <pre>
 * screen_brightness_array         (int[])
 * dimming_scrim_array             (int[])
 * prox_screen_off_delay           (long)
 * prox_cooldown_trigger           (long)
 * prox_cooldown_period            (long)
 * </pre>
 * @hide
 */
]"
"[SYS_VDSO = ""sys_vdso""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * System VDSO global setting. This links to the ""sys.vdso"" system property.
 * The following values are supported:
 * false  -> both 32 and 64 bit vdso disabled
 * 32     -> 32 bit vdso enabled
 * 64     -> 64 bit vdso enabled
 * Any other value defaults to both 32 bit and 64 bit true.
 * @hide
 */
]"
"[SYS_UIDCPUPOWER = ""sys_uidcpupower""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * UidCpuPower global setting. This links the sys.uidcpupower system property.
 * The following values are supported:
 * 0 -> /proc/uid_cpupower/* are disabled
 * 1 -> /proc/uid_cpupower/* are enabled
 * Any other value defaults to enabled.
 * @hide
 */
]"
"[SYS_TRACED = ""sys_traced""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * traced global setting. This controls weather the deamons: traced and
 * traced_probes run. This links the sys.traced system property.
 * The following values are supported:
 * 0 -> traced and traced_probes are disabled
 * 1 -> traced and traced_probes are enabled
 * Any other value defaults to disabled.
 * @hide
 */
]"
"[FPS_DEVISOR = ""fps_divisor""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * An integer to reduce the FPS by this factor. Only for experiments. Need to reboot the
 * device for this setting to take full effect.
 *
 * @hide
 */
]"
"[DISPLAY_PANEL_LPM = ""display_panel_lpm""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Flag to enable or disable display panel low power mode (lpm)
 * false -> Display panel power saving mode is disabled.
 * true  -> Display panel power saving mode is enabled.
 *
 * @hide
 */
]"
"[APP_TIME_LIMIT_USAGE_SOURCE = ""app_time_limit_usage_source""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * App time limit usage source setting.
 * This controls which app in a task will be considered the source of usage when
 * calculating app usage time limits.
 *
 * 1 -> task root app
 * 2 -> current app
 * Any other value defaults to task root app.
 *
 * Need to reboot the device for this setting to take effect.
 * @hide
 */
]"
"[APP_IDLE_CONSTANTS = ""app_idle_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * App standby (app idle) specific settings.
 * This is encoded as a key=value list, separated by commas. Ex:
 * <p>
 * ""idle_duration=5000,prediction_timeout=4500,screen_thresholds=0/0/60000/120000""
 * <p>
 * All durations are in millis.
 * Array values are separated by forward slashes
 * The following keys are supported:
 *
 * <pre>
 * screen_thresholds                (long[4])
 * elapsed_thresholds               (long[4])
 * strong_usage_duration            (long)
 * notification_seen_duration       (long)
 * system_update_usage_duration     (long)
 * prediction_timeout               (long)
 * sync_adapter_duration            (long)
 * exempted_sync_duration           (long)
 * system_interaction_duration      (long)
 * initial_foreground_service_start_duration (long)
 * cross_profile_apps_share_standby_buckets  (boolean)
 * </pre>
 *
 * <p>
 * Type: string
 * @hide
 * @see com.android.server.usage.AppStandbyController
 */
]"
"[ART_VERIFIER_VERIFY_DEBUGGABLE = ""art_verifier_verify_debuggable""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Enable ART bytecode verification verifications for debuggable apps.
 * 0 = disable, 1 = enable.
 * @hide
 */
]"
"[POWER_MANAGER_CONSTANTS = ""power_manager_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Power manager specific settings.
 * This is encoded as a key=value list, separated by commas. Ex:
 *
 * ""no_cached_wake_locks=1""
 *
 * The following keys are supported:
 *
 * <pre>
 * no_cached_wake_locks                 (boolean)
 * </pre>
 *
 * <p>
 * Type: string
 * @hide
 * @see com.android.server.power.PowerManagerConstants
 */
]"
"[ALARM_MANAGER_CONSTANTS = ""alarm_manager_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Alarm manager specific settings.
 * This is encoded as a key=value list, separated by commas. Ex:
 *
 * ""min_futurity=5000,allow_while_idle_short_time=4500""
 *
 * The following keys are supported:
 *
 * <pre>
 * min_futurity                         (long)
 * min_interval                         (long)
 * allow_while_idle_short_time          (long)
 * allow_while_idle_long_time           (long)
 * allow_while_idle_whitelist_duration  (long)
 * </pre>
 *
 * <p>
 * Type: string
 * @hide
 * @see com.android.server.AlarmManagerService.Constants
 */
]"
"[JOB_SCHEDULER_CONSTANTS = ""job_scheduler_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Job scheduler specific settings.
 * This is encoded as a key=value list, separated by commas. Ex:
 *
 * ""min_ready_jobs_count=2,moderate_use_factor=.5""
 *
 * The following keys are supported:
 *
 * <pre>
 * min_idle_count                       (int)
 * min_charging_count                   (int)
 * min_connectivity_count               (int)
 * min_content_count                    (int)
 * min_ready_jobs_count                 (int)
 * heavy_use_factor                     (float)
 * moderate_use_factor                  (float)
 * fg_job_count                         (int)
 * bg_normal_job_count                  (int)
 * bg_moderate_job_count                (int)
 * bg_low_job_count                     (int)
 * bg_critical_job_count                (int)
 * </pre>
 *
 * <p>
 * Type: string
 * @hide
 * @see com.android.server.job.JobSchedulerService.Constants
 */
]"
"[JOB_SCHEDULER_QUOTA_CONTROLLER_CONSTANTS = ""job_scheduler_quota_controller_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Job scheduler QuotaController specific settings.
 * This is encoded as a key=value list, separated by commas. Ex:
 *
 * ""max_job_count_working=5,max_job_count_rare=2""
 *
 * <p>
 * Type: string
 *
 * @hide
 * @see com.android.server.job.JobSchedulerService.Constants
 */
]"
"[JOB_SCHEDULER_TIME_CONTROLLER_CONSTANTS = ""job_scheduler_time_controller_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Job scheduler TimeController specific settings.
 * This is encoded as a key=value list, separated by commas. Ex:
 *
 * ""skip_not_ready_jobs=true5,other_key=2""
 *
 * <p>
 * Type: string
 *
 * @hide
 * @see com.android.server.job.JobSchedulerService.Constants
 */
]"
"[SHORTCUT_MANAGER_CONSTANTS = ""shortcut_manager_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * ShortcutManager specific settings.
 * This is encoded as a key=value list, separated by commas. Ex:
 *
 * ""reset_interval_sec=86400,max_updates_per_interval=1""
 *
 * The following keys are supported:
 *
 * <pre>
 * reset_interval_sec              (long)
 * max_updates_per_interval        (int)
 * max_icon_dimension_dp           (int, DP)
 * max_icon_dimension_dp_lowram    (int, DP)
 * max_shortcuts                   (int)
 * icon_quality                    (int, 0-100)
 * icon_format                     (String)
 * </pre>
 *
 * <p>
 * Type: string
 * @hide
 * @see com.android.server.pm.ShortcutService.ConfigConstants
 */
]"
"[DEVICE_POLICY_CONSTANTS = ""device_policy_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * DevicePolicyManager specific settings.
 * This is encoded as a key=value list, separated by commas. Ex:
 *
 * <pre>
 * das_died_service_reconnect_backoff_sec       (long)
 * das_died_service_reconnect_backoff_increase  (float)
 * das_died_service_reconnect_max_backoff_sec   (long)
 * </pre>
 *
 * <p>
 * Type: string
 * @hide
 * see also com.android.server.devicepolicy.DevicePolicyConstants
 */
]"
"[TEXT_CLASSIFIER_CONSTANTS = ""text_classifier_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * TextClassifier specific settings.
 * This is encoded as a key=value list, separated by commas. String[] types like
 * entity_list_default use "":"" as delimiter for values. Ex:
 *
 * <pre>
 * classify_text_max_range_length                   (int)
 * detect_language_from_text_enabled                (boolean)
 * entity_list_default                              (String[])
 * entity_list_editable                             (String[])
 * entity_list_not_editable                         (String[])
 * generate_links_log_sample_rate                   (int)
 * generate_links_max_text_length                   (int)
 * in_app_conversation_action_types_default         (String[])
 * lang_id_context_settings                         (float[])
 * lang_id_threshold_override                       (float)
 * local_textclassifier_enabled                     (boolean)
 * model_dark_launch_enabled                        (boolean)
 * notification_conversation_action_types_default   (String[])
 * smart_linkify_enabled                            (boolean)
 * smart_select_animation_enabled                   (boolean)
 * smart_selection_enabled                          (boolean)
 * smart_text_share_enabled                         (boolean)
 * suggest_selection_max_range_length               (int)
 * system_textclassifier_enabled                    (boolean)
 * template_intent_factory_enabled                  (boolean)
 * translate_in_classification_enabled              (boolean)
 * </pre>
 *
 * <p>
 * Type: string
 * @hide
 * see also android.view.textclassifier.TextClassificationConstants
 */
]"
"[BATTERY_STATS_CONSTANTS = ""battery_stats_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * BatteryStats specific settings.
 * This is encoded as a key=value list, separated by commas. Ex: ""foo=1,bar=true""
 *
 * The following keys are supported:
 * <pre>
 * track_cpu_times_by_proc_state (boolean)
 * track_cpu_active_cluster_time (boolean)
 * read_binary_cpu_time          (boolean)
 * proc_state_cpu_times_read_delay_ms (long)
 * external_stats_collection_rate_limit_ms (long)
 * battery_level_collection_delay_ms (long)
 * max_history_files (int)
 * max_history_buffer_kb (int)
 * battery_charged_delay_ms (int)
 * </pre>
 *
 * <p>
 * Type: string
 * @hide
 * see also com.android.internal.os.BatteryStatsImpl.Constants
 */
]"
"[SYNC_MANAGER_CONSTANTS = ""sync_manager_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * SyncManager specific settings.
 *
 * <p>
 * Type: string
 * @hide
 * @see com.android.server.content.SyncManagerConstants
 */
]"
"[BROADCAST_FG_CONSTANTS = ""bcast_fg_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Broadcast dispatch tuning parameters specific to foreground broadcasts.
 *
 * This is encoded as a key=value list, separated by commas. Ex: ""foo=1,bar=true""
 *
 * The following keys are supported:
 * <pre>
 * bcast_timeout                (long)
 * bcast_slow_time              (long)
 * bcast_deferral               (long)
 * bcast_deferral_decay_factor  (float)
 * bcast_deferral_floor         (long)
 * bcast_allow_bg_activity_start_timeout    (long)
 * </pre>
 *
 * @hide
 */
]"
"[BROADCAST_BG_CONSTANTS = ""bcast_bg_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Broadcast dispatch tuning parameters specific to background broadcasts.
 *
 * This is encoded as a key=value list, separated by commas. Ex: ""foo=1,bar=true"".
 * See {@link #BROADCAST_FG_CONSTANTS} for the list of supported keys.
 *
 * @hide
 */
]"
"[BROADCAST_OFFLOAD_CONSTANTS = ""bcast_offload_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Broadcast dispatch tuning parameters specific to specific ""offline"" broadcasts.
 *
 * This is encoded as a key=value list, separated by commas. Ex: ""foo=1,bar=true"".
 * See {@link #BROADCAST_FG_CONSTANTS} for the list of supported keys.
 *
 * @hide
 */
]"
"[APP_STANDBY_ENABLED = ""app_standby_enabled""]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether or not App Standby feature is enabled by system. This controls throttling of apps
 * based on usage patterns and predictions. Platform will turn on this feature if both this
 * flag and {@link #ADAPTIVE_BATTERY_MANAGEMENT_ENABLED} is on.
 * Type: int (0 for false, 1 for true)
 * Default: 1
 * @hide
 * @see #ADAPTIVE_BATTERY_MANAGEMENT_ENABLED
 */
]"
"[ADAPTIVE_BATTERY_MANAGEMENT_ENABLED = ""adaptive_battery_management_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether or not adaptive battery feature is enabled by user. Platform will turn on this
 * feature if both this flag and {@link #APP_STANDBY_ENABLED} is on.
 * Type: int (0 for false, 1 for true)
 * Default: 1
 * @hide
 * @see #APP_STANDBY_ENABLED
 */
]"
"[ENABLE_RESTRICTED_BUCKET = ""enable_restricted_bucket""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether or not apps are allowed into the
 * {@link android.app.usage.UsageStatsManager#STANDBY_BUCKET_RESTRICTED} bucket.
 * Type: int (0 for false, 1 for true)
 * Default: {@value #DEFAULT_ENABLE_RESTRICTED_BUCKET}
 *
 * @hide
 */
]"
"[DEFAULT_ENABLE_RESTRICTED_BUCKET = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @see #ENABLE_RESTRICTED_BUCKET
 * @hide
 */
]"
"[APP_AUTO_RESTRICTION_ENABLED = ""app_auto_restriction_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether or not app auto restriction is enabled. When it is enabled, settings app will
 * auto restrict the app if it has bad behavior (e.g. hold wakelock for long time).
 *
 * Type: boolean (0 for false, 1 for true)
 * Default: 1
 *
 * @hide
 */
]"
"[FORCED_APP_STANDBY_ENABLED = ""forced_app_standby_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Feature flag to enable or disable the Forced App Standby feature.
 * Type: int (0 for false, 1 for true)
 * Default: 1
 * @hide
 */
]"
"[FORCED_APP_STANDBY_FOR_SMALL_BATTERY_ENABLED = ""forced_app_standby_for_small_battery_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether or not to enable Forced App Standby on small battery devices.
 * Type: int (0 for false, 1 for true)
 * Default: 0
 * @hide
 */
]"
"[USER_ABSENT_RADIOS_OFF_FOR_SMALL_BATTERY_ENABLED = ""user_absent_radios_off_for_small_battery_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether or not to enable the User Absent, Radios Off feature on small battery devices.
 * Type: int (0 for false, 1 for true)
 * Default: 0
 * @hide
 */
]"
"[USER_ABSENT_TOUCH_OFF_FOR_SMALL_BATTERY_ENABLED = ""user_absent_touch_off_for_small_battery_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether or not to enable the User Absent, Touch Off feature on small battery devices.
 * Type: int (0 for false, 1 for true)
 * Default: 0
 * @hide
 */
]"
"[WIFI_ON_WHEN_PROXY_DISCONNECTED = ""wifi_on_when_proxy_disconnected""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether or not to turn on Wifi when proxy is disconnected.
 * Type: int (0 for false, 1 for true)
 * Default: 1
 * @hide
 */
]"
"[TIME_ONLY_MODE_CONSTANTS = ""time_only_mode_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Time Only Mode specific settings.
 * This is encoded as a key=value list, separated by commas. Ex: ""foo=1,bar=true""
 *
 * The following keys are supported:
 *
 * <pre>
 * enabled                  (boolean)
 * disable_home             (boolean)
 * disable_tilt_to_wake     (boolean)
 * disable_touch_to_wake    (boolean)
 * </pre>
 * Type: string
 * @hide
 */
]"
"[UNGAZE_SLEEP_ENABLED = ""ungaze_sleep_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether of not to send keycode sleep for ungaze when Home is the foreground activity on
 * watch type devices.
 * Type: int (0 for false, 1 for true)
 * Default: 0
 * @hide
 */
]"
"[NETWORK_WATCHLIST_ENABLED = ""network_watchlist_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether or not Network Watchlist feature is enabled.
 * Type: int (0 for false, 1 for true)
 * Default: 0
 * @hide
 */
]"
"[SHOW_HIDDEN_LAUNCHER_ICON_APPS_ENABLED = ""show_hidden_icon_apps_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether or not show hidden launcher icon apps feature is enabled.
 * Type: int (0 for false, 1 for true)
 * Default: 1
 * @hide
 */
]"
"[SHOW_NEW_APP_INSTALLED_NOTIFICATION_ENABLED = ""show_new_app_installed_notification_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether or not show new app installed notification is enabled.
 * Type: int (0 for false, 1 for true)
 * Default: 0
 * @hide
 */
]"
"[KEEP_PROFILE_IN_BACKGROUND = ""keep_profile_in_background""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Flag to keep background restricted profiles running after exiting. If disabled,
 * the restricted profile can be put into stopped state as soon as the user leaves it.
 * Type: int (0 for false, 1 for true)
 *
 * Overridden by the system based on device information. If null, the value specified
 * by {@code config_keepRestrictedProfilesInBackground} is used.
 *
 * @hide
 */
]"
"[DEFAULT_ADB_ALLOWED_CONNECTION_TIME = 604800000]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The default time in ms within which a subsequent connection from an always allowed system
 * is allowed to reconnect without user interaction.
 *
 * @hide
 */
]"
"[ADB_ALLOWED_CONNECTION_TIME = ""adb_allowed_connection_time""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * When the user first connects their device to a system a prompt is displayed to allow
 * the adb connection with an option to 'Always allow' connections from this system. If the
 * user selects this always allow option then the connection time is stored for the system.
 * This setting is the time in ms within which a subsequent connection from an always
 * allowed system is allowed to reconnect without user interaction.
 *
 * Type: long
 *
 * @hide
 */
]"
"[WINDOW_ANIMATION_SCALE = ""window_animation_scale""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Scaling factor for normal window animations. Setting to 0 will
 * disable window animations.
 */
]"
"[TRANSITION_ANIMATION_SCALE = ""transition_animation_scale""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Scaling factor for activity transition animations. Setting to 0 will
 * disable window animations.
 */
]"
"[ANIMATOR_DURATION_SCALE = ""animator_duration_scale""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Scaling factor for Animator-based animations. This affects both the
 * start delay and duration of all such animations. Setting to 0 will
 * cause animations to end immediately. The default value is 1.
 */
]"
"[FANCY_IME_ANIMATIONS = ""fancy_ime_animations""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Scaling factor for normal window animations. Setting to 0 will
 * disable window animations.
 *
 * @hide
 */
]"
"[COMPATIBILITY_MODE = ""compatibility_mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If 0, the compatibility mode is off for all applications.
 * If 1, older applications run under compatibility mode.
 * TODO: remove this settings before code freeze (bug/1907571)
 * @hide
 */
]"
"[EMERGENCY_TONE = ""emergency_tone""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * CDMA only settings
 * Emergency Tone  0 = Off
 * 1 = Alert
 * 2 = Vibrate
 * @hide
 */
]"
"[CALL_AUTO_RETRY = ""call_auto_retry""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * CDMA only settings
 * Whether the auto retry is enabled. The value is
 * boolean (1 or 0).
 * @hide
 */
]"
"[EMERGENCY_AFFORDANCE_NEEDED = ""emergency_affordance_needed""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A setting that can be read whether the emergency affordance is currently needed.
 * The value is a boolean (1 or 0).
 * @hide
 */
]"
"[ENABLE_AUTOMATIC_SYSTEM_SERVER_HEAP_DUMPS = ""enable_automatic_system_server_heap_dumps""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to enable automatic system server heap dumps. This only works on userdebug or
 * eng builds, not on user builds. This is set by the user and overrides the config value.
 * 1 means enable, 0 means disable.
 *
 * @hide
 */
]"
"[PREFERRED_NETWORK_MODE = ""preferred_network_mode""]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * See RIL_PreferredNetworkType in ril.h
 * @hide
 */
]"
"[DEBUG_APP = ""debug_app""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Name of an application package to be debugged.
 */
]"
"[WAIT_FOR_DEBUGGER = ""wait_for_debugger""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If 1, when launching DEBUG_APP it will wait for the debugger before
 * starting user code.  If 0, it will run normally.
 */
]"
"[ENABLE_GPU_DEBUG_LAYERS = ""enable_gpu_debug_layers""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Allow GPU debug layers?
 * 0 = no
 * 1 = yes
 * @hide
 */
]"
"[GPU_DEBUG_APP = ""gpu_debug_app""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * App allowed to load GPU debug layers
 * @hide
 */
]"
"[GLOBAL_SETTINGS_ANGLE_DEBUG_PACKAGE = ""angle_debug_package""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Package containing ANGLE libraries other than system, which are only available
 * to dumpable apps that opt-in.
 * @hide
 */
]"
"[GLOBAL_SETTINGS_ANGLE_GL_DRIVER_ALL_ANGLE = ""angle_gl_driver_all_angle""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Force all PKGs to use ANGLE, regardless of any other settings
 * The value is a boolean (1 or 0).
 * @hide
 */
]"
"[GLOBAL_SETTINGS_ANGLE_GL_DRIVER_SELECTION_PKGS = ""angle_gl_driver_selection_pkgs""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * List of PKGs that have an OpenGL driver selected
 * @hide
 */
]"
"[GLOBAL_SETTINGS_ANGLE_GL_DRIVER_SELECTION_VALUES = ""angle_gl_driver_selection_values""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * List of selected OpenGL drivers, corresponding to the PKGs in GLOBAL_SETTINGS_DRIVER_PKGS
 * @hide
 */
]"
"[GLOBAL_SETTINGS_ANGLE_WHITELIST = ""angle_whitelist""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * List of package names that should check ANGLE rules
 * @hide
 */
]"
"[GLOBAL_SETTINGS_SHOW_ANGLE_IN_USE_DIALOG_BOX = ""show_angle_in_use_dialog_box""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Show the ""ANGLE In Use"" dialog box to the user when ANGLE is the OpenGL driver.
 * The value is a boolean (1 or 0).
 * @hide
 */
]"
"[GAME_DRIVER_ALL_APPS = ""game_driver_all_apps""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Game Driver global preference for all Apps.
 * 0 = Default
 * 1 = All Apps use Game Driver
 * 2 = All Apps use system graphics driver
 * @hide
 */
]"
"[GAME_DRIVER_OPT_IN_APPS = ""game_driver_opt_in_apps""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * List of Apps selected to use Game Driver.
 * i.e. <pkg1>,<pkg2>,...,<pkgN>
 * @hide
 */
]"
"[GAME_DRIVER_PRERELEASE_OPT_IN_APPS = ""game_driver_prerelease_opt_in_apps""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * List of Apps selected to use prerelease Game Driver.
 * i.e. <pkg1>,<pkg2>,...,<pkgN>
 * @hide
 */
]"
"[GAME_DRIVER_OPT_OUT_APPS = ""game_driver_opt_out_apps""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * List of Apps selected not to use Game Driver.
 * i.e. <pkg1>,<pkg2>,...,<pkgN>
 * @hide
 */
]"
"[GAME_DRIVER_BLACKLIST = ""game_driver_blacklist""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Apps on the blacklist that are forbidden to use Game Driver.
 * @hide
 */
]"
"[GAME_DRIVER_BLACKLISTS = ""game_driver_blacklists""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * List of blacklists, each blacklist is a blacklist for a specific version of Game Driver.
 * @hide
 */
]"
"[GAME_DRIVER_WHITELIST = ""game_driver_whitelist""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Apps on the whitelist that are allowed to use Game Driver.
 * The string is a list of application package names, seperated by comma.
 * i.e. <apk1>,<apk2>,...,<apkN>
 * @hide
 */
]"
"[GAME_DRIVER_SPHAL_LIBRARIES = ""game_driver_sphal_libraries""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * List of libraries in sphal accessible by Game Driver
 * The string is a list of library names, separated by colon.
 * i.e. <lib1>:<lib2>:...:<libN>
 * @hide
 */
]"
"[GPU_DEBUG_LAYERS = ""gpu_debug_layers""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Ordered GPU debug layer list for Vulkan
 * i.e. <layer1>:<layer2>:...:<layerN>
 * @hide
 */
]"
"[GPU_DEBUG_LAYERS_GLES = ""gpu_debug_layers_gles""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Ordered GPU debug layer list for GLES
 * i.e. <layer1>:<layer2>:...:<layerN>
 * @hide
 */
]"
"[GPU_DEBUG_LAYER_APP = ""gpu_debug_layer_app""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Addition app for GPU layer discovery
 * @hide
 */
]"
"[SHOW_PROCESSES = ""show_processes""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Control whether the process CPU usage meter should be shown.
 *
 * @deprecated This functionality is no longer available as of
 * {@link android.os.Build.VERSION_CODES#N_MR1}.
 */
]"
"[LOW_POWER_MODE = ""low_power""]","[@TestApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If 1 low power mode (aka battery saver) is enabled.
 * @hide
 */
]"
"[LOW_POWER_MODE_STICKY = ""low_power_sticky""]","[@TestApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If 1, battery saver ({@link #LOW_POWER_MODE}) will be re-activated after the device
 * is unplugged from a charger or rebooted.
 * @hide
 */
]"
"[LOW_POWER_MODE_STICKY_AUTO_DISABLE_LEVEL = ""low_power_sticky_auto_disable_level""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * When a device is unplugged from a changer (or is rebooted), do not re-activate battery
 * saver even if {@link #LOW_POWER_MODE_STICKY} is 1, if the battery level is equal to or
 * above this threshold.
 *
 * @hide
 */
]"
"[LOW_POWER_MODE_STICKY_AUTO_DISABLE_ENABLED = ""low_power_sticky_auto_disable_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether sticky battery saver should be deactivated once the battery level has reached the
 * threshold specified by {@link #LOW_POWER_MODE_STICKY_AUTO_DISABLE_LEVEL}.
 *
 * @hide
 */
]"
"[LOW_POWER_MODE_TRIGGER_LEVEL = ""low_power_trigger_level""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Battery level [1-100] at which low power mode automatically turns on.
 * If 0, it will not automatically turn on. For Q and newer, it will only automatically
 * turn on if the value is greater than 0 and the {@link #AUTOMATIC_POWER_SAVE_MODE}
 * setting is also set to
 * {@link android.os.PowerManager.AutoPowerSaveMode#POWER_SAVE_MODE_TRIGGER_PERCENTAGE}.
 * @see #AUTOMATIC_POWER_SAVE_MODE
 * @see android.os.PowerManager#getPowerSaveModeTrigger()
 * @hide
 */
]"
"[AUTOMATIC_POWER_SAVE_MODE = ""automatic_power_save_mode""]","[@TestApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether battery saver is currently set to trigger based on percentage, dynamic power
 * savings trigger, or none. See {@link AutoPowerSaveModeTriggers} for
 * accepted values.
 *
 * @hide
 */
]"
"[DYNAMIC_POWER_SAVINGS_DISABLE_THRESHOLD = ""dynamic_power_savings_disable_threshold""]","[@TestApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The setting that backs the disable threshold for the setPowerSavingsWarning api in
 * PowerManager
 *
 * @see android.os.PowerManager#setDynamicPowerSaveHint(boolean, int)
 * @hide
 */
]"
"[DYNAMIC_POWER_SAVINGS_ENABLED = ""dynamic_power_savings_enabled""]","[@TestApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The setting which backs the setDynamicPowerSaveHint api in PowerManager.
 *
 * @see android.os.PowerManager#setDynamicPowerSaveHint(boolean, int)
 * @hide
 */
]"
"[TIME_REMAINING_ESTIMATE_MILLIS = ""time_remaining_estimate_millis""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A long value indicating how much longer the system battery is estimated to last in
 * millis. See {@link #BATTERY_ESTIMATES_LAST_UPDATE_TIME} for the last time this value
 * was updated.
 *
 * @hide
 */
]"
"[TIME_REMAINING_ESTIMATE_BASED_ON_USAGE = ""time_remaining_estimate_based_on_usage""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A boolean indicating whether {@link #TIME_REMAINING_ESTIMATE_MILLIS} is based customized
 * to the devices usage or using global models. See
 * {@link #BATTERY_ESTIMATES_LAST_UPDATE_TIME} for the last time this value was updated.
 *
 * @hide
 */
]"
"[AVERAGE_TIME_TO_DISCHARGE = ""average_time_to_discharge""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A long value indicating how long the system battery takes to deplete from 100% to 0% on
 * average based on historical drain rates. See {@link #BATTERY_ESTIMATES_LAST_UPDATE_TIME}
 * for the last time this value was updated.
 *
 * @hide
 */
]"
"[BATTERY_ESTIMATES_LAST_UPDATE_TIME = ""battery_estimates_last_update_time""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A long indicating the epoch time in milliseconds when
 * {@link #TIME_REMAINING_ESTIMATE_MILLIS}, {@link #TIME_REMAINING_ESTIMATE_BASED_ON_USAGE},
 * and {@link #AVERAGE_TIME_TO_DISCHARGE} were last updated.
 *
 * @hide
 */
]"
"[LOW_POWER_MODE_TRIGGER_LEVEL_MAX = ""low_power_trigger_level_max""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The max value for {@link #LOW_POWER_MODE_TRIGGER_LEVEL}. If this setting is not set
 * or the value is 0, the default max will be used.
 *
 * @hide
 */
]"
"[LOW_POWER_MODE_SUGGESTION_PARAMS = ""low_power_mode_suggestion_params""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * See com.android.settingslib.fuelgauge.BatterySaverUtils.
 * @hide
 */
]"
"[ALWAYS_FINISH_ACTIVITIES = ""always_finish_activities""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If not 0, the activity manager will aggressively finish activities and
 * processes as soon as they are no longer needed.  If 0, the normal
 * extended lifetime is used.
 */
]"
"[HIDE_ERROR_DIALOGS = ""hide_error_dialogs""]","[@TestApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If nonzero, all system error dialogs will be hidden.  For example, the
 * crash and ANR dialogs will not be shown, and the system will just proceed
 * as if they had been accepted by the user.
 * @hide
 */
]"
"[DOCK_AUDIO_MEDIA_ENABLED = ""dock_audio_media_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Use Dock audio output for media:
 * 0 = disabled
 * 1 = enabled
 * @hide
 */
]"
"[ENCODED_SURROUND_OUTPUT_AUTO = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The surround sound formats AC3, DTS or IEC61937 are
 * available for use if they are detected.
 * This is the default mode.
 *
 * Note that AUTO is equivalent to ALWAYS for Android TVs and other
 * devices that have an S/PDIF output. This is because S/PDIF
 * is unidirectional and the TV cannot know if a decoder is
 * connected. So it assumes they are always available.
 * @hide
 */
]"
"[ENCODED_SURROUND_OUTPUT_NEVER = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * AC3, DTS or IEC61937 are NEVER available, even if they
 * are detected by the hardware. Those formats will not be
 * reported.
 *
 * An example use case would be an AVR reports that it is capable of
 * surround sound decoding but is broken. If NEVER is chosen
 * then apps must use PCM output instead of encoded output.
 * @hide
 */
]"
"[ENCODED_SURROUND_OUTPUT_ALWAYS = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * AC3, DTS or IEC61937 are ALWAYS available, even if they
 * are not detected by the hardware. Those formats will be
 * reported as part of the HDMI output capability. Applications
 * are then free to use either PCM or encoded output.
 *
 * An example use case would be a when TV was connected over
 * TOS-link to an AVR. But the TV could not see it because TOS-link
 * is unidirectional.
 * @hide
 */
]"
"[ENCODED_SURROUND_OUTPUT_MANUAL = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Surround sound formats are available according to the choice
 * of user, even if they are not detected by the hardware. Those
 * formats will be reported as part of the HDMI output capability.
 * Applications are then free to use either PCM or encoded output.
 *
 * An example use case would be an AVR that doesn't report a surround
 * format while the user knows the AVR does support it.
 * @hide
 */
]"
"[ENCODED_SURROUND_OUTPUT = ""encoded_surround_output""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Set to ENCODED_SURROUND_OUTPUT_AUTO,
 * ENCODED_SURROUND_OUTPUT_NEVER,
 * ENCODED_SURROUND_OUTPUT_ALWAYS or
 * ENCODED_SURROUND_OUTPUT_MANUAL
 * @hide
 */
]"
"[ENCODED_SURROUND_OUTPUT_ENABLED_FORMATS = ""encoded_surround_output_enabled_formats""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Surround sounds formats that are enabled when ENCODED_SURROUND_OUTPUT is set to
 * ENCODED_SURROUND_OUTPUT_MANUAL. Encoded as comma separated list. Allowed values
 * are the format constants defined in AudioFormat.java. Ex:
 *
 * ""5,6""
 *
 * @hide
 */
]"
"[AUDIO_SAFE_VOLUME_STATE = ""audio_safe_volume_state""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Persisted safe headphone volume management state by AudioService
 * @hide
 */
]"
"[TZINFO_UPDATE_CONTENT_URL = ""tzinfo_content_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for tzinfo (time zone) updates
 * @hide
 */
]"
"[TZINFO_UPDATE_METADATA_URL = ""tzinfo_metadata_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for tzinfo (time zone) update metadata
 * @hide
 */
]"
"[SELINUX_UPDATE_CONTENT_URL = ""selinux_content_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for selinux (mandatory access control) updates
 * @hide
 */
]"
"[SELINUX_UPDATE_METADATA_URL = ""selinux_metadata_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for selinux (mandatory access control) update metadata
 * @hide
 */
]"
"[SMS_SHORT_CODES_UPDATE_CONTENT_URL = ""sms_short_codes_content_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for sms short code updates
 * @hide
 */
]"
"[SMS_SHORT_CODES_UPDATE_METADATA_URL = ""sms_short_codes_metadata_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for sms short code update metadata
 * @hide
 */
]"
"[APN_DB_UPDATE_CONTENT_URL = ""apn_db_content_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for apn_db updates
 * @hide
 */
]"
"[APN_DB_UPDATE_METADATA_URL = ""apn_db_metadata_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for apn_db update metadata
 * @hide
 */
]"
"[CERT_PIN_UPDATE_CONTENT_URL = ""cert_pin_content_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for cert pinlist updates
 * @hide
 */
]"
"[CERT_PIN_UPDATE_METADATA_URL = ""cert_pin_metadata_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for cert pinlist updates
 * @hide
 */
]"
"[INTENT_FIREWALL_UPDATE_CONTENT_URL = ""intent_firewall_content_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for intent firewall updates
 * @hide
 */
]"
"[INTENT_FIREWALL_UPDATE_METADATA_URL = ""intent_firewall_metadata_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for intent firewall update metadata
 * @hide
 */
]"
"[LANG_ID_UPDATE_CONTENT_URL = ""lang_id_content_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for lang id model updates
 * @hide
 */
]"
"[LANG_ID_UPDATE_METADATA_URL = ""lang_id_metadata_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for lang id model update metadata
 * @hide
 */
]"
"[SMART_SELECTION_UPDATE_CONTENT_URL = ""smart_selection_content_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for smart selection model updates
 * @hide
 */
]"
"[SMART_SELECTION_UPDATE_METADATA_URL = ""smart_selection_metadata_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for smart selection model update metadata
 * @hide
 */
]"
"[CONVERSATION_ACTIONS_UPDATE_CONTENT_URL = ""conversation_actions_content_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for conversation actions model updates
 * @hide
 */
]"
"[CONVERSATION_ACTIONS_UPDATE_METADATA_URL = ""conversation_actions_metadata_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for conversation actions model update metadata
 * @hide
 */
]"
"[SELINUX_STATUS = ""selinux_status""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * SELinux enforcement status. If 0, permissive; if 1, enforcing.
 * @hide
 */
]"
"[DEVELOPMENT_FORCE_RTL = ""debug.force_rtl""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Developer setting to force RTL layout.
 * @hide
 */
]"
"[LOW_BATTERY_SOUND_TIMEOUT = ""low_battery_sound_timeout""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Milliseconds after screen-off after which low battery sounds will be silenced.
 *
 * If zero, battery sounds will always play.
 * Defaults to @integer/def_low_battery_sound_timeout in SettingsProvider.
 *
 * @hide
 */
]"
"[WIFI_BOUNCE_DELAY_OVERRIDE_MS = ""wifi_bounce_delay_override_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Milliseconds to wait before bouncing Wi-Fi after settings is restored. Note that after
 * the caller is done with this, they should call {@link ContentResolver#delete} to
 * clean up any value that they may have written.
 *
 * @hide
 */
]"
"[POLICY_CONTROL = ""policy_control""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Defines global runtime overrides to window policy.
 *
 * See {@link com.android.server.wm.PolicyControl} for value format.
 *
 * @hide
 */
]"
"[EMULATE_DISPLAY_CUTOUT = ""emulate_display_cutout""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@link android.view.DisplayCutout DisplayCutout} emulation mode.
 *
 * @hide
 */
]"
"[EMULATE_DISPLAY_CUTOUT_OFF = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[EMULATE_DISPLAY_CUTOUT_ON = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[BLOCKED_SLICES = ""blocked_slices""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A colon separated list of keys for Settings Slices.
 *
 * @hide
 */
]"
"[ZEN_MODE = ""zen_mode""]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Defines global zen mode.  ZEN_MODE_OFF, ZEN_MODE_IMPORTANT_INTERRUPTIONS,
 * or ZEN_MODE_NO_INTERRUPTIONS.
 *
 * @hide
 */
]"
"[ZEN_MODE_OFF = 0]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[ZEN_MODE_IMPORTANT_INTERRUPTIONS = 1]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[ZEN_MODE_NO_INTERRUPTIONS = 2]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[ZEN_MODE_ALARMS = 3]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[ZEN_MODE_RINGER_LEVEL = ""zen_mode_ringer_level""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value of the ringer before entering zen mode.
 *
 * @hide
 */
]"
"[ZEN_MODE_CONFIG_ETAG = ""zen_mode_config_etag""]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Opaque value, changes when persisted zen mode configuration changes.
 *
 * @hide
 */
]"
"[ZEN_DURATION = ""zen_duration""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @deprecated Use {@link android.provider.Settings.Secure#ZEN_DURATION} instead
 * @hide
 */
]"
"[ZEN_DURATION_PROMPT = -1]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @deprecated Use {@link android.provider.Settings.Secure#ZEN_DURATION_PROMPT} instead
 * @hide
 */
]"
"[ZEN_DURATION_FOREVER = 0]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @deprecated Use {@link android.provider.Settings.Secure#ZEN_DURATION_FOREVER} instead
 * @hide
 */
]"
"[HEADS_UP_NOTIFICATIONS_ENABLED = ""heads_up_notifications_enabled""]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Defines global heads up toggle.  One of HEADS_UP_OFF, HEADS_UP_ON.
 *
 * @hide
 */
]"
"[HEADS_UP_OFF = 0]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[HEADS_UP_ON = 1]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[DEVICE_NAME = ""device_name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The name of the device
 */
]"
"[NETWORK_SCORING_PROVISIONED = ""network_scoring_provisioned""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the NetworkScoringService has been first initialized.
 * <p>
 * Type: int (0 for false, 1 for true)
 * @hide
 */
]"
"[REQUIRE_PASSWORD_TO_DECRYPT = ""require_password_to_decrypt""]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Indicates whether the user wants to be prompted for password to decrypt the device on
 * boot. This only matters if the storage is encrypted.
 * <p>
 * Type: int (0 for false, 1 for true)
 *
 * @hide
 */
]"
"[ENHANCED_4G_MODE_ENABLED = Telephony.SimInfo.COLUMN_ENHANCED_4G_MODE_ENABLED]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the Volte is enabled. If this setting is not set then we use the Carrier Config
 * value
 * {@link android.telephony.CarrierConfigManager#KEY_ENHANCED_4G_LTE_ON_BY_DEFAULT_BOOL}.
 * <p>
 * Type: int (0 for false, 1 for true)
 * @hide
 * @deprecated Use
 * {@link android.provider.Telephony.SimInfo#COLUMN_ENHANCED_4G_MODE_ENABLED} instead.
 */
]"
"[VT_IMS_ENABLED = Telephony.SimInfo.COLUMN_VT_IMS_ENABLED]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether VT (Video Telephony over IMS) is enabled
 * <p>
 * Type: int (0 for false, 1 for true)
 *
 * @hide
 * @deprecated Use {@link android.provider.Telephony.SimInfo#COLUMN_VT_IMS_ENABLED} instead.
 */
]"
"[WFC_IMS_ENABLED = Telephony.SimInfo.COLUMN_WFC_IMS_ENABLED]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether WFC is enabled
 * <p>
 * Type: int (0 for false, 1 for true)
 *
 * @hide
 * @deprecated Use
 * {@link android.provider.Telephony.SimInfo#COLUMN_WFC_IMS_ENABLED} instead.
 */
]"
"[WFC_IMS_MODE = Telephony.SimInfo.COLUMN_WFC_IMS_MODE]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * WFC mode on home/non-roaming network.
 * <p>
 * Type: int - 2=Wi-Fi preferred, 1=Cellular preferred, 0=Wi-Fi only
 *
 * @hide
 * @deprecated Use {@link android.provider.Telephony.SimInfo#COLUMN_WFC_IMS_MODE} instead.
 */
]"
"[WFC_IMS_ROAMING_MODE = Telephony.SimInfo.COLUMN_WFC_IMS_ROAMING_MODE]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * WFC mode on roaming network.
 * <p>
 * Type: int - see {@link #WFC_IMS_MODE} for values
 *
 * @hide
 * @deprecated Use {@link android.provider.Telephony.SimInfo#COLUMN_WFC_IMS_ROAMING_MODE}
 * instead.
 */
]"
"[WFC_IMS_ROAMING_ENABLED = Telephony.SimInfo.COLUMN_WFC_IMS_ROAMING_ENABLED]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether WFC roaming is enabled
 * <p>
 * Type: int (0 for false, 1 for true)
 *
 * @hide
 * @deprecated Use {@link android.provider.Telephony.SimInfo#COLUMN_WFC_IMS_ROAMING_ENABLED}
 * instead
 */
]"
"[LTE_SERVICE_FORCED = ""lte_service_forced""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether user can enable/disable LTE as a preferred network. A carrier might control
 * this via gservices, OMA-DM, carrier app, etc.
 * <p>
 * Type: int (0 for false, 1 for true)
 * @hide
 */
]"
"[LID_BEHAVIOR = ""lid_behavior""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Specifies the behaviour the lid triggers when closed
 * <p>
 * See WindowManagerPolicy.WindowManagerFuncs
 * @hide
 */
]"
"[EPHEMERAL_COOKIE_MAX_SIZE_BYTES = ""ephemeral_cookie_max_size_bytes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Ephemeral app cookie max size in bytes.
 * <p>
 * Type: int
 * @hide
 */
]"
"[ENABLE_EPHEMERAL_FEATURE = ""enable_ephemeral_feature""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Toggle to enable/disable the entire ephemeral feature. By default, ephemeral is
 * enabled. Set to zero to disable.
 * <p>
 * Type: int (0 for false, 1 for true)
 *
 * @hide
 */
]"
"[INSTANT_APP_DEXOPT_ENABLED = ""instant_app_dexopt_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Toggle to enable/disable dexopt for instant applications. The default is for dexopt
 * to be disabled.
 * <p>
 * Type: int (0 to disable, 1 to enable)
 *
 * @hide
 */
]"
"[INSTALLED_INSTANT_APP_MIN_CACHE_PERIOD = ""installed_instant_app_min_cache_period""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The min period for caching installed instant apps in milliseconds.
 * <p>
 * Type: long
 * @hide
 */
]"
"[INSTALLED_INSTANT_APP_MAX_CACHE_PERIOD = ""installed_instant_app_max_cache_period""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The max period for caching installed instant apps in milliseconds.
 * <p>
 * Type: long
 * @hide
 */
]"
"[UNINSTALLED_INSTANT_APP_MIN_CACHE_PERIOD = ""uninstalled_instant_app_min_cache_period""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The min period for caching uninstalled instant apps in milliseconds.
 * <p>
 * Type: long
 * @hide
 */
]"
"[UNINSTALLED_INSTANT_APP_MAX_CACHE_PERIOD = ""uninstalled_instant_app_max_cache_period""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The max period for caching uninstalled instant apps in milliseconds.
 * <p>
 * Type: long
 * @hide
 */
]"
"[UNUSED_STATIC_SHARED_LIB_MIN_CACHE_PERIOD = ""unused_static_shared_lib_min_cache_period""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The min period for caching unused static shared libs in milliseconds.
 * <p>
 * Type: long
 * @hide
 */
]"
"[ALLOW_USER_SWITCHING_WHEN_SYSTEM_USER_LOCKED = ""allow_user_switching_when_system_user_locked""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Allows switching users when system user is locked.
 * <p>
 * Type: int
 * @hide
 */
]"
"[BOOT_COUNT = ""boot_count""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Boot count since the device starts running API level 24.
 * <p>
 * Type: int
 */
]"
"[SAFE_BOOT_DISALLOWED = ""safe_boot_disallowed""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the safe boot is disallowed.
 *
 * <p>This setting should have the identical value as the corresponding user restriction.
 * The purpose of the setting is to make the restriction available in early boot stages
 * before the user restrictions are loaded.
 * @hide
 */
]"
"[DEVICE_DEMO_MODE = ""device_demo_mode""]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Indicates whether this device is currently in retail demo mode. If true, the device
 * usage is severely limited.
 * <p>
 * Type: int (0 for false, 1 for true)
 *
 * @hide
 */
]"
"[NETWORK_ACCESS_TIMEOUT_MS = ""network_access_timeout_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Indicates the maximum time that an app is blocked for the network rules to get updated.
 *
 * Type: long
 *
 * @hide
 */
]"
"[DATABASE_DOWNGRADE_REASON = ""database_downgrade_reason""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The reason for the settings database being downgraded. This is only for
 * troubleshooting purposes and its value should not be interpreted in any way.
 *
 * Type: string
 *
 * @hide
 */
]"
"[DATABASE_CREATION_BUILDID = ""database_creation_buildid""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The build id of when the settings database was first created (or re-created due it
 * being missing).
 *
 * Type: string
 *
 * @hide
 */
]"
"[CONTACTS_DATABASE_WAL_ENABLED = ""contacts_database_wal_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Flag to toggle journal mode WAL on or off for the contacts database. WAL is enabled by
 * default. Set to 0 to disable.
 *
 * @hide
 */
]"
"[LOCATION_SETTINGS_LINK_TO_PERMISSIONS_ENABLED = ""location_settings_link_to_permissions_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Flag to enable the link to location permissions in location setting. Set to 0 to disable.
 *
 * @hide
 */
]"
"[EUICC_REMOVING_INVISIBLE_PROFILES_TIMEOUT_MILLIS = ""euicc_removing_invisible_profiles_timeout_millis""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Flag to set the waiting time for removing invisible euicc profiles inside System >
 * Settings.
 * Type: long
 *
 * @hide
 */
]"
"[EUICC_FACTORY_RESET_TIMEOUT_MILLIS = ""euicc_factory_reset_timeout_millis""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Flag to set the waiting time for euicc factory reset inside System > Settings
 * Type: long
 *
 * @hide
 */
]"
"[STORAGE_SETTINGS_CLOBBER_THRESHOLD = ""storage_settings_clobber_threshold""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Flag to set the timeout for when to refresh the storage settings cached data.
 * Type: long
 *
 * @hide
 */
]"
"[LOCATION_GLOBAL_KILL_SWITCH = ""location_global_kill_switch""]","[@TestApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If set to 1, {@link Secure#LOCATION_MODE} will be set to {@link Secure#LOCATION_MODE_OFF}
 * temporarily for all users.
 *
 * @hide
 */
]"
"[OVERRIDE_SETTINGS_PROVIDER_RESTORE_ANY_VERSION = ""override_settings_provider_restore_any_version""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If set to 1, SettingsProvider's restoreAnyVersion=""true"" attribute will be ignored
 * and restoring to lower version of platform API will be skipped.
 *
 * @hide
 */
]"
"[CHAINED_BATTERY_ATTRIBUTION_ENABLED = ""chained_battery_attribution_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Flag to toggle whether system services report attribution chains when they attribute
 * battery use via a {@code WorkSource}.
 *
 * Type: int (0 to disable, 1 to enable)
 *
 * @hide
 */
]"
"[ENABLE_ADB_INCREMENTAL_INSTALL_DEFAULT = ""enable_adb_incremental_install_default""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Toggle to enable/disable the incremental ADB installation by default.
 * If not set, default adb installations are incremental; set to zero to use full ones.
 * Note: only ADB uses it, no usages in the Framework code.
 * <p>
 * Type: int (0 to disable, 1 to enable)
 *
 * @hide
 */
]"
"[AUTOFILL_COMPAT_MODE_ALLOWED_PACKAGES = ""autofill_compat_mode_allowed_packages""]","[@SystemApi, @TestApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The packages whitelisted to be run in autofill compatibility mode. The list
 * of packages is {@code "":""} colon delimited, and each entry has the name of the
 * package and an optional list of url bar resource ids (the list is delimited by
 * brackets&mdash{@code [} and {@code ]}&mdash and is also comma delimited).
 *
 * <p>For example, a list with 3 packages {@code p1}, {@code p2}, and {@code p3}, where
 * package {@code p1} have one id ({@code url_bar}, {@code p2} has none, and {@code p3 }
 * have 2 ids {@code url_foo} and {@code url_bas}) would be
 * {@code p1[url_bar]:p2:p3[url_foo,url_bas]}
 *
 * @hide
 */
]"
"[AUTOFILL_LOGGING_LEVEL = ""autofill_logging_level""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Level of autofill logging.
 *
 * <p>Valid values are
 * {@link android.view.autofill.AutofillManager#NO_LOGGING},
 * {@link android.view.autofill.AutofillManager#FLAG_ADD_CLIENT_DEBUG}, or
 * {@link android.view.autofill.AutofillManager#FLAG_ADD_CLIENT_VERBOSE}.
 *
 * @hide
 */
]"
"[AUTOFILL_MAX_PARTITIONS_SIZE = ""autofill_max_partitions_size""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Maximum number of partitions that can be allowed in an autofill session.
 *
 * @hide
 */
]"
"[AUTOFILL_MAX_VISIBLE_DATASETS = ""autofill_max_visible_datasets""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Maximum number of visible datasets in the Autofill dataset picker UI, or {@code 0} to use
 * the default value from resources.
 *
 * @hide
 */
]"
"[HIDDEN_API_BLACKLIST_EXEMPTIONS = ""hidden_api_blacklist_exemptions""]","[@TestApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Exemptions to the hidden API blacklist.
 *
 * @hide
 */
]"
"[HIDDEN_API_POLICY = ""hidden_api_policy""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Hidden API enforcement policy for apps.
 *
 * Values correspond to @{@link
 * android.content.pm.ApplicationInfo.HiddenApiEnforcementPolicy}
 *
 * @hide
 */
]"
"[SIGNED_CONFIG_VERSION = ""signed_config_version""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Current version of signed configuration applied.
 *
 * @hide
 */
]"
"[SOUND_TRIGGER_DETECTION_SERVICE_OP_TIMEOUT = ""sound_trigger_detection_service_op_timeout""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Timeout for a single {@link android.media.soundtrigger.SoundTriggerDetectionService}
 * operation (in ms).
 *
 * @hide
 */
]"
"[MAX_SOUND_TRIGGER_DETECTION_SERVICE_OPS_PER_DAY = ""max_sound_trigger_detection_service_ops_per_day""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Maximum number of {@link android.media.soundtrigger.SoundTriggerDetectionService}
 * operations per day.
 *
 * @hide
 */
]"
"[ISOLATED_STORAGE_LOCAL = ""isolated_storage_local""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[ISOLATED_STORAGE_REMOTE = ""isolated_storage_remote""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[AWARE_ALLOWED = ""aware_allowed""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Indicates whether aware is available in the current location.
 * @hide
 */
]"
"[POWER_BUTTON_LONG_PRESS = ""power_button_long_press""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Overrides internal R.integer.config_longPressOnPowerBehavior.
 * Allowable values detailed in frameworks/base/core/res/res/values/config.xml.
 * Used by PhoneWindowManager.
 * @hide
 */
]"
"[POWER_BUTTON_VERY_LONG_PRESS = ""power_button_very_long_press""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Overrides internal R.integer.config_veryLongPressOnPowerBehavior.
 * Allowable values detailed in frameworks/base/core/res/res/values/config.xml.
 * Used by PhoneWindowManager.
 * @hide
 */
]"
"[TRANSIENT_SETTINGS = { LOCATION_GLOBAL_KILL_SWITCH }]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Global settings that shouldn't be persisted.
 *
 * @hide
 */
]"
"[LEGACY_RESTORE_SETTINGS = {}]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Keys we no longer back up under the current schema, but want to continue to
 * process when restoring historical backup datasets.
 *
 * All settings in {@link LEGACY_RESTORE_SETTINGS} array *must* have a non-null validator,
 * otherwise they won't be restored.
 *
 * @hide
 */
]"
"[sProviderHolder = new ContentProviderHolder(CONTENT_URI)]","[@UnsupportedAppUsage]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[sNameValueCache = new NameValueCache(CONTENT_URI, CALL_METHOD_GET_GLOBAL, CALL_METHOD_PUT_GLOBAL, sProviderHolder)]","[@UnsupportedAppUsage]","[PRIVATE, STATIC, FINAL]","Optional[// Populated lazily, guarded by class object:
]"
"[MOVED_TO_SECURE]","[@UnsupportedAppUsage]","[PRIVATE, STATIC, FINAL]","Optional[// Certain settings have been moved from global to the per-user secure namespace
]"
"[MULTI_SIM_VOICE_CALL_SUBSCRIPTION = ""multi_sim_voice_call""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Subscription Id to be used for voice call on a multi sim device.
 * @hide
 */
]"
"[MULTI_SIM_VOICE_PROMPT = ""multi_sim_voice_prompt""]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to provide option to user to select subscription during dial.
 * The supported values are 0 = disable or 1 = enable prompt.
 * @hide
 */
]"
"[MULTI_SIM_DATA_CALL_SUBSCRIPTION = ""multi_sim_data_call""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Subscription Id to be used for data call on a multi sim device.
 * @hide
 */
]"
"[MULTI_SIM_SMS_SUBSCRIPTION = ""multi_sim_sms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Subscription Id to be used for SMS on a multi sim device.
 * @hide
 */
]"
"[MULTI_SIM_SMS_PROMPT = ""multi_sim_sms_prompt""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to provide option to user to select subscription during send SMS.
 * The value 1 - enable, 0 - disable
 * @hide
 */
]"
"[MULTI_SIM_USER_PREFERRED_SUBS = { ""user_preferred_sub1"", ""user_preferred_sub2"", ""user_preferred_sub3"" }]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * User preferred subscriptions setting.
 * This holds the details of the user selected subscription from the card and
 * the activation status. Each settings string have the comma separated values
 * iccId,appType,appId,activationStatus,3gppIndex,3gpp2Index
 * @hide
 */
]"
"[ENABLED_SUBSCRIPTION_FOR_SLOT = ""enabled_subscription_for_slot""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Which subscription is enabled for a physical slot.
 * @hide
 */
]"
"[MODEM_STACK_ENABLED_FOR_SLOT = ""modem_stack_enabled_for_slot""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether corresponding logical modem is enabled for a physical slot.
 * The value 1 - enable, 0 - disable
 * @hide
 */
]"
"[NEW_CONTACT_AGGREGATOR = ""new_contact_aggregator""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to enable new contacts aggregator or not.
 * The value 1 - enable, 0 - disable
 * @hide
 */
]"
"[CONTACT_METADATA_SYNC = ""contact_metadata_sync""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to enable contacts metadata syncing or not
 * The value 1 - enable, 0 - disable
 *
 * @removed
 */
]"
"[CONTACT_METADATA_SYNC_ENABLED = ""contact_metadata_sync_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to enable contacts metadata syncing or not
 * The value 1 - enable, 0 - disable
 */
]"
"[ENABLE_CELLULAR_ON_BOOT = ""enable_cellular_on_boot""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to enable cellular on boot.
 * The value 1 - enable, 0 - disable
 * @hide
 */
]"
"[MAX_NOTIFICATION_ENQUEUE_RATE = ""max_notification_enqueue_rate""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The maximum allowed notification enqueue rate in Hertz.
 *
 * Should be a float, and includes updates only.
 * @hide
 */
]"
"[SHOW_NOTIFICATION_CHANNEL_WARNINGS = ""show_notification_channel_warnings""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Displays toasts when an app posts a notification that does not specify a valid channel.
 *
 * The value 1 - enable, 0 - disable
 * @hide
 */
]"
"[CELL_ON = ""cell_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether cell is enabled/disabled
 * @hide
 */
]"
"[INSTANT_APP_SETTINGS = new ArraySet<>()]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Global settings which can be accessed by instant apps.
 * @hide
 */
]"
"[SHOW_TEMPERATURE_WARNING = ""show_temperature_warning""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to show the high temperature warning notification.
 * @hide
 */
]"
"[SHOW_USB_TEMPERATURE_ALARM = ""show_usb_temperature_alarm""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to show the usb high temperature alarm notification.
 * @hide
 */
]"
"[WARNING_TEMPERATURE = ""warning_temperature""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Temperature at which the high temperature warning notification should be shown.
 * @hide
 */
]"
"[ENABLE_DISKSTATS_LOGGING = ""enable_diskstats_logging""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the diskstats logging task is enabled/disabled.
 * @hide
 */
]"
"[ENABLE_CACHE_QUOTA_CALCULATION = ""enable_cache_quota_calculation""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the cache quota calculation task is enabled/disabled.
 * @hide
 */
]"
"[ENABLE_DELETION_HELPER_NO_THRESHOLD_TOGGLE = ""enable_deletion_helper_no_threshold_toggle""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the Deletion Helper no threshold toggle is available.
 * @hide
 */
]"
"[NOTIFICATION_SNOOZE_OPTIONS = ""notification_snooze_options""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The list of snooze options for notifications
 * This is encoded as a key=value list, separated by commas. Ex:
 *
 * ""default=60,options_array=15:30:60:120""
 *
 * The following keys are supported:
 *
 * <pre>
 * default               (int)
 * options_array         (int[])
 * </pre>
 *
 * All delays in integer minutes. Array order is respected.
 * Options will be used in order up to the maximum allowed by the UI.
 * @hide
 */
]"
"[BLOCKING_HELPER_DISMISS_TO_VIEW_RATIO_LIMIT = ""blocking_helper_dismiss_to_view_ratio""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Settings key for the ratio of notification dismissals to notification views - one of the
 * criteria for showing the notification blocking helper.
 *
 * <p>The value is a float ranging from 0.0 to 1.0 (the closer to 0.0, the more intrusive
 * the blocking helper will be).
 *
 * @hide
 */
]"
"[BLOCKING_HELPER_STREAK_LIMIT = ""blocking_helper_streak_limit""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Settings key for the longest streak of dismissals  - one of the criteria for showing the
 * notification blocking helper.
 *
 * <p>The value is an integer greater than 0.
 *
 * @hide
 */
]"
"[SQLITE_COMPATIBILITY_WAL_FLAGS = ""sqlite_compatibility_wal_flags""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Configuration flags for SQLite Compatibility WAL. Encoded as a key-value list, separated
 * by commas. E.g.: compatibility_wal_supported=true, wal_syncmode=OFF
 *
 * Supported keys:<br/>
 * <li>
 * <ul> {@code legacy_compatibility_wal_enabled} : A {code boolean} flag that determines
 * whether or not ""compatibility WAL"" mode is enabled by default. This is a legacy flag
 * and is honoured on Android Q and higher. This flag will be removed in a future release.
 * </ul>
 * <ul> {@code wal_syncmode} : A {@code String} representing the synchronization mode to use
 * when WAL is enabled, either via {@code legacy_compatibility_wal_enabled} or using the
 * obsolete {@code compatibility_wal_supported} flag.
 * </ul>
 * <ul> {@code truncate_size} : A {@code int} flag that specifies the truncate size of the
 * WAL journal.
 * </ul>
 * <ul> {@code compatibility_wal_supported} : A {code boolean} flag that specifies whether
 * the legacy ""compatibility WAL"" mode is enabled by default. This flag is obsolete and is
 * only supported on Android Pie.
 * </ul>
 * </li>
 *
 * @hide
 */
]"
"[ENABLE_GNSS_RAW_MEAS_FULL_TRACKING = ""enable_gnss_raw_meas_full_tracking""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Enable GNSS Raw Measurements Full Tracking?
 * 0 = no
 * 1 = yes
 * @hide
 */
]"
"[INSTALL_CARRIER_APP_NOTIFICATION_PERSISTENT = ""install_carrier_app_notification_persistent""]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the notification should be ongoing (persistent) when a carrier app install is
 * required.
 *
 * The value is a boolean (1 or 0).
 * @hide
 */
]"
"[INSTALL_CARRIER_APP_NOTIFICATION_SLEEP_MILLIS = ""install_carrier_app_notification_sleep_millis""]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The amount of time (ms) to hide the install carrier app notification after the user has
 * ignored it. After this time passes, the notification will be shown again
 *
 * The value is a long
 * @hide
 */
]"
"[ZRAM_ENABLED = ""zram_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether we've enabled zram on this device. Takes effect on
 * reboot. The value ""1"" enables zram; ""0"" disables it, and
 * everything else is unspecified.
 * @hide
 */
]"
"[CACHED_APPS_FREEZER_ENABLED = ""cached_apps_freezer""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the app freezer is enabled on this device.
 * The value of ""enabled"" enables the app freezer, ""disabled"" disables it and
 * ""device_default"" will let the system decide whether to enable the freezer or not
 * @hide
 */
]"
"[SMART_REPLIES_IN_NOTIFICATIONS_FLAGS = ""smart_replies_in_notifications_flags""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Configuration flags for smart replies in notifications.
 * This is encoded as a key=value list, separated by commas. Ex:
 *
 * ""enabled=1,max_squeeze_remeasure_count=3""
 *
 * The following keys are supported:
 *
 * <pre>
 * enabled                           (boolean)
 * requires_targeting_p              (boolean)
 * max_squeeze_remeasure_attempts    (int)
 * edit_choices_before_sending       (boolean)
 * show_in_heads_up                  (boolean)
 * min_num_system_generated_replies  (int)
 * max_num_actions                   (int)
 * </pre>
 * @see com.android.systemui.statusbar.policy.SmartReplyConstants
 * @hide
 */
]"
"[SMART_SUGGESTIONS_IN_NOTIFICATIONS_FLAGS = ""smart_suggestions_in_notifications_flags""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Configuration flags for the automatic generation of smart replies and smart actions in
 * notifications. This is encoded as a key=value list, separated by commas. Ex:
 * ""generate_replies=false,generate_actions=true"".
 *
 * The following keys are supported:
 *
 * <pre>
 * generate_replies                 (boolean)
 * generate_actions                 (boolean)
 * </pre>
 * @hide
 */
]"
"[SHOW_FIRST_CRASH_DIALOG = ""show_first_crash_dialog""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If nonzero, crashes in foreground processes will bring up a dialog.
 * Otherwise, the process will be silently killed.
 * @hide
 */
]"
"[SHOW_RESTART_IN_CRASH_DIALOG = ""show_restart_in_crash_dialog""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If nonzero, crash dialogs will show an option to restart the app.
 * @hide
 */
]"
"[SHOW_MUTE_IN_CRASH_DIALOG = ""show_mute_in_crash_dialog""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If nonzero, crash dialogs will show an option to mute all future crash dialogs for
 * this app.
 * @hide
 */
]"
"[SHOW_ZEN_UPGRADE_NOTIFICATION = ""show_zen_upgrade_notification""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If nonzero, will show the zen upgrade notification when the user toggles DND on/off.
 * @hide
 * @deprecated - Use {@link android.provider.Settings.Secure#SHOW_ZEN_UPGRADE_NOTIFICATION}
 */
]"
"[SHOW_ZEN_SETTINGS_SUGGESTION = ""show_zen_settings_suggestion""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If nonzero, will show the zen update settings suggestion.
 * @hide
 * @deprecated - Use {@link android.provider.Settings.Secure#SHOW_ZEN_SETTINGS_SUGGESTION}
 */
]"
"[ZEN_SETTINGS_UPDATED = ""zen_settings_updated""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If nonzero, zen has not been updated to reflect new changes.
 * @deprecated - Use {@link android.provider.Settings.Secure#ZEN_SETTINGS_UPDATED}
 * @hide
 */
]"
"[ZEN_SETTINGS_SUGGESTION_VIEWED = ""zen_settings_suggestion_viewed""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If nonzero, zen setting suggestion has been viewed by user
 * @hide
 * @deprecated - Use {@link android.provider.Settings.Secure#ZEN_SETTINGS_SUGGESTION_VIEWED}
 */
]"
"[BACKUP_AGENT_TIMEOUT_PARAMETERS = ""backup_agent_timeout_parameters""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Backup and restore agent timeout parameters.
 * These parameters are represented by a comma-delimited key-value list.
 *
 * The following strings are supported as keys:
 * <pre>
 * kv_backup_agent_timeout_millis         (long)
 * full_backup_agent_timeout_millis       (long)
 * shared_backup_agent_timeout_millis     (long)
 * restore_agent_timeout_millis           (long)
 * restore_agent_finished_timeout_millis  (long)
 * </pre>
 *
 * They map to milliseconds represented as longs.
 *
 * Ex: ""kv_backup_agent_timeout_millis=30000,full_backup_agent_timeout_millis=300000""
 *
 * @hide
 */
]"
"[GNSS_SATELLITE_BLACKLIST = ""gnss_satellite_blacklist""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Blacklist of GNSS satellites.
 *
 * This is a list of integers separated by commas to represent pairs of (constellation,
 * svid). Thus, the number of integers should be even.
 *
 * E.g.: ""3,0,5,24"" denotes (constellation=3, svid=0) and (constellation=5, svid=24) are
 * blacklisted. Note that svid=0 denotes all svids in the
 * constellation are blacklisted.
 *
 * @hide
 */
]"
"[GNSS_HAL_LOCATION_REQUEST_DURATION_MILLIS = ""gnss_hal_location_request_duration_millis""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Duration of updates in millisecond for GNSS location request from HAL to framework.
 *
 * If zero, the GNSS location request feature is disabled.
 *
 * The value is a non-negative long.
 *
 * @hide
 */
]"
"[BINDER_CALLS_STATS = ""binder_calls_stats""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Binder call stats settings.
 *
 * The following strings are supported as keys:
 * <pre>
 * enabled              (boolean)
 * detailed_tracking    (boolean)
 * upload_data          (boolean)
 * sampling_interval    (int)
 * </pre>
 *
 * @hide
 */
]"
"[LOOPER_STATS = ""looper_stats""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Looper stats settings.
 *
 * The following strings are supported as keys:
 * <pre>
 * enabled              (boolean)
 * sampling_interval    (int)
 * </pre>
 *
 * @hide
 */
]"
"[KERNEL_CPU_THREAD_READER = ""kernel_cpu_thread_reader""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Settings for collecting statistics on CPU usage per thread
 *
 * The following strings are supported as keys:
 * <pre>
 * num_buckets          (int)
 * collected_uids       (string)
 * minimum_total_cpu_usage_millis (int)
 * </pre>
 *
 * @hide
 */
]"
"[NATIVE_FLAGS_HEALTH_CHECK_ENABLED = ""native_flags_health_check_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether we've enabled native flags health check on this device. Takes effect on
 * reboot. The value ""1"" enables native flags health check; otherwise it's disabled.
 * @hide
 */
]"
"[APPOP_HISTORY_MODE = ""mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Parameter for {@link #APPOP_HISTORY_PARAMETERS} that controls the mode
 * in which the historical registry operates.
 *
 * @hide
 */
]"
"[APPOP_HISTORY_BASE_INTERVAL_MILLIS = ""baseIntervalMillis""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Parameter for {@link #APPOP_HISTORY_PARAMETERS} that controls how long
 * is the interval between snapshots in the base case i.e. the most recent
 * part of the history.
 *
 * @hide
 */
]"
"[APPOP_HISTORY_INTERVAL_MULTIPLIER = ""intervalMultiplier""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Parameter for {@link #APPOP_HISTORY_PARAMETERS} that controls the base
 * for the logarithmic step when building app op history.
 *
 * @hide
 */
]"
"[APPOP_HISTORY_PARAMETERS = ""appop_history_parameters""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Appop history parameters. These parameters are represented by
 * a comma-delimited key-value list.
 *
 * The following strings are supported as keys:
 * <pre>
 * mode                  (int)
 * baseIntervalMillis    (long)
 * intervalMultiplier    (int)
 * </pre>
 *
 * Ex: ""mode=HISTORICAL_MODE_ENABLED_ACTIVE,baseIntervalMillis=1000,intervalMultiplier=10""
 *
 * @see #APPOP_HISTORY_MODE
 * @see #APPOP_HISTORY_BASE_INTERVAL_MILLIS
 * @see #APPOP_HISTORY_INTERVAL_MULTIPLIER
 *
 * @hide
 */
]"
"[AUTO_REVOKE_PARAMETERS = ""auto_revoke_parameters""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Auto revoke parameters. These parameters are represented by
 * a comma-delimited key-value list.
 *
 * <pre>
 * enabledForPreRApps    (bolean)
 * unusedThresholdMs     (long)
 * checkFrequencyMs      (long)
 * </pre>
 *
 * Ex: ""enabledForPreRApps=false,unusedThresholdMs=7776000000,checkFrequencyMs=1296000000""
 *
 * @hide
 */
]"
"[BATTERY_CHARGING_STATE_UPDATE_DELAY = ""battery_charging_state_update_delay""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Delay for sending ACTION_CHARGING after device is plugged in.
 * This is used as an override for constants defined in BatteryStatsImpl for
 * ease of experimentation.
 *
 * @see com.android.internal.os.BatteryStatsImpl.Constants.KEY_BATTERY_CHARGED_DELAY_MS
 * @hide
 */
]"
"[TEXT_CLASSIFIER_ACTION_MODEL_PARAMS = ""text_classifier_action_model_params""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A serialized string of params that will be loaded into a text classifier action model.
 *
 * @hide
 */
]"
"[POWER_BUTTON_SUPPRESSION_DELAY_AFTER_GESTURE_WAKE = ""power_button_suppression_delay_after_gesture_wake""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The amount of time to suppress ""power-off"" from the power button after the device has
 * woken due to a gesture (lifting the phone).  Since users have learned to hit the power
 * button immediately when lifting their device, it can cause the device to turn off if a
 * gesture has just woken the device. This value tells us the milliseconds to wait after
 * a gesture before ""power-off"" via power-button is functional again. A value of 0 is no
 * delay, and reverts to the old behavior.
 *
 * @hide
 */
]"
"[ADVANCED_BATTERY_USAGE_AMOUNT = ""advanced_battery_usage_amount""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The usage amount of advanced battery. The value is 0~100.
 *
 * @hide
 */
]"
"[NR_NSA_TRACKING_SCREEN_OFF_MODE = ""nr_nsa_tracking_screen_off_mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * For 5G NSA capable devices, determines whether NR tracking indications are on
 * when the screen is off.
 *
 * Values are:
 * 0: off - All 5G NSA tracking indications are off when the screen is off.
 * 1: extended - All 5G NSA tracking indications are on when the screen is off as long as
 * the device is camped on 5G NSA (5G icon is showing in status bar).
 * If the device is not camped on 5G NSA, tracking indications are off.
 * 2: always on - All 5G NSA tracking indications are on whether the screen is on or off.
 * @hide
 */
]"
"[sProviderHolder = new ContentProviderHolder(DeviceConfig.CONTENT_URI)]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[sNameValueCache = new NameValueCache(DeviceConfig.CONTENT_URI, CALL_METHOD_GET_CONFIG, CALL_METHOD_PUT_CONFIG, CALL_METHOD_LIST_CONFIG, CALL_METHOD_SET_ALL_CONFIG, sProviderHolder)]","[]","[PRIVATE, STATIC, FINAL]","Optional[// Populated lazily, guarded by class object:
]"
"[TAG = ""Bookmarks""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[CONTENT_URI = Uri.parse(""content://"" + AUTHORITY + ""/bookmarks"")]","[@UnsupportedAppUsage]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URL for this table
 */
]"
"[ID = ""_id""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The row ID.
 * <p>Type: INTEGER</p>
 */
]"
"[TITLE = ""title""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Descriptive name of the bookmark that can be displayed to the user.
 * If this is empty, the title should be resolved at display time (use
 * {@link #getTitle(Context, Cursor)} any time you want to display the
 * title of a bookmark.)
 * <P>
 * Type: TEXT
 * </P>
 */
]"
"[FOLDER = ""folder""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Arbitrary string (displayed to the user) that allows bookmarks to be
 * organized into categories.  There are some special names for
 * standard folders, which all start with '@'.  The label displayed for
 * the folder changes with the locale (via {@link #getLabelForFolder}) but
 * the folder name does not change so you can consistently query for
 * the folder regardless of the current locale.
 *
 * <P>Type: TEXT</P>
 */
]"
"[INTENT = ""intent""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The Intent URL of the bookmark, describing what it points to.  This
 * value is given to {@link android.content.Intent#getIntent} to create
 * an Intent that can be launched.
 * <P>Type: TEXT</P>
 */
]"
"[SHORTCUT = ""shortcut""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Optional shortcut character associated with this bookmark.
 * <P>Type: INTEGER</P>
 */
]"
"[ORDERING = ""ordering""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The order in which the bookmark should be displayed
 * <P>Type: INTEGER</P>
 */
]"
"[sIntentProjection = { INTENT }]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[sShortcutProjection = { ID, SHORTCUT }]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[sShortcutSelection = SHORTCUT + ""=?""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[ACTION_INTERNET_CONNECTIVITY = ""android.settings.panel.action.INTERNET_CONNECTIVITY""]","[@SdkConstant(SdkConstant.SdkConstantType.ACTIVITY_INTENT_ACTION)]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Activity Action: Show a settings dialog containing settings to enable internet
 * connection.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]"
"[ACTION_NFC = ""android.settings.panel.action.NFC""]","[@SdkConstant(SdkConstant.SdkConstantType.ACTIVITY_INTENT_ACTION)]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Activity Action: Show a settings dialog containing NFC-related settings.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]"
"[ACTION_WIFI = ""android.settings.panel.action.WIFI""]","[@SdkConstant(SdkConstant.SdkConstantType.ACTIVITY_INTENT_ACTION)]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Activity Action: Show a settings dialog containing controls for Wifi.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]"
"[ACTION_VOLUME = ""android.settings.panel.action.VOLUME""]","[@SdkConstant(SdkConstant.SdkConstantType.ACTIVITY_INTENT_ACTION)]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Activity Action: Show a settings dialog containing all volume streams.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]"
"[ACTION_WIFI_ADD_NETWORKS = ""android.settings.WIFI_ADD_NETWORKS""]","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Activity Action: Show setting page to process the addition of Wi-Fi networks to the user's
 * saved network list. The app should send a new intent with an extra that holds a maximum
 * of five {@link android.net.wifi.WifiNetworkSuggestion} that specify credentials for the
 * networks to be added to the user's database. The Intent should be sent via the
 * {@link android.app.Activity#startActivityForResult(Intent, int)} API.
 * <p>
 * Note: The app sending the Intent to add the credentials doesn't get any ownership over the
 * newly added network(s). For the Wi-Fi stack, these networks will look like the user
 * manually added them from the Settings UI.
 * <p>
 * Input: The app should put parcelable array list of
 * {@link android.net.wifi.WifiNetworkSuggestion} into the {@link #EXTRA_WIFI_NETWORK_LIST}
 * extra.
 * <p>
 * Output: After {@link android.app.Activity#startActivityForResult(Intent, int)}, the
 * callback {@link android.app.Activity#onActivityResult(int, int, Intent)} will have a
 * result code {@link android.app.Activity#RESULT_OK} to indicate user pressed the save
 * button to save the networks or {@link android.app.Activity#RESULT_CANCELED} to indicate
 * that the user rejected the request. Additionally, an integer array list, stored in
 * {@link #EXTRA_WIFI_NETWORK_RESULT_LIST}, will indicate the process result of each network.
 */
]"
"[EXTRA_WIFI_NETWORK_LIST = ""android.provider.extra.WIFI_NETWORK_LIST""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A bundle extra of {@link #ACTION_WIFI_ADD_NETWORKS} intent action that indicates the list
 * of the {@link android.net.wifi.WifiNetworkSuggestion} elements. The maximum count of the
 * {@link android.net.wifi.WifiNetworkSuggestion} elements in the list will be five.
 * <p>
 * For example:
 * To provide credentials for one open and one WPA2 networks:
 *
 * <pre>{@code
 * final WifiNetworkSuggestion suggestion1 =
 * new WifiNetworkSuggestion.Builder()
 * .setSsid(""test111111"")
 * .build();
 * final WifiNetworkSuggestion suggestion2 =
 * new WifiNetworkSuggestion.Builder()
 * .setSsid(""test222222"")
 * .setWpa2Passphrase(""test123456"")
 * .build();
 * final List<WifiNetworkSuggestion> suggestionsList = new ArrayList<>;
 * suggestionsList.add(suggestion1);
 * suggestionsList.add(suggestion2);
 * Bundle bundle = new Bundle();
 * bundle.putParcelableArrayList(Settings.EXTRA_WIFI_NETWORK_LIST,(ArrayList<? extends
 * Parcelable>) suggestionsList);
 * final Intent intent = new Intent(Settings.ACTION_WIFI_ADD_NETWORKS);
 * intent.putExtras(bundle);
 * startActivityForResult(intent, 0);
 * }</pre>
 */
]"
"[EXTRA_WIFI_NETWORK_RESULT_LIST = ""android.provider.extra.WIFI_NETWORK_RESULT_LIST""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A bundle extra of the result of {@link #ACTION_WIFI_ADD_NETWORKS} intent action that
 * indicates the action result of the saved {@link android.net.wifi.WifiNetworkSuggestion}.
 * Its value is a list of integers, and all the elements will be 1:1 mapping to the elements
 * in {@link #EXTRA_WIFI_NETWORK_LIST}, if user press cancel to cancel the add networks
 * request, then its value will be null.
 * <p>
 * Note: The integer value will be one of the {@link #ADD_WIFI_RESULT_SUCCESS},
 * {@link #ADD_WIFI_RESULT_ADD_OR_UPDATE_FAILED}, or {@link #ADD_WIFI_RESULT_ALREADY_EXISTS}}.
 */
]"
"[ADD_WIFI_RESULT_SUCCESS = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A result of {@link #ACTION_WIFI_ADD_NETWORKS} intent action that saving or updating the
 * corresponding Wi-Fi network was successful.
 */
]"
"[ADD_WIFI_RESULT_ADD_OR_UPDATE_FAILED = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A result of {@link #ACTION_WIFI_ADD_NETWORKS} intent action that saving the corresponding
 * Wi-Fi network failed.
 */
]"
"[ADD_WIFI_RESULT_ALREADY_EXISTS = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A result of {@link #ACTION_WIFI_ADD_NETWORKS} intent action that indicates the Wi-Fi network
 * already exists.
 */
]"
"[ACTION_BUGREPORT_HANDLER_SETTINGS = ""android.settings.BUGREPORT_HANDLER_SETTINGS""]","[@SystemApi, @SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Activity Action: Allows user to select current bug report handler.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 *
 * @hide
 */
]"
"[PM_WRITE_SETTINGS = { android.Manifest.permission.WRITE_SETTINGS }]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[PM_CHANGE_NETWORK_STATE = { android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.WRITE_SETTINGS }]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[PM_SYSTEM_ALERT_WINDOW = { android.Manifest.permission.SYSTEM_ALERT_WINDOW }]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION = ""android.settings.MANAGE_ALL_FILES_ACCESS_PERMISSION""]","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Activity Action: Show screen for controlling which apps have access to manage external
 * storage.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you safeguard against this.
 * <p>
 * If you want to control a specific app's access to manage external storage, use
 * {@link #ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION} instead.
 * <p>
 * Output: Nothing.
 * @see #ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION
 */
]"
"[ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION = ""android.settings.MANAGE_APP_ALL_FILES_ACCESS_PERMISSION""]","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Activity Action: Show screen for controlling if the app specified in the data URI of the
 * intent can manage external storage.
 * <p>
 * Launching the corresponding activity requires the permission
 * {@link Manifest.permission#MANAGE_EXTERNAL_STORAGE}.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you safeguard against this.
 * <p>
 * Input: The Intent's data URI MUST specify the application package name whose ability of
 * managing external storage you want to control.
 * For example ""package:com.my.app"".
 * <p>
 * Output: Nothing.
 * @see #ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION
 */
]"
