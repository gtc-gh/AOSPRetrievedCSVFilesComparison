"Variable","Annotation","Modifier","Comment"
"[CREATOR = new Parcelable.Creator<WebViewProviderInfo>() {

    public WebViewProviderInfo createFromParcel(Parcel in) {
        return new WebViewProviderInfo(in);
    }

    public WebViewProviderInfo[] newArray(int size) {
        return new WebViewProviderInfo[size];
    }
}]","[]","[PUBLIC, STATIC, FINAL]","Optional[// aidl stuff
]"
"[packageName]","[]","[PUBLIC, FINAL]","Optional[// fields read from framework resource
]"
"[description]","[]","[PUBLIC, FINAL]","Optional.empty"
"[availableByDefault]","[]","[PUBLIC, FINAL]","Optional.empty"
"[isFallback]","[]","[PUBLIC, FINAL]","Optional.empty"
"[signatures]","[]","[PUBLIC, FINAL]","Optional.empty"
"[mAutoDismissControls = true]","[]","[PRIVATE]","Optional.empty"
"[mOwnerView]","[]","[PRIVATE, FINAL]","Optional[/**
 * The view that is being zoomed by this zoom controller.
 */
]"
"[mOwnerViewRawLocation = new int[2]]","[]","[PRIVATE, FINAL]","Optional[/**
 * The location of the owner view on the screen. This is recalculated
 * each time the zoom controller is shown.
 */
]"
"[mContainer]","[]","[PRIVATE, FINAL]","Optional[/**
 * The container that is added as a window.
 */
]"
"[mContainerLayoutParams]","[]","[PRIVATE]","Optional.empty"
"[mContainerRawLocation = new int[2]]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mControls]","[]","[PRIVATE]","Optional.empty"
"[mTouchTargetView]","[]","[PRIVATE]","Optional[/**
 * The view (or null) that should receive touch events. This will get set if
 * the touch down hits the container. It will be reset on the touch up.
 */
]"
"[mTouchTargetWindowLocation = new int[2]]","[]","[PRIVATE, FINAL]","Optional[/**
 * The {@link #mTouchTargetView}'s location in window, set on touch down.
 */
]"
"[mReleaseTouchListenerOnUp]","[]","[PRIVATE]","Optional[/**
 * If the zoom controller is dismissed but the user is still in a touch
 * interaction, we set this to true. This will ignore all touch events until
 * up/cancel, and then set the owner's touch listener to null.
 * <p>
 * Otherwise, the owner view would get mismatched events (i.e., touch move
 * even though it never got the touch down.)
 */
]"
"[mIsVisible]","[]","[PRIVATE]","Optional[/**
 * Whether the container has been added to the window manager.
 */
]"
"[mTempRect = new Rect()]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mTempIntArray = new int[2]]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mCallback]","[]","[PRIVATE]","Optional.empty"
"[mPostedVisibleInitializer]","[]","[PRIVATE]","Optional[/**
 * When showing the zoom, we add the view as a new window. However, there is
 * logic that needs to know the size of the zoom which is determined after
 * it's laid out. Therefore, we must post this logic onto the UI thread so
 * it will be exceuted AFTER the layout. This is the logic.
 */
]"
"[mConfigurationChangedFilter = new IntentFilter(Intent.ACTION_CONFIGURATION_CHANGED)]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mConfigurationChangedReceiver = new BroadcastReceiver() {

    @Override
    public void onReceive(Context context, Intent intent) {
        if (!mIsVisible)
            return;
        mHandler.removeMessages(MSG_POST_CONFIGURATION_CHANGED);
        mHandler.sendEmptyMessage(MSG_POST_CONFIGURATION_CHANGED);
    }
}]","[]","[PRIVATE, FINAL]","Optional[/**
 * Needed to reposition the zoom controls after configuration changes.
 */
]"
"[MSG_POST_CONFIGURATION_CHANGED = 2]","[]","[PRIVATE, STATIC, FINAL]","Optional[/**
 * When configuration changes, this is called after the UI thread is idle.
 */
]"
"[MSG_DISMISS_ZOOM_CONTROLS = 3]","[]","[PRIVATE, STATIC, FINAL]","Optional[/**
 * Used to delay the zoom controller dismissal.
 */
]"
"[MSG_POST_SET_VISIBLE = 4]","[]","[PRIVATE, STATIC, FINAL]","Optional[/**
 * If setVisible(true) is called and the owner view's window token is null,
 * we delay the setVisible(true) call until it is not null.
 */
]"
"[mHandler = new Handler() {

    @Override
    public void handleMessage(Message msg) {
        switch(msg.what) {
            case MSG_POST_CONFIGURATION_CHANGED:
                onPostConfigurationChanged();
                break;
            case MSG_DISMISS_ZOOM_CONTROLS:
                setVisible(false);
                break;
            case MSG_POST_SET_VISIBLE:
                if (mOwnerView.getWindowToken() == null) {
                    // Doh, it is still null, just ignore the set visible call
                    Log.e(TAG, ""Cannot make the zoom controller visible if the owner view is "" + ""not attached to a window."");
                } else {
                    setVisible(true);
                }
                break;
        }
    }
}]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mRoaming]","[]","[PRIVATE]","Optional.empty"
"[mBeginTimeStamp]","[]","[PRIVATE]","Optional.empty"
"[mEndTimeStamp]","[]","[PRIVATE]","Optional.empty"
"[mRxBytes]","[]","[PRIVATE]","Optional.empty"
"[mRxPackets]","[]","[PRIVATE]","Optional.empty"
"[mTxBytes]","[]","[PRIVATE]","Optional.empty"
"[mTxPackets]","[]","[PRIVATE]","Optional.empty"
"[DIR_SHIFT = 30]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[TAB_MASK = 0x20000000]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[ELLIPSIS_UNDEFINED = 0x80000000]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[mCallerTargets = new ArrayList<>()]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mShowServiceTargets]","[]","[PRIVATE]","Optional.empty"
"[mLateFee = 1.f]","[]","[PRIVATE]","Optional.empty"
"[mBaseTargetComparator = new BaseChooserTargetComparator()]","[]","[PRIVATE, FINAL]","Optional.empty"
"[DURATION = 400]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[mScale]","[]","[]","Optional.empty"
"[mAdapter]","[]","[]","Optional.empty"
"[mAnimator]","[]","[PRIVATE, FINAL]","Optional.empty"
"[PROPERTY = new FloatProperty<RowScale>(""scale"") {

    @Override
    public void setValue(RowScale object, float value) {
        object.mScale = value;
        object.mAdapter.notifyDataSetChanged();
    }

    @Override
    public Float get(RowScale object) {
        return object.mScale;
    }
}]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[mChooserListAdapter]","[]","[PRIVATE]","Optional.empty"
"[mLayoutInflater]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mColumnCount = 4]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mServiceTargetScale]","[]","[PRIVATE]","Optional.empty"
"[mInterpolator]","[]","[PRIVATE, FINAL]","Optional.empty"
"[cells]","[]","[FINAL]","Optional.empty"
"[row]","[]","[FINAL]","Optional.empty"
"[measuredRowHeight]","[]","[]","Optional.empty"
"[itemIndices]","[]","[]","Optional.empty"
"[mOriginalTarget]","[]","[PRIVATE]","Optional.empty"
"[mConnectedComponent]","[]","[PRIVATE]","Optional.empty"
"[mChooserActivity]","[]","[PRIVATE]","Optional.empty"
"[mLock = new Object()]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mChooserTargetResult = new IChooserTargetResult.Stub() {

    @Override
    public void sendResult(List<ChooserTarget> targets) throws RemoteException {
        synchronized (mLock) {
            if (mChooserActivity == null) {
                Log.e(TAG, ""destroyed ChooserTargetServiceConnection received result from "" + mConnectedComponent + ""; ignoring..."");
                return;
            }
            mChooserActivity.filterServiceTargets(mOriginalTarget.getResolveInfo().activityInfo.packageName, targets);
            final Message msg = Message.obtain();
            msg.what = CHOOSER_TARGET_SERVICE_RESULT;
            msg.obj = new ServiceResultInfo(mOriginalTarget, targets, ChooserTargetServiceConnection.this);
            mChooserActivity.mChooserHandler.sendMessage(msg);
        }
    }
}]","[]","[PRIVATE, FINAL]","Optional.empty"
"[originalTarget]","[]","[PUBLIC, FINAL]","Optional.empty"
"[resultTargets]","[]","[PUBLIC, FINAL]","Optional.empty"
"[connection]","[]","[PUBLIC, FINAL]","Optional.empty"
"[mChooserActivity]","[]","[PRIVATE]","Optional.empty"
"[mSelectedTarget]","[]","[PRIVATE]","Optional.empty"
"[mListView]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mCachedViewType = -1]","[]","[PRIVATE]","Optional.empty"
"[mCachedView]","[]","[PRIVATE]","Optional.empty"
"[CREATOR = new Parcelable.Creator<KeyphraseRecognitionEvent>() {

    public KeyphraseRecognitionEvent createFromParcel(Parcel in) {
        return KeyphraseRecognitionEvent.fromParcelForKeyphrase(in);
    }

    public KeyphraseRecognitionEvent[] newArray(int size) {
        return new KeyphraseRecognitionEvent[size];
    }
}]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[CREATOR = new Parcelable.Creator<GenericRecognitionEvent>() {

    public GenericRecognitionEvent createFromParcel(Parcel in) {
        return GenericRecognitionEvent.fromParcelForGeneric(in);
    }

    public GenericRecognitionEvent[] newArray(int size) {
        return new GenericRecognitionEvent[size];
    }
}]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[SOUNDMODEL_STATUS_UPDATED = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Sound Model was updated
 */
]"
"[status]","[]","[PUBLIC, FINAL]","Optional[/**
 * Status e.g {@link #SOUNDMODEL_STATUS_UPDATED}
 */
]"
"[soundModelHandle]","[]","[PUBLIC, FINAL]","Optional[/**
 * The updated sound model handle
 */
]"
"[data]","[]","[PUBLIC, FINAL]","Optional[/**
 * New sound model data
 */
]"
"[CREATOR = new Parcelable.Creator<SoundModelEvent>() {

    public SoundModelEvent createFromParcel(Parcel in) {
        return SoundModelEvent.fromParcel(in);
    }

    public SoundModelEvent[] newArray(int size) {
        return new SoundModelEvent[size];
    }
}]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[SERVICE_STATE_ENABLED = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Sound trigger service is enabled
 */
]"
"[SERVICE_STATE_DISABLED = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Sound trigger service is disabled
 */
]"
"[mIsSingleChoice]","[]","[PUBLIC]","Optional.empty"
"[mCheckedItem = -1]","[]","[PUBLIC]","Optional.empty"
"[mOnCheckboxClickListener]","[]","[PUBLIC]","Optional.empty"
"[mCursor]","[]","[PUBLIC]","Optional.empty"
"[mLabelColumn]","[]","[PUBLIC]","Optional.empty"
"[mIsCheckedColumn]","[]","[PUBLIC]","Optional.empty"
"[mForceInverseBackground]","[]","[PUBLIC]","Optional.empty"
"[mOnItemSelectedListener]","[]","[PUBLIC]","Optional.empty"
"[mOnPrepareListViewListener]","[]","[PUBLIC]","Optional.empty"
"[mRecycleOnMeasure = true]","[]","[PUBLIC]","Optional.empty"
"[mLabelIndex]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mIsCheckedIndex]","[]","[PRIVATE, FINAL]","Optional.empty"
"[TONEMAP_CURVE_BLUE = new Key<float[]>(""android.tonemap.curveBlue"", float[].class)]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>Tonemapping / contrast / gamma curve for the blue
 * channel, to use when {@link CaptureRequest#TONEMAP_MODE android.tonemap.mode} is
 * CONTRAST_CURVE.</p>
 * <p>See android.tonemap.curveRed for more details.</p>
 * <p><b>Optional</b> - This value may be {@code null} on some devices.</p>
 * <p><b>Full capability</b> -
 * Present on all camera devices that report being {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL HARDWARE_LEVEL_FULL} devices in the
 * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>
 *
 * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL
 * @see CaptureRequest#TONEMAP_MODE
 * @hide
 */
]"
"[TONEMAP_CURVE_GREEN = new Key<float[]>(""android.tonemap.curveGreen"", float[].class)]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>Tonemapping / contrast / gamma curve for the green
 * channel, to use when {@link CaptureRequest#TONEMAP_MODE android.tonemap.mode} is
 * CONTRAST_CURVE.</p>
 * <p>See android.tonemap.curveRed for more details.</p>
 * <p><b>Optional</b> - This value may be {@code null} on some devices.</p>
 * <p><b>Full capability</b> -
 * Present on all camera devices that report being {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL HARDWARE_LEVEL_FULL} devices in the
 * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>
 *
 * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL
 * @see CaptureRequest#TONEMAP_MODE
 * @hide
 */
]"
"[TONEMAP_CURVE_RED = new Key<float[]>(""android.tonemap.curveRed"", float[].class)]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>Tonemapping / contrast / gamma curve for the red
 * channel, to use when {@link CaptureRequest#TONEMAP_MODE android.tonemap.mode} is
 * CONTRAST_CURVE.</p>
 * <p>Each channel's curve is defined by an array of control points:</p>
 * <pre><code>android.tonemap.curveRed =
 * [ P0in, P0out, P1in, P1out, P2in, P2out, P3in, P3out, ..., PNin, PNout ]
 * 2 &lt;= N &lt;= {@link CameraCharacteristics#TONEMAP_MAX_CURVE_POINTS android.tonemap.maxCurvePoints}</code></pre>
 * <p>These are sorted in order of increasing <code>Pin</code>; it is
 * required that input values 0.0 and 1.0 are included in the list to
 * define a complete mapping. For input values between control points,
 * the camera device must linearly interpolate between the control
 * points.</p>
 * <p>Each curve can have an independent number of points, and the number
 * of points can be less than max (that is, the request doesn't have to
 * always provide a curve with number of points equivalent to
 * {@link CameraCharacteristics#TONEMAP_MAX_CURVE_POINTS android.tonemap.maxCurvePoints}).</p>
 * <p>A few examples, and their corresponding graphical mappings; these
 * only specify the red channel and the precision is limited to 4
 * digits, for conciseness.</p>
 * <p>Linear mapping:</p>
 * <pre><code>android.tonemap.curveRed = [ 0, 0, 1.0, 1.0 ]
 * </code></pre>
 * <p><img alt=""Linear mapping curve"" src=""../../../../images/camera2/metadata/android.tonemap.curveRed/linear_tonemap.png"" /></p>
 * <p>Invert mapping:</p>
 * <pre><code>android.tonemap.curveRed = [ 0, 1.0, 1.0, 0 ]
 * </code></pre>
 * <p><img alt=""Inverting mapping curve"" src=""../../../../images/camera2/metadata/android.tonemap.curveRed/inverse_tonemap.png"" /></p>
 * <p>Gamma 1/2.2 mapping, with 16 control points:</p>
 * <pre><code>android.tonemap.curveRed = [
 * 0.0000, 0.0000, 0.0667, 0.2920, 0.1333, 0.4002, 0.2000, 0.4812,
 * 0.2667, 0.5484, 0.3333, 0.6069, 0.4000, 0.6594, 0.4667, 0.7072,
 * 0.5333, 0.7515, 0.6000, 0.7928, 0.6667, 0.8317, 0.7333, 0.8685,
 * 0.8000, 0.9035, 0.8667, 0.9370, 0.9333, 0.9691, 1.0000, 1.0000 ]
 * </code></pre>
 * <p><img alt=""Gamma = 1/2.2 tonemapping curve"" src=""../../../../images/camera2/metadata/android.tonemap.curveRed/gamma_tonemap.png"" /></p>
 * <p>Standard sRGB gamma mapping, per IEC 61966-2-1:1999, with 16 control points:</p>
 * <pre><code>android.tonemap.curveRed = [
 * 0.0000, 0.0000, 0.0667, 0.2864, 0.1333, 0.4007, 0.2000, 0.4845,
 * 0.2667, 0.5532, 0.3333, 0.6125, 0.4000, 0.6652, 0.4667, 0.7130,
 * 0.5333, 0.7569, 0.6000, 0.7977, 0.6667, 0.8360, 0.7333, 0.8721,
 * 0.8000, 0.9063, 0.8667, 0.9389, 0.9333, 0.9701, 1.0000, 1.0000 ]
 * </code></pre>
 * <p><img alt=""sRGB tonemapping curve"" src=""../../../../images/camera2/metadata/android.tonemap.curveRed/srgb_tonemap.png"" /></p>
 * <p><b>Range of valid values:</b><br>
 * 0-1 on both input and output coordinates, normalized
 * as a floating-point value such that 0 == black and 1 == white.</p>
 * <p><b>Optional</b> - This value may be {@code null} on some devices.</p>
 * <p><b>Full capability</b> -
 * Present on all camera devices that report being {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL HARDWARE_LEVEL_FULL} devices in the
 * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>
 *
 * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL
 * @see CameraCharacteristics#TONEMAP_MAX_CURVE_POINTS
 * @see CaptureRequest#TONEMAP_MODE
 * @hide
 */
]"
"[TONEMAP_CURVE = new Key<android.hardware.camera2.params.TonemapCurve>(""android.tonemap.curve"", android.hardware.camera2.params.TonemapCurve.class)]","[@PublicKey, @SyntheticKey]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>Tonemapping / contrast / gamma curve to use when {@link CaptureRequest#TONEMAP_MODE android.tonemap.mode}
 * is CONTRAST_CURVE.</p>
 * <p>The tonemapCurve consist of three curves for each of red, green, and blue
 * channels respectively. The following example uses the red channel as an
 * example. The same logic applies to green and blue channel.
 * Each channel's curve is defined by an array of control points:</p>
 * <pre><code>curveRed =
 * [ P0(in, out), P1(in, out), P2(in, out), P3(in, out), ..., PN(in, out) ]
 * 2 &lt;= N &lt;= {@link CameraCharacteristics#TONEMAP_MAX_CURVE_POINTS android.tonemap.maxCurvePoints}</code></pre>
 * <p>These are sorted in order of increasing <code>Pin</code>; it is always
 * guaranteed that input values 0.0 and 1.0 are included in the list to
 * define a complete mapping. For input values between control points,
 * the camera device must linearly interpolate between the control
 * points.</p>
 * <p>Each curve can have an independent number of points, and the number
 * of points can be less than max (that is, the request doesn't have to
 * always provide a curve with number of points equivalent to
 * {@link CameraCharacteristics#TONEMAP_MAX_CURVE_POINTS android.tonemap.maxCurvePoints}).</p>
 * <p>A few examples, and their corresponding graphical mappings; these
 * only specify the red channel and the precision is limited to 4
 * digits, for conciseness.</p>
 * <p>Linear mapping:</p>
 * <pre><code>curveRed = [ (0, 0), (1.0, 1.0) ]
 * </code></pre>
 * <p><img alt=""Linear mapping curve"" src=""../../../../images/camera2/metadata/android.tonemap.curveRed/linear_tonemap.png"" /></p>
 * <p>Invert mapping:</p>
 * <pre><code>curveRed = [ (0, 1.0), (1.0, 0) ]
 * </code></pre>
 * <p><img alt=""Inverting mapping curve"" src=""../../../../images/camera2/metadata/android.tonemap.curveRed/inverse_tonemap.png"" /></p>
 * <p>Gamma 1/2.2 mapping, with 16 control points:</p>
 * <pre><code>curveRed = [
 * (0.0000, 0.0000), (0.0667, 0.2920), (0.1333, 0.4002), (0.2000, 0.4812),
 * (0.2667, 0.5484), (0.3333, 0.6069), (0.4000, 0.6594), (0.4667, 0.7072),
 * (0.5333, 0.7515), (0.6000, 0.7928), (0.6667, 0.8317), (0.7333, 0.8685),
 * (0.8000, 0.9035), (0.8667, 0.9370), (0.9333, 0.9691), (1.0000, 1.0000) ]
 * </code></pre>
 * <p><img alt=""Gamma = 1/2.2 tonemapping curve"" src=""../../../../images/camera2/metadata/android.tonemap.curveRed/gamma_tonemap.png"" /></p>
 * <p>Standard sRGB gamma mapping, per IEC 61966-2-1:1999, with 16 control points:</p>
 * <pre><code>curveRed = [
 * (0.0000, 0.0000), (0.0667, 0.2864), (0.1333, 0.4007), (0.2000, 0.4845),
 * (0.2667, 0.5532), (0.3333, 0.6125), (0.4000, 0.6652), (0.4667, 0.7130),
 * (0.5333, 0.7569), (0.6000, 0.7977), (0.6667, 0.8360), (0.7333, 0.8721),
 * (0.8000, 0.9063), (0.8667, 0.9389), (0.9333, 0.9701), (1.0000, 1.0000) ]
 * </code></pre>
 * <p><img alt=""sRGB tonemapping curve"" src=""../../../../images/camera2/metadata/android.tonemap.curveRed/srgb_tonemap.png"" /></p>
 * <p><b>Optional</b> - This value may be {@code null} on some devices.</p>
 * <p><b>Full capability</b> -
 * Present on all camera devices that report being {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL HARDWARE_LEVEL_FULL} devices in the
 * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>
 *
 * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL
 * @see CameraCharacteristics#TONEMAP_MAX_CURVE_POINTS
 * @see CaptureRequest#TONEMAP_MODE
 */
]"
"[TONEMAP_MODE = new Key<Integer>(""android.tonemap.mode"", int.class)]","[@PublicKey]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>High-level global contrast/gamma/tonemapping control.</p>
 * <p>When switching to an application-defined contrast curve by setting
 * {@link CaptureRequest#TONEMAP_MODE android.tonemap.mode} to CONTRAST_CURVE, the curve is defined
 * per-channel with a set of <code>(in, out)</code> points that specify the
 * mapping from input high-bit-depth pixel value to the output
 * low-bit-depth value.  Since the actual pixel ranges of both input
 * and output may change depending on the camera pipeline, the values
 * are specified by normalized floating-point numbers.</p>
 * <p>More-complex color mapping operations such as 3D color look-up
 * tables, selective chroma enhancement, or other non-linear color
 * transforms will be disabled when {@link CaptureRequest#TONEMAP_MODE android.tonemap.mode} is
 * CONTRAST_CURVE.</p>
 * <p>When using either FAST or HIGH_QUALITY, the camera device will
 * emit its own tonemap curve in {@link CaptureRequest#TONEMAP_CURVE android.tonemap.curve}.
 * These values are always available, and as close as possible to the
 * actually used nonlinear/nonglobal transforms.</p>
 * <p>If a request is sent with CONTRAST_CURVE with the camera device's
 * provided curve in FAST or HIGH_QUALITY, the image's tonemap will be
 * roughly the same.</p>
 * <p><b>Possible values:</b>
 * <ul>
 * <li>{@link #TONEMAP_MODE_CONTRAST_CURVE CONTRAST_CURVE}</li>
 * <li>{@link #TONEMAP_MODE_FAST FAST}</li>
 * <li>{@link #TONEMAP_MODE_HIGH_QUALITY HIGH_QUALITY}</li>
 * <li>{@link #TONEMAP_MODE_GAMMA_VALUE GAMMA_VALUE}</li>
 * <li>{@link #TONEMAP_MODE_PRESET_CURVE PRESET_CURVE}</li>
 * </ul></p>
 * <p><b>Available values for this device:</b><br>
 * {@link CameraCharacteristics#TONEMAP_AVAILABLE_TONE_MAP_MODES android.tonemap.availableToneMapModes}</p>
 * <p><b>Optional</b> - This value may be {@code null} on some devices.</p>
 * <p><b>Full capability</b> -
 * Present on all camera devices that report being {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL HARDWARE_LEVEL_FULL} devices in the
 * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>
 *
 * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL
 * @see CameraCharacteristics#TONEMAP_AVAILABLE_TONE_MAP_MODES
 * @see CaptureRequest#TONEMAP_CURVE
 * @see CaptureRequest#TONEMAP_MODE
 * @see #TONEMAP_MODE_CONTRAST_CURVE
 * @see #TONEMAP_MODE_FAST
 * @see #TONEMAP_MODE_HIGH_QUALITY
 * @see #TONEMAP_MODE_GAMMA_VALUE
 * @see #TONEMAP_MODE_PRESET_CURVE
 */
]"
"[TONEMAP_GAMMA = new Key<Float>(""android.tonemap.gamma"", float.class)]","[@PublicKey]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>Tonemapping curve to use when {@link CaptureRequest#TONEMAP_MODE android.tonemap.mode} is
 * GAMMA_VALUE</p>
 * <p>The tonemap curve will be defined the following formula:
 * * OUT = pow(IN, 1.0 / gamma)
 * where IN and OUT is the input pixel value scaled to range [0.0, 1.0],
 * pow is the power function and gamma is the gamma value specified by this
 * key.</p>
 * <p>The same curve will be applied to all color channels. The camera device
 * may clip the input gamma value to its supported range. The actual applied
 * value will be returned in capture result.</p>
 * <p>The valid range of gamma value varies on different devices, but values
 * within [1.0, 5.0] are guaranteed not to be clipped.</p>
 * <p><b>Optional</b> - This value may be {@code null} on some devices.</p>
 *
 * @see CaptureRequest#TONEMAP_MODE
 */
]"
"[TONEMAP_PRESET_CURVE = new Key<Integer>(""android.tonemap.presetCurve"", int.class)]","[@PublicKey]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>Tonemapping curve to use when {@link CaptureRequest#TONEMAP_MODE android.tonemap.mode} is
 * PRESET_CURVE</p>
 * <p>The tonemap curve will be defined by specified standard.</p>
 * <p>sRGB (approximated by 16 control points):</p>
 * <p><img alt=""sRGB tonemapping curve"" src=""../../../../images/camera2/metadata/android.tonemap.curveRed/srgb_tonemap.png"" /></p>
 * <p>Rec. 709 (approximated by 16 control points):</p>
 * <p><img alt=""Rec. 709 tonemapping curve"" src=""../../../../images/camera2/metadata/android.tonemap.curveRed/rec709_tonemap.png"" /></p>
 * <p>Note that above figures show a 16 control points approximation of preset
 * curves. Camera devices may apply a different approximation to the curve.</p>
 * <p><b>Possible values:</b>
 * <ul>
 * <li>{@link #TONEMAP_PRESET_CURVE_SRGB SRGB}</li>
 * <li>{@link #TONEMAP_PRESET_CURVE_REC709 REC709}</li>
 * </ul></p>
 * <p><b>Optional</b> - This value may be {@code null} on some devices.</p>
 *
 * @see CaptureRequest#TONEMAP_MODE
 * @see #TONEMAP_PRESET_CURVE_SRGB
 * @see #TONEMAP_PRESET_CURVE_REC709
 */
]"
"[LED_TRANSMIT = new Key<Boolean>(""android.led.transmit"", boolean.class)]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>This LED is nominally used to indicate to the user
 * that the camera is powered on and may be streaming images back to the
 * Application Processor. In certain rare circumstances, the OS may
 * disable this when video is processed locally and not transmitted to
 * any untrusted applications.</p>
 * <p>In particular, the LED <em>must</em> always be on when the data could be
 * transmitted off the device. The LED <em>should</em> always be on whenever
 * data is stored locally on the device.</p>
 * <p>The LED <em>may</em> be off if a trusted application is using the data that
 * doesn't violate the above rules.</p>
 * <p><b>Optional</b> - This value may be {@code null} on some devices.</p>
 * @hide
 */
]"
"[BLACK_LEVEL_LOCK = new Key<Boolean>(""android.blackLevel.lock"", boolean.class)]","[@PublicKey]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>Whether black-level compensation is locked
 * to its current values, or is free to vary.</p>
 * <p>Whether the black level offset was locked for this frame.  Should be
 * ON if {@link CaptureRequest#BLACK_LEVEL_LOCK android.blackLevel.lock} was ON in the capture request, unless
 * a change in other capture settings forced the camera device to
 * perform a black level reset.</p>
 * <p><b>Optional</b> - This value may be {@code null} on some devices.</p>
 * <p><b>Full capability</b> -
 * Present on all camera devices that report being {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_FULL HARDWARE_LEVEL_FULL} devices in the
 * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>
 *
 * @see CaptureRequest#BLACK_LEVEL_LOCK
 * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL
 */
]"
"[SYNC_FRAME_NUMBER = new Key<Long>(""android.sync.frameNumber"", long.class)]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>The frame number corresponding to the last request
 * with which the output result (metadata + buffers) has been fully
 * synchronized.</p>
 * <p>When a request is submitted to the camera device, there is usually a
 * delay of several frames before the controls get applied. A camera
 * device may either choose to account for this delay by implementing a
 * pipeline and carefully submit well-timed atomic control updates, or
 * it may start streaming control changes that span over several frame
 * boundaries.</p>
 * <p>In the latter case, whenever a request's settings change relative to
 * the previous submitted request, the full set of changes may take
 * multiple frame durations to fully take effect. Some settings may
 * take effect sooner (in less frame durations) than others.</p>
 * <p>While a set of control changes are being propagated, this value
 * will be CONVERGING.</p>
 * <p>Once it is fully known that a set of control changes have been
 * finished propagating, and the resulting updated control settings
 * have been read back by the camera device, this value will be set
 * to a non-negative frame number (corresponding to the request to
 * which the results have synchronized to).</p>
 * <p>Older camera device implementations may not have a way to detect
 * when all camera controls have been applied, and will always set this
 * value to UNKNOWN.</p>
 * <p>FULL capability devices will always have this value set to the
 * frame number of the request corresponding to this result.</p>
 * <p><em>Further details</em>:</p>
 * <ul>
 * <li>Whenever a request differs from the last request, any future
 * results not yet returned may have this value set to CONVERGING (this
 * could include any in-progress captures not yet returned by the camera
 * device, for more details see pipeline considerations below).</li>
 * <li>Submitting a series of multiple requests that differ from the
 * previous request (e.g. r1, r2, r3 s.t. r1 != r2 != r3)
 * moves the new synchronization frame to the last non-repeating
 * request (using the smallest frame number from the contiguous list of
 * repeating requests).</li>
 * <li>Submitting the same request repeatedly will not change this value
 * to CONVERGING, if it was already a non-negative value.</li>
 * <li>When this value changes to non-negative, that means that all of the
 * metadata controls from the request have been applied, all of the
 * metadata controls from the camera device have been read to the
 * updated values (into the result), and all of the graphics buffers
 * corresponding to this result are also synchronized to the request.</li>
 * </ul>
 * <p><em>Pipeline considerations</em>:</p>
 * <p>Submitting a request with updated controls relative to the previously
 * submitted requests may also invalidate the synchronization state
 * of all the results corresponding to currently in-flight requests.</p>
 * <p>In other words, results for this current request and up to
 * {@link CameraCharacteristics#REQUEST_PIPELINE_MAX_DEPTH android.request.pipelineMaxDepth} prior requests may have their
 * android.sync.frameNumber change to CONVERGING.</p>
 * <p><b>Possible values:</b>
 * <ul>
 * <li>{@link #SYNC_FRAME_NUMBER_CONVERGING CONVERGING}</li>
 * <li>{@link #SYNC_FRAME_NUMBER_UNKNOWN UNKNOWN}</li>
 * </ul></p>
 * <p><b>Available values for this device:</b><br>
 * Either a non-negative value corresponding to a
 * <code>frame_number</code>, or one of the two enums (CONVERGING / UNKNOWN).</p>
 * <p>This key is available on all devices.</p>
 *
 * @see CameraCharacteristics#REQUEST_PIPELINE_MAX_DEPTH
 * @see #SYNC_FRAME_NUMBER_CONVERGING
 * @see #SYNC_FRAME_NUMBER_UNKNOWN
 * @hide
 */
]"
"[REPROCESS_EFFECTIVE_EXPOSURE_FACTOR = new Key<Float>(""android.reprocess.effectiveExposureFactor"", float.class)]","[@PublicKey]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>The amount of exposure time increase factor applied to the original output
 * frame by the application processing before sending for reprocessing.</p>
 * <p>This is optional, and will be supported if the camera device supports YUV_REPROCESSING
 * capability ({@link CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES android.request.availableCapabilities} contains YUV_REPROCESSING).</p>
 * <p>For some YUV reprocessing use cases, the application may choose to filter the original
 * output frames to effectively reduce the noise to the same level as a frame that was
 * captured with longer exposure time. To be more specific, assuming the original captured
 * images were captured with a sensitivity of S and an exposure time of T, the model in
 * the camera device is that the amount of noise in the image would be approximately what
 * would be expected if the original capture parameters had been a sensitivity of
 * S/effectiveExposureFactor and an exposure time of T*effectiveExposureFactor, rather
 * than S and T respectively. If the captured images were processed by the application
 * before being sent for reprocessing, then the application may have used image processing
 * algorithms and/or multi-frame image fusion to reduce the noise in the
 * application-processed images (input images). By using the effectiveExposureFactor
 * control, the application can communicate to the camera device the actual noise level
 * improvement in the application-processed image. With this information, the camera
 * device can select appropriate noise reduction and edge enhancement parameters to avoid
 * excessive noise reduction ({@link CaptureRequest#NOISE_REDUCTION_MODE android.noiseReduction.mode}) and insufficient edge
 * enhancement ({@link CaptureRequest#EDGE_MODE android.edge.mode}) being applied to the reprocessed frames.</p>
 * <p>For example, for multi-frame image fusion use case, the application may fuse
 * multiple output frames together to a final frame for reprocessing. When N image are
 * fused into 1 image for reprocessing, the exposure time increase factor could be up to
 * square root of N (based on a simple photon shot noise model). The camera device will
 * adjust the reprocessing noise reduction and edge enhancement parameters accordingly to
 * produce the best quality images.</p>
 * <p>This is relative factor, 1.0 indicates the application hasn't processed the input
 * buffer in a way that affects its effective exposure time.</p>
 * <p>This control is only effective for YUV reprocessing capture request. For noise
 * reduction reprocessing, it is only effective when <code>{@link CaptureRequest#NOISE_REDUCTION_MODE android.noiseReduction.mode} != OFF</code>.
 * Similarly, for edge enhancement reprocessing, it is only effective when
 * <code>{@link CaptureRequest#EDGE_MODE android.edge.mode} != OFF</code>.</p>
 * <p><b>Units</b>: Relative exposure time increase factor.</p>
 * <p><b>Range of valid values:</b><br>
 * &gt;= 1.0</p>
 * <p><b>Optional</b> - This value may be {@code null} on some devices.</p>
 * <p><b>Limited capability</b> -
 * Present on all camera devices that report being at least {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED HARDWARE_LEVEL_LIMITED} devices in the
 * {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL android.info.supportedHardwareLevel} key</p>
 *
 * @see CaptureRequest#EDGE_MODE
 * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL
 * @see CaptureRequest#NOISE_REDUCTION_MODE
 * @see CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES
 */
]"
"[KM_ERROR_INVALID_AUTHORIZATION_TIMEOUT = -16]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_UNSUPPORTED_KEY_FORMAT = -17]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_INCOMPATIBLE_KEY_FORMAT = -18]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_UNSUPPORTED_KEY_ENCRYPTION_ALGORITHM = -19]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_UNSUPPORTED_KEY_VERIFICATION_ALGORITHM = -20]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_INVALID_INPUT_LENGTH = -21]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_KEY_EXPORT_OPTIONS_INVALID = -22]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_DELEGATION_NOT_ALLOWED = -23]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_KEY_NOT_YET_VALID = -24]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_KEY_EXPIRED = -25]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_KEY_USER_NOT_AUTHENTICATED = -26]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_OUTPUT_PARAMETER_NULL = -27]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_INVALID_OPERATION_HANDLE = -28]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_INSUFFICIENT_BUFFER_SPACE = -29]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_VERIFICATION_FAILED = -30]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_TOO_MANY_OPERATIONS = -31]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_UNEXPECTED_NULL_POINTER = -32]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_INVALID_KEY_BLOB = -33]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_IMPORTED_KEY_NOT_ENCRYPTED = -34]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_IMPORTED_KEY_DECRYPTION_FAILED = -35]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_IMPORTED_KEY_NOT_SIGNED = -36]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_IMPORTED_KEY_VERIFICATION_FAILED = -37]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_INVALID_ARGUMENT = -38]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_UNSUPPORTED_TAG = -39]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_INVALID_TAG = -40]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_MEMORY_ALLOCATION_FAILED = -41]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_INVALID_RESCOPING = -42]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_IMPORT_PARAMETER_MISMATCH = -44]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_SECURE_HW_ACCESS_DENIED = -45]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_OPERATION_CANCELLED = -46]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_CONCURRENT_ACCESS_CONFLICT = -47]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_SECURE_HW_BUSY = -48]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_SECURE_HW_COMMUNICATION_FAILED = -49]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_UNSUPPORTED_EC_FIELD = -50]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_MISSING_NONCE = -51]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_INVALID_NONCE = -52]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_MISSING_MAC_LENGTH = -53]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_KEY_RATE_LIMIT_EXCEEDED = -54]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_CALLER_NONCE_PROHIBITED = -55]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_KEY_MAX_OPS_EXCEEDED = -56]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_INVALID_MAC_LENGTH = -57]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_MISSING_MIN_MAC_LENGTH = -58]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_UNSUPPORTED_MIN_MAC_LENGTH = -59]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_UNIMPLEMENTED = -100]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_VERSION_MISMATCH = -101]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[KM_ERROR_UNKNOWN_ERROR = -1000]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[sErrorCodeToString = new HashMap<Integer, String>()]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[mFlashlightOnTimer]","[]","[]","Optional.empty"
"[mCameraOnNesting]","[]","[]","Optional.empty"
"[mCameraOnTimer]","[]","[]","Optional.empty"
"[mPhoneSignalStrengthBin = -1]","[]","[]","Optional.empty"
"[mPhoneSignalStrengthBinRaw = -1]","[]","[]","Optional.empty"
"[mPhoneSignalStrengthsTimer = new StopwatchTimer[SignalStrength.NUM_SIGNAL_STRENGTH_BINS]]","[]","[FINAL]","Optional.empty"
"[mPhoneSignalScanningTimer]","[]","[]","Optional.empty"
"[mPhoneDataConnectionType = -1]","[]","[]","Optional.empty"
"[mPhoneDataConnectionsTimer = new StopwatchTimer[NUM_DATA_CONNECTION_TYPES]]","[]","[FINAL]","Optional.empty"
"[mNetworkByteActivityCounters = new LongSamplingCounter[NUM_NETWORK_ACTIVITY_TYPES]]","[]","[FINAL]","Optional.empty"
"[mNetworkPacketActivityCounters = new LongSamplingCounter[NUM_NETWORK_ACTIVITY_TYPES]]","[]","[FINAL]","Optional.empty"
"[mWifiActivity]","[]","[]","Optional[/**
 * The WiFi controller activity (time in tx, rx, idle, and power consumed) for the device.
 */
]"
"[mBluetoothActivity]","[]","[]","Optional[/**
 * The Bluetooth controller activity (time in tx, rx, idle, and power consumed) for the device.
 */
]"
"[mModemActivity]","[]","[]","Optional[/**
 * The Modem controller activity (time in tx, rx, idle, and power consumed) for the device.
 */
]"
"[mHasWifiReporting = false]","[]","[]","Optional[/**
 * Whether the device supports WiFi controller energy reporting. This is set to true on
 * the first WiFi energy report. See {@link #mWifiActivity}.
 */
]"
"[mHasBluetoothReporting = false]","[]","[]","Optional[/**
 * Whether the device supports Bluetooth controller energy reporting. This is set to true on
 * the first Bluetooth energy report. See {@link #mBluetoothActivity}.
 */
]"
"[mHasModemReporting = false]","[]","[]","Optional[/**
 * Whether the device supports Modem controller energy reporting. This is set to true on
 * the first Modem energy report. See {@link #mModemActivity}.
 */
]"
"[mWifiOn]","[]","[]","Optional.empty"
"[mWifiOnTimer]","[]","[]","Optional.empty"
"[mGlobalWifiRunning]","[]","[]","Optional.empty"
"[mGlobalWifiRunningTimer]","[]","[]","Optional.empty"
"[mWifiState = -1]","[]","[]","Optional.empty"
"[mWifiStateTimer = new StopwatchTimer[NUM_WIFI_STATES]]","[]","[FINAL]","Optional.empty"
"[mWifiSupplState = -1]","[]","[]","Optional.empty"
"[mWifiSupplStateTimer = new StopwatchTimer[NUM_WIFI_SUPPL_STATES]]","[]","[FINAL]","Optional.empty"
"[mWifiSignalStrengthBin = -1]","[]","[]","Optional.empty"
"[mWifiSignalStrengthsTimer = new StopwatchTimer[NUM_WIFI_SIGNAL_STRENGTH_BINS]]","[]","[FINAL]","Optional.empty"
"[mBluetoothScanNesting]","[]","[]","Optional.empty"
"[mBluetoothScanTimer]","[]","[]","Optional.empty"
"[mMobileRadioPowerState = DataConnectionRealTimeInfo.DC_POWER_STATE_LOW]","[]","[]","Optional.empty"
"[mMobileRadioActiveStartTime]","[]","[]","Optional.empty"
"[mMobileRadioActiveTimer]","[]","[]","Optional.empty"
"[mMobileRadioActivePerAppTimer]","[]","[]","Optional.empty"
"[mMobileRadioActiveAdjustedTime]","[]","[]","Optional.empty"
"[mMobileRadioActiveUnknownTime]","[]","[]","Optional.empty"
"[mMobileRadioActiveUnknownCount]","[]","[]","Optional.empty"
"[mWifiRadioPowerState = DataConnectionRealTimeInfo.DC_POWER_STATE_LOW]","[]","[]","Optional.empty"
"[mOnBattery]","[]","[]","Optional[/**
 * These provide time bases that discount the time the device is plugged
 * in to power.
 */
]"
"[mOnBatteryInternal]","[]","[]","Optional.empty"
"[mCharging = true]","[]","[]","Optional[/**
 * External reporting of whether the device is actually charging.
 */
]"
"[mLastChargingStateLevel]","[]","[]","Optional.empty"
"[mDischargeStartLevel]","[]","[]","Optional[/*
     * These keep track of battery levels (1-100) at the last plug event and the last unplug event.
     */
]"
"[mDischargeUnplugLevel]","[]","[]","Optional.empty"
"[mDischargePlugLevel]","[]","[]","Optional.empty"
"[mDischargeCurrentLevel]","[]","[]","Optional.empty"
"[mCurrentBatteryLevel]","[]","[]","Optional.empty"
"[mLowDischargeAmountSinceCharge]","[]","[]","Optional.empty"
"[mHighDischargeAmountSinceCharge]","[]","[]","Optional.empty"
"[mDischargeScreenOnUnplugLevel]","[]","[]","Optional.empty"
"[mDischargeScreenOffUnplugLevel]","[]","[]","Optional.empty"
"[mDischargeAmountScreenOn]","[]","[]","Optional.empty"
"[mDischargeAmountScreenOnSinceCharge]","[]","[]","Optional.empty"
"[mDischargeAmountScreenOff]","[]","[]","Optional.empty"
"[mDischargeAmountScreenOffSinceCharge]","[]","[]","Optional.empty"
"[mDischargeScreenOffCounter]","[]","[PRIVATE]","Optional.empty"
"[mDischargeCounter]","[]","[PRIVATE]","Optional.empty"
"[MAX_LEVEL_STEPS = 200]","[]","[STATIC, FINAL]","Optional.empty"
"[mInitStepMode = 0]","[]","[]","Optional.empty"
"[mCurStepMode = 0]","[]","[]","Optional.empty"
"[mModStepMode = 0]","[]","[]","Optional.empty"
"[mLastDischargeStepLevel]","[]","[]","Optional.empty"
"[mMinDischargeStepLevel]","[]","[]","Optional.empty"
"[mDischargeStepTracker = new LevelStepTracker(MAX_LEVEL_STEPS)]","[]","[FINAL]","Optional.empty"
"[mDailyDischargeStepTracker = new LevelStepTracker(MAX_LEVEL_STEPS * 2)]","[]","[FINAL]","Optional.empty"
"[mDailyPackageChanges]","[]","[]","Optional.empty"
"[mLastChargeStepLevel]","[]","[]","Optional.empty"
"[mMaxChargeStepLevel]","[]","[]","Optional.empty"
"[mChargeStepTracker = new LevelStepTracker(MAX_LEVEL_STEPS)]","[]","[FINAL]","Optional.empty"
"[mDailyChargeStepTracker = new LevelStepTracker(MAX_LEVEL_STEPS * 2)]","[]","[FINAL]","Optional.empty"
"[MAX_DAILY_ITEMS = 10]","[]","[STATIC, FINAL]","Optional.empty"
"[mDailyStartTime = 0]","[]","[]","Optional.empty"
"[mNextMinDailyDeadline = 0]","[]","[]","Optional.empty"
"[mNextMaxDailyDeadline = 0]","[]","[]","Optional.empty"
"[mDailyItems = new ArrayList<>()]","[]","[FINAL]","Optional.empty"
"[mLastWriteTime = 0]","[]","[]","Optional[// Milliseconds
]"
"[mPhoneServiceState = -1]","[]","[PRIVATE]","Optional.empty"
"[mPhoneServiceStateRaw = -1]","[]","[PRIVATE]","Optional.empty"
"[mPhoneSimStateRaw = -1]","[]","[PRIVATE]","Optional.empty"
"[mNumConnectivityChange]","[]","[PRIVATE]","Optional.empty"
"[mLoadedNumConnectivityChange]","[]","[PRIVATE]","Optional.empty"
"[mUnpluggedNumConnectivityChange]","[]","[PRIVATE]","Optional.empty"
"[mEstimatedBatteryCapacity = -1]","[]","[PRIVATE]","Optional.empty"
"[mTmpNetworkStatsEntry = new NetworkStats.Entry()]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mPowerProfile]","[]","[PRIVATE]","Optional.empty"
"[mKernelWakelockStats = new HashMap<>()]","[]","[PRIVATE, FINAL]","Optional[/*
     * Holds a SamplingTimer associated with each kernel wakelock name being tracked.
     */
]"
"[mLastWakeupReason = null]","[]","[]","Optional.empty"
"[mLastWakeupUptimeMs = 0]","[]","[]","Optional.empty"
"[mWakeupReasonStats = new HashMap<>()]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mObservers = new ArrayList<>()]","[]","[PROTECTED, FINAL]","Optional.empty"
"[mUptime]","[]","[PROTECTED]","Optional.empty"
"[mRealtime]","[]","[PROTECTED]","Optional.empty"
"[mRunning]","[]","[PROTECTED]","Optional.empty"
"[mPastUptime]","[]","[PROTECTED]","Optional.empty"
"[mUptimeStart]","[]","[PROTECTED]","Optional.empty"
"[mPastRealtime]","[]","[PROTECTED]","Optional.empty"
"[mRealtimeStart]","[]","[PROTECTED]","Optional.empty"
"[mUnpluggedUptime]","[]","[PROTECTED]","Optional.empty"
"[mUnpluggedRealtime]","[]","[PROTECTED]","Optional.empty"
"[mCount = new AtomicInteger()]","[]","[FINAL]","Optional.empty"
"[mTimeBase]","[]","[FINAL]","Optional.empty"
"[mLoadedCount]","[]","[]","Optional.empty"
"[mLastCount]","[]","[]","Optional.empty"
"[mUnpluggedCount]","[]","[]","Optional.empty"
"[mPluggedCount]","[]","[]","Optional.empty"
"[mTimeBase]","[]","[FINAL]","Optional.empty"
"[mCount]","[]","[]","Optional.empty"
"[mLoadedCount]","[]","[]","Optional.empty"
"[mUnpluggedCount]","[]","[]","Optional.empty"
"[mPluggedCount]","[]","[]","Optional.empty"
"[mClocks]","[]","[PROTECTED, FINAL]","Optional.empty"
"[mType]","[]","[PROTECTED, FINAL]","Optional.empty"
"[mTimeBase]","[]","[PROTECTED, FINAL]","Optional.empty"
"[mCount]","[]","[PROTECTED]","Optional.empty"
"[mLoadedCount]","[]","[PROTECTED]","Optional.empty"
"[mLastCount]","[]","[PROTECTED]","Optional.empty"
"[mUnpluggedCount]","[]","[PROTECTED]","Optional.empty"
"[mTotalTime]","[]","[PROTECTED]","Optional[/**
 * The total time we have accumulated since the start of the original
 * boot, to the last time something interesting happened in the
 * current run.
 */
]"
"[mLoadedTime]","[]","[PROTECTED]","Optional[/**
 * The total time we loaded for the previous runs.  Subtract this from
 * mTotalTime to find the time for the current run of the system.
 */
]"
"[mLastTime]","[]","[PROTECTED]","Optional[/**
 * The run time of the last run of the system, as loaded from the
 * saved data.
 */
]"
"[mUnpluggedTime]","[]","[PROTECTED]","Optional[/**
 * The value of mTotalTime when unplug() was last called.  Subtract
 * this from mTotalTime to find the time since the last unplug from
 * power.
 */
]"
"[mTimeBeforeMark]","[]","[PROTECTED]","Optional[/**
 * The total time this timer has been running until the latest mark has been set.
 * Subtract this from mTotalTime to get the time spent running since the mark was set.
 */
]"
"[mCurrentReportedCount]","[]","[]","Optional[/**
 * The most recent reported count from /proc/wakelocks.
 */
]"
"[mUnpluggedReportedCount]","[]","[]","Optional[/**
 * The reported count from /proc/wakelocks when unplug() was last
 * called.
 */
]"
"[mCurrentReportedTotalTime]","[]","[]","Optional[/**
 * The most recent reported total_time from /proc/wakelocks.
 */
]"
"[mUnpluggedReportedTotalTime]","[]","[]","Optional[/**
 * The reported total_time from /proc/wakelocks when unplug() was last
 * called.
 */
]"
"[mTimeBaseRunning]","[]","[]","Optional[/**
 * Whether we are currently in a discharge cycle.
 */
]"
"[mTrackingReportedValues]","[]","[]","Optional[/**
 * Whether we are currently recording reported values.
 */
]"
"[mUpdateVersion]","[]","[]","Optional[/*
         * A sequence counter, incremented once for each update of the stats.
         */
]"
"[mUid]","[]","[FINAL]","Optional.empty"
"[mLastAddedTime]","[]","[]","Optional[/**
 * The last time at which we updated the timer.  This is in elapsed realtime microseconds.
 */
]"
"[mLastAddedDuration]","[]","[]","Optional[/**
 * The last duration that we added to the timer.  This is in microseconds.
 */
]"
"[mInDischarge]","[]","[]","Optional[/**
 * Whether we are currently in a discharge cycle.
 */
]"
"[mUid]","[]","[FINAL]","Optional.empty"
"[mTimerPool]","[]","[FINAL]","Optional.empty"
"[mNesting]","[]","[]","Optional.empty"
"[mUpdateTime]","[]","[]","Optional[/**
 * The last time at which we updated the timer.  If mNesting is > 0,
 * subtract this from the current battery time to find the amount of
 * time we have been running since we last computed an update.
 */
]"
"[mAcquireTime]","[]","[]","Optional[/**
 * The total time at which the timer was acquired, to determine if it
 * was actually held for an interesting duration.
 */
]"
"[mTimeout]","[]","[]","Optional.empty"
"[mInList]","[]","[]","Optional[/**
 * For partial wake locks, keep track of whether we are in the list
 * to consume CPU cycles.
 */
]"
"[OVERFLOW_NAME = ""*overflow*""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[mMap = new ArrayMap<>()]","[]","[FINAL]","Optional.empty"
"[mCurOverflow]","[]","[]","Optional.empty"
"[mActiveOverflow]","[]","[]","Optional.empty"
"[mIdleTimeMillis]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mRxTimeMillis]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mTxTimeMillis]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mPowerDrainMaMs]","[]","[PRIVATE, FINAL]","Optional.empty"
"[DELTA_TIME_MASK = 0x7ffff]","[]","[STATIC, FINAL]","Optional[// Part of initial delta int that specifies the time delta.
]"
"[DELTA_TIME_LONG = 0x7ffff]","[]","[STATIC, FINAL]","Optional[// The delta is a following long
]"
"[DELTA_TIME_INT = 0x7fffe]","[]","[STATIC, FINAL]","Optional[// The delta is a following int
]"
"[DELTA_TIME_ABS = 0x7fffd]","[]","[STATIC, FINAL]","Optional[// Following is an entire abs update.
]"
"[DELTA_BATTERY_LEVEL_FLAG = 0x00080000]","[]","[STATIC, FINAL]","Optional[// Flag in delta int: a new battery level int follows.
]"
"[DELTA_STATE_FLAG = 0x00100000]","[]","[STATIC, FINAL]","Optional[// Flag in delta int: a new full state and battery status int follows.
]"
"[DELTA_STATE2_FLAG = 0x00200000]","[]","[STATIC, FINAL]","Optional[// Flag in delta int: a new full state2 int follows.
]"
"[DELTA_WAKELOCK_FLAG = 0x00400000]","[]","[STATIC, FINAL]","Optional[// Flag in delta int: contains a wakelock or wakeReason tag.
]"
"[DELTA_EVENT_FLAG = 0x00800000]","[]","[STATIC, FINAL]","Optional[// Flag in delta int: contains an event description.
]"
"[DELTA_BATTERY_CHARGE_FLAG = 0x01000000]","[]","[STATIC, FINAL]","Optional[// Flag in delta int: contains the battery charge count in uAh.
]"
"[DELTA_STATE_MASK = 0xfe000000]","[]","[STATIC, FINAL]","Optional[// These upper bits are the frequently changing state bits.
]"
"[STATE_BATTERY_MASK = 0xff000000]","[]","[STATIC, FINAL]","Optional[// in STATE_BATTERY_MASK.
]"
"[STATE_BATTERY_STATUS_MASK = 0x00000007]","[]","[STATIC, FINAL]","Optional.empty"
"[STATE_BATTERY_STATUS_SHIFT = 29]","[]","[STATIC, FINAL]","Optional.empty"
"[STATE_BATTERY_HEALTH_MASK = 0x00000007]","[]","[STATIC, FINAL]","Optional.empty"
"[STATE_BATTERY_HEALTH_SHIFT = 26]","[]","[STATIC, FINAL]","Optional.empty"
"[STATE_BATTERY_PLUG_MASK = 0x00000003]","[]","[STATIC, FINAL]","Optional.empty"
"[STATE_BATTERY_PLUG_SHIFT = 24]","[]","[STATIC, FINAL]","Optional.empty"
"[BATTERY_DELTA_LEVEL_FLAG = 0x00000001]","[]","[STATIC, FINAL]","Optional[// from a battery level change.
]"
"[mChangedStates = 0]","[]","[]","Optional.empty"
"[mChangedStates2 = 0]","[]","[]","Optional.empty"
"[mInitialAcquireWakeName]","[]","[PRIVATE]","Optional.empty"
"[mInitialAcquireWakeUid = -1]","[]","[PRIVATE]","Optional.empty"
"[mSensorNesting]","[]","[]","Optional.empty"
"[mGpsNesting]","[]","[]","Optional.empty"
"[mWifiFullLockNesting = 0]","[]","[]","Optional.empty"
"[mWifiScanNesting = 0]","[]","[]","Optional.empty"
"[mWifiMulticastNesting = 0]","[]","[]","Optional.empty"
"[mBsi]","[]","[PROTECTED]","Optional[/**
 * BatteryStatsImpl that we are associated with.
 */
]"
"[mUid]","[]","[FINAL]","Optional.empty"
"[mWifiRunning]","[]","[]","Optional.empty"
"[mWifiRunningTimer]","[]","[]","Optional.empty"
"[mFullWifiLockOut]","[]","[]","Optional.empty"
"[mFullWifiLockTimer]","[]","[]","Optional.empty"
"[mWifiScanStarted]","[]","[]","Optional.empty"
"[mWifiScanTimer]","[]","[]","Optional.empty"
"[NO_BATCHED_SCAN_STARTED = -1]","[]","[STATIC, FINAL]","Optional.empty"
"[mWifiBatchedScanBinStarted = NO_BATCHED_SCAN_STARTED]","[]","[]","Optional.empty"
"[mWifiBatchedScanTimer]","[]","[]","Optional.empty"
"[mWifiMulticastEnabled]","[]","[]","Optional.empty"
"[mWifiMulticastTimer]","[]","[]","Optional.empty"
"[mAudioTurnedOnTimer]","[]","[]","Optional.empty"
"[mVideoTurnedOnTimer]","[]","[]","Optional.empty"
"[mFlashlightTurnedOnTimer]","[]","[]","Optional.empty"
"[mCameraTurnedOnTimer]","[]","[]","Optional.empty"
"[mForegroundActivityTimer]","[]","[]","Optional.empty"
"[mBluetoothScanTimer]","[]","[]","Optional.empty"
"[mProcessState = ActivityManager.PROCESS_STATE_NONEXISTENT]","[]","[]","Optional.empty"
"[mProcessStateTimer]","[]","[]","Optional.empty"
"[mVibratorOnTimer]","[]","[]","Optional.empty"
"[mUserActivityCounters]","[]","[]","Optional.empty"
"[mNetworkByteActivityCounters]","[]","[]","Optional.empty"
"[mNetworkPacketActivityCounters]","[]","[]","Optional.empty"
"[mMobileRadioActiveTime]","[]","[]","Optional.empty"
"[mMobileRadioActiveCount]","[]","[]","Optional.empty"
"[mWifiControllerActivity]","[]","[PRIVATE]","Optional[/**
 * The amount of time this uid has kept the WiFi controller in idle, tx, and rx mode.
 * Can be null if the UID has had no such activity.
 */
]"
"[mBluetoothControllerActivity]","[]","[PRIVATE]","Optional[/**
 * The amount of time this uid has kept the Bluetooth controller in idle, tx, and rx mode.
 * Can be null if the UID has had no such activity.
 */
]"
"[mModemControllerActivity]","[]","[PRIVATE]","Optional[/**
 * The amount of time this uid has kept the Modem controller in idle, tx, and rx mode.
 * Can be null if the UID has had no such activity.
 */
]"
"[mLastStepUserTime]","[]","[]","Optional[/**
 * The CPU times we had at the last history details update.
 */
]"
"[mLastStepSystemTime]","[]","[]","Optional.empty"
"[mCurStepUserTime]","[]","[]","Optional.empty"
"[mCurStepSystemTime]","[]","[]","Optional.empty"
"[mUserCpuTime]","[]","[]","Optional.empty"
"[mSystemCpuTime]","[]","[]","Optional.empty"
"[mCpuPower]","[]","[]","Optional.empty"
"[mCpuClusterSpeed]","[]","[]","Optional.empty"
"[mWakelockStats]","[]","[FINAL]","Optional[/**
 * The statistics we have collected for this uid's wake locks.
 */
]"
"[mSyncStats]","[]","[FINAL]","Optional[/**
 * The statistics we have collected for this uid's syncs.
 */
]"
"[mJobStats]","[]","[FINAL]","Optional[/**
 * The statistics we have collected for this uid's jobs.
 */
]"
"[mSensorStats = new SparseArray<>()]","[]","[FINAL]","Optional[/**
 * The statistics we have collected for this uid's sensor activations.
 */
]"
"[mProcessStats = new ArrayMap<>()]","[]","[FINAL]","Optional[/**
 * The statistics we have collected for this uid's processes.
 */
]"
"[mPackageStats = new ArrayMap<>()]","[]","[FINAL]","Optional[/**
 * The statistics we have collected for this uid's processes.
 */
]"
"[mPids = new SparseArray<>()]","[]","[FINAL]","Optional[/**
 * The transient wake stats we have collected for this uid's pids.
 */
]"
"[mBsi]","[]","[PROTECTED]","Optional[/**
 * BatteryStatsImpl that we are associated with.
 */
]"
"[mUid]","[]","[PROTECTED]","Optional[/**
 * BatteryStatsImpl that we are associated with.
 */
]"
"[mTimerPartial]","[]","[]","Optional[/**
 * How long (in ms) this uid has been keeping the device partially awake.
 */
]"
"[mTimerFull]","[]","[]","Optional[/**
 * How long (in ms) this uid has been keeping the device fully awake.
 */
]"
"[mTimerWindow]","[]","[]","Optional[/**
 * How long (in ms) this uid has had a window keeping the device awake.
 */
]"
"[mTimerDraw]","[]","[]","Optional[/**
 * How long (in ms) this uid has had a draw wake lock.
 */
]"
"[mBsi]","[]","[PROTECTED]","Optional[/**
 * BatteryStatsImpl that we are associated with.
 */
]"
"[mUid]","[]","[PROTECTED]","Optional[/**
 * BatteryStatsImpl that we are associated with.
 */
]"
"[mHandle]","[]","[FINAL]","Optional.empty"
"[mTimer]","[]","[]","Optional.empty"
"[mBsi]","[]","[PROTECTED]","Optional[/**
 * BatteryStatsImpl that we are associated with.
 */
]"
"[mName]","[]","[FINAL]","Optional[/**
 * The name of this process.
 */
]"
"[mActive = true]","[]","[]","Optional[/**
 * Remains true until removed from the stats.
 */
]"
"[mUserTime]","[]","[]","Optional[/**
 * Total time (in ms) spent executing in user code.
 */
]"
"[mSystemTime]","[]","[]","Optional[/**
 * Total time (in ms) spent executing in kernel code.
 */
]"
"[mForegroundTime]","[]","[]","Optional[/**
 * Amount of time (in ms) the process was running in the foreground.
 */
]"
"[mStarts]","[]","[]","Optional[/**
 * Number of times the process has been started.
 */
]"
"[mNumCrashes]","[]","[]","Optional[/**
 * Number of times the process has crashed.
 */
]"
"[mNumAnrs]","[]","[]","Optional[/**
 * Number of times the process has had an ANR.
 */
]"
"[mLoadedUserTime]","[]","[]","Optional[/**
 * The amount of user time loaded from a previous save.
 */
]"
"[mLoadedSystemTime]","[]","[]","Optional[/**
 * The amount of system time loaded from a previous save.
 */
]"
"[mLoadedForegroundTime]","[]","[]","Optional[/**
 * The amount of foreground time loaded from a previous save.
 */
]"
"[mLoadedStarts]","[]","[]","Optional[/**
 * The number of times the process has started from a previous save.
 */
]"
"[mLoadedNumCrashes]","[]","[]","Optional[/**
 * Number of times the process has crashed from a previous save.
 */
]"
"[mLoadedNumAnrs]","[]","[]","Optional[/**
 * Number of times the process has had an ANR from a previous save.
 */
]"
"[mUnpluggedUserTime]","[]","[]","Optional[/**
 * The amount of user time when last unplugged.
 */
]"
"[mUnpluggedSystemTime]","[]","[]","Optional[/**
 * The amount of system time when last unplugged.
 */
]"
"[mUnpluggedForegroundTime]","[]","[]","Optional[/**
 * The amount of foreground time since unplugged.
 */
]"
"[mUnpluggedStarts]","[]","[]","Optional[/**
 * The number of times the process has started before unplugged.
 */
]"
"[mUnpluggedNumCrashes]","[]","[]","Optional[/**
 * Number of times the process has crashed before unplugged.
 */
]"
"[mUnpluggedNumAnrs]","[]","[]","Optional[/**
 * Number of times the process has had an ANR before unplugged.
 */
]"
"[mExcessivePower]","[]","[]","Optional.empty"
"[mBsi]","[]","[PROTECTED]","Optional[/**
 * BatteryStatsImpl that we are associated with.
 */
]"
"[mWakeupAlarms = new ArrayMap<>()]","[]","[]","Optional[/**
 * Number of times wakeup alarms have occurred for this app.
 */
]"
"[mServiceStats = new ArrayMap<>()]","[]","[FINAL]","Optional[/**
 * The statics we have collected for this package's services.
 */
]"
"[mBsi]","[]","[PROTECTED]","Optional[/**
 * BatteryStatsImpl that we are associated with.
 */
]"
"[mPkg]","[]","[PROTECTED]","Optional[/**
 * The android package in which this service resides.
 */
]"
"[mStartTime]","[]","[PROTECTED]","Optional[/**
 * Total time (ms in battery uptime) the service has been left started.
 */
]"
"[mRunningSince]","[]","[PROTECTED]","Optional[/**
 * If service has been started and not yet stopped, this is
 * when it was started.
 */
]"
"[mRunning]","[]","[PROTECTED]","Optional[/**
 * True if we are currently running.
 */
]"
"[mStarts]","[]","[PROTECTED]","Optional[/**
 * Total number of times startService() has been called.
 */
]"
"[mLaunchedTime]","[]","[PROTECTED]","Optional[/**
 * Total time (ms in battery uptime) the service has been left launched.
 */
]"
"[mLaunchedSince]","[]","[PROTECTED]","Optional[/**
 * If service has been launched and not yet exited, this is
 * when it was launched (ms in battery uptime).
 */
]"
"[mLaunched]","[]","[PROTECTED]","Optional[/**
 * True if we are currently launched.
 */
]"
"[mLaunches]","[]","[PROTECTED]","Optional[/**
 * Total number times the service has been launched.
 */
]"
"[mLoadedStartTime]","[]","[PROTECTED]","Optional[/**
 * The amount of time spent started loaded from a previous save
 * (ms in battery uptime).
 */
]"
"[mLoadedStarts]","[]","[PROTECTED]","Optional[/**
 * The number of starts loaded from a previous save.
 */
]"
"[mLoadedLaunches]","[]","[PROTECTED]","Optional[/**
 * The number of launches loaded from a previous save.
 */
]"
"[mLastStartTime]","[]","[PROTECTED]","Optional[/**
 * The amount of time spent started as of the last run (ms
 * in battery uptime).
 */
]"
"[mLastStarts]","[]","[PROTECTED]","Optional[/**
 * The number of starts as of the last run.
 */
]"
"[mLastLaunches]","[]","[PROTECTED]","Optional[/**
 * The number of launches as of the last run.
 */
]"
"[mUnpluggedStartTime]","[]","[PROTECTED]","Optional[/**
 * The amount of time spent started when last unplugged (ms
 * in battery uptime).
 */
]"
"[mUnpluggedStarts]","[]","[PROTECTED]","Optional[/**
 * The number of starts when last unplugged.
 */
]"
"[mUnpluggedLaunches]","[]","[PROTECTED]","Optional[/**
 * The number of launches when last unplugged.
 */
]"
"[mMobileIfaces = EmptyArray.STRING]","[]","[PRIVATE]","Optional.empty"
"[mWifiIfaces = EmptyArray.STRING]","[]","[PRIVATE]","Optional.empty"
"[mNetworkStatsFactory = new NetworkStatsFactory()]","[]","[PRIVATE, FINAL]","Optional.empty"
"[NETWORK_STATS_LAST = 0]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[NETWORK_STATS_NEXT = 1]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[NETWORK_STATS_DELTA = 2]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[mMobileNetworkStats]","[]","[PRIVATE]","Optional.empty"
"[mWifiNetworkStats]","[]","[PRIVATE]","Optional.empty"
"[mTempTotalCpuUserTimeUs]","[]","[]","Optional[// Used in updateCpuTimeLocked().
]"
"[mTempTotalCpuSystemTimeUs]","[]","[]","Optional.empty"
"[BATTERY_PLUGGED_NONE = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[// This should probably be exposed in the API, though it's not critical
]"
"[mPendingWrite = null]","[]","[]","Optional.empty"
"[mWriteLock = new ReentrantLock()]","[]","[FINAL]","Optional.empty"
"[CREATOR = new Parcelable.Creator<BatteryStatsImpl>() {

    public BatteryStatsImpl createFromParcel(Parcel in) {
        return new BatteryStatsImpl(in);
    }

    public BatteryStatsImpl[] newArray(int size) {
        return new BatteryStatsImpl[size];
    }
}]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[URL = DATA]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The website URL string.
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/sip_address""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[TYPE_HOME = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_WORK = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_OTHER = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[SIP_ADDRESS = DATA1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The SIP address.
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/identity""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[IDENTITY = DataColumns.DATA1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The identity string.
 * <P>Type: TEXT</P>
 */
]"
"[NAMESPACE = DataColumns.DATA2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The namespace of the identity string, e.g. ""com.google""
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(Data.CONTENT_URI, ""callables"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Similar to {@link Phone#CONTENT_URI}, but returns callable data instead of only
 * phone numbers.
 */
]"
"[CONTENT_FILTER_URI = Uri.withAppendedPath(CONTENT_URI, ""filter"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Similar to {@link Phone#CONTENT_FILTER_URI}, but allows users to filter callable
 * data.
 */
]"
"[ENTERPRISE_CONTENT_FILTER_URI = Uri.withAppendedPath(CONTENT_URI, ""filter_enterprise"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Similar to {@link Phone#ENTERPRISE_CONTENT_FILTER_URI}, but allows users to filter
 * callable data. This URI requires {@link ContactsContract#DIRECTORY_PARAM_KEY} in
 * parameters, otherwise it will throw IllegalArgumentException.
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(Data.CONTENT_URI, ""contactables"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for these data items, which requests a directory of data
 * rows matching the selection criteria.
 */
]"
"[CONTENT_FILTER_URI = Uri.withAppendedPath(Contactables.CONTENT_URI, ""filter"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for these data items, which allows for a query parameter to
 * be appended onto the end to filter for data items matching the query.
 */
]"
"[VISIBLE_CONTACTS_ONLY = ""visible_contacts_only""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A boolean parameter for {@link Data#CONTENT_URI}.
 * This specifies whether or not the returned data items should be filtered to show
 * data items belonging to visible contacts only.
 */
]"
"[DATA_SET = ""data_set""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The data set within the account that this group belongs to.  This allows
 * multiple sync adapters for the same account type to distinguish between
 * each others' group data.
 *
 * This is empty by default, and is completely optional.  It only needs to
 * be populated if multiple sync adapters are entering distinct group data
 * for the same account type and account name.
 * <P>Type: TEXT</P>
 */
]"
"[ACCOUNT_TYPE_AND_DATA_SET = ""account_type_and_data_set""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A concatenation of the account type and data set (delimited by a forward
 * slash) - if the data set is empty, this will be the same as the account
 * type.  For applications that need to be aware of the data set, this can
 * be used instead of account type to distinguish sets of data.  This is
 * never intended to be used for specifying accounts.
 * @hide
 */
]"
"[TITLE = ""title""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The display title of this group.
 * <p>
 * Type: TEXT
 */
]"
"[RES_PACKAGE = ""res_package""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The package name to use when creating {@link Resources} objects for
 * this group. This value is only designed for use when building user
 * interfaces, and should not be used to infer the owner.
 */
]"
"[TITLE_RES = ""title_res""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The display title of this group to load as a resource from
 * {@link #RES_PACKAGE}, which may be localized.
 * <P>Type: TEXT</P>
 */
]"
"[NOTES = ""notes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Notes about the group.
 * <p>
 * Type: TEXT
 */
]"
"[SYSTEM_ID = ""system_id""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The ID of this group if it is a System Group, i.e. a group that has a special meaning
 * to the sync adapter, null otherwise.
 * <P>Type: TEXT</P>
 */
]"
"[SUMMARY_COUNT = ""summ_count""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The total number of {@link Contacts} that have
 * {@link CommonDataKinds.GroupMembership} in this group. Read-only value that is only
 * present when querying {@link Groups#CONTENT_SUMMARY_URI}.
 * <p>
 * Type: INTEGER
 */
]"
"[PARAM_RETURN_GROUP_COUNT_PER_ACCOUNT = ""return_group_count_per_account""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A boolean query parameter that can be used with {@link Groups#CONTENT_SUMMARY_URI}.
 * It will additionally return {@link #SUMMARY_GROUP_COUNT_PER_ACCOUNT}.
 *
 * @hide
 */
]"
"[SUMMARY_GROUP_COUNT_PER_ACCOUNT = ""group_count_per_account""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The total number of groups of the account that a group belongs to.
 * This column is available only when the parameter
 * {@link #PARAM_RETURN_GROUP_COUNT_PER_ACCOUNT} is specified in
 * {@link Groups#CONTENT_SUMMARY_URI}.
 *
 * For example, when the account ""A"" has two groups ""group1"" and ""group2"", and the account
 * ""B"" has a group ""group3"", the rows for ""group1"" and ""group2"" return ""2"" and the row for
 * ""group3"" returns ""1"" for this column.
 *
 * Note: This counts only non-favorites, non-auto-add, and not deleted groups.
 *
 * Type: INTEGER
 * @hide
 */
]"
"[SUMMARY_WITH_PHONES = ""summ_phones""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The total number of {@link Contacts} that have both
 * {@link CommonDataKinds.GroupMembership} in this group, and also have phone numbers.
 * Read-only value that is only present when querying
 * {@link Groups#CONTENT_SUMMARY_URI}.
 * <p>
 * Type: INTEGER
 */
]"
"[GROUP_VISIBLE = ""group_visible""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Flag indicating if the contacts belonging to this group should be
 * visible in any user interface.
 * <p>
 * Type: INTEGER (boolean)
 */
]"
"[DELETED = ""deleted""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The ""deleted"" flag: ""0"" by default, ""1"" if the row has been marked
 * for deletion. When {@link android.content.ContentResolver#delete} is
 * called on a group, it is marked for deletion. The sync adaptor
 * deletes the group on the server and then calls ContactResolver.delete
 * once more, this time setting the the
 * {@link ContactsContract#CALLER_IS_SYNCADAPTER} query parameter to
 * finalize the data removal.
 * <P>Type: INTEGER</P>
 */
]"
"[SHOULD_SYNC = ""should_sync""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether this group should be synced if the SYNC_EVERYTHING settings
 * is false for this group's account.
 * <p>
 * Type: INTEGER (boolean)
 */
]"
"[AUTO_ADD = ""auto_add""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Any newly created contacts will automatically be added to groups that have this
 * flag set to true.
 * <p>
 * Type: INTEGER (boolean)
 */
]"
"[FAVORITES = ""favorites""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * When a contacts is marked as a favorites it will be automatically added
 * to the groups that have this flag set, and when it is removed from favorites
 * it will be removed from these groups.
 * <p>
 * Type: INTEGER (boolean)
 */
]"
"[GROUP_IS_READ_ONLY = ""group_is_read_only""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The ""read-only"" flag: ""0"" by default, ""1"" if the row cannot be modified or
 * deleted except by a sync adapter.  See {@link ContactsContract#CALLER_IS_SYNCADAPTER}.
 * <P>Type: INTEGER</P>
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(AUTHORITY_URI, ""groups"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table
 */
]"
"[CONTENT_SUMMARY_URI = Uri.withAppendedPath(AUTHORITY_URI, ""groups_summary"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table joined with details data from
 * {@link ContactsContract.Data}.
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/group""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of a directory of groups.
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/group""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of a single group.
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(AUTHORITY_URI, ""aggregation_exceptions"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/aggregation_exception""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of {@link #CONTENT_URI} providing a directory of data.
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/aggregation_exception""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of a {@link #CONTENT_URI} subdirectory of an aggregation exception
 */
]"
"[TYPE = ""type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The type of exception: {@link #TYPE_KEEP_TOGETHER}, {@link #TYPE_KEEP_SEPARATE} or
 * {@link #TYPE_AUTOMATIC}.
 *
 * <P>Type: INTEGER</P>
 */
]"
"[TYPE_AUTOMATIC = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Allows the provider to automatically decide whether the specified raw contacts should
 * be included in the same aggregate contact or not.
 */
]"
"[TYPE_KEEP_TOGETHER = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Makes sure that the specified raw contacts are included in the same
 * aggregate contact.
 */
]"
"[TYPE_KEEP_SEPARATE = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Makes sure that the specified raw contacts are NOT included in the same
 * aggregate contact.
 */
]"
"[RAW_CONTACT_ID1 = ""raw_contact_id1""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A reference to the {@link RawContacts#_ID} of the raw contact that the rule applies to.
 */
]"
"[RAW_CONTACT_ID2 = ""raw_contact_id2""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A reference to the other {@link RawContacts#_ID} of the raw contact that the rule
 * applies to.
 */
]"
"[ACCOUNT_NAME = ""account_name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The name of the account instance to which this row belongs.
 * <P>Type: TEXT</P>
 */
]"
"[ACCOUNT_TYPE = ""account_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The type of account to which this row belongs, which when paired with
 * {@link #ACCOUNT_NAME} identifies a specific account.
 * <P>Type: TEXT</P>
 */
]"
"[DATA_SET = ""data_set""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The data set within the account that this row belongs to.  This allows
 * multiple sync adapters for the same account type to distinguish between
 * each others' data.
 *
 * This is empty by default, and is completely optional.  It only needs to
 * be populated if multiple sync adapters are entering distinct data for
 * the same account type and account name.
 * <P>Type: TEXT</P>
 */
]"
"[SHOULD_SYNC = ""should_sync""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Depending on the mode defined by the sync-adapter, this flag controls
 * the top-level sync behavior for this data source.
 * <p>
 * Type: INTEGER (boolean)
 */
]"
"[UNGROUPED_VISIBLE = ""ungrouped_visible""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Flag indicating if contacts without any {@link CommonDataKinds.GroupMembership}
 * entries should be visible in any user interface.
 * <p>
 * Type: INTEGER (boolean)
 */
]"
"[ANY_UNSYNCED = ""any_unsynced""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Read-only flag indicating if this {@link #SHOULD_SYNC} or any
 * {@link Groups#SHOULD_SYNC} under this account have been marked as
 * unsynced.
 */
]"
"[UNGROUPED_COUNT = ""summ_count""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Read-only count of {@link Contacts} from a specific source that have
 * no {@link CommonDataKinds.GroupMembership} entries.
 * <p>
 * Type: INTEGER
 */
]"
"[UNGROUPED_WITH_PHONES = ""summ_phones""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Read-only count of {@link Contacts} from a specific source that have
 * no {@link CommonDataKinds.GroupMembership} entries, and also have phone numbers.
 * <p>
 * Type: INTEGER
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(AUTHORITY_URI, ""settings"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/setting""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME-type of {@link #CONTENT_URI} providing a directory of
 * settings.
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/setting""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME-type of {@link #CONTENT_URI} providing a single setting.
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(AUTHORITY_URI, ""provider_status"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table.  Requests to this URI can be
 * performed on the UI thread because they are always unblocking.
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/provider_status""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME-type of {@link #CONTENT_URI} providing a directory of
 * settings.
 */
]"
"[STATUS = ""status""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * An integer representing the current status of the provider.
 */
]"
"[STATUS_NORMAL = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Default status of the provider.
 */
]"
"[STATUS_BUSY = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The provider won't respond to queries. It is in the middle of a long running task, such
 * as a database upgrade or locale change.
 */
]"
"[STATUS_EMPTY = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The status that indicates that there are no accounts and no contacts
 * on the device.
 */
]"
"[FEEDBACK_URI = Uri.withAppendedPath(Data.CONTENT_URI, ""usagefeedback"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for sending usage feedback.
 * Must be used with {@link ContentResolver#update(Uri, ContentValues, String, String[])}.
 */
]"
"[DELETE_USAGE_URI = Uri.withAppendedPath(Contacts.CONTENT_URI, ""delete_usage"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for deleting all usage information.
 * Must be used with {@link ContentResolver#delete(Uri, String, String[])}.
 * The {@code where} and {@code selectionArgs} parameters are ignored.
 */
]"
"[USAGE_TYPE = ""type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>
 * Name for query parameter specifying the type of data usage.
 * </p>
 */
]"
"[USAGE_TYPE_CALL = ""call""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>
 * Type of usage for voice interaction, which includes phone call, voice chat, and
 * video chat.
 * </p>
 */
]"
"[USAGE_TYPE_LONG_TEXT = ""long_text""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>
 * Type of usage for text interaction involving longer messages, which includes email.
 * </p>
 */
]"
"[USAGE_TYPE_SHORT_TEXT = ""short_text""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * <p>
 * Type of usage for text interaction involving shorter messages, which includes SMS,
 * text chat with email addresses.
 * </p>
 */
]"
"[UNDEMOTE_METHOD = ""undemote""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The method to invoke in order to undemote a formerly demoted contact. The contact id of
 * the contact must be provided as an argument. If the contact was not previously demoted,
 * nothing will be done.
 * @hide
 */
]"
"[UNPINNED = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Default value for the pinned position of an unpinned contact.
 */
]"
"[DEMOTED = -1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value of pinned position for a contact that a user has indicated should be considered
 * of the lowest priority. It is up to the client application to determine how to present
 * such a contact - for example all the way at the bottom of a contact list, or simply
 * just hidden from view.
 */
]"
"[ACTION_QUICK_CONTACT = ""android.provider.action.QUICK_CONTACT""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Action used to launch the system contacts application and bring up a QuickContact dialog
 * for the provided {@link Contacts} entry.
 */
]"
"[EXTRA_TARGET_RECT = ""android.provider.extra.TARGET_RECT""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Extra used to specify pivot dialog location in screen coordinates.
 * @deprecated Use {@link Intent#setSourceBounds(Rect)} instead.
 * @hide
 */
]"
"[EXTRA_MODE = ""android.provider.extra.MODE""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Extra used to specify size of QuickContacts. Not all implementations of QuickContacts
 * will respect this extra's value.
 *
 * One of {@link #MODE_SMALL}, {@link #MODE_MEDIUM}, or {@link #MODE_LARGE}.
 */
]"
"[EXTRA_PRIORITIZED_MIMETYPE = ""android.provider.extra.PRIORITIZED_MIMETYPE""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Extra used to specify which mimetype should be prioritized in the QuickContacts UI.
 * For example, passing the value {@link CommonDataKinds.Phone#CONTENT_ITEM_TYPE} can
 * cause phone numbers to be displayed more prominently in QuickContacts.
 */
]"
"[EXTRA_EXCLUDE_MIMES = ""android.provider.extra.EXCLUDE_MIMES""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Extra used to indicate a list of specific MIME-types to exclude and not display in the
 * QuickContacts dialog. Stored as a {@link String} array.
 */
]"
"[MODE_SMALL = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Small QuickContact mode, usually presented with minimal actions.
 */
]"
"[MODE_MEDIUM = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Medium QuickContact mode, includes actions and light summary describing
 * the {@link Contacts} entry being shown. This may include social
 * status and presence details.
 */
]"
"[MODE_LARGE = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Large QuickContact mode, includes actions and larger, card-like summary
 * of the {@link Contacts} entry being shown. This may include detailed
 * information, such as a photo.
 */
]"
"[MODE_DEFAULT = MODE_LARGE]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(AUTHORITY_URI, ""display_photo"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this class, which allows access to full-size photos,
 * given a key.
 */
]"
"[CONTENT_MAX_DIMENSIONS_URI = Uri.withAppendedPath(AUTHORITY_URI, ""photo_dimensions"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This URI allows the caller to query for the maximum dimensions of a display photo
 * or thumbnail.  Requests to this URI can be performed on the UI thread because
 * they are always unblocking.
 */
]"
"[DISPLAY_MAX_DIM = ""display_max_dim""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Queries to {@link ContactsContract.DisplayPhoto#CONTENT_MAX_DIMENSIONS_URI} will
 * contain this column, populated with the maximum height and width (in pixels)
 * that will be stored for a display photo.  Larger photos will be down-sized to
 * fit within a square of this many pixels.
 */
]"
"[THUMBNAIL_MAX_DIM = ""thumbnail_max_dim""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Queries to {@link ContactsContract.DisplayPhoto#CONTENT_MAX_DIMENSIONS_URI} will
 * contain this column, populated with the height and width (in pixels) for photo
 * thumbnails.
 */
]"
"[SEARCH_SUGGESTION_CLICKED = ""android.provider.Contacts.SEARCH_SUGGESTION_CLICKED""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This is the intent that is fired when a search suggestion is clicked on.
 */
]"
"[SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED = ""android.provider.Contacts.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This is the intent that is fired when a search suggestion for dialing a number
 * is clicked on.
 */
]"
"[SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED = ""android.provider.Contacts.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This is the intent that is fired when a search suggestion for creating a contact
 * is clicked on.
 */
]"
"[CONTACTS_DATABASE_CREATED = ""android.provider.Contacts.DATABASE_CREATED""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This is the intent that is fired when the contacts database is created. <p> The
 * READ_CONTACT permission is required to receive these broadcasts.
 */
]"
"[ATTACH_IMAGE = ""com.android.contacts.action.ATTACH_IMAGE""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Starts an Activity that lets the user pick a contact to attach an image to.
 * After picking the contact it launches the image cropper in face detection mode.
 */
]"
"[INVITE_CONTACT = ""com.android.contacts.action.INVITE_CONTACT""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This is the intent that is fired when the user clicks the ""invite to the network"" button
 * on a contact.  Only sent to an activity which is explicitly registered by a contact
 * provider which supports the ""invite to the network"" feature.
 * <p>
 * {@link Intent#getData()} contains the lookup URI for the contact.
 */
]"
"[SHOW_OR_CREATE_CONTACT = ""com.android.contacts.action.SHOW_OR_CREATE_CONTACT""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Takes as input a data URI with a mailto: or tel: scheme. If a single
 * contact exists with the given data it will be shown. If no contact
 * exists, a dialog will ask the user if they want to create a new
 * contact with the provided details filled in. If multiple contacts
 * share the data the user will be prompted to pick which contact they
 * want to view.
 * <p>
 * For <code>mailto:</code> URIs, the scheme specific portion must be a
 * raw email address, such as one built using
 * {@link Uri#fromParts(String, String, String)}.
 * <p>
 * For <code>tel:</code> URIs, the scheme specific portion is compared
 * to existing numbers using the standard caller ID lookup algorithm.
 * The number must be properly encoded, for example using
 * {@link Uri#fromParts(String, String, String)}.
 * <p>
 * Any extras from the {@link Insert} class will be passed along to the
 * create activity if there are no contacts to show.
 * <p>
 * Passing true for the {@link #EXTRA_FORCE_CREATE} extra will skip
 * prompting the user when the contact doesn't exist.
 */
]"
"[ACTION_VOICE_SEND_MESSAGE_TO_CONTACTS = ""android.provider.action.VOICE_SEND_MESSAGE_TO_CONTACTS""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Activity Action: Initiate a message to someone by voice. The message could be text,
 * audio, video or image(photo). This action supports messaging with a specific contact
 * regardless of the underlying messaging protocol used.
 * <p>
 * The action could be originated from the Voice Assistant as a voice interaction. In such
 * case, a receiving activity that supports {@link android.content.Intent#CATEGORY_VOICE}
 * could check return value of {@link android.app.Activity#isVoiceInteractionRoot} before
 * proceeding. By doing this check the activity verifies that the action indeed was
 * initiated by Voice Assistant and could send a message right away, without any further
 * input from the user. This allows for a smooth user experience when sending a message by
 * voice. Note: this activity must also support the {@link
 * android.content.Intent#CATEGORY_DEFAULT} so it can be found by {@link
 * android.service.voice.VoiceInteractionSession#startVoiceActivity}.
 * <p>
 * When the action was not initiated by Voice Assistant or when the receiving activity does
 * not support {@link android.content.Intent#CATEGORY_VOICE}, the activity must confirm
 * with the user before sending the message (because in this case it is unknown which app
 * sent the intent, it could be malicious).
 * <p>
 * To allow the Voice Assistant to help users with contacts disambiguation, the messaging
 * app may choose to integrate with the Contacts Provider. You will need to specify a new
 * MIME type in order to store your app’s unique contact IDs and optional human readable
 * labels in the Data table. The Voice Assistant needs to know this MIME type and {@link
 * RawContacts#ACCOUNT_TYPE} that you are using in order to provide the smooth contact
 * disambiguation user experience. The following convention should be met when performing
 * such integration:
 * <ul>
 * <li>This activity should have a string meta-data field associated with it, {@link
 * #METADATA_ACCOUNT_TYPE}, which defines {@link RawContacts#ACCOUNT_TYPE} for your Contacts
 * Provider implementation. The account type should be globally unique, for example you can
 * use your app package name as the account type.</li>
 * <li>This activity should have a string meta-data field associated with it, {@link
 * #METADATA_MIMETYPE}, which defines {@link DataColumns#MIMETYPE} for your Contacts
 * Provider implementation. For example, you can use
 * ""vnd.android.cursor.item/vnd.{$app_package_name}.profile"" as MIME type.</li>
 * <li>When filling Data table row for METADATA_MIMETYPE, column {@link DataColumns#DATA1}
 * should store the unique contact ID as understood by the app. This value will be used in
 * the {@link #EXTRA_RECIPIENT_CONTACT_CHAT_ID}.</li>
 * <li>Optionally, when filling Data table row for METADATA_MIMETYPE, column {@link
 * DataColumns#DATA3} could store a human readable label for the ID. For example it could be
 * phone number or human readable username/user_id like ""a_super_cool_user_name"". This label
 * may be shown below the Contact Name by the Voice Assistant as the user completes the
 * voice action. If DATA3 is empty, the ID in DATA1 may be shown instead.</li>
 * <li><em>Note: Do not use DATA3 to store the Contact Name. The Voice Assistant will
 * already get the Contact Name from the RawContact’s display_name.</em></li>
 * <li><em>Note: Some apps may choose to use phone number as the unique contact ID in DATA1.
 * If this applies to you and you’d like phone number to be shown below the Contact Name by
 * the Voice Assistant, then you may choose to leave DATA3 empty.</em></li>
 * <li><em>Note: If your app also uses DATA3 to display contact details in the Contacts App,
 * make sure it does not include prefix text such as ""Message +<phone>"" or ""Free Message
 * +<phone>"", etc. If you must show the prefix text in the Contacts App, please use a
 * different DATA# column, and update your contacts.xml to point to this new column. </em>
 * </li>
 * <li>Everytime the user sends a message to a contact, your app may choose to update the
 * {@link ContactOptionsColumns#TIMES_CONTACTED} entry through DataUsageFeedback class.
 * Doing this will allow Voice Assistant to bias speech recognition to contacts frequently
 * contacted, this is particularly useful for contact names that are hard to pronounce.</li>
 * </ul>
 * If the app chooses not to integrate with the Contacts Provider (in particular, when
 * either METADATA_ACCOUNT_TYPE or METADATA_MIMETYPE field is missing), Voice Assistant
 * will use existing phone number entries as contact ID's for such app.
 * <p>
 * Input: {@link android.content.Intent#getType} is the MIME type of the data being sent.
 * The intent sender will always put the concrete mime type in the intent type, like
 * ""text/plain"" or ""audio/wav"" for example. If the MIME type is ""text/plain"", message to
 * sent will be provided via {@link android.content.Intent#EXTRA_TEXT} as a styled
 * CharSequence. Otherwise, the message content will be supplied through {@link
 * android.content.Intent#setClipData(ClipData)} as a content provider URI(s). In the latter
 * case, EXTRA_TEXT could still be supplied optionally; for example, for audio messages
 * ClipData will contain URI of a recording and EXTRA_TEXT could contain the text
 * transcription of this recording.
 * <p>
 * The message can have n recipients. The n-th recipient of the message will be provided as
 * n-th elements of {@link #EXTRA_RECIPIENT_CONTACT_URI}, {@link
 * #EXTRA_RECIPIENT_CONTACT_CHAT_ID} and {@link #EXTRA_RECIPIENT_CONTACT_NAME} (as a
 * consequence, EXTRA_RECIPIENT_CONTACT_URI, EXTRA_RECIPIENT_CONTACT_CHAT_ID and
 * EXTRA_RECIPIENT_CONTACT_NAME should all be of length n). If neither of these 3 elements
 * is provided (e.g. all 3 are null) for the recipient or if the information provided is
 * ambiguous then the activity should prompt the user for the recipient to send the message
 * to.
 * <p>
 * Output: nothing
 *
 * @see #EXTRA_RECIPIENT_CONTACT_URI
 * @see #EXTRA_RECIPIENT_CONTACT_CHAT_ID
 * @see #EXTRA_RECIPIENT_CONTACT_NAME
 * @see #METADATA_ACCOUNT_TYPE
 * @see #METADATA_MIMETYPE
 */
]"
"[EXTRA_RECIPIENT_CONTACT_URI = ""android.provider.extra.RECIPIENT_CONTACT_URI""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This extra specifies a content provider uri(s) for the contact(s) (if the contacts were
 * located in the Contacts Provider), used with {@link
 * #ACTION_VOICE_SEND_MESSAGE_TO_CONTACTS} to supply the recipient(s). The value of this
 * extra is a {@code String[]}. The number of elements in the array should be equal to
 * number of recipients (and consistent with {@link #EXTRA_RECIPIENT_CONTACT_CHAT_ID} and
 * {@link #EXTRA_RECIPIENT_CONTACT_NAME}). When the value of the element for the particular
 * recipient is absent, it will be set to null.
 * <p>
 * <em>Note: one contact may have multiple accounts (e.g. Chat IDs) on a specific messaging
 * platform, so this may be ambiguous. E.g., one contact “John Smith” could have two
 * accounts on the same messaging app.</em>
 * <p>
 * <em>Example value: {""content://com.android.contacts/contacts/16""}</em>
 */
]"
"[EXTRA_RECIPIENT_CONTACT_CHAT_ID = ""android.provider.extra.RECIPIENT_CONTACT_CHAT_ID""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This extra specifies a messaging app’s unique ID(s) for the contact(s), used with {@link
 * #ACTION_VOICE_SEND_MESSAGE_TO_CONTACTS} to supply the recipient(s). The value of this
 * extra is a {@code String[]}. The number of elements in the array should be equal to
 * number of recipients (and consistent with {@link #EXTRA_RECIPIENT_CONTACT_URI} and {@link
 * #EXTRA_RECIPIENT_CONTACT_NAME}). When the value of the element for the particular
 * recipient is absent, it will be set to null.
 * <p>
 * The value of the elements comes from the {@link DataColumns#DATA1} column in Contacts
 * Provider with {@link DataColumns#MIMETYPE} from {@link #METADATA_MIMETYPE} (if both
 * {@link #METADATA_ACCOUNT_TYPE} and {@link #METADATA_MIMETYPE} are specified by the app;
 * otherwise, the value will be a phone number), and should be the unambiguous contact
 * endpoint. This value is app-specific, it could be some proprietary ID or a phone number.
 */
]"
"[EXTRA_RECIPIENT_CONTACT_NAME = ""android.provider.extra.RECIPIENT_CONTACT_NAME""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This extra specifies the contact name (full name from the Contacts Provider), used with
 * {@link #ACTION_VOICE_SEND_MESSAGE_TO_CONTACTS} to supply the recipient. The value of this
 * extra is a {@code String[]}. The number of elements in the array should be equal to
 * number of recipients (and consistent with {@link #EXTRA_RECIPIENT_CONTACT_URI} and {@link
 * #EXTRA_RECIPIENT_CONTACT_CHAT_ID}). When the value of the element for the particular
 * recipient is absent, it will be set to null.
 * <p>
 * The value of the elements comes from RawContact's display_name column.
 * <p>
 * <em>Example value: {""Jane Doe""}</em>
 */
]"
"[METADATA_ACCOUNT_TYPE = ""android.provider.account_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A string associated with an {@link #ACTION_VOICE_SEND_MESSAGE_TO_CONTACTS} activity
 * describing {@link RawContacts#ACCOUNT_TYPE} for the corresponding Contacts Provider
 * implementation.
 */
]"
"[METADATA_MIMETYPE = ""android.provider.mimetype""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A string associated with an {@link #ACTION_VOICE_SEND_MESSAGE_TO_CONTACTS} activity
 * describing {@link DataColumns#MIMETYPE} for the corresponding Contacts Provider
 * implementation.
 */
]"
"[ACTION_GET_MULTIPLE_PHONES = ""com.android.contacts.action.GET_MULTIPLE_PHONES""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Starts an Activity that lets the user select the multiple phones from a
 * list of phone numbers which come from the contacts or
 * {@link #EXTRA_PHONE_URIS}.
 * <p>
 * The phone numbers being passed in through {@link #EXTRA_PHONE_URIS}
 * could belong to the contacts or not, and will be selected by default.
 * <p>
 * The user's selection will be returned from
 * {@link android.app.Activity#onActivityResult(int, int, android.content.Intent)}
 * if the resultCode is
 * {@link android.app.Activity#RESULT_OK}, the array of picked phone
 * numbers are in the Intent's
 * {@link #EXTRA_PHONE_URIS}; otherwise, the
 * {@link android.app.Activity#RESULT_CANCELED} is returned if the user
 * left the Activity without changing the selection.
 *
 * @hide
 */
]"
"[ACTION_PROFILE_CHANGED = ""android.provider.Contacts.PROFILE_CHANGED""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A broadcast action which is sent when any change has been made to the profile, such
 * as the profile name or the picture.  A receiver must have
 * the android.permission.READ_PROFILE permission.
 *
 * @hide
 */
]"
"[EXTRA_FORCE_CREATE = ""com.android.contacts.action.FORCE_CREATE""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used with {@link #SHOW_OR_CREATE_CONTACT} to force creating a new
 * contact if no matching contact found. Otherwise, default behavior is
 * to prompt user with dialog before creating.
 * <p>
 * Type: BOOLEAN
 */
]"
"[EXTRA_CREATE_DESCRIPTION = ""com.android.contacts.action.CREATE_DESCRIPTION""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used with {@link #SHOW_OR_CREATE_CONTACT} to specify an exact
 * description to be shown when prompting user about creating a new
 * contact.
 * <p>
 * Type: STRING
 */
]"
"[EXTRA_PHONE_URIS = ""com.android.contacts.extra.PHONE_URIS""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used with {@link #ACTION_GET_MULTIPLE_PHONES} as the input or output value.
 * <p>
 * The phone numbers want to be picked by default should be passed in as
 * input value. These phone numbers could belong to the contacts or not.
 * <p>
 * The phone numbers which were picked by the user are returned as output
 * value.
 * <p>
 * Type: array of URIs, the tel URI is used for the phone numbers which don't
 * belong to any contact, the content URI is used for phone id in contacts.
 *
 * @hide
 */
]"
"[EXTRA_TARGET_RECT = ""target_rect""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Optional extra used with {@link #SHOW_OR_CREATE_CONTACT} to specify a
 * dialog location using screen coordinates. When not specified, the
 * dialog will be centered.
 *
 * @hide
 */
]"
"[EXTRA_MODE = ""mode""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Optional extra used with {@link #SHOW_OR_CREATE_CONTACT} to specify a
 * desired dialog style, usually a variation on size. One of
 * {@link #MODE_SMALL}, {@link #MODE_MEDIUM}, or {@link #MODE_LARGE}.
 *
 * @hide
 */
]"
"[MODE_SMALL = 1]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value for {@link #EXTRA_MODE} to show a small-sized dialog.
 *
 * @hide
 */
]"
"[MODE_MEDIUM = 2]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value for {@link #EXTRA_MODE} to show a medium-sized dialog.
 *
 * @hide
 */
]"
"[MODE_LARGE = 3]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value for {@link #EXTRA_MODE} to show a large-sized dialog.
 *
 * @hide
 */
]"
"[EXTRA_EXCLUDE_MIMES = ""exclude_mimes""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Optional extra used with {@link #SHOW_OR_CREATE_CONTACT} to indicate
 * a list of specific MIME-types to exclude and not display. Stored as a
 * {@link String} array.
 *
 * @hide
 */
]"
"[ACTION = Intent.ACTION_INSERT]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The action code to use when adding a contact
 */
]"
"[FULL_MODE = ""full_mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If present, forces a bypass of quick insert mode.
 */
]"
"[NAME = ""name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact name.
 * <P>Type: String</P>
 */
]"
"[PHONETIC_NAME = ""phonetic_name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact phonetic name.
 * <P>Type: String</P>
 */
]"
"[COMPANY = ""company""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact company.
 * <P>Type: String</P>
 */
]"
"[JOB_TITLE = ""job_title""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact job title.
 * <P>Type: String</P>
 */
]"
"[NOTES = ""notes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact notes.
 * <P>Type: String</P>
 */
]"
"[PHONE = ""phone""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact phone number.
 * <P>Type: String</P>
 */
]"
"[PHONE_TYPE = ""phone_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact phone number type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Phone},
 * or a string specifying a custom label.</P>
 */
]"
"[PHONE_ISPRIMARY = ""phone_isprimary""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the phone isprimary flag.
 * <P>Type: boolean</P>
 */
]"
"[SECONDARY_PHONE = ""secondary_phone""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional second contact phone number.
 * <P>Type: String</P>
 */
]"
"[SECONDARY_PHONE_TYPE = ""secondary_phone_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional second contact phone number type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Phone},
 * or a string specifying a custom label.</P>
 */
]"
"[TERTIARY_PHONE = ""tertiary_phone""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional third contact phone number.
 * <P>Type: String</P>
 */
]"
"[TERTIARY_PHONE_TYPE = ""tertiary_phone_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional third contact phone number type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Phone},
 * or a string specifying a custom label.</P>
 */
]"
"[EMAIL = ""email""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact email address.
 * <P>Type: String</P>
 */
]"
"[EMAIL_TYPE = ""email_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact email type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Email}
 * or a string specifying a custom label.</P>
 */
]"
"[EMAIL_ISPRIMARY = ""email_isprimary""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the email isprimary flag.
 * <P>Type: boolean</P>
 */
]"
"[SECONDARY_EMAIL = ""secondary_email""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional second contact email address.
 * <P>Type: String</P>
 */
]"
"[SECONDARY_EMAIL_TYPE = ""secondary_email_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional second contact email type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Email}
 * or a string specifying a custom label.</P>
 */
]"
"[TERTIARY_EMAIL = ""tertiary_email""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional third contact email address.
 * <P>Type: String</P>
 */
]"
"[TERTIARY_EMAIL_TYPE = ""tertiary_email_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional third contact email type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Email}
 * or a string specifying a custom label.</P>
 */
]"
"[POSTAL = ""postal""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact postal address.
 * <P>Type: String</P>
 */
]"
"[POSTAL_TYPE = ""postal_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact postal address type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.StructuredPostal}
 * or a string specifying a custom label.</P>
 */
]"
"[POSTAL_ISPRIMARY = ""postal_isprimary""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the postal isprimary flag.
 * <P>Type: boolean</P>
 */
]"
"[IM_HANDLE = ""im_handle""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an IM handle.
 * <P>Type: String</P>
 */
]"
"[IM_PROTOCOL = ""im_protocol""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the IM protocol
 */
]"
"[IM_ISPRIMARY = ""im_isprimary""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the IM isprimary flag.
 * <P>Type: boolean</P>
 */
]"
"[DATA = ""data""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field that allows the client to supply multiple rows of
 * arbitrary data for a single contact created using the {@link Intent#ACTION_INSERT}
 * or edited using {@link Intent#ACTION_EDIT}. It is an ArrayList of
 * {@link ContentValues}, one per data row. Supplying this extra is
 * similar to inserting multiple rows into the {@link Data} table,
 * except the user gets a chance to see and edit them before saving.
 * Each ContentValues object must have a value for {@link Data#MIMETYPE}.
 * If supplied values are not visible in the editor UI, they will be
 * dropped.  Duplicate data will dropped.  Some fields
 * like {@link CommonDataKinds.Email#TYPE Email.TYPE} may be automatically
 * adjusted to comply with the constraints of the specific account type.
 * For example, an Exchange contact can only have one phone numbers of type Home,
 * so the contact editor may choose a different type for this phone number to
 * avoid dropping the valueable part of the row, which is the phone number.
 * <p>
 * Example:
 * <pre>
 * ArrayList&lt;ContentValues&gt; data = new ArrayList&lt;ContentValues&gt;();
 *
 * ContentValues row1 = new ContentValues();
 * row1.put(Data.MIMETYPE, Organization.CONTENT_ITEM_TYPE);
 * row1.put(Organization.COMPANY, ""Android"");
 * data.add(row1);
 *
 * ContentValues row2 = new ContentValues();
 * row2.put(Data.MIMETYPE, Email.CONTENT_ITEM_TYPE);
 * row2.put(Email.TYPE, Email.TYPE_CUSTOM);
 * row2.put(Email.LABEL, ""Green Bot"");
 * row2.put(Email.ADDRESS, ""android@android.com"");
 * data.add(row2);
 *
 * Intent intent = new Intent(Intent.ACTION_INSERT, Contacts.CONTENT_URI);
 * intent.putParcelableArrayListExtra(Insert.DATA, data);
 *
 * startActivity(intent);
 * </pre>
 */
]"
"[EXTRA_ACCOUNT = ""android.provider.extra.ACCOUNT""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to specify the account in which to create the new contact.
 * <p>
 * If this value is not provided, the user is presented with a disambiguation
 * dialog to chose an account
 * <p>
 * Type: {@link Account}
 */
]"
"[EXTRA_DATA_SET = ""android.provider.extra.DATA_SET""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to specify the data set within the account in which to create the
 * new contact.
 * <p>
 * This value is optional - if it is not specified, the contact will be
 * created in the base account, with no data set.
 * <p>
 * Type: String
 */
]"
"[RAW_CONTACT_BACKUP_ID = ""raw_contact_backup_id""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The raw contact backup id.
 * A reference to the {@link ContactsContract.RawContacts#BACKUP_ID} that save the
 * persistent unique id for each raw contact within its source system.
 */
]"
"[ACCOUNT_TYPE = ""account_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The account type to which the raw_contact of this item is associated. See
 * {@link RawContacts#ACCOUNT_TYPE}
 */
]"
"[ACCOUNT_NAME = ""account_name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The account name to which the raw_contact of this item is associated. See
 * {@link RawContacts#ACCOUNT_NAME}
 */
]"
"[DATA_SET = ""data_set""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The data set within the account that the raw_contact of this row belongs to. This allows
 * multiple sync adapters for the same account type to distinguish between
 * each others' data.
 * {@link RawContacts#DATA_SET}
 */
]"
"[DATA = ""data""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A text column contains the Json string got from People API. The Json string contains
 * all the metadata related to the raw contact, i.e., all the data fields and
 * aggregation exceptions.
 *
 * Here is an example of the Json string got from the actual schema.
 * <pre>
 * {
 * ""unique_contact_id"": {
 * ""account_type"": ""CUSTOM_ACCOUNT"",
 * ""custom_account_type"": ""facebook"",
 * ""account_name"": ""android-test"",
 * ""contact_id"": ""1111111"",
 * ""data_set"": ""FOCUS""
 * },
 * ""contact_prefs"": {
 * ""send_to_voicemail"": true,
 * ""starred"": false,
 * ""pinned"": 2
 * },
 * ""aggregation_data"": [
 * {
 * ""type"": ""TOGETHER"",
 * ""contact_ids"": [
 * {
 * ""account_type"": ""GOOGLE_ACCOUNT"",
 * ""account_name"": ""android-test2"",
 * ""contact_id"": ""2222222"",
 * ""data_set"": ""GOOGLE_PLUS""
 * },
 * {
 * ""account_type"": ""GOOGLE_ACCOUNT"",
 * ""account_name"": ""android-test3"",
 * ""contact_id"": ""3333333"",
 * ""data_set"": ""CUSTOM"",
 * ""custom_data_set"": ""custom type""
 * }
 * ]
 * }
 * ],
 * ""field_data"": [
 * {
 * ""field_data_id"": ""1001"",
 * ""field_data_prefs"": {
 * ""is_primary"": true,
 * ""is_super_primary"": true
 * },
 * ""usage_stats"": [
 * {
 * ""usage_type"": ""CALL"",
 * ""last_time_used"": 10000001,
 * ""usage_count"": 10
 * }
 * ]
 * }
 * ]
 * }
 * </pre>
 */
]"
"[DELETED = ""deleted""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The ""deleted"" flag: ""0"" by default, ""1"" if the row has been marked
 * for deletion. When {@link android.content.ContentResolver#delete} is
 * called on a raw contact, updating MetadataSync table to set the flag of the raw contact
 * as ""1"", then metadata sync adapter deletes the raw contact metadata on the server.
 * <P>Type: INTEGER</P>
 */
]"
"[METADATA_AUTHORITY = ""com.android.contacts.metadata""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The authority for the contacts metadata
 */
]"
"[METADATA_AUTHORITY_URI = Uri.parse(""content://"" + METADATA_AUTHORITY)]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A content:// style uri to the authority for the contacts metadata
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(METADATA_AUTHORITY_URI, ""metadata_sync"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table.
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/contact_metadata""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of {@link #CONTENT_URI} providing a directory of contact metadata
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/contact_metadata""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of a {@link #CONTENT_URI} subdirectory of a single contact metadata.
 */
]"
"[ACCOUNT_TYPE = ""account_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A reference to the name of the account to which this state belongs
 * <P>Type: STRING</P>
 */
]"
"[ACCOUNT_NAME = ""account_name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A reference to the type of the account to which this state belongs
 * <P>Type: STRING</P>
 */
]"
"[DATA_SET = ""data_set""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A reference to the data set within the account to which this state belongs
 * <P>Type: STRING</P>
 */
]"
"[STATE = ""state""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The sync state associated with this account.
 * <P>Type: Blob</P>
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(MetadataSync.METADATA_AUTHORITY_URI, ""metadata_sync_state"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table.
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/contact_metadata_sync_state""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of {@link #CONTENT_URI} providing a directory of contact metadata sync
 * states.
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/contact_metadata_sync_state""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of a {@link #CONTENT_URI} subdirectory of a single contact metadata sync
 * state.
 */
]"
"[AIRPLANE_MODE_RADIOS = ""airplane_mode_radios""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A comma separated list of radios that need to be disabled when airplane mode
 * is on. This overrides WIFI_ON and BLUETOOTH_ON, if Wi-Fi and bluetooth are
 * included in the comma separated list.
 */
]"
"[AIRPLANE_MODE_TOGGLEABLE_RADIOS = ""airplane_mode_toggleable_radios""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A comma separated list of radios that should to be disabled when airplane mode
 * is on, but can be manually reenabled by the user.  For example, if RADIO_WIFI is
 * added to both AIRPLANE_MODE_RADIOS and AIRPLANE_MODE_TOGGLEABLE_RADIOS, then Wifi
 * will be turned off when entering airplane mode, but the user will be able to reenable
 * Wifi in the Settings app.
 *
 * {@hide}
 */
]"
"[BLUETOOTH_DISABLED_PROFILES = ""bluetooth_disabled_profiles""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A Long representing a bitmap of profiles that should be disabled when bluetooth starts.
 * See {@link android.bluetooth.BluetoothProfile}.
 * {@hide}
 */
]"
"[BLUETOOTH_INTEROPERABILITY_LIST = ""bluetooth_interoperability_list""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A semi-colon separated list of Bluetooth interoperability workarounds.
 * Each entry is a partial Bluetooth device address string and an integer representing
 * the feature to be disabled, separated by a comma. The integer must correspond
 * to a interoperability feature as defined in ""interop.h"" in /system/bt.
 * <p>
 * Example: <br/>
 * ""00:11:22,0;01:02:03:04,2""
 * @hide
 */
]"
"[WIFI_SLEEP_POLICY = ""wifi_sleep_policy""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The policy for deciding when Wi-Fi should go to sleep (which will in
 * turn switch to using the mobile data as an Internet connection).
 * <p>
 * Set to one of {@link #WIFI_SLEEP_POLICY_DEFAULT},
 * {@link #WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED}, or
 * {@link #WIFI_SLEEP_POLICY_NEVER}.
 */
]"
"[WIFI_SLEEP_POLICY_DEFAULT = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value for {@link #WIFI_SLEEP_POLICY} to use the default Wi-Fi sleep
 * policy, which is to sleep shortly after the turning off
 * according to the {@link #STAY_ON_WHILE_PLUGGED_IN} setting.
 */
]"
"[WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value for {@link #WIFI_SLEEP_POLICY} to use the default policy when
 * the device is on battery, and never go to sleep when the device is
 * plugged in.
 */
]"
"[WIFI_SLEEP_POLICY_NEVER = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value for {@link #WIFI_SLEEP_POLICY} to never go to sleep.
 */
]"
"[AUTO_TIME = ""auto_time""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value to specify if the user prefers the date, time and time zone
 * to be automatically fetched from the network (NITZ). 1=yes, 0=no
 */
]"
"[AUTO_TIME_ZONE = ""auto_time_zone""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value to specify if the user prefers the time zone
 * to be automatically fetched from the network (NITZ). 1=yes, 0=no
 */
]"
"[CAR_DOCK_SOUND = ""car_dock_sound""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URI for the car dock ""in"" event sound.
 * @hide
 */
]"
"[CAR_UNDOCK_SOUND = ""car_undock_sound""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URI for the car dock ""out"" event sound.
 * @hide
 */
]"
"[DESK_DOCK_SOUND = ""desk_dock_sound""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URI for the desk dock ""in"" event sound.
 * @hide
 */
]"
"[DESK_UNDOCK_SOUND = ""desk_undock_sound""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URI for the desk dock ""out"" event sound.
 * @hide
 */
]"
"[DOCK_SOUNDS_ENABLED = ""dock_sounds_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to play a sound for dock events.
 * @hide
 */
]"
"[LOCK_SOUND = ""lock_sound""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URI for the ""device locked"" (keyguard shown) sound.
 * @hide
 */
]"
"[UNLOCK_SOUND = ""unlock_sound""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URI for the ""device unlocked"" sound.
 * @hide
 */
]"
"[TRUSTED_SOUND = ""trusted_sound""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URI for the ""device is trusted"" sound, which is played when the device enters the trusted
 * state without unlocking.
 * @hide
 */
]"
"[LOW_BATTERY_SOUND = ""low_battery_sound""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URI for the low battery sound file.
 * @hide
 */
]"
"[POWER_SOUNDS_ENABLED = ""power_sounds_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to play a sound for low-battery alerts.
 * @hide
 */
]"
"[WIRELESS_CHARGING_STARTED_SOUND = ""wireless_charging_started_sound""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URI for the ""wireless charging started"" sound.
 * @hide
 */
]"
"[CHARGING_SOUNDS_ENABLED = ""charging_sounds_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to play a sound for charging events.
 * @hide
 */
]"
"[STAY_ON_WHILE_PLUGGED_IN = ""stay_on_while_plugged_in""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether we keep the device on while the device is plugged in.
 * Supported values are:
 * <ul>
 * <li>{@code 0} to never stay on while plugged in</li>
 * <li>{@link BatteryManager#BATTERY_PLUGGED_AC} to stay on for AC charger</li>
 * <li>{@link BatteryManager#BATTERY_PLUGGED_USB} to stay on for USB charger</li>
 * <li>{@link BatteryManager#BATTERY_PLUGGED_WIRELESS} to stay on for wireless charger</li>
 * </ul>
 * These values can be OR-ed together.
 */
]"
"[BUGREPORT_IN_POWER_MENU = ""bugreport_in_power_menu""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * When the user has enable the option to have a ""bug report"" command
 * in the power menu.
 * @hide
 */
]"
"[ADB_ENABLED = ""adb_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether ADB is enabled.
 */
]"
"[DEBUG_VIEW_ATTRIBUTES = ""debug_view_attributes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether Views are allowed to save their attribute data.
 * @hide
 */
]"
"[ASSISTED_GPS_ENABLED = ""assisted_gps_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether assisted GPS should be enabled or not.
 * @hide
 */
]"
"[BLUETOOTH_ON = ""bluetooth_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether bluetooth is enabled/disabled
 * 0=disabled. 1=enabled.
 */
]"
"[CDMA_CELL_BROADCAST_SMS = ""cdma_cell_broadcast_sms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * CDMA Cell Broadcast SMS
 * 0 = CDMA Cell Broadcast SMS disabled
 * 1 = CDMA Cell Broadcast SMS enabled
 * @hide
 */
]"
"[CDMA_ROAMING_MODE = ""roaming_settings""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The CDMA roaming mode 0 = Home Networks, CDMA default
 * 1 = Roaming on Affiliated networks
 * 2 = Roaming on any networks
 * @hide
 */
]"
"[CDMA_SUBSCRIPTION_MODE = ""subscription_mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The CDMA subscription mode 0 = RUIM/SIM (default)
 * 1 = NV
 * @hide
 */
]"
"[DATA_ACTIVITY_TIMEOUT_MOBILE = ""data_activity_timeout_mobile""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Inactivity timeout to track mobile data activity.
 *
 * If set to a positive integer, it indicates the inactivity timeout value in seconds to
 * infer the data activity of mobile network. After a period of no activity on mobile
 * networks with length specified by the timeout, an {@code ACTION_DATA_ACTIVITY_CHANGE}
 * intent is fired to indicate a transition of network status from ""active"" to ""idle"". Any
 * subsequent activity on mobile networks triggers the firing of {@code
 * ACTION_DATA_ACTIVITY_CHANGE} intent indicating transition from ""idle"" to ""active"".
 *
 * Network activity refers to transmitting or receiving data on the network interfaces.
 *
 * Tracking is disabled if set to zero or negative value.
 *
 * @hide
 */
]"
"[DATA_ACTIVITY_TIMEOUT_WIFI = ""data_activity_timeout_wifi""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Timeout to tracking Wifi data activity. Same as {@code DATA_ACTIVITY_TIMEOUT_MOBILE}
 * but for Wifi network.
 * @hide
 */
]"
"[DATA_ROAMING = ""data_roaming""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether or not data roaming is enabled. (0 = false, 1 = true)
 */
]"
"[MDC_INITIAL_MAX_RETRY = ""mdc_initial_max_retry""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The value passed to a Mobile DataConnection via bringUp which defines the
 * number of retries to preform when setting up the initial connection. The default
 * value defined in DataConnectionTrackerBase#DEFAULT_MDC_INITIAL_RETRY is currently 1.
 * @hide
 */
]"
"[FORCE_ALLOW_ON_EXTERNAL = ""force_allow_on_external""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether any package can be on external storage. When this is true, any
 * package, regardless of manifest values, is a candidate for installing
 * or moving onto external storage. (0 = false, 1 = true)
 * @hide
 */
]"
"[DEVELOPMENT_FORCE_RESIZABLE_ACTIVITIES = ""force_resizable_activities""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether any activity can be resized. When this is true, any
 * activity, regardless of manifest values, can be resized for multi-window.
 * (0 = false, 1 = true)
 * @hide
 */
]"
"[DEVELOPMENT_ENABLE_FREEFORM_WINDOWS_SUPPORT = ""enable_freeform_support""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to enable experimental freeform support for windows.
 * @hide
 */
]"
"[DEVELOPMENT_SETTINGS_ENABLED = ""development_settings_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether user has enabled development settings.
 */
]"
"[DEVICE_PROVISIONED = ""device_provisioned""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the device has been provisioned (0 = false, 1 = true).
 * <p>On a multiuser device with a separate system user, the screen may be locked
 * as soon as this is set to true and further activities cannot be launched on the
 * system user unless they are marked to show over keyguard.
 */
]"
"[DEVICE_PROVISIONING_MOBILE_DATA_ENABLED = ""device_provisioning_mobile_data""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether mobile data should be allowed while the device is being provisioned.
 * This allows the provisioning process to turn off mobile data before the user
 * has an opportunity to set things up, preventing other processes from burning
 * precious bytes before wifi is setup.
 * (0 = false, 1 = true)
 * @hide
 */
]"
"[DISPLAY_SIZE_FORCED = ""display_size_forced""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The saved value for WindowManagerService.setForcedDisplaySize().
 * Two integers separated by a comma.  If unset, then use the real display size.
 * @hide
 */
]"
"[DISPLAY_SCALING_FORCE = ""display_scaling_force""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The saved value for WindowManagerService.setForcedDisplayScalingMode().
 * 0 or unset if scaling is automatic, 1 if scaling is disabled.
 * @hide
 */
]"
"[DOWNLOAD_MAX_BYTES_OVER_MOBILE = ""download_manager_max_bytes_over_mobile""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The maximum size, in bytes, of a download that the download manager will transfer over
 * a non-wifi connection.
 * @hide
 */
]"
"[DOWNLOAD_RECOMMENDED_MAX_BYTES_OVER_MOBILE = ""download_manager_recommended_max_bytes_over_mobile""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The recommended maximum size, in bytes, of a download that the download manager should
 * transfer over a non-wifi connection. Over this size, the use will be warned, but will
 * have the option to start the download over the mobile connection anyway.
 * @hide
 */
]"
"[INSTALL_NON_MARKET_APPS = Secure.INSTALL_NON_MARKET_APPS]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @deprecated Use {@link android.provider.Settings.Secure#INSTALL_NON_MARKET_APPS} instead
 */
]"
"[HDMI_CONTROL_ENABLED = ""hdmi_control_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether HDMI control shall be enabled. If disabled, no CEC/MHL command will be
 * sent or processed. (0 = false, 1 = true)
 * @hide
 */
]"
"[HDMI_SYSTEM_AUDIO_ENABLED = ""hdmi_system_audio_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether HDMI system audio is enabled. If enabled, TV internal speaker is muted,
 * and the output is redirected to AV Receiver connected via
 * {@Global#HDMI_SYSTEM_AUDIO_OUTPUT}.
 * @hide
 */
]"
"[HDMI_CONTROL_AUTO_WAKEUP_ENABLED = ""hdmi_control_auto_wakeup_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether TV will automatically turn on upon reception of the CEC command
 * &lt;Text View On&gt; or &lt;Image View On&gt;. (0 = false, 1 = true)
 * @hide
 */
]"
"[HDMI_CONTROL_AUTO_DEVICE_OFF_ENABLED = ""hdmi_control_auto_device_off_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether TV will also turn off other CEC devices when it goes to standby mode.
 * (0 = false, 1 = true)
 * @hide
 */
]"
"[MHL_INPUT_SWITCHING_ENABLED = ""mhl_input_switching_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether TV will switch to MHL port when a mobile device is plugged in.
 * (0 = false, 1 = true)
 * @hide
 */
]"
"[MHL_POWER_CHARGE_ENABLED = ""mhl_power_charge_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether TV will charge the mobile device connected at MHL port. (0 = false, 1 = true)
 * @hide
 */
]"
"[MOBILE_DATA = ""mobile_data""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether mobile data connections are allowed by the user.  See
 * ConnectivityManager for more info.
 * @hide
 */
]"
"[MOBILE_DATA_ALWAYS_ON = ""mobile_data_always_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the mobile data connection should remain active even when higher
 * priority networks like WiFi are active, to help make network switching faster.
 *
 * See ConnectivityService for more info.
 *
 * (0 = disabled, 1 = enabled)
 * @hide
 */
]"
"[NETSTATS_ENABLED = ""netstats_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_POLL_INTERVAL = ""netstats_poll_interval""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_TIME_CACHE_MAX_AGE = ""netstats_time_cache_max_age""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_GLOBAL_ALERT_BYTES = ""netstats_global_alert_bytes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_SAMPLE_ENABLED = ""netstats_sample_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_DEV_BUCKET_DURATION = ""netstats_dev_bucket_duration""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_DEV_PERSIST_BYTES = ""netstats_dev_persist_bytes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_DEV_ROTATE_AGE = ""netstats_dev_rotate_age""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_DEV_DELETE_AGE = ""netstats_dev_delete_age""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_UID_BUCKET_DURATION = ""netstats_uid_bucket_duration""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_UID_PERSIST_BYTES = ""netstats_uid_persist_bytes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_UID_ROTATE_AGE = ""netstats_uid_rotate_age""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_UID_DELETE_AGE = ""netstats_uid_delete_age""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_UID_TAG_BUCKET_DURATION = ""netstats_uid_tag_bucket_duration""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_UID_TAG_PERSIST_BYTES = ""netstats_uid_tag_persist_bytes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_UID_TAG_ROTATE_AGE = ""netstats_uid_tag_rotate_age""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETSTATS_UID_TAG_DELETE_AGE = ""netstats_uid_tag_delete_age""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[NETWORK_PREFERENCE = ""network_preference""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * User preference for which network(s) should be used. Only the
 * connectivity service should touch this.
 */
]"
"[NETWORK_SCORER_APP = ""network_scorer_app""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Which package name to use for network scoring. If null, or if the package is not a valid
 * scorer app, external network scores will neither be requested nor accepted.
 * @hide
 */
]"
"[NITZ_UPDATE_DIFF = ""nitz_update_diff""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If the NITZ_UPDATE_DIFF time is exceeded then an automatic adjustment
 * to SystemClock will be allowed even if NITZ_UPDATE_SPACING has not been
 * exceeded.
 * @hide
 */
]"
"[NITZ_UPDATE_SPACING = ""nitz_update_spacing""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The length of time in milli-seconds that automatic small adjustments to
 * SystemClock are ignored if NITZ_UPDATE_DIFF is not exceeded.
 * @hide
 */
]"
"[NTP_SERVER = ""ntp_server""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Preferred NTP server. {@hide}
 */
]"
"[NTP_TIMEOUT = ""ntp_timeout""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Timeout in milliseconds to wait for NTP server. {@hide}
 */
]"
"[STORAGE_BENCHMARK_INTERVAL = ""storage_benchmark_interval""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[DNS_RESOLVER_SAMPLE_VALIDITY_SECONDS = ""dns_resolver_sample_validity_seconds""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Sample validity in seconds to configure for the system DNS resolver.
 * {@hide}
 */
]"
"[DNS_RESOLVER_SUCCESS_THRESHOLD_PERCENT = ""dns_resolver_success_threshold_percent""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Success threshold in percent for use with the system DNS resolver.
 * {@hide}
 */
]"
"[DNS_RESOLVER_MIN_SAMPLES = ""dns_resolver_min_samples""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Minimum number of samples needed for statistics to be considered meaningful in the
 * system DNS resolver.
 * {@hide}
 */
]"
"[DNS_RESOLVER_MAX_SAMPLES = ""dns_resolver_max_samples""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Maximum number taken into account for statistics purposes in the system DNS resolver.
 * {@hide}
 */
]"
"[OTA_DISABLE_AUTOMATIC_UPDATE = ""ota_disable_automatic_update""]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to disable the automatic scheduling of system updates.
 * 1 = system updates won't be automatically scheduled (will always
 * present notification instead).
 * 0 = system updates will be automatically scheduled. (default)
 * @hide
 */
]"
"[PACKAGE_VERIFIER_ENABLE = ""package_verifier_enable""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the package manager should send package verification broadcasts for verifiers to
 * review apps prior to installation.
 * 1 = request apps to be verified prior to installation, if a verifier exists.
 * 0 = do not verify apps before installation
 * @hide
 */
]"
"[PACKAGE_VERIFIER_TIMEOUT = ""verifier_timeout""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Timeout for package verification.
 * @hide
 */
]"
"[PACKAGE_VERIFIER_DEFAULT_RESPONSE = ""verifier_default_response""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Default response code for package verification.
 * @hide
 */
]"
"[PACKAGE_VERIFIER_SETTING_VISIBLE = ""verifier_setting_visible""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Show package verification setting in the Settings app.
 * 1 = show (default)
 * 0 = hide
 * @hide
 */
]"
"[PACKAGE_VERIFIER_INCLUDE_ADB = ""verifier_verify_adb_installs""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Run package verification on apps installed through ADB/ADT/USB
 * 1 = perform package verification on ADB installs (default)
 * 0 = bypass package verification on ADB installs
 * @hide
 */
]"
"[FSTRIM_MANDATORY_INTERVAL = ""fstrim_mandatory_interval""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Time since last fstrim (milliseconds) after which we force one to happen
 * during device startup.  If unset, the default is 3 days.
 * @hide
 */
]"
"[PDP_WATCHDOG_POLL_INTERVAL_MS = ""pdp_watchdog_poll_interval_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds at which to check packet counts on the
 * mobile data interface when screen is on, to detect possible data
 * connection problems.
 * @hide
 */
]"
"[PDP_WATCHDOG_LONG_POLL_INTERVAL_MS = ""pdp_watchdog_long_poll_interval_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds at which to check packet counts on the
 * mobile data interface when screen is off, to detect possible data
 * connection problems.
 * @hide
 */
]"
"[PDP_WATCHDOG_ERROR_POLL_INTERVAL_MS = ""pdp_watchdog_error_poll_interval_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds at which to check packet counts on the
 * mobile data interface after {@link #PDP_WATCHDOG_TRIGGER_PACKET_COUNT}
 * outgoing packets has been reached without incoming packets.
 * @hide
 */
]"
"[PDP_WATCHDOG_TRIGGER_PACKET_COUNT = ""pdp_watchdog_trigger_packet_count""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of outgoing packets sent without seeing an incoming packet
 * that triggers a countdown (of {@link #PDP_WATCHDOG_ERROR_POLL_COUNT}
 * device is logged to the event log
 * @hide
 */
]"
"[PDP_WATCHDOG_ERROR_POLL_COUNT = ""pdp_watchdog_error_poll_count""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of polls to perform (at {@link #PDP_WATCHDOG_ERROR_POLL_INTERVAL_MS})
 * after hitting {@link #PDP_WATCHDOG_TRIGGER_PACKET_COUNT} before
 * attempting data connection recovery.
 * @hide
 */
]"
"[PDP_WATCHDOG_MAX_PDP_RESET_FAIL_COUNT = ""pdp_watchdog_max_pdp_reset_fail_count""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of failed PDP reset attempts before moving to something more
 * drastic: re-registering to the network.
 * @hide
 */
]"
"[SAMPLING_PROFILER_MS = ""sampling_profiler_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A positive value indicates how often the SamplingProfiler
 * should take snapshots. Zero value means SamplingProfiler
 * is disabled.
 *
 * @hide
 */
]"
"[SETUP_PREPAID_DATA_SERVICE_URL = ""setup_prepaid_data_service_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL to open browser on to allow user to manage a prepay account
 * @hide
 */
]"
"[SETUP_PREPAID_DETECTION_TARGET_URL = ""setup_prepaid_detection_target_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL to attempt a GET on to see if this is a prepay device
 * @hide
 */
]"
"[SETUP_PREPAID_DETECTION_REDIR_HOST = ""setup_prepaid_detection_redir_host""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Host to check for a redirect to after an attempt to GET
 * SETUP_PREPAID_DETECTION_TARGET_URL. (If we redirected there,
 * this is a prepaid device with zero balance.)
 * @hide
 */
]"
"[SMS_OUTGOING_CHECK_INTERVAL_MS = ""sms_outgoing_check_interval_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds at which to check the number of SMS sent out without asking
 * for use permit, to limit the un-authorized SMS usage.
 *
 * @hide
 */
]"
"[SMS_OUTGOING_CHECK_MAX_COUNT = ""sms_outgoing_check_max_count""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of outgoing SMS sent without asking for user permit (of {@link
 * #SMS_OUTGOING_CHECK_INTERVAL_MS}
 *
 * @hide
 */
]"
"[SMS_SHORT_CODE_CONFIRMATION = ""sms_short_code_confirmation""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to disable SMS short code confirmation - defaults to true.
 * True indcates we will do the check, etc.  Set to false to disable.
 * @see com.android.internal.telephony.SmsUsageMonitor
 * @hide
 */
]"
"[SMS_SHORT_CODE_RULE = ""sms_short_code_rule""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to select which country we use to determine premium sms codes.
 * One of com.android.internal.telephony.SMSDispatcher.PREMIUM_RULE_USE_SIM,
 * com.android.internal.telephony.SMSDispatcher.PREMIUM_RULE_USE_NETWORK,
 * or com.android.internal.telephony.SMSDispatcher.PREMIUM_RULE_USE_BOTH.
 * @hide
 */
]"
"[TCP_DEFAULT_INIT_RWND = ""tcp_default_init_rwnd""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to select TCP's default initial receiver window size in segments - defaults to a build config value
 * @hide
 */
]"
"[TETHER_SUPPORTED = ""tether_supported""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to disable Tethering on a device - defaults to true
 * @hide
 */
]"
"[TETHER_DUN_REQUIRED = ""tether_dun_required""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to require DUN APN on the device or not - defaults to a build config value
 * which defaults to false
 * @hide
 */
]"
"[TETHER_DUN_APN = ""tether_dun_apn""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to hold a gservices-provisioned apn value for DUN.  If set, or the
 * corresponding build config values are set it will override the APN DB
 * values.
 * Consists of a comma seperated list of strings:
 * ""name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type""
 * note that empty fields can be ommitted: ""name,apn,,,,,,,,,310,260,,DUN""
 * @hide
 */
]"
"[CARRIER_APP_WHITELIST = ""carrier_app_whitelist""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * List of carrier apps which are whitelisted to prompt the user for install when
 * a sim card with matching uicc carrier privilege rules is inserted.
 *
 * The value is ""package1;package2;...""
 * @hide
 */
]"
"[USB_MASS_STORAGE_ENABLED = ""usb_mass_storage_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * USB Mass Storage Enabled
 */
]"
"[USE_GOOGLE_MAIL = ""use_google_mail""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If this setting is set (to anything), then all references
 * to Gmail on the device must change to Google Mail.
 */
]"
"[WEBVIEW_DATA_REDUCTION_PROXY_KEY = ""webview_data_reduction_proxy_key""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Webview Data reduction proxy key.
 * @hide
 */
]"
"[WEBVIEW_FALLBACK_LOGIC_ENABLED = ""webview_fallback_logic_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether or not the WebView fallback mechanism should be enabled.
 * 0=disabled, 1=enabled.
 * @hide
 */
]"
"[WEBVIEW_PROVIDER = ""webview_provider""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Name of the package used as WebView provider (if unset the provider is instead determined
 * by the system).
 * @hide
 */
]"
"[WEBVIEW_MULTIPROCESS = ""webview_multiprocess""]","[@SystemApi]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Developer setting to enable WebView multiprocess rendering.
 * @hide
 */
]"
"[WIFI_DISPLAY_ON = ""wifi_display_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether Wifi display is enabled/disabled
 * 0=disabled. 1=enabled.
 * @hide
 */
]"
"[WIFI_DISPLAY_CERTIFICATION_ON = ""wifi_display_certification_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether Wifi display certification mode is enabled/disabled
 * 0=disabled. 1=enabled.
 * @hide
 */
]"
"[WIFI_DISPLAY_WPS_CONFIG = ""wifi_display_wps_config""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * WPS Configuration method used by Wifi display, this setting only
 * takes effect when WIFI_DISPLAY_CERTIFICATION_ON is 1 (enabled).
 *
 * Possible values are:
 *
 * WpsInfo.INVALID: use default WPS method chosen by framework
 * WpsInfo.PBC    : use Push button
 * WpsInfo.KEYPAD : use Keypad
 * WpsInfo.DISPLAY: use Display
 * @hide
 */
]"
"[WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON = ""wifi_networks_available_notification_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to notify the user of open networks.
 * <p>
 * If not connected and the scan results have an open network, we will
 * put this notification up. If we attempt to connect to a network or
 * the open network(s) disappear, we remove the notification. When we
 * show the notification, we will not show it again for
 * {@link android.provider.Settings.Secure#WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY} time.
 */
]"
"[WIMAX_NETWORKS_AVAILABLE_NOTIFICATION_ON = ""wimax_networks_available_notification_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY = ""wifi_networks_available_repeat_delay""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Delay (in seconds) before repeating the Wi-Fi networks available notification.
 * Connecting to a network will reset the timer.
 */
]"
"[WIFI_COUNTRY_CODE = ""wifi_country_code""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * 802.11 country code in ISO 3166 format
 * @hide
 */
]"
"[WIFI_FRAMEWORK_SCAN_INTERVAL_MS = ""wifi_framework_scan_interval_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds to issue wake up scans when wifi needs
 * to connect. This is necessary to connect to an access point when
 * device is on the move and the screen is off.
 * @hide
 */
]"
"[WIFI_IDLE_MS = ""wifi_idle_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds after which Wi-Fi is considered idle.
 * When idle, it is possible for the device to be switched from Wi-Fi to
 * the mobile data network.
 * @hide
 */
]"
"[WIFI_NUM_OPEN_NETWORKS_KEPT = ""wifi_num_open_networks_kept""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * When the number of open networks exceeds this number, the
 * least-recently-used excess networks will be removed.
 */
]"
"[WIFI_ON = ""wifi_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the Wi-Fi should be on.  Only the Wi-Fi service should touch this.
 */
]"
"[WIFI_SCAN_ALWAYS_AVAILABLE = ""wifi_scan_always_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Setting to allow scans to be enabled even wifi is turned off for connectivity.
 * @hide
 */
]"
"[BLE_SCAN_ALWAYS_AVAILABLE = ""ble_scan_always_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Settings to allow BLE scans to be enabled even when Bluetooth is turned off for
 * connectivity.
 * @hide
 */
]"
"[WIFI_SAVED_STATE = ""wifi_saved_state""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to save the Wifi_ON state prior to tethering.
 * This state will be checked to restore Wifi after
 * the user turns off tethering.
 *
 * @hide
 */
]"
"[WIFI_SUPPLICANT_SCAN_INTERVAL_MS = ""wifi_supplicant_scan_interval_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds to scan as used by the wifi supplicant
 * @hide
 */
]"
"[WIFI_ENHANCED_AUTO_JOIN = ""wifi_enhanced_auto_join""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * whether frameworks handles wifi auto-join
 * @hide
 */
]"
"[WIFI_NETWORK_SHOW_RSSI = ""wifi_network_show_rssi""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * whether settings show RSSI
 * @hide
 */
]"
"[WIFI_SCAN_INTERVAL_WHEN_P2P_CONNECTED_MS = ""wifi_scan_interval_p2p_connected_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds to scan at supplicant when p2p is connected
 * @hide
 */
]"
"[WIFI_WATCHDOG_ON = ""wifi_watchdog_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the Wi-Fi watchdog is enabled.
 */
]"
"[WIFI_WATCHDOG_POOR_NETWORK_TEST_ENABLED = ""wifi_watchdog_poor_network_test_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Setting to turn off poor network avoidance on Wi-Fi. Feature is enabled by default and
 * the setting needs to be set to 0 to disable it.
 * @hide
 */
]"
"[WIFI_SUSPEND_OPTIMIZATIONS_ENABLED = ""wifi_suspend_optimizations_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Setting to turn on suspend optimizations at screen off on Wi-Fi. Enabled by default and
 * needs to be set to 0 to disable it.
 * @hide
 */
]"
"[WIFI_VERBOSE_LOGGING_ENABLED = ""wifi_verbose_logging_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Setting to enable verbose logging in Wi-Fi; disabled by default, and setting to 1
 * will enable it. In the future, additional values may be supported.
 * @hide
 */
]"
"[WIFI_MAX_DHCP_RETRY_COUNT = ""wifi_max_dhcp_retry_count""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The maximum number of times we will retry a connection to an access
 * point for which we have failed in acquiring an IP address from DHCP.
 * A value of N means that we will make N+1 connection attempts in all.
 */
]"
"[WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS = ""wifi_mobile_data_transition_wakelock_timeout_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Maximum amount of time in milliseconds to hold a wakelock while waiting for mobile
 * data connectivity to be established after a disconnect from Wi-Fi.
 */
]"
"[WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN = ""wifi_device_owner_configs_lockdown""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This setting controls whether WiFi configurations created by a Device Owner app
 * should be locked down (that is, be editable or removable only by the Device Owner App,
 * not even by Settings app).
 * This setting takes integer values. Non-zero values mean DO created configurations
 * are locked down. Value of zero means they are not. Default value in the absence of
 * actual value to this setting is 0.
 */
]"
"[WIFI_FREQUENCY_BAND = ""wifi_frequency_band""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The operational wifi frequency band
 * Set to one of {@link WifiManager#WIFI_FREQUENCY_BAND_AUTO},
 * {@link WifiManager#WIFI_FREQUENCY_BAND_5GHZ} or
 * {@link WifiManager#WIFI_FREQUENCY_BAND_2GHZ}
 *
 * @hide
 */
]"
"[WIFI_P2P_DEVICE_NAME = ""wifi_p2p_device_name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The Wi-Fi peer-to-peer device name
 * @hide
 */
]"
"[WIFI_REENABLE_DELAY_MS = ""wifi_reenable_delay""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The min time between wifi disable and wifi enable
 * @hide
 */
]"
"[WIFI_EPHEMERAL_OUT_OF_RANGE_TIMEOUT_MS = ""wifi_ephemeral_out_of_range_timeout_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Timeout for ephemeral networks when all known BSSIDs go out of range. We will disconnect
 * from an ephemeral network if there is no BSSID for that network with a non-null score that
 * has been seen in this time period.
 *
 * If this is less than or equal to zero, we use a more conservative behavior and only check
 * for a non-null score from the currently connected or target BSSID.
 * @hide
 */
]"
"[DATA_STALL_ALARM_NON_AGGRESSIVE_DELAY_IN_MS = ""data_stall_alarm_non_aggressive_delay_in_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of milliseconds to delay when checking for data stalls during
 * non-aggressive detection. (screen is turned off.)
 * @hide
 */
]"
"[DATA_STALL_ALARM_AGGRESSIVE_DELAY_IN_MS = ""data_stall_alarm_aggressive_delay_in_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of milliseconds to delay when checking for data stalls during
 * aggressive detection. (screen on or suspected data stall)
 * @hide
 */
]"
"[PROVISIONING_APN_ALARM_DELAY_IN_MS = ""provisioning_apn_alarm_delay_in_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of milliseconds to allow the provisioning apn to remain active
 * @hide
 */
]"
"[GPRS_REGISTER_CHECK_PERIOD_MS = ""gprs_register_check_period_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in milliseconds at which to check gprs registration
 * after the first registration mismatch of gprs and voice service,
 * to detect possible data network registration problems.
 *
 * @hide
 */
]"
"[WTF_IS_FATAL = ""wtf_is_fatal""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Nonzero causes Log.wtf() to crash.
 * @hide
 */
]"
"[MODE_RINGER = ""mode_ringer""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Ringer mode. This is used internally, changing this value will not
 * change the ringer mode. See AudioManager.
 */
]"
"[OVERLAY_DISPLAY_DEVICES = ""overlay_display_devices""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Overlay display devices setting.
 * The associated value is a specially formatted string that describes the
 * size and density of simulated secondary display devices.
 * <p>
 * Format: {width}x{height}/{dpi};...
 * </p><p>
 * Example:
 * <ul>
 * <li><code>1280x720/213</code>: make one overlay that is 1280x720 at 213dpi.</li>
 * <li><code>1920x1080/320;1280x720/213</code>: make two overlays, the first
 * at 1080p and the second at 720p.</li>
 * <li>If the value is empty, then no overlay display devices are created.</li>
 * </ul></p>
 *
 * @hide
 */
]"
"[BATTERY_DISCHARGE_DURATION_THRESHOLD = ""battery_discharge_duration_threshold""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Threshold values for the duration and level of a discharge cycle,
 * under which we log discharge cycle info.
 *
 * @hide
 */
]"
"[BATTERY_DISCHARGE_THRESHOLD = ""battery_discharge_threshold""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[SEND_ACTION_APP_ERROR = ""send_action_app_error""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Flag for allowing ActivityManagerService to send ACTION_APP_ERROR
 * intents on application crashes and ANRs. If this is disabled, the
 * crash/ANR dialog will never display the ""Report"" button.
 * <p>
 * Type: int (0 = disallow, 1 = allow)
 *
 * @hide
 */
]"
"[DROPBOX_AGE_SECONDS = ""dropbox_age_seconds""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Maximum age of entries kept by {@link DropBoxManager}.
 *
 * @hide
 */
]"
"[DROPBOX_MAX_FILES = ""dropbox_max_files""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Maximum number of entry files which {@link DropBoxManager} will keep
 * around.
 *
 * @hide
 */
]"
"[DROPBOX_QUOTA_KB = ""dropbox_quota_kb""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Maximum amount of disk space used by {@link DropBoxManager} no matter
 * what.
 *
 * @hide
 */
]"
"[DROPBOX_QUOTA_PERCENT = ""dropbox_quota_percent""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Percent of free disk (excluding reserve) which {@link DropBoxManager}
 * will use.
 *
 * @hide
 */
]"
"[DROPBOX_RESERVE_PERCENT = ""dropbox_reserve_percent""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Percent of total disk which {@link DropBoxManager} will never dip
 * into.
 *
 * @hide
 */
]"
"[DROPBOX_TAG_PREFIX = ""dropbox:""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Prefix for per-tag dropbox disable/enable settings.
 *
 * @hide
 */
]"
"[ERROR_LOGCAT_PREFIX = ""logcat_for_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Lines of logcat to include with system crash/ANR/etc. reports, as a
 * prefix of the dropbox tag of the report type. For example,
 * ""logcat_for_system_server_anr"" controls the lines of logcat captured
 * with system server ANR reports. 0 to disable.
 *
 * @hide
 */
]"
"[SYS_FREE_STORAGE_LOG_INTERVAL = ""sys_free_storage_log_interval""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The interval in minutes after which the amount of free storage left
 * on the device is logged to the event log
 *
 * @hide
 */
]"
"[DISK_FREE_CHANGE_REPORTING_THRESHOLD = ""disk_free_change_reporting_threshold""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Threshold for the amount of change in disk free space required to
 * report the amount of free space. Used to prevent spamming the logs
 * when the disk free space isn't changing frequently.
 *
 * @hide
 */
]"
"[SYS_STORAGE_THRESHOLD_PERCENTAGE = ""sys_storage_threshold_percentage""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Minimum percentage of free storage on the device that is used to
 * determine if the device is running low on storage. The default is 10.
 * <p>
 * Say this value is set to 10, the device is considered running low on
 * storage if 90% or more of the device storage is filled up.
 *
 * @hide
 */
]"
"[SYS_STORAGE_THRESHOLD_MAX_BYTES = ""sys_storage_threshold_max_bytes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Maximum byte size of the low storage threshold. This is to ensure
 * that {@link #SYS_STORAGE_THRESHOLD_PERCENTAGE} does not result in an
 * overly large threshold for large storage devices. Currently this must
 * be less than 2GB. This default is 500MB.
 *
 * @hide
 */
]"
"[SYS_STORAGE_FULL_THRESHOLD_BYTES = ""sys_storage_full_threshold_bytes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Minimum bytes of free storage on the device before the data partition
 * is considered full. By default, 1 MB is reserved to avoid system-wide
 * SQLite disk full exceptions.
 *
 * @hide
 */
]"
"[SYNC_MAX_RETRY_DELAY_IN_SECONDS = ""sync_max_retry_delay_in_seconds""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The maximum reconnect delay for short network outages or when the
 * network is suspended due to phone use.
 *
 * @hide
 */
]"
"[CONNECTIVITY_CHANGE_DELAY = ""connectivity_change_delay""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of milliseconds to delay before sending out
 * {@link ConnectivityManager#CONNECTIVITY_ACTION} broadcasts. Ignored.
 *
 * @hide
 */
]"
"[CONNECTIVITY_SAMPLING_INTERVAL_IN_SECONDS = ""connectivity_sampling_interval_in_seconds""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PAC_CHANGE_DELAY = ""pac_change_delay""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The series of successively longer delays used in retrying to download PAC file.
 * Last delay is used between successful PAC downloads.
 *
 * @hide
 */
]"
"[CAPTIVE_PORTAL_DETECTION_ENABLED = ""captive_portal_detection_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Setting to turn off captive portal detection. Feature is enabled by
 * default and the setting needs to be set to 0 to disable it.
 *
 * @hide
 */
]"
"[CAPTIVE_PORTAL_SERVER = ""captive_portal_server""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The server used for captive portal detection upon a new conection. A
 * 204 response code from the server is used for validation.
 *
 * @hide
 */
]"
"[CAPTIVE_PORTAL_USE_HTTPS = ""captive_portal_use_https""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to use HTTPS for network validation. This is enabled by default and the setting
 * needs to be set to 0 to disable it. This setting is a misnomer because captive portals
 * don't actually use HTTPS, but it's consistent with the other settings.
 *
 * @hide
 */
]"
"[NSD_ON = ""nsd_on""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether network service discovery is enabled.
 *
 * @hide
 */
]"
"[SET_INSTALL_LOCATION = ""set_install_location""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Let user pick default install location.
 *
 * @hide
 */
]"
"[DEFAULT_INSTALL_LOCATION = ""default_install_location""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Default install location value.
 * 0 = auto, let system decide
 * 1 = internal
 * 2 = sdcard
 * @hide
 */
]"
"[INET_CONDITION_DEBOUNCE_UP_DELAY = ""inet_condition_debounce_up_delay""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * ms during which to consume extra events related to Inet connection
 * condition after a transtion to fully-connected
 *
 * @hide
 */
]"
"[INET_CONDITION_DEBOUNCE_DOWN_DELAY = ""inet_condition_debounce_down_delay""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * ms during which to consume extra events related to Inet connection
 * condtion after a transtion to partly-connected
 *
 * @hide
 */
]"
"[READ_EXTERNAL_STORAGE_ENFORCED_DEFAULT = ""read_external_storage_enforced_default""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[HTTP_PROXY = ""http_proxy""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Host name and port for global http proxy. Uses ':' seperator for
 * between host and port.
 */
]"
"[GLOBAL_HTTP_PROXY_HOST = ""global_http_proxy_host""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Host name for global http proxy. Set via ConnectivityManager.
 *
 * @hide
 */
]"
"[GLOBAL_HTTP_PROXY_PORT = ""global_http_proxy_port""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Integer host port for global http proxy. Set via ConnectivityManager.
 *
 * @hide
 */
]"
"[GLOBAL_HTTP_PROXY_EXCLUSION_LIST = ""global_http_proxy_exclusion_list""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Exclusion list for global proxy. This string contains a list of
 * comma-separated domains where the global proxy does not apply.
 * Domains should be listed in a comma- separated list. Example of
 * acceptable formats: "".domain1.com,my.domain2.com"" Use
 * ConnectivityManager to set/get.
 *
 * @hide
 */
]"
"[GLOBAL_HTTP_PROXY_PAC = ""global_proxy_pac_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The location PAC File for the proxy.
 * @hide
 */
]"
"[SET_GLOBAL_HTTP_PROXY = ""set_global_http_proxy""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Enables the UI setting to allow the user to specify the global HTTP
 * proxy and associated exclusion list.
 *
 * @hide
 */
]"
"[DEFAULT_DNS_SERVER = ""default_dns_server""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Setting for default DNS in case nobody suggests one
 *
 * @hide
 */
]"
"[BLUETOOTH_HEADSET_PRIORITY_PREFIX = ""bluetooth_headset_priority_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[BLUETOOTH_A2DP_SINK_PRIORITY_PREFIX = ""bluetooth_a2dp_sink_priority_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[BLUETOOTH_A2DP_SRC_PRIORITY_PREFIX = ""bluetooth_a2dp_src_priority_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[BLUETOOTH_INPUT_DEVICE_PRIORITY_PREFIX = ""bluetooth_input_device_priority_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[BLUETOOTH_MAP_PRIORITY_PREFIX = ""bluetooth_map_priority_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[BLUETOOTH_PBAP_CLIENT_PRIORITY_PREFIX = ""bluetooth_pbap_client_priority_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[BLUETOOTH_SAP_PRIORITY_PREFIX = ""bluetooth_sap_priority_""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * {@hide}
 */
]"
"[DEVICE_IDLE_CONSTANTS = ""device_idle_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Device Idle (Doze) specific settings.
 * This is encoded as a key=value list, separated by commas. Ex:
 *
 * ""inactive_timeout=60000,sensing_timeout=400000""
 *
 * The following keys are supported:
 *
 * <pre>
 * inactive_to                      (long)
 * sensing_to                       (long)
 * motion_inactive_to               (long)
 * idle_after_inactive_to           (long)
 * idle_pending_to                  (long)
 * max_idle_pending_to              (long)
 * idle_pending_factor              (float)
 * idle_to                          (long)
 * max_idle_to                      (long)
 * idle_factor                      (float)
 * min_time_to_alarm                (long)
 * max_temp_app_whitelist_duration  (long)
 * notification_whitelist_duration  (long)
 * </pre>
 *
 * <p>
 * Type: string
 * @hide
 * @see com.android.server.DeviceIdleController.Constants
 */
]"
"[DEVICE_IDLE_CONSTANTS_WATCH = ""device_idle_constants_watch""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Device Idle (Doze) specific settings for watches. See {@code #DEVICE_IDLE_CONSTANTS}
 *
 * <p>
 * Type: string
 * @hide
 * @see com.android.server.DeviceIdleController.Constants
 */
]"
"[APP_IDLE_CONSTANTS = ""app_idle_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * App standby (app idle) specific settings.
 * This is encoded as a key=value list, separated by commas. Ex:
 *
 * ""idle_duration=5000,parole_interval=4500""
 *
 * The following keys are supported:
 *
 * <pre>
 * idle_duration2       (long)
 * wallclock_threshold  (long)
 * parole_interval      (long)
 * parole_duration      (long)
 *
 * idle_duration        (long) // This is deprecated and used to circumvent b/26355386.
 * </pre>
 *
 * <p>
 * Type: string
 * @hide
 * @see com.android.server.usage.UsageStatsService.SettingsObserver
 */
]"
"[ALARM_MANAGER_CONSTANTS = ""alarm_manager_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Alarm manager specific settings.
 * This is encoded as a key=value list, separated by commas. Ex:
 *
 * ""min_futurity=5000,allow_while_idle_short_time=4500""
 *
 * The following keys are supported:
 *
 * <pre>
 * min_futurity                         (long)
 * min_interval                         (long)
 * allow_while_idle_short_time          (long)
 * allow_while_idle_long_time           (long)
 * allow_while_idle_whitelist_duration  (long)
 * </pre>
 *
 * <p>
 * Type: string
 * @hide
 * @see com.android.server.AlarmManagerService.Constants
 */
]"
"[JOB_SCHEDULER_CONSTANTS = ""job_scheduler_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Job scheduler specific settings.
 * This is encoded as a key=value list, separated by commas. Ex:
 *
 * ""min_ready_jobs_count=2,moderate_use_factor=.5""
 *
 * The following keys are supported:
 *
 * <pre>
 * min_idle_count                       (int)
 * min_charging_count                   (int)
 * min_connectivity_count               (int)
 * min_content_count                    (int)
 * min_ready_jobs_count                 (int)
 * heavy_use_factor                     (float)
 * moderate_use_factor                  (float)
 * fg_job_count                         (int)
 * bg_normal_job_count                  (int)
 * bg_moderate_job_count                (int)
 * bg_low_job_count                     (int)
 * bg_critical_job_count                (int)
 * </pre>
 *
 * <p>
 * Type: string
 * @hide
 * @see com.android.server.job.JobSchedulerService.Constants
 */
]"
"[SHORTCUT_MANAGER_CONSTANTS = ""shortcut_manager_constants""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * ShortcutManager specific settings.
 * This is encoded as a key=value list, separated by commas. Ex:
 *
 * ""reset_interval_sec=86400,max_updates_per_interval=1""
 *
 * The following keys are supported:
 *
 * <pre>
 * reset_interval_sec              (long)
 * max_updates_per_interval        (int)
 * max_icon_dimension_dp           (int, DP)
 * max_icon_dimension_dp_lowram    (int, DP)
 * max_shortcuts                   (int)
 * icon_quality                    (int, 0-100)
 * icon_format                     (String)
 * </pre>
 *
 * <p>
 * Type: string
 * @hide
 * @see com.android.server.pm.ShortcutService.ConfigConstants
 */
]"
"[WINDOW_ANIMATION_SCALE = ""window_animation_scale""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Scaling factor for normal window animations. Setting to 0 will
 * disable window animations.
 */
]"
"[TRANSITION_ANIMATION_SCALE = ""transition_animation_scale""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Scaling factor for activity transition animations. Setting to 0 will
 * disable window animations.
 */
]"
"[ANIMATOR_DURATION_SCALE = ""animator_duration_scale""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Scaling factor for Animator-based animations. This affects both the
 * start delay and duration of all such animations. Setting to 0 will
 * cause animations to end immediately. The default value is 1.
 */
]"
"[FANCY_IME_ANIMATIONS = ""fancy_ime_animations""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Scaling factor for normal window animations. Setting to 0 will
 * disable window animations.
 *
 * @hide
 */
]"
"[COMPATIBILITY_MODE = ""compatibility_mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If 0, the compatibility mode is off for all applications.
 * If 1, older applications run under compatibility mode.
 * TODO: remove this settings before code freeze (bug/1907571)
 * @hide
 */
]"
"[EMERGENCY_TONE = ""emergency_tone""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * CDMA only settings
 * Emergency Tone  0 = Off
 * 1 = Alert
 * 2 = Vibrate
 * @hide
 */
]"
"[CALL_AUTO_RETRY = ""call_auto_retry""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * CDMA only settings
 * Whether the auto retry is enabled. The value is
 * boolean (1 or 0).
 * @hide
 */
]"
"[PREFERRED_NETWORK_MODE = ""preferred_network_mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * See RIL_PreferredNetworkType in ril.h
 * @hide
 */
]"
"[DEBUG_APP = ""debug_app""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Name of an application package to be debugged.
 */
]"
"[WAIT_FOR_DEBUGGER = ""wait_for_debugger""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If 1, when launching DEBUG_APP it will wait for the debugger before
 * starting user code.  If 0, it will run normally.
 */
]"
"[SHOW_PROCESSES = ""show_processes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Control whether the process CPU usage meter should be shown.
 */
]"
"[LOW_POWER_MODE = ""low_power""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If 1 low power mode is enabled.
 * @hide
 */
]"
"[LOW_POWER_MODE_TRIGGER_LEVEL = ""low_power_trigger_level""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Battery level [1-99] at which low power mode automatically turns on.
 * If 0, it will not automatically turn on.
 * @hide
 */
]"
"[ALWAYS_FINISH_ACTIVITIES = ""always_finish_activities""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If not 0, the activity manager will aggressively finish activities and
 * processes as soon as they are no longer needed.  If 0, the normal
 * extended lifetime is used.
 */
]"
"[LENIENT_BACKGROUND_CHECK = ""lenient_background_check""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 * If not 0, the activity manager will implement a looser version of background
 * check that is more compatible with existing apps.
 */
]"
"[DOCK_AUDIO_MEDIA_ENABLED = ""dock_audio_media_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Use Dock audio output for media:
 * 0 = disabled
 * 1 = enabled
 * @hide
 */
]"
"[ENCODED_SURROUND_OUTPUT_AUTO = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The surround sound formats AC3, DTS or IEC61937 are
 * available for use if they are detected.
 * This is the default mode.
 *
 * Note that AUTO is equivalent to ALWAYS for Android TVs and other
 * devices that have an S/PDIF output. This is because S/PDIF
 * is unidirectional and the TV cannot know if a decoder is
 * connected. So it assumes they are always available.
 * @hide
 */
]"
"[ENCODED_SURROUND_OUTPUT_NEVER = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * AC3, DTS or IEC61937 are NEVER available, even if they
 * are detected by the hardware. Those formats will not be
 * reported.
 *
 * An example use case would be an AVR reports that it is capable of
 * surround sound decoding but is broken. If NEVER is chosen
 * then apps must use PCM output instead of encoded output.
 * @hide
 */
]"
"[ENCODED_SURROUND_OUTPUT_ALWAYS = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * AC3, DTS or IEC61937 are ALWAYS available, even if they
 * are not detected by the hardware. Those formats will be
 * reported as part of the HDMI output capability. Applications
 * are then free to use either PCM or encoded output.
 *
 * An example use case would be a when TV was connected over
 * TOS-link to an AVR. But the TV could not see it because TOS-link
 * is unidirectional.
 * @hide
 */
]"
"[ENCODED_SURROUND_OUTPUT = ""encoded_surround_output""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Set to ENCODED_SURROUND_OUTPUT_AUTO,
 * ENCODED_SURROUND_OUTPUT_NEVER or
 * ENCODED_SURROUND_OUTPUT_ALWAYS
 * @hide
 */
]"
"[AUDIO_SAFE_VOLUME_STATE = ""audio_safe_volume_state""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Persisted safe headphone volume management state by AudioService
 * @hide
 */
]"
"[TZINFO_UPDATE_CONTENT_URL = ""tzinfo_content_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for tzinfo (time zone) updates
 * @hide
 */
]"
"[TZINFO_UPDATE_METADATA_URL = ""tzinfo_metadata_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for tzinfo (time zone) update metadata
 * @hide
 */
]"
"[SELINUX_UPDATE_CONTENT_URL = ""selinux_content_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for selinux (mandatory access control) updates
 * @hide
 */
]"
"[SELINUX_UPDATE_METADATA_URL = ""selinux_metadata_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for selinux (mandatory access control) update metadata
 * @hide
 */
]"
"[SMS_SHORT_CODES_UPDATE_CONTENT_URL = ""sms_short_codes_content_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for sms short code updates
 * @hide
 */
]"
"[SMS_SHORT_CODES_UPDATE_METADATA_URL = ""sms_short_codes_metadata_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for sms short code update metadata
 * @hide
 */
]"
"[APN_DB_UPDATE_CONTENT_URL = ""apn_db_content_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for apn_db updates
 * @hide
 */
]"
"[APN_DB_UPDATE_METADATA_URL = ""apn_db_metadata_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for apn_db update metadata
 * @hide
 */
]"
"[CERT_PIN_UPDATE_CONTENT_URL = ""cert_pin_content_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for cert pinlist updates
 * @hide
 */
]"
"[CERT_PIN_UPDATE_METADATA_URL = ""cert_pin_metadata_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for cert pinlist updates
 * @hide
 */
]"
"[INTENT_FIREWALL_UPDATE_CONTENT_URL = ""intent_firewall_content_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for intent firewall updates
 * @hide
 */
]"
"[INTENT_FIREWALL_UPDATE_METADATA_URL = ""intent_firewall_metadata_url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * URL for intent firewall update metadata
 * @hide
 */
]"
"[SELINUX_STATUS = ""selinux_status""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * SELinux enforcement status. If 0, permissive; if 1, enforcing.
 * @hide
 */
]"
"[DEVELOPMENT_FORCE_RTL = ""debug.force_rtl""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Developer setting to force RTL layout.
 * @hide
 */
]"
"[LOW_BATTERY_SOUND_TIMEOUT = ""low_battery_sound_timeout""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Milliseconds after screen-off after which low battery sounds will be silenced.
 *
 * If zero, battery sounds will always play.
 * Defaults to @integer/def_low_battery_sound_timeout in SettingsProvider.
 *
 * @hide
 */
]"
"[WIFI_BOUNCE_DELAY_OVERRIDE_MS = ""wifi_bounce_delay_override_ms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Milliseconds to wait before bouncing Wi-Fi after settings is restored. Note that after
 * the caller is done with this, they should call {@link ContentResolver#delete} to
 * clean up any value that they may have written.
 *
 * @hide
 */
]"
"[POLICY_CONTROL = ""policy_control""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Defines global runtime overrides to window policy.
 *
 * See {@link com.android.server.policy.PolicyControl} for value format.
 *
 * @hide
 */
]"
"[ZEN_MODE = ""zen_mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Defines global zen mode.  ZEN_MODE_OFF, ZEN_MODE_IMPORTANT_INTERRUPTIONS,
 * or ZEN_MODE_NO_INTERRUPTIONS.
 *
 * @hide
 */
]"
"[ZEN_MODE_OFF = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[ZEN_MODE_IMPORTANT_INTERRUPTIONS = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[ZEN_MODE_NO_INTERRUPTIONS = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[ZEN_MODE_ALARMS = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[ZEN_MODE_RINGER_LEVEL = ""zen_mode_ringer_level""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value of the ringer before entering zen mode.
 *
 * @hide
 */
]"
"[ZEN_MODE_CONFIG_ETAG = ""zen_mode_config_etag""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Opaque value, changes when persisted zen mode configuration changes.
 *
 * @hide
 */
]"
"[HEADS_UP_NOTIFICATIONS_ENABLED = ""heads_up_notifications_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Defines global heads up toggle.  One of HEADS_UP_OFF, HEADS_UP_ON.
 *
 * @hide
 */
]"
"[HEADS_UP_OFF = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[HEADS_UP_ON = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * @hide
 */
]"
"[DEVICE_NAME = ""device_name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The name of the device
 *
 * @hide
 */
]"
"[NETWORK_SCORING_PROVISIONED = ""network_scoring_provisioned""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the NetworkScoringService has been first initialized.
 * <p>
 * Type: int (0 for false, 1 for true)
 * @hide
 */
]"
"[REQUIRE_PASSWORD_TO_DECRYPT = ""require_password_to_decrypt""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the user wants to be prompted for password to decrypt the device on boot.
 * This only matters if the storage is encrypted.
 * <p>
 * Type: int (0 for false, 1 for true)
 * @hide
 */
]"
"[ENHANCED_4G_MODE_ENABLED = ""volte_vt_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the Volte is enabled
 * <p>
 * Type: int (0 for false, 1 for true)
 * @hide
 */
]"
"[VT_IMS_ENABLED = ""vt_ims_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether VT (Video Telephony over IMS) is enabled
 * <p>
 * Type: int (0 for false, 1 for true)
 *
 * @hide
 */
]"
"[WFC_IMS_ENABLED = ""wfc_ims_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether WFC is enabled
 * <p>
 * Type: int (0 for false, 1 for true)
 *
 * @hide
 */
]"
"[WFC_IMS_MODE = ""wfc_ims_mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * WFC Mode.
 * <p>
 * Type: int - 2=Wi-Fi preferred, 1=Cellular preferred, 0=Wi-Fi only
 *
 * @hide
 */
]"
"[WFC_IMS_ROAMING_ENABLED = ""wfc_ims_roaming_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether WFC roaming is enabled
 * <p>
 * Type: int (0 for false, 1 for true)
 *
 * @hide
 */
]"
"[LTE_SERVICE_FORCED = ""lte_service_forced""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether user can enable/disable LTE as a preferred network. A carrier might control
 * this via gservices, OMA-DM, carrier app, etc.
 * <p>
 * Type: int (0 for false, 1 for true)
 * @hide
 */
]"
"[EPHEMERAL_COOKIE_MAX_SIZE_BYTES = ""ephemeral_cookie_max_size_bytes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Ephemeral app cookie max size in bytes.
 * <p>
 * Type: int
 * @hide
 */
]"
"[UNINSTALLED_EPHEMERAL_APP_CACHE_DURATION_MILLIS = ""uninstalled_ephemeral_app_cache_duration_millis""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The duration for caching uninstalled ephemeral apps.
 * <p>
 * Type: long
 * @hide
 */
]"
"[ALLOW_USER_SWITCHING_WHEN_SYSTEM_USER_LOCKED = ""allow_user_switching_when_system_user_locked""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Allows switching users when system user is locked.
 * <p>
 * Type: int
 * @hide
 */
]"
"[BOOT_COUNT = ""boot_count""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Boot count since the device starts running APK level 24.
 * <p>
 * Type: int
 */
]"
"[SAFE_BOOT_DISALLOWED = ""safe_boot_disallowed""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the safe boot is disallowed.
 *
 * <p>This setting should have the identical value as the corresponding user restriction.
 * The purpose of the setting is to make the restriction available in early boot stages
 * before the user restrictions are loaded.
 * @hide
 */
]"
"[SETTINGS_TO_BACKUP = { BUGREPORT_IN_POWER_MENU, STAY_ON_WHILE_PLUGGED_IN, AUTO_TIME, AUTO_TIME_ZONE, POWER_SOUNDS_ENABLED, DOCK_SOUNDS_ENABLED, CHARGING_SOUNDS_ENABLED, USB_MASS_STORAGE_ENABLED, ENABLE_ACCESSIBILITY_GLOBAL_GESTURE_ENABLED, WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON, WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY, WIFI_WATCHDOG_POOR_NETWORK_TEST_ENABLED, WIFI_NUM_OPEN_NETWORKS_KEPT, EMERGENCY_TONE, CALL_AUTO_RETRY, DOCK_AUDIO_MEDIA_ENABLED, ENCODED_SURROUND_OUTPUT, LOW_POWER_MODE_TRIGGER_LEVEL }]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Settings to backup. This is here so that it's in the same place as the settings
 * keys and easy to update.
 *
 * These keys may be mentioned in the SETTINGS_TO_BACKUP arrays in System
 * and Secure as well.  This is because those tables drive both backup and
 * restore, and restore needs to properly whitelist keys that used to live
 * in those namespaces.  The keys will only actually be backed up / restored
 * if they are also mentioned in this table (Global.SETTINGS_TO_BACKUP).
 *
 * NOTE: Settings are backed up and restored in the order they appear
 * in this array. If you have one setting depending on another,
 * make sure that they are ordered appropriately.
 *
 * @hide
 */
]"
"[sNameValueCache = new NameValueCache(CONTENT_URI, CALL_METHOD_GET_GLOBAL, CALL_METHOD_PUT_GLOBAL)]","[]","[PRIVATE, STATIC]","Optional[// Populated lazily, guarded by class object:
]"
"[MOVED_TO_SECURE]","[]","[PRIVATE, STATIC, FINAL]","Optional[// Certain settings have been moved from global to the per-user secure namespace
]"
"[MULTI_SIM_VOICE_CALL_SUBSCRIPTION = ""multi_sim_voice_call""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Subscription to be used for voice call on a multi sim device. The supported values
 * are 0 = SUB1, 1 = SUB2 and etc.
 * @hide
 */
]"
"[MULTI_SIM_VOICE_PROMPT = ""multi_sim_voice_prompt""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to provide option to user to select subscription during dial.
 * The supported values are 0 = disable or 1 = enable prompt.
 * @hide
 */
]"
"[MULTI_SIM_DATA_CALL_SUBSCRIPTION = ""multi_sim_data_call""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Subscription to be used for data call on a multi sim device. The supported values
 * are 0 = SUB1, 1 = SUB2 and etc.
 * @hide
 */
]"
"[MULTI_SIM_SMS_SUBSCRIPTION = ""multi_sim_sms""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Subscription to be used for SMS on a multi sim device. The supported values
 * are 0 = SUB1, 1 = SUB2 and etc.
 * @hide
 */
]"
"[MULTI_SIM_SMS_PROMPT = ""multi_sim_sms_prompt""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to provide option to user to select subscription during send SMS.
 * The value 1 - enable, 0 - disable
 * @hide
 */
]"
"[MULTI_SIM_USER_PREFERRED_SUBS = { ""user_preferred_sub1"", ""user_preferred_sub2"", ""user_preferred_sub3"" }]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * User preferred subscriptions setting.
 * This holds the details of the user selected subscription from the card and
 * the activation status. Each settings string have the coma separated values
 * iccId,appType,appId,activationStatus,3gppIndex,3gpp2Index
 * @hide
 */
]"
"[NEW_CONTACT_AGGREGATOR = ""new_contact_aggregator""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to enable new contacts aggregator or not.
 * The value 1 - enable, 0 - disable
 * @hide
 */
]"
"[CONTACT_METADATA_SYNC = ""contact_metadata_sync""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to enable contacts metadata syncing or not
 * The value 1 - enable, 0 - disable
 *
 * @removed
 */
]"
"[CONTACT_METADATA_SYNC_ENABLED = ""contact_metadata_sync_enabled""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to enable contacts metadata syncing or not
 * The value 1 - enable, 0 - disable
 */
]"
"[ENABLE_CELLULAR_ON_BOOT = ""enable_cellular_on_boot""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether to enable cellular on boot.
 * The value 1 - enable, 0 - disable
 * @hide
 */
]"
"[MAX_NOTIFICATION_ENQUEUE_RATE = ""max_notification_enqueue_rate""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The maximum allowed notification enqueue rate in Hertz.
 *
 * Should be a float, and includes both posts and updates.
 * @hide
 */
]"
"[TAG = ""Bookmarks""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[CONTENT_URI = Uri.parse(""content://"" + AUTHORITY + ""/bookmarks"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URL for this table
 */
]"
"[ID = ""_id""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The row ID.
 * <p>Type: INTEGER</p>
 */
]"
"[TITLE = ""title""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Descriptive name of the bookmark that can be displayed to the user.
 * If this is empty, the title should be resolved at display time (use
 * {@link #getTitle(Context, Cursor)} any time you want to display the
 * title of a bookmark.)
 * <P>
 * Type: TEXT
 * </P>
 */
]"
"[FOLDER = ""folder""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Arbitrary string (displayed to the user) that allows bookmarks to be
 * organized into categories.  There are some special names for
 * standard folders, which all start with '@'.  The label displayed for
 * the folder changes with the locale (via {@link #getLabelForFolder}) but
 * the folder name does not change so you can consistently query for
 * the folder regardless of the current locale.
 *
 * <P>Type: TEXT</P>
 */
]"
"[INTENT = ""intent""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The Intent URL of the bookmark, describing what it points to.  This
 * value is given to {@link android.content.Intent#getIntent} to create
 * an Intent that can be launched.
 * <P>Type: TEXT</P>
 */
]"
"[SHORTCUT = ""shortcut""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Optional shortcut character associated with this bookmark.
 * <P>Type: INTEGER</P>
 */
]"
"[ORDERING = ""ordering""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The order in which the bookmark should be displayed
 * <P>Type: INTEGER</P>
 */
]"
"[sIntentProjection = { INTENT }]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[sShortcutProjection = { ID, SHORTCUT }]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[sShortcutSelection = SHORTCUT + ""=?""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[PM_WRITE_SETTINGS = { android.Manifest.permission.WRITE_SETTINGS }]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[PM_CHANGE_NETWORK_STATE = { android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.WRITE_SETTINGS }]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[PM_SYSTEM_ALERT_WINDOW = { android.Manifest.permission.SYSTEM_ALERT_WINDOW }]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
