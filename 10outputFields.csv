"Variable","Annotation","Modifier","Comment"
"[TAG = ""AccountManager""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[mAccounts = null]","[]","[PRIVATE]","Optional.empty"
"[mAccountManagerResponse = null]","[]","[PRIVATE]","Optional.empty"
"[mResult]","[]","[PRIVATE]","Optional.empty"
"[mContext]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mWindowManager]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mAutoDismissControls = true]","[]","[PRIVATE]","Optional.empty"
"[mOwnerView]","[]","[PRIVATE, FINAL]","Optional[/**
 * The view that is being zoomed by this zoom controller.
 */
]"
"[mOwnerViewRawLocation = new int[2]]","[]","[PRIVATE, FINAL]","Optional[/**
 * The location of the owner view on the screen. This is recalculated
 * each time the zoom controller is shown.
 */
]"
"[mContainer]","[]","[PRIVATE, FINAL]","Optional[/**
 * The container that is added as a window.
 */
]"
"[mContainerLayoutParams]","[]","[PRIVATE]","Optional.empty"
"[mContainerRawLocation = new int[2]]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mControls]","[]","[PRIVATE]","Optional.empty"
"[mTouchTargetView]","[]","[PRIVATE]","Optional[/**
 * The view (or null) that should receive touch events. This will get set if
 * the touch down hits the container. It will be reset on the touch up.
 */
]"
"[mTouchTargetWindowLocation = new int[2]]","[]","[PRIVATE, FINAL]","Optional[/**
 * The {@link #mTouchTargetView}'s location in window, set on touch down.
 */
]"
"[mReleaseTouchListenerOnUp]","[]","[PRIVATE]","Optional[/**
 * If the zoom controller is dismissed but the user is still in a touch
 * interaction, we set this to true. This will ignore all touch events until
 * up/cancel, and then set the owner's touch listener to null.
 * <p>
 * Otherwise, the owner view would get mismatched events (i.e., touch move
 * even though it never got the touch down.)
 */
]"
"[mIsVisible]","[]","[PRIVATE]","Optional[/**
 * Whether the container has been added to the window manager.
 */
]"
"[mTempRect = new Rect()]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mTempIntArray = new int[2]]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mCallback]","[]","[PRIVATE]","Optional.empty"
"[mPostedVisibleInitializer]","[]","[PRIVATE]","Optional[/**
 * When showing the zoom, we add the view as a new window. However, there is
 * logic that needs to know the size of the zoom which is determined after
 * it's laid out. Therefore, we must post this logic onto the UI thread so
 * it will be exceuted AFTER the layout. This is the logic.
 */
]"
"[mConfigurationChangedFilter = new IntentFilter(Intent.ACTION_CONFIGURATION_CHANGED)]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mConfigurationChangedReceiver = new BroadcastReceiver() {

    @Override
    public void onReceive(Context context, Intent intent) {
        if (!mIsVisible)
            return;
        mHandler.removeMessages(MSG_POST_CONFIGURATION_CHANGED);
        mHandler.sendEmptyMessage(MSG_POST_CONFIGURATION_CHANGED);
    }
}]","[]","[PRIVATE, FINAL]","Optional[/**
 * Needed to reposition the zoom controls after configuration changes.
 */
]"
"[MSG_POST_CONFIGURATION_CHANGED = 2]","[]","[PRIVATE, STATIC, FINAL]","Optional[/**
 * When configuration changes, this is called after the UI thread is idle.
 */
]"
"[MSG_DISMISS_ZOOM_CONTROLS = 3]","[]","[PRIVATE, STATIC, FINAL]","Optional[/**
 * Used to delay the zoom controller dismissal.
 */
]"
"[MSG_POST_SET_VISIBLE = 4]","[]","[PRIVATE, STATIC, FINAL]","Optional[/**
 * If setVisible(true) is called and the owner view's window token is null,
 * we delay the setVisible(true) call until it is not null.
 */
]"
"[mHandler = new Handler() {

    @Override
    public void handleMessage(Message msg) {
        switch(msg.what) {
            case MSG_POST_CONFIGURATION_CHANGED:
                onPostConfigurationChanged();
                break;
            case MSG_DISMISS_ZOOM_CONTROLS:
                setVisible(false);
                break;
            case MSG_POST_SET_VISIBLE:
                if (mOwnerView.getWindowToken() == null) {
                    // Doh, it is still null, just ignore the set visible call
                    Log.e(TAG, ""Cannot make the zoom controller visible if the owner view is "" + ""not attached to a window."");
                } else {
                    setVisible(true);
                }
                break;
        }
    }
}]","[]","[PRIVATE, FINAL]","Optional.empty"
"[ELLIPSIS_UNDEFINED = 0x80000000]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[_SYNC_MARK = ""_sync_mark""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used only in persistent providers, and only during merging.
 * <P>Type: INTEGER (long)</P>
 */
]"
"[_SYNC_DIRTY = ""_sync_dirty""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used to indicate that local, unsynced, changes are present.
 * <P>Type: INTEGER (long)</P>
 */
]"
"[ACCOUNT_NAME = ""account_name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The name of the account instance to which this row belongs, which when paired with
 * {@link #ACCOUNT_TYPE} identifies a specific account.
 * <P>Type: TEXT</P>
 */
]"
"[ACCOUNT_TYPE = ""account_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The type of account to which this row belongs, which when paired with
 * {@link #ACCOUNT_NAME} identifies a specific account.
 * <P>Type: TEXT</P>
 */
]"
"[WHERE_DELETE_FOR_ACCOUNT = Calendars._SYNC_ACCOUNT + ""=?"" + "" AND "" + Calendars._SYNC_ACCOUNT_TYPE + ""=?""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[CONTENT_URI = Uri.parse(""content://"" + AUTHORITY + ""/calendars"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URL for this table
 */
]"
"[DEFAULT_SORT_ORDER = ""displayName""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The default sort order for this table
 */
]"
"[URL = ""url""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The URL to the calendar
 * <P>Type: TEXT (URL)</P>
 */
]"
"[NAME = ""name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The name of the calendar
 * <P>Type: TEXT</P>
 */
]"
"[DISPLAY_NAME = ""displayName""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The display name of the calendar
 * <P>Type: TEXT</P>
 */
]"
"[LOCATION = ""location""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The location the of the events in the calendar
 * <P>Type: TEXT</P>
 */
]"
"[HIDDEN = ""hidden""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Should the calendar be hidden in the calendar selection panel?
 * <P>Type: INTEGER (boolean)</P>
 */
]"
"[OWNER_ACCOUNT = ""ownerAccount""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The owner account for this calendar, based on the calendar feed.
 * This will be different from the _SYNC_ACCOUNT for delegated calendars.
 * <P>Type: String</P>
 */
]"
"[ORGANIZER_CAN_RESPOND = ""organizerCanRespond""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Can the organizer respond to the event?  If no, the status of the
 * organizer should not be shown by the UI.  Defaults to 1
 * <P>Type: INTEGER (boolean)</P>
 */
]"
"[EVENT_ID = ""event_id""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The id of the event.
 * <P>Type: INTEGER</P>
 */
]"
"[ATTENDEE_NAME = ""attendeeName""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The name of the attendee.
 * <P>Type: STRING</P>
 */
]"
"[ATTENDEE_EMAIL = ""attendeeEmail""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The email address of the attendee.
 * <P>Type: STRING</P>
 */
]"
"[ATTENDEE_RELATIONSHIP = ""attendeeRelationship""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The relationship of the attendee to the user.
 * <P>Type: INTEGER (one of {@link #RELATIONSHIP_ATTENDEE}, ...}.
 */
]"
"[RELATIONSHIP_NONE = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[RELATIONSHIP_ATTENDEE = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[RELATIONSHIP_ORGANIZER = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[RELATIONSHIP_PERFORMER = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[RELATIONSHIP_SPEAKER = 4]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[ATTENDEE_TYPE = ""attendeeType""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The type of attendee.
 * <P>Type: Integer (one of {@link #TYPE_REQUIRED}, {@link #TYPE_OPTIONAL})
 */
]"
"[TYPE_NONE = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_REQUIRED = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_OPTIONAL = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[ATTENDEE_STATUS = ""attendeeStatus""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The attendance status of the attendee.
 * <P>Type: Integer (one of {@link #ATTENDEE_STATUS_ACCEPTED}, ...}.
 */
]"
"[ATTENDEE_STATUS_NONE = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[ATTENDEE_STATUS_ACCEPTED = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[ATTENDEE_STATUS_DECLINED = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[ATTENDEE_STATUS_INVITED = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[ATTENDEE_STATUS_TENTATIVE = 4]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[CONTENT_URI = Uri.parse(""content://"" + AUTHORITY + ""/attendees"")]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[CALENDAR_ID = ""calendar_id""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The calendar the event belongs to
 * <P>Type: INTEGER (foreign key to the Calendars table)</P>
 */
]"
"[HTML_URI = ""htmlUri""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The URI for an HTML version of this event.
 * <P>Type: TEXT</P>
 */
]"
"[TITLE = ""title""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The title of the event
 * <P>Type: TEXT</P>
 */
]"
"[DESCRIPTION = ""description""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The description of the event
 * <P>Type: TEXT</P>
 */
]"
"[EVENT_LOCATION = ""eventLocation""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Where the event takes place.
 * <P>Type: TEXT</P>
 */
]"
"[STATUS = ""eventStatus""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The event status
 * <P>Type: INTEGER (int)</P>
 */
]"
"[STATUS_TENTATIVE = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[STATUS_CONFIRMED = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[STATUS_CANCELED = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[SELF_ATTENDEE_STATUS = ""selfAttendeeStatus""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This is a copy of the attendee status for the owner of this event.
 * This field is copied here so that we can efficiently filter out
 * events that are declined without having to look in the Attendees
 * table.
 *
 * <P>Type: INTEGER (int)</P>
 */
]"
"[SYNC_ADAPTER_DATA = ""syncAdapterData""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This column is available for use by sync adapters
 * <P>Type: TEXT</P>
 */
]"
"[COMMENTS_URI = ""commentsUri""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The comments feed uri.
 * <P>Type: TEXT</P>
 */
]"
"[DTSTART = ""dtstart""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The time the event starts
 * <P>Type: INTEGER (long; millis since epoch)</P>
 */
]"
"[DTEND = ""dtend""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The time the event ends
 * <P>Type: INTEGER (long; millis since epoch)</P>
 */
]"
"[DURATION = ""duration""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The duration of the event
 * <P>Type: TEXT (duration in RFC2445 format)</P>
 */
]"
"[EVENT_TIMEZONE = ""eventTimezone""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The timezone for the event.
 * <P>Type: TEXT
 */
]"
"[ALL_DAY = ""allDay""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the event lasts all day or not
 * <P>Type: INTEGER (boolean)</P>
 */
]"
"[VISIBILITY = ""visibility""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Visibility for the event.
 * <P>Type: INTEGER</P>
 */
]"
"[VISIBILITY_DEFAULT = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[VISIBILITY_CONFIDENTIAL = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[VISIBILITY_PRIVATE = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[VISIBILITY_PUBLIC = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TRANSPARENCY = ""transparency""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Transparency for the event -- does the event consume time on the calendar?
 * <P>Type: INTEGER</P>
 */
]"
"[TRANSPARENCY_OPAQUE = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TRANSPARENCY_TRANSPARENT = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[HAS_ALARM = ""hasAlarm""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the event has an alarm or not
 * <P>Type: INTEGER (boolean)</P>
 */
]"
"[HAS_EXTENDED_PROPERTIES = ""hasExtendedProperties""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the event has extended properties or not
 * <P>Type: INTEGER (boolean)</P>
 */
]"
"[RRULE = ""rrule""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The recurrence rule for the event.
 * than one.
 * <P>Type: TEXT</P>
 */
]"
"[RDATE = ""rdate""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The recurrence dates for the event.
 * <P>Type: TEXT</P>
 */
]"
"[EXRULE = ""exrule""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The recurrence exception rule for the event.
 * <P>Type: TEXT</P>
 */
]"
"[EXDATE = ""exdate""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The recurrence exception dates for the event.
 * <P>Type: TEXT</P>
 */
]"
"[ORIGINAL_EVENT = ""originalEvent""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The _sync_id of the original recurring event for which this event is
 * an exception.
 * <P>Type: TEXT</P>
 */
]"
"[ORIGINAL_INSTANCE_TIME = ""originalInstanceTime""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The original instance time of the recurring event for which this
 * event is an exception.
 * <P>Type: INTEGER (long; millis since epoch)</P>
 */
]"
"[ORIGINAL_ALL_DAY = ""originalAllDay""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The allDay status (true or false) of the original recurring event
 * for which this event is an exception.
 * <P>Type: INTEGER (boolean)</P>
 */
]"
"[LAST_DATE = ""lastDate""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The last date this event repeats on, or NULL if it never ends
 * <P>Type: INTEGER (long; millis since epoch)</P>
 */
]"
"[HAS_ATTENDEE_DATA = ""hasAttendeeData""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the event has attendee information.  True if the event
 * has full attendee data, false if the event has information about
 * self only.
 * <P>Type: INTEGER (boolean)</P>
 */
]"
"[GUESTS_CAN_MODIFY = ""guestsCanModify""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether guests can modify the event.
 * <P>Type: INTEGER (boolean)</P>
 */
]"
"[GUESTS_CAN_INVITE_OTHERS = ""guestsCanInviteOthers""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether guests can invite other guests.
 * <P>Type: INTEGER (boolean)</P>
 */
]"
"[GUESTS_CAN_SEE_GUESTS = ""guestsCanSeeGuests""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether guests can see the list of attendees.
 * <P>Type: INTEGER (boolean)</P>
 */
]"
"[ORGANIZER = ""organizer""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Email of the organizer (owner) of the event.
 * <P>Type: STRING</P>
 */
]"
"[CAN_INVITE_OTHERS = ""canInviteOthers""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the user can invite others to the event.
 * The GUESTS_CAN_INVITE_OTHERS is a setting that applies to an arbitrary guest,
 * while CAN_INVITE_OTHERS indicates if the user can invite others (either through
 * GUESTS_CAN_INVITE_OTHERS or because the user has modify access to the event).
 * <P>Type: INTEGER (boolean, readonly)</P>
 */
]"
"[OWNER_ACCOUNT = ""ownerAccount""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The owner account for this calendar, based on the calendar (foreign
 * key into the calendars table).
 * <P>Type: String</P>
 */
]"
"[DELETED = ""deleted""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether the row has been deleted.  A deleted row should be ignored.
 * <P>Type: INTEGER (boolean)</P>
 */
]"
"[CONTENT_URI = Uri.parse(""content://"" + AUTHORITY + ""/event_entities"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URL for this table
 */
]"
"[mResolver]","[]","[PRIVATE, FINAL]","Optional.empty"
"[mProvider]","[]","[PRIVATE, FINAL]","Optional.empty"
"[REMINDERS_PROJECTION = new String[] { Reminders.MINUTES, Reminders.METHOD }]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[COLUMN_MINUTES = 0]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[COLUMN_METHOD = 1]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[ATTENDEES_PROJECTION = new String[] { Attendees.ATTENDEE_NAME, Attendees.ATTENDEE_EMAIL, Attendees.ATTENDEE_RELATIONSHIP, Attendees.ATTENDEE_TYPE, Attendees.ATTENDEE_STATUS }]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[COLUMN_ATTENDEE_NAME = 0]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[COLUMN_ATTENDEE_EMAIL = 1]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[COLUMN_ATTENDEE_RELATIONSHIP = 2]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[COLUMN_ATTENDEE_TYPE = 3]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[COLUMN_ATTENDEE_STATUS = 4]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[EXTENDED_PROJECTION = new String[] { ExtendedProperties._ID, ExtendedProperties.NAME, ExtendedProperties.VALUE }]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[COLUMN_ID = 0]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[COLUMN_NAME = 1]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[COLUMN_VALUE = 2]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[WHERE_EVENT_ID = ""event_id=?""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[FETCH_ENTRY_COLUMNS = new String[] { Events._SYNC_ACCOUNT, Events._SYNC_ID }]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[ATTENDEES_COLUMNS = new String[] { AttendeesColumns.ATTENDEE_NAME, AttendeesColumns.ATTENDEE_EMAIL, AttendeesColumns.ATTENDEE_RELATIONSHIP, AttendeesColumns.ATTENDEE_TYPE, AttendeesColumns.ATTENDEE_STATUS }]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[CONTENT_URI = Uri.parse(""content://"" + AUTHORITY + ""/events"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URL for this table
 */
]"
"[DELETED_CONTENT_URI = Uri.parse(""content://"" + AUTHORITY + ""/deleted_events"")]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[DEFAULT_SORT_ORDER = """"]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The default sort order for this table
 */
]"
"[WHERE_CALENDARS_SELECTED = Calendars.SELECTED + ""=1""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[CONTENT_URI = Uri.parse(""content://"" + AUTHORITY + ""/instances/when"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URL for this table
 */
]"
"[CONTENT_BY_DAY_URI = Uri.parse(""content://"" + AUTHORITY + ""/instances/whenbyday"")]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[DEFAULT_SORT_ORDER = ""begin ASC""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The default sort order for this table.
 */
]"
"[SORT_CALENDAR_VIEW = ""begin ASC, end DESC, title ASC""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The sort order is: events with an earlier start time occur
 * first and if the start times are the same, then events with
 * a later end time occur first. The later end time is ordered
 * first so that long-running events in the calendar views appear
 * first.  If the start and end times of two events are
 * the same then we sort alphabetically on the title.  This isn't
 * required for correctness, it just adds a nice touch.
 */
]"
"[BEGIN = ""begin""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The beginning time of the instance, in UTC milliseconds
 * <P>Type: INTEGER (long; millis since epoch)</P>
 */
]"
"[END = ""end""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The ending time of the instance, in UTC milliseconds
 * <P>Type: INTEGER (long; millis since epoch)</P>
 */
]"
"[EVENT_ID = ""event_id""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The event for this instance
 * <P>Type: INTEGER (long, foreign key to the Events table)</P>
 */
]"
"[START_DAY = ""startDay""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The Julian start day of the instance, relative to the local timezone
 * <P>Type: INTEGER (int)</P>
 */
]"
"[END_DAY = ""endDay""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The Julian end day of the instance, relative to the local timezone
 * <P>Type: INTEGER (int)</P>
 */
]"
"[START_MINUTE = ""startMinute""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The start minute of the instance measured from midnight in the
 * local timezone.
 * <P>Type: INTEGER (int)</P>
 */
]"
"[END_MINUTE = ""endMinute""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The end minute of the instance measured from midnight in the
 * local timezone.
 * <P>Type: INTEGER (int)</P>
 */
]"
"[KEY = ""key""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The key for the setting. Keys are defined in CalendarChache in the
 * Calendar provider.
 * TODO Add keys to this file
 */
]"
"[VALUE = ""value""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The value of the given setting.
 */
]"
"[URI = Uri.parse(""content://"" + AUTHORITY + ""/properties"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The URI to use for retrieving the properties from the Calendar db.
 */
]"
"[POJECTION = { KEY, VALUE }]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[WHERE = ""key=?""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If updating a property, this must be provided as the selection. All
 * other selections will fail. For queries this field can be omitted to
 * retrieve all properties or used to query a single property. Valid
 * keys include {@link #TIMEZONE_KEY_TYPE},
 * {@link #TIMEZONE_KEY_INSTANCES}, and
 * {@link #TIMEZONE_KEY_INSTANCES_PREVIOUS}, though the last one can
 * only be read, not written.
 */
]"
"[TIMEZONE_KEY_TYPE = ""timezoneType""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * They key for updating the use of auto/home time zones in Calendar.
 * Valid values are {@link #TIMEZONE_TYPE_AUTO} or
 * {@link #TIMEZONE_TYPE_HOME}.
 */
]"
"[TIMEZONE_KEY_INSTANCES = ""timezoneInstances""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The key for updating the time zone used by the provider when it
 * generates the instances table. This should only be written if the
 * type is set to {@link #TIMEZONE_TYPE_HOME}. A valid time zone id
 * should be written to this field.
 */
]"
"[TIMEZONE_KEY_INSTANCES_PREVIOUS = ""timezoneInstancesPrevious""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The key for reading the last time zone set by the user. This should
 * only be read by apps and it will be automatically updated whenever
 * {@link #TIMEZONE_KEY_INSTANCES} is updated with
 * {@link #TIMEZONE_TYPE_HOME} set.
 */
]"
"[TIMEZONE_TYPE_AUTO = ""auto""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The value to write to {@link #TIMEZONE_KEY_TYPE} if the provider
 * should stay in sync with the device's time zone.
 */
]"
"[TIMEZONE_TYPE_HOME = ""home""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The value to write to {@link #TIMEZONE_KEY_TYPE} if the provider
 * should use a fixed time zone set by the user.
 */
]"
"[LOCAL_TIMEZONE = ""localTimezone""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The local timezone that was used for precomputing the fields
 * in the Instances table.
 */
]"
"[MIN_INSTANCE = ""minInstance""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The minimum time used in expanding the Instances table,
 * in UTC milliseconds.
 * <P>Type: INTEGER</P>
 */
]"
"[MAX_INSTANCE = ""maxInstance""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The maximum time used in expanding the Instances table,
 * in UTC milliseconds.
 * <P>Type: INTEGER</P>
 */
]"
"[MIN_EVENTDAYS = ""minEventDays""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The minimum Julian day in the EventDays table.
 * <P>Type: INTEGER</P>
 */
]"
"[MAX_EVENTDAYS = ""maxEventDays""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The maximum Julian day in the EventDays table.
 * <P>Type: INTEGER</P>
 */
]"
"[STARTDAY = ""startDay""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The Julian starting day number.
 * <P>Type: INTEGER (int)</P>
 */
]"
"[ENDDAY = ""endDay""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[CONTENT_URI = Uri.parse(""content://"" + AUTHORITY + ""/instances/groupbyday"")]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROJECTION = { STARTDAY, ENDDAY }]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[SELECTION = ""selected=1""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[EVENT_ID = ""event_id""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The event the reminder belongs to
 * <P>Type: INTEGER (foreign key to the Events table)</P>
 */
]"
"[MINUTES = ""minutes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The minutes prior to the event that the alarm should ring.  -1
 * specifies that we should use the default value for the system.
 * <P>Type: INTEGER</P>
 */
]"
"[MINUTES_DEFAULT = -1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[METHOD = ""method""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The alarm method, as set on the server.  DEFAULT, ALERT, EMAIL, and
 * SMS are possible values; the device will only process DEFAULT and
 * ALERT reminders (the other types are simply stored so we can send the
 * same reminder info back to the server when we make changes).
 */
]"
"[METHOD_DEFAULT = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[METHOD_ALERT = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[METHOD_EMAIL = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[METHOD_SMS = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TABLE_NAME = ""Reminders""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[CONTENT_URI = Uri.parse(""content://"" + AUTHORITY + ""/reminders"")]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[EVENT_ID = ""event_id""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The event that the alert belongs to
 * <P>Type: INTEGER (foreign key to the Events table)</P>
 */
]"
"[BEGIN = ""begin""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The start time of the event, in UTC
 * <P>Type: INTEGER (long; millis since epoch)</P>
 */
]"
"[END = ""end""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The end time of the event, in UTC
 * <P>Type: INTEGER (long; millis since epoch)</P>
 */
]"
"[ALARM_TIME = ""alarmTime""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The alarm time of the event, in UTC
 * <P>Type: INTEGER (long; millis since epoch)</P>
 */
]"
"[CREATION_TIME = ""creationTime""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The creation time of this database entry, in UTC.
 * (Useful for debugging missed reminders.)
 * <P>Type: INTEGER (long; millis since epoch)</P>
 */
]"
"[RECEIVED_TIME = ""receivedTime""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The time that the alarm broadcast was received by the Calendar app,
 * in UTC. (Useful for debugging missed reminders.)
 * <P>Type: INTEGER (long; millis since epoch)</P>
 */
]"
"[NOTIFY_TIME = ""notifyTime""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The time that the notification was created by the Calendar app,
 * in UTC. (Useful for debugging missed reminders.)
 * <P>Type: INTEGER (long; millis since epoch)</P>
 */
]"
"[STATE = ""state""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The state of this alert.  It starts out as SCHEDULED, then when
 * the alarm goes off, it changes to FIRED, and then when the user
 * dismisses the alarm it changes to DISMISSED.
 * <P>Type: INTEGER</P>
 */
]"
"[SCHEDULED = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[FIRED = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[DISMISSED = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[MINUTES = ""minutes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The number of minutes that this alarm precedes the start time
 * <P>Type: INTEGER </P>
 */
]"
"[DEFAULT_SORT_ORDER = ""begin ASC,title ASC""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The default sort order for this table
 */
]"
"[TABLE_NAME = ""CalendarAlerts""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[CONTENT_URI = Uri.parse(""content://"" + AUTHORITY + ""/calendar_alerts"")]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[WHERE_ALARM_EXISTS = EVENT_ID + ""=?"" + "" AND "" + BEGIN + ""=?"" + "" AND "" + ALARM_TIME + ""=?""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[WHERE_FINDNEXTALARMTIME = ALARM_TIME + "">=?""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[SORT_ORDER_ALARMTIME_ASC = ALARM_TIME + "" ASC""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[WHERE_RESCHEDULE_MISSED_ALARMS = STATE + ""="" + SCHEDULED + "" AND "" + ALARM_TIME + ""<?"" + "" AND "" + ALARM_TIME + "">?"" + "" AND "" + END + "">=?""]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[CONTENT_URI_BY_INSTANCE = Uri.parse(""content://"" + AUTHORITY + ""/calendar_alerts/by_instance"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This URI is for grouping the query results by event_id and begin
 * time.  This will return one result per instance of an event.  So
 * events with multiple alarms will appear just once, but multiple
 * instances of a repeating event will show up multiple times.
 */
]"
"[DEBUG = true]","[]","[PRIVATE, STATIC, FINAL]","Optional.empty"
"[EVENT_ID = ""event_id""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The event the extended property belongs to
 * <P>Type: INTEGER (foreign key to the Events table)</P>
 */
]"
"[NAME = ""name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The name of the extended property.  This is a uri of the form
 * {scheme}#{local-name} convention.
 * <P>Type: TEXT</P>
 */
]"
"[VALUE = ""value""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The value of the extended property.
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_URI = Uri.parse(""content://"" + AUTHORITY + ""/extendedproperties"")]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[CONTENT_DIRECTORY = SyncStateContract.Constants.CONTENT_DIRECTORY]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[CONTENT_URI = Uri.withAppendedPath(Calendar.CONTENT_URI, CONTENT_DIRECTORY)]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table
 */
]"
"[mLoadedWakeups]","[]","[]","Optional[/**
 * Number of things that could wake up the device loaded from a
 * previous save.
 */
]"
"[mLastWakeups]","[]","[]","Optional[/**
 * Number of things that could wake up the device as of the
 * last run.
 */
]"
"[mUnpluggedWakeups]","[]","[]","Optional[/**
 * Number of things that could wake up the device as of the
 * last run.
 */
]"
"[mServiceStats = new HashMap<String, Serv>()]","[]","[FINAL]","Optional[/**
 * The statics we have collected for this package's services.
 */
]"
"[mStartTime]","[]","[]","Optional[/**
 * Total time (ms in battery uptime) the service has been left started.
 */
]"
"[mRunningSince]","[]","[]","Optional[/**
 * If service has been started and not yet stopped, this is
 * when it was started.
 */
]"
"[mRunning]","[]","[]","Optional[/**
 * True if we are currently running.
 */
]"
"[mStarts]","[]","[]","Optional[/**
 * Total number of times startService() has been called.
 */
]"
"[mLaunchedTime]","[]","[]","Optional[/**
 * Total time (ms in battery uptime) the service has been left launched.
 */
]"
"[mLaunchedSince]","[]","[]","Optional[/**
 * If service has been launched and not yet exited, this is
 * when it was launched (ms in battery uptime).
 */
]"
"[mLaunched]","[]","[]","Optional[/**
 * True if we are currently launched.
 */
]"
"[mLaunches]","[]","[]","Optional[/**
 * Total number times the service has been launched.
 */
]"
"[mLoadedStartTime]","[]","[]","Optional[/**
 * The amount of time spent started loaded from a previous save
 * (ms in battery uptime).
 */
]"
"[mLoadedStarts]","[]","[]","Optional[/**
 * The number of starts loaded from a previous save.
 */
]"
"[mLoadedLaunches]","[]","[]","Optional[/**
 * The number of launches loaded from a previous save.
 */
]"
"[mLastStartTime]","[]","[]","Optional[/**
 * The amount of time spent started as of the last run (ms
 * in battery uptime).
 */
]"
"[mLastStarts]","[]","[]","Optional[/**
 * The number of starts as of the last run.
 */
]"
"[mLastLaunches]","[]","[]","Optional[/**
 * The number of launches as of the last run.
 */
]"
"[mUnpluggedStartTime]","[]","[]","Optional[/**
 * The amount of time spent started when last unplugged (ms
 * in battery uptime).
 */
]"
"[mUnpluggedStarts]","[]","[]","Optional[/**
 * The number of starts when last unplugged.
 */
]"
"[mUnpluggedLaunches]","[]","[]","Optional[/**
 * The number of launches when last unplugged.
 */
]"
"[mHistoryIterator]","[]","[PRIVATE]","Optional.empty"
"[BATTERY_PLUGGED_NONE = 0]","[]","[PRIVATE, STATIC, FINAL]","Optional[// This should probably be exposed in the API, though it's not critical
]"
"[mPendingWrite = null]","[]","[]","Optional.empty"
"[mWriteLock = new ReentrantLock()]","[]","[FINAL]","Optional.empty"
"[CREATOR = new Parcelable.Creator<BatteryStatsImpl>() {

    public BatteryStatsImpl createFromParcel(Parcel in) {
        return new BatteryStatsImpl(in);
    }

    public BatteryStatsImpl[] newArray(int size) {
        return new BatteryStatsImpl[size];
    }
}]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[INDEXED_TEXT = ""index_text""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[CONTENT_URI = Uri.parse(""content://telephony/carriers"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URL for this table
 */
]"
"[DEFAULT_SORT_ORDER = ""name ASC""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The default sort order for this table
 */
]"
"[NAME = ""name""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[APN = ""apn""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROXY = ""proxy""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PORT = ""port""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[MMSPROXY = ""mmsproxy""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[MMSPORT = ""mmsport""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[SERVER = ""server""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[USER = ""user""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PASSWORD = ""password""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[MMSC = ""mmsc""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[MCC = ""mcc""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[MNC = ""mnc""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[NUMERIC = ""numeric""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[AUTH_TYPE = ""authtype""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE = ""type""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[CURRENT = ""current""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[SECRET_CODE_ACTION = ""android.provider.Telephony.SECRET_CODE""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Broadcast Action: A ""secret code"" has been entered in the dialer. Secret codes are
 * of the form *#*#<code>#*#*. The intent will have the data URI:</p>
 *
 * <p><code>android_secret_code://&lt;code&gt;</code></p>
 */
]"
"[SPN_STRINGS_UPDATED_ACTION = ""android.provider.Telephony.SPN_STRINGS_UPDATED""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Broadcast Action: The Service Provider string(s) have been updated.  Activities or
 * services that use these strings should update their display.
 * The intent will have the following extra values:</p>
 * <ul>
 * <li><em>showPlmn</em> - Boolean that indicates whether the PLMN should be shown.</li>
 * <li><em>plmn</em> - The operator name of the registered network, as a string.</li>
 * <li><em>showSpn</em> - Boolean that indicates whether the SPN should be shown.</li>
 * <li><em>spn</em> - The service provider name, as a string.</li>
 * </ul>
 * Note that <em>showPlmn</em> may indicate that <em>plmn</em> should be displayed, even
 * though the value for <em>plmn</em> is null.  This can happen, for example, if the phone
 * has not registered to a network yet.  In this case the receiver may substitute an
 * appropriate placeholder string (eg, ""No service"").
 *
 * It is recommended to display <em>plmn</em> before / above <em>spn</em> if
 * both are displayed.
 *
 * <p>Note this is a protected intent that can only be sent
 * by the system.
 */
]"
"[EXTRA_SHOW_PLMN = ""showPlmn""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[EXTRA_PLMN = ""plmn""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[EXTRA_SHOW_SPN = ""showSpn""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[EXTRA_SPN = ""spn""]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_AIM = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_MSN = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_YAHOO = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_SKYPE = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_QQ = 4]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_GOOGLE_TALK = 5]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_ICQ = 6]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_JABBER = 7]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[PROTOCOL_NETMEETING = 8]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/organization""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[TYPE_WORK = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_OTHER = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[COMPANY = DATA]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The company as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[TITLE = DATA4]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The position title at this company as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[DEPARTMENT = DATA5]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The department at this company as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[JOB_DESCRIPTION = DATA6]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The job description at this company as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[SYMBOL = DATA7]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The symbol of this company as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[PHONETIC_NAME = DATA8]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The phonetic name of this company as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[OFFICE_LOCATION = DATA9]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The office location of this organization.
 * <P>Type: TEXT</P>
 */
]"
"[PHONETIC_NAME_STYLE = DATA10]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The alphabet used for capturing the phonetic name.
 * See {@link ContactsContract.PhoneticNameStyle}.
 * @hide
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/relation""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[TYPE_ASSISTANT = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_BROTHER = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_CHILD = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_DOMESTIC_PARTNER = 4]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_FATHER = 5]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_FRIEND = 6]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_MANAGER = 7]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_MOTHER = 8]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_PARENT = 9]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_PARTNER = 10]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_REFERRED_BY = 11]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_RELATIVE = 12]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_SISTER = 13]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_SPOUSE = 14]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[NAME = DATA]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The name of the relative as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/contact_event""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[TYPE_ANNIVERSARY = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_OTHER = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_BIRTHDAY = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[START_DATE = DATA]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The event start date as the user entered it.
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/photo""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[PHOTO = DATA15]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Thumbnail photo of the raw contact. This is the raw bytes of an image
 * that could be inflated using {@link android.graphics.BitmapFactory}.
 * <p>
 * Type: BLOB
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/note""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[NOTE = DATA1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The note text.
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/group_membership""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[GROUP_ROW_ID = DATA1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The row id of the group that this group membership refers to. Exactly one of
 * this or {@link #GROUP_SOURCE_ID} must be set when inserting a row.
 * <P>Type: INTEGER</P>
 */
]"
"[GROUP_SOURCE_ID = ""group_sourceid""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The sourceid of the group that this group membership refers to.  Exactly one of
 * this or {@link #GROUP_ROW_ID} must be set when inserting a row.
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/website""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[TYPE_HOMEPAGE = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_BLOG = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_PROFILE = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_HOME = 4]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_WORK = 5]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_FTP = 6]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_OTHER = 7]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[URL = DATA]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The website URL string.
 * <P>Type: TEXT</P>
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/sip_address""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * MIME type used when storing this in data table.
 */
]"
"[TYPE_HOME = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_WORK = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[TYPE_OTHER = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional.empty"
"[SIP_ADDRESS = DATA1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The SIP address.
 * <P>Type: TEXT</P>
 */
]"
"[TITLE = ""title""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The display title of this group.
 * <p>
 * Type: TEXT
 */
]"
"[RES_PACKAGE = ""res_package""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The package name to use when creating {@link Resources} objects for
 * this group. This value is only designed for use when building user
 * interfaces, and should not be used to infer the owner.
 *
 * @hide
 */
]"
"[TITLE_RES = ""title_res""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The display title of this group to load as a resource from
 * {@link #RES_PACKAGE}, which may be localized.
 * <P>Type: TEXT</P>
 *
 * @hide
 */
]"
"[NOTES = ""notes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Notes about the group.
 * <p>
 * Type: TEXT
 */
]"
"[SYSTEM_ID = ""system_id""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The ID of this group if it is a System Group, i.e. a group that has a special meaning
 * to the sync adapter, null otherwise.
 * <P>Type: TEXT</P>
 */
]"
"[SUMMARY_COUNT = ""summ_count""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The total number of {@link Contacts} that have
 * {@link CommonDataKinds.GroupMembership} in this group. Read-only value that is only
 * present when querying {@link Groups#CONTENT_SUMMARY_URI}.
 * <p>
 * Type: INTEGER
 */
]"
"[SUMMARY_WITH_PHONES = ""summ_phones""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The total number of {@link Contacts} that have both
 * {@link CommonDataKinds.GroupMembership} in this group, and also have phone numbers.
 * Read-only value that is only present when querying
 * {@link Groups#CONTENT_SUMMARY_URI}.
 * <p>
 * Type: INTEGER
 */
]"
"[GROUP_VISIBLE = ""group_visible""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Flag indicating if the contacts belonging to this group should be
 * visible in any user interface.
 * <p>
 * Type: INTEGER (boolean)
 */
]"
"[DELETED = ""deleted""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The ""deleted"" flag: ""0"" by default, ""1"" if the row has been marked
 * for deletion. When {@link android.content.ContentResolver#delete} is
 * called on a group, it is marked for deletion. The sync adaptor
 * deletes the group on the server and then calls ContactResolver.delete
 * once more, this time setting the the
 * {@link ContactsContract#CALLER_IS_SYNCADAPTER} query parameter to
 * finalize the data removal.
 * <P>Type: INTEGER</P>
 */
]"
"[SHOULD_SYNC = ""should_sync""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Whether this group should be synced if the SYNC_EVERYTHING settings
 * is false for this group's account.
 * <p>
 * Type: INTEGER (boolean)
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(AUTHORITY_URI, ""groups"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table
 */
]"
"[CONTENT_SUMMARY_URI = Uri.withAppendedPath(AUTHORITY_URI, ""groups_summary"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table joined with details data from
 * {@link ContactsContract.Data}.
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/group""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of a directory of groups.
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/group""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of a single group.
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(AUTHORITY_URI, ""aggregation_exceptions"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/aggregation_exception""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of {@link #CONTENT_URI} providing a directory of data.
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/aggregation_exception""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME type of a {@link #CONTENT_URI} subdirectory of an aggregation exception
 */
]"
"[TYPE = ""type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The type of exception: {@link #TYPE_KEEP_TOGETHER}, {@link #TYPE_KEEP_SEPARATE} or
 * {@link #TYPE_AUTOMATIC}.
 *
 * <P>Type: INTEGER</P>
 */
]"
"[TYPE_AUTOMATIC = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Allows the provider to automatically decide whether the specified raw contacts should
 * be included in the same aggregate contact or not.
 */
]"
"[TYPE_KEEP_TOGETHER = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Makes sure that the specified raw contacts are included in the same
 * aggregate contact.
 */
]"
"[TYPE_KEEP_SEPARATE = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Makes sure that the specified raw contacts are NOT included in the same
 * aggregate contact.
 */
]"
"[RAW_CONTACT_ID1 = ""raw_contact_id1""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A reference to the {@link RawContacts#_ID} of the raw contact that the rule applies to.
 */
]"
"[RAW_CONTACT_ID2 = ""raw_contact_id2""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A reference to the other {@link RawContacts#_ID} of the raw contact that the rule
 * applies to.
 */
]"
"[ACCOUNT_NAME = ""account_name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The name of the account instance to which this row belongs.
 * <P>Type: TEXT</P>
 */
]"
"[ACCOUNT_TYPE = ""account_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The type of account to which this row belongs, which when paired with
 * {@link #ACCOUNT_NAME} identifies a specific account.
 * <P>Type: TEXT</P>
 */
]"
"[SHOULD_SYNC = ""should_sync""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Depending on the mode defined by the sync-adapter, this flag controls
 * the top-level sync behavior for this data source.
 * <p>
 * Type: INTEGER (boolean)
 */
]"
"[UNGROUPED_VISIBLE = ""ungrouped_visible""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Flag indicating if contacts without any {@link CommonDataKinds.GroupMembership}
 * entries should be visible in any user interface.
 * <p>
 * Type: INTEGER (boolean)
 */
]"
"[ANY_UNSYNCED = ""any_unsynced""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Read-only flag indicating if this {@link #SHOULD_SYNC} or any
 * {@link Groups#SHOULD_SYNC} under this account have been marked as
 * unsynced.
 */
]"
"[UNGROUPED_COUNT = ""summ_count""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Read-only count of {@link Contacts} from a specific source that have
 * no {@link CommonDataKinds.GroupMembership} entries.
 * <p>
 * Type: INTEGER
 */
]"
"[UNGROUPED_WITH_PHONES = ""summ_phones""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Read-only count of {@link Contacts} from a specific source that have
 * no {@link CommonDataKinds.GroupMembership} entries, and also have phone numbers.
 * <p>
 * Type: INTEGER
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(AUTHORITY_URI, ""settings"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/setting""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME-type of {@link #CONTENT_URI} providing a directory of
 * settings.
 */
]"
"[CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/setting""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME-type of {@link #CONTENT_URI} providing a single setting.
 */
]"
"[CONTENT_URI = Uri.withAppendedPath(AUTHORITY_URI, ""provider_status"")]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The content:// style URI for this table.  Requests to this URI can be
 * performed on the UI thread because they are always unblocking.
 *
 * @hide
 */
]"
"[CONTENT_TYPE = ""vnd.android.cursor.dir/provider_status""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The MIME-type of {@link #CONTENT_URI} providing a directory of
 * settings.
 *
 * @hide
 */
]"
"[STATUS = ""status""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * An integer representing the current status of the provider.
 *
 * @hide
 */
]"
"[STATUS_NORMAL = 0]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Default status of the provider.
 *
 * @hide
 */
]"
"[STATUS_UPGRADING = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The status used when the provider is in the process of upgrading.  Contacts
 * are temporarily unaccessible.
 *
 * @hide
 */
]"
"[STATUS_UPGRADE_OUT_OF_MEMORY = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The status used if the provider was in the process of upgrading but ran
 * out of storage. The DATA1 column will contain the estimated amount of
 * storage required (in bytes). Update status to STATUS_NORMAL to force
 * the provider to retry the upgrade.
 *
 * @hide
 */
]"
"[STATUS_CHANGING_LOCALE = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The status used during a locale change.
 *
 * @hide
 */
]"
"[DATA1 = ""data1""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Additional data associated with the status.
 *
 * @hide
 */
]"
"[ACTION_QUICK_CONTACT = ""com.android.contacts.action.QUICK_CONTACT""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Action used to trigger person pivot dialog.
 * @hide
 */
]"
"[EXTRA_TARGET_RECT = ""target_rect""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Extra used to specify pivot dialog location in screen coordinates.
 * @deprecated Use {@link Intent#setSourceBounds(Rect)} instead.
 * @hide
 */
]"
"[EXTRA_MODE = ""mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Extra used to specify size of pivot dialog.
 * @hide
 */
]"
"[EXTRA_EXCLUDE_MIMES = ""exclude_mimes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Extra used to indicate a list of specific MIME-types to exclude and
 * not display. Stored as a {@link String} array.
 * @hide
 */
]"
"[MODE_SMALL = 1]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Small QuickContact mode, usually presented with minimal actions.
 */
]"
"[MODE_MEDIUM = 2]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Medium QuickContact mode, includes actions and light summary describing
 * the {@link Contacts} entry being shown. This may include social
 * status and presence details.
 */
]"
"[MODE_LARGE = 3]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Large QuickContact mode, includes actions and larger, card-like summary
 * of the {@link Contacts} entry being shown. This may include detailed
 * information, such as a photo.
 */
]"
"[EXTRA_SELECTED_CONTACTS_APP_TAB_INDEX = ""SELECTED_TAB_INDEX""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Extra used to specify the last selected tab index of the Contacts app.
 * If this is not given or -1
 * @hide
 */
]"
"[SEARCH_SUGGESTION_CLICKED = ""android.provider.Contacts.SEARCH_SUGGESTION_CLICKED""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This is the intent that is fired when a search suggestion is clicked on.
 */
]"
"[SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED = ""android.provider.Contacts.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This is the intent that is fired when a search suggestion for dialing a number
 * is clicked on.
 */
]"
"[SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED = ""android.provider.Contacts.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * This is the intent that is fired when a search suggestion for creating a contact
 * is clicked on.
 */
]"
"[ATTACH_IMAGE = ""com.android.contacts.action.ATTACH_IMAGE""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Starts an Activity that lets the user pick a contact to attach an image to.
 * After picking the contact it launches the image cropper in face detection mode.
 */
]"
"[SHOW_OR_CREATE_CONTACT = ""com.android.contacts.action.SHOW_OR_CREATE_CONTACT""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Takes as input a data URI with a mailto: or tel: scheme. If a single
 * contact exists with the given data it will be shown. If no contact
 * exists, a dialog will ask the user if they want to create a new
 * contact with the provided details filled in. If multiple contacts
 * share the data the user will be prompted to pick which contact they
 * want to view.
 * <p>
 * For <code>mailto:</code> URIs, the scheme specific portion must be a
 * raw email address, such as one built using
 * {@link Uri#fromParts(String, String, String)}.
 * <p>
 * For <code>tel:</code> URIs, the scheme specific portion is compared
 * to existing numbers using the standard caller ID lookup algorithm.
 * The number must be properly encoded, for example using
 * {@link Uri#fromParts(String, String, String)}.
 * <p>
 * Any extras from the {@link Insert} class will be passed along to the
 * create activity if there are no contacts to show.
 * <p>
 * Passing true for the {@link #EXTRA_FORCE_CREATE} extra will skip
 * prompting the user when the contact doesn't exist.
 */
]"
"[EXTRA_FORCE_CREATE = ""com.android.contacts.action.FORCE_CREATE""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used with {@link #SHOW_OR_CREATE_CONTACT} to force creating a new
 * contact if no matching contact found. Otherwise, default behavior is
 * to prompt user with dialog before creating.
 * <p>
 * Type: BOOLEAN
 */
]"
"[EXTRA_CREATE_DESCRIPTION = ""com.android.contacts.action.CREATE_DESCRIPTION""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used with {@link #SHOW_OR_CREATE_CONTACT} to specify an exact
 * description to be shown when prompting user about creating a new
 * contact.
 * <p>
 * Type: STRING
 */
]"
"[EXTRA_TARGET_RECT = ""target_rect""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Optional extra used with {@link #SHOW_OR_CREATE_CONTACT} to specify a
 * dialog location using screen coordinates. When not specified, the
 * dialog will be centered.
 *
 * @hide
 */
]"
"[EXTRA_MODE = ""mode""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Optional extra used with {@link #SHOW_OR_CREATE_CONTACT} to specify a
 * desired dialog style, usually a variation on size. One of
 * {@link #MODE_SMALL}, {@link #MODE_MEDIUM}, or {@link #MODE_LARGE}.
 *
 * @hide
 */
]"
"[MODE_SMALL = 1]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value for {@link #EXTRA_MODE} to show a small-sized dialog.
 *
 * @hide
 */
]"
"[MODE_MEDIUM = 2]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value for {@link #EXTRA_MODE} to show a medium-sized dialog.
 *
 * @hide
 */
]"
"[MODE_LARGE = 3]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Value for {@link #EXTRA_MODE} to show a large-sized dialog.
 *
 * @hide
 */
]"
"[EXTRA_EXCLUDE_MIMES = ""exclude_mimes""]","[@Deprecated]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Optional extra used with {@link #SHOW_OR_CREATE_CONTACT} to indicate
 * a list of specific MIME-types to exclude and not display. Stored as a
 * {@link String} array.
 *
 * @hide
 */
]"
"[LIST_DEFAULT = ""com.android.contacts.action.LIST_DEFAULT""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The action for the default contacts list tab.
 */
]"
"[LIST_GROUP_ACTION = ""com.android.contacts.action.LIST_GROUP""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The action for the contacts list tab.
 */
]"
"[GROUP_NAME_EXTRA_KEY = ""com.android.contacts.extra.GROUP""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * When in LIST_GROUP_ACTION mode, this is the group to display.
 */
]"
"[LIST_ALL_CONTACTS_ACTION = ""com.android.contacts.action.LIST_ALL_CONTACTS""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The action for the all contacts list tab.
 */
]"
"[LIST_CONTACTS_WITH_PHONES_ACTION = ""com.android.contacts.action.LIST_CONTACTS_WITH_PHONES""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The action for the contacts with phone numbers list tab.
 */
]"
"[LIST_STARRED_ACTION = ""com.android.contacts.action.LIST_STARRED""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The action for the starred contacts list tab.
 */
]"
"[LIST_FREQUENT_ACTION = ""com.android.contacts.action.LIST_FREQUENT""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The action for the frequent contacts list tab.
 */
]"
"[LIST_STREQUENT_ACTION = ""com.android.contacts.action.LIST_STREQUENT""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The action for the ""strequent"" contacts list tab. It first lists the starred
 * contacts in alphabetical order and then the frequent contacts in descending
 * order of the number of times they have been contacted.
 */
]"
"[TITLE_EXTRA_KEY = ""com.android.contacts.extra.TITLE_EXTRA""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * A key for to be used as an intent extra to set the activity
 * title to a custom String value.
 */
]"
"[FILTER_CONTACTS_ACTION = ""com.android.contacts.action.FILTER_CONTACTS""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Activity Action: Display a filtered list of contacts
 * <p>
 * Input: Extra field {@link #FILTER_TEXT_EXTRA_KEY} is the text to use for
 * filtering
 * <p>
 * Output: Nothing.
 */
]"
"[FILTER_TEXT_EXTRA_KEY = ""com.android.contacts.extra.FILTER_TEXT""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * Used as an int extra field in {@link #FILTER_CONTACTS_ACTION}
 * intents to supply the text on which to filter.
 */
]"
"[ACTION = Intent.ACTION_INSERT]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The action code to use when adding a contact
 */
]"
"[FULL_MODE = ""full_mode""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * If present, forces a bypass of quick insert mode.
 */
]"
"[NAME = ""name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact name.
 * <P>Type: String</P>
 */
]"
"[PHONETIC_NAME = ""phonetic_name""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact phonetic name.
 * <P>Type: String</P>
 */
]"
"[COMPANY = ""company""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact company.
 * <P>Type: String</P>
 */
]"
"[JOB_TITLE = ""job_title""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact job title.
 * <P>Type: String</P>
 */
]"
"[NOTES = ""notes""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact notes.
 * <P>Type: String</P>
 */
]"
"[PHONE = ""phone""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact phone number.
 * <P>Type: String</P>
 */
]"
"[PHONE_TYPE = ""phone_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact phone number type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Phone},
 * or a string specifying a custom label.</P>
 */
]"
"[PHONE_ISPRIMARY = ""phone_isprimary""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the phone isprimary flag.
 * <P>Type: boolean</P>
 */
]"
"[SECONDARY_PHONE = ""secondary_phone""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional second contact phone number.
 * <P>Type: String</P>
 */
]"
"[SECONDARY_PHONE_TYPE = ""secondary_phone_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional second contact phone number type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Phone},
 * or a string specifying a custom label.</P>
 */
]"
"[TERTIARY_PHONE = ""tertiary_phone""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional third contact phone number.
 * <P>Type: String</P>
 */
]"
"[TERTIARY_PHONE_TYPE = ""tertiary_phone_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional third contact phone number type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Phone},
 * or a string specifying a custom label.</P>
 */
]"
"[EMAIL = ""email""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact email address.
 * <P>Type: String</P>
 */
]"
"[EMAIL_TYPE = ""email_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact email type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Email}
 * or a string specifying a custom label.</P>
 */
]"
"[EMAIL_ISPRIMARY = ""email_isprimary""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the email isprimary flag.
 * <P>Type: boolean</P>
 */
]"
"[SECONDARY_EMAIL = ""secondary_email""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional second contact email address.
 * <P>Type: String</P>
 */
]"
"[SECONDARY_EMAIL_TYPE = ""secondary_email_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional second contact email type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Email}
 * or a string specifying a custom label.</P>
 */
]"
"[TERTIARY_EMAIL = ""tertiary_email""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional third contact email address.
 * <P>Type: String</P>
 */
]"
"[TERTIARY_EMAIL_TYPE = ""tertiary_email_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an optional third contact email type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Email}
 * or a string specifying a custom label.</P>
 */
]"
"[POSTAL = ""postal""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact postal address.
 * <P>Type: String</P>
 */
]"
"[POSTAL_TYPE = ""postal_type""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the contact postal address type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.StructuredPostal}
 * or a string specifying a custom label.</P>
 */
]"
"[POSTAL_ISPRIMARY = ""postal_isprimary""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the postal isprimary flag.
 * <P>Type: boolean</P>
 */
]"
"[IM_HANDLE = ""im_handle""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for an IM handle.
 * <P>Type: String</P>
 */
]"
"[IM_PROTOCOL = ""im_protocol""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the IM protocol
 */
]"
"[IM_ISPRIMARY = ""im_isprimary""]","[]","[PUBLIC, STATIC, FINAL]","Optional[/**
 * The extra field for the IM isprimary flag.
 * <P>Type: boolean</P>
 */
]"
