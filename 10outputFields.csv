"Variable Name","Public","Protected","Private","Static","Final","Type","Initial Value","Annotation","Comment","Class"
"x","true","false","false","false","true","float","null","[]","Optional.empty","\android\gesture\GesturePoint.java"
"y","true","false","false","false","true","float","null","[]","Optional.empty","\android\gesture\GesturePoint.java"
"timestamp","true","false","false","false","true","long","null","[]","Optional.empty","\android\gesture\GesturePoint.java"
"VCARD_PARAM_SEPARATOR","false","false","true","true","true","String",""";""","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"sPostalTypePriorityMap","false","false","true","true","true","Map<Integer,Integer>","null","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"mShouldUseQuotedPrintable","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"VCARD_ITEM_SEPARATOR","false","false","true","true","true","String",""";""","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"mVCardType","false","false","true","false","true","int","null","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"mUsesAndroidProperty","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"VCARD_PARAM_EQUAL","false","false","true","true","true","String","""=""","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"VCARD_PARAM_ENCODING_BASE64_V21","false","false","true","true","true","String","""ENCODING="" + VCardConstants.PARAM_ENCODING_BASE64","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"mVCardCharsetParameter","false","false","true","false","true","String","null","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"mUsesDefactProperty","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"mIsV30OrV40","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"mShouldAppendCharsetParam","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"appendCharset","false","false","false","false","true","boolean","null","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"VCARD_PARAM_ENCODING_BASE64_AS_B","false","false","true","true","true","String","""ENCODING="" + VCardConstants.PARAM_ENCODING_B","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"mAppendTypeParamName","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"mEndAppended","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"addressData","false","false","false","false","true","String","null","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"mIsJapaneseMobilePhone","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"VCARD_WS","false","false","true","true","true","String",""" ""","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"mOnlyOneNoteFieldIsAvailable","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"DEFAULT_EMAIL_TYPE","true","false","false","true","true","int","Email.TYPE_OTHER","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"LOG_TAG","false","false","true","true","true","String","""VCardBuilder""","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"DEFAULT_PHONE_TYPE","true","false","false","true","true","int","Phone.TYPE_HOME","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"mRefrainsQPToNameProperties","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"mNeedsToConvertPhoneticString","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"VCARD_END_OF_LINE","false","false","true","true","true","String","""\r\n""","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"VCARD_DATA_SEPARATOR","false","false","true","true","true","String",""":""","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"reallyUseQuotedPrintable","false","false","false","false","true","boolean","null","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"mBuilder","false","false","true","false","false","StringBuilder","null","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"DEFAULT_POSTAL_TYPE","true","false","false","true","true","int","StructuredPostal.TYPE_HOME","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"VCARD_PARAM_ENCODING_QP","false","false","true","true","true","String","""ENCODING="" + VCardConstants.PARAM_ENCODING_QP","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"mCharset","false","false","true","false","true","String","null","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"VCARD_DATA_PUBLIC","false","false","true","true","true","String","""PUBLIC""","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"mIsDoCoMo","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"sAllowedAndroidPropertySet","false","false","true","true","true","Set<String>","Collections.unmodifiableSet(new HashSet<String>(Arrays.asList(Nickname.CONTENT_ITEM_TYPE, Event.CONTENT_ITEM_TYPE, Relation.CONTENT_ITEM_TYPE)))","[]","Optional[// e.g. BLOB is not what we can handle here now.
]","\android\pim\vcard\VCardBuilder.java"
"SHIFT_JIS","false","false","true","true","true","String","""SHIFT_JIS""","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"VCARD_DATA_VCARD","false","false","true","true","true","String","""VCARD""","[]","Optional.empty","\android\pim\vcard\VCardBuilder.java"
"mSampleSize","false","false","false","false","true","int","null","[]","Optional.empty","\android\os\LatencyTimer.java"
"mScaleFactor","false","false","false","false","true","int","null","[]","Optional.empty","\android\os\LatencyTimer.java"
"store","false","false","false","false","false","HashMap<String,long[]>","new HashMap<String, long[]>()","[]","Optional.empty","\android\os\LatencyTimer.java"
"TAG","false","false","false","false","true","String","""LatencyTimer""","[]","Optional.empty","\android\os\LatencyTimer.java"
"mChars","false","false","true","false","false","char","null","[]","Optional.empty","\android\text\AlteredCharSequence.java"
"mSource","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\text\AlteredCharSequence.java"
"mEnd","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\AlteredCharSequence.java"
"mSpanned","false","false","true","false","false","Spanned","null","[]","Optional.empty","\android\text\AlteredCharSequence.java"
"mStart","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\AlteredCharSequence.java"
"mTextSelectHandleRightRes","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\TextView.java"
"mMaxScroll","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\TextView.java"
"mRepeatLimit","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\TextView.java"
"privateImeOptions","false","false","false","false","false","String","null","[]","Optional.empty","\android\widget\TextView.java"
"mSingleLine","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\TextView.java"
"CENTER","true","false","false","true","true","int","1","[]","Optional.empty","\android\widget\TextView.java"
"mPositionY","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\TextView.java"
"mPositionX","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\TextView.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<SavedState>","new Parcelable.Creator<SavedState>() {

    public SavedState createFromParcel(Parcel in) {
        return new SavedState(in);
    }

    public SavedState[] newArray(int size) {
        return new SavedState[size];
    }
}","[@SuppressWarnings(""hiding"")]","Optional.empty","\android\widget\TextView.java"
"ID_SWITCH_INPUT_METHOD","false","false","true","true","true","int","android.R.id.switchInputMethod","[]","Optional.empty","\android\widget\TextView.java"
"mSelectAllOnFocus","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\TextView.java"
"mFreezesText","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\TextView.java"
"mScrollUnit","false","false","true","false","true","float","null","[]","Optional.empty","\android\widget\TextView.java"
"MESSAGE_START","false","false","true","true","true","int","0x1","[]","Optional.empty","\android\widget\TextView.java"
"PIXELS","false","false","true","true","true","int","2","[]","Optional.empty","\android\widget\TextView.java"
"mSpannableFactory","false","false","true","false","false","Spannable.Factory","Spannable.Factory.getInstance()","[]","Optional.empty","\android\widget\TextView.java"
"mIsDragging","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\TextView.java"
"mDrawables","false","false","true","false","false","Drawables","null","[]","Optional.empty","\android\widget\TextView.java"
"mContentChanged","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\widget\TextView.java"
"LEFT","true","false","false","true","true","int","0","[]","Optional.empty","\android\widget\TextView.java"
"selStart","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\TextView.java"
"mUserSetTextScaleX","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\TextView.java"
"EXTRACT_UNKNOWN","false","false","false","true","true","int","-1","[]","Optional.empty","\android\widget\TextView.java"
"mShadowRadius","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\TextView.java"
"mIsShowing","false","false","true","false","false","boolean","null","[]","Optional[// Whether selection anchors are active
]","\android\widget\TextView.java"
"mHotspotX","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\TextView.java"
"mHotspotY","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\TextView.java"
"mBoring","false","false","true","false","false","BoringLayout.Metrics","null","[]","Optional.empty","\android\widget\TextView.java"
"mTextSelectHandleRes","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\TextView.java"
"mBufferType","false","false","true","false","false","BufferType","BufferType.NORMAL","[]","Optional.empty","\android\widget\TextView.java"
"mSelectionControllerEnabled","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\TextView.java"
"mListeners","false","false","true","false","false","ArrayList<TextWatcher>","null","[]","Optional.empty","\android\widget\TextView.java"
"mInputType","false","false","true","false","false","int","EditorInfo.TYPE_NULL","[]","Optional.empty","\android\widget\TextView.java"
"imeOptions","false","false","false","false","false","int","EditorInfo.IME_NULL","[]","Optional.empty","\android\widget\TextView.java"
"DELAY_BEFORE_FADE_OUT","false","false","true","true","true","int","4100","[]","Optional.empty","\android\widget\TextView.java"
"mCurHintTextColor","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\TextView.java"
"ID_ADD_TO_DICTIONARY","false","false","true","true","true","int","android.R.id.addToDictionary","[]","Optional.empty","\android\widget\TextView.java"
"mInsertionControllerEnabled","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\TextView.java"
"mSpacingAdd","false","false","true","false","false","float","0","[]","Optional.empty","\android\widget\TextView.java"
"imeActionLabel","false","false","false","false","false","CharSequence","null","[]","Optional.empty","\android\widget\TextView.java"
"mPositionOnTop","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\TextView.java"
"mMinTouchOffset","false","false","true","false","false","int","null","[]","Optional[// The offsets of that last touch down event. Remembered to start selection there.
]","\android\widget\TextView.java"
"mChangedStart","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\TextView.java"
"EMPTY_SPANNED","false","false","true","true","true","Spanned","new SpannedString("""")","[]","Optional.empty","\android\widget\TextView.java"
"MARQUEE_RESOLUTION","false","false","true","true","true","int","1000 / 30","[]","Optional.empty","\android\widget\TextView.java"
"mEditableFactory","false","false","true","false","false","Editable.Factory","Editable.Factory.getInstance()","[]","Optional.empty","\android\widget\TextView.java"
"mFadeStop","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\TextView.java"
"mCurTextColor","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\TextView.java"
"mCancelled","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\TextView.java"
"mTransformed","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\widget\TextView.java"
"mMaximum","false","false","true","false","false","int","Integer.MAX_VALUE","[]","Optional.empty","\android\widget\TextView.java"
"ID_CUT","false","false","true","true","true","int","android.R.id.cut","[]","Optional.empty","\android\widget\TextView.java"
"mBeforeText","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\widget\TextView.java"
"mStartHandle","false","false","true","false","false","HandleView","null","[]","Optional[// The cursor controller images
]","\android\widget\TextView.java"
"mStatus","false","false","true","false","false","byte","MARQUEE_STOPPED","[]","Optional.empty","\android\widget\TextView.java"
"ID_COPY_URL","false","false","true","true","true","int","android.R.id.copyUrl","[]","Optional.empty","\android\widget\TextView.java"
"PRIORITY","false","false","true","true","false","int","100","[]","Optional.empty","\android\widget\TextView.java"
"MARQUEE_RESTART_DELAY","false","false","true","true","true","int","1200","[]","Optional.empty","\android\widget\TextView.java"
"LINES","false","false","true","true","true","int","1","[]","Optional.empty","\android\widget\TextView.java"
"PREDRAW_PENDING","false","false","true","true","true","int","1","[]","Optional.empty","\android\widget\TextView.java"
"mInputMethodState","false","false","false","false","false","InputMethodState","null","[]","Optional.empty","\android\widget\TextView.java"
"mChars","false","false","true","false","false","char","null","[]","Optional.empty","\android\widget\TextView.java"
"MARQUEE_DELAY","false","false","true","true","true","int","1200","[]","Optional.empty","\android\widget\TextView.java"
"mMaxWidth","false","false","true","false","false","int","Integer.MAX_VALUE","[]","Optional.empty","\android\widget\TextView.java"
"mMinWidthMode","false","false","true","false","false","int","PIXELS","[]","Optional.empty","\android\widget\TextView.java"
"mMinMode","false","false","true","false","false","int","LINES","[]","Optional.empty","\android\widget\TextView.java"
"mView","false","false","true","false","true","WeakReference<TextView>","null","[]","Optional.empty","\android\widget\TextView.java"
"mHandle","false","false","true","false","true","HandleView","null","[]","Optional[// The cursor controller image
]","\android\widget\TextView.java"
"sCursorControllerTempRect","false","false","true","true","false","Rect","new Rect()","[]","Optional[// Only one cursor controller is active at any time which prevent race conditions.
]","\android\widget\TextView.java"
"mShowCursor","false","false","true","false","false","long","null","[]","Optional.empty","\android\widget\TextView.java"
"PREDRAW_NOT_REGISTERED","false","false","true","true","true","int","0","[]","Optional.empty","\android\widget\TextView.java"
"mDesiredHeightAtMeasure","false","false","true","false","false","int","-1","[]","Optional.empty","\android\widget\TextView.java"
"mPopup","false","false","true","false","false","ErrorPopup","null","[]","Optional.empty","\android\widget\TextView.java"
"mSelectionMoved","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\TextView.java"
"mEnterKeyIsDown","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\TextView.java"
"EMS","false","false","true","true","true","int","LINES","[]","Optional.empty","\android\widget\TextView.java"
"mContainer","false","false","true","false","false","PopupWindow","null","[]","Optional.empty","\android\widget\TextView.java"
"sTempRect","false","false","true","true","true","RectF","new RectF()","[]","Optional.empty","\android\widget\TextView.java"
"mLayout","false","false","true","false","false","Layout","null","[]","Optional.empty","\android\widget\TextView.java"
"mHintLayout","false","false","true","false","false","Layout","null","[]","Optional.empty","\android\widget\TextView.java"
"SANS","false","false","true","true","true","int","1","[]","Optional[// TODO: How can we get this from the XML instead of hardcoding it here?
]","\android\widget\TextView.java"
"mHint","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\widget\TextView.java"
"NO_FILTERS","false","false","true","true","true","InputFilter","new InputFilter[0]","[]","Optional.empty","\android\widget\TextView.java"
"mScrolled","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\TextView.java"
"mSelectionModifierCursorController","false","false","true","false","false","CursorController","null","[]","Optional.empty","\android\widget\TextView.java"
"mScroller","false","false","true","false","false","Scroller","null","[]","Optional.empty","\android\widget\TextView.java"
"MARQUEE_STOPPED","false","false","true","true","true","byte","0x0","[]","Optional.empty","\android\widget\TextView.java"
"mScroll","false","false","false","false","false","float","null","[]","Optional.empty","\android\widget\TextView.java"
"mSavedLayout","false","false","true","false","false","BoringLayout","null","[]","Optional.empty","\android\widget\TextView.java"
"SIGNED","false","false","true","true","true","int","2","[]","Optional[// TODO: How can we get this from the XML instead of hardcoding it here?
]","\android\widget\TextView.java"
"mMarquee","false","false","true","false","false","Marquee","null","[]","Optional.empty","\android\widget\TextView.java"
"mDPadCenterIsDown","false","false","true","false","false","boolean","false","[]","Optional[// select from the current cursor position. Otherwise, select from long pressed position.
]","\android\widget\TextView.java"
"ID_SELECT_ALL","false","false","true","true","true","int","android.R.id.selectAll","[]","Optional[// Context menu entries
]","\android\widget\TextView.java"
"mTemporaryDetach","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\TextView.java"
"mLinkTextColor","false","false","true","false","false","ColorStateList","null","[]","Optional.empty","\android\widget\TextView.java"
"mMinWidth","false","false","true","false","false","int","0","[]","Optional.empty","\android\widget\TextView.java"
"mSelectHandleRight","false","false","false","false","false","Drawable","null","[]","Optional.empty","\android\widget\TextView.java"
"LOG_TAG","false","false","false","true","true","String","""TextView""","[]","Optional.empty","\android\widget\TextView.java"
"mCursorChanged","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\widget\TextView.java"
"mSelectHandleCenter","false","false","false","false","false","Drawable","null","[]","Optional.empty","\android\widget\TextView.java"
"mTextSelectHandleLeftRes","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\TextView.java"
"mPreDrawState","false","false","true","false","false","int","PREDRAW_NOT_REGISTERED","[]","Optional.empty","\android\widget\TextView.java"
"mSelectHandleLeft","false","false","false","false","false","Drawable","null","[]","Optional.empty","\android\widget\TextView.java"
"mAbove","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\TextView.java"
"mExtracting","false","false","false","false","false","ExtractedTextRequest","null","[]","Optional.empty","\android\widget\TextView.java"
"mBatchEditNesting","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\TextView.java"
"mMovement","false","false","true","false","false","MovementMethod","null","[]","Optional.empty","\android\widget\TextView.java"
"BLINK","false","false","true","true","true","int","500","[]","Optional.empty","\android\widget\TextView.java"
"MARQUEE_DELTA_MAX","false","false","true","true","true","float","0.07f","[]","Optional[// TODO: Add an option to configure this
]","\android\widget\TextView.java"
"mErrorWasChanged","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\TextView.java"
"MARQUEE_RUNNING","false","false","true","true","true","byte","0x2","[]","Optional.empty","\android\widget\TextView.java"
"onEditorActionListener","false","false","false","false","false","OnEditorActionListener","null","[]","Optional.empty","\android\widget\TextView.java"
"ID_COPY","false","false","true","true","true","int","android.R.id.copy","[]","Optional.empty","\android\widget\TextView.java"
"MESSAGE_RESTART","false","false","true","true","true","int","0x3","[]","Optional.empty","\android\widget\TextView.java"
"frozenWithFocus","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\widget\TextView.java"
"mTextColor","false","false","true","false","false","ColorStateList","null","[]","Optional.empty","\android\widget\TextView.java"
"text","false","false","false","false","false","CharSequence","null","[]","Optional.empty","\android\widget\TextView.java"
"mText","false","false","true","false","false","CharSequence","null","[@ViewDebug.ExportedProperty]","Optional.empty","\android\widget\TextView.java"
"mHorizontallyScrolling","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\TextView.java"
"mHider","false","false","true","false","true","Runnable","new Runnable() {

    public void run() {
        hide();
    }
}","[]","Optional.empty","\android\widget\TextView.java"
"mHighlightColor","false","false","true","false","false","int","0xCC475925","[]","Optional.empty","\android\widget\TextView.java"
"mGhostStart","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\TextView.java"
"mCreatedWithASelection","false","false","true","false","false","boolean","false","[]","Optional[// Set when this TextView gained focus with some text selected. Will start selection mode.
]","\android\widget\TextView.java"
"mBlink","false","false","true","false","false","Blink","null","[]","Optional.empty","\android\widget\TextView.java"
"mMaxWidthMode","false","false","true","false","false","int","PIXELS","[]","Optional.empty","\android\widget\TextView.java"
"mIsInTextSelectionMode","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\TextView.java"
"mStart","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\TextView.java"
"mTmpRectF","false","false","false","false","false","RectF","new RectF()","[]","Optional.empty","\android\widget\TextView.java"
"mDrawableWidthTop","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\TextView.java"
"mTextPaint","false","false","true","false","true","TextPaint","null","[]","Optional[// display attributes
]","\android\widget\TextView.java"
"mTempRect","false","false","false","false","false","Rect","null","[]","Optional.empty","\android\widget\TextView.java"
"extras","false","false","false","false","false","Bundle","null","[]","Optional.empty","\android\widget\TextView.java"
"enterDown","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\widget\TextView.java"
"ID_PASTE","false","false","true","true","true","int","android.R.id.paste","[]","Optional.empty","\android\widget\TextView.java"
"mHeight","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\TextView.java"
"mFrozenWithFocus","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\TextView.java"
"mHighlightPath","false","false","true","false","false","Path","null","[]","Optional[// tmp primitives, so we don't alloc them on each draw
]","\android\widget\TextView.java"
"PREDRAW_DONE","false","false","true","true","true","int","2","[]","Optional.empty","\android\widget\TextView.java"
"mTouchOffsetY","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\TextView.java"
"RIGHT","true","false","false","true","true","int","2","[]","Optional.empty","\android\widget\TextView.java"
"MONOSPACE","false","false","true","true","true","int","3","[]","Optional.empty","\android\widget\TextView.java"
"mIncludePad","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\widget\TextView.java"
"mDrawablePadding","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\TextView.java"
"mInputContentType","false","false","false","false","false","InputContentType","null","[]","Optional.empty","\android\widget\TextView.java"
"mDrawableTop","false","false","false","false","false","Drawable","null","[]","Optional.empty","\android\widget\TextView.java"
"mTmpExtracted","false","false","false","false","true","ExtractedText","new ExtractedText()","[]","Optional.empty","\android\widget\TextView.java"
"mInput","false","false","true","false","false","KeyListener","null","[]","Optional.empty","\android\widget\TextView.java"
"mCharWrapper","false","false","true","false","false","CharWrapper","null","[]","Optional.empty","\android\widget\TextView.java"
"mMinimum","false","false","true","false","false","int","0","[]","Optional.empty","\android\widget\TextView.java"
"mInBatchEditControllers","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\TextView.java"
"mTmpOffset","false","false","false","false","false","float","new float[2]","[]","Optional.empty","\android\widget\TextView.java"
"mPreviousTapPositionY","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\TextView.java"
"mPreviousTapPositionX","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\TextView.java"
"mCursorVisible","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\widget\TextView.java"
"mHighlightPaint","false","false","true","false","true","Paint","null","[]","Optional.empty","\android\widget\TextView.java"
"mDrawableSizeTop","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\TextView.java"
"mPreviousTapUpTime","false","false","true","false","false","long","0","[]","Optional[// Double tap detection
]","\android\widget\TextView.java"
"ID_START_SELECTING_TEXT","false","false","true","true","true","int","android.R.id.startSelectingText","[]","Optional.empty","\android\widget\TextView.java"
"mAutoLinkMask","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\TextView.java"
"EXTRACT_NOTHING","false","false","false","true","true","int","-2","[]","Optional.empty","\android\widget\TextView.java"
"mSpacingMult","false","false","true","false","false","float","1","[]","Optional.empty","\android\widget\TextView.java"
"DECIMAL","false","false","true","true","true","int","4","[]","Optional.empty","\android\widget\TextView.java"
"VERY_WIDE","false","false","true","true","true","int","16384","[]","Optional[// XXX should be much larger
]","\android\widget\TextView.java"
"mDrawable","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\TextView.java"
"MARQUEE_PIXELS_PER_SECOND","false","false","true","true","true","int","30","[]","Optional.empty","\android\widget\TextView.java"
"mError","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\widget\TextView.java"
"mMaxMode","false","false","true","false","false","int","LINES","[]","Optional.empty","\android\widget\TextView.java"
"mTouchToWindowOffsetX","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\TextView.java"
"mTouchToWindowOffsetY","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\TextView.java"
"mHintBoring","false","false","true","false","false","BoringLayout.Metrics","null","[]","Optional.empty","\android\widget\TextView.java"
"mChangeWatcher","false","false","true","false","false","ChangeWatcher","null","[]","Optional.empty","\android\widget\TextView.java"
"mLastScroll","false","false","true","false","false","long","null","[]","Optional.empty","\android\widget\TextView.java"
"ANIMATED_SCROLL_GAP","false","false","true","true","true","int","250","[]","Optional.empty","\android\widget\TextView.java"
"mLinksClickable","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\widget\TextView.java"
"mShowErrorAfterAttach","false","false","true","false","false","boolean","null","[]","Optional[/**
 * This flag is set if the TextView tries to display an error before it
 * is attached to the window (so its position is still unknown).
 * It causes the error to be shown later, when onAttachedToWindow()
 * is called.
 */
]","\android\widget\TextView.java"
"mDispatchTemporaryDetach","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\TextView.java"
"mSelectionModeChanged","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\widget\TextView.java"
"mInsertionPointCursorController","false","false","true","false","false","CursorController","null","[]","Optional[// Cursor Controllers. Null when disabled.
]","\android\widget\TextView.java"
"mHintTextColor","false","false","true","false","false","ColorStateList","null","[]","Optional.empty","\android\widget\TextView.java"
"mCursorRectInWindow","false","false","false","false","false","Rect","new Rect()","[]","Optional.empty","\android\widget\TextView.java"
"mEllipsize","false","false","true","false","false","TextUtils.TruncateAt","null","[]","Optional.empty","\android\widget\TextView.java"
"DEBUG_EXTRACT","false","false","false","true","true","boolean","false","[]","Optional.empty","\android\widget\TextView.java"
"mEatTouchRelease","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\TextView.java"
"mTouchFocusSelected","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\TextView.java"
"error","false","false","false","false","false","CharSequence","null","[]","Optional.empty","\android\widget\TextView.java"
"MESSAGE_TICK","false","false","true","true","true","int","0x2","[]","Optional.empty","\android\widget\TextView.java"
"mHighlightPathBogus","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\widget\TextView.java"
"mRestartMarquee","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\TextView.java"
"mTransformation","false","false","true","false","false","TransformationMethod","null","[]","Optional.empty","\android\widget\TextView.java"
"UNKNOWN_BORING","false","false","true","true","true","BoringLayout.Metrics","new BoringLayout.Metrics()","[]","Optional.empty","\android\widget\TextView.java"
"MARQUEE_STARTING","false","false","true","true","true","byte","0x1","[]","Optional.empty","\android\widget\TextView.java"
"mController","false","false","true","false","false","CursorController","null","[]","Optional.empty","\android\widget\TextView.java"
"mLastParentX","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\TextView.java"
"mLastParentY","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\TextView.java"
"selEnd","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\TextView.java"
"mCompoundRect","false","false","false","false","true","Rect","new Rect()","[]","Optional.empty","\android\widget\TextView.java"
"mPrevStart","false","false","true","false","true","int","null","[]","Optional.empty","\android\widget\TextView.java"
"mMarqueeRepeatLimit","false","false","true","false","false","int","3","[]","Optional.empty","\android\widget\TextView.java"
"mTempCoords","false","false","false","false","true","int","new int[2]","[]","Optional.empty","\android\widget\TextView.java"
"imeActionId","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\TextView.java"
"mFilters","false","false","true","false","false","InputFilter","NO_FILTERS","[]","Optional.empty","\android\widget\TextView.java"
"SERIF","false","false","true","true","true","int","2","[]","Optional.empty","\android\widget\TextView.java"
"mGravity","false","false","true","false","false","int","Gravity.TOP | Gravity.LEFT","[]","Optional.empty","\android\widget\TextView.java"
"mMaxFadeScroll","false","false","false","false","false","float","null","[]","Optional.empty","\android\widget\TextView.java"
"mGhostOffset","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\TextView.java"
"mContextMenuTriggeredByKey","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\TextView.java"
"mReadyToDraw","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\webkit\ViewManager.java"
"height","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\ViewManager.java"
"mChildren","false","false","true","false","true","ArrayList<ChildView>","new ArrayList<ChildView>()","[]","Optional.empty","\android\webkit\ViewManager.java"
"x","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\ViewManager.java"
"y","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\ViewManager.java"
"mView","false","false","false","false","false","View","null","[]","Optional[// generic view to show
]","\android\webkit\ViewManager.java"
"MAX_SURFACE_AREA","false","false","true","false","true","int","null","[]","Optional[// Threshold at which a surface is prevented from further increasing in size
]","\android\webkit\ViewManager.java"
"mHidden","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\webkit\ViewManager.java"
"mZoomInProgress","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\webkit\ViewManager.java"
"MAX_SURFACE_DIMENSION","false","false","true","true","true","int","2048","[]","Optional[// GPU Limit (hard coded for now)
]","\android\webkit\ViewManager.java"
"width","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\ViewManager.java"
"mWebView","false","false","true","false","true","WebView","null","[]","Optional.empty","\android\webkit\ViewManager.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<GroupMetadata>","new Parcelable.Creator<GroupMetadata>() {

    public GroupMetadata createFromParcel(Parcel in) {
        GroupMetadata gm = GroupMetadata.obtain(in.readInt(), in.readInt(), in.readInt(), in.readLong());
        return gm;
    }

    public GroupMetadata[] newArray(int size) {
        return new GroupMetadata[size];
    }
}","[]","Optional.empty","\android\widget\ExpandableListConnector.java"
"mExpGroupMetadataList","false","false","true","false","false","ArrayList<GroupMetadata>","null","[]","Optional[/**
 * List of metadata for the currently expanded groups. The metadata consists
 * of data essential for efficiently translating between flat list positions
 * and group/child positions. See {@link GroupMetadata}.
 */
]","\android\widget\ExpandableListConnector.java"
"gPos","false","false","false","false","false","int","null","[]","Optional[/**
 * This group's group position
 */
]","\android\widget\ExpandableListConnector.java"
"flPos","false","false","false","false","false","int","null","[]","Optional[/**
 * This group's flat list position
 */
]","\android\widget\ExpandableListConnector.java"
"MAX_POOL_SIZE","false","false","true","true","true","int","5","[]","Optional.empty","\android\widget\ExpandableListConnector.java"
"mExpandableListAdapter","false","false","true","false","false","ExpandableListAdapter","null","[]","Optional[/**
 * The ExpandableListAdapter to fetch the data/Views for this expandable list
 */
]","\android\widget\ExpandableListConnector.java"
"lastChildFlPos","false","false","false","false","false","int","null","[]","Optional[/**
 * This group's last child's flat list position, so basically
 * the range of this group in the flat list
 */
]","\android\widget\ExpandableListConnector.java"
"mMaxExpGroupCount","false","false","true","false","false","int","Integer.MAX_VALUE","[]","Optional[/**
 * The maximum number of allowable expanded groups. Defaults to 'no limit'
 */
]","\android\widget\ExpandableListConnector.java"
"groupMetadata","true","false","false","false","false","GroupMetadata","null","[]","Optional[/**
 * Link back to the expanded GroupMetadata for this group. Useful for
 * removing the group from the list of expanded groups inside the
 * connector when we collapse the group, and also as a check to see if
 * the group was expanded or collapsed (this will be null if the group
 * is collapsed since we don't keep that group's metadata)
 */
]","\android\widget\ExpandableListConnector.java"
"sPool","false","false","true","true","false","ArrayList<PositionMetadata>","new ArrayList<PositionMetadata>(MAX_POOL_SIZE)","[]","Optional.empty","\android\widget\ExpandableListConnector.java"
"mTotalExpChildrenCount","false","false","true","false","false","int","null","[]","Optional[/**
 * The number of children from all currently expanded groups
 */
]","\android\widget\ExpandableListConnector.java"
"groupInsertIndex","true","false","false","false","false","int","null","[]","Optional[/**
 * For groups that are collapsed, we use this as the index (in
 * mExpGroupMetadataList) to insert this group when we are expanding
 * this group.
 */
]","\android\widget\ExpandableListConnector.java"
"position","true","false","false","false","false","ExpandableListPosition","null","[]","Optional[/**
 * Data type to hold the position and its type (child/group)
 */
]","\android\widget\ExpandableListConnector.java"
"REFRESH","false","false","false","true","true","int","-1","[]","Optional.empty","\android\widget\ExpandableListConnector.java"
"gId","false","false","false","false","false","long","null","[]","Optional[/**
 * This group's id
 */
]","\android\widget\ExpandableListConnector.java"
"mDataSetObserver","false","false","true","false","true","DataSetObserver","new MyDataSetObserver()","[]","Optional[/**
 * Change observer used to have ExpandableListAdapter changes pushed to us
 */
]","\android\widget\ExpandableListConnector.java"
"capabilitiesSpecified","false","false","false","false","false","boolean","null","[]","Optional[/**
 * from --capabilities
 */
]","\com\android\internal\os\ZygoteConnection.java"
"permittedCapabilities","false","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\ZygoteConnection.java"
"CONNECTION_TIMEOUT_MILLIS","false","false","true","true","true","int","1000","[]","Optional[/**
 * {@link android.net.LocalSocket#setSoTimeout} value for connections.
 * Effectively, the amount of time a requestor has between the start of
 * the request and the completed request. The select-loop mode Zygote
 * doesn't have the logic to return to the select loop in the middle of
 * a request, so we need to time out here to avoid being denial-of-serviced.
 */
]","\com\android\internal\os\ZygoteConnection.java"
"uid","false","false","false","false","false","int","0","[]","Optional[/**
 * from --setuid
 */
]","\com\android\internal\os\ZygoteConnection.java"
"uidSpecified","false","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\os\ZygoteConnection.java"
"sPeerWaitSocket","false","false","true","true","false","LocalSocket","null","[]","Optional[/**
 * A long-lived reference to the original command socket used to launch
 * this peer. If ""peer wait"" mode is specified, the process that requested
 * the new VM instance intends to track the lifetime of the spawned instance
 * via the command socket. In this case, the command socket is closed
 * in the Zygote and placed here in the spawned instance so that it will
 * not be collected and finalized. This field remains null at all times
 * in the original Zygote process, and in all spawned processes where
 * ""peer-wait"" mode was not requested.
 */
]","\com\android\internal\os\ZygoteConnection.java"
"remainingArgs","false","false","false","false","false","String","null","[]","Optional[/**
 * Any args after and including the first non-option arg
 * (or after a '--')
 */
]","\com\android\internal\os\ZygoteConnection.java"
"intArray2d","false","false","true","true","true","int","new int[0][0]","[]","Optional[/**
 * a prototype instance for a future List.toArray()
 */
]","\com\android\internal\os\ZygoteConnection.java"
"gids","false","false","false","false","false","int","null","[]","Optional[/**
 * from --setgroups
 */
]","\com\android\internal\os\ZygoteConnection.java"
"classpath","false","false","false","false","false","String","null","[]","Optional[/**
 * from --classpath
 */
]","\com\android\internal\os\ZygoteConnection.java"
"effectiveCapabilities","false","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\ZygoteConnection.java"
"debugFlags","false","false","false","false","false","int","null","[]","Optional[/**
 * From --enable-debugger, --enable-checkjni, --enable-assert, and
 * --enable-safemode
 */
]","\com\android\internal\os\ZygoteConnection.java"
"mSocketReader","false","false","true","false","true","BufferedReader","null","[]","Optional.empty","\com\android\internal\os\ZygoteConnection.java"
"MAX_ZYGOTE_ARGC","false","false","true","true","true","int","1024","[]","Optional[/**
 * max number of arguments that a connection can specify
 */
]","\com\android\internal\os\ZygoteConnection.java"
"peer","false","false","true","false","true","Credentials","null","[]","Optional.empty","\com\android\internal\os\ZygoteConnection.java"
"mSocketOutStream","false","false","true","false","true","DataOutputStream","null","[]","Optional.empty","\com\android\internal\os\ZygoteConnection.java"
"gidSpecified","false","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\os\ZygoteConnection.java"
"TAG","false","false","true","true","true","String","""Zygote""","[]","Optional.empty","\com\android\internal\os\ZygoteConnection.java"
"mSocket","false","false","true","false","true","LocalSocket","null","[]","Optional[/**
 * The command socket.
 *
 * mSocket is retained in the child process in ""peer wait"" mode, so
 * that it closes when the child process terminates. In other cases,
 * it is closed in the peer.
 */
]","\com\android\internal\os\ZygoteConnection.java"
"gid","false","false","false","false","false","int","0","[]","Optional[/**
 * from --setgid
 */
]","\com\android\internal\os\ZygoteConnection.java"
"rlimits","false","false","false","false","false","ArrayList<int[]>","null","[]","Optional[/**
 * from all --rlimit=r,c,m
 */
]","\com\android\internal\os\ZygoteConnection.java"
"peerWait","false","false","false","false","false","boolean","null","[]","Optional[/**
 * from --peer-wait
 */
]","\com\android\internal\os\ZygoteConnection.java"
"runtimeInit","false","false","false","false","false","boolean","null","[]","Optional[/**
 * from --runtime-init
 */
]","\com\android\internal\os\ZygoteConnection.java"
"state","false","false","false","false","false","HierarchicalState","null","[]","Optional[/**
 * The state
 */
]","\com\android\internal\util\HierarchicalStateMachine.java"
"active","false","false","false","false","false","boolean","null","[]","Optional[/**
 * True when the state has been entered and on the stack
 */
]","\com\android\internal\util\HierarchicalStateMachine.java"
"mInitialState","false","false","true","false","false","HierarchicalState","null","[]","Optional[/**
 * The initial state that will process the first message
 */
]","\com\android\internal\util\HierarchicalStateMachine.java"
"HSM_INIT_CMD","true","false","false","true","true","int","-1","[]","Optional[/**
 * Message.what value when initializing
 */
]","\com\android\internal\util\HierarchicalStateMachine.java"
"parentStateInfo","false","false","false","false","false","StateInfo","null","[]","Optional[/**
 * The parent of this state, null if there is no parent
 */
]","\com\android\internal\util\HierarchicalStateMachine.java"
"mDestState","false","false","true","false","false","HierarchicalState","null","[]","Optional[/**
 * The destination state when transitionTo has been invoked
 */
]","\com\android\internal\util\HierarchicalStateMachine.java"
"mHsmHandler","false","false","true","false","false","HsmHandler","null","[]","Optional.empty","\com\android\internal\util\HierarchicalStateMachine.java"
"mHsmThread","false","false","true","false","false","HandlerThread","null","[]","Optional.empty","\com\android\internal\util\HierarchicalStateMachine.java"
"mQuittingState","false","false","true","false","false","QuittingState","new QuittingState()","[]","Optional[/**
 * State used when state machine is quitting
 */
]","\com\android\internal\util\HierarchicalStateMachine.java"
"mStateInfo","false","false","true","false","false","HashMap<HierarchicalState,StateInfo>","new HashMap<HierarchicalState, StateInfo>()","[]","Optional[/**
 * The map of all of the states in the state machine
 */
]","\com\android\internal\util\HierarchicalStateMachine.java"
"mName","false","false","true","false","false","String","null","[]","Optional.empty","\com\android\internal\util\HierarchicalStateMachine.java"
"mStateStackTopIndex","false","false","true","false","false","int","-1","[]","Optional[/**
 * Top of mStateStack
 */
]","\com\android\internal\util\HierarchicalStateMachine.java"
"mIsConstructionCompleted","false","false","true","false","false","boolean","null","[]","Optional[/**
 * true if construction of the state machine has not been completed
 */
]","\com\android\internal\util\HierarchicalStateMachine.java"
"NOT_HANDLED","true","false","false","true","true","boolean","false","[]","Optional[/**
 * Convenience constant that maybe returned by processMessage
 * to indicate the the message was NOT processed and is to be
 * processed by parent states
 */
]","\com\android\internal\util\HierarchicalStateMachine.java"
"HANDLED","true","false","false","true","true","boolean","true","[]","Optional[/**
 * Convenience constant that maybe returned by processMessage
 * to indicate the the message was processed and is not to be
 * processed by parent states
 */
]","\com\android\internal\util\HierarchicalStateMachine.java"
"mTempStateStack","false","false","true","false","false","StateInfo","null","[]","Optional[/**
 * A temporary stack used to manage the state stack
 */
]","\com\android\internal\util\HierarchicalStateMachine.java"
"mInitMsg","false","false","true","true","true","Message","null","[]","Optional[/**
 * The initialization message
 */
]","\com\android\internal\util\HierarchicalStateMachine.java"
"mHaltingState","false","false","true","false","false","HaltingState","new HaltingState()","[]","Optional[/**
 * State used when state machine is halted
 */
]","\com\android\internal\util\HierarchicalStateMachine.java"
"mHsm","false","false","true","false","false","HierarchicalStateMachine","null","[]","Optional[/**
 * Reference to the HierarchicalStateMachine
 */
]","\com\android\internal\util\HierarchicalStateMachine.java"
"mStateStack","false","false","true","false","false","StateInfo","null","[]","Optional[/**
 * Stack used to manage the current hierarchy of states
 */
]","\com\android\internal\util\HierarchicalStateMachine.java"
"mDeferredMessages","false","false","true","false","false","ArrayList<Message>","new ArrayList<Message>()","[]","Optional[/**
 * The list of deferred messages
 */
]","\com\android\internal\util\HierarchicalStateMachine.java"
"TAG","false","false","true","true","true","String","""HierarchicalStateMachine""","[]","Optional.empty","\com\android\internal\util\HierarchicalStateMachine.java"
"HSM_QUIT_CMD","true","false","false","true","true","int","-1","[]","Optional[/**
 * Message.what value when quitting
 */
]","\com\android\internal\util\HierarchicalStateMachine.java"
"mProcessedMessages","false","false","true","false","false","ProcessedMessages","new ProcessedMessages()","[]","Optional[/**
 * A list of messages that this state machine has processed
 */
]","\com\android\internal\util\HierarchicalStateMachine.java"
"mTempStateStackCount","false","false","true","false","false","int","null","[]","Optional[/**
 * The top of the mTempStateStack
 */
]","\com\android\internal\util\HierarchicalStateMachine.java"
"mQuitObj","false","false","true","true","true","Object","new Object()","[]","Optional[/**
 * The quit object
 */
]","\com\android\internal\util\HierarchicalStateMachine.java"
"mDbg","false","false","true","false","false","boolean","false","[]","Optional[/**
 * The debug flag
 */
]","\com\android\internal\util\HierarchicalStateMachine.java"
"mMsg","false","false","true","false","false","Message","null","[]","Optional[/**
 * The current message
 */
]","\com\android\internal\util\HierarchicalStateMachine.java"
"mPrivateDnsRouteSet","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\net\NetworkStateTracker.java"
"MIN_NETWORK_STATE_TRACKER_EVENT","false","false","true","true","true","int","1","[]","Optional[// too.
]","\android\net\NetworkStateTracker.java"
"mInterfaceName","false","true","false","false","false","String","null","[]","Optional.empty","\android\net\NetworkStateTracker.java"
"EVENT_NETWORK_SUBTYPE_CHANGED","true","false","false","true","true","int","6","[]","Optional.empty","\android\net\NetworkStateTracker.java"
"mContext","false","true","false","false","false","Context","null","[]","Optional.empty","\android\net\NetworkStateTracker.java"
"EVENT_CONFIGURATION_CHANGED","true","false","false","true","true","int","4","[]","Optional.empty","\android\net\NetworkStateTracker.java"
"mTarget","false","true","false","false","false","Handler","null","[]","Optional.empty","\android\net\NetworkStateTracker.java"
"EVENT_NOTIFICATION_CHANGED","true","false","false","true","true","int","3","[]","Optional[/**
 * arg1: 1 to show, 0 to hide
 * arg2: ID of the notification
 * obj: Notification (if showing)
 */
]","\android\net\NetworkStateTracker.java"
"mDnsPropNames","false","true","false","false","false","String","null","[]","Optional.empty","\android\net\NetworkStateTracker.java"
"mNetworkInfo","false","true","false","false","false","NetworkInfo","null","[]","Optional.empty","\android\net\NetworkStateTracker.java"
"EVENT_SCAN_RESULTS_AVAILABLE","true","false","false","true","true","int","2","[]","Optional.empty","\android\net\NetworkStateTracker.java"
"TAG","false","false","true","true","true","String","""NetworkStateTracker""","[]","Optional.empty","\android\net\NetworkStateTracker.java"
"mDefaultGatewayAddr","false","true","false","false","false","int","null","[]","Optional.empty","\android\net\NetworkStateTracker.java"
"DBG","false","false","true","true","false","boolean","false","[]","Optional.empty","\android\net\NetworkStateTracker.java"
"EVENT_ROAMING_CHANGED","true","false","false","true","true","int","5","[]","Optional.empty","\android\net\NetworkStateTracker.java"
"MAX_NETWORK_STATE_TRACKER_EVENT","false","false","true","true","true","int","100","[]","Optional.empty","\android\net\NetworkStateTracker.java"
"mTeardownRequested","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\net\NetworkStateTracker.java"
"EVENT_STATE_CHANGED","true","false","false","true","true","int","1","[]","Optional.empty","\android\net\NetworkStateTracker.java"
"mChildren","false","false","true","false","false","ArrayList<UriMatcher>","null","[]","Optional.empty","\android\content\UriMatcher.java"
"NUMBER","false","false","true","true","true","int","1","[]","Optional.empty","\android\content\UriMatcher.java"
"TEXT","false","false","true","true","true","int","2","[]","Optional.empty","\android\content\UriMatcher.java"
"mText","false","false","true","false","false","String","null","[]","Optional.empty","\android\content\UriMatcher.java"
"EXACT","false","false","true","true","true","int","0","[]","Optional.empty","\android\content\UriMatcher.java"
"mWhich","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\UriMatcher.java"
"NO_MATCH","true","false","false","true","true","int","-1","[]","Optional.empty","\android\content\UriMatcher.java"
"PATH_SPLIT_PATTERN","false","false","false","true","true","Pattern","Pattern.compile(""/"")","[]","Optional.empty","\android\content\UriMatcher.java"
"mCode","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\UriMatcher.java"
"KEYCODE_BUTTON_A","true","false","false","true","true","int","96","[]","Optional[/**
 * Key code constant: A Button key.
 * On a game controller, the A button should be either the button labeled A
 * or the first button on the upper row of controller buttons.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_BUTTON_B","true","false","false","true","true","int","97","[]","Optional[/**
 * Key code constant: B Button key.
 * On a game controller, the B button should be either the button labeled B
 * or the second button on the upper row of controller buttons.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_BUTTON_L1","true","false","false","true","true","int","102","[]","Optional[/**
 * Key code constant: L1 Button key.
 * On a game controller, the L1 button should be either the button labeled L1 (or L)
 * or the top left trigger button.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_BUTTON_C","true","false","false","true","true","int","98","[]","Optional[/**
 * Key code constant: C Button key.
 * On a game controller, the C button should be either the button labeled C
 * or the third button on the upper row of controller buttons.
 */
]","\android\view\KeyEvent.java"
"mEventTime","false","false","true","false","false","long","null","[]","Optional.empty","\android\view\KeyEvent.java"
"KEYCODE_DPAD_DOWN","true","false","false","true","true","int","20","[]","Optional[/**
 * Key code constant: Directional Pad Down key.
 * May also be synthesized from trackball motions.
 */
]","\android\view\KeyEvent.java"
"mDownTime","false","false","true","false","false","long","null","[]","Optional.empty","\android\view\KeyEvent.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<KeyEvent>","new Parcelable.Creator<KeyEvent>() {

    public KeyEvent createFromParcel(Parcel in) {
        // skip token, we already know this is a KeyEvent
        in.readInt();
        return KeyEvent.createFromParcelBody(in);
    }

    public KeyEvent[] newArray(int size) {
        return new KeyEvent[size];
    }
}","[]","Optional.empty","\android\view\KeyEvent.java"
"mFlags","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\KeyEvent.java"
"KEYCODE_BUTTON_X","true","false","false","true","true","int","99","[]","Optional[/**
 * Key code constant: X Button key.
 * On a game controller, the X button should be either the button labeled X
 * or the first button on the lower row of controller buttons.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_BUTTON_Y","true","false","false","true","true","int","100","[]","Optional[/**
 * Key code constant: Y Button key.
 * On a game controller, the Y button should be either the button labeled Y
 * or the second button on the lower row of controller buttons.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_VOLUME_UP","true","false","false","true","true","int","24","[]","Optional[/**
 * Key code constant: Volume Up key.
 */
]","\android\view\KeyEvent.java"
"META_ALT_ON","true","false","false","true","true","int","0x02","[]","Optional[/**
 * <p>This mask is used to check whether one of the ALT meta keys is pressed.</p>
 *
 * @see #isAltPressed()
 * @see #getMetaState()
 * @see #KEYCODE_ALT_LEFT
 * @see #KEYCODE_ALT_RIGHT
 */
]","\android\view\KeyEvent.java"
"KEYCODE_ENDCALL","true","false","false","true","true","int","6","[]","Optional[/**
 * Key code constant: End Call key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_CLEAR","true","false","false","true","true","int","28","[]","Optional[/**
 * Key code constant: Clear key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_POWER","true","false","false","true","true","int","26","[]","Optional[/**
 * Key code constant: Power key.
 */
]","\android\view\KeyEvent.java"
"mRepeatCount","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\KeyEvent.java"
"KEYCODE_BACK","true","false","false","true","true","int","4","[]","Optional[/**
 * Key code constant: Back key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_SHIFT_RIGHT","true","false","false","true","true","int","60","[]","Optional[/**
 * Key code constant: Right Shift modifier key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_DEL","true","false","false","true","true","int","67","[]","Optional[/**
 * Key code constant: Backspace key.
 * Deletes characters before the insertion point.
 */
]","\android\view\KeyEvent.java"
"FLAG_SOFT_KEYBOARD","true","false","false","true","true","int","0x2","[]","Optional[/**
 * This mask is set if the key event was generated by a software keyboard.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_BUTTON_SELECT","true","false","false","true","true","int","109","[]","Optional[/**
 * Key code constant: Select Button key.
 * On a game controller, the button labeled Select.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_NOTIFICATION","true","false","false","true","true","int","83","[]","Optional[/**
 * Key code constant: Notification key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_PICTSYMBOLS","true","false","false","true","true","int","94","[]","Optional[// switch symbol-sets (Emoji,Kao-moji)
]","\android\view\KeyEvent.java"
"KEYCODE_SPACE","true","false","false","true","true","int","62","[]","Optional[/**
 * Key code constant: Space key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_BUTTON_START","true","false","false","true","true","int","108","[]","Optional[/**
 * Key code constant: Start Button key.
 * On a game controller, the button labeled Start.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_BUTTON_Z","true","false","false","true","true","int","101","[]","Optional[/**
 * Key code constant: Z Button key.
 * On a game controller, the Z button should be either the button labeled Z
 * or the third button on the lower row of controller buttons.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_SOFT_LEFT","true","false","false","true","true","int","1","[]","Optional[/**
 * Key code constant: Soft Left key.
 * Usually situated below the display on phones and used as a multi-function
 * feature key for selecting a software defined function shown on the bottom left
 * of the display.
 */
]","\android\view\KeyEvent.java"
"FLAG_WOKE_HERE","true","false","false","true","true","int","0x1","[]","Optional[/**
 * This mask is set if the device woke because of this key event.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_ENTER","true","false","false","true","true","int","66","[]","Optional[/**
 * Key code constant: Enter key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_SOFT_RIGHT","true","false","false","true","true","int","2","[]","Optional[/**
 * Key code constant: Soft Right key.
 * Usually situated below the display on phones and used as a multi-function
 * feature key for selecting a software defined function shown on the bottom right
 * of the display.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_APOSTROPHE","true","false","false","true","true","int","75","[]","Optional[/**
 * Key code constant: ''' (apostrophe) key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_HOME","true","false","false","true","true","int","3","[]","Optional[/**
 * Key code constant: Home key.
 * This key is handled by the framework and is never delivered to applications.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_FOCUS","true","false","false","true","true","int","80","[]","Optional[// *Camera* focus
]","\android\view\KeyEvent.java"
"KEYCODE_ALT_LEFT","true","false","false","true","true","int","57","[]","Optional[/**
 * Key code constant: Left Alt modifier key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_BUTTON_L2","true","false","false","true","true","int","104","[]","Optional[/**
 * Key code constant: L2 Button key.
 * On a game controller, the L2 button should be either the button labeled L2
 * or the bottom left trigger button.
 */
]","\android\view\KeyEvent.java"
"mScanCode","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\KeyEvent.java"
"KEYCODE_ALT_RIGHT","true","false","false","true","true","int","58","[]","Optional[/**
 * Key code constant: Right Alt modifier key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_MEDIA_REWIND","true","false","false","true","true","int","89","[]","Optional[/**
 * Key code constant: Rewind media key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_AT","true","false","false","true","true","int","77","[]","Optional[/**
 * Key code constant: '@' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_ENVELOPE","true","false","false","true","true","int","65","[]","Optional[/**
 * Key code constant: Envelope special function key.
 * Used to launch a mail application.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_EQUALS","true","false","false","true","true","int","70","[]","Optional[/**
 * Key code constant: '=' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_PAGE_UP","true","false","false","true","true","int","92","[]","Optional[/**
 * Key code constant: Page Up key.
 */
]","\android\view\KeyEvent.java"
"META_SYM_ON","true","false","false","true","true","int","0x4","[]","Optional[/**
 * <p>This mask is used to check whether the SYM meta key is pressed.</p>
 *
 * @see #isSymPressed()
 * @see #getMetaState()
 */
]","\android\view\KeyEvent.java"
"KEYCODE_BACKSLASH","true","false","false","true","true","int","73","[]","Optional[/**
 * Key code constant: '\' key.
 */
]","\android\view\KeyEvent.java"
"ACTION_UP","true","false","false","true","true","int","1","[]","Optional[/**
 * {@link #getAction} value: the key has been released.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_POUND","true","false","false","true","true","int","18","[]","Optional[/**
 * Key code constant: '#' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_NUM","true","false","false","true","true","int","78","[]","Optional[/**
 * Key code constant: Number modifier key.
 * Used to enter numeric symbols.
 * This key is not Num Lock; it is more like {@link #KEYCODE_ALT_LEFT} and is
 * interpreted as an ALT key by {@link android.text.method.MetaKeyKeyListener}.
 */
]","\android\view\KeyEvent.java"
"mActiveLongPresses","false","false","false","false","false","SparseIntArray","new SparseIntArray()","[]","Optional.empty","\android\view\KeyEvent.java"
"mKeyCode","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\KeyEvent.java"
"KEYCODE_SEMICOLON","true","false","false","true","true","int","74","[]","Optional[/**
 * Key code constant: ';' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_CALL","true","false","false","true","true","int","5","[]","Optional[/**
 * Key code constant: Call key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_MEDIA_PLAY_PAUSE","true","false","false","true","true","int","85","[]","Optional[/**
 * Key code constant: Play/Pause media key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_RIGHT_BRACKET","true","false","false","true","true","int","72","[]","Optional[/**
 * Key code constant: ']' key.
 */
]","\android\view\KeyEvent.java"
"mCharacters","false","false","true","false","false","String","null","[]","Optional.empty","\android\view\KeyEvent.java"
"KEYCODE_STAR","true","false","false","true","true","int","17","[]","Optional[/**
 * Key code constant: '*' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_PERIOD","true","false","false","true","true","int","56","[]","Optional[/**
 * Key code constant: '.' key.
 */
]","\android\view\KeyEvent.java"
"FLAG_TRACKING","true","false","false","true","true","int","0x200","[]","Optional[/**
 * Set for {@link #ACTION_UP} when this event's key code is still being
 * tracked from its initial down.  That is, somebody requested that tracking
 * started on the key down and a long press has not caused
 * the tracking to be canceled.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_MEDIA_NEXT","true","false","false","true","true","int","87","[]","Optional[/**
 * Key code constant: Play Next media key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_TAB","true","false","false","true","true","int","61","[]","Optional[/**
 * Key code constant: Tab key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_BUTTON_MODE","true","false","false","true","true","int","110","[]","Optional[/**
 * Key code constant: Mode Button key.
 * On a game controller, the button labeled Mode.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_SYM","true","false","false","true","true","int","63","[]","Optional[/**
 * Key code constant: Symbol modifier key.
 * Used to enter alternate symbols.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_DPAD_UP","true","false","false","true","true","int","19","[]","Optional[/**
 * Key code constant: Directional Pad Up key.
 * May also be synthesized from trackball motions.
 */
]","\android\view\KeyEvent.java"
"MAX_KEYCODE","true","false","false","true","true","int","84","[@Deprecated]","Optional[/**
 * @deprecated There are now more than MAX_KEYCODE keycodes.
 * Use {@link #getMaxKeyCode()} instead.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_Y","true","false","false","true","true","int","53","[]","Optional[/**
 * Key code constant: 'Y' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_PAGE_DOWN","true","false","false","true","true","int","93","[]","Optional[/**
 * Key code constant: Page Down key.
 */
]","\android\view\KeyEvent.java"
"META_ALT_RIGHT_ON","true","false","false","true","true","int","0x20","[]","Optional[/**
 * <p>This mask is used to check whether the right the ALT meta key is pressed.</p>
 *
 * @see #isAltPressed()
 * @see #getMetaState()
 * @see #KEYCODE_ALT_RIGHT
 */
]","\android\view\KeyEvent.java"
"KEYCODE_Z","true","false","false","true","true","int","54","[]","Optional[/**
 * Key code constant: 'Z' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_W","true","false","false","true","true","int","51","[]","Optional[/**
 * Key code constant: 'W' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_X","true","false","false","true","true","int","52","[]","Optional[/**
 * Key code constant: 'X' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_U","true","false","false","true","true","int","49","[]","Optional[/**
 * Key code constant: 'U' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_V","true","false","false","true","true","int","50","[]","Optional[/**
 * Key code constant: 'V' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_MEDIA_FAST_FORWARD","true","false","false","true","true","int","90","[]","Optional[/**
 * Key code constant: Fast Forward media key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_S","true","false","false","true","true","int","47","[]","Optional[/**
 * Key code constant: 'S' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_T","true","false","false","true","true","int","48","[]","Optional[/**
 * Key code constant: 'T' key.
 */
]","\android\view\KeyEvent.java"
"FLAG_LONG_PRESS","true","false","false","true","true","int","0x80","[]","Optional[/**
 * This flag is set for the first key repeat that occurs after the
 * long press timeout.
 */
]","\android\view\KeyEvent.java"
"mDownTarget","false","false","false","false","false","Object","null","[]","Optional.empty","\android\view\KeyEvent.java"
"KEYCODE_MUTE","true","false","false","true","true","int","91","[]","Optional[/**
 * Key code constant: Mute key.
 */
]","\android\view\KeyEvent.java"
"FLAG_VIRTUAL_HARD_KEY","true","false","false","true","true","int","0x40","[]","Optional[/**
 * This key event was generated by a virtual (on-screen) hard key area.
 * Typically this is an area of the touchscreen, outside of the regular
 * display, dedicated to ""hardware"" buttons.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_SWITCH_CHARSET","true","false","false","true","true","int","95","[]","Optional[// switch char-sets (Kanji,Katakana)
]","\android\view\KeyEvent.java"
"KEYCODE_DPAD_CENTER","true","false","false","true","true","int","23","[]","Optional[/**
 * Key code constant: Directional Pad Center key.
 * May also be synthesized from trackball motions.
 */
]","\android\view\KeyEvent.java"
"FLAG_CANCELED_LONG_PRESS","true","false","false","true","true","int","0x100","[]","Optional[/**
 * Set when a key event has {@link #FLAG_CANCELED} set because a long
 * press action was executed while it was down.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_BUTTON_THUMBL","true","false","false","true","true","int","106","[]","Optional[/**
 * Key code constant: Left Thumb Button key.
 * On a game controller, the left thumb button indicates that the left (or only)
 * joystick is pressed.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_BUTTON_THUMBR","true","false","false","true","true","int","107","[]","Optional[/**
 * Key code constant: Right Thumb Button key.
 * On a game controller, the right thumb button indicates that the right
 * joystick is pressed.
 */
]","\android\view\KeyEvent.java"
"FLAG_START_TRACKING","true","false","false","true","true","int","0x40000000","[]","Optional[/**
 * Private control to determine when an app is tracking a key sequence.
 * @hide
 */
]","\android\view\KeyEvent.java"
"KEYCODE_MEDIA_PREVIOUS","true","false","false","true","true","int","88","[]","Optional[/**
 * Key code constant: Play Previous media key.
 */
]","\android\view\KeyEvent.java"
"mDownKeyCode","false","false","false","false","false","int","null","[]","Optional.empty","\android\view\KeyEvent.java"
"META_SHIFT_ON","true","false","false","true","true","int","0x1","[]","Optional[/**
 * <p>This mask is used to check whether one of the SHIFT meta keys is pressed.</p>
 *
 * @see #isShiftPressed()
 * @see #getMetaState()
 * @see #KEYCODE_SHIFT_LEFT
 * @see #KEYCODE_SHIFT_RIGHT
 */
]","\android\view\KeyEvent.java"
"FLAG_EDITOR_ACTION","true","false","false","true","true","int","0x10","[]","Optional[/**
 * This mask is used for compatibility, to identify enter keys that are
 * coming from an IME whose enter key has been auto-labelled ""next"" or
 * ""done"".  This allows TextView to dispatch these as normal enter keys
 * for old applications, but still do the appropriate action when
 * receiving them.
 */
]","\android\view\KeyEvent.java"
"TAG","false","false","false","true","true","String","""KeyEvent""","[]","Optional.empty","\android\view\KeyEvent.java"
"KEYCODE_DPAD_RIGHT","true","false","false","true","true","int","22","[]","Optional[/**
 * Key code constant: Directional Pad Right key.
 * May also be synthesized from trackball motions.
 */
]","\android\view\KeyEvent.java"
"ACTION_DOWN","true","false","false","true","true","int","0","[]","Optional[/**
 * {@link #getAction} value: the key has been pressed down.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_MINUS","true","false","false","true","true","int","69","[]","Optional[/**
 * Key code constant: '-'.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_COMMA","true","false","false","true","true","int","55","[]","Optional[/**
 * Key code constant: ',' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_DPAD_LEFT","true","false","false","true","true","int","21","[]","Optional[/**
 * Key code constant: Directional Pad Left key.
 * May also be synthesized from trackball motions.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_UNKNOWN","true","false","false","true","true","int","0","[]","Optional[/**
 * Key code constant: Unknown key code.
 */
]","\android\view\KeyEvent.java"
"mAction","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\KeyEvent.java"
"KEYCODE_SHIFT_LEFT","true","false","false","true","true","int","59","[]","Optional[/**
 * Key code constant: Left Shift modifier key.
 */
]","\android\view\KeyEvent.java"
"ACTION_MULTIPLE","true","false","false","true","true","int","2","[]","Optional[/**
 * {@link #getAction} value: multiple duplicate key events have
 * occurred in a row, or a complex string is being delivered.  If the
 * key code is not {#link {@link #KEYCODE_UNKNOWN} then the
 * {#link {@link #getRepeatCount()} method returns the number of times
 * the given key code should be executed.
 * Otherwise, if the key code is {@link #KEYCODE_UNKNOWN}, then
 * this is a sequence of characters as returned by {@link #getCharacters}.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_LEFT_BRACKET","true","false","false","true","true","int","71","[]","Optional[/**
 * Key code constant: '[' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_PLUS","true","false","false","true","true","int","81","[]","Optional[/**
 * Key code constant: '+' key.
 */
]","\android\view\KeyEvent.java"
"FLAG_FROM_SYSTEM","true","false","false","true","true","int","0x8","[]","Optional[/**
 * This mask is set if an event was known to come from a trusted part
 * of the system.  That is, the event is known to come from the user,
 * and could not have been spoofed by a third party component.
 */
]","\android\view\KeyEvent.java"
"FLAG_KEEP_TOUCH_MODE","true","false","false","true","true","int","0x4","[]","Optional[/**
 * This mask is set if we don't want the key event to cause us to leave
 * touch mode.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_GRAVE","true","false","false","true","true","int","68","[]","Optional[/**
 * Key code constant: '`' (backtick) key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_HEADSETHOOK","true","false","false","true","true","int","79","[]","Optional[/**
 * Key code constant: Headset Hook key.
 * Used to hang up calls and stop media.
 */
]","\android\view\KeyEvent.java"
"FLAG_CANCELED","true","false","false","true","true","int","0x20","[]","Optional[/**
 * When associated with up key events, this indicates that the key press
 * has been canceled.  Typically this is used with virtual touch screen
 * keys, where the user can slide from the virtual key area on to the
 * display: in that case, the application will receive a canceled up
 * event and should not perform the action normally associated with the
 * key.  Note that for this to work, the application can not perform an
 * action for a key until it receives an up or the long press timeout has
 * expired.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_EXPLORER","true","false","false","true","true","int","64","[]","Optional[/**
 * Key code constant: Explorer special function key.
 * Used to launch a browser application.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_SLASH","true","false","false","true","true","int","76","[]","Optional[/**
 * Key code constant: '/' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_1","true","false","false","true","true","int","8","[]","Optional[/**
 * Key code constant: '1' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_2","true","false","false","true","true","int","9","[]","Optional[/**
 * Key code constant: '2' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_0","true","false","false","true","true","int","7","[]","Optional[/**
 * Key code constant: '0' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_BUTTON_R1","true","false","false","true","true","int","103","[]","Optional[/**
 * Key code constant: R1 Button key.
 * On a game controller, the R1 button should be either the button labeled R1 (or R)
 * or the top right trigger button.
 */
]","\android\view\KeyEvent.java"
"mMetaState","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\KeyEvent.java"
"KEYCODE_BUTTON_R2","true","false","false","true","true","int","105","[]","Optional[/**
 * Key code constant: R2 Button key.
 * On a game controller, the R2 button should be either the button labeled R2
 * or the bottom right trigger button.
 */
]","\android\view\KeyEvent.java"
"META_ALT_LEFT_ON","true","false","false","true","true","int","0x10","[]","Optional[/**
 * <p>This mask is used to check whether the left ALT meta key is pressed.</p>
 *
 * @see #isAltPressed()
 * @see #getMetaState()
 * @see #KEYCODE_ALT_LEFT
 */
]","\android\view\KeyEvent.java"
"KEYCODE_VOLUME_DOWN","true","false","false","true","true","int","25","[]","Optional[/**
 * Key code constant: Volume Down key.
 */
]","\android\view\KeyEvent.java"
"LAST_KEYCODE","false","false","true","true","true","int","KEYCODE_BUTTON_MODE","[]","Optional.empty","\android\view\KeyEvent.java"
"KEYCODE_I","true","false","false","true","true","int","37","[]","Optional[/**
 * Key code constant: 'I' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_J","true","false","false","true","true","int","38","[]","Optional[/**
 * Key code constant: 'J' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_G","true","false","false","true","true","int","35","[]","Optional[/**
 * Key code constant: 'G' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_H","true","false","false","true","true","int","36","[]","Optional[/**
 * Key code constant: 'H' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_E","true","false","false","true","true","int","33","[]","Optional[/**
 * Key code constant: 'E' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_MEDIA_STOP","true","false","false","true","true","int","86","[]","Optional[/**
 * Key code constant: Stop media key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_F","true","false","false","true","true","int","34","[]","Optional[/**
 * Key code constant: 'F' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_C","true","false","false","true","true","int","31","[]","Optional[/**
 * Key code constant: 'C' key.
 */
]","\android\view\KeyEvent.java"
"META_SHIFT_LEFT_ON","true","false","false","true","true","int","0x40","[]","Optional[/**
 * <p>This mask is used to check whether the left SHIFT meta key is pressed.</p>
 *
 * @see #isShiftPressed()
 * @see #getMetaState()
 * @see #KEYCODE_SHIFT_LEFT
 */
]","\android\view\KeyEvent.java"
"KEYCODE_D","true","false","false","true","true","int","32","[]","Optional[/**
 * Key code constant: 'D' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_Q","true","false","false","true","true","int","45","[]","Optional[/**
 * Key code constant: 'Q' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_R","true","false","false","true","true","int","46","[]","Optional[/**
 * Key code constant: 'R' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_O","true","false","false","true","true","int","43","[]","Optional[/**
 * Key code constant: 'O' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_P","true","false","false","true","true","int","44","[]","Optional[/**
 * Key code constant: 'P' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_M","true","false","false","true","true","int","41","[]","Optional[/**
 * Key code constant: 'M' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_N","true","false","false","true","true","int","42","[]","Optional[/**
 * Key code constant: 'N' key.
 */
]","\android\view\KeyEvent.java"
"DEBUG","false","false","false","true","true","boolean","false","[]","Optional.empty","\android\view\KeyEvent.java"
"KEYCODE_K","true","false","false","true","true","int","39","[]","Optional[/**
 * Key code constant: 'K' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_L","true","false","false","true","true","int","40","[]","Optional[/**
 * Key code constant: 'L' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_9","true","false","false","true","true","int","16","[]","Optional[/**
 * Key code constant: '9' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_MENU","true","false","false","true","true","int","82","[]","Optional[/**
 * Key code constant: Menu key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_7","true","false","false","true","true","int","14","[]","Optional[/**
 * Key code constant: '7' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_8","true","false","false","true","true","int","15","[]","Optional[/**
 * Key code constant: '8' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_5","true","false","false","true","true","int","12","[]","Optional[/**
 * Key code constant: '5' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_6","true","false","false","true","true","int","13","[]","Optional[/**
 * Key code constant: '6' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_CAMERA","true","false","false","true","true","int","27","[]","Optional[/**
 * Key code constant: Camera key.
 * Used to launch a camera application or take pictures.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_3","true","false","false","true","true","int","10","[]","Optional[/**
 * Key code constant: '3' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_SEARCH","true","false","false","true","true","int","84","[]","Optional[/**
 * Key code constant: Search key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_4","true","false","false","true","true","int","11","[]","Optional[/**
 * Key code constant: '4' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_A","true","false","false","true","true","int","29","[]","Optional[/**
 * Key code constant: 'A' key.
 */
]","\android\view\KeyEvent.java"
"KEYCODE_B","true","false","false","true","true","int","30","[]","Optional[/**
 * Key code constant: 'B' key.
 */
]","\android\view\KeyEvent.java"
"META_SHIFT_RIGHT_ON","true","false","false","true","true","int","0x80","[]","Optional[/**
 * <p>This mask is used to check whether the right SHIFT meta key is pressed.</p>
 *
 * @see #isShiftPressed()
 * @see #getMetaState()
 * @see #KEYCODE_SHIFT_RIGHT
 */
]","\android\view\KeyEvent.java"
"mCallback","false","false","true","false","true","Callback","null","[]","Optional.empty","\android\service\urlrenderer\UrlRenderer.java"
"mService","false","false","true","false","false","IUrlRendererService","null","[]","Optional.empty","\android\service\urlrenderer\UrlRenderer.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<InputEvent>","new Parcelable.Creator<InputEvent>() {

    public InputEvent createFromParcel(Parcel in) {
        int token = in.readInt();
        if (token == PARCEL_TOKEN_KEY_EVENT) {
            return KeyEvent.createFromParcelBody(in);
        } else if (token == PARCEL_TOKEN_MOTION_EVENT) {
            return MotionEvent.createFromParcelBody(in);
        } else {
            throw new IllegalStateException(""Unexpected input event type token in parcel."");
        }
    }

    public InputEvent[] newArray(int size) {
        return new InputEvent[size];
    }
}","[]","Optional.empty","\android\view\InputEvent.java"
"mDeviceId","false","true","false","false","false","int","null","[]","Optional[/**
 * @hide
 */
]","\android\view\InputEvent.java"
"PARCEL_TOKEN_MOTION_EVENT","false","true","false","true","true","int","1","[]","Optional[/**
 * @hide
 */
]","\android\view\InputEvent.java"
"mSource","false","true","false","false","false","int","null","[]","Optional[/**
 * @hide
 */
]","\android\view\InputEvent.java"
"PARCEL_TOKEN_KEY_EVENT","false","true","false","true","true","int","2","[]","Optional[/**
 * @hide
 */
]","\android\view\InputEvent.java"
"TYPE_CRASH","true","false","false","true","true","int","1","[]","Optional[/**
 * An error report about an application crash.
 */
]","\android\app\ApplicationErrorReport.java"
"SYSTEM_APPS_ERROR_RECEIVER_PROPERTY","false","false","false","true","true","String","""ro.error.receiver.system.apps""","[]","Optional[// System property defining error report receiver for system apps
]","\android\app\ApplicationErrorReport.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<ApplicationErrorReport>","new Parcelable.Creator<ApplicationErrorReport>() {

    public ApplicationErrorReport createFromParcel(Parcel source) {
        return new ApplicationErrorReport(source);
    }

    public ApplicationErrorReport[] newArray(int size) {
        return new ApplicationErrorReport[size];
    }
}","[]","Optional.empty","\android\app\ApplicationErrorReport.java"
"throwFileName","true","false","false","false","false","String","null","[]","Optional[/**
 * File which the exception was thrown from.
 */
]","\android\app\ApplicationErrorReport.java"
"systemApp","true","false","false","false","false","boolean","null","[]","Optional[/**
 * Set if the app is on the system image.
 */
]","\android\app\ApplicationErrorReport.java"
"activity","true","false","false","false","false","String","null","[]","Optional[/**
 * Activity name.
 */
]","\android\app\ApplicationErrorReport.java"
"checkinDetails","true","false","false","false","false","String","null","[]","Optional[/**
 * Checkin details.
 */
]","\android\app\ApplicationErrorReport.java"
"durationMillis","true","false","false","false","false","long","null","[]","Optional[/**
 * Duration in milliseconds that the service has been running.
 */
]","\android\app\ApplicationErrorReport.java"
"durationMicros","true","false","false","false","false","long","null","[]","Optional[/**
 * Duration in microseconds over which the process used the above
 * percentage of battery.
 */
]","\android\app\ApplicationErrorReport.java"
"throwLineNumber","true","false","false","false","false","int","null","[]","Optional[/**
 * Line number the exception was thrown from.
 */
]","\android\app\ApplicationErrorReport.java"
"DEFAULT_ERROR_RECEIVER_PROPERTY","false","false","false","true","true","String","""ro.error.receiver.default""","[]","Optional[// System property defining default error report receiver
]","\android\app\ApplicationErrorReport.java"
"serviceDetails","true","false","false","false","false","String","null","[]","Optional[/**
 * Dump of debug information about the service.
 */
]","\android\app\ApplicationErrorReport.java"
"info","true","false","false","false","false","String","null","[]","Optional[/**
 * Additional info, including CPU stats.
 */
]","\android\app\ApplicationErrorReport.java"
"installerPackageName","true","false","false","false","false","String","null","[]","Optional[/**
 * Package name of the application which installed the application this
 * report pertains to.
 * This identifies which Market the application came from.
 */
]","\android\app\ApplicationErrorReport.java"
"batteryInfo","true","false","false","false","false","BatteryInfo","null","[]","Optional[/**
 * If this report is of type {@link #TYPE_BATTERY}, contains an instance
 * of BatteryInfo; otherwise null.
 */
]","\android\app\ApplicationErrorReport.java"
"crashInfo","true","false","false","false","false","CrashInfo","null","[]","Optional[/**
 * If this report is of type {@link #TYPE_CRASH}, contains an instance
 * of CrashInfo describing the crash; otherwise null.
 */
]","\android\app\ApplicationErrorReport.java"
"time","true","false","false","false","false","long","null","[]","Optional[/**
 * Time at which the error occurred.
 */
]","\android\app\ApplicationErrorReport.java"
"runningServiceInfo","true","false","false","false","false","RunningServiceInfo","null","[]","Optional[/**
 * If this report is of type {@link #TYPE_RUNNING_SERVICE}, contains an instance
 * of RunningServiceInfo; otherwise null.
 */
]","\android\app\ApplicationErrorReport.java"
"type","true","false","false","false","false","int","null","[]","Optional[/**
 * Type of this report. Can be one of {@link #TYPE_NONE},
 * {@link #TYPE_CRASH}, {@link #TYPE_ANR}, {@link #TYPE_BATTERY},
 * or {@link #TYPE_RUNNING_SERVICE}.
 */
]","\android\app\ApplicationErrorReport.java"
"throwClassName","true","false","false","false","false","String","null","[]","Optional[/**
 * Class which the exception was thrown from.
 */
]","\android\app\ApplicationErrorReport.java"
"TYPE_BATTERY","true","false","false","true","true","int","3","[]","Optional[/**
 * An error report about an application that's consuming too much battery.
 */
]","\android\app\ApplicationErrorReport.java"
"TYPE_ANR","true","false","false","true","true","int","2","[]","Optional[/**
 * An error report about an application that's not responding.
 */
]","\android\app\ApplicationErrorReport.java"
"usageDetails","true","false","false","false","false","String","null","[]","Optional[/**
 * Dump of various info impacting battery use.
 */
]","\android\app\ApplicationErrorReport.java"
"stackTrace","true","false","false","false","false","String","null","[]","Optional[/**
 * Stack trace.
 */
]","\android\app\ApplicationErrorReport.java"
"exceptionMessage","true","false","false","false","false","String","null","[]","Optional[/**
 * Message stored in the exception.
 */
]","\android\app\ApplicationErrorReport.java"
"anrInfo","true","false","false","false","false","AnrInfo","null","[]","Optional[/**
 * If this report is of type {@link #TYPE_ANR}, contains an instance
 * of AnrInfo describing the ANR; otherwise null.
 */
]","\android\app\ApplicationErrorReport.java"
"exceptionClassName","true","false","false","false","false","String","null","[]","Optional[/**
 * Class name of the exception that caused the crash.
 */
]","\android\app\ApplicationErrorReport.java"
"throwMethodName","true","false","false","false","false","String","null","[]","Optional[/**
 * Method which the exception was thrown from.
 */
]","\android\app\ApplicationErrorReport.java"
"usagePercent","true","false","false","false","false","int","null","[]","Optional[/**
 * Percentage of the battery that was used up by the process.
 */
]","\android\app\ApplicationErrorReport.java"
"processName","true","false","false","false","false","String","null","[]","Optional[/**
 * Process name of the application.
 */
]","\android\app\ApplicationErrorReport.java"
"cause","true","false","false","false","false","String","null","[]","Optional[/**
 * Description of the operation that timed out.
 */
]","\android\app\ApplicationErrorReport.java"
"TYPE_NONE","true","false","false","true","true","int","0","[]","Optional[/**
 * Uninitialized error report.
 */
]","\android\app\ApplicationErrorReport.java"
"packageName","true","false","false","false","false","String","null","[]","Optional[/**
 * Package name of the application.
 */
]","\android\app\ApplicationErrorReport.java"
"TYPE_RUNNING_SERVICE","true","false","false","true","true","int","5","[]","Optional[/**
 * A report from a user to a developer about a running service that the
 * user doesn't think should be running.
 */
]","\android\app\ApplicationErrorReport.java"
"mUid","false","false","true","false","false","int","null","[]","Optional.empty","\android\accounts\GrantCredentialsPermissionActivity.java"
"mAuthTokenType","false","false","true","false","false","String","null","[]","Optional.empty","\android\accounts\GrantCredentialsPermissionActivity.java"
"mAccount","false","false","true","false","false","Account","null","[]","Optional.empty","\android\accounts\GrantCredentialsPermissionActivity.java"
"EXTRAS_ACCOUNT","true","false","false","true","true","String","""account""","[]","Optional.empty","\android\accounts\GrantCredentialsPermissionActivity.java"
"EXTRAS_ACCOUNT_TYPE_LABEL","true","false","false","true","true","String","""accountTypeLabel""","[]","Optional.empty","\android\accounts\GrantCredentialsPermissionActivity.java"
"EXTRAS_AUTH_TOKEN_LABEL","true","false","false","true","true","String","""authTokenLabel""","[]","Optional.empty","\android\accounts\GrantCredentialsPermissionActivity.java"
"EXTRAS_RESPONSE","true","false","false","true","true","String","""response""","[]","Optional.empty","\android\accounts\GrantCredentialsPermissionActivity.java"
"EXTRAS_AUTH_TOKEN_TYPE","true","false","false","true","true","String","""authTokenType""","[]","Optional.empty","\android\accounts\GrantCredentialsPermissionActivity.java"
"mInflater","false","true","false","false","false","LayoutInflater","null","[]","Optional.empty","\android\accounts\GrantCredentialsPermissionActivity.java"
"EXTRAS_PACKAGES","true","false","false","true","true","String","""application""","[]","Optional.empty","\android\accounts\GrantCredentialsPermissionActivity.java"
"accountManagerService","false","false","true","false","true","AccountManagerService","AccountManagerService.getSingleton()","[]","Optional.empty","\android\accounts\GrantCredentialsPermissionActivity.java"
"mResultBundle","false","false","true","false","false","Bundle","null","[]","Optional.empty","\android\accounts\GrantCredentialsPermissionActivity.java"
"EXTRAS_REQUESTING_UID","true","false","false","true","true","String","""uid""","[]","Optional.empty","\android\accounts\GrantCredentialsPermissionActivity.java"
"mInstances","false","false","true","false","true","ArrayList<Instance>","new ArrayList<Instance>()","[]","Optional.empty","\android\gesture\Learner.java"
"MAX_WAKELOCKS_PER_UID","false","false","true","true","true","int","30","[]","Optional[// in to one common name.
]","\com\android\internal\os\BatteryStatsImpl.java"
"mLaunched","false","false","false","false","false","boolean","null","[]","Optional[/**
 * True if we are currently launched.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mInputEventCounter","false","false","false","false","false","Counter","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"PROC_WAKELOCKS_FORMAT","false","false","true","true","true","int","new int[] { // 0: name
Process.PROC_TAB_TERM | Process.PROC_OUT_STRING, // 1: count
Process.PROC_TAB_TERM | Process.PROC_OUT_LONG, Process.PROC_TAB_TERM, Process.PROC_TAB_TERM, Process.PROC_TAB_TERM, // 5: totalTime
Process.PROC_TAB_TERM | Process.PROC_OUT_LONG }","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mTimer","false","false","false","false","false","StopwatchTimer","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mTotalTime","true","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mForegroundTime","false","false","false","false","false","long","null","[]","Optional[/**
 * Amount of time the process was running in the foreground.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mLastWakeups","false","false","false","false","false","int","null","[]","Optional[/**
 * Number of things that could wake up the device as of the
 * last run.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mPackageStats","false","false","false","false","true","HashMap<String,Pkg>","new HashMap<String, Pkg>()","[]","Optional[/**
 * The statistics we have collected for this uid's processes.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"sKernelWakelockUpdateVersion","false","false","true","true","false","int","0","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mLastTime","false","false","false","false","false","long","null","[]","Optional[/**
 * The run time of the last run of the system, as loaded from the
 * saved data.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mBatteryRealtime","false","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mRunning","false","false","false","false","false","boolean","null","[]","Optional[/**
 * True if we are currently running.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<BatteryStatsImpl>","new Parcelable.Creator<BatteryStatsImpl>() {

    public BatteryStatsImpl createFromParcel(Parcel in) {
        return new BatteryStatsImpl(in);
    }

    public BatteryStatsImpl[] newArray(int size) {
        return new BatteryStatsImpl[size];
    }
}","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mTotalDataTx","false","false","true","false","false","long","new long[4]","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mScanWifiLockTimers","false","false","false","false","true","ArrayList<StopwatchTimer>","new ArrayList<StopwatchTimer>()","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mVideoTurnedOn","false","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mGpsNesting","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mSensorStats","false","false","false","false","true","HashMap<Integer,Sensor>","new HashMap<Integer, Sensor>()","[]","Optional[/**
 * The statistics we have collected for this uid's sensor activations.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mLaunches","false","false","false","false","false","int","null","[]","Optional[/**
 * Total number times the service has been launched.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mHighDischargeAmountSinceCharge","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mCurrentTcpBytesSent","false","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mCurrentTcpBytesReceived","false","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mAudioTurnedOnTimer","false","false","false","false","false","StopwatchTimer","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mHistory","false","false","false","false","false","HistoryItem","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mUnpluggedSystemTime","false","false","false","false","false","long","null","[]","Optional[/**
 * The amount of system time when last unplugged.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mHistoryIterator","false","false","true","false","false","HistoryItem","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mUnpluggedStartTime","false","false","false","false","false","long","null","[]","Optional[/**
 * The amount of time spent started when last unplugged (ms
 * in battery uptime).
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mScreenBrightnessTimer","false","false","false","false","true","StopwatchTimer","new StopwatchTimer[NUM_SCREEN_BRIGHTNESS_BINS]","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mWifiRunningTimer","false","false","false","false","false","StopwatchTimer","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mLoadedUserTime","false","false","false","false","false","long","null","[]","Optional[/**
 * The amount of user time loaded from a previous save.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mLastLaunches","false","false","false","false","false","int","null","[]","Optional[/**
 * The number of launches as of the last run.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mSensorTimers","false","false","false","false","true","SparseArray<ArrayList<StopwatchTimer>>","new SparseArray<ArrayList<StopwatchTimer>>()","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mWifiMulticastTimers","false","false","false","false","true","ArrayList<StopwatchTimer>","new ArrayList<StopwatchTimer>()","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mPhoneServiceState","false","false","true","false","false","int","-1","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mTcpBytesSentAtLastUnplug","false","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"BATCHED_WAKELOCK_NAME","false","false","true","true","true","String","""*overflow*""","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mPhoneOn","false","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mTimerFull","false","false","false","false","false","StopwatchTimer","null","[]","Optional[/**
 * How long (in ms) this uid has been keeping the device fully awake.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mHistoryBaseTime","false","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mUnpluggedForegroundTime","false","false","false","false","false","long","null","[]","Optional[/**
 * The amount of foreground time since unplugged.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mPhoneServiceStateRaw","false","false","true","false","false","int","-1","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"sNumSpeedSteps","false","false","true","true","false","int","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mWifiMulticastNesting","false","false","false","false","false","int","0","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mPids","false","false","false","false","true","SparseArray<Pid>","new SparseArray<Pid>()","[]","Optional[/**
 * The transient wake stats we have collected for this uid's pids.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mBtHeadset","false","false","false","false","false","BluetoothHeadset","null","[]","Optional[/**
 * Bluetooth headset object
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"MSG_REPORT_POWER_CHANGE","false","false","false","true","true","int","2","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"MAX_HISTORY_ITEMS","false","false","true","true","true","int","2000","[]","Optional[// Maximum number of items we will record in the history.
]","\com\android\internal\os\BatteryStatsImpl.java"
"mTrackBatteryPastRealtime","false","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mLoadedStartTime","false","false","false","false","false","long","null","[]","Optional[/**
 * The amount of time spent started loaded from a previous save
 * (ms in battery uptime).
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mUnpluggedBatteryUptime","false","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mUnpluggedCount","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mWifiMulticastEnabled","false","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mFullWifiLockOut","false","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mAudioTurnedOn","false","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mUnpluggedWakeups","false","false","false","false","false","int","null","[]","Optional[/**
 * Number of things that could wake up the device as of the
 * last run.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mStartedTcpBytesReceived","false","false","false","false","false","long","-1","[]","Optional[// to return from the parcel with a snapshot of the state.
]","\com\android\internal\os\BatteryStatsImpl.java"
"mScreenOn","false","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mUid","false","false","false","false","true","int","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mUptimeStart","false","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mHandle","false","false","false","false","true","int","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mRadioDataUptime","false","false","true","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mShuttingDown","false","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mPhoneDataConnectionsTimer","false","false","false","false","true","StopwatchTimer","new StopwatchTimer[NUM_DATA_CONNECTION_TYPES]","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mVersion","true","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mProcWakelocksData","false","false","true","false","true","long","new long[3]","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mTcpBytesReceivedAtLastUnplug","false","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mVideoTurnedOnTimer","false","false","false","false","false","StopwatchTimer","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mLowDischargeAmountSinceCharge","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mNesting","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mWifiOnUid","false","false","false","false","false","int","-1","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mBluetoothOnTimer","false","false","false","false","false","StopwatchTimer","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mWifiRunningTimers","false","false","false","false","true","ArrayList<StopwatchTimer>","new ArrayList<StopwatchTimer>()","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mUpdateVersion","false","false","false","false","false","int","null","[]","Optional[/*
         * A sequnce counter, incremented once for each update of the stats.
         */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mPhoneOnTimer","false","false","false","false","false","StopwatchTimer","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mWifiMulticastTimer","false","false","false","false","false","StopwatchTimer","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mWifiScanLockNesting","false","false","false","false","false","int","0","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mOnBatteryInternal","false","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mBluetoothPingCount","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mWindowTimers","false","false","false","false","true","ArrayList<StopwatchTimer>","new ArrayList<StopwatchTimer>()","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mHaveBatteryLevel","false","false","false","false","false","boolean","false","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mWifiOn","false","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mTotalDataRx","false","false","true","false","false","long","new long[4]","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mLastPartialTimers","false","false","false","false","true","ArrayList<StopwatchTimer>","new ArrayList<StopwatchTimer>()","[]","Optional[// Last partial timers we use for distributing CPU usage.
]","\com\android\internal\os\BatteryStatsImpl.java"
"mUnpluggedLaunches","false","false","false","false","false","int","null","[]","Optional[/**
 * The number of launches when last unplugged.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mGlobalWifiRunning","false","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"MAX_MAX_HISTORY_ITEMS","false","false","true","true","true","int","3000","[]","Optional[// No, really, THIS is the maximum number of items we will record in the history.
]","\com\android\internal\os\BatteryStatsImpl.java"
"mMobileDataTx","false","false","true","false","false","long","new long[4]","[]","Optional[// Mobile data transferred while on battery
]","\com\android\internal\os\BatteryStatsImpl.java"
"mScreenOnTimer","false","false","false","false","false","StopwatchTimer","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mStartedTcpBytesSent","false","false","false","false","false","long","-1","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mLoadedLaunches","false","false","false","false","false","int","null","[]","Optional[/**
 * The number of launches loaded from a previous save.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"DEBUG_HISTORY","false","false","true","true","true","boolean","false","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mTimerPool","false","false","false","false","true","ArrayList<StopwatchTimer>","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mLoadedTcpBytesSent","false","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mPhoneSignalStrengthBinRaw","false","false","false","false","false","int","-1","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mStartCount","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mInList","false","false","false","false","false","boolean","null","[]","Optional[/**
 * For partial wake locks, keep track of whether we are in the list
 * to consume CPU cycles.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mLastRealtime","false","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mLoadedCount","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mWifiRunning","false","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mKernelWakelockStats","false","false","true","false","true","HashMap<String,SamplingTimer>","new HashMap<String, SamplingTimer>()","[]","Optional[/*
     * Holds a SamplingTimer associated with each kernel wakelock name being tracked.
     */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mLastForegroundTime","false","false","false","false","false","long","null","[]","Optional[/**
 * The amount of foreground time loaded from the previous run
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mLastCount","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mUpdateTime","false","false","false","false","false","long","null","[]","Optional[/**
 * The last time at which we updated the timer.  If mNesting is > 0,
 * subtract this from the current battery time to find the amount of
 * time we have been running since we last computed an update.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mCurrentReportedCount","false","false","false","false","false","int","null","[]","Optional[/**
 * The most recent reported count from /proc/wakelocks.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mDischargeCurrentLevel","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mUnpluggables","false","false","false","false","true","ArrayList<Unpluggable>","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mBatteryUptime","false","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mDischargeStartLevel","false","false","false","false","false","int","null","[]","Optional[/*
     * These keep track of battery levels (1-100) at the last plug event and the last unplug event.
     */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mLastStarts","false","false","false","false","false","int","null","[]","Optional[/**
 * The number of starts as of the last run.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mWakelockStats","false","false","false","false","true","HashMap<String,Wakelock>","new HashMap<String, Wakelock>()","[]","Optional[/**
 * The statistics we have collected for this uid's wake locks.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mHistoryCur","false","false","false","false","true","HistoryItem","new HistoryItem()","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mMobileDataRx","false","false","true","false","false","long","new long[4]","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mStarts","false","false","false","false","false","int","null","[]","Optional[/**
 * Total number of times startService() has been called.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mPhoneSignalStrengthBin","false","false","false","false","false","int","-1","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mRunningSince","false","false","false","false","false","long","null","[]","Optional[/**
 * If service has been started and not yet stopped, this is
 * when it was started.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"MSG_UPDATE_WAKELOCKS","false","false","false","true","true","int","1","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mSensorNesting","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mRealtime","false","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mBluetoothOn","false","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mProcWakelockFileStats","false","false","true","false","true","Map<String,KernelWakelockStats>","new HashMap<String, KernelWakelockStats>()","[]","Optional[/*
     * Used as a buffer for reading in data from /proc/wakelocks before it is processed and added
     * to mKernelWakelockStats.
     */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mInDischarge","false","false","false","false","false","boolean","null","[]","Optional[/**
 * Whether we are currently in a discharge cycle.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mCount","true","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mUidCache","false","false","true","false","false","HashMap<String,Integer>","new HashMap<String, Integer>()","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mPendingWrite","false","false","false","false","false","Parcel","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mLaunchedTime","false","false","false","false","false","long","null","[]","Optional[/**
 * Total time (ms in battery uptime) the service has been left launched.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mWakeups","false","false","false","false","false","int","null","[]","Optional[/**
 * Number of times this package has done something that could wake up the
 * device from sleep.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mHistoryCache","false","false","false","false","false","HistoryItem","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mWifiFullLockNesting","false","false","false","false","false","int","0","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mTimerWindow","false","false","false","false","false","StopwatchTimer","null","[]","Optional[/**
 * How long (in ms) this uid has had a window keeping the device awake.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mBatteryLastRealtime","false","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mUnpluggedStarts","false","false","false","false","false","int","null","[]","Optional[/**
 * The number of starts when last unplugged.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mWriteLock","false","false","false","false","true","ReentrantLock","new ReentrantLock()","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mBluetoothPingStart","false","false","true","false","false","int","-1","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mUnpluggedReportedCount","false","false","false","false","false","int","null","[]","Optional[/**
 * The reported count from /proc/wakelocks when unplug() was last
 * called.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mLoadedWakeups","false","false","false","false","false","int","null","[]","Optional[/**
 * Number of things that could wake up the device loaded from a
 * previous save.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mPhoneSimStateRaw","false","false","true","false","false","int","-1","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mUnpluggedUserTime","false","false","false","false","false","long","null","[]","Optional[/**
 * The amount of user time when last unplugged.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mLastUptime","false","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mSystemTime","false","false","false","false","false","long","null","[]","Optional[/**
 * Total time (in 1/100 sec) spent executing in kernel code.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mCallback","false","false","true","false","false","BatteryCallback","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mTrackingReportedValues","false","false","false","false","false","boolean","null","[]","Optional[/**
 * Whether we are currently recording reported values.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mFullWifiLockTimer","false","false","false","false","false","StopwatchTimer","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mType","false","false","false","false","true","int","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mFullWifiLockTimers","false","false","false","false","true","ArrayList<StopwatchTimer>","new ArrayList<StopwatchTimer>()","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"VERSION","false","false","true","true","true","int","52","[]","Optional[// Current on-disk Parcel version
]","\com\android\internal\os\BatteryStatsImpl.java"
"mHandler","false","false","true","false","true","MyHandler","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"TAG","false","false","true","true","true","String","""BatteryStatsImpl""","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mUidStats","false","false","false","false","true","SparseArray<BatteryStatsImpl.Uid>","new SparseArray<BatteryStatsImpl.Uid>()","[]","Optional[/**
 * The statistics we have collected organized by uids.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mUnpluggedReportedTotalTime","false","false","false","false","false","long","null","[]","Optional[/**
 * The reported total_time from /proc/wakelocks when unplug() was last
 * called.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mWakeLockNesting","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mTrackBatteryRealtimeStart","false","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mLoadedSystemTime","false","false","false","false","false","long","null","[]","Optional[/**
 * The amount of system time loaded from a previous save.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mAudioOn","false","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mWifiOnTimer","false","false","false","false","false","StopwatchTimer","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mPhoneDataConnectionType","false","false","false","false","false","int","-1","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mSpeedBins","false","false","false","false","false","SamplingCounter","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mHistoryEnd","false","false","false","false","false","HistoryItem","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mVideoOnTimer","false","false","false","false","false","StopwatchTimer","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mServiceStats","false","false","false","false","true","HashMap<String,Serv>","new HashMap<String, Serv>()","[]","Optional[/**
 * The statics we have collected for this package's services.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mLoadedTcpBytesReceived","false","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mVideoOn","false","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mAudioOnTimer","false","false","false","false","false","StopwatchTimer","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mProcWakelocksName","false","false","true","false","true","String","new String[3]","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mLoadedTime","false","false","false","false","false","long","null","[]","Optional[/**
 * The total time we loaded for the previous runs.  Subtract this from
 * mTotalTime to find the time for the current run of the system.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mFullTimers","false","false","false","false","true","ArrayList<StopwatchTimer>","new ArrayList<StopwatchTimer>()","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mFile","false","false","true","false","true","JournaledFile","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mUserActivityCounters","false","false","false","false","false","Counter","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mRadioDataStart","false","false","true","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mLastWriteTime","false","false","false","false","false","long","0","[]","Optional[// Milliseconds
]","\com\android\internal\os\BatteryStatsImpl.java"
"mStartTime","false","false","false","false","false","long","null","[]","Optional[/**
 * Total time (ms in battery uptime) the service has been left started.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mTrackBatteryUptimeStart","false","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mPhoneSignalScanningTimer","false","false","false","false","false","StopwatchTimer","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mPhoneSignalStrengthsTimer","false","false","false","false","true","StopwatchTimer","new StopwatchTimer[NUM_SIGNAL_STRENGTH_BINS]","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mScanWifiLockOut","false","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mNumHistoryItems","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mTrackBatteryPastUptime","false","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mLaunchedSince","false","false","false","false","false","long","null","[]","Optional[/**
 * If service has been launched and not yet exited, this is
 * when it was launched (ms in battery uptime).
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mBatteryLastUptime","false","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mScreenBrightnessBin","false","false","false","false","false","int","-1","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mProcessStats","false","false","false","false","true","HashMap<String,Proc>","new HashMap<String, Proc>()","[]","Optional[/**
 * The statistics we have collected for this uid's processes.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mLastStartTime","false","false","false","false","false","long","null","[]","Optional[/**
 * The amount of time spent started as of the last run (ms
 * in battery uptime).
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mUptime","false","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"BATTERY_PLUGGED_NONE","false","false","true","true","true","int","0","[]","Optional[// This should probably be exposed in the API, though it's not critical
]","\com\android\internal\os\BatteryStatsImpl.java"
"mRecordingHistory","false","false","false","false","false","boolean","true","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mCurrentReportedTotalTime","false","false","false","false","false","long","null","[]","Optional[/**
 * The most recent reported total_time from /proc/wakelocks.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mScanWifiLockTimer","false","false","false","false","false","StopwatchTimer","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"MAGIC","false","false","true","true","true","int","0xBA757475","[]","Optional[// 'BATSTATS'
]","\com\android\internal\os\BatteryStatsImpl.java"
"mLoadedForegroundTime","false","false","false","false","false","long","null","[]","Optional[/**
 * The amount of foreground time loaded from a previous save.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mHistoryLastEnd","false","false","false","false","false","HistoryItem","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mPluggedCount","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mLastUserTime","false","false","false","false","false","long","null","[]","Optional[/**
 * The amount of user time loaded from the previous run.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mUserTime","false","false","false","false","false","long","null","[]","Optional[/**
 * Total time (in 1/100 sec) spent executing in user code.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mOnBattery","false","false","false","false","false","boolean","null","[]","Optional[/**
 * These provide time bases that discount the time the device is plugged
 * in to power.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mUnpluggedBatteryRealtime","false","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mLastSystemTime","false","false","false","false","false","long","null","[]","Optional[/**
 * The amount of system time loaded from the previous run.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mPartialTimers","false","false","false","false","true","ArrayList<StopwatchTimer>","new ArrayList<StopwatchTimer>()","[]","Optional[// changes.
]","\com\android\internal\os\BatteryStatsImpl.java"
"mTimerPartial","false","false","false","false","false","StopwatchTimer","null","[]","Optional[/**
 * How long (in ms) this uid has been keeping the device partially awake.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"DELAY_UPDATE_WAKELOCKS","false","false","false","true","true","long","5 * 1000","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mRealtimeStart","false","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mUnpluggedTime","false","false","false","false","false","long","null","[]","Optional[/**
 * The value of mTotalTime when unplug() was last called.  Subtract
 * this from mTotalTime to find the time since the last unplug from
 * power.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mDischargeUnplugLevel","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mAcquireTime","false","false","false","false","false","long","null","[]","Optional[/**
 * The total time at which the timer was acquired, to determine if it
 * was actually held for an interesting duration.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mGlobalWifiRunningTimer","false","false","false","false","false","StopwatchTimer","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mChangedStates","false","false","false","false","false","int","0","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mExcessivePower","false","false","false","false","false","ArrayList<ExcessivePower>","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mLoadedStarts","false","false","false","false","false","int","null","[]","Optional[/**
 * The number of starts loaded from a previous save.
 */
]","\com\android\internal\os\BatteryStatsImpl.java"
"mTimeout","false","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\BatteryStatsImpl.java"
"mGroup","false","false","true","false","true","int","null","[]","Optional.empty","\com\android\internal\view\menu\MenuItemImpl.java"
"mFlags","false","false","true","false","false","int","ENABLED","[]","Optional.empty","\com\android\internal\view\menu\MenuItemImpl.java"
"mShortcutNumericChar","false","false","true","false","false","char","null","[]","Optional.empty","\com\android\internal\view\menu\MenuItemImpl.java"
"mSubMenu","false","false","true","false","false","SubMenuBuilder","null","[]","Optional[/**
 * If this item should launch a sub menu, this is the sub menu to launch
 */
]","\com\android\internal\view\menu\MenuItemImpl.java"
"sSpaceShortcutLabel","false","false","true","true","false","String","null","[]","Optional.empty","\com\android\internal\view\menu\MenuItemImpl.java"
"NO_ICON","false","false","false","true","true","int","0","[]","Optional[/**
 * Used for the icon resource ID if this item does not have an icon
 */
]","\com\android\internal\view\menu\MenuItemImpl.java"
"mId","false","false","true","false","true","int","null","[]","Optional.empty","\com\android\internal\view\menu\MenuItemImpl.java"
"CHECKED","false","false","true","true","true","int","0x00000002","[]","Optional.empty","\com\android\internal\view\menu\MenuItemImpl.java"
"HIDDEN","false","false","true","true","true","int","0x00000008","[]","Optional.empty","\com\android\internal\view\menu\MenuItemImpl.java"
"mMenuInfo","false","false","true","false","false","ContextMenuInfo","null","[]","Optional[/**
 * Current use case is for context menu: Extra information linked to the
 * View that added this item to the context menu.
 */
]","\com\android\internal\view\menu\MenuItemImpl.java"
"mShortcutAlphabeticChar","false","false","true","false","false","char","null","[]","Optional.empty","\com\android\internal\view\menu\MenuItemImpl.java"
"EXCLUSIVE","false","false","true","true","true","int","0x00000004","[]","Optional.empty","\com\android\internal\view\menu\MenuItemImpl.java"
"mIconDrawable","false","false","true","false","false","Drawable","null","[]","Optional[/**
 * The icon's drawable which is only created as needed
 */
]","\com\android\internal\view\menu\MenuItemImpl.java"
"sDeleteShortcutLabel","false","false","true","true","false","String","null","[]","Optional.empty","\com\android\internal\view\menu\MenuItemImpl.java"
"mTitle","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\com\android\internal\view\menu\MenuItemImpl.java"
"sEnterShortcutLabel","false","false","true","true","false","String","null","[]","Optional.empty","\com\android\internal\view\menu\MenuItemImpl.java"
"mItemCallback","false","false","true","false","false","Runnable","null","[]","Optional.empty","\com\android\internal\view\menu\MenuItemImpl.java"
"mMenu","false","false","true","false","false","MenuBuilder","null","[]","Optional[/**
 * The menu to which this item belongs
 */
]","\com\android\internal\view\menu\MenuItemImpl.java"
"TAG","false","false","true","true","true","String","""MenuItemImpl""","[]","Optional.empty","\com\android\internal\view\menu\MenuItemImpl.java"
"mClickListener","false","false","true","false","false","MenuItem.OnMenuItemClickListener","null","[]","Optional.empty","\com\android\internal\view\menu\MenuItemImpl.java"
"CHECKABLE","false","false","true","true","true","int","0x00000001","[]","Optional.empty","\com\android\internal\view\menu\MenuItemImpl.java"
"mIntent","false","false","true","false","false","Intent","null","[]","Optional.empty","\com\android\internal\view\menu\MenuItemImpl.java"
"mTitleCondensed","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\com\android\internal\view\menu\MenuItemImpl.java"
"mItemViews","false","false","true","false","false","WeakReference<ItemView>","null","[]","Optional[/**
 * The (cached) menu item views for this item
 */
]","\com\android\internal\view\menu\MenuItemImpl.java"
"sPrependShortcutLabel","false","false","true","true","false","String","null","[]","Optional.empty","\com\android\internal\view\menu\MenuItemImpl.java"
"mCategoryOrder","false","false","true","false","true","int","null","[]","Optional.empty","\com\android\internal\view\menu\MenuItemImpl.java"
"mIconResId","false","false","true","false","false","int","NO_ICON","[]","Optional[/**
 * The icon's resource ID which is used to get the Drawable when it is
 * needed (if the Drawable isn't already obtained--only one of the two is
 * needed).
 */
]","\com\android\internal\view\menu\MenuItemImpl.java"
"mOrdering","false","false","true","false","true","int","null","[]","Optional.empty","\com\android\internal\view\menu\MenuItemImpl.java"
"ENABLED","false","false","true","true","true","int","0x00000010","[]","Optional.empty","\com\android\internal\view\menu\MenuItemImpl.java"
"TAG_REQUEST_FOCUS","false","false","true","true","true","String","""requestFocus""","[]","Optional.empty","\android\view\LayoutInflater.java"
"mContext","false","true","false","false","true","Context","null","[]","Optional[/**
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\view\LayoutInflater.java"
"mConstructorArgs","false","false","true","false","true","Object","new Object[2]","[]","Optional.empty","\android\view\LayoutInflater.java"
"mFactory","false","false","true","false","false","Factory","null","[]","Optional.empty","\android\view\LayoutInflater.java"
"mFactorySet","false","false","true","false","false","boolean","null","[]","Optional[// these are optional, set by the caller
]","\android\view\LayoutInflater.java"
"mFilterMap","false","false","true","false","false","HashMap<String,Boolean>","null","[]","Optional.empty","\android\view\LayoutInflater.java"
"TAG_INCLUDE","false","false","true","true","true","String","""include""","[]","Optional.empty","\android\view\LayoutInflater.java"
"mConstructorSignature","false","false","true","true","true","Class","new Class[] { Context.class, AttributeSet.class }","[]","Optional.empty","\android\view\LayoutInflater.java"
"sConstructorMap","false","false","true","true","true","HashMap<String,Constructor>","new HashMap<String, Constructor>()","[]","Optional.empty","\android\view\LayoutInflater.java"
"mFilter","false","false","true","false","false","Filter","null","[]","Optional.empty","\android\view\LayoutInflater.java"
"mF1","false","false","true","false","true","Factory","null","[]","Optional.empty","\android\view\LayoutInflater.java"
"TAG_MERGE","false","false","true","true","true","String","""merge""","[]","Optional.empty","\android\view\LayoutInflater.java"
"DEBUG","false","false","true","false","true","boolean","false","[]","Optional.empty","\android\view\LayoutInflater.java"
"BUTTON_TEXT_ACCEPT","true","false","false","true","true","String","""Accept""","[]","Optional[// Dialog button text
]","\com\android\internal\app\NetInitiatedActivity.java"
"VERBOSE","false","false","true","true","true","boolean","false","[]","Optional.empty","\com\android\internal\app\NetInitiatedActivity.java"
"BUTTON_TEXT_DENY","true","false","false","true","true","String","""Deny""","[]","Optional.empty","\com\android\internal\app\NetInitiatedActivity.java"
"TAG","false","false","true","true","true","String","""NetInitiatedActivity""","[]","Optional.empty","\com\android\internal\app\NetInitiatedActivity.java"
"mNetInitiatedReceiver","false","false","true","false","false","BroadcastReceiver","new BroadcastReceiver() {

    @Override
    public void onReceive(Context context, Intent intent) {
        if (DEBUG)
            Log.d(TAG, ""NetInitiatedReceiver onReceive: "" + intent.getAction());
        if (intent.getAction() == GpsNetInitiatedHandler.ACTION_NI_VERIFY) {
            handleNIVerify(intent);
        }
    }
}","[]","Optional[/**
 * Used to detect when NI request is received
 */
]","\com\android\internal\app\NetInitiatedActivity.java"
"POSITIVE_BUTTON","false","false","true","true","true","int","AlertDialog.BUTTON_POSITIVE","[]","Optional.empty","\com\android\internal\app\NetInitiatedActivity.java"
"notificationId","false","false","true","false","false","int","-1","[]","Optional[// Received ID from intent, -1 when no notification is in progress
]","\com\android\internal\app\NetInitiatedActivity.java"
"NEGATIVE_BUTTON","false","false","true","true","true","int","AlertDialog.BUTTON_NEGATIVE","[]","Optional.empty","\com\android\internal\app\NetInitiatedActivity.java"
"DEBUG","false","false","true","true","true","boolean","true","[]","Optional.empty","\com\android\internal\app\NetInitiatedActivity.java"
"mBodyProvider","false","false","true","false","false","InputStream","null","[]","Optional.empty","\android\net\http\Request.java"
"requestContentProcessor","false","false","true","true","false","RequestContent","new RequestContent()","[]","Optional[/**
 * Processor used to set content-length and transfer-encoding
 * headers.
 */
]","\android\net\http\Request.java"
"mPath","false","false","false","false","false","String","null","[]","Optional[/**
 * The path component of this request
 */
]","\android\net\http\Request.java"
"mClientResource","false","false","true","false","true","Object","new Object()","[]","Optional[/* Used to synchronize waitUntilComplete() requests */
]","\android\net\http\Request.java"
"HOST_HEADER","false","false","true","true","true","String","""Host""","[]","Optional.empty","\android\net\http\Request.java"
"mFailCount","false","false","false","false","false","int","0","[]","Optional.empty","\android\net\http\Request.java"
"mHttpRequest","false","false","false","false","false","BasicHttpRequest","null","[]","Optional[/**
 * The Apache http request
 */
]","\android\net\http\Request.java"
"mCancelled","false","false","false","false","false","boolean","false","[]","Optional[/**
 * True if request has been cancelled
 */
]","\android\net\http\Request.java"
"mReceivedBytes","false","false","true","false","false","int","0","[]","Optional[// is http/1.1 feature.
]","\android\net\http\Request.java"
"CONTENT_LENGTH_HEADER","false","false","true","true","true","String","""content-length""","[]","Optional.empty","\android\net\http\Request.java"
"mConnection","false","false","true","false","false","Connection","null","[]","Optional.empty","\android\net\http\Request.java"
"ACCEPT_ENCODING_HEADER","false","false","true","true","true","String","""Accept-Encoding""","[]","Optional.empty","\android\net\http\Request.java"
"mProxyHost","false","false","false","false","false","HttpHost","null","[]","Optional[/**
 * Set if I'm using a proxy server
 */
]","\android\net\http\Request.java"
"mLoadingPaused","false","false","true","false","false","boolean","false","[]","Optional[/**
 * True if loading should be paused *
 */
]","\android\net\http\Request.java"
"mBodyLength","false","false","true","false","false","int","null","[]","Optional.empty","\android\net\http\Request.java"
"mEventHandler","false","false","false","false","false","EventHandler","null","[]","Optional[/**
 * The eventhandler to call as the request progresses
 */
]","\android\net\http\Request.java"
"mHost","false","false","false","false","false","HttpHost","null","[]","Optional[/**
 * Host serving this request
 */
]","\android\net\http\Request.java"
"GAP_WIDTH","false","false","true","true","true","int","2","[]","Optional.empty","\android\text\style\QuoteSpan.java"
"mColor","false","false","true","false","true","int","null","[]","Optional.empty","\android\text\style\QuoteSpan.java"
"STRIPE_WIDTH","false","false","true","true","true","int","2","[]","Optional.empty","\android\text\style\QuoteSpan.java"
"ACCESS_BUFFER","true","false","false","true","true","int","3","[]","Optional[/**
 * Mode for {@link #open(String, int)}: Attempt to load contents into
 * memory, for fast small reads.
 */
]","\android\content\res\AssetManager.java"
"STYLE_TYPE","false","false","false","true","true","int","0","[]","Optional[/*package*/
]","\android\content\res\AssetManager.java"
"DEBUG_REFS","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\content\res\AssetManager.java"
"ACCESS_RANDOM","true","false","false","true","true","int","1","[]","Optional[/**
 * Mode for {@link #open(String, int)}: Read chunks, and seek forward and
 * backward.
 */
]","\android\content\res\AssetManager.java"
"mObject","false","false","true","false","false","int","null","[]","Optional[// For communication with native code.
]","\android\content\res\AssetManager.java"
"mOpen","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\content\res\AssetManager.java"
"STYLE_DENSITY","false","false","false","true","true","int","5","[]","Optional[/*package*/
]","\android\content\res\AssetManager.java"
"mLength","false","false","true","false","false","long","null","[]","Optional.empty","\android\content\res\AssetManager.java"
"mOffsets","false","false","true","false","true","long","new long[2]","[]","Optional.empty","\android\content\res\AssetManager.java"
"mStringBlocks","false","false","true","false","false","StringBlock","null","[]","Optional.empty","\android\content\res\AssetManager.java"
"mMarkPos","false","false","true","false","false","long","null","[]","Optional.empty","\android\content\res\AssetManager.java"
"STYLE_RESOURCE_ID","false","false","false","true","true","int","3","[]","Optional[/*package*/
]","\android\content\res\AssetManager.java"
"ACCESS_STREAMING","true","false","false","true","true","int","2","[]","Optional[/**
 * Mode for {@link #open(String, int)}: Read sequentially, with an
 * occasional forward seek.
 */
]","\android\content\res\AssetManager.java"
"mAsset","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\res\AssetManager.java"
"mNObject","false","false","true","false","false","int","null","[]","Optional[// used by the NDK
]","\android\content\res\AssetManager.java"
"STYLE_ASSET_COOKIE","false","false","false","true","true","int","2","[]","Optional[/*package*/
]","\android\content\res\AssetManager.java"
"ACCESS_UNKNOWN","true","false","false","true","true","int","0","[]","Optional[/**
 * Mode for {@link #open(String, int)}: no specific information about how
 * data will be accessed.
 */
]","\android\content\res\AssetManager.java"
"STYLE_DATA","false","false","false","true","true","int","1","[]","Optional[/*package*/
]","\android\content\res\AssetManager.java"
"mNumRefs","false","false","true","false","false","int","1","[]","Optional.empty","\android\content\res\AssetManager.java"
"sSystem","false","false","true","true","false","AssetManager","null","[]","Optional.empty","\android\content\res\AssetManager.java"
"TAG","false","false","true","true","true","String","""AssetManager""","[]","Optional.empty","\android\content\res\AssetManager.java"
"mRefStacks","false","false","true","false","false","HashMap<Integer,RuntimeException>","null","[]","Optional.empty","\android\content\res\AssetManager.java"
"STYLE_NUM_ENTRIES","false","false","false","true","true","int","6","[]","Optional[/*package*/
]","\android\content\res\AssetManager.java"
"localLOGV","false","false","true","true","true","boolean","Config.LOGV || false","[]","Optional.empty","\android\content\res\AssetManager.java"
"sSync","false","false","true","true","true","Object","new Object()","[]","Optional.empty","\android\content\res\AssetManager.java"
"STYLE_CHANGING_CONFIGURATIONS","false","false","false","true","true","int","4","[]","Optional[/*package*/
]","\android\content\res\AssetManager.java"
"mValue","false","false","true","false","true","TypedValue","new TypedValue()","[]","Optional.empty","\android\content\res\AssetManager.java"
"mTime","false","false","true","false","false","long","null","[]","Optional.empty","\android\webkit\PerfChecker.java"
"mResponseThreshold","false","false","true","true","true","long","2000","[]","Optional[// 2s
]","\android\webkit\PerfChecker.java"
"mBase","false","false","true","false","false","Context","null","[]","Optional.empty","\android\view\ContextThemeWrapper.java"
"mThemeResource","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\ContextThemeWrapper.java"
"mTheme","false","false","true","false","false","Resources.Theme","null","[]","Optional.empty","\android\view\ContextThemeWrapper.java"
"mInflater","false","false","true","false","false","LayoutInflater","null","[]","Optional.empty","\android\view\ContextThemeWrapper.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<RemoteViews>","new Parcelable.Creator<RemoteViews>() {

    public RemoteViews createFromParcel(Parcel parcel) {
        return new RemoteViews(parcel);
    }

    public RemoteViews[] newArray(int size) {
        return new RemoteViews[size];
    }
}","[]","Optional[/**
 * Parcelable.Creator that instantiates RemoteViews objects
 */
]","\android\widget\RemoteViews.java"
"targetBackground","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\widget\RemoteViews.java"
"filterMode","false","false","false","false","false","PorterDuff.Mode","null","[]","Optional.empty","\android\widget\RemoteViews.java"
"LONG","false","false","false","true","true","int","5","[]","Optional.empty","\android\widget\RemoteViews.java"
"STRING","false","false","false","true","true","int","9","[]","Optional.empty","\android\widget\RemoteViews.java"
"BOOLEAN","false","false","false","true","true","int","1","[]","Optional.empty","\android\widget\RemoteViews.java"
"pendingIntent","false","false","false","false","false","PendingIntent","null","[]","Optional.empty","\android\widget\RemoteViews.java"
"alpha","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\RemoteViews.java"
"CHAR_SEQUENCE","false","false","false","true","true","int","10","[]","Optional.empty","\android\widget\RemoteViews.java"
"LOG_TAG","false","false","true","true","true","String","""RemoteViews""","[]","Optional.empty","\android\widget\RemoteViews.java"
"mPackage","false","false","true","false","false","String","null","[]","Optional[/**
 * The package name of the package containing the layout
 * resource. (Added to the parcel)
 */
]","\android\widget\RemoteViews.java"
"SHORT","false","false","false","true","true","int","3","[]","Optional.empty","\android\widget\RemoteViews.java"
"colorFilter","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\RemoteViews.java"
"mActions","false","false","true","false","false","ArrayList<Action>","null","[]","Optional[/**
 * An array of actions to perform on the view tree once it has been
 * inflated
 */
]","\android\widget\RemoteViews.java"
"type","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\RemoteViews.java"
"BYTE","false","false","false","true","true","int","2","[]","Optional.empty","\android\widget\RemoteViews.java"
"CHAR","false","false","false","true","true","int","8","[]","Optional.empty","\android\widget\RemoteViews.java"
"URI","false","false","false","true","true","int","11","[]","Optional.empty","\android\widget\RemoteViews.java"
"DOUBLE","false","false","false","true","true","int","7","[]","Optional.empty","\android\widget\RemoteViews.java"
"mLayoutId","false","false","true","false","false","int","null","[]","Optional[/**
 * The resource ID of the layout file. (Added to the parcel)
 */
]","\android\widget\RemoteViews.java"
"TAG","true","false","false","true","true","int","4","[]","Optional.empty","\android\widget\RemoteViews.java"
"level","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\RemoteViews.java"
"FLOAT","false","false","false","true","true","int","6","[]","Optional.empty","\android\widget\RemoteViews.java"
"INT","false","false","false","true","true","int","4","[]","Optional.empty","\android\widget\RemoteViews.java"
"nestedViews","false","false","false","false","false","RemoteViews","null","[]","Optional.empty","\android\widget\RemoteViews.java"
"value","false","false","false","false","false","Object","null","[]","Optional.empty","\android\widget\RemoteViews.java"
"BITMAP","false","false","false","true","true","int","12","[]","Optional.empty","\android\widget\RemoteViews.java"
"methodName","false","false","false","false","false","String","null","[]","Optional.empty","\android\widget\RemoteViews.java"
"BUNDLE","false","false","false","true","true","int","13","[]","Optional.empty","\android\widget\RemoteViews.java"
"viewId","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\RemoteViews.java"
"mMatrix","false","false","true","false","false","Matrix","null","[]","Optional.empty","\android\widget\ImageView.java"
"mMaxWidth","false","false","true","false","false","int","Integer.MAX_VALUE","[]","Optional.empty","\android\widget\ImageView.java"
"mCropToPadding","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\ImageView.java"
"mTempSrc","false","false","true","false","false","RectF","new RectF()","[]","Optional[// Avoid allocations...
]","\android\widget\ImageView.java"
"sS2FArray","false","false","true","true","true","Matrix.ScaleToFit","{ Matrix.ScaleToFit.FILL, Matrix.ScaleToFit.START, Matrix.ScaleToFit.CENTER, Matrix.ScaleToFit.END }","[]","Optional.empty","\android\widget\ImageView.java"
"mTempDst","false","false","true","false","false","RectF","new RectF()","[]","Optional.empty","\android\widget\ImageView.java"
"mDrawableWidth","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ImageView.java"
"mState","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ImageView.java"
"mMergeState","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\ImageView.java"
"mBaselineAligned","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\ImageView.java"
"mMaxHeight","false","false","true","false","false","int","Integer.MAX_VALUE","[]","Optional.empty","\android\widget\ImageView.java"
"mResource","false","false","true","false","false","int","0","[]","Optional.empty","\android\widget\ImageView.java"
"mAlpha","false","false","true","false","false","int","255","[]","Optional.empty","\android\widget\ImageView.java"
"mViewAlphaScale","false","false","true","false","false","int","256","[]","Optional.empty","\android\widget\ImageView.java"
"mLevel","false","false","true","false","false","int","0","[]","Optional.empty","\android\widget\ImageView.java"
"mScaleType","false","false","true","false","false","ScaleType","null","[]","Optional.empty","\android\widget\ImageView.java"
"mUri","false","false","true","false","false","Uri","null","[]","Optional[// settable by the client
]","\android\widget\ImageView.java"
"mDrawable","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\ImageView.java"
"mHaveFrame","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\ImageView.java"
"mColorMod","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\ImageView.java"
"nativeInt","false","false","false","false","true","int","null","[]","Optional.empty","\android\widget\ImageView.java"
"sScaleTypeArray","false","false","true","true","true","ScaleType","{ ScaleType.MATRIX, ScaleType.FIT_XY, ScaleType.FIT_START, ScaleType.FIT_CENTER, ScaleType.FIT_END, ScaleType.CENTER, ScaleType.CENTER_CROP, ScaleType.CENTER_INSIDE }","[]","Optional.empty","\android\widget\ImageView.java"
"mColorFilter","false","false","true","false","false","ColorFilter","null","[]","Optional[// these are applied to the drawable
]","\android\widget\ImageView.java"
"mDrawMatrix","false","false","true","false","false","Matrix","null","[]","Optional.empty","\android\widget\ImageView.java"
"mAdjustViewBounds","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\ImageView.java"
"mDrawableHeight","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ImageView.java"
"stack","false","false","true","false","false","LengthRecordNode","null","[]","Optional.empty","\com\google\android\mms\pdu\PduComposer.java"
"REGEXP_PHONE_NUMBER_ADDRESS_TYPE","false","false","false","true","true","String","""\\+?[0-9|\\.|\\-]+""","[]","Optional[/**
 * Address regular expression string.
 */
]","\com\google\android\mms\pdu\PduComposer.java"
"END_STRING_FLAG","false","false","true","true","true","int","0","[]","Optional.empty","\com\google\android\mms\pdu\PduComposer.java"
"PDU_UNKNOWN_ADDRESS_TYPE","false","false","true","true","true","int","5","[]","Optional.empty","\com\google\android\mms\pdu\PduComposer.java"
"stackSize","false","false","false","false","false","int","0","[]","Optional.empty","\com\google\android\mms\pdu\PduComposer.java"
"currentMessage","false","false","false","false","false","ByteArrayOutputStream","null","[]","Optional.empty","\com\google\android\mms\pdu\PduComposer.java"
"PDU_COMPOSER_BLOCK_SIZE","false","false","true","true","true","int","1024","[]","Optional[/**
 * Block size when read data from InputStream.
 */
]","\com\google\android\mms\pdu\PduComposer.java"
"PDU_COMPOSE_CONTENT_ERROR","false","false","true","true","true","int","1","[]","Optional.empty","\com\google\android\mms\pdu\PduComposer.java"
"SHORT_INTEGER_MAX","false","false","true","true","true","int","127","[]","Optional.empty","\com\google\android\mms\pdu\PduComposer.java"
"STRING_PHONE_NUMBER_ADDRESS_TYPE","false","false","false","true","true","String","""/TYPE=PLMN""","[]","Optional[/**
 * The postfix strings of address.
 */
]","\com\google\android\mms\pdu\PduComposer.java"
"PDU_COMPOSE_FIELD_NOT_SET","false","false","true","true","true","int","2","[]","Optional.empty","\com\google\android\mms\pdu\PduComposer.java"
"REGEXP_EMAIL_ADDRESS_TYPE","false","false","false","true","true","String","""[a-zA-Z| ]*\\<{0,1}[a-zA-Z| ]+@{1}"" + ""[a-zA-Z| ]+\\.{1}[a-zA-Z| ]+\\>{0,1}""","[]","Optional.empty","\com\google\android\mms\pdu\PduComposer.java"
"toCopy","false","false","true","false","false","LengthRecordNode","null","[]","Optional.empty","\com\google\android\mms\pdu\PduComposer.java"
"next","true","false","false","false","false","LengthRecordNode","null","[]","Optional.empty","\com\google\android\mms\pdu\PduComposer.java"
"mStack","false","false","true","false","false","BufferStack","null","[]","Optional[/**
 * Message compose buffer stack.
 */
]","\com\google\android\mms\pdu\PduComposer.java"
"LENGTH_QUOTE","false","false","true","true","true","int","31","[]","Optional.empty","\com\google\android\mms\pdu\PduComposer.java"
"STRING_IPV6_ADDRESS_TYPE","false","false","false","true","true","String","""/TYPE=IPV6""","[]","Optional.empty","\com\google\android\mms\pdu\PduComposer.java"
"LONG_INTEGER_LENGTH_MAX","false","false","true","true","true","int","8","[]","Optional.empty","\com\google\android\mms\pdu\PduComposer.java"
"mPosition","false","true","false","false","false","int","0","[]","Optional[/**
 * Current visiting position of the mMessage.
 */
]","\com\google\android\mms\pdu\PduComposer.java"
"currentPosition","true","false","false","false","false","int","0","[]","Optional.empty","\com\google\android\mms\pdu\PduComposer.java"
"REGEXP_IPV4_ADDRESS_TYPE","false","false","false","true","true","String","""[0-9]{1,3}\\.{1}[0-9]{1,3}\\.{1}"" + ""[0-9]{1,3}\\.{1}[0-9]{1,3}""","[]","Optional.empty","\com\google\android\mms\pdu\PduComposer.java"
"mResolver","false","false","true","false","true","ContentResolver","null","[]","Optional[/**
 * Content resolver.
 */
]","\com\google\android\mms\pdu\PduComposer.java"
"PDU_EMAIL_ADDRESS_TYPE","false","false","true","true","true","int","2","[]","Optional.empty","\com\google\android\mms\pdu\PduComposer.java"
"PDU_IPV6_ADDRESS_TYPE","false","false","true","true","true","int","4","[]","Optional.empty","\com\google\android\mms\pdu\PduComposer.java"
"mPdu","false","false","true","false","false","GenericPdu","null","[]","Optional[/**
 * The PDU.
 */
]","\com\google\android\mms\pdu\PduComposer.java"
"PDU_IPV4_ADDRESS_TYPE","false","false","true","true","true","int","3","[]","Optional.empty","\com\google\android\mms\pdu\PduComposer.java"
"PDU_COMPOSE_FIELD_NOT_SUPPORTED","false","false","true","true","true","int","3","[]","Optional.empty","\com\google\android\mms\pdu\PduComposer.java"
"mPduHeader","false","false","true","false","false","PduHeaders","null","[]","Optional[/**
 * Header of this pdu.
 */
]","\com\google\android\mms\pdu\PduComposer.java"
"PDU_COMPOSE_SUCCESS","false","false","true","true","true","int","0","[]","Optional[/**
 * Error values.
 */
]","\com\google\android\mms\pdu\PduComposer.java"
"QUOTED_STRING_FLAG","false","false","true","true","true","int","34","[]","Optional[/**
 * WAP values defined in WSP spec.
 */
]","\com\google\android\mms\pdu\PduComposer.java"
"REGEXP_IPV6_ADDRESS_TYPE","false","false","false","true","true","String","""[a-fA-F]{4}\\:{1}[a-fA-F0-9]{4}\\:{1}[a-fA-F0-9]{4}\\:{1}"" + ""[a-fA-F0-9]{4}\\:{1}[a-fA-F0-9]{4}\\:{1}[a-fA-F0-9]{4}\\:{1}"" + ""[a-fA-F0-9]{4}\\:{1}[a-fA-F0-9]{4}""","[]","Optional.empty","\com\google\android\mms\pdu\PduComposer.java"
"PDU_PHONE_NUMBER_ADDRESS_TYPE","false","false","true","true","true","int","1","[]","Optional[/**
 * Address type.
 */
]","\com\google\android\mms\pdu\PduComposer.java"
"mContentTypeMap","false","false","true","true","false","HashMap<String,Integer>","null","[]","Optional[/**
 * Map of all content type
 */
]","\com\google\android\mms\pdu\PduComposer.java"
"TEXT_MAX","false","false","true","true","true","int","127","[]","Optional.empty","\com\google\android\mms\pdu\PduComposer.java"
"mMessage","false","true","false","false","false","ByteArrayOutputStream","null","[]","Optional[/**
 * The output message.
 */
]","\com\google\android\mms\pdu\PduComposer.java"
"c_pos","false","false","true","false","false","int","null","[]","Optional[// Current position
]","\com\google\android\mms\pdu\PduComposer.java"
"STRING_IPV4_ADDRESS_TYPE","false","false","false","true","true","String","""/TYPE=IPV4""","[]","Optional.empty","\com\google\android\mms\pdu\PduComposer.java"
"currentStackSize","false","false","true","false","false","int","null","[]","Optional[// Current stack size
]","\com\google\android\mms\pdu\PduComposer.java"
"mName","true","false","false","false","true","String","null","[]","Optional.empty","\android\util\EventLogTags.java"
"mTag","true","false","false","false","true","int","null","[]","Optional.empty","\android\util\EventLogTags.java"
"mClient","false","false","false","false","false","CursorFilterClient","null","[]","Optional.empty","\android\widget\CursorFilter.java"
"mMessageHandler","false","false","true","false","true","MessageHandler","null","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"mCredentialsPermissionNotificationIds","false","false","true","false","true","HashMap<Pair<Pair<Account,String>,Integer>,Integer>","new HashMap<Pair<Pair<Account, String>, Integer>, Integer>()","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"TABLE_GRANTS","false","false","true","true","true","String","""grants""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"ACCOUNTS_ID","false","false","true","true","true","String","""_id""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"DATABASE_VERSION","false","false","true","true","true","int","4","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"mStripAuthTokenFromResult","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"mAuthenticatorCache","false","false","true","false","true","AccountAuthenticatorCache","null","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"TIMEOUT_DELAY_MS","false","false","true","true","true","int","1000 * 60","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"TABLE_AUTHTOKENS","false","false","true","true","true","String","""authtokens""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"mFeatures","false","false","true","false","true","String","null","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"mHashCode","false","false","true","false","true","int","null","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"ACCOUNTS_NAME","false","false","true","true","true","String","""name""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"mAccountsWithFeatures","false","false","true","false","false","ArrayList<Account>","null","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"AUTHTOKENS_ACCOUNTS_ID","false","false","true","true","true","String","""accounts_id""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"COUNT_OF_MATCHING_GRANTS","false","false","true","true","true","String",""""" + ""SELECT COUNT(*) FROM "" + TABLE_GRANTS + "", "" + TABLE_ACCOUNTS + "" WHERE "" + GRANTS_ACCOUNTS_ID + ""="" + ACCOUNTS_ID + "" AND "" + GRANTS_GRANTEE_UID + ""=?"" + "" AND "" + GRANTS_AUTH_TOKEN_TYPE + ""=?"" + "" AND "" + ACCOUNTS_NAME + ""=?"" + "" AND "" + ACCOUNTS_TYPE + ""=?""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"GRANTS_GRANTEE_UID","false","false","true","true","true","String","""uid""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"mSessions","false","false","true","false","true","LinkedHashMap<String,Session>","new LinkedHashMap<String, Session>()","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"NO_BROADCAST_FLAG","false","false","true","true","true","String","""nobroadcast""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"mAuthTokenType","true","false","false","false","true","String","null","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"mNumRequestContinued","false","false","true","false","false","int","0","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"EXTRAS_ACCOUNTS_ID","false","false","true","true","true","String","""accounts_id""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"ACCOUNTS_TYPE_COUNT","false","false","true","true","true","String","""count(type)""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"AUTHTOKENS_ID","false","false","true","true","true","String","""_id""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"ACCOUNT_NAME_TYPE_PROJECTION","false","false","true","true","true","String","new String[] { ACCOUNTS_ID, ACCOUNTS_NAME, ACCOUNTS_TYPE }","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"mMessageThread","false","false","true","false","false","HandlerThread","null","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"GOOGLE_ACCOUNT_TYPE","false","false","true","true","true","String","""com.google""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"MESSAGE_TIMED_OUT","false","false","true","true","true","int","3","[]","Optional[// Messages that can be sent on mHandler
]","\android\accounts\AccountManagerService.java"
"META_KEY","false","false","true","true","true","String","""key""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"ACCOUNTS_TYPE","false","false","true","true","true","String","""type""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"DATABASE_NAME","false","false","true","true","true","String","""accounts.db""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"mAccount","false","false","false","false","true","Account","null","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"mNumErrors","false","false","true","false","false","int","0","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"AUTHTOKENS_TYPE","false","false","true","true","true","String","""type""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"EXTRAS_KEY","false","false","true","true","true","String","""key""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"TABLE_META","false","false","true","true","true","String","""meta""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"mSigninRequiredNotificationIds","false","false","true","false","true","HashMap<Account,Integer>","new HashMap<Account, Integer>()","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"isDebuggableMonkeyBuild","false","false","true","true","true","boolean","SystemProperties.getBoolean(""ro.monkey"", false)","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"EXTRAS_VALUE","false","false","true","true","true","String","""value""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"mAuthenticator","false","false","false","false","false","IAccountAuthenticator","null","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"META_VALUE","false","false","true","true","true","String","""value""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"mAccountsOfType","false","false","true","false","false","Account","null","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"mSimWatcher","false","false","true","false","true","SimWatcher","null","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"mCreationTime","false","false","false","false","true","long","null","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"mNumResults","true","false","false","false","false","int","0","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"GRANTS_ACCOUNTS_ID","false","false","true","true","true","String","""accounts_id""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"GRANTS_AUTH_TOKEN_TYPE","false","false","true","true","true","String","""auth_token_type""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"TABLE_ACCOUNTS","false","false","true","true","true","String","""accounts""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"TABLE_EXTRAS","false","false","true","true","true","String","""extras""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"AUTHTOKENS_AUTHTOKEN","false","false","true","true","true","String","""authtoken""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"EXTRAS_ID","false","false","true","true","true","String","""_id""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"mResponse","false","false","false","false","false","IAccountManagerResponse","null","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"TAG","false","false","true","true","true","String","""AccountManagerService""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"mCurrentAccount","false","false","true","false","false","int","0","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"ACCOUNT_TYPE_COUNT_PROJECTION","false","false","true","true","true","String","new String[] { ACCOUNTS_TYPE, ACCOUNTS_TYPE_COUNT }","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"mNotificationIds","false","false","true","false","true","AtomicInteger","new AtomicInteger(1)","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"EMPTY_ACCOUNT_ARRAY","false","false","true","true","true","Account","new Account[] {}","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"mOpenHelper","false","false","true","false","true","DatabaseHelper","null","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"sThis","false","false","true","true","false","AtomicReference<AccountManagerService>","new AtomicReference<AccountManagerService>()","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"ACCOUNTS_PASSWORD","false","false","true","true","true","String","""password""","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"ACCOUNTS_CHANGED_INTENT","false","false","true","true","true","Intent","null","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"mAccountType","false","false","false","false","true","String","null","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"mExpectActivityLaunch","false","false","false","false","true","boolean","null","[]","Optional.empty","\android\accounts\AccountManagerService.java"
"CAMERA_MSG_RAW_IMAGE","false","false","true","true","true","int","0x080","[]","Optional.empty","\android\hardware\Camera.java"
"CAMERA_FACING_FRONT","true","false","false","true","true","int","1","[]","Optional[/**
 * The facing of the camera is the same as that of the screen.
 */
]","\android\hardware\Camera.java"
"CAMERA_MSG_POSTVIEW_FRAME","false","false","true","true","true","int","0x040","[]","Optional.empty","\android\hardware\Camera.java"
"CAMERA_MSG_PREVIEW_FRAME","false","false","true","true","true","int","0x010","[]","Optional.empty","\android\hardware\Camera.java"
"ANTIBANDING_60HZ","true","false","false","true","true","String","""60hz""","[]","Optional.empty","\android\hardware\Camera.java"
"mOneShot","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\hardware\Camera.java"
"KEY_SCENE_MODE","false","false","true","true","true","String","""scene-mode""","[]","Optional.empty","\android\hardware\Camera.java"
"KEY_JPEG_THUMBNAIL_HEIGHT","false","false","true","true","true","String","""jpeg-thumbnail-height""","[]","Optional.empty","\android\hardware\Camera.java"
"CAMERA_MSG_VIDEO_FRAME","false","false","true","true","true","int","0x020","[]","Optional.empty","\android\hardware\Camera.java"
"mRawImageCallback","false","false","true","false","false","PictureCallback","null","[]","Optional.empty","\android\hardware\Camera.java"
"KEY_VERTICAL_VIEW_ANGLE","false","false","true","true","true","String","""vertical-view-angle""","[]","Optional.empty","\android\hardware\Camera.java"
"mCamera","false","false","true","false","false","Camera","null","[]","Optional.empty","\android\hardware\Camera.java"
"height","true","false","false","false","false","int","null","[]","Optional[/**
 * height of the picture
 */
]","\android\hardware\Camera.java"
"WHITE_BALANCE_INCANDESCENT","true","false","false","true","true","String","""incandescent""","[]","Optional.empty","\android\hardware\Camera.java"
"KEY_JPEG_THUMBNAIL_SIZE","false","false","true","true","true","String","""jpeg-thumbnail-size""","[]","Optional.empty","\android\hardware\Camera.java"
"KEY_GPS_LONGITUDE","false","false","true","true","true","String","""gps-longitude""","[]","Optional.empty","\android\hardware\Camera.java"
"WHITE_BALANCE_WARM_FLUORESCENT","true","false","false","true","true","String","""warm-fluorescent""","[]","Optional.empty","\android\hardware\Camera.java"
"mPreviewCallback","false","false","true","false","false","PreviewCallback","null","[]","Optional.empty","\android\hardware\Camera.java"
"WHITE_BALANCE_CLOUDY_DAYLIGHT","true","false","false","true","true","String","""cloudy-daylight""","[]","Optional.empty","\android\hardware\Camera.java"
"SCENE_MODE_SUNSET","true","false","false","true","true","String","""sunset""","[]","Optional[/**
 * Take sunset photos.
 */
]","\android\hardware\Camera.java"
"SCENE_MODE_PARTY","true","false","false","true","true","String","""party""","[]","Optional[/**
 * Take indoor low-light shot.
 */
]","\android\hardware\Camera.java"
"EFFECT_NONE","true","false","false","true","true","String","""none""","[]","Optional[// Values for color effect settings.
]","\android\hardware\Camera.java"
"PREVIEW_FPS_MIN_INDEX","true","false","false","true","true","int","0","[]","Optional[/**
 * The array index of minimum preview fps for use with {@link
 * #getPreviewFpsRange(int[])} or {@link
 * #getSupportedPreviewFpsRange()}.
 */
]","\android\hardware\Camera.java"
"KEY_EXPOSURE_COMPENSATION_STEP","false","false","true","true","true","String","""exposure-compensation-step""","[]","Optional.empty","\android\hardware\Camera.java"
"EFFECT_POSTERIZE","true","false","false","true","true","String","""posterize""","[]","Optional.empty","\android\hardware\Camera.java"
"CAMERA_ERROR_SERVER_DIED","true","false","false","true","true","int","100","[]","Optional[/**
 * Media server died. In this case, the application must release the
 * Camera object and instantiate a new one.
 * @see Camera.ErrorCallback
 */
]","\android\hardware\Camera.java"
"facing","true","false","false","false","false","int","null","[]","Optional[/**
 * The direction that the camera faces to. It should be
 * CAMERA_FACING_BACK or CAMERA_FACING_FRONT.
 */
]","\android\hardware\Camera.java"
"SCENE_MODE_SNOW","true","false","false","true","true","String","""snow""","[]","Optional[/**
 * Take pictures on the snow.
 */
]","\android\hardware\Camera.java"
"KEY_JPEG_QUALITY","false","false","true","true","true","String","""jpeg-quality""","[]","Optional.empty","\android\hardware\Camera.java"
"KEY_HORIZONTAL_VIEW_ANGLE","false","false","true","true","true","String","""horizontal-view-angle""","[]","Optional.empty","\android\hardware\Camera.java"
"FOCUS_MODE_FIXED","true","false","false","true","true","String","""fixed""","[]","Optional[/**
 * Focus is fixed. The camera is always in this mode if the focus is not
 * adjustable. If the camera has auto-focus, this mode can fix the
 * focus, which is usually at hyperfocal distance. Applications should
 * not call {@link #autoFocus(AutoFocusCallback)} in this mode.
 */
]","\android\hardware\Camera.java"
"FOCUS_MODE_CONTINUOUS_VIDEO","true","false","false","true","true","String","""continuous-video""","[]","Optional[/**
 * Continuous auto focus mode intended for video recording. The camera
 * continuously tries to focus. This is ideal for shooting video.
 * Applications still can call {@link
 * #takePicture(Camera.ShutterCallback, Camera.PictureCallback,
 * Camera.PictureCallback)} in this mode but the subject may not be in
 * focus. Auto focus starts when the parameter is set. Applications
 * should not call {@link #autoFocus(AutoFocusCallback)} in this mode.
 * To stop continuous focus, applications should change the focus mode
 * to other modes.
 */
]","\android\hardware\Camera.java"
"KEY_FOCAL_LENGTH","false","false","true","true","true","String","""focal-length""","[]","Optional.empty","\android\hardware\Camera.java"
"WHITE_BALANCE_DAYLIGHT","true","false","false","true","true","String","""daylight""","[]","Optional.empty","\android\hardware\Camera.java"
"FOCUS_MODE_AUTO","true","false","false","true","true","String","""auto""","[]","Optional[/**
 * Auto-focus mode. Applications should call {@link
 * #autoFocus(AutoFocusCallback)} to start the focus in this mode.
 */
]","\android\hardware\Camera.java"
"CAMERA_MSG_FOCUS","false","false","true","true","true","int","0x004","[]","Optional.empty","\android\hardware\Camera.java"
"SCENE_MODE_AUTO","true","false","false","true","true","String","""auto""","[]","Optional[/**
 * Scene mode is off.
 */
]","\android\hardware\Camera.java"
"SCENE_MODE_BARCODE","true","false","false","true","true","String","""barcode""","[]","Optional[/**
 * Applications are looking for a barcode. Camera driver will be
 * optimized for barcode reading.
 */
]","\android\hardware\Camera.java"
"SCENE_MODE_CANDLELIGHT","true","false","false","true","true","String","""candlelight""","[]","Optional[/**
 * Capture the naturally warm color of scenes lit by candles.
 */
]","\android\hardware\Camera.java"
"WHITE_BALANCE_FLUORESCENT","true","false","false","true","true","String","""fluorescent""","[]","Optional.empty","\android\hardware\Camera.java"
"KEY_SMOOTH_ZOOM_SUPPORTED","false","false","true","true","true","String","""smooth-zoom-supported""","[]","Optional.empty","\android\hardware\Camera.java"
"FOCUS_DISTANCE_NEAR_INDEX","true","false","false","true","true","int","0","[]","Optional[/**
 * The array index of near focus distance for use with
 * {@link #getFocusDistances(float[])}.
 */
]","\android\hardware\Camera.java"
"CAMERA_MSG_ZOOM","false","false","true","true","true","int","0x008","[]","Optional.empty","\android\hardware\Camera.java"
"KEY_WHITE_BALANCE","false","false","true","true","true","String","""whitebalance""","[]","Optional.empty","\android\hardware\Camera.java"
"mJpegCallback","false","false","true","false","false","PictureCallback","null","[]","Optional.empty","\android\hardware\Camera.java"
"CAMERA_FACING_BACK","true","false","false","true","true","int","0","[]","Optional[/**
 * The facing of the camera is opposite to that of the screen.
 */
]","\android\hardware\Camera.java"
"SUPPORTED_VALUES_SUFFIX","false","false","true","true","true","String","""-values""","[]","Optional[// Parameter key suffix for supported values.
]","\android\hardware\Camera.java"
"KEY_FOCUS_DISTANCES","false","false","true","true","true","String","""focus-distances""","[]","Optional.empty","\android\hardware\Camera.java"
"mNativeContext","false","false","true","false","false","int","null","[]","Optional[// accessed by native methods
]","\android\hardware\Camera.java"
"mErrorCallback","false","false","true","false","false","ErrorCallback","null","[]","Optional.empty","\android\hardware\Camera.java"
"KEY_ANTIBANDING","false","false","true","true","true","String","""antibanding""","[]","Optional.empty","\android\hardware\Camera.java"
"KEY_ROTATION","false","false","true","true","true","String","""rotation""","[]","Optional.empty","\android\hardware\Camera.java"
"FLASH_MODE_ON","true","false","false","true","true","String","""on""","[]","Optional[/**
 * Flash will always be fired during snapshot. The flash may also be
 * fired during preview or auto-focus depending on the driver.
 */
]","\android\hardware\Camera.java"
"PIXEL_FORMAT_RGB565","false","false","true","true","true","String","""rgb565""","[]","Optional.empty","\android\hardware\Camera.java"
"SCENE_MODE_NIGHT","true","false","false","true","true","String","""night""","[]","Optional[/**
 * Take photos at night.
 */
]","\android\hardware\Camera.java"
"KEY_GPS_TIMESTAMP","false","false","true","true","true","String","""gps-timestamp""","[]","Optional.empty","\android\hardware\Camera.java"
"mZoomListener","false","false","true","false","false","OnZoomChangeListener","null","[]","Optional.empty","\android\hardware\Camera.java"
"ANTIBANDING_OFF","true","false","false","true","true","String","""off""","[]","Optional.empty","\android\hardware\Camera.java"
"KEY_JPEG_THUMBNAIL_WIDTH","false","false","true","true","true","String","""jpeg-thumbnail-width""","[]","Optional.empty","\android\hardware\Camera.java"
"WHITE_BALANCE_SHADE","true","false","false","true","true","String","""shade""","[]","Optional.empty","\android\hardware\Camera.java"
"FLASH_MODE_RED_EYE","true","false","false","true","true","String","""red-eye""","[]","Optional[/**
 * Flash will be fired in red-eye reduction mode.
 */
]","\android\hardware\Camera.java"
"CAMERA_MSG_SHUTTER","false","false","true","true","true","int","0x002","[]","Optional.empty","\android\hardware\Camera.java"
"KEY_GPS_LATITUDE","false","false","true","true","true","String","""gps-latitude""","[]","Optional.empty","\android\hardware\Camera.java"
"EFFECT_BLACKBOARD","true","false","false","true","true","String","""blackboard""","[]","Optional.empty","\android\hardware\Camera.java"
"FOCUS_MODE_INFINITY","true","false","false","true","true","String","""infinity""","[]","Optional[/**
 * Focus is set at infinity. Applications should not call
 * {@link #autoFocus(AutoFocusCallback)} in this mode.
 */
]","\android\hardware\Camera.java"
"KEY_MAX_EXPOSURE_COMPENSATION","false","false","true","true","true","String","""max-exposure-compensation""","[]","Optional.empty","\android\hardware\Camera.java"
"KEY_FLASH_MODE","false","false","true","true","true","String","""flash-mode""","[]","Optional.empty","\android\hardware\Camera.java"
"SCENE_MODE_FIREWORKS","true","false","false","true","true","String","""fireworks""","[]","Optional[/**
 * For shooting firework displays.
 */
]","\android\hardware\Camera.java"
"ANTIBANDING_AUTO","true","false","false","true","true","String","""auto""","[]","Optional[// Values for antibanding settings.
]","\android\hardware\Camera.java"
"KEY_ZOOM_SUPPORTED","false","false","true","true","true","String","""zoom-supported""","[]","Optional.empty","\android\hardware\Camera.java"
"PIXEL_FORMAT_YUV422SP","false","false","true","true","true","String","""yuv422sp""","[]","Optional[// Formats for setPreviewFormat and setPictureFormat.
]","\android\hardware\Camera.java"
"FOCUS_DISTANCE_OPTIMAL_INDEX","true","false","false","true","true","int","1","[]","Optional[/**
 * The array index of optimal focus distance for use with
 * {@link #getFocusDistances(float[])}.
 */
]","\android\hardware\Camera.java"
"KEY_EXPOSURE_COMPENSATION","false","false","true","true","true","String","""exposure-compensation""","[]","Optional.empty","\android\hardware\Camera.java"
"KEY_MIN_EXPOSURE_COMPENSATION","false","false","true","true","true","String","""min-exposure-compensation""","[]","Optional.empty","\android\hardware\Camera.java"
"KEY_GPS_ALTITUDE","false","false","true","true","true","String","""gps-altitude""","[]","Optional.empty","\android\hardware\Camera.java"
"CAMERA_MSG_ALL_MSGS","false","false","true","true","true","int","0x1FF","[]","Optional.empty","\android\hardware\Camera.java"
"mPostviewCallback","false","false","true","false","false","PictureCallback","null","[]","Optional.empty","\android\hardware\Camera.java"
"KEY_ZOOM_RATIOS","false","false","true","true","true","String","""zoom-ratios""","[]","Optional.empty","\android\hardware\Camera.java"
"mShutterCallback","false","false","true","false","false","ShutterCallback","null","[]","Optional.empty","\android\hardware\Camera.java"
"SCENE_MODE_PORTRAIT","true","false","false","true","true","String","""portrait""","[]","Optional[/**
 * Take people pictures.
 */
]","\android\hardware\Camera.java"
"SCENE_MODE_BEACH","true","false","false","true","true","String","""beach""","[]","Optional[/**
 * Take pictures on the beach.
 */
]","\android\hardware\Camera.java"
"KEY_PICTURE_FORMAT","false","false","true","true","true","String","""picture-format""","[]","Optional.empty","\android\hardware\Camera.java"
"EFFECT_NEGATIVE","true","false","false","true","true","String","""negative""","[]","Optional.empty","\android\hardware\Camera.java"
"SCENE_MODE_ACTION","true","false","false","true","true","String","""action""","[]","Optional[/**
 * Take photos of fast moving objects. Same as {@link
 * #SCENE_MODE_SPORTS}.
 */
]","\android\hardware\Camera.java"
"CAMERA_ERROR_UNKNOWN","true","false","false","true","true","int","1","[]","Optional[/**
 * Unspecified camera error.
 * @see Camera.ErrorCallback
 */
]","\android\hardware\Camera.java"
"KEY_FOCUS_MODE","false","false","true","true","true","String","""focus-mode""","[]","Optional.empty","\android\hardware\Camera.java"
"SCENE_MODE_LANDSCAPE","true","false","false","true","true","String","""landscape""","[]","Optional[/**
 * Take pictures on distant objects.
 */
]","\android\hardware\Camera.java"
"mAutoFocusCallback","false","false","true","false","false","AutoFocusCallback","null","[]","Optional.empty","\android\hardware\Camera.java"
"CAMERA_MSG_ERROR","false","false","true","true","true","int","0x001","[]","Optional[// These match the enums in frameworks/base/include/camera/Camera.h
]","\android\hardware\Camera.java"
"WHITE_BALANCE_TWILIGHT","true","false","false","true","true","String","""twilight""","[]","Optional.empty","\android\hardware\Camera.java"
"mEventHandler","false","false","true","false","false","EventHandler","null","[]","Optional.empty","\android\hardware\Camera.java"
"CAMERA_MSG_COMPRESSED_IMAGE","false","false","true","true","true","int","0x100","[]","Optional.empty","\android\hardware\Camera.java"
"KEY_PICTURE_SIZE","false","false","true","true","true","String","""picture-size""","[]","Optional.empty","\android\hardware\Camera.java"
"SCENE_MODE_STEADYPHOTO","true","false","false","true","true","String","""steadyphoto""","[]","Optional[/**
 * Avoid blurry pictures (for example, due to hand shake).
 */
]","\android\hardware\Camera.java"
"SCENE_MODE_SPORTS","true","false","false","true","true","String","""sports""","[]","Optional[/**
 * Take photos of fast moving objects. Same as {@link
 * #SCENE_MODE_ACTION}.
 */
]","\android\hardware\Camera.java"
"KEY_GPS_PROCESSING_METHOD","false","false","true","true","true","String","""gps-processing-method""","[]","Optional.empty","\android\hardware\Camera.java"
"SCENE_MODE_NIGHT_PORTRAIT","true","false","false","true","true","String","""night-portrait""","[]","Optional[/**
 * Take people pictures at night.
 */
]","\android\hardware\Camera.java"
"width","true","false","false","false","false","int","null","[]","Optional[/**
 * width of the picture
 */
]","\android\hardware\Camera.java"
"KEY_PREVIEW_SIZE","false","false","true","true","true","String","""preview-size""","[]","Optional[// Parameter keys to communicate with the camera driver.
]","\android\hardware\Camera.java"
"FOCUS_MODE_EDOF","true","false","false","true","true","String","""edof""","[]","Optional[/**
 * Extended depth of field (EDOF). Focusing is done digitally and
 * continuously. Applications should not call {@link
 * #autoFocus(AutoFocusCallback)} in this mode.
 */
]","\android\hardware\Camera.java"
"TAG","false","false","true","true","true","String","""Camera""","[]","Optional.empty","\android\hardware\Camera.java"
"PIXEL_FORMAT_YUV420SP","false","false","true","true","true","String","""yuv420sp""","[]","Optional.empty","\android\hardware\Camera.java"
"KEY_JPEG_THUMBNAIL_QUALITY","false","false","true","true","true","String","""jpeg-thumbnail-quality""","[]","Optional.empty","\android\hardware\Camera.java"
"FLASH_MODE_AUTO","true","false","false","true","true","String","""auto""","[]","Optional[/**
 * Flash will be fired automatically when required. The flash may be fired
 * during preview, auto-focus, or snapshot depending on the driver.
 */
]","\android\hardware\Camera.java"
"WHITE_BALANCE_AUTO","true","false","false","true","true","String","""auto""","[]","Optional[// Values for white balance settings.
]","\android\hardware\Camera.java"
"EFFECT_SEPIA","true","false","false","true","true","String","""sepia""","[]","Optional.empty","\android\hardware\Camera.java"
"FLASH_MODE_TORCH","true","false","false","true","true","String","""torch""","[]","Optional[/**
 * Constant emission of light during preview, auto-focus and snapshot.
 * This can also be used for video recording.
 */
]","\android\hardware\Camera.java"
"KEY_ZOOM","false","false","true","true","true","String","""zoom""","[]","Optional.empty","\android\hardware\Camera.java"
"mMap","false","false","true","false","false","HashMap<String,String>","null","[]","Optional.empty","\android\hardware\Camera.java"
"KEY_PREVIEW_FORMAT","false","false","true","true","true","String","""preview-format""","[]","Optional.empty","\android\hardware\Camera.java"
"KEY_PREVIEW_FPS_RANGE","false","false","true","true","true","String","""preview-fps-range""","[]","Optional.empty","\android\hardware\Camera.java"
"TRUE","false","false","true","true","true","String","""true""","[]","Optional.empty","\android\hardware\Camera.java"
"EFFECT_WHITEBOARD","true","false","false","true","true","String","""whiteboard""","[]","Optional.empty","\android\hardware\Camera.java"
"ANTIBANDING_50HZ","true","false","false","true","true","String","""50hz""","[]","Optional.empty","\android\hardware\Camera.java"
"EFFECT_SOLARIZE","true","false","false","true","true","String","""solarize""","[]","Optional.empty","\android\hardware\Camera.java"
"PREVIEW_FPS_MAX_INDEX","true","false","false","true","true","int","1","[]","Optional[/**
 * The array index of maximum preview fps for use with {@link
 * #getPreviewFpsRange(int[])} or {@link
 * #getSupportedPreviewFpsRange()}.
 */
]","\android\hardware\Camera.java"
"KEY_MAX_ZOOM","false","false","true","true","true","String","""max-zoom""","[]","Optional.empty","\android\hardware\Camera.java"
"EFFECT_AQUA","true","false","false","true","true","String","""aqua""","[]","Optional.empty","\android\hardware\Camera.java"
"FOCUS_DISTANCE_FAR_INDEX","true","false","false","true","true","int","2","[]","Optional[/**
 * The array index of far focus distance for use with
 * {@link #getFocusDistances(float[])}.
 */
]","\android\hardware\Camera.java"
"mWithBuffer","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\hardware\Camera.java"
"EFFECT_MONO","true","false","false","true","true","String","""mono""","[]","Optional.empty","\android\hardware\Camera.java"
"KEY_PREVIEW_FRAME_RATE","false","false","true","true","true","String","""preview-frame-rate""","[]","Optional.empty","\android\hardware\Camera.java"
"FOCUS_MODE_MACRO","true","false","false","true","true","String","""macro""","[]","Optional[/**
 * Macro (close-up) focus mode. Applications should call
 * {@link #autoFocus(AutoFocusCallback)} to start the focus in this
 * mode.
 */
]","\android\hardware\Camera.java"
"FLASH_MODE_OFF","true","false","false","true","true","String","""off""","[]","Optional[/**
 * Flash will not be fired.
 */
]","\android\hardware\Camera.java"
"PIXEL_FORMAT_JPEG","false","false","true","true","true","String","""jpeg""","[]","Optional.empty","\android\hardware\Camera.java"
"orientation","true","false","false","false","false","int","null","[]","Optional[/**
 * The orientation of the camera image. The value is the angle that the
 * camera image needs to be rotated clockwise so it shows correctly on
 * the display in its natural orientation. It should be 0, 90, 180, or 270.
 *
 * For example, suppose a device has a naturally tall screen. The
 * back-facing camera sensor is mounted in landscape. You are looking at
 * the screen. If the top side of the camera sensor is aligned with the
 * right edge of the screen in natural orientation, the value should be
 * 90. If the top side of a front-facing camera sensor is aligned with
 * the right of the screen, the value should be 270.
 *
 * @see #setDisplayOrientation(int)
 * @see Parameters#setRotation(int)
 * @see Parameters#setPreviewSize(int, int)
 * @see Parameters#setPictureSize(int, int)
 * @see Parameters#setJpegThumbnailSize(int, int)
 */
]","\android\hardware\Camera.java"
"SCENE_MODE_THEATRE","true","false","false","true","true","String","""theatre""","[]","Optional[/**
 * Take photos in a theater. Flash light is off.
 */
]","\android\hardware\Camera.java"
"PIXEL_FORMAT_YUV422I","false","false","true","true","true","String","""yuv422i-yuyv""","[]","Optional.empty","\android\hardware\Camera.java"
"KEY_EFFECT","false","false","true","true","true","String","""effect""","[]","Optional.empty","\android\hardware\Camera.java"
"LOGV","false","false","false","true","true","boolean","DEBUG ? Config.LOGD : Config.LOGV","[]","Optional.empty","\android\net\http\HttpLog.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\net\http\HttpLog.java"
"LOGTAG","false","false","true","true","true","String","""http""","[]","Optional.empty","\android\net\http\HttpLog.java"
"EDGE_SLOP","false","false","true","true","true","int","12","[]","Optional[/**
 * Inset in pixels to look for touchable content when the user touches the edge of the screen
 */
]","\android\view\ViewConfiguration.java"
"SCROLL_BAR_SIZE","false","false","true","true","true","int","10","[]","Optional[/**
 * Defines the width of the horizontal scrollbar and the height of the vertical scrollbar in
 * pixels
 */
]","\android\view\ViewConfiguration.java"
"MINIMUM_FLING_VELOCITY","false","false","true","true","true","int","50","[]","Optional[/**
 * Minimum velocity to initiate a fling, as measured in pixels per second
 */
]","\android\view\ViewConfiguration.java"
"SCROLL_BAR_DEFAULT_DELAY","false","false","true","true","true","int","300","[]","Optional[/**
 * Default delay before the scrollbars fade in milliseconds
 */
]","\android\view\ViewConfiguration.java"
"JUMP_TAP_TIMEOUT","false","false","true","true","true","int","500","[]","Optional[/**
 * Defines the duration in milliseconds we will wait to see if a touch event
 * is a jump tap. If the user does not complete the jump tap within this interval, it is
 * considered to be a tap.
 */
]","\android\view\ViewConfiguration.java"
"OVERFLING_DISTANCE","false","false","true","true","true","int","4","[]","Optional[/**
 * Max distance to overfling for edge effects
 */
]","\android\view\ViewConfiguration.java"
"DOUBLE_TAP_TIMEOUT","false","false","true","true","true","int","300","[]","Optional[/**
 * Defines the duration in milliseconds between the first tap's up event and
 * the second tap's down event for an interaction to be considered a
 * double-tap.
 */
]","\android\view\ViewConfiguration.java"
"TOUCH_SLOP","false","false","true","true","true","int","16","[]","Optional[/**
 * Distance a touch can wander before we think the user is scrolling in pixels
 */
]","\android\view\ViewConfiguration.java"
"PAGING_TOUCH_SLOP","false","false","true","true","true","int","TOUCH_SLOP * 2","[]","Optional[/**
 * Distance a touch can wander before we think the user is attempting a paged scroll
 * (in dips)
 */
]","\android\view\ViewConfiguration.java"
"mMinimumFlingVelocity","false","false","true","false","true","int","null","[]","Optional.empty","\android\view\ViewConfiguration.java"
"sConfigurations","false","false","true","true","true","SparseArray<ViewConfiguration>","new SparseArray<ViewConfiguration>(2)","[]","Optional.empty","\android\view\ViewConfiguration.java"
"MAXIMUM_DRAWING_CACHE_SIZE","false","false","true","true","true","int","320 * 480 * 4","[@Deprecated]","Optional[/**
 * The maximum size of View's drawing cache, expressed in bytes. This size
 * should be at least equal to the size of the screen in ARGB888 format.
 */
]","\android\view\ViewConfiguration.java"
"mOverscrollDistance","false","false","true","false","true","int","null","[]","Optional.empty","\android\view\ViewConfiguration.java"
"TAP_TIMEOUT","false","false","true","true","true","int","115","[]","Optional[/**
 * Defines the duration in milliseconds we will wait to see if a touch event
 * is a tap or a scroll. If the user does not move within this interval, it is
 * considered to be a tap.
 */
]","\android\view\ViewConfiguration.java"
"mScrollbarSize","false","false","true","false","true","int","null","[]","Optional.empty","\android\view\ViewConfiguration.java"
"MAXIMUM_FLING_VELOCITY","false","false","true","true","true","int","4000","[]","Optional[/**
 * Maximum velocity to initiate a fling, as measured in pixels per second
 */
]","\android\view\ViewConfiguration.java"
"SCROLL_BAR_FADE_DURATION","false","false","true","true","true","int","250","[]","Optional[/**
 * Duration of the fade when scrollbars fade away in milliseconds
 */
]","\android\view\ViewConfiguration.java"
"mMaximumFlingVelocity","false","false","true","false","true","int","null","[]","Optional.empty","\android\view\ViewConfiguration.java"
"OVERSCROLL_DISTANCE","false","false","true","true","true","int","0","[]","Optional[/**
 * Max distance to overscroll for edge effects
 */
]","\android\view\ViewConfiguration.java"
"mEdgeSlop","false","false","true","false","true","int","null","[]","Optional.empty","\android\view\ViewConfiguration.java"
"WINDOW_TOUCH_SLOP","false","false","true","true","true","int","16","[]","Optional[/**
 * Distance a touch needs to be outside of a window's bounds for it to
 * count as outside for purposes of dismissing the window.
 */
]","\android\view\ViewConfiguration.java"
"mOverflingDistance","false","false","true","false","true","int","null","[]","Optional.empty","\android\view\ViewConfiguration.java"
"GLOBAL_ACTIONS_KEY_TIMEOUT","false","false","true","true","true","int","500","[]","Optional[/**
 * Defines the duration in milliseconds a user needs to hold down the
 * appropriate button to bring up the global actions dialog (power off,
 * lock screen, etc).
 */
]","\android\view\ViewConfiguration.java"
"mDoubleTapSlop","false","false","true","false","true","int","null","[]","Optional.empty","\android\view\ViewConfiguration.java"
"mMaximumDrawingCacheSize","false","false","true","false","true","int","null","[]","Optional.empty","\android\view\ViewConfiguration.java"
"mWindowTouchSlop","false","false","true","false","true","int","null","[]","Optional.empty","\android\view\ViewConfiguration.java"
"PRESSED_STATE_DURATION","false","false","true","true","true","int","125","[]","Optional[/**
 * Defines the duration in milliseconds of the pressed state in child
 * components.
 */
]","\android\view\ViewConfiguration.java"
"LONG_PRESS_TIMEOUT","false","false","true","true","true","int","500","[]","Optional[/**
 * Defines the duration in milliseconds before a press turns into
 * a long press
 */
]","\android\view\ViewConfiguration.java"
"ZOOM_CONTROLS_TIMEOUT","false","false","true","true","true","int","3000","[]","Optional[/**
 * Defines the duration in milliseconds we want to display zoom controls in response
 * to a user panning within an application.
 */
]","\android\view\ViewConfiguration.java"
"mTouchSlop","false","false","true","false","true","int","null","[]","Optional.empty","\android\view\ViewConfiguration.java"
"FADING_EDGE_LENGTH","false","false","true","true","true","int","12","[]","Optional[/**
 * Defines the length of the fading edges in pixels
 */
]","\android\view\ViewConfiguration.java"
"mPagingTouchSlop","false","false","true","false","true","int","null","[]","Optional.empty","\android\view\ViewConfiguration.java"
"DOUBLE_TAP_SLOP","false","false","true","true","true","int","100","[]","Optional[/**
 * Distance between the first touch and second touch to still be considered a double tap
 */
]","\android\view\ViewConfiguration.java"
"mFadingEdgeLength","false","false","true","false","true","int","null","[]","Optional.empty","\android\view\ViewConfiguration.java"
"SCROLL_FRICTION","false","false","true","true","false","float","0.015f","[]","Optional[/**
 * The coefficient of friction applied to flings/scrolls.
 */
]","\android\view\ViewConfiguration.java"
"CREATOR","true","false","false","true","true","Creator<AuthenticatorDescription>","new Creator<AuthenticatorDescription>() {

    /**
     * @inheritDoc
     */
    public AuthenticatorDescription createFromParcel(Parcel source) {
        return new AuthenticatorDescription(source);
    }

    /**
     * @inheritDoc
     */
    public AuthenticatorDescription[] newArray(int size) {
        return new AuthenticatorDescription[size];
    }
}","[]","Optional[/**
 * Used to create the object from a parcel.
 */
]","\android\accounts\AuthenticatorDescription.java"
"type","true","false","false","false","true","String","null","[]","Optional[/**
 * The string that uniquely identifies an authenticator
 */
]","\android\accounts\AuthenticatorDescription.java"
"smallIconId","true","false","false","false","true","int","null","[]","Optional[/**
 * A resource id of a smaller icon for the authenticator
 */
]","\android\accounts\AuthenticatorDescription.java"
"labelId","true","false","false","false","true","int","null","[]","Optional[/**
 * A resource id of a label for the authenticator that is suitable for displaying
 */
]","\android\accounts\AuthenticatorDescription.java"
"iconId","true","false","false","false","true","int","null","[]","Optional[/**
 * A resource id of a icon for the authenticator
 */
]","\android\accounts\AuthenticatorDescription.java"
"accountPreferencesId","true","false","false","false","true","int","null","[]","Optional[/**
 * A resource id for a hierarchy of PreferenceScreen to be added to the settings page for the
 * account. See {@link AbstractAccountAuthenticator} for an example.
 */
]","\android\accounts\AuthenticatorDescription.java"
"packageName","true","false","false","false","true","String","null","[]","Optional[/**
 * The package name that can be used to lookup the resources from above.
 */
]","\android\accounts\AuthenticatorDescription.java"
"mEncoding","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\WebViewWorker.java"
"mPostId","false","false","false","false","false","long","null","[]","Optional.empty","\android\webkit\WebViewWorker.java"
"MSG_CACHE_TRANSACTION_TICKER","false","false","false","true","true","int","110","[]","Optional.empty","\android\webkit\WebViewWorker.java"
"THREAD_NAME","false","false","true","true","true","String","""WebViewWorkerThread""","[]","Optional.empty","\android\webkit\WebViewWorker.java"
"CACHE_TRANSACTION_TICKER_INTERVAL","false","false","true","true","true","int","60 * 1000","[]","Optional[// trigger transaction once a minute
]","\android\webkit\WebViewWorker.java"
"MSG_APPEND_CACHE","false","false","false","true","true","int","105","[]","Optional.empty","\android\webkit\WebViewWorker.java"
"mMimeType","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\WebViewWorker.java"
"MSG_TRIM_CACHE","false","false","false","true","true","int","108","[]","Optional.empty","\android\webkit\WebViewWorker.java"
"MSG_PAUSE_CACHE_TRANSACTION","false","false","false","true","true","int","111","[]","Optional.empty","\android\webkit\WebViewWorker.java"
"MSG_RESUME_CACHE_TRANSACTION","false","false","false","true","true","int","112","[]","Optional.empty","\android\webkit\WebViewWorker.java"
"mListener","false","false","false","false","false","LoadListener","null","[]","Optional.empty","\android\webkit\WebViewWorker.java"
"MSG_REMOVE_CACHE","false","false","false","true","true","int","107","[]","Optional.empty","\android\webkit\WebViewWorker.java"
"MSG_CREATE_CACHE","false","false","false","true","true","int","103","[]","Optional.empty","\android\webkit\WebViewWorker.java"
"MSG_SAVE_CACHE","false","false","false","true","true","int","106","[]","Optional.empty","\android\webkit\WebViewWorker.java"
"MSG_ADD_HTTPLOADER","false","false","false","true","true","int","102","[]","Optional.empty","\android\webkit\WebViewWorker.java"
"sWorkerHandler","false","false","true","true","false","WebViewWorker","null","[]","Optional.empty","\android\webkit\WebViewWorker.java"
"mStatusCode","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebViewWorker.java"
"mHeaders","false","false","false","false","false","Headers","null","[]","Optional.empty","\android\webkit\WebViewWorker.java"
"mCacheResultMap","false","false","true","true","false","Map<LoadListener,CacheManager.CacheResult>","new HashMap<LoadListener, CacheManager.CacheResult>()","[]","Optional.empty","\android\webkit\WebViewWorker.java"
"mCacheTickersBlocked","false","false","true","true","false","boolean","true","[]","Optional.empty","\android\webkit\WebViewWorker.java"
"MSG_ADD_STREAMLOADER","false","false","false","true","true","int","101","[]","Optional[// message ids
]","\android\webkit\WebViewWorker.java"
"mChunk","false","false","false","false","false","ByteArrayBuilder.Chunk","null","[]","Optional.empty","\android\webkit\WebViewWorker.java"
"MSG_CLEAR_CACHE","false","false","false","true","true","int","109","[]","Optional.empty","\android\webkit\WebViewWorker.java"
"MSG_UPDATE_CACHE_ENCODING","false","false","false","true","true","int","104","[]","Optional.empty","\android\webkit\WebViewWorker.java"
"mUrl","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\WebViewWorker.java"
"CHARACTERS","true","false","false","true","true","char","new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'm', 'p', ':', '/', '-', ' ' }","[]","Optional[/**
 * The characters that are used.
 *
 * @see KeyEvent#getMatch
 * @see #getAcceptedChars
 */
]","\android\text\method\DateTimeKeyListener.java"
"sInstance","false","false","true","true","false","DateTimeKeyListener","null","[]","Optional.empty","\android\text\method\DateTimeKeyListener.java"
"EXTRA_ALWAYS_RESET","true","false","false","true","true","String","""always_reset""","[]","Optional.empty","\com\android\internal\os\storage\ExternalStorageFormatter.java"
"mAlwaysReset","false","false","true","false","false","boolean","false","[]","Optional.empty","\com\android\internal\os\storage\ExternalStorageFormatter.java"
"mWakeLock","false","false","true","false","false","PowerManager.WakeLock","null","[]","Optional.empty","\com\android\internal\os\storage\ExternalStorageFormatter.java"
"mMountService","false","false","true","false","false","IMountService","null","[]","Optional[// Access using getMountService()
]","\com\android\internal\os\storage\ExternalStorageFormatter.java"
"mStorageManager","false","false","true","false","false","StorageManager","null","[]","Optional.empty","\com\android\internal\os\storage\ExternalStorageFormatter.java"
"mProgressDialog","false","false","true","false","false","ProgressDialog","null","[]","Optional.empty","\com\android\internal\os\storage\ExternalStorageFormatter.java"
"mStorageListener","false","false","false","false","false","StorageEventListener","new StorageEventListener() {

    @Override
    public void onStorageStateChanged(String path, String oldState, String newState) {
        Log.i(TAG, ""Received storage state changed notification that "" + path + "" changed state from "" + oldState + "" to "" + newState);
        updateProgressState();
    }
}","[]","Optional.empty","\com\android\internal\os\storage\ExternalStorageFormatter.java"
"FORMAT_AND_FACTORY_RESET","true","false","false","true","true","String","""com.android.internal.os.storage.FORMAT_AND_FACTORY_RESET""","[]","Optional.empty","\com\android\internal\os\storage\ExternalStorageFormatter.java"
"TAG","false","false","false","true","true","String","""ExternalStorageFormatter""","[]","Optional.empty","\com\android\internal\os\storage\ExternalStorageFormatter.java"
"mFactoryReset","false","false","true","false","false","boolean","false","[]","Optional.empty","\com\android\internal\os\storage\ExternalStorageFormatter.java"
"COMPONENT_NAME","true","false","false","true","true","ComponentName","new ComponentName(""android"", ExternalStorageFormatter.class.getName())","[]","Optional.empty","\com\android\internal\os\storage\ExternalStorageFormatter.java"
"FORMAT_ONLY","true","false","false","true","true","String","""com.android.internal.os.storage.FORMAT_ONLY""","[]","Optional.empty","\com\android\internal\os\storage\ExternalStorageFormatter.java"
"mDialog","false","false","true","false","false","AlertDialog","null","[]","Optional.empty","\com\android\internal\view\menu\MenuDialogHelper.java"
"mMenu","false","false","true","false","false","MenuBuilder","null","[]","Optional.empty","\com\android\internal\view\menu\MenuDialogHelper.java"
"mAdapter","false","false","true","false","false","ListAdapter","null","[]","Optional.empty","\com\android\internal\view\menu\MenuDialogHelper.java"
"STATS_SINCE_UNPLUGGED","true","false","false","true","true","int","3","[]","Optional[/**
 * Include only the run since the last time the device was unplugged in the stats.
 */
]","\android\os\BatteryStats.java"
"STATE_DATA_CONNECTION_MASK","true","false","false","true","true","int","0x000f000","[]","Optional[// Constants from DATA_CONNECTION_*
]","\android\os\BatteryStats.java"
"shift","true","false","false","false","true","int","null","[]","Optional.empty","\android\os\BatteryStats.java"
"BYTES_PER_GB","false","false","true","true","true","long","1073741824","[]","Optional[// 1024^3
]","\android\os\BatteryStats.java"
"DATA_CONNECTION_UMTS","true","false","false","true","true","int","3","[]","Optional.empty","\android\os\BatteryStats.java"
"DATA_CONNECTION_HSUPA","true","false","false","true","true","int","9","[]","Optional.empty","\android\os\BatteryStats.java"
"SENSOR","true","false","false","true","true","int","3","[]","Optional[/**
 * A constant indicating a sensor timer.
 */
]","\android\os\BatteryStats.java"
"NUM_DATA_CONNECTION_TYPES","true","false","false","true","true","int","DATA_CONNECTION_OTHER + 1","[]","Optional.empty","\android\os\BatteryStats.java"
"SENSOR_DATA","false","false","true","true","true","String","""sr""","[]","Optional.empty","\android\os\BatteryStats.java"
"DATA_CONNECTION_TIME_DATA","false","false","true","true","true","String","""dct""","[]","Optional.empty","\android\os\BatteryStats.java"
"batteryPlugType","true","false","false","false","false","byte","null","[]","Optional.empty","\android\os\BatteryStats.java"
"DATA_CONNECTION_NONE","true","false","false","true","true","int","0","[]","Optional.empty","\android\os\BatteryStats.java"
"STATS_CURRENT","true","false","false","true","true","int","2","[]","Optional[/**
 * Include only the current run in the stats.
 */
]","\android\os\BatteryStats.java"
"DATA_CONNECTION_GPRS","true","false","false","true","true","int","1","[]","Optional.empty","\android\os\BatteryStats.java"
"BATTERY_STATS_CHECKIN_VERSION","false","false","true","true","true","int","5","[]","Optional[/**
 * Bump the version on this if the checkin format changes.
 */
]","\android\os\BatteryStats.java"
"USER_ACTIVITY_DATA","false","false","true","true","true","String","""ua""","[]","Optional.empty","\android\os\BatteryStats.java"
"overTime","true","false","false","false","false","long","null","[]","Optional.empty","\android\os\BatteryStats.java"
"VIDEO_TURNED_ON","true","false","false","true","true","int","8","[]","Optional[/**
 * A constant indicating a video turn on timer
 */
]","\android\os\BatteryStats.java"
"SCREEN_BRIGHTNESS_DIM","true","false","false","true","true","int","1","[]","Optional.empty","\android\os\BatteryStats.java"
"STATE_WAKE_LOCK_FLAG","true","false","false","true","true","int","1 << 17","[]","Optional.empty","\android\os\BatteryStats.java"
"STATE_DATA_CONNECTION_SHIFT","true","false","false","true","true","int","12","[]","Optional.empty","\android\os\BatteryStats.java"
"STATE_AUDIO_ON_FLAG","true","false","false","true","true","int","1 << 19","[]","Optional.empty","\android\os\BatteryStats.java"
"DATA_CONNECTION_IDEN","true","false","false","true","true","int","11","[]","Optional.empty","\android\os\BatteryStats.java"
"mFormatter","false","false","true","false","true","Formatter","new Formatter(mFormatBuilder)","[]","Optional.empty","\android\os\BatteryStats.java"
"mWakeSum","true","false","false","false","false","long","null","[]","Optional.empty","\android\os\BatteryStats.java"
"SCREEN_BRIGHTNESS_MEDIUM","true","false","false","true","true","int","2","[]","Optional.empty","\android\os\BatteryStats.java"
"LOCAL_LOGV","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\os\BatteryStats.java"
"CMD_START","true","false","false","true","true","byte","1","[]","Optional.empty","\android\os\BatteryStats.java"
"SCREEN_BRIGHTNESS_LIGHT","true","false","false","true","true","int","3","[]","Optional.empty","\android\os\BatteryStats.java"
"GPS","true","false","false","true","true","int","-10000","[]","Optional[// Magic sensor number for the GPS.
]","\android\os\BatteryStats.java"
"STATE_PHONE_IN_CALL_FLAG","true","false","false","true","true","int","1 << 27","[]","Optional.empty","\android\os\BatteryStats.java"
"UID_DATA","false","false","true","true","true","String","""uid""","[]","Optional.empty","\android\os\BatteryStats.java"
"STATE_PHONE_SCANNING_FLAG","true","false","false","true","true","int","1 << 26","[]","Optional.empty","\android\os\BatteryStats.java"
"STATE_PHONE_STATE_SHIFT","true","false","false","true","true","int","8","[]","Optional.empty","\android\os\BatteryStats.java"
"STATS_LAST","true","false","false","true","true","int","1","[]","Optional[/**
 * Include only the last run in the stats.
 */
]","\android\os\BatteryStats.java"
"STATE_BRIGHTNESS_SHIFT","true","false","false","true","true","int","0","[]","Optional.empty","\android\os\BatteryStats.java"
"DATA_CONNECTION_CDMA","true","false","false","true","true","int","4","[]","Optional.empty","\android\os\BatteryStats.java"
"WIFI_LOCK_DATA","false","false","true","true","true","String","""wfl""","[]","Optional.empty","\android\os\BatteryStats.java"
"name","true","false","false","false","true","String","null","[]","Optional.empty","\android\os\BatteryStats.java"
"STATE_WIFI_FULL_LOCK_FLAG","true","false","false","true","true","int","1 << 23","[]","Optional.empty","\android\os\BatteryStats.java"
"DATA_CONNECTION_EDGE","true","false","false","true","true","int","2","[]","Optional.empty","\android\os\BatteryStats.java"
"STATE_WIFI_MULTICAST_ON_FLAG","true","false","false","true","true","int","1 << 21","[]","Optional.empty","\android\os\BatteryStats.java"
"STATE_WIFI_RUNNING_FLAG","true","false","false","true","true","int","1 << 24","[]","Optional.empty","\android\os\BatteryStats.java"
"BATTERY_LEVEL_DATA","false","false","true","true","true","String","""lv""","[]","Optional.empty","\android\os\BatteryStats.java"
"next","true","false","false","false","false","HistoryItem","null","[]","Optional.empty","\android\os\BatteryStats.java"
"WAKELOCK_DATA","false","false","true","true","true","String","""wl""","[]","Optional.empty","\android\os\BatteryStats.java"
"states","true","false","false","false","false","int","null","[]","Optional.empty","\android\os\BatteryStats.java"
"DATA_CONNECTION_HSDPA","true","false","false","true","true","int","8","[]","Optional.empty","\android\os\BatteryStats.java"
"SIGNAL_SCANNING_TIME_DATA","false","false","true","true","true","String","""sst""","[]","Optional.empty","\android\os\BatteryStats.java"
"batteryHealth","true","false","false","false","false","byte","null","[]","Optional.empty","\android\os\BatteryStats.java"
"mask","true","false","false","false","true","int","null","[]","Optional.empty","\android\os\BatteryStats.java"
"SCREEN_BRIGHTNESS_DARK","true","false","false","true","true","int","0","[]","Optional.empty","\android\os\BatteryStats.java"
"CMD_OVERFLOW","true","false","false","true","true","byte","2","[]","Optional.empty","\android\os\BatteryStats.java"
"NUM_SIGNAL_STRENGTH_BINS","true","false","false","true","true","int","5","[]","Optional.empty","\android\os\BatteryStats.java"
"batteryVoltage","true","false","false","false","false","char","null","[]","Optional.empty","\android\os\BatteryStats.java"
"STATE_PHONE_STATE_MASK","true","false","false","true","true","int","0x0000f00","[]","Optional[// Constants from ServiceState.STATE_*
]","\android\os\BatteryStats.java"
"time","true","false","false","false","false","long","null","[]","Optional.empty","\android\os\BatteryStats.java"
"KERNEL_WAKELOCK_DATA","false","false","true","true","true","String","""kwl""","[]","Optional.empty","\android\os\BatteryStats.java"
"FULL_WIFI_LOCK","true","false","false","true","true","int","5","[]","Optional[/**
 * A constant indicating a full wifi lock timer
 */
]","\android\os\BatteryStats.java"
"SIGNAL_STRENGTH_GOOD","true","false","false","true","true","int","3","[]","Optional.empty","\android\os\BatteryStats.java"
"MISC_DATA","false","false","true","true","true","String","""m""","[]","Optional.empty","\android\os\BatteryStats.java"
"STATE_GPS_ON_FLAG","true","false","false","true","true","int","1 << 28","[]","Optional.empty","\android\os\BatteryStats.java"
"WIFI_MULTICAST_ENABLED","true","false","false","true","true","int","7","[]","Optional[/**
 * A constant indicating a wifi multicast timer
 */
]","\android\os\BatteryStats.java"
"mWakeStart","true","false","false","false","false","long","null","[]","Optional.empty","\android\os\BatteryStats.java"
"batteryTemperature","true","false","false","false","false","char","null","[]","Optional.empty","\android\os\BatteryStats.java"
"STATE_WIFI_ON_FLAG","true","false","false","true","true","int","1 << 25","[]","Optional.empty","\android\os\BatteryStats.java"
"type","true","false","false","false","false","int","null","[]","Optional.empty","\android\os\BatteryStats.java"
"CMD_UPDATE","true","false","false","true","true","byte","0","[]","Optional.empty","\android\os\BatteryStats.java"
"PROCESS_DATA","false","false","true","true","true","String","""pr""","[]","Optional.empty","\android\os\BatteryStats.java"
"SIGNAL_STRENGTH_TIME_DATA","false","false","true","true","true","String","""sgt""","[]","Optional.empty","\android\os\BatteryStats.java"
"SCREEN_BRIGHTNESS_DATA","false","false","true","true","true","String","""br""","[]","Optional.empty","\android\os\BatteryStats.java"
"cmd","true","false","false","false","false","byte","null","[]","Optional.empty","\android\os\BatteryStats.java"
"DATA_CONNECTION_HSPA","true","false","false","true","true","int","10","[]","Optional.empty","\android\os\BatteryStats.java"
"STATS_SINCE_CHARGED","true","false","false","true","true","int","0","[]","Optional[/**
 * Include all of the data in the stats, including previously saved data.
 */
]","\android\os\BatteryStats.java"
"NUM_USER_ACTIVITY_TYPES","true","false","false","true","true","int","7","[]","Optional.empty","\android\os\BatteryStats.java"
"BYTES_PER_MB","false","false","true","true","true","long","1048576","[]","Optional[// 1024^2
]","\android\os\BatteryStats.java"
"SCAN_WIFI_LOCK","true","false","false","true","true","int","6","[]","Optional[/**
 * A constant indicating a scan wifi lock timer
 */
]","\android\os\BatteryStats.java"
"WAKE_TYPE_WINDOW","true","false","false","true","true","int","2","[]","Optional[/**
 * A constant indicating a window wake lock timer.
 */
]","\android\os\BatteryStats.java"
"TYPE_WAKE","true","false","false","true","true","int","1","[]","Optional.empty","\android\os\BatteryStats.java"
"SIGNAL_STRENGTH_MODERATE","true","false","false","true","true","int","2","[]","Optional.empty","\android\os\BatteryStats.java"
"SIGNAL_STRENGTH_NONE_OR_UNKNOWN","true","false","false","true","true","int","0","[]","Optional.empty","\android\os\BatteryStats.java"
"batteryLevel","true","false","false","false","false","byte","null","[]","Optional.empty","\android\os\BatteryStats.java"
"SIGNAL_STRENGTH_NAMES","false","false","false","true","true","String","{ ""none"", ""poor"", ""moderate"", ""good"", ""great"" }","[]","Optional.empty","\android\os\BatteryStats.java"
"STATE_VIDEO_ON_FLAG","true","false","false","true","true","int","1 << 18","[]","Optional.empty","\android\os\BatteryStats.java"
"TYPE_CPU","true","false","false","true","true","int","2","[]","Optional.empty","\android\os\BatteryStats.java"
"mFormatBuilder","false","false","true","false","true","StringBuilder","new StringBuilder(32)","[]","Optional.empty","\android\os\BatteryStats.java"
"usedTime","true","false","false","false","false","long","null","[]","Optional.empty","\android\os\BatteryStats.java"
"AUDIO_TURNED_ON","true","false","false","true","true","int","7","[]","Optional[/**
 * A constant indicating an audio turn on timer
 */
]","\android\os\BatteryStats.java"
"APK_DATA","false","false","true","true","true","String","""apk""","[]","Optional.empty","\android\os\BatteryStats.java"
"MOST_INTERESTING_STATES","true","false","false","true","true","int","STATE_BATTERY_PLUGGED_FLAG | STATE_SCREEN_ON_FLAG | STATE_GPS_ON_FLAG | STATE_PHONE_IN_CALL_FLAG","[]","Optional.empty","\android\os\BatteryStats.java"
"DATA_CONNECTION_COUNT_DATA","false","false","true","true","true","String","""dcc""","[]","Optional.empty","\android\os\BatteryStats.java"
"DATA_CONNECTION_EVDO_0","true","false","false","true","true","int","5","[]","Optional.empty","\android\os\BatteryStats.java"
"NETWORK_DATA","false","false","true","true","true","String","""nt""","[]","Optional.empty","\android\os\BatteryStats.java"
"SIGNAL_STRENGTH_COUNT_DATA","false","false","true","true","true","String","""sgc""","[]","Optional.empty","\android\os\BatteryStats.java"
"WIFI_RUNNING","true","false","false","true","true","int","4","[]","Optional[/**
 * A constant indicating a a wifi running timer
 */
]","\android\os\BatteryStats.java"
"SIGNAL_STRENGTH_GREAT","true","false","false","true","true","int","4","[]","Optional.empty","\android\os\BatteryStats.java"
"BYTES_PER_KB","false","false","true","true","true","long","1024","[]","Optional.empty","\android\os\BatteryStats.java"
"STATE_SIGNAL_STRENGTH_MASK","true","false","false","true","true","int","0x00000f0","[]","Optional[// Constants from SIGNAL_STRENGTH_*
]","\android\os\BatteryStats.java"
"SIGNAL_STRENGTH_POOR","true","false","false","true","true","int","1","[]","Optional.empty","\android\os\BatteryStats.java"
"BATTERY_DATA","false","false","true","true","true","String","""bt""","[]","Optional.empty","\android\os\BatteryStats.java"
"WAKE_TYPE_PARTIAL","true","false","false","true","true","int","0","[]","Optional[/**
 * A constant indicating a partial wake lock timer.
 */
]","\android\os\BatteryStats.java"
"STATE_BLUETOOTH_ON_FLAG","true","false","false","true","true","int","1 << 20","[]","Optional.empty","\android\os\BatteryStats.java"
"DATA_CONNECTION_EVDO_B","true","false","false","true","true","int","12","[]","Optional.empty","\android\os\BatteryStats.java"
"DATA_CONNECTION_EVDO_A","true","false","false","true","true","int","6","[]","Optional.empty","\android\os\BatteryStats.java"
"SCREEN_BRIGHTNESS_NAMES","false","false","false","true","true","String","{ ""dark"", ""dim"", ""medium"", ""light"", ""bright"" }","[]","Optional.empty","\android\os\BatteryStats.java"
"SCREEN_BRIGHTNESS_BRIGHT","true","false","false","true","true","int","4","[]","Optional.empty","\android\os\BatteryStats.java"
"DATA_CONNECTION_1xRTT","true","false","false","true","true","int","7","[]","Optional.empty","\android\os\BatteryStats.java"
"WAKE_TYPE_FULL","true","false","false","true","true","int","1","[]","Optional[/**
 * A constant indicating a full wake lock timer.
 */
]","\android\os\BatteryStats.java"
"values","true","false","false","false","true","String","null","[]","Optional.empty","\android\os\BatteryStats.java"
"HISTORY_STATE_DESCRIPTIONS","true","false","false","true","true","BitDescription","new BitDescription[] { new BitDescription(HistoryItem.STATE_BATTERY_PLUGGED_FLAG, ""plugged""), new BitDescription(HistoryItem.STATE_SCREEN_ON_FLAG, ""screen""), new BitDescription(HistoryItem.STATE_GPS_ON_FLAG, ""gps""), new BitDescription(HistoryItem.STATE_PHONE_IN_CALL_FLAG, ""phone_in_call""), new BitDescription(HistoryItem.STATE_PHONE_SCANNING_FLAG, ""phone_scanning""), new BitDescription(HistoryItem.STATE_WIFI_ON_FLAG, ""wifi""), new BitDescription(HistoryItem.STATE_WIFI_RUNNING_FLAG, ""wifi_running""), new BitDescription(HistoryItem.STATE_WIFI_FULL_LOCK_FLAG, ""wifi_full_lock""), new BitDescription(HistoryItem.STATE_WIFI_SCAN_LOCK_FLAG, ""wifi_scan_lock""), new BitDescription(HistoryItem.STATE_WIFI_MULTICAST_ON_FLAG, ""wifi_multicast""), new BitDescription(HistoryItem.STATE_BLUETOOTH_ON_FLAG, ""bluetooth""), new BitDescription(HistoryItem.STATE_AUDIO_ON_FLAG, ""audio""), new BitDescription(HistoryItem.STATE_VIDEO_ON_FLAG, ""video""), new BitDescription(HistoryItem.STATE_WAKE_LOCK_FLAG, ""wake_lock""), new BitDescription(HistoryItem.STATE_SENSOR_ON_FLAG, ""sensor""), new BitDescription(HistoryItem.STATE_BRIGHTNESS_MASK, HistoryItem.STATE_BRIGHTNESS_SHIFT, ""brightness"", SCREEN_BRIGHTNESS_NAMES), new BitDescription(HistoryItem.STATE_SIGNAL_STRENGTH_MASK, HistoryItem.STATE_SIGNAL_STRENGTH_SHIFT, ""signal_strength"", SIGNAL_STRENGTH_NAMES), new BitDescription(HistoryItem.STATE_PHONE_STATE_MASK, HistoryItem.STATE_PHONE_STATE_SHIFT, ""phone_state"", new String[] { ""in"", ""out"", ""emergency"", ""off"" }), new BitDescription(HistoryItem.STATE_DATA_CONNECTION_MASK, HistoryItem.STATE_DATA_CONNECTION_SHIFT, ""data_conn"", DATA_CONNECTION_NAMES) }","[]","Optional.empty","\android\os\BatteryStats.java"
"STATE_WIFI_SCAN_LOCK_FLAG","true","false","false","true","true","int","1 << 22","[]","Optional.empty","\android\os\BatteryStats.java"
"STATE_BRIGHTNESS_MASK","true","false","false","true","true","int","0x000000f","[]","Optional[// Constants from SCREEN_BRIGHTNESS_*
]","\android\os\BatteryStats.java"
"STATE_SCREEN_ON_FLAG","true","false","false","true","true","int","1 << 29","[]","Optional.empty","\android\os\BatteryStats.java"
"STATE_SENSOR_ON_FLAG","true","false","false","true","true","int","1 << 16","[]","Optional.empty","\android\os\BatteryStats.java"
"DATA_CONNECTION_NAMES","false","false","false","true","true","String","{ ""none"", ""gprs"", ""edge"", ""umts"", ""cdma"", ""evdo_0"", ""evdo_A"", ""1xrtt"", ""hsdpa"", ""hsupa"", ""hspa"", ""iden"", ""evdo_b"", ""other"" }","[]","Optional.empty","\android\os\BatteryStats.java"
"STATE_SIGNAL_STRENGTH_SHIFT","true","false","false","true","true","int","4","[]","Optional.empty","\android\os\BatteryStats.java"
"DATA_CONNECTION_OTHER","true","false","false","true","true","int","13","[]","Optional.empty","\android\os\BatteryStats.java"
"NUM_SCREEN_BRIGHTNESS_BINS","true","false","false","true","true","int","5","[]","Optional.empty","\android\os\BatteryStats.java"
"STATE_BATTERY_PLUGGED_FLAG","true","false","false","true","true","int","1 << 30","[]","Optional.empty","\android\os\BatteryStats.java"
"batteryStatus","true","false","false","false","false","byte","null","[]","Optional.empty","\android\os\BatteryStats.java"
"USER_ACTIVITY_TYPES","false","false","false","true","true","String","{ ""other"", ""cheek"", ""touch"", ""long_touch"", ""touch_up"", ""button"", ""unknown"" }","[]","Optional[/**
 * Note that these must match the constants in android.os.LocalPowerManager.
 */
]","\android\os\BatteryStats.java"
"STAT_NAMES","false","false","true","true","true","String","{ ""t"", ""l"", ""c"", ""u"" }","[]","Optional[// and ""unplugged"". They were shortened for efficiency sake.
]","\android\os\BatteryStats.java"
"mNative","false","false","true","false","true","int","null","[]","Optional.empty","\android\content\res\XmlBlock.java"
"mStarted","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\content\res\XmlBlock.java"
"mOpen","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\content\res\XmlBlock.java"
"mDecNextDepth","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\content\res\XmlBlock.java"
"mStrings","false","false","true","false","true","StringBlock","null","[]","Optional.empty","\android\content\res\XmlBlock.java"
"mParseState","false","false","false","false","false","int","null","[]","Optional[/*package*/
]","\android\content\res\XmlBlock.java"
"mAssets","false","false","true","false","true","AssetManager","null","[]","Optional.empty","\android\content\res\XmlBlock.java"
"mEventType","false","false","true","false","false","int","START_DOCUMENT","[]","Optional.empty","\android\content\res\XmlBlock.java"
"mOpenCount","false","false","true","false","false","int","1","[]","Optional.empty","\android\content\res\XmlBlock.java"
"mDepth","false","false","true","false","false","int","0","[]","Optional.empty","\android\content\res\XmlBlock.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\content\res\XmlBlock.java"
"mBlock","false","false","true","false","true","XmlBlock","null","[]","Optional.empty","\android\content\res\XmlBlock.java"
"mFd","false","false","true","false","true","ParcelFileDescriptor","null","[]","Optional.empty","\android\os\ParcelFileDescriptor.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<ParcelFileDescriptor>","new Parcelable.Creator<ParcelFileDescriptor>() {

    public ParcelFileDescriptor createFromParcel(Parcel in) {
        return in.readFileDescriptor();
    }

    public ParcelFileDescriptor[] newArray(int size) {
        return new ParcelFileDescriptor[size];
    }
}","[]","Optional.empty","\android\os\ParcelFileDescriptor.java"
"MODE_WORLD_WRITEABLE","true","false","false","true","true","int","0x00000002","[]","Optional[/**
 * For use with {@link #open}: if {@link #MODE_CREATE} has been supplied
 * and this file doesn't already exist, then create the file with
 * permissions such that any application can write it.
 */
]","\android\os\ParcelFileDescriptor.java"
"MODE_WORLD_READABLE","true","false","false","true","true","int","0x00000001","[]","Optional[/**
 * For use with {@link #open}: if {@link #MODE_CREATE} has been supplied
 * and this file doesn't already exist, then create the file with
 * permissions such that any application can read it.
 */
]","\android\os\ParcelFileDescriptor.java"
"MODE_CREATE","true","false","false","true","true","int","0x08000000","[]","Optional[/**
 * For use with {@link #open}: create the file if it doesn't already exist.
 */
]","\android\os\ParcelFileDescriptor.java"
"MODE_READ_WRITE","true","false","false","true","true","int","0x30000000","[]","Optional[/**
 * For use with {@link #open}: open the file with read and write access.
 */
]","\android\os\ParcelFileDescriptor.java"
"MODE_READ_ONLY","true","false","false","true","true","int","0x10000000","[]","Optional[/**
 * For use with {@link #open}: open the file with read-only access.
 */
]","\android\os\ParcelFileDescriptor.java"
"mClosed","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\os\ParcelFileDescriptor.java"
"MODE_TRUNCATE","true","false","false","true","true","int","0x04000000","[]","Optional[/**
 * For use with {@link #open}: erase contents of file when opening.
 */
]","\android\os\ParcelFileDescriptor.java"
"MODE_APPEND","true","false","false","true","true","int","0x02000000","[]","Optional[/**
 * For use with {@link #open}: append to end of file while writing.
 */
]","\android\os\ParcelFileDescriptor.java"
"mParcelDescriptor","false","false","true","false","true","ParcelFileDescriptor","null","[]","Optional[// in this particular case fd.close might be invoked twice.
]","\android\os\ParcelFileDescriptor.java"
"mFileDescriptor","false","false","true","false","true","FileDescriptor","null","[]","Optional.empty","\android\os\ParcelFileDescriptor.java"
"MODE_WRITE_ONLY","true","false","false","true","true","int","0x20000000","[]","Optional[/**
 * For use with {@link #open}: open the file with write-only access.
 */
]","\android\os\ParcelFileDescriptor.java"
"mProportion","false","false","true","false","true","float","null","[]","Optional.empty","\android\text\style\RelativeSizeSpan.java"
"INSTALL_LOCATION_PREFER_EXTERNAL","true","false","false","true","true","int","2","[]","Optional[/**
 * Constant corresponding to <code>preferExternal</code> in
 * the {@link android.R.attr#installLocation} attribute.
 * @hide
 */
]","\android\content\pm\PackageInfo.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<PackageInfo>","new Parcelable.Creator<PackageInfo>() {

    public PackageInfo createFromParcel(Parcel source) {
        return new PackageInfo(source);
    }

    public PackageInfo[] newArray(int size) {
        return new PackageInfo[size];
    }
}","[]","Optional.empty","\android\content\pm\PackageInfo.java"
"firstInstallTime","true","false","false","false","false","long","null","[]","Optional[/**
 * The time at which the app was first installed.  Units are as
 * per {@link System#currentTimeMillis()}.
 */
]","\android\content\pm\PackageInfo.java"
"sharedUserId","true","false","false","false","false","String","null","[]","Optional[/**
 * The shared user ID name of this package, as specified by the &lt;manifest&gt;
 * tag's {@link android.R.styleable#AndroidManifest_sharedUserId sharedUserId}
 * attribute.
 */
]","\android\content\pm\PackageInfo.java"
"services","true","false","false","false","false","ServiceInfo","null","[]","Optional[/**
 * Array of all {@link android.R.styleable#AndroidManifestService
 * &lt;service&gt;} tags included under &lt;application&gt;,
 * or null if there were none.  This is only filled in if the flag
 * {@link PackageManager#GET_SERVICES} was set.
 */
]","\android\content\pm\PackageInfo.java"
"INSTALL_LOCATION_AUTO","true","false","false","true","true","int","0","[]","Optional[/**
 * Constant corresponding to <code>auto</code> in
 * the {@link android.R.attr#installLocation} attribute.
 * @hide
 */
]","\android\content\pm\PackageInfo.java"
"configPreferences","true","false","false","false","false","ConfigurationInfo","null","[]","Optional[/**
 * Application specified preferred configuration
 * {@link android.R.styleable#AndroidManifestUsesConfiguration
 * &lt;uses-configuration&gt;} tags included under &lt;manifest&gt;,
 * or null if there were none. This is only filled in if the flag
 * {@link PackageManager#GET_CONFIGURATIONS} was set.
 */
]","\android\content\pm\PackageInfo.java"
"versionName","true","false","false","false","false","String","null","[]","Optional[/**
 * The version name of this package, as specified by the &lt;manifest&gt;
 * tag's {@link android.R.styleable#AndroidManifest_versionName versionName}
 * attribute.
 */
]","\android\content\pm\PackageInfo.java"
"INSTALL_LOCATION_INTERNAL_ONLY","true","false","false","true","true","int","1","[]","Optional[/**
 * Constant corresponding to <code>internalOnly</code> in
 * the {@link android.R.attr#installLocation} attribute.
 * @hide
 */
]","\android\content\pm\PackageInfo.java"
"lastUpdateTime","true","false","false","false","false","long","null","[]","Optional[/**
 * The time at which the app was last updated.  Units are as
 * per {@link System#currentTimeMillis()}.
 */
]","\android\content\pm\PackageInfo.java"
"gids","true","false","false","false","false","int","null","[]","Optional[/**
 * All kernel group-IDs that have been assigned to this package.
 * This is only filled in if the flag {@link PackageManager#GET_GIDS} was set.
 */
]","\android\content\pm\PackageInfo.java"
"INSTALL_LOCATION_UNSPECIFIED","true","false","false","true","true","int","-1","[]","Optional[/**
 * Constant corresponding to <code>auto</code> in
 * the {@link android.R.attr#installLocation} attribute.
 * @hide
 */
]","\android\content\pm\PackageInfo.java"
"sharedUserLabel","true","false","false","false","false","int","null","[]","Optional[/**
 * The shared user ID label of this package, as specified by the &lt;manifest&gt;
 * tag's {@link android.R.styleable#AndroidManifest_sharedUserLabel sharedUserLabel}
 * attribute.
 */
]","\android\content\pm\PackageInfo.java"
"signatures","true","false","false","false","false","Signature","null","[]","Optional[/**
 * Array of all signatures read from the package file.  This is only filled
 * in if the flag {@link PackageManager#GET_SIGNATURES} was set.
 */
]","\android\content\pm\PackageInfo.java"
"permissions","true","false","false","false","false","PermissionInfo","null","[]","Optional[/**
 * Array of all {@link android.R.styleable#AndroidManifestPermission
 * &lt;permission&gt;} tags included under &lt;manifest&gt;,
 * or null if there were none.  This is only filled in if the flag
 * {@link PackageManager#GET_PERMISSIONS} was set.
 */
]","\android\content\pm\PackageInfo.java"
"instrumentation","true","false","false","false","false","InstrumentationInfo","null","[]","Optional[/**
 * Array of all {@link android.R.styleable#AndroidManifestInstrumentation
 * &lt;instrumentation&gt;} tags included under &lt;manifest&gt;,
 * or null if there were none.  This is only filled in if the flag
 * {@link PackageManager#GET_INSTRUMENTATION} was set.
 */
]","\android\content\pm\PackageInfo.java"
"installLocation","true","false","false","false","false","int","INSTALL_LOCATION_INTERNAL_ONLY","[]","Optional[/**
 * The install location requested by the activity.  From the
 * {@link android.R.attr#installLocation} attribute, one of
 * {@link #INSTALL_LOCATION_AUTO},
 * {@link #INSTALL_LOCATION_INTERNAL_ONLY},
 * {@link #INSTALL_LOCATION_PREFER_EXTERNAL}
 * @hide
 */
]","\android\content\pm\PackageInfo.java"
"requestedPermissions","true","false","false","false","false","String","null","[]","Optional[/**
 * Array of all {@link android.R.styleable#AndroidManifestUsesPermission
 * &lt;uses-permission&gt;} tags included under &lt;manifest&gt;,
 * or null if there were none.  This is only filled in if the flag
 * {@link PackageManager#GET_PERMISSIONS} was set.  This list includes
 * all permissions requested, even those that were not granted or known
 * by the system at install time.
 */
]","\android\content\pm\PackageInfo.java"
"reqFeatures","true","false","false","false","false","FeatureInfo","null","[]","Optional[/**
 * The features that this application has said it requires.
 */
]","\android\content\pm\PackageInfo.java"
"applicationInfo","true","false","false","false","false","ApplicationInfo","null","[]","Optional[/**
 * Information collected from the &lt;application&gt; tag, or null if
 * there was none.
 */
]","\android\content\pm\PackageInfo.java"
"receivers","true","false","false","false","false","ActivityInfo","null","[]","Optional[/**
 * Array of all {@link android.R.styleable#AndroidManifestReceiver
 * &lt;receiver&gt;} tags included under &lt;application&gt;,
 * or null if there were none.  This is only filled in if the flag
 * {@link PackageManager#GET_RECEIVERS} was set.
 */
]","\android\content\pm\PackageInfo.java"
"packageName","true","false","false","false","false","String","null","[]","Optional[/**
 * The name of this package.  From the &lt;manifest&gt; tag's ""name""
 * attribute.
 */
]","\android\content\pm\PackageInfo.java"
"versionCode","true","false","false","false","false","int","null","[]","Optional[/**
 * The version number of this package, as specified by the &lt;manifest&gt;
 * tag's {@link android.R.styleable#AndroidManifest_versionCode versionCode}
 * attribute.
 */
]","\android\content\pm\PackageInfo.java"
"activities","true","false","false","false","false","ActivityInfo","null","[]","Optional[/**
 * Array of all {@link android.R.styleable#AndroidManifestActivity
 * &lt;activity&gt;} tags included under &lt;application&gt;,
 * or null if there were none.  This is only filled in if the flag
 * {@link PackageManager#GET_ACTIVITIES} was set.
 */
]","\android\content\pm\PackageInfo.java"
"providers","true","false","false","false","false","ProviderInfo","null","[]","Optional[/**
 * Array of all {@link android.R.styleable#AndroidManifestProvider
 * &lt;provider&gt;} tags included under &lt;application&gt;,
 * or null if there were none.  This is only filled in if the flag
 * {@link PackageManager#GET_PROVIDERS} was set.
 */
]","\android\content\pm\PackageInfo.java"
"mTickerStopped","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\DigitalClock.java"
"mTicker","false","false","true","false","false","Runnable","null","[]","Optional.empty","\android\widget\DigitalClock.java"
"mCalendar","false","false","false","false","false","Calendar","null","[]","Optional.empty","\android\widget\DigitalClock.java"
"mFormat","false","false","false","false","false","String","null","[]","Optional.empty","\android\widget\DigitalClock.java"
"m12","false","false","true","true","true","String","""h:mm:ss aa""","[]","Optional.empty","\android\widget\DigitalClock.java"
"m24","false","false","true","true","true","String","""k:mm:ss""","[]","Optional.empty","\android\widget\DigitalClock.java"
"mHandler","false","false","true","false","false","Handler","null","[]","Optional.empty","\android\widget\DigitalClock.java"
"mFormatChangeObserver","false","false","true","false","false","FormatChangeObserver","null","[]","Optional.empty","\android\widget\DigitalClock.java"
"handler","true","false","false","false","false","Handler","null","[]","Optional.empty","\android\content\AsyncQueryHandler.java"
"selection","true","false","false","false","false","String","null","[]","Optional.empty","\android\content\AsyncQueryHandler.java"
"orderBy","true","false","false","false","false","String","null","[]","Optional.empty","\android\content\AsyncQueryHandler.java"
"result","true","false","false","false","false","Object","null","[]","Optional.empty","\android\content\AsyncQueryHandler.java"
"projection","true","false","false","false","false","String","null","[]","Optional.empty","\android\content\AsyncQueryHandler.java"
"cookie","true","false","false","false","false","Object","null","[]","Optional.empty","\android\content\AsyncQueryHandler.java"
"mResolver","false","false","false","false","true","WeakReference<ContentResolver>","null","[]","Optional[/* package */
]","\android\content\AsyncQueryHandler.java"
"mWorkerThreadHandler","false","false","true","false","false","Handler","null","[]","Optional.empty","\android\content\AsyncQueryHandler.java"
"EVENT_ARG_UPDATE","false","false","true","true","true","int","3","[]","Optional.empty","\android\content\AsyncQueryHandler.java"
"selectionArgs","true","false","false","false","false","String","null","[]","Optional.empty","\android\content\AsyncQueryHandler.java"
"uri","true","false","false","false","false","Uri","null","[]","Optional.empty","\android\content\AsyncQueryHandler.java"
"TAG","false","false","true","true","true","String","""AsyncQuery""","[]","Optional.empty","\android\content\AsyncQueryHandler.java"
"EVENT_ARG_INSERT","false","false","true","true","true","int","2","[]","Optional.empty","\android\content\AsyncQueryHandler.java"
"EVENT_ARG_QUERY","false","false","true","true","true","int","1","[]","Optional.empty","\android\content\AsyncQueryHandler.java"
"localLOGV","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\content\AsyncQueryHandler.java"
"values","true","false","false","false","false","ContentValues","null","[]","Optional.empty","\android\content\AsyncQueryHandler.java"
"sLooper","false","false","true","true","false","Looper","null","[]","Optional.empty","\android\content\AsyncQueryHandler.java"
"EVENT_ARG_DELETE","false","false","true","true","true","int","4","[]","Optional.empty","\android\content\AsyncQueryHandler.java"
"mMainHandler","false","false","true","false","true","Handler","null","[]","Optional.empty","\android\accounts\AccountManager.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\android\accounts\AccountManager.java"
"ERROR_CODE_INVALID_RESPONSE","true","false","false","true","true","int","5","[]","Optional.empty","\android\accounts\AccountManager.java"
"KEY_PASSWORD","true","false","false","true","true","String","""password""","[]","Optional[/**
 * Bundle key used to supply the password directly in options to
 * {@link #confirmCredentials}, rather than prompting the user with
 * the standard password prompt.
 */
]","\android\accounts\AccountManager.java"
"mFeatures","false","false","false","false","true","String","null","[]","Optional.empty","\android\accounts\AccountManager.java"
"KEY_ERROR_MESSAGE","true","false","false","true","true","String","""errorMessage""","[]","Optional.empty","\android\accounts\AccountManager.java"
"AUTHENTICATOR_META_DATA_NAME","true","false","false","true","true","String","""android.accounts.AccountAuthenticator""","[]","Optional.empty","\android\accounts\AccountManager.java"
"KEY_ACCOUNT_AUTHENTICATOR_RESPONSE","true","false","false","true","true","String","""accountAuthenticatorResponse""","[]","Optional.empty","\android\accounts\AccountManager.java"
"ERROR_CODE_UNSUPPORTED_OPERATION","true","false","false","true","true","int","6","[]","Optional.empty","\android\accounts\AccountManager.java"
"mAuthTokenType","false","false","false","false","true","String","null","[]","Optional.empty","\android\accounts\AccountManager.java"
"mFuture","false","false","false","false","false","AccountManagerFuture<Bundle>","null","[]","Optional.empty","\android\accounts\AccountManager.java"
"mLoginOptions","false","false","false","false","true","Bundle","null","[]","Optional.empty","\android\accounts\AccountManager.java"
"KEY_AUTHENTICATOR_TYPES","true","false","false","true","true","String","""authenticator_types""","[]","Optional.empty","\android\accounts\AccountManager.java"
"mActivity","false","false","false","false","true","Activity","null","[]","Optional.empty","\android\accounts\AccountManager.java"
"KEY_ERROR_CODE","true","false","false","true","true","String","""errorCode""","[]","Optional.empty","\android\accounts\AccountManager.java"
"KEY_ACCOUNT_NAME","true","false","false","true","true","String","""authAccount""","[]","Optional[/**
 * Bundle key used for the {@link String} account name in results
 * from methods which return information about a particular account.
 */
]","\android\accounts\AccountManager.java"
"KEY_ACCOUNTS","true","false","false","true","true","String","""accounts""","[]","Optional.empty","\android\accounts\AccountManager.java"
"KEY_BOOLEAN_RESULT","true","false","false","true","true","String","""booleanResult""","[]","Optional.empty","\android\accounts\AccountManager.java"
"KEY_INTENT","true","false","false","true","true","String","""intent""","[]","Optional[/**
 * Bundle key used for an {@link Intent} in results from methods that
 * may require the caller to interact with the user.  The Intent can
 * be used to start the corresponding user interface activity.
 */
]","\android\accounts\AccountManager.java"
"mMyCallback","false","false","false","false","true","AccountManagerCallback<Bundle>","null","[]","Optional.empty","\android\accounts\AccountManager.java"
"KEY_AUTH_FAILED_MESSAGE","true","false","false","true","true","String","""authFailedMessage""","[]","Optional.empty","\android\accounts\AccountManager.java"
"LOGIN_ACCOUNTS_CHANGED_ACTION","true","false","false","true","true","String","""android.accounts.LOGIN_ACCOUNTS_CHANGED""","[]","Optional[/**
 * Action sent as a broadcast Intent by the AccountsService
 * when accounts are added, accounts are removed, or an
 * account's credentials (saved password, etc) are changed.
 *
 * @see #addOnAccountsUpdatedListener
 */
]","\android\accounts\AccountManager.java"
"mAddAccountOptions","false","false","false","false","true","Bundle","null","[]","Optional.empty","\android\accounts\AccountManager.java"
"KEY_AUTH_TOKEN_LABEL","true","false","false","true","true","String","""authTokenLabelKey""","[]","Optional.empty","\android\accounts\AccountManager.java"
"KEY_AUTHTOKEN","true","false","false","true","true","String","""authtoken""","[]","Optional[/**
 * Bundle key used for the auth token value in results
 * from {@link #getAuthToken} and friends.
 */
]","\android\accounts\AccountManager.java"
"mCallback","false","false","false","false","true","AccountManagerCallback<T>","null","[]","Optional.empty","\android\accounts\AccountManager.java"
"ERROR_CODE_REMOTE_EXCEPTION","true","false","false","true","true","int","1","[]","Optional.empty","\android\accounts\AccountManager.java"
"mAccountsChangedBroadcastReceiver","false","false","true","false","true","BroadcastReceiver","new BroadcastReceiver() {

    public void onReceive(final Context context, final Intent intent) {
        final Account[] accounts = getAccounts();
        // send the result to the listeners
        synchronized (mAccountsUpdatedListeners) {
            for (Map.Entry<OnAccountsUpdateListener, Handler> entry : mAccountsUpdatedListeners.entrySet()) {
                postToHandler(entry.getValue(), entry.getKey(), accounts);
            }
        }
    }
}","[]","Optional[/**
 * BroadcastReceiver that listens for the LOGIN_ACCOUNTS_CHANGED_ACTION intent
 * so that it can read the updated list of accounts and send them to the listener
 * in mAccountsUpdatedListeners.
 */
]","\android\accounts\AccountManager.java"
"mHandler","false","false","false","false","true","Handler","null","[]","Optional.empty","\android\accounts\AccountManager.java"
"mResponse","true","false","false","false","true","IAccountManagerResponse","null","[]","Optional.empty","\android\accounts\AccountManager.java"
"TAG","false","false","true","true","true","String","""AccountManager""","[]","Optional.empty","\android\accounts\AccountManager.java"
"ERROR_CODE_BAD_REQUEST","true","false","false","true","true","int","8","[]","Optional.empty","\android\accounts\AccountManager.java"
"ERROR_CODE_CANCELED","true","false","false","true","true","int","4","[]","Optional.empty","\android\accounts\AccountManager.java"
"ERROR_CODE_BAD_ARGUMENTS","true","false","false","true","true","int","7","[]","Optional.empty","\android\accounts\AccountManager.java"
"KEY_USERDATA","true","false","false","true","true","String","""userdata""","[]","Optional.empty","\android\accounts\AccountManager.java"
"ERROR_CODE_NETWORK_ERROR","true","false","false","true","true","int","3","[]","Optional.empty","\android\accounts\AccountManager.java"
"AUTHENTICATOR_ATTRIBUTES_NAME","true","false","false","true","true","String","""account-authenticator""","[]","Optional.empty","\android\accounts\AccountManager.java"
"mNumAccounts","false","false","true","false","false","int","0","[]","Optional.empty","\android\accounts\AccountManager.java"
"KEY_ACCOUNT_TYPE","true","false","false","true","true","String","""accountType""","[]","Optional[/**
 * Bundle key used for the {@link String} account type in results
 * from methods which return information about a particular account.
 */
]","\android\accounts\AccountManager.java"
"mService","false","false","true","false","true","IAccountManager","null","[]","Optional.empty","\android\accounts\AccountManager.java"
"mAccountsUpdatedListeners","false","false","true","false","true","HashMap<OnAccountsUpdateListener,Handler>","Maps.newHashMap()","[]","Optional.empty","\android\accounts\AccountManager.java"
"KEY_ACCOUNT_MANAGER_RESPONSE","true","false","false","true","true","String","""accountManagerResponse""","[]","Optional.empty","\android\accounts\AccountManager.java"
"mAccountType","false","false","false","false","true","String","null","[]","Optional.empty","\android\accounts\AccountManager.java"
"ACTION_AUTHENTICATOR_INTENT","true","false","false","true","true","String","""android.accounts.AccountAuthenticator""","[]","Optional.empty","\android\accounts\AccountManager.java"
"mHorizontalDividerRects","false","false","true","false","false","ArrayList<Rect>","null","[]","Optional[/**
 * Set of horizontal divider positions where the horizontal divider will be drawn
 */
]","\com\android\internal\view\menu\IconMenuView.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<SavedState>","new Parcelable.Creator<SavedState>() {

    public SavedState createFromParcel(Parcel in) {
        return new SavedState(in);
    }

    public SavedState[] newArray(int size) {
        return new SavedState[size];
    }
}","[]","Optional.empty","\com\android\internal\view\menu\IconMenuView.java"
"desiredWidth","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\view\menu\IconMenuView.java"
"left","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\view\menu\IconMenuView.java"
"mMaxItemsPerRow","false","false","true","false","false","int","null","[]","Optional[/**
 * Maximum number of items per row
 */
]","\com\android\internal\view\menu\IconMenuView.java"
"mHasStaleChildren","false","false","true","false","false","boolean","null","[]","Optional[/**
 * Whether this IconMenuView has stale children and needs to update them.
 * Set true by {@link #markStaleChildren()} and reset to false by
 * {@link #onMeasure(int, int)}
 */
]","\com\android\internal\view\menu\IconMenuView.java"
"mMaxItems","false","false","true","false","false","int","null","[]","Optional[/**
 * Maximum number of items to show in the icon menu.
 */
]","\com\android\internal\view\menu\IconMenuView.java"
"mMaxRows","false","false","true","false","false","int","null","[]","Optional[/**
 * Maximum number of rows to be shown
 */
]","\com\android\internal\view\menu\IconMenuView.java"
"mMenuBeingLongpressed","false","false","true","false","false","boolean","false","[]","Optional[/**
 * Longpress on MENU (while this is shown) switches to shortcut caption
 * mode. When the user releases the longpress, we do not want to pass the
 * key-up event up since that will dismiss the menu.
 */
]","\com\android\internal\view\menu\IconMenuView.java"
"mHorizontalDivider","false","false","true","false","false","Drawable","null","[]","Optional[/**
 * Divider that is drawn between all rows
 */
]","\com\android\internal\view\menu\IconMenuView.java"
"mLayout","false","false","true","false","false","int","null","[]","Optional[/**
 * The layout to use for menu items. Each index is the row number (0 is the
 * top-most). Each value contains the number of items in that row.
 * <p>
 * The length of this array should not be used to get the number of rows in
 * the current layout, instead use {@link #mLayoutNumRows}.
 */
]","\com\android\internal\view\menu\IconMenuView.java"
"mRowHeight","false","false","true","false","false","int","null","[]","Optional[/**
 * Height of each row
 */
]","\com\android\internal\view\menu\IconMenuView.java"
"mVerticalDivider","false","false","true","false","false","Drawable","null","[]","Optional[/**
 * Divider that is drawn between all columns
 */
]","\com\android\internal\view\menu\IconMenuView.java"
"mMoreItemView","false","false","true","false","false","IconMenuItemView","null","[]","Optional[/**
 * Item view for the 'More' button
 */
]","\com\android\internal\view\menu\IconMenuView.java"
"mVerticalDividerWidth","false","false","true","false","false","int","null","[]","Optional[/**
 * Width of the vertical divider
 */
]","\com\android\internal\view\menu\IconMenuView.java"
"mMoreIcon","false","false","true","false","false","Drawable","null","[]","Optional[/**
 * Icon for the 'More' button
 */
]","\com\android\internal\view\menu\IconMenuView.java"
"mMenu","false","false","true","false","false","MenuBuilder","null","[]","Optional.empty","\com\android\internal\view\menu\IconMenuView.java"
"mLayoutNumRows","false","false","true","false","false","int","null","[]","Optional[/**
 * The number of rows in the current layout.
 */
]","\com\android\internal\view\menu\IconMenuView.java"
"mAnimations","false","false","true","false","false","int","null","[]","Optional[/**
 * Default animations for this menu
 */
]","\com\android\internal\view\menu\IconMenuView.java"
"mItemBackground","false","false","true","false","false","Drawable","null","[]","Optional[/**
 * Background of each item (should contain the selected and focused states)
 */
]","\com\android\internal\view\menu\IconMenuView.java"
"mVerticalDividerRects","false","false","true","false","false","ArrayList<Rect>","null","[]","Optional[/**
 * Set of vertical divider positions where the vertical divider will be drawn
 */
]","\com\android\internal\view\menu\IconMenuView.java"
"mHorizontalDividerHeight","false","false","true","false","false","int","null","[]","Optional[/**
 * Height of the horizontal divider
 */
]","\com\android\internal\view\menu\IconMenuView.java"
"focusedPosition","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\view\menu\IconMenuView.java"
"mLastChildrenCaptionMode","false","false","true","false","false","boolean","null","[]","Optional[/**
 * While {@link #mMenuBeingLongpressed}, we toggle the children's caption
 * mode between each's title and its shortcut. This is the last caption mode
 * we broadcasted to children.
 */
]","\com\android\internal\view\menu\IconMenuView.java"
"mNumActualItemsShown","false","false","true","false","false","int","null","[]","Optional[/**
 * Actual number of items (the 'More' view does not count as an item) shown
 */
]","\com\android\internal\view\menu\IconMenuView.java"
"maxNumItemsOnRow","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\view\menu\IconMenuView.java"
"ITEM_CAPTION_CYCLE_DELAY","false","false","true","true","true","int","1000","[]","Optional.empty","\com\android\internal\view\menu\IconMenuView.java"
"wkst","true","false","false","false","false","int","null","[]","Optional.empty","\android\pim\EventRecurrence.java"
"byyeardayCount","true","false","false","false","false","int","null","[]","Optional.empty","\android\pim\EventRecurrence.java"
"byweekno","true","false","false","false","false","int","null","[]","Optional.empty","\android\pim\EventRecurrence.java"
"DAILY","true","false","false","true","true","int","4","[]","Optional.empty","\android\pim\EventRecurrence.java"
"byminuteCount","true","false","false","false","false","int","null","[]","Optional.empty","\android\pim\EventRecurrence.java"
"byminute","true","false","false","false","false","int","null","[]","Optional.empty","\android\pim\EventRecurrence.java"
"bydayCount","true","false","false","false","false","int","null","[]","Optional.empty","\android\pim\EventRecurrence.java"
"startDate","true","false","false","false","false","Time","null","[]","Optional.empty","\android\pim\EventRecurrence.java"
"freq","true","false","false","false","false","int","null","[]","Optional.empty","\android\pim\EventRecurrence.java"
"SA","true","false","false","true","true","int","0x00400000","[]","Optional.empty","\android\pim\EventRecurrence.java"
"byyearday","true","false","false","false","false","int","null","[]","Optional.empty","\android\pim\EventRecurrence.java"
"bymonth","true","false","false","false","false","int","null","[]","Optional.empty","\android\pim\EventRecurrence.java"
"bydayNum","true","false","false","false","false","int","null","[]","Optional.empty","\android\pim\EventRecurrence.java"
"SU","true","false","false","true","true","int","0x00010000","[]","Optional.empty","\android\pim\EventRecurrence.java"
"byweeknoCount","true","false","false","false","false","int","null","[]","Optional.empty","\android\pim\EventRecurrence.java"
"TH","true","false","false","true","true","int","0x00100000","[]","Optional.empty","\android\pim\EventRecurrence.java"
"byday","true","false","false","false","false","int","null","[]","Optional.empty","\android\pim\EventRecurrence.java"
"TU","true","false","false","true","true","int","0x00040000","[]","Optional.empty","\android\pim\EventRecurrence.java"
"bysecond","true","false","false","false","false","int","null","[]","Optional.empty","\android\pim\EventRecurrence.java"
"bysetposCount","true","false","false","false","false","int","null","[]","Optional.empty","\android\pim\EventRecurrence.java"
"count","true","false","false","false","false","int","null","[]","Optional.empty","\android\pim\EventRecurrence.java"
"byhour","true","false","false","false","false","int","null","[]","Optional.empty","\android\pim\EventRecurrence.java"
"bysetpos","true","false","false","false","false","int","null","[]","Optional.empty","\android\pim\EventRecurrence.java"
"FR","true","false","false","true","true","int","0x00200000","[]","Optional.empty","\android\pim\EventRecurrence.java"
"WE","true","false","false","true","true","int","0x00080000","[]","Optional.empty","\android\pim\EventRecurrence.java"
"bymonthdayCount","true","false","false","false","false","int","null","[]","Optional.empty","\android\pim\EventRecurrence.java"
"WEEKLY","true","false","false","true","true","int","5","[]","Optional.empty","\android\pim\EventRecurrence.java"
"MINUTELY","true","false","false","true","true","int","2","[]","Optional.empty","\android\pim\EventRecurrence.java"
"bymonthday","true","false","false","false","false","int","null","[]","Optional.empty","\android\pim\EventRecurrence.java"
"bysecondCount","true","false","false","false","false","int","null","[]","Optional.empty","\android\pim\EventRecurrence.java"
"HOURLY","true","false","false","true","true","int","3","[]","Optional.empty","\android\pim\EventRecurrence.java"
"interval","true","false","false","false","false","int","null","[]","Optional.empty","\android\pim\EventRecurrence.java"
"YEARLY","true","false","false","true","true","int","7","[]","Optional.empty","\android\pim\EventRecurrence.java"
"byhourCount","true","false","false","false","false","int","null","[]","Optional.empty","\android\pim\EventRecurrence.java"
"MONTHLY","true","false","false","true","true","int","6","[]","Optional.empty","\android\pim\EventRecurrence.java"
"bymonthCount","true","false","false","false","false","int","null","[]","Optional.empty","\android\pim\EventRecurrence.java"
"MO","true","false","false","true","true","int","0x00020000","[]","Optional.empty","\android\pim\EventRecurrence.java"
"SECONDLY","true","false","false","true","true","int","1","[]","Optional.empty","\android\pim\EventRecurrence.java"
"until","true","false","false","false","false","String","null","[]","Optional.empty","\android\pim\EventRecurrence.java"
"EXTRA_PREVIEW_MODE","true","false","false","true","true","String","""android.service.wallpaper.PREVIEW_MODE""","[]","Optional[/**
 * This boolean extra in the launch intent indicates that the settings
 * are being used while the wallpaper is in preview mode.
 */
]","\android\service\wallpaper\WallpaperSettingsActivity.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<StatusBarIcon>","new Parcelable.Creator<StatusBarIcon>() {

    public StatusBarIcon createFromParcel(Parcel parcel) {
        return new StatusBarIcon(parcel);
    }

    public StatusBarIcon[] newArray(int size) {
        return new StatusBarIcon[size];
    }
}","[]","Optional[/**
 * Parcelable.Creator that instantiates StatusBarIcon objects
 */
]","\com\android\internal\statusbar\StatusBarIcon.java"
"iconPackage","true","false","false","false","false","String","null","[]","Optional.empty","\com\android\internal\statusbar\StatusBarIcon.java"
"iconLevel","true","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\statusbar\StatusBarIcon.java"
"number","true","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\statusbar\StatusBarIcon.java"
"iconId","true","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\statusbar\StatusBarIcon.java"
"visible","true","false","false","false","false","boolean","true","[]","Optional.empty","\com\android\internal\statusbar\StatusBarIcon.java"
"mOneByte","false","false","false","false","false","byte","null","[]","Optional.empty","\android\app\backup\BackupDataInputStream.java"
"key","false","false","false","false","false","String","null","[]","Optional.empty","\android\app\backup\BackupDataInputStream.java"
"dataSize","false","false","false","false","false","int","null","[]","Optional.empty","\android\app\backup\BackupDataInputStream.java"
"mData","false","false","false","false","false","BackupDataInput","null","[]","Optional.empty","\android\app\backup\BackupDataInputStream.java"
"mEmittedAgentWarning","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\pim\vcard\VCardParserImpl_V30.java"
"mPreviousLine","false","false","true","false","false","String","null","[]","Optional.empty","\android\pim\vcard\VCardParserImpl_V30.java"
"LOG_TAG","false","false","true","true","true","String","""VCardParserImpl_V30""","[]","Optional.empty","\android\pim\vcard\VCardParserImpl_V30.java"
"mCondition","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\os\ConditionVariable.java"
"exported","true","false","false","false","false","boolean","false","[]","Optional[/**
 * Set to true if this component is available for use by other applications.
 * Comes from {@link android.R.attr#exported android:exported} of the
 * &lt;activity&gt;, &lt;receiver&gt;, &lt;service&gt;, or
 * &lt;provider&gt; tag.
 */
]","\android\content\pm\ComponentInfo.java"
"enabled","true","false","false","false","false","boolean","true","[]","Optional[/**
 * Indicates whether or not this component may be instantiated.  Note that this value can be
 * overriden by the one in its parent {@link ApplicationInfo}.
 */
]","\android\content\pm\ComponentInfo.java"
"processName","true","false","false","false","false","String","null","[]","Optional[/**
 * The name of the process this component should run in.
 * From the ""android:process"" attribute or, if not set, the same
 * as <var>applicationInfo.processName</var>.
 */
]","\android\content\pm\ComponentInfo.java"
"descriptionRes","true","false","false","false","false","int","null","[]","Optional[/**
 * A string resource identifier (in the package's resources) containing
 * a user-readable description of the component.  From the ""description""
 * attribute or, if not set, 0.
 */
]","\android\content\pm\ComponentInfo.java"
"applicationInfo","true","false","false","false","false","ApplicationInfo","null","[]","Optional[/**
 * Global information about the application/package this component is a
 * part of.
 */
]","\android\content\pm\ComponentInfo.java"
"KEY_DEFAULT","true","false","false","true","true","byte","{ (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }","[]","Optional[/**
 * The well-known default MIFARE read key. All keys are set to this at the factory.
 * Using this key will effectively make the payload in the sector public.
 */
]","\android\nfc\tech\MifareClassic.java"
"mSize","false","false","true","false","false","int","null","[]","Optional.empty","\android\nfc\tech\MifareClassic.java"
"TYPE_PRO","true","false","false","true","true","int","2","[]","Optional[/**
 * A MIFARE Pro tag
 */
]","\android\nfc\tech\MifareClassic.java"
"SIZE_MINI","true","false","false","true","true","int","320","[]","Optional[/**
 * The tag contains 5 sectors, each holding 4 blocks.
 */
]","\android\nfc\tech\MifareClassic.java"
"KEY_MIFARE_APPLICATION_DIRECTORY","true","false","false","true","true","byte","{ (byte) 0xA0, (byte) 0xA1, (byte) 0xA2, (byte) 0xA3, (byte) 0xA4, (byte) 0xA5 }","[]","Optional[/**
 * The well-known, default MIFARE Application Directory read key.
 */
]","\android\nfc\tech\MifareClassic.java"
"TYPE_CLASSIC","true","false","false","true","true","int","0","[]","Optional[/**
 * A MIFARE Classic tag
 */
]","\android\nfc\tech\MifareClassic.java"
"SIZE_2K","true","false","false","true","true","int","2048","[]","Optional[/**
 * The tag contains 32 sectors, each holding 4 blocks.
 */
]","\android\nfc\tech\MifareClassic.java"
"MAX_BLOCK_COUNT","false","false","true","true","true","int","256","[]","Optional.empty","\android\nfc\tech\MifareClassic.java"
"mType","false","false","true","false","false","int","null","[]","Optional.empty","\android\nfc\tech\MifareClassic.java"
"SIZE_1K","true","false","false","true","true","int","1024","[]","Optional[/**
 * The tag contains 16 sectors, each holding 4 blocks.
 */
]","\android\nfc\tech\MifareClassic.java"
"MAX_SECTOR_COUNT","false","false","true","true","true","int","40","[]","Optional.empty","\android\nfc\tech\MifareClassic.java"
"KEY_NFC_FORUM","true","false","false","true","true","byte","{ (byte) 0xD3, (byte) 0xF7, (byte) 0xD3, (byte) 0xF7, (byte) 0xD3, (byte) 0xF7 }","[]","Optional[/**
 * The well-known, default read key for NDEF data on a MIFARE Classic
 */
]","\android\nfc\tech\MifareClassic.java"
"TYPE_PLUS","true","false","false","true","true","int","1","[]","Optional[/**
 * A MIFARE Plus tag
 */
]","\android\nfc\tech\MifareClassic.java"
"TYPE_UNKNOWN","true","false","false","true","true","int","-1","[]","Optional[/**
 * A Mifare Classic compatible card of unknown type
 */
]","\android\nfc\tech\MifareClassic.java"
"BLOCK_SIZE","true","false","false","true","true","int","16","[]","Optional[/**
 * Size of a Mifare Classic block (in bytes)
 */
]","\android\nfc\tech\MifareClassic.java"
"SIZE_4K","true","false","false","true","true","int","4096","[]","Optional[/**
 * The tag contains 40 sectors. The first 32 sectors contain 4 blocks and the last 8 sectors
 * contain 16 blocks.
 */
]","\android\nfc\tech\MifareClassic.java"
"mIsEmulated","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\nfc\tech\MifareClassic.java"
"predicate","false","false","true","false","true","Predicate<? super T>","null","[]","Optional.empty","\com\android\internal\util\Predicates.java"
"components","false","false","true","false","true","Iterable<? extends Predicate<? super T>>","null","[]","Optional.empty","\com\android\internal\util\Predicates.java"
"mFd","false","false","true","false","true","ParcelFileDescriptor","null","[]","Optional.empty","\android\content\res\AssetFileDescriptor.java"
"mStream","false","false","true","false","false","InputStream","null","[]","Optional.empty","\android\content\res\AssetFileDescriptor.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<AssetFileDescriptor>","new Parcelable.Creator<AssetFileDescriptor>() {

    public AssetFileDescriptor createFromParcel(Parcel in) {
        return new AssetFileDescriptor(in);
    }

    public AssetFileDescriptor[] newArray(int size) {
        return new AssetFileDescriptor[size];
    }
}","[]","Optional.empty","\android\content\res\AssetFileDescriptor.java"
"UNKNOWN_LENGTH","true","false","false","true","true","long","-1","[]","Optional[/**
 * Length used with {@link #AssetFileDescriptor(ParcelFileDescriptor, long, long)}
 * and {@link #getDeclaredLength} when a length has not been declared.  This means
 * the data extends to the end of the file.
 */
]","\android\content\res\AssetFileDescriptor.java"
"mRemaining","false","false","true","false","false","long","null","[]","Optional.empty","\android\content\res\AssetFileDescriptor.java"
"mLength","false","false","true","false","true","long","null","[]","Optional.empty","\android\content\res\AssetFileDescriptor.java"
"mParcelFd","false","false","true","false","false","ParcelFileDescriptor","null","[]","Optional.empty","\android\content\res\AssetFileDescriptor.java"
"mFile","false","false","true","false","false","MemoryFile","null","[]","Optional.empty","\android\content\res\AssetFileDescriptor.java"
"mStartOffset","false","false","true","false","true","long","null","[]","Optional.empty","\android\content\res\AssetFileDescriptor.java"
"mDividerDrawable","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\TabWidget.java"
"mRightStrip","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\TabWidget.java"
"mTabIndex","false","false","true","false","true","int","null","[]","Optional.empty","\android\widget\TabWidget.java"
"mLeftStrip","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\TabWidget.java"
"mDrawBottomStrips","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\widget\TabWidget.java"
"mStripMoved","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\TabWidget.java"
"mSelectionChangedListener","false","false","true","false","false","OnTabSelectionChanged","null","[]","Optional.empty","\android\widget\TabWidget.java"
"mBounds","false","false","true","false","true","Rect","new Rect()","[]","Optional.empty","\android\widget\TabWidget.java"
"mSelectedTab","false","false","true","false","false","int","0","[]","Optional.empty","\android\widget\TabWidget.java"
"vibe","false","false","true","false","false","Vibrator","null","[]","Optional[// Vibrator for creating tactile feedback
]","\com\android\internal\widget\LockPatternView.java"
"mPathPaint","false","false","true","false","false","Paint","new Paint()","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<SavedState>","new Creator<SavedState>() {

    public SavedState createFromParcel(Parcel in) {
        return new SavedState(in);
    }

    public SavedState[] newArray(int size) {
        return new SavedState[size];
    }
}","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mDiameterFactor","false","false","true","false","false","float","0.5f","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"PROFILE_DRAWING","false","false","true","true","true","boolean","false","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mBitmapCircleRed","false","false","true","false","false","Bitmap","null","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"ASPECT_LOCK_WIDTH","false","false","true","true","true","int","1","[]","Optional[// Fixed width; height will be minimum of (w,h)
]","\com\android\internal\widget\LockPatternView.java"
"mAspect","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mInProgressY","false","false","true","false","false","float","-1","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mInProgressX","false","false","true","false","false","float","-1","[]","Optional[/**
 * the in progress point:
 * - during interaction: where the user's finger is
 * - during animation: the current tip of the animating line
 */
]","\com\android\internal\widget\LockPatternView.java"
"column","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mAnimatingPeriodStart","false","false","true","false","false","long","null","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mVibePattern","false","false","true","false","false","long","null","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"ASPECT_SQUARE","false","false","true","true","true","int","0","[]","Optional[// View will be the minimum of width/height
]","\com\android\internal\widget\LockPatternView.java"
"sCells","false","false","false","true","false","Cell","new Cell[3][3]","[]","Optional[// keep # objects limited to 9
]","\com\android\internal\widget\LockPatternView.java"
"mOnPatternListener","false","false","true","false","false","OnPatternListener","null","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mInvalidate","false","false","true","false","true","Rect","new Rect()","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mPattern","false","false","true","false","false","ArrayList<Cell>","new ArrayList<Cell>(9)","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"DEFAULT_VIBE_PATTERN","false","false","true","true","true","long","{ 0, 1, 40, 41 }","[]","Optional[// Vibrator pattern for creating a tactile bump
]","\com\android\internal\widget\LockPatternView.java"
"mInStealthMode","false","false","true","false","true","boolean","null","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"MILLIS_PER_CIRCLE_ANIMATING","false","false","true","true","true","int","700","[]","Optional[/**
 * How many milliseconds we spend animating each circle of a lock pattern
 * if the animating mode is set.  The entire animation should take this
 * constant * the length of the pattern to complete.
 */
]","\com\android\internal\widget\LockPatternView.java"
"mDisplayMode","false","false","true","false","true","int","null","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mPatternDisplayMode","false","false","true","false","false","DisplayMode","DisplayMode.Correct","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mBitmapBtnTouched","false","false","true","false","false","Bitmap","null","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mBitmapBtnDefault","false","false","true","false","false","Bitmap","null","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mBitmapArrowGreenUp","false","false","true","false","false","Bitmap","null","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mBitmapArrowRedUp","false","false","true","false","false","Bitmap","null","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"ASPECT_LOCK_HEIGHT","false","false","true","true","true","int","2","[]","Optional[// Fixed height; width will be minimum of (w,h)
]","\com\android\internal\widget\LockPatternView.java"
"mBitmapHeight","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mSquareHeight","false","false","true","false","false","float","null","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mInputEnabled","false","false","true","false","true","boolean","null","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mDrawingProfilingStarted","false","false","true","false","false","boolean","false","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mSquareWidth","false","false","true","false","false","float","null","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mBitmapCircleGreen","false","false","true","false","false","Bitmap","null","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mPaint","false","false","true","false","false","Paint","new Paint()","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mPatternDrawLookup","false","false","true","false","false","boolean","new boolean[3][3]","[]","Optional[/**
 * Lookup table for the circles of the pattern we are currently drawing.
 * This will be the cells of the complete pattern unless we are animating,
 * in which case we use this to hold the cells we are drawing for the in
 * progress animation.
 */
]","\com\android\internal\widget\LockPatternView.java"
"STATUS_BAR_HEIGHT","false","false","false","true","true","int","25","[]","Optional[// TODO: make this common with PhoneWindow
]","\com\android\internal\widget\LockPatternView.java"
"mCurrentPath","false","false","true","false","true","Path","new Path()","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mTactileFeedbackEnabled","false","false","true","false","true","boolean","null","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mSerializedPattern","false","false","true","false","true","String","null","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mPatternInProgress","false","false","true","false","false","boolean","false","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mBitmapWidth","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"row","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mBitmapCircleDefault","false","false","true","false","false","Bitmap","null","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mHitFactor","false","false","true","false","false","float","0.6f","[]","Optional.empty","\com\android\internal\widget\LockPatternView.java"
"mSql","false","false","true","false","false","String","null","[]","Optional.empty","\android\database\sqlite\SQLiteDirectCursorDriver.java"
"mDatabase","false","false","true","false","false","SQLiteDatabase","null","[]","Optional.empty","\android\database\sqlite\SQLiteDirectCursorDriver.java"
"mQuery","false","false","true","false","false","SQLiteQuery","null","[]","Optional.empty","\android\database\sqlite\SQLiteDirectCursorDriver.java"
"mCursor","false","false","true","false","false","Cursor","null","[]","Optional.empty","\android\database\sqlite\SQLiteDirectCursorDriver.java"
"mEditTable","false","false","true","false","false","String","null","[]","Optional.empty","\android\database\sqlite\SQLiteDirectCursorDriver.java"
"mKeyColumn","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\ContentQueryMap.java"
"mDirty","false","false","true","false","false","boolean","false","[]","Optional[/**
 * Set when a cursor change notification is received and is cleared on a call to requery().
 */
]","\android\content\ContentQueryMap.java"
"mContentObserver","false","false","true","false","false","ContentObserver","null","[]","Optional.empty","\android\content\ContentQueryMap.java"
"mCursor","false","false","true","false","false","Cursor","null","[]","Optional.empty","\android\content\ContentQueryMap.java"
"mKeepUpdated","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\content\ContentQueryMap.java"
"mColumnNames","false","false","true","false","false","String","null","[]","Optional.empty","\android\content\ContentQueryMap.java"
"mValues","false","false","true","false","false","Map<String,ContentValues>","null","[]","Optional.empty","\android\content\ContentQueryMap.java"
"mHandlerForUpdateNotifications","false","false","true","false","false","Handler","null","[]","Optional.empty","\android\content\ContentQueryMap.java"
"EXDATE","true","false","false","true","true","String","""EXDATE""","[]","Optional.empty","\android\pim\ICalendar.java"
"mChildren","false","false","true","false","false","LinkedList<Component>","null","[]","Optional.empty","\android\pim\ICalendar.java"
"DURATION","true","false","false","true","true","String","""DURATION""","[]","Optional.empty","\android\pim\ICalendar.java"
"DTSTART","true","false","false","true","true","String","""DTSTART""","[]","Optional[// TODO: do we want to list these here?  the complete list is long.
]","\android\pim\ICalendar.java"
"mPropsMap","false","false","true","false","true","LinkedHashMap<String,ArrayList<Property>>","new LinkedHashMap<String, ArrayList<Property>>()","[]","Optional.empty","\android\pim\ICalendar.java"
"EXRULE","true","false","false","true","true","String","""EXRULE""","[]","Optional.empty","\android\pim\ICalendar.java"
"VCALENDAR","true","false","false","true","true","String","""VCALENDAR""","[]","Optional.empty","\android\pim\ICalendar.java"
"name","true","false","false","false","false","String","null","[]","Optional.empty","\android\pim\ICalendar.java"
"END","false","false","true","true","true","String","""END""","[]","Optional.empty","\android\pim\ICalendar.java"
"mName","false","false","true","false","true","String","null","[]","Optional.empty","\android\pim\ICalendar.java"
"RRULE","true","false","false","true","true","String","""RRULE""","[]","Optional.empty","\android\pim\ICalendar.java"
"index","true","false","false","false","false","int","null","[]","Optional.empty","\android\pim\ICalendar.java"
"mParamsMap","false","false","true","false","false","LinkedHashMap<String,ArrayList<Parameter>>","new LinkedHashMap<String, ArrayList<Parameter>>()","[]","Optional.empty","\android\pim\ICalendar.java"
"VFREEBUSY","true","false","false","true","true","String","""VFREEBUSY""","[]","Optional.empty","\android\pim\ICalendar.java"
"BEGIN","false","false","true","true","true","String","""BEGIN""","[]","Optional[// components
]","\android\pim\ICalendar.java"
"VEVENT","true","false","false","true","true","String","""VEVENT""","[]","Optional.empty","\android\pim\ICalendar.java"
"mParent","false","false","true","false","true","Component","null","[]","Optional[// see if we can get rid of this
]","\android\pim\ICalendar.java"
"TAG","false","false","true","true","true","String","""Sync""","[]","Optional.empty","\android\pim\ICalendar.java"
"VTODO","true","false","false","true","true","String","""VTODO""","[]","Optional.empty","\android\pim\ICalendar.java"
"RDATE","true","false","false","true","true","String","""RDATE""","[]","Optional.empty","\android\pim\ICalendar.java"
"NEWLINE","false","false","true","true","true","String","""\n""","[]","Optional.empty","\android\pim\ICalendar.java"
"VTIMEZONE","true","false","false","true","true","String","""VTIMEZONE""","[]","Optional.empty","\android\pim\ICalendar.java"
"line","true","false","false","false","false","String","null","[]","Optional[// TODO: just point to original text
]","\android\pim\ICalendar.java"
"DTEND","true","false","false","true","true","String","""DTEND""","[]","Optional.empty","\android\pim\ICalendar.java"
"VJOURNAL","true","false","false","true","true","String","""VJOURNAL""","[]","Optional.empty","\android\pim\ICalendar.java"
"value","true","false","false","false","false","String","null","[]","Optional.empty","\android\pim\ICalendar.java"
"VALARM","true","false","false","true","true","String","""VALARM""","[]","Optional.empty","\android\pim\ICalendar.java"
"mValue","false","false","true","false","false","String","null","[]","Optional[// TODO: make this final?
]","\android\pim\ICalendar.java"
"privateImeOptions","true","false","false","false","false","String","null","[]","Optional[/**
 * A string supplying additional information options that are
 * private to a particular IME implementation.  The string must be
 * scoped to a package owned by the implementation, to ensure there are
 * no conflicts between implementations, but other than that you can put
 * whatever you want in it to communicate with the IME.  For example,
 * you could have a string that supplies an argument like
 * <code>""com.example.myapp.SpecialMode=3""</code>.  This field is can be
 * filled in from the {@link android.R.attr#privateImeOptions}
 * attribute of a TextView.
 */
]","\android\view\inputmethod\EditorInfo.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<EditorInfo>","new Parcelable.Creator<EditorInfo>() {

    public EditorInfo createFromParcel(Parcel source) {
        EditorInfo res = new EditorInfo();
        res.inputType = source.readInt();
        res.imeOptions = source.readInt();
        res.privateImeOptions = source.readString();
        res.actionLabel = TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(source);
        res.actionId = source.readInt();
        res.initialSelStart = source.readInt();
        res.initialSelEnd = source.readInt();
        res.initialCapsMode = source.readInt();
        res.hintText = TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(source);
        res.label = TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(source);
        res.packageName = source.readString();
        res.fieldId = source.readInt();
        res.fieldName = source.readString();
        res.extras = source.readBundle();
        return res;
    }

    public EditorInfo[] newArray(int size) {
        return new EditorInfo[size];
    }
}","[]","Optional[/**
 * Used to make this class parcelable.
 */
]","\android\view\inputmethod\EditorInfo.java"
"IME_ACTION_NEXT","true","false","false","true","true","int","0x00000005","[]","Optional[/**
 * Bits of {@link #IME_MASK_ACTION}: the action key performs a ""next""
 * operation, taking the user to the next field that will accept text.
 */
]","\android\view\inputmethod\EditorInfo.java"
"initialCapsMode","true","false","false","false","false","int","0","[]","Optional[/**
 * The capitalization mode of the first character being edited in the
 * text.  Values may be any combination of
 * {@link TextUtils#CAP_MODE_CHARACTERS TextUtils.CAP_MODE_CHARACTERS},
 * {@link TextUtils#CAP_MODE_WORDS TextUtils.CAP_MODE_WORDS}, and
 * {@link TextUtils#CAP_MODE_SENTENCES TextUtils.CAP_MODE_SENTENCES}, though
 * you should generally just take a non-zero value to mean start out in
 * caps mode.
 */
]","\android\view\inputmethod\EditorInfo.java"
"imeOptions","true","false","false","false","false","int","IME_NULL","[]","Optional[/**
 * Extended type information for the editor, to help the IME better
 * integrate with it.
 */
]","\android\view\inputmethod\EditorInfo.java"
"IME_FLAG_NO_FULLSCREEN","true","false","false","true","true","int","0x80000000","[]","Optional[/**
 * Flag of {@link #imeOptions}: used to request that the IME never go
 * into fullscreen mode.  Applications need to be aware that the flag is not
 * a guarantee, and not all IMEs will respect it.
 * @hide
 */
]","\android\view\inputmethod\EditorInfo.java"
"IME_ACTION_SEND","true","false","false","true","true","int","0x00000004","[]","Optional[/**
 * Bits of {@link #IME_MASK_ACTION}: the action key performs a ""send""
 * operation, delivering the text to its target.  This is typically used
 * when composing a message.
 */
]","\android\view\inputmethod\EditorInfo.java"
"hintText","true","false","false","false","false","CharSequence","null","[]","Optional[/**
 * The ""hint"" text of the text view, typically shown in-line when the
 * text is empty to tell the user what to enter.
 */
]","\android\view\inputmethod\EditorInfo.java"
"IME_ACTION_UNSPECIFIED","true","false","false","true","true","int","0x00000000","[]","Optional[/**
 * Bits of {@link #IME_MASK_ACTION}: no specific action has been
 * associated with this editor, let the editor come up with its own if
 * it can.
 */
]","\android\view\inputmethod\EditorInfo.java"
"initialSelEnd","true","false","false","false","false","int","-1","[]","Optional[/**
 * The text offset of the end of the selection at the time editing
 * began; -1 if not known.
 */
]","\android\view\inputmethod\EditorInfo.java"
"actionId","true","false","false","false","false","int","0","[]","Optional[/**
 * If {@link #actionLabel} has been given, this is the id for that command
 * when the user presses its button that is delivered back with
 * {@link InputConnection#performEditorAction(int)
 * InputConnection.performEditorAction()}.
 */
]","\android\view\inputmethod\EditorInfo.java"
"IME_FLAG_NO_ACCESSORY_ACTION","true","false","false","true","true","int","0x20000000","[]","Optional[/**
 * Flag of {@link #imeOptions}: used in conjunction with
 * {@link #IME_MASK_ACTION}, this indicates that the action should not
 * be available as an accessory button when the input method is full-screen.
 * Note that by setting this flag, there can be cases where the action
 * is simply never available to the user.  Setting this generally means
 * that you think showing text being edited is more important than the
 * action you have supplied.
 */
]","\android\view\inputmethod\EditorInfo.java"
"IME_FLAG_NO_ENTER_ACTION","true","false","false","true","true","int","0x40000000","[]","Optional[/**
 * Flag of {@link #imeOptions}: used in conjunction with
 * {@link #IME_MASK_ACTION}, this indicates that the action should not
 * be available in-line as a replacement for ""enter"" key.  Typically this is
 * because the action has such a significant impact or is not recoverable
 * enough that accidentally hitting it should be avoided, such as sending
 * a message.  Note that {@link android.widget.TextView} will automatically set this
 * flag for you on multi-line text views.
 */
]","\android\view\inputmethod\EditorInfo.java"
"IME_ACTION_GO","true","false","false","true","true","int","0x00000002","[]","Optional[/**
 * Bits of {@link #IME_MASK_ACTION}: the action key performs a ""go""
 * operation to take the user to the target of the text they typed.
 * Typically used, for example, when entering a URL.
 */
]","\android\view\inputmethod\EditorInfo.java"
"IME_FLAG_NO_EXTRACT_UI","true","false","false","true","true","int","0x10000000","[]","Optional[/**
 * Flag of {@link #imeOptions}: used to specify that the IME does not need
 * to show its extracted text UI.  For input methods that may be fullscreen,
 * often when in landscape mode, this allows them to be smaller and let part
 * of the application be shown behind.  Though there will likely be limited
 * access to the application available from the user, it can make the
 * experience of a (mostly) fullscreen IME less jarring.  Note that when
 * this flag is specified the IME may <em>not</em> be set up to be able
 * to display text, so it should only be used in situations where this is
 * not needed.
 */
]","\android\view\inputmethod\EditorInfo.java"
"label","true","false","false","false","false","CharSequence","null","[]","Optional[/**
 * A label to show to the user describing the text they are writing.
 */
]","\android\view\inputmethod\EditorInfo.java"
"IME_NULL","true","false","false","true","true","int","0x00000000","[]","Optional[/**
 * Generic unspecified type for {@link #imeOptions}.
 */
]","\android\view\inputmethod\EditorInfo.java"
"IME_MASK_ACTION","true","false","false","true","true","int","0x000000ff","[]","Optional[/**
 * Set of bits in {@link #imeOptions} that provide alternative actions
 * associated with the ""enter"" key.  This both helps the IME provide
 * better feedback about what the enter key will do, and also allows it
 * to provide alternative mechanisms for providing that command.
 */
]","\android\view\inputmethod\EditorInfo.java"
"actionLabel","true","false","false","false","false","CharSequence","null","[]","Optional[/**
 * In some cases an IME may be able to display an arbitrary label for
 * a command the user can perform, which you can specify here.  You can
 * not count on this being used.
 */
]","\android\view\inputmethod\EditorInfo.java"
"fieldId","true","false","false","false","false","int","null","[]","Optional[/**
 * Identifier for the editor's field.  This is optional, and may be
 * 0.  By default it is filled in with the result of
 * {@link android.view.View#getId() View.getId()} on the View that
 * is being edited.
 */
]","\android\view\inputmethod\EditorInfo.java"
"extras","true","false","false","false","false","Bundle","null","[]","Optional[/**
 * Any extra data to supply to the input method.  This is for extended
 * communication with specific input methods; the name fields in the
 * bundle should be scoped (such as ""com.mydomain.im.SOME_FIELD"") so
 * that they don't conflict with others.  This field is can be
 * filled in from the {@link android.R.attr#editorExtras}
 * attribute of a TextView.
 */
]","\android\view\inputmethod\EditorInfo.java"
"initialSelStart","true","false","false","false","false","int","-1","[]","Optional[/**
 * The text offset of the start of the selection at the time editing
 * began; -1 if not known.
 */
]","\android\view\inputmethod\EditorInfo.java"
"IME_ACTION_SEARCH","true","false","false","true","true","int","0x00000003","[]","Optional[/**
 * Bits of {@link #IME_MASK_ACTION}: the action key performs a ""search""
 * operation, taking the user to the results of searching for the text
 * the have typed (in whatever context is appropriate).
 */
]","\android\view\inputmethod\EditorInfo.java"
"inputType","true","false","false","false","false","int","TYPE_NULL","[]","Optional[/**
 * The content type of the text box, whose bits are defined by
 * {@link InputType}.
 *
 * @see InputType
 * @see #TYPE_MASK_CLASS
 * @see #TYPE_MASK_VARIATION
 * @see #TYPE_MASK_FLAGS
 */
]","\android\view\inputmethod\EditorInfo.java"
"IME_ACTION_DONE","true","false","false","true","true","int","0x00000006","[]","Optional[/**
 * Bits of {@link #IME_MASK_ACTION}: the action key performs a ""done""
 * operation, typically meaning the IME will be closed.
 */
]","\android\view\inputmethod\EditorInfo.java"
"fieldName","true","false","false","false","false","String","null","[]","Optional[/**
 * Additional name for the editor's field.  This can supply additional
 * name information for the field.  By default it is null.  The actual
 * contents have no meaning.
 */
]","\android\view\inputmethod\EditorInfo.java"
"packageName","true","false","false","false","false","String","null","[]","Optional[/**
 * Name of the package that owns this editor.
 */
]","\android\view\inputmethod\EditorInfo.java"
"IME_ACTION_NONE","true","false","false","true","true","int","0x00000001","[]","Optional[/**
 * Bits of {@link #IME_MASK_ACTION}: there is no available action.
 */
]","\android\view\inputmethod\EditorInfo.java"
"mShrinkableColumns","false","false","true","false","false","SparseBooleanArray","null","[]","Optional.empty","\android\widget\TableLayout.java"
"mMaxWidths","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\TableLayout.java"
"mStretchableColumns","false","false","true","false","false","SparseBooleanArray","null","[]","Optional.empty","\android\widget\TableLayout.java"
"mCollapsedColumns","false","false","true","false","false","SparseBooleanArray","null","[]","Optional.empty","\android\widget\TableLayout.java"
"mOnHierarchyChangeListener","false","false","true","false","false","OnHierarchyChangeListener","null","[]","Optional.empty","\android\widget\TableLayout.java"
"mShrinkAllColumns","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\TableLayout.java"
"mStretchAllColumns","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\TableLayout.java"
"mPassThroughListener","false","false","true","false","false","TableLayout.PassThroughHierarchyChangeListener","null","[]","Optional.empty","\android\widget\TableLayout.java"
"mInitialized","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\TableLayout.java"
"mHandle","false","true","false","false","false","int","null","[]","Optional[/**
 * The handle returned by the NFC service and used to identify the LLCP
 * Service socket in every call of this class.
 */
]","\com\android\internal\nfc\LlcpServiceSocket.java"
"mLlcpSocketService","false","false","true","false","true","ILlcpSocket","null","[]","Optional.empty","\com\android\internal\nfc\LlcpServiceSocket.java"
"TAG","false","false","true","true","true","String","""LlcpServiceSocket""","[]","Optional.empty","\com\android\internal\nfc\LlcpServiceSocket.java"
"mService","false","true","false","false","false","ILlcpServiceSocket","null","[]","Optional[/**
 * The entry point for LLCP Service socket operations.
 */
]","\com\android\internal\nfc\LlcpServiceSocket.java"
"mIsRoaming","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\net\NetworkInfo.java"
"CREATOR","true","false","false","true","true","Creator<NetworkInfo>","new Creator<NetworkInfo>() {

    public NetworkInfo createFromParcel(Parcel in) {
        int netType = in.readInt();
        int subtype = in.readInt();
        String typeName = in.readString();
        String subtypeName = in.readString();
        NetworkInfo netInfo = new NetworkInfo(netType, subtype, typeName, subtypeName);
        netInfo.mState = State.valueOf(in.readString());
        netInfo.mDetailedState = DetailedState.valueOf(in.readString());
        netInfo.mIsFailover = in.readInt() != 0;
        netInfo.mIsAvailable = in.readInt() != 0;
        netInfo.mIsRoaming = in.readInt() != 0;
        netInfo.mReason = in.readString();
        netInfo.mExtraInfo = in.readString();
        return netInfo;
    }

    public NetworkInfo[] newArray(int size) {
        return new NetworkInfo[size];
    }
}","[]","Optional[/**
 * Implement the Parcelable interface.
 * @hide
 */
]","\android\net\NetworkInfo.java"
"mSubtypeName","false","false","true","false","false","String","null","[]","Optional.empty","\android\net\NetworkInfo.java"
"mDetailedState","false","false","true","false","false","DetailedState","null","[]","Optional.empty","\android\net\NetworkInfo.java"
"mSubtype","false","false","true","false","false","int","null","[]","Optional.empty","\android\net\NetworkInfo.java"
"mIsAvailable","false","false","true","false","false","boolean","null","[]","Optional[/**
 * Indicates whether network connectivity is possible:
 */
]","\android\net\NetworkInfo.java"
"mReason","false","false","true","false","false","String","null","[]","Optional.empty","\android\net\NetworkInfo.java"
"mTypeName","false","false","true","false","false","String","null","[]","Optional.empty","\android\net\NetworkInfo.java"
"mState","false","false","true","false","false","State","null","[]","Optional.empty","\android\net\NetworkInfo.java"
"mExtraInfo","false","false","true","false","false","String","null","[]","Optional.empty","\android\net\NetworkInfo.java"
"stateMap","false","false","true","true","true","EnumMap<DetailedState,State>","new EnumMap<DetailedState, State>(DetailedState.class)","[]","Optional[/**
 * This is the map described in the Javadoc comment above. The positions
 * of the elements of the array must correspond to the ordinal values
 * of <code>DetailedState</code>.
 */
]","\android\net\NetworkInfo.java"
"mIsFailover","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\net\NetworkInfo.java"
"mNetworkType","false","false","true","false","false","int","null","[]","Optional.empty","\android\net\NetworkInfo.java"
"configChanges","true","false","false","false","false","int","null","[]","Optional[/**
 * Bit mask of kinds of configuration changes that this activity
 * can handle itself (without being restarted by the system).
 * Contains any combination of {@link #CONFIG_FONT_SCALE},
 * {@link #CONFIG_MCC}, {@link #CONFIG_MNC},
 * {@link #CONFIG_LOCALE}, {@link #CONFIG_TOUCHSCREEN},
 * {@link #CONFIG_KEYBOARD}, {@link #CONFIG_NAVIGATION},
 * {@link #CONFIG_ORIENTATION}, and {@link #CONFIG_SCREEN_LAYOUT}.  Set from the
 * {@link android.R.attr#configChanges} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"SCREEN_ORIENTATION_BEHIND","true","false","false","true","true","int","3","[]","Optional[/**
 * Constant corresponding to <code>behind</code> in
 * the {@link android.R.attr#screenOrientation} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"FLAG_STATE_NOT_NEEDED","true","false","false","true","true","int","0x0010","[]","Optional[/**
 * Bit in {@link #flags} indicating that the activity's state
 * is not required to be saved, so that if there is a failure the
 * activity will not be removed from the activity stack.  Set from the
 * {@link android.R.attr#stateNotNeeded} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"FLAG_ALWAYS_RETAIN_TASK_STATE","true","false","false","true","true","int","0x0008","[]","Optional[/**
 * Bit in {@link #flags} indicating that, when the activity is the root
 * of a task, that task's stack should never be cleared when it is
 * relaunched from home.  Set from the
 * {@link android.R.attr#alwaysRetainTaskState} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<ActivityInfo>","new Parcelable.Creator<ActivityInfo>() {

    public ActivityInfo createFromParcel(Parcel source) {
        return new ActivityInfo(source);
    }

    public ActivityInfo[] newArray(int size) {
        return new ActivityInfo[size];
    }
}","[]","Optional.empty","\android\content\pm\ActivityInfo.java"
"SCREEN_ORIENTATION_FULL_SENSOR","true","false","false","true","true","int","10","[]","Optional[/**
 * Constant corresponding to <code>fullSensor</code> in
 * the {@link android.R.attr#screenOrientation} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"SCREEN_ORIENTATION_SENSOR_PORTRAIT","true","false","false","true","true","int","7","[]","Optional[/**
 * Constant corresponding to <code>sensorPortrait</code> in
 * the {@link android.R.attr#screenOrientation} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"FLAG_CLEAR_TASK_ON_LAUNCH","true","false","false","true","true","int","0x0004","[]","Optional[/**
 * Bit in {@link #flags} indicating that, when the activity is the root
 * of a task, that task's stack should be cleared each time the user
 * re-launches it from home.  As a result, the user will always
 * return to the original activity at the top of the task.
 * This flag only applies to activities that
 * are used to start the root of a new task.  Set from the
 * {@link android.R.attr#clearTaskOnLaunch} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"CONFIG_KEYBOARD","true","false","false","true","true","int","0x0010","[]","Optional[/**
 * Bit in {@link #configChanges} that indicates that the activity
 * can itself handle changes to the keyboard type.  Set from the
 * {@link android.R.attr#configChanges} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"screenOrientation","true","false","false","false","false","int","SCREEN_ORIENTATION_UNSPECIFIED","[]","Optional[/**
 * The preferred screen orientation this activity would like to run in.
 * From the {@link android.R.attr#screenOrientation} attribute, one of
 * {@link #SCREEN_ORIENTATION_UNSPECIFIED},
 * {@link #SCREEN_ORIENTATION_LANDSCAPE},
 * {@link #SCREEN_ORIENTATION_PORTRAIT},
 * {@link #SCREEN_ORIENTATION_USER},
 * {@link #SCREEN_ORIENTATION_BEHIND},
 * {@link #SCREEN_ORIENTATION_SENSOR},
 * {@link #SCREEN_ORIENTATION_NOSENSOR},
 * {@link #SCREEN_ORIENTATION_SENSOR_LANDSCAPE},
 * {@link #SCREEN_ORIENTATION_SENSOR_PORTRAIT},
 * {@link #SCREEN_ORIENTATION_REVERSE_LANDSCAPE},
 * {@link #SCREEN_ORIENTATION_REVERSE_PORTRAIT},
 * {@link #SCREEN_ORIENTATION_FULL_SENSOR}.
 */
]","\android\content\pm\ActivityInfo.java"
"SCREEN_ORIENTATION_REVERSE_PORTRAIT","true","false","false","true","true","int","9","[]","Optional[/**
 * Constant corresponding to <code>reversePortrait</code> in
 * the {@link android.R.attr#screenOrientation} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"FLAG_ALLOW_TASK_REPARENTING","true","false","false","true","true","int","0x0040","[]","Optional[/**
 * Bit in {@link #flags} that indicates that the activity can be moved
 * between tasks based on its task affinity.  Set from the
 * {@link android.R.attr#allowTaskReparenting} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"CONFIG_MCC","true","false","false","true","true","int","0x0001","[]","Optional[/**
 * Bit in {@link #configChanges} that indicates that the activity
 * can itself handle changes to the IMSI MCC.  Set from the
 * {@link android.R.attr#configChanges} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"LAUNCH_MULTIPLE","true","false","false","true","true","int","0","[]","Optional[/**
 * Constant corresponding to <code>standard</code> in
 * the {@link android.R.attr#launchMode} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"SCREEN_ORIENTATION_SENSOR_LANDSCAPE","true","false","false","true","true","int","6","[]","Optional[/**
 * Constant corresponding to <code>sensorLandscape</code> in
 * the {@link android.R.attr#screenOrientation} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"SCREEN_ORIENTATION_PORTRAIT","true","false","false","true","true","int","1","[]","Optional[/**
 * Constant corresponding to <code>portrait</code> in
 * the {@link android.R.attr#screenOrientation} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"SCREEN_ORIENTATION_NOSENSOR","true","false","false","true","true","int","5","[]","Optional[/**
 * Constant corresponding to <code>nosensor</code> in
 * the {@link android.R.attr#screenOrientation} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"CONFIG_SCREEN_LAYOUT","true","false","false","true","true","int","0x0100","[]","Optional[/**
 * Bit in {@link #configChanges} that indicates that the activity
 * can itself handle changes to the screen layout.  Set from the
 * {@link android.R.attr#configChanges} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"LAUNCH_SINGLE_TOP","true","false","false","true","true","int","1","[]","Optional[/**
 * Constant corresponding to <code>singleTop</code> in
 * the {@link android.R.attr#launchMode} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"CONFIG_KEYBOARD_HIDDEN","true","false","false","true","true","int","0x0020","[]","Optional[/**
 * Bit in {@link #configChanges} that indicates that the activity
 * can itself handle changes to the keyboard or navigation being hidden/exposed.
 * Note that inspite of the name, this applies to the changes to any
 * hidden states: keyboard or navigation.
 * Set from the {@link android.R.attr#configChanges} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"CONFIG_MNC","true","false","false","true","true","int","0x0002","[]","Optional[/**
 * Bit in {@link #configChanges} that indicates that the activity
 * can itself handle changes to the IMSI MNC.  Set from the
 * {@link android.R.attr#configChanges} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"CONFIG_FONT_SCALE","true","false","false","true","true","int","0x40000000","[]","Optional[/**
 * Bit in {@link #configChanges} that indicates that the activity
 * can itself handle changes to the font scaling factor.  Set from the
 * {@link android.R.attr#configChanges} attribute.  This is
 * not a core resource configutation, but a higher-level value, so its
 * constant starts at the high bits.
 */
]","\android\content\pm\ActivityInfo.java"
"SCREEN_ORIENTATION_REVERSE_LANDSCAPE","true","false","false","true","true","int","8","[]","Optional[/**
 * Constant corresponding to <code>reverseLandscape</code> in
 * the {@link android.R.attr#screenOrientation} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"SCREEN_ORIENTATION_UNSPECIFIED","true","false","false","true","true","int","-1","[]","Optional[/**
 * Constant corresponding to <code>unspecified</code> in
 * the {@link android.R.attr#screenOrientation} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"FLAG_MULTIPROCESS","true","false","false","true","true","int","0x0001","[]","Optional[/**
 * Bit in {@link #flags} indicating whether this activity is able to
 * run in multiple processes.  If
 * true, the system may instantiate it in the some process as the
 * process starting it in order to conserve resources.  If false, the
 * default, it always runs in {@link #processName}.  Set from the
 * {@link android.R.attr#multiprocess} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"FLAG_EXCLUDE_FROM_RECENTS","true","false","false","true","true","int","0x0020","[]","Optional[/**
 * Bit in {@link #flags} that indicates that the activity should not
 * appear in the list of recently launched activities.  Set from the
 * {@link android.R.attr#excludeFromRecents} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"permission","true","false","false","false","false","String","null","[]","Optional[/**
 * Optional name of a permission required to be able to access this
 * Activity.  From the ""permission"" attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"FLAG_NO_HISTORY","true","false","false","true","true","int","0x0080","[]","Optional[/**
 * Bit in {@link #flags} indicating that, when the user navigates away
 * from an activity, it should be finished.
 * Set from the
 * {@link android.R.attr#noHistory} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"LAUNCH_SINGLE_TASK","true","false","false","true","true","int","2","[]","Optional[/**
 * Constant corresponding to <code>singleTask</code> in
 * the {@link android.R.attr#launchMode} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"CONFIG_ORIENTATION","true","false","false","true","true","int","0x0080","[]","Optional[/**
 * Bit in {@link #configChanges} that indicates that the activity
 * can itself handle changes to the screen orientation.  Set from the
 * {@link android.R.attr#configChanges} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"flags","true","false","false","false","false","int","null","[]","Optional[/**
 * Options that have been set in the activity declaration in the
 * manifest.
 * These include:
 * {@link #FLAG_MULTIPROCESS},
 * {@link #FLAG_FINISH_ON_TASK_LAUNCH}, {@link #FLAG_CLEAR_TASK_ON_LAUNCH},
 * {@link #FLAG_ALWAYS_RETAIN_TASK_STATE},
 * {@link #FLAG_STATE_NOT_NEEDED}, {@link #FLAG_EXCLUDE_FROM_RECENTS},
 * {@link #FLAG_ALLOW_TASK_REPARENTING}, {@link #FLAG_NO_HISTORY},
 * {@link #FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS},
 */
]","\android\content\pm\ActivityInfo.java"
"CONFIG_NAVIGATION","true","false","false","true","true","int","0x0040","[]","Optional[/**
 * Bit in {@link #configChanges} that indicates that the activity
 * can itself handle changes to the navigation type.  Set from the
 * {@link android.R.attr#configChanges} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"theme","true","false","false","false","false","int","null","[]","Optional[/**
 * A style resource identifier (in the package's resources) of this
 * activity's theme.  From the ""theme"" attribute or, if not set, 0.
 */
]","\android\content\pm\ActivityInfo.java"
"FLAG_FINISH_ON_TASK_LAUNCH","true","false","false","true","true","int","0x0002","[]","Optional[/**
 * Bit in {@link #flags} indicating that, when the activity's task is
 * relaunched from home, this activity should be finished.
 * Set from the
 * {@link android.R.attr#finishOnTaskLaunch} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"CONFIG_UI_MODE","true","false","false","true","true","int","0x0200","[]","Optional[/**
 * Bit in {@link #configChanges} that indicates that the activity
 * can itself handle the ui mode. Set from the
 * {@link android.R.attr#configChanges} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"SCREEN_ORIENTATION_LANDSCAPE","true","false","false","true","true","int","0","[]","Optional[/**
 * Constant corresponding to <code>landscape</code> in
 * the {@link android.R.attr#screenOrientation} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"launchMode","true","false","false","false","false","int","null","[]","Optional[/**
 * The launch mode style requested by the activity.  From the
 * {@link android.R.attr#launchMode} attribute, one of
 * {@link #LAUNCH_MULTIPLE},
 * {@link #LAUNCH_SINGLE_TOP}, {@link #LAUNCH_SINGLE_TASK}, or
 * {@link #LAUNCH_SINGLE_INSTANCE}.
 */
]","\android\content\pm\ActivityInfo.java"
"taskAffinity","true","false","false","false","false","String","null","[]","Optional[/**
 * The affinity this activity has for another task in the system.  The
 * string here is the name of the task, often the package name of the
 * overall package.  If null, the activity has no affinity.  Set from the
 * {@link android.R.attr#taskAffinity} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"CONFIG_LOCALE","true","false","false","true","true","int","0x0004","[]","Optional[/**
 * Bit in {@link #configChanges} that indicates that the activity
 * can itself handle changes to the locale.  Set from the
 * {@link android.R.attr#configChanges} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"LAUNCH_SINGLE_INSTANCE","true","false","false","true","true","int","3","[]","Optional[/**
 * Constant corresponding to <code>singleInstance</code> in
 * the {@link android.R.attr#launchMode} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"SCREEN_ORIENTATION_SENSOR","true","false","false","true","true","int","4","[]","Optional[/**
 * Constant corresponding to <code>sensor</code> in
 * the {@link android.R.attr#screenOrientation} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS","true","false","false","true","true","int","0x0100","[]","Optional[/**
 * Bit in {@link #flags} indicating that, when a request to close system
 * windows happens, this activity is finished.
 * Set from the
 * {@link android.R.attr#finishOnCloseSystemDialogs} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"SCREEN_ORIENTATION_USER","true","false","false","true","true","int","2","[]","Optional[/**
 * Constant corresponding to <code>user</code> in
 * the {@link android.R.attr#screenOrientation} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"targetActivity","true","false","false","false","false","String","null","[]","Optional[/**
 * If this is an activity alias, this is the real activity class to run
 * for it.  Otherwise, this is null.
 */
]","\android\content\pm\ActivityInfo.java"
"CONFIG_TOUCHSCREEN","true","false","false","true","true","int","0x0008","[]","Optional[/**
 * Bit in {@link #configChanges} that indicates that the activity
 * can itself handle changes to the touchscreen type.  Set from the
 * {@link android.R.attr#configChanges} attribute.
 */
]","\android\content\pm\ActivityInfo.java"
"softInputMode","true","false","false","false","false","int","null","[]","Optional[/**
 * The desired soft input mode for this activity's main window.
 * Set from the {@link android.R.attr#windowSoftInputMode} attribute
 * in the activity's manifest.  May be any of the same values allowed
 * for {@link android.view.WindowManager.LayoutParams#softInputMode
 * WindowManager.LayoutParams.softInputMode}.  If 0 (unspecified),
 * the mode from the theme will be used.
 */
]","\android\content\pm\ActivityInfo.java"
"mMax","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\InputFilter.java"
"CREATOR","true","false","false","true","true","Creator<ServiceInfo>","new Creator<ServiceInfo>() {

    public ServiceInfo createFromParcel(Parcel source) {
        return new ServiceInfo(source);
    }

    public ServiceInfo[] newArray(int size) {
        return new ServiceInfo[size];
    }
}","[]","Optional.empty","\android\content\pm\ServiceInfo.java"
"permission","true","false","false","false","false","String","null","[]","Optional[/**
 * Optional name of a permission required to be able to access this
 * Service.  From the ""permission"" attribute.
 */
]","\android\content\pm\ServiceInfo.java"
"CREATOR","true","false","false","true","true","Creator<SyncStats>","new Creator<SyncStats>() {

    public SyncStats createFromParcel(Parcel in) {
        return new SyncStats(in);
    }

    public SyncStats[] newArray(int size) {
        return new SyncStats[size];
    }
}","[]","Optional.empty","\android\content\SyncStats.java"
"numEntries","true","false","false","false","false","long","null","[]","Optional[/**
 * Counter for tracking how many entries were affected by the sync operation, as defined
 * by the SyncAdapter.
 */
]","\android\content\SyncStats.java"
"numParseExceptions","true","false","false","false","false","long","null","[]","Optional[/**
 * The SyncAdapter had a problem with the data it received from the server or the storage
 * later. This problem will likely repeat if the request is tried again. The problem
 * will need to be cleared up by either the server or the storage layer (likely with help
 * from the user). If the SyncAdapter cleans up the data itself then it typically won't
 * increment this value although it may still do so in order to record that it had to
 * perform some cleanup. E.g., if the SyncAdapter received a bad entry from the server
 * when processing a feed of entries, it may choose to drop the entry and thus make
 * progress and still increment this value just so the SyncAdapter can record that an
 * error occurred. This is considered a hard error.
 */
]","\android\content\SyncStats.java"
"numSkippedEntries","true","false","false","false","false","long","null","[]","Optional[/**
 * Counter for tracking how many entries, either from the server or the local store, were
 * ignored during the sync operation. This could happen if the SyncAdapter detected some
 * unparsable data but decided to skip it and move on rather than failing immediately.
 */
]","\android\content\SyncStats.java"
"numUpdates","true","false","false","false","false","long","null","[]","Optional[/**
 * Counter for tracking how many updates were performed by the sync operation, as defined
 * by the SyncAdapter.
 */
]","\android\content\SyncStats.java"
"numDeletes","true","false","false","false","false","long","null","[]","Optional[/**
 * Counter for tracking how many deletes were performed by the sync operation, as defined
 * by the SyncAdapter.
 */
]","\android\content\SyncStats.java"
"numConflictDetectedExceptions","true","false","false","false","false","long","null","[]","Optional[/**
 * The SyncAdapter detected that there was an unrecoverable version conflict when it
 * attempted to update or delete a version of a resource on the server. This is expected
 * to clear itself automatically once the new state is retrieved from the server,
 * though it may remain until the user intervenes manually, perhaps by clearing the
 * local storage and starting over frmo scratch. This is considered a hard error.
 */
]","\android\content\SyncStats.java"
"numAuthExceptions","true","false","false","false","false","long","null","[]","Optional[/**
 * The SyncAdapter was unable to authenticate the {@link android.accounts.Account}
 * that was specified in the request. The user needs to take some action to resolve
 * before a future request can expect to succeed. This is considered a hard error.
 */
]","\android\content\SyncStats.java"
"numIoExceptions","true","false","false","false","false","long","null","[]","Optional[/**
 * The SyncAdapter had a problem, most likely with the network connectivity or a timeout
 * while waiting for a network response. The request may succeed if it is tried again
 * later. This is considered a soft error.
 */
]","\android\content\SyncStats.java"
"numInserts","true","false","false","false","false","long","null","[]","Optional[/**
 * Counter for tracking how many inserts were performed by the sync operation, as defined
 * by the SyncAdapter.
 */
]","\android\content\SyncStats.java"
"CATEGORY_SECONDARY","false","false","false","true","true","int","0x00030000","[]","Optional[/**
 * Category code for the order integer for items/groups that are
 * user-supplied secondary (infrequently used) options -- or/add this with
 * your base value.
 */
]","\android\view\Menu.java"
"FLAG_ALWAYS_PERFORM_CLOSE","false","false","false","true","true","int","0x0002","[]","Optional[/**
 * Flag for {@link #performShortcut(int, KeyEvent, int)}: if set, always
 * close the menu after executing the shortcut. Closing the menu also resets
 * the prepared state.
 */
]","\android\view\Menu.java"
"USER_SHIFT","false","false","false","true","true","int","0","[]","Optional[/**
 * Bit shift of the user portion of the order integer.
 * @hide
 */
]","\android\view\Menu.java"
"CATEGORY_MASK","false","false","false","true","true","int","0xffff0000","[]","Optional[/**
 * This is the part of an order integer that supplies the category of the
 * item.
 * @hide
 */
]","\android\view\Menu.java"
"CATEGORY_ALTERNATIVE","false","false","false","true","true","int","0x00040000","[]","Optional[/**
 * Category code for the order integer for items/groups that are
 * alternative actions on the data that is currently displayed -- or/add
 * this with your base value.
 */
]","\android\view\Menu.java"
"USER_MASK","false","false","false","true","true","int","0x0000ffff","[]","Optional[/**
 * This is the part of an order integer that the user can provide.
 * @hide
 */
]","\android\view\Menu.java"
"NONE","false","false","false","true","true","int","0","[]","Optional[/**
 * Value to use for group and item identifier integers when you don't care
 * about them.
 */
]","\android\view\Menu.java"
"CATEGORY_SHIFT","false","false","false","true","true","int","16","[]","Optional[/**
 * Bit shift of the category portion of the order integer.
 * @hide
 */
]","\android\view\Menu.java"
"FIRST","false","false","false","true","true","int","1","[]","Optional[/**
 * First value for group and item identifier integers.
 */
]","\android\view\Menu.java"
"CATEGORY_SYSTEM","false","false","false","true","true","int","0x00020000","[]","Optional[/**
 * Category code for the order integer for items/groups that are provided by
 * the system -- or/add this with your base value.
 */
]","\android\view\Menu.java"
"FLAG_PERFORM_NO_CLOSE","false","false","false","true","true","int","0x0001","[]","Optional[/**
 * Flag for {@link #performShortcut}: if set, do not close the menu after
 * executing the shortcut.
 */
]","\android\view\Menu.java"
"CATEGORY_CONTAINER","false","false","false","true","true","int","0x00010000","[]","Optional[/**
 * Category code for the order integer for items/groups that are part of a
 * container -- or/add this with your base value.
 */
]","\android\view\Menu.java"
"FLAG_APPEND_TO_GROUP","false","false","false","true","true","int","0x0001","[]","Optional[/**
 * Flag for {@link #addIntentOptions}: if set, do not automatically remove
 * any existing menu items in the same group.
 */
]","\android\view\Menu.java"
"mIsGpsEnabled","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\webkit\GeolocationService.java"
"mIsNetworkProviderAvailable","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\webkit\GeolocationService.java"
"TAG","false","false","true","true","true","String","""geolocationService""","[]","Optional[// Log tag
]","\android\webkit\GeolocationService.java"
"mIsGpsProviderAvailable","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\webkit\GeolocationService.java"
"mLocationManager","false","false","true","false","false","LocationManager","null","[]","Optional.empty","\android\webkit\GeolocationService.java"
"mNativeObject","false","false","true","false","false","long","null","[]","Optional.empty","\android\webkit\GeolocationService.java"
"mIsRunning","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\webkit\GeolocationService.java"
"mGroupFrom","false","false","true","false","false","int","null","[]","Optional[/**
 * The indices of columns that contain data to display for a group.
 */
]","\android\widget\SimpleCursorTreeAdapter.java"
"mChildFromNames","false","false","true","false","false","String","null","[]","Optional[/**
 * The name of the columns that contain the data to display for a child.
 */
]","\android\widget\SimpleCursorTreeAdapter.java"
"mGroupFromNames","false","false","true","false","false","String","null","[]","Optional[/**
 * The name of the columns that contain the data to display for a group.
 */
]","\android\widget\SimpleCursorTreeAdapter.java"
"mChildTo","false","false","true","false","false","int","null","[]","Optional[/**
 * The View IDs that will display a child's data fetched from the
 * corresponding column.
 */
]","\android\widget\SimpleCursorTreeAdapter.java"
"mViewBinder","false","false","true","false","false","ViewBinder","null","[]","Optional[/**
 * View binder, if supplied
 */
]","\android\widget\SimpleCursorTreeAdapter.java"
"mGroupTo","false","false","true","false","false","int","null","[]","Optional[/**
 * The View IDs that will display a group's data fetched from the
 * corresponding column.
 */
]","\android\widget\SimpleCursorTreeAdapter.java"
"mChildFrom","false","false","true","false","false","int","null","[]","Optional[/**
 * The indices of columns that contain data to display for a child.
 */
]","\android\widget\SimpleCursorTreeAdapter.java"
"mSyncRunnable","false","false","true","false","false","Runnable","new Runnable() {

    public void run() {
        syncMyPreferences();
    }
}","[]","Optional.empty","\android\preference\PreferenceGroupAdapter.java"
"name","false","false","true","false","false","String","null","[]","Optional.empty","\android\preference\PreferenceGroupAdapter.java"
"mIsSyncing","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\preference\PreferenceGroupAdapter.java"
"mPreferenceList","false","false","true","false","false","List<Preference>","null","[]","Optional[/**
 * Maps a position into this adapter -> {@link Preference}. These
 * {@link Preference}s don't have to be direct children of this
 * {@link PreferenceGroup}, they can be grand children or younger)
 */
]","\android\preference\PreferenceGroupAdapter.java"
"mPreferenceGroup","false","false","true","false","false","PreferenceGroup","null","[]","Optional[/**
 * The group that we are providing data from.
 */
]","\android\preference\PreferenceGroupAdapter.java"
"mHasReturnedViewTypeCount","false","false","true","false","false","boolean","false","[]","Optional[/**
 * Blocks the mPreferenceClassNames from being changed anymore.
 */
]","\android\preference\PreferenceGroupAdapter.java"
"mHandler","false","false","true","false","false","Handler","new Handler()","[]","Optional.empty","\android\preference\PreferenceGroupAdapter.java"
"TAG","false","false","true","true","true","String","""PreferenceGroupAdapter""","[]","Optional.empty","\android\preference\PreferenceGroupAdapter.java"
"resId","false","false","true","false","false","int","null","[]","Optional.empty","\android\preference\PreferenceGroupAdapter.java"
"mTempPreferenceLayout","false","false","true","false","false","PreferenceLayout","new PreferenceLayout()","[]","Optional.empty","\android\preference\PreferenceGroupAdapter.java"
"widgetResId","false","false","true","false","false","int","null","[]","Optional.empty","\android\preference\PreferenceGroupAdapter.java"
"mPreferenceLayouts","false","false","true","false","false","ArrayList<PreferenceLayout>","null","[]","Optional[/**
 * List of unique Preference and its subclasses' names. This is used to find
 * out how many types of views this adapter can return. Once the count is
 * returned, this cannot be modified (since the ListView only checks the
 * count once--when the adapter is being set). We will not recycle views for
 * Preference subclasses seen after the count has been returned.
 */
]","\android\preference\PreferenceGroupAdapter.java"
"TILTED_LOWPASS_ALPHA","false","false","true","true","true","float","computeLowpassAlpha(TILTED_TIME_CONSTANT_MS)","[]","Optional.empty","\android\view\WindowOrientationListener.java"
"mSensorManager","false","false","true","false","false","SensorManager","null","[]","Optional.empty","\android\view\WindowOrientationListener.java"
"mSensorEventListener","false","false","true","false","false","SensorEventListenerImpl","null","[]","Optional.empty","\android\view\WindowOrientationListener.java"
"mAllow180Rotation","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\view\WindowOrientationListener.java"
"THRESHOLDS","false","false","true","true","true","int","new int[][][] { { { 60, 180 }, { 180, 300 } }, { { 0, 30 }, { 195, 315 }, { 315, 360 } }, { { 0, 45 }, { 45, 165 }, { 330, 360 } }, // but that is no longer allowed.
{ { 0, 45 }, { 45, 135 }, { 135, 225 }, { 225, 315 }, { 315, 360 } } }","[]","Optional[// degrees for hysteresis.
]","\android\view\WindowOrientationListener.java"
"ROTATE_TO_WITH_180","false","false","true","true","true","int","new int[][] { { ROTATION_90, ROTATION_180, ROTATION_270 }, { ROTATION_0, ROTATION_180, ROTATION_90, ROTATION_0 }, { ROTATION_0, ROTATION_270, ROTATION_180, ROTATION_0 }, { ROTATION_0, ROTATION_90, ROTATION_270, ROTATION_0 } }","[]","Optional[// See THRESHOLDS_WITH_180
]","\android\view\WindowOrientationListener.java"
"ACCELERATING_TIME_CONSTANT_MS","false","false","true","true","true","int","2000","[]","Optional[// such readings.
]","\android\view\WindowOrientationListener.java"
"TILTED_TIME_CONSTANT_MS","false","false","true","true","true","int","500","[]","Optional[// When device is partially tilted towards the sky or ground
]","\android\view\WindowOrientationListener.java"
"mEnabled","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\view\WindowOrientationListener.java"
"ROTATE_TO","false","false","true","true","true","int","new int[][] { { ROTATION_90, ROTATION_270 }, { ROTATION_0, ROTATION_270, ROTATION_0 }, { ROTATION_0, ROTATION_90, ROTATION_0 }, { ROTATION_0, ROTATION_90, ROTATION_0, ROTATION_270, ROTATION_0 } }","[]","Optional[// See THRESHOLDS
]","\android\view\WindowOrientationListener.java"
"mOrientationListener","false","false","true","false","false","WindowOrientationListener","null","[]","Optional.empty","\android\view\WindowOrientationListener.java"
"ACCELERATING_LOWPASS_ALPHA","false","false","true","true","true","float","computeLowpassAlpha(ACCELERATING_TIME_CONSTANT_MS)","[]","Optional.empty","\android\view\WindowOrientationListener.java"
"mOrientationAngle","false","false","true","false","false","float","0","[]","Optional[// low-pass filtered
]","\android\view\WindowOrientationListener.java"
"ROTATION_90","false","false","true","true","true","int","1","[]","Optional.empty","\android\view\WindowOrientationListener.java"
"MAX_TILT","false","false","true","true","true","int","75","[]","Optional[// when screen is facing the sky or ground), we completely ignore orientation data.
]","\android\view\WindowOrientationListener.java"
"PARTIAL_TILT","false","false","true","true","true","int","50","[]","Optional[// picking one up).
]","\android\view\WindowOrientationListener.java"
"mAccelerationDistrust","false","false","true","false","false","int","0","[]","Optional[// based on magnitude != gravity
]","\android\view\WindowOrientationListener.java"
"MAX_DEVIATION_FROM_GRAVITY","false","false","true","true","true","float","1.5f","[]","Optional[// high time constant.
]","\android\view\WindowOrientationListener.java"
"MIN_ABS_ACCELERATION","false","false","true","true","true","float","1.5f","[]","Optional[// turned on may result in (0, 0, 0).
]","\android\view\WindowOrientationListener.java"
"SURFACE_TO_INTERNAL_ROTATION","false","false","true","true","true","int","new int[] { ROTATION_0, ROTATION_90, ROTATION_180, ROTATION_270 }","[]","Optional[// Mapping Surface rotation values to internal aliases.
]","\android\view\WindowOrientationListener.java"
"INTERNAL_TO_SURFACE_ROTATION","false","false","true","true","true","int","new int[] { Surface.ROTATION_0, Surface.ROTATION_90, Surface.ROTATION_270, Surface.ROTATION_180 }","[]","Optional[// Mapping our internal aliases into actual Surface rotation values
]","\android\view\WindowOrientationListener.java"
"mRate","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\WindowOrientationListener.java"
"RADIANS_TO_DEGREES","false","false","true","true","true","float","(float) (180 / Math.PI)","[]","Optional[// We work with all angles in degrees in this class.
]","\android\view\WindowOrientationListener.java"
"DEFAULT_LOWPASS_ALPHA","false","false","true","true","true","float","computeLowpassAlpha(DEFAULT_TIME_CONSTANT_MS)","[]","Optional.empty","\android\view\WindowOrientationListener.java"
"_DATA_Z","false","false","true","true","true","int","2","[]","Optional.empty","\android\view\WindowOrientationListener.java"
"THRESHOLDS_WITH_180","false","false","true","true","true","int","new int[][][] { { { 60, 165 }, { 165, 195 }, { 195, 300 } }, { { 0, 30 }, { 165, 195 }, { 195, 315 }, { 315, 360 } }, { { 0, 45 }, { 45, 165 }, { 165, 195 }, { 330, 360 } }, { { 0, 45 }, { 45, 135 }, { 225, 315 }, { 315, 360 } } }","[]","Optional[// Thresholds that allow all 4 orientations.
]","\android\view\WindowOrientationListener.java"
"_DATA_X","false","false","true","true","true","int","0","[]","Optional[// Indices into SensorEvent.values
]","\android\view\WindowOrientationListener.java"
"_DATA_Y","false","false","true","true","true","int","1","[]","Optional.empty","\android\view\WindowOrientationListener.java"
"DEFAULT_TIME_CONSTANT_MS","false","false","true","true","true","int","100","[]","Optional[// When device is near-vertical (screen approximately facing the horizon)
]","\android\view\WindowOrientationListener.java"
"SAMPLING_PERIOD_MS","false","false","true","true","true","int","200","[]","Optional[// that's not enough to significantly skew our results.
]","\android\view\WindowOrientationListener.java"
"ROTATION_180","false","false","true","true","true","int","3","[]","Optional.empty","\android\view\WindowOrientationListener.java"
"TAG","false","false","true","true","true","String","""WindowOrientationListener""","[]","Optional.empty","\android\view\WindowOrientationListener.java"
"mTiltDistrust","false","false","true","false","false","int","0","[]","Optional[// based on tilt close to +/- 90 degrees
]","\android\view\WindowOrientationListener.java"
"ROTATION_270","false","false","true","true","true","int","2","[]","Optional.empty","\android\view\WindowOrientationListener.java"
"mRotation","false","false","true","false","false","int","ROTATION_0","[]","Optional[// Current orientation state
]","\android\view\WindowOrientationListener.java"
"localLOGV","false","false","true","true","true","boolean","DEBUG || Config.DEBUG","[]","Optional.empty","\android\view\WindowOrientationListener.java"
"mTiltAngle","false","false","true","false","false","float","0","[]","Optional[// low-pass filtered
]","\android\view\WindowOrientationListener.java"
"ROTATION_0","false","false","true","true","true","int","0","[]","Optional[// ROTATION_90 = right side of device facing the sky, etc.
]","\android\view\WindowOrientationListener.java"
"mSensor","false","false","true","false","false","Sensor","null","[]","Optional.empty","\android\view\WindowOrientationListener.java"
"MAX_TRANSITION_TILT","false","false","true","true","true","int","new int[] { MAX_TILT, 65, 65, 40 }","[]","Optional[// particular orientation here.
]","\android\view\WindowOrientationListener.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\view\WindowOrientationListener.java"
"mIsBeingDragged","false","false","true","false","false","boolean","false","[]","Optional[/**
 * True if the user is currently dragging this ScrollView around. This is
 * not the same as 'is being flinged', which can be checked by
 * mScroller.isFinished() (flinging begins when the user lifts his finger).
 */
]","\android\widget\HorizontalScrollView.java"
"mEdgeGlowLeft","false","false","true","false","false","EdgeGlow","null","[]","Optional.empty","\android\widget\HorizontalScrollView.java"
"mScrollViewMovedFocus","false","false","true","false","false","boolean","null","[]","Optional[/**
 * Flag to indicate that we are moving focus ourselves. This is so the
 * code that watches for focus changes initiated outside this ScrollView
 * knows that it does not have to do anything.
 */
]","\android\widget\HorizontalScrollView.java"
"mVelocityTracker","false","false","true","false","false","VelocityTracker","null","[]","Optional[/**
 * Determines speed during touch scrolling
 */
]","\android\widget\HorizontalScrollView.java"
"mSmoothScrollingEnabled","false","false","true","false","false","boolean","true","[]","Optional[/**
 * Whether arrow scrolling is animated.
 */
]","\android\widget\HorizontalScrollView.java"
"INVALID_POINTER","false","false","true","true","true","int","-1","[]","Optional[/**
 * Sentinel value for no current active pointer.
 * Used by {@link #mActivePointerId}.
 */
]","\android\widget\HorizontalScrollView.java"
"mOverscrollDistance","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\HorizontalScrollView.java"
"mChildToScrollTo","false","false","true","false","false","View","null","[]","Optional[/**
 * The child to give focus to in the event that a child has requested focus while the
 * layout is dirty. This prevents the scroll from being wrong if the child has not been
 * laid out before requesting focus.
 */
]","\android\widget\HorizontalScrollView.java"
"mIsLayoutDirty","false","false","true","false","false","boolean","true","[]","Optional[/**
 * True when the layout has changed but the traversal has not come through yet.
 * Ideally the view hierarchy would keep track of this for us.
 */
]","\android\widget\HorizontalScrollView.java"
"mScroller","false","false","true","false","false","OverScroller","null","[]","Optional.empty","\android\widget\HorizontalScrollView.java"
"MAX_SCROLL_FACTOR","false","false","true","true","true","float","ScrollView.MAX_SCROLL_FACTOR","[]","Optional.empty","\android\widget\HorizontalScrollView.java"
"mOverflingDistance","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\HorizontalScrollView.java"
"mTempRect","false","false","true","false","true","Rect","new Rect()","[]","Optional.empty","\android\widget\HorizontalScrollView.java"
"mEdgeGlowRight","false","false","true","false","false","EdgeGlow","null","[]","Optional.empty","\android\widget\HorizontalScrollView.java"
"mActivePointerId","false","false","true","false","false","int","INVALID_POINTER","[]","Optional[/**
 * ID of the active pointer. This is used to retain consistency during
 * drags/flings if multiple pointers are used.
 */
]","\android\widget\HorizontalScrollView.java"
"mLastMotionX","false","false","true","false","false","float","null","[]","Optional[/**
 * Position of the last motion event.
 */
]","\android\widget\HorizontalScrollView.java"
"mMaximumVelocity","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\HorizontalScrollView.java"
"mFillViewport","false","false","true","false","false","boolean","null","[]","Optional[/**
 * When set to true, the scroll view measure its child to make it fill the currently
 * visible area.
 */
]","\android\widget\HorizontalScrollView.java"
"mTouchSlop","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\HorizontalScrollView.java"
"mLastScroll","false","false","true","false","false","long","null","[]","Optional.empty","\android\widget\HorizontalScrollView.java"
"ANIMATED_SCROLL_GAP","false","false","true","true","true","int","ScrollView.ANIMATED_SCROLL_GAP","[]","Optional.empty","\android\widget\HorizontalScrollView.java"
"mMinimumVelocity","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\HorizontalScrollView.java"
"mDidDexOpt","true","false","false","false","false","boolean","null","[]","Optional[// For use by package manager to keep track of where it has done dexopt.
]","\android\content\pm\PackageParser.java"
"mParseActivityAliasArgs","false","false","true","false","false","ParseComponentArgs","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"mPath","true","false","false","false","false","String","null","[]","Optional[// If this is a 3rd party app, this is the path of the zip file.
]","\android\content\pm\PackageParser.java"
"mAppMetaData","true","false","false","false","false","Bundle","null","[]","Optional[// We store the application meta-data independently to avoid multiple unwanted references
]","\android\content\pm\PackageParser.java"
"mScanPath","true","false","false","false","false","String","null","[]","Optional[// file an app came from.
]","\android\content\pm\PackageParser.java"
"sCompatibilityModeEnabled","false","false","true","true","false","boolean","true","[]","Optional.empty","\android\content\pm\PackageParser.java"
"sdkVersion","true","false","false","false","true","int","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"labelRes","true","false","false","false","false","int","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"syncable","true","false","false","false","false","boolean","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"mParseServiceArgs","false","false","true","false","false","ParseComponentArgs","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"mOriginalPackages","true","false","false","false","false","ArrayList<String>","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"activity","true","false","false","false","true","Activity","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"icon","true","false","false","false","false","int","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"permissionGroups","true","false","false","false","true","ArrayList<PermissionGroup>","new ArrayList<PermissionGroup>(0)","[]","Optional.empty","\android\content\pm\PackageParser.java"
"sa","false","false","false","false","false","TypedArray","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"metaData","true","false","false","false","false","Bundle","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"PARSE_DEFAULT_INSTALL_LOCATION","false","false","true","true","true","int","PackageInfo.INSTALL_LOCATION_UNSPECIFIED","[]","Optional.empty","\android\content\pm\PackageParser.java"
"services","true","false","false","false","true","ArrayList<Service>","new ArrayList<Service>(0)","[]","Optional.empty","\android\content\pm\PackageParser.java"
"configPreferences","true","false","false","false","true","ArrayList<ConfigurationInfo>","new ArrayList<ConfigurationInfo>()","[]","Optional[/*
         *  Applications hardware preferences
         */
]","\android\content\pm\PackageParser.java"
"mOperationPending","true","false","false","false","false","boolean","null","[]","Optional[// Whether an operation is currently pending on this package
]","\android\content\pm\PackageParser.java"
"PARSE_FORWARD_LOCK","true","false","false","true","true","int","1 << 4","[]","Optional.empty","\android\content\pm\PackageParser.java"
"mSync","false","false","true","true","true","Object","new Object()","[]","Optional.empty","\android\content\pm\PackageParser.java"
"PARSE_ON_SDCARD","true","false","false","true","true","int","1 << 5","[]","Optional.empty","\android\content\pm\PackageParser.java"
"outError","false","false","false","false","true","String","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"processRes","false","false","false","false","true","int","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"PARSE_MUST_BE_APK","true","false","false","true","true","int","1 << 2","[]","Optional.empty","\android\content\pm\PackageParser.java"
"componentName","false","false","false","false","false","ComponentName","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"logoRes","false","false","false","false","true","int","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"info","true","false","false","false","true","InstrumentationInfo","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"mReadBuffer","false","false","true","true","false","WeakReference<byte[]>","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"mSeparateProcesses","false","false","true","false","false","String","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"nameRes","false","false","false","false","true","int","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"name","true","false","false","false","true","String","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"PARSE_IS_SYSTEM","true","false","false","true","true","int","1 << 0","[]","Optional.empty","\android\content\pm\PackageParser.java"
"mArchiveSourcePath","false","false","true","false","false","String","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"iconRes","false","false","false","false","true","int","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"protectedBroadcasts","true","false","false","false","false","ArrayList<String>","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"NEW_PERMISSIONS","true","false","false","true","true","PackageParser.NewPermissionInfo","new PackageParser.NewPermissionInfo[] { new PackageParser.NewPermissionInfo(android.Manifest.permission.WRITE_EXTERNAL_STORAGE, android.os.Build.VERSION_CODES.DONUT, 0), new PackageParser.NewPermissionInfo(android.Manifest.permission.READ_PHONE_STATE, android.os.Build.VERSION_CODES.DONUT, 0) }","[]","Optional[/**
 * List of new permissions that have been added since 1.0.
 * NOTE: These must be declared in SDK version order, with permissions
 * added to older SDKs appearing before those added to newer SDKs.
 * @hide
 */
]","\android\content\pm\PackageParser.java"
"nonLocalizedLabel","true","false","false","false","false","CharSequence","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"owner","true","false","false","false","true","Package","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"mSignatures","true","false","false","false","false","Signature","null","[]","Optional[// Signatures that were read from the package.
]","\android\content\pm\PackageParser.java"
"mRealPackage","true","false","false","false","false","String","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"mSharedUserId","true","false","false","false","false","String","null","[]","Optional[// The shared user id that this package wants to use.
]","\android\content\pm\PackageParser.java"
"service","true","false","false","false","true","Service","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"ANDROID_RESOURCES","false","false","true","true","true","String","""http://schemas.android.com/apk/res/android""","[]","Optional.empty","\android\content\pm\PackageParser.java"
"usesOptionalLibraries","true","false","false","false","false","ArrayList<String>","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"mPreferredOrder","true","false","false","false","false","int","0","[]","Optional[// preferred up order.
]","\android\content\pm\PackageParser.java"
"PARSE_IGNORE_PROCESSES","true","false","false","true","true","int","1 << 3","[]","Optional.empty","\android\content\pm\PackageParser.java"
"permissions","true","false","false","false","true","ArrayList<Permission>","new ArrayList<Permission>(0)","[]","Optional.empty","\android\content\pm\PackageParser.java"
"instrumentation","true","false","false","false","true","ArrayList<Instrumentation>","new ArrayList<Instrumentation>(0)","[]","Optional.empty","\android\content\pm\PackageParser.java"
"mVersionCode","true","false","false","false","false","int","null","[]","Optional[// The version code declared for this package.
]","\android\content\pm\PackageParser.java"
"installLocation","true","false","false","false","false","int","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"mParseError","false","false","true","false","false","int","PackageManager.INSTALL_SUCCEEDED","[]","Optional.empty","\android\content\pm\PackageParser.java"
"requestedPermissions","true","false","false","false","true","ArrayList<String>","new ArrayList<String>()","[]","Optional.empty","\android\content\pm\PackageParser.java"
"enabledRes","false","false","false","false","true","int","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"flags","false","false","false","false","false","int","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"mSharedUserLabel","true","false","false","false","false","int","null","[]","Optional[// The shared user label that this package wants to use.
]","\android\content\pm\PackageParser.java"
"mAdoptPermissions","true","false","false","false","false","ArrayList<String>","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"className","true","false","false","false","true","String","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"SDK_CODENAME","false","false","true","true","true","String","""REL"".equals(Build.VERSION.CODENAME) ? null : Build.VERSION.CODENAME","[]","Optional.empty","\android\content\pm\PackageParser.java"
"mSetEnabled","true","false","false","false","false","int","PackageManager.COMPONENT_ENABLED_STATE_DEFAULT","[]","Optional[// User set enabled state.
]","\android\content\pm\PackageParser.java"
"mParseInstrumentationArgs","false","false","true","false","false","ParsePackageItemArgs","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"hasDefault","true","false","false","false","false","boolean","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"reqFeatures","true","false","false","false","false","ArrayList<FeatureInfo>","null","[]","Optional[/*
         *  Applications requested features
         */
]","\android\content\pm\PackageParser.java"
"PARSE_IS_SYSTEM_DIR","true","false","false","true","true","int","1 << 6","[]","Optional.empty","\android\content\pm\PackageParser.java"
"componentShortName","false","false","false","false","false","String","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"TAG","false","false","true","true","true","String","""PackageParser""","[]","Optional.empty","\android\content\pm\PackageParser.java"
"usesLibraryFiles","true","false","false","false","false","String","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"SDK_VERSION","false","false","true","true","true","int","Build.VERSION.SDK_INT","[]","Optional.empty","\android\content\pm\PackageParser.java"
"logo","true","false","false","false","false","int","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"tag","false","false","false","false","false","String","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"mParseProviderArgs","false","false","true","false","false","ParseComponentArgs","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"fileVersion","true","false","false","false","true","int","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"group","true","false","false","false","false","PermissionGroup","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"mExtras","true","false","false","false","false","Object","null","[]","Optional[// Additional data supplied by callers.
]","\android\content\pm\PackageParser.java"
"tree","true","false","false","false","false","boolean","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"mParseActivityArgs","false","false","true","false","false","ParseComponentArgs","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"RIGID_PARSER","false","false","true","true","true","boolean","false","[]","Optional[/**
 * If set to true, we will only allow package files that exactly match
 * the DTD.  Otherwise, we try to get as much from the package as we
 * can without failing.  This should normally be set to false, to
 * support extensions to the DTD in future versions.
 */
]","\android\content\pm\PackageParser.java"
"descriptionRes","false","false","false","false","true","int","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"applicationInfo","true","false","false","false","true","ApplicationInfo","new ApplicationInfo()","[]","Optional[// For now we only support one application per package.
]","\android\content\pm\PackageParser.java"
"sepProcesses","false","false","false","false","true","String","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"mVersionName","true","false","false","false","false","String","null","[]","Optional[// The version name declared for this package.
]","\android\content\pm\PackageParser.java"
"receivers","true","false","false","false","true","ArrayList<Activity>","new ArrayList<Activity>(0)","[]","Optional.empty","\android\content\pm\PackageParser.java"
"packageName","true","false","false","false","false","String","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"PARSE_CHATTY","true","false","false","true","true","int","1 << 1","[]","Optional.empty","\android\content\pm\PackageParser.java"
"intents","true","false","false","false","true","ArrayList<II>","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"usesLibraries","true","false","false","false","false","ArrayList<String>","null","[]","Optional.empty","\android\content\pm\PackageParser.java"
"activities","true","false","false","false","true","ArrayList<Activity>","new ArrayList<Activity>(0)","[]","Optional.empty","\android\content\pm\PackageParser.java"
"providers","true","false","false","false","true","ArrayList<Provider>","new ArrayList<Provider>(0)","[]","Optional.empty","\android\content\pm\PackageParser.java"
"mDataValid","false","true","false","false","false","boolean","null","[]","Optional[/**
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\widget\CursorAdapter.java"
"mChangeObserver","false","true","false","false","false","ChangeObserver","null","[]","Optional[/**
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\widget\CursorAdapter.java"
"mContext","false","true","false","false","false","Context","null","[]","Optional[/**
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\widget\CursorAdapter.java"
"mCursorFilter","false","true","false","false","false","CursorFilter","null","[]","Optional[/**
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\widget\CursorAdapter.java"
"mFilterQueryProvider","false","true","false","false","false","FilterQueryProvider","null","[]","Optional[/**
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\widget\CursorAdapter.java"
"mCursor","false","true","false","false","false","Cursor","null","[]","Optional[/**
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\widget\CursorAdapter.java"
"mAutoRequery","false","true","false","false","false","boolean","null","[]","Optional[/**
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\widget\CursorAdapter.java"
"mRowIDColumn","false","true","false","false","false","int","null","[]","Optional[/**
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\widget\CursorAdapter.java"
"mDataSetObserver","false","true","false","false","false","DataSetObserver","new MyDataSetObserver()","[]","Optional[/**
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\widget\CursorAdapter.java"
"mProgressBar","false","false","false","false","false","ProgressBar","null","[]","Optional.empty","\com\android\internal\widget\TextProgressBar.java"
"mChronometerGravity","false","false","false","false","false","int","Gravity.NO_GRAVITY","[]","Optional.empty","\com\android\internal\widget\TextProgressBar.java"
"PROGRESSBAR_ID","false","false","false","true","true","int","android.R.id.progress","[]","Optional.empty","\com\android\internal\widget\TextProgressBar.java"
"mDuration","false","false","false","false","false","int","-1","[]","Optional.empty","\com\android\internal\widget\TextProgressBar.java"
"TAG","true","false","false","true","true","String","""TextProgressBar""","[]","Optional.empty","\com\android\internal\widget\TextProgressBar.java"
"CHRONOMETER_ID","false","false","false","true","true","int","android.R.id.text1","[]","Optional.empty","\com\android\internal\widget\TextProgressBar.java"
"mChronometerFollow","false","false","false","false","false","boolean","false","[]","Optional.empty","\com\android\internal\widget\TextProgressBar.java"
"mDurationBase","false","false","false","false","false","long","-1","[]","Optional.empty","\com\android\internal\widget\TextProgressBar.java"
"mChronometer","false","false","false","false","false","Chronometer","null","[]","Optional.empty","\com\android\internal\widget\TextProgressBar.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<ResultInfo>","new Parcelable.Creator<ResultInfo>() {

    public ResultInfo createFromParcel(Parcel in) {
        return new ResultInfo(in);
    }

    public ResultInfo[] newArray(int size) {
        return new ResultInfo[size];
    }
}","[]","Optional.empty","\android\app\ResultInfo.java"
"mResultWho","true","false","false","false","true","String","null","[]","Optional.empty","\android\app\ResultInfo.java"
"mRequestCode","true","false","false","false","true","int","null","[]","Optional.empty","\android\app\ResultInfo.java"
"mData","true","false","false","false","true","Intent","null","[]","Optional.empty","\android\app\ResultInfo.java"
"mResultCode","true","false","false","false","true","int","null","[]","Optional.empty","\android\app\ResultInfo.java"
"path","true","false","false","false","false","String","null","[]","Optional.empty","\android\os\storage\StorageManager.java"
"mStorageEventListener","false","false","false","false","true","StorageEventListener","null","[]","Optional.empty","\android\os\storage\StorageManager.java"
"state","true","false","false","false","true","int","null","[]","Optional.empty","\android\os\storage\StorageManager.java"
"mListeners","false","false","true","false","false","SparseArray<ObbListenerDelegate>","new SparseArray<ObbListenerDelegate>()","[]","Optional.empty","\android\os\storage\StorageManager.java"
"available","true","false","false","false","false","boolean","null","[]","Optional.empty","\android\os\storage\StorageManager.java"
"mNextNonce","false","false","true","false","true","AtomicInteger","new AtomicInteger(0)","[]","Optional[/*
     * Next available nonce
     */
]","\android\os\storage\StorageManager.java"
"mMountService","false","false","true","false","false","IMountService","null","[]","Optional[/*
     * Our internal MountService binder reference
     */
]","\android\os\storage\StorageManager.java"
"mBinderListener","false","false","true","false","false","MountServiceBinderListener","null","[]","Optional[/*
     * Target listener for binder callbacks
     */
]","\android\os\storage\StorageManager.java"
"EVENT_STORAGE_STATE_CHANGED","false","false","false","true","true","int","2","[]","Optional.empty","\android\os\storage\StorageManager.java"
"mObbActionListener","false","false","true","false","true","ObbActionListener","new ObbActionListener()","[]","Optional[/**
 * Binder listener for OBB action results.
 */
]","\android\os\storage\StorageManager.java"
"EVENT_OBB_STATE_CHANGED","false","false","false","true","true","int","3","[]","Optional.empty","\android\os\storage\StorageManager.java"
"mHandler","false","false","true","false","true","Handler","null","[]","Optional.empty","\android\os\storage\StorageManager.java"
"TAG","false","false","true","true","true","String","""StorageManager""","[]","Optional.empty","\android\os\storage\StorageManager.java"
"mTgtLooper","false","false","false","false","false","Looper","null","[]","Optional[/*
     * The looper target for callbacks
     */
]","\android\os\storage\StorageManager.java"
"oldState","true","false","false","false","false","String","null","[]","Optional.empty","\android\os\storage\StorageManager.java"
"mObbEventListenerRef","false","false","true","false","true","WeakReference<OnObbStateChangeListener>","null","[]","Optional.empty","\android\os\storage\StorageManager.java"
"nonce","false","false","true","false","true","int","null","[]","Optional.empty","\android\os\storage\StorageManager.java"
"newState","true","false","false","false","false","String","null","[]","Optional.empty","\android\os\storage\StorageManager.java"
"mMessage","false","false","true","false","false","Message","null","[]","Optional.empty","\android\os\storage\StorageManager.java"
"EVENT_UMS_CONNECTION_CHANGED","false","false","false","true","true","int","1","[]","Optional.empty","\android\os\storage\StorageManager.java"
"mAutoRedraw","false","false","true","false","false","boolean","null","[]","Optional[// true means redraw the screen all-the-time. Only with AUTO_REDRAW_HACK
]","\android\webkit\WebView.java"
"mWebViewCore","false","false","true","false","false","WebViewCore","null","[]","Optional[// destroyed.
]","\android\webkit\WebView.java"
"TRACKBALL_TIMEOUT","false","false","true","true","true","int","200","[]","Optional.empty","\android\webkit\WebView.java"
"UPDATE_TEXT_SELECTION_MSG_ID","false","false","false","true","true","int","112","[]","Optional.empty","\android\webkit\WebView.java"
"MAX_SLOPE_FOR_DIAG","false","false","true","true","true","float","1.5f","[]","Optional.empty","\android\webkit\WebView.java"
"mDrawSelectionPointer","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\webkit\WebView.java"
"mTrackballUpTime","false","false","true","false","false","long","0","[]","Optional.empty","\android\webkit\WebView.java"
"mOverScrollBorder","false","false","true","true","false","Paint","null","[]","Optional.empty","\android\webkit\WebView.java"
"mHistoryPicture","false","false","true","false","false","Picture","null","[]","Optional.empty","\android\webkit\WebView.java"
"DRAGGING_STATE","false","false","true","true","true","int","0","[]","Optional[// inner (non-state) classes can't have enums :(
]","\android\webkit\WebView.java"
"FIND_AGAIN","false","false","false","true","true","int","126","[]","Optional.empty","\android\webkit\WebView.java"
"SCHEME_TEL","true","false","false","true","true","String","""tel:""","[]","Optional[/**
 * URI scheme for telephone number
 */
]","\android\webkit\WebView.java"
"MOTIONLESS_IGNORE","false","false","true","true","true","int","3","[]","Optional.empty","\android\webkit\WebView.java"
"mDeferTouchProcess","false","false","true","false","false","boolean","null","[]","Optional[// default is not set, the UI will continue handle them.
]","\android\webkit\WebView.java"
"mLastWidthSent","false","false","false","false","false","int","null","[]","Optional[// sending the same dimensions more than once.
]","\android\webkit\WebView.java"
"mDragFromTextInput","false","false","false","false","false","boolean","null","[]","Optional[// so that we know not to hide the cursor
]","\android\webkit\WebView.java"
"mMinZoomScaleFixed","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\webkit\WebView.java"
"mScale","false","false","false","false","false","float","null","[]","Optional.empty","\android\webkit\WebView.java"
"TOUCH_DRAG_START_MODE","false","false","true","true","true","int","2","[]","Optional.empty","\android\webkit\WebView.java"
"mDeferTouchMode","false","false","true","false","false","int","TOUCH_DONE_MODE","[]","Optional[// separately. Currently no snapping or fling in the deferred process mode
]","\android\webkit\WebView.java"
"MINIMUM_SCALE_INCREMENT","false","false","true","true","false","float","0.01f","[]","Optional.empty","\android\webkit\WebView.java"
"mEdgeGlowLeft","false","false","true","false","false","EdgeGlow","null","[]","Optional.empty","\android\webkit\WebView.java"
"SCROLL_BY_MSG_ID","false","false","false","true","true","int","102","[]","Optional.empty","\android\webkit\WebView.java"
"mNeedToAdjustWebTextView","false","false","true","false","false","boolean","null","[]","Optional[/**
 * Need to adjust the WebTextView after a change in zoom, since mActualScale
 * has changed.  This is especially important for password fields, which are
 * drawn by the WebTextView, since it conveys more information than what
 * webkit draws.  Thus we need to reposition it to show in the correct
 * place.
 */
]","\android\webkit\WebView.java"
"mLastCursorTime","false","false","true","false","false","long","0","[]","Optional.empty","\android\webkit\WebView.java"
"mSnapPositive","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\webkit\WebView.java"
"mNativeClass","false","false","true","false","false","int","null","[]","Optional[// created.
]","\android\webkit\WebView.java"
"mDrawHistory","false","false","true","false","false","boolean","false","[]","Optional[// draw history
]","\android\webkit\WebView.java"
"TOUCH_INIT_MODE","false","false","true","true","true","int","1","[]","Optional.empty","\android\webkit\WebView.java"
"mPlusMinusZoomControls","false","false","false","false","false","ZoomControls","null","[]","Optional.empty","\android\webkit\WebView.java"
"NEW_PICTURE_MSG_ID","false","false","false","true","true","int","105","[]","Optional.empty","\android\webkit\WebView.java"
"mXY","false","false","true","false","false","float","new float[2]","[]","Optional.empty","\android\webkit\WebView.java"
"LONG_PRESS_CENTER","false","false","false","true","true","int","114","[]","Optional.empty","\android\webkit\WebView.java"
"mFindIsUp","false","false","true","false","false","boolean","null","[]","Optional[// or not we draw the highlights for matches.
]","\android\webkit\WebView.java"
"GEO_TYPE","true","false","false","true","true","int","3","[]","Optional[/**
 * HitTestResult for hitting a map address
 */
]","\android\webkit\WebView.java"
"mInvFinalZoomScale","false","false","true","false","false","float","null","[]","Optional.empty","\android\webkit\WebView.java"
"DEFAULT_MIN_ZOOM_SCALE","false","false","true","true","false","float","null","[]","Optional.empty","\android\webkit\WebView.java"
"mEnabled","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebView.java"
"SET_ROOT_LAYER_MSG_ID","false","false","false","true","true","int","124","[]","Optional.empty","\android\webkit\WebView.java"
"SRC_IMAGE_ANCHOR_TYPE","true","false","false","true","true","int","8","[]","Optional[/**
 * HitTestResult for hitting a HTML::a tag with src=http + HTML::img
 */
]","\android\webkit\WebView.java"
"MIN_FLING_TIME","false","false","true","true","true","int","250","[]","Optional[// needed to avoid flinging after a pause of no movement
]","\android\webkit\WebView.java"
"mLastTouchY","false","false","true","false","false","float","null","[]","Optional.empty","\android\webkit\WebView.java"
"mLastTouchX","false","false","true","false","false","float","null","[]","Optional[/**
 * Position of the last touch event.
 */
]","\android\webkit\WebView.java"
"mLastTouchUpTime","false","false","true","false","false","long","0","[]","Optional[// for event log
]","\android\webkit\WebView.java"
"TOUCH_DOUBLE_TAP_MODE","false","false","true","true","true","int","6","[]","Optional.empty","\android\webkit\WebView.java"
"DRAW_EXTRAS_CURSOR_RING","false","false","true","true","true","int","3","[]","Optional.empty","\android\webkit\WebView.java"
"mVelocityTracker","false","false","false","false","false","VelocityTracker","null","[]","Optional[/**
 * Helper class to get velocity for fling
 */
]","\android\webkit\WebView.java"
"mFindHeight","false","false","true","false","false","int","null","[]","Optional.empty","\android\webkit\WebView.java"
"mTrackballLastTime","false","false","true","false","false","long","0","[]","Optional.empty","\android\webkit\WebView.java"
"SPAWN_SCROLL_TO_MSG_ID","false","false","false","true","true","int","103","[]","Optional[// ! arg1=x, arg2=y
]","\android\webkit\WebView.java"
"PREVENT_TOUCH_ID","false","false","false","true","true","int","115","[]","Optional.empty","\android\webkit\WebView.java"
"mId","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebView.java"
"mMultiple","false","false","true","false","false","boolean","null","[]","Optional[// Whether the listbox allows multiple selection.
]","\android\webkit\WebView.java"
"mContentHeight","false","false","true","false","false","int","null","[]","Optional[// cache of value from WebViewCore
]","\android\webkit\WebView.java"
"mTrackballFirstTime","false","false","true","false","false","long","0","[]","Optional.empty","\android\webkit\WebView.java"
"mVerticalScrollBarMode","false","false","true","false","false","int","SCROLLBAR_AUTO","[]","Optional.empty","\android\webkit\WebView.java"
"mUpdateTextWrap","false","false","false","false","true","boolean","null","[]","Optional.empty","\android\webkit\WebView.java"
"FINISHED_STATE","false","false","true","true","true","int","2","[]","Optional.empty","\android\webkit\WebView.java"
"SHOW_RECT_MSG_ID","false","false","false","true","true","int","113","[]","Optional.empty","\android\webkit\WebView.java"
"OPTGROUP","false","false","false","true","true","int","-1","[]","Optional[/**
 * Possible values for mEnabled.  Keep in sync with OptionStatus in
 * WebViewCore.cpp
 */
]","\android\webkit\WebView.java"
"HandlerPackageDebugString","false","false","false","true","true","String","{ // = 101;
""SCROLL_TO_MSG_ID"", // = 102;
""SCROLL_BY_MSG_ID"", // = 103;
""SPAWN_SCROLL_TO_MSG_ID"", // = 104;
""SYNC_SCROLL_TO_MSG_ID"", // = 105;
""NEW_PICTURE_MSG_ID"", // = 106;
""UPDATE_TEXT_ENTRY_MSG_ID"", // = 107;
""WEBCORE_INITIALIZED_MSG_ID"", // = 108;
""UPDATE_TEXTFIELD_TEXT_MSG_ID"", // = 109;
""UPDATE_ZOOM_RANGE"", // = 110;
""MOVE_OUT_OF_PLUGIN"", // = 111;
""CLEAR_TEXT_ENTRY"", // = 112;
""UPDATE_TEXT_SELECTION_MSG_ID"", // = 113;
""SHOW_RECT_MSG_ID"", // = 114;
""LONG_PRESS_CENTER"", // = 115;
""PREVENT_TOUCH_ID"", // = 116;
""WEBCORE_NEED_TOUCH_EVENTS"", // = 117;
""INVAL_RECT_MSG_ID"", // = 118;
""REQUEST_KEYBOARD"", // = 119;
""DO_MOTION_UP"", // = 120;
""SHOW_FULLSCREEN"", // = 121;
""HIDE_FULLSCREEN"", // = 122;
""DOM_FOCUS_CHANGED"", // = 123;
""IMMEDIATE_REPAINT_MSG_ID"", // = 124;
""SET_ROOT_LAYER_MSG_ID"", // = 125;
""RETURN_LABEL"", // = 126;
""FIND_AGAIN"", // = 127;
""CENTER_FIT_RECT"", // = 128;
""REQUEST_KEYBOARD_WITH_SELECTION_MSG_ID"", // = 129;
""SET_SCROLLBAR_MODES"" }","[]","Optional.empty","\android\webkit\WebView.java"
"PHONE_TYPE","true","false","false","true","true","int","2","[]","Optional[/**
 * HitTestResult for hitting a phone number
 */
]","\android\webkit\WebView.java"
"AUTO_REDRAW_HACK","false","false","true","true","true","boolean","false","[]","Optional[// the screen all-the-time. Good for profiling our drawing code
]","\android\webkit\WebView.java"
"mLastTouchTime","false","false","true","false","false","long","null","[]","Optional[/**
 * Time of the last touch event.
 */
]","\android\webkit\WebView.java"
"mDrawCursorRing","false","false","true","false","false","boolean","true","[]","Optional[// Whether or not to draw the cursor ring.
]","\android\webkit\WebView.java"
"mOverScrollBackground","false","false","true","true","false","Paint","null","[]","Optional.empty","\android\webkit\WebView.java"
"mForwardTouchEvents","false","false","true","false","false","boolean","false","[]","Optional[// Whether to forward the touch events to WebCore
]","\android\webkit\WebView.java"
"mInitialScrollY","false","false","true","false","false","int","null","[]","Optional.empty","\android\webkit\WebView.java"
"SCROLL_TO_MSG_ID","false","false","false","true","true","int","101","[]","Optional[// ! arg1=x, arg2=y
]","\android\webkit\WebView.java"
"mInitialScrollX","false","false","true","false","false","int","null","[]","Optional.empty","\android\webkit\WebView.java"
"mContainers","false","false","true","false","false","Container","null","[]","Optional.empty","\android\webkit\WebView.java"
"mCertificate","false","false","true","false","false","SslCertificate","null","[]","Optional[// SSL certificate for the main top-level page (if secure)
]","\android\webkit\WebView.java"
"ANCHOR_TYPE","true","false","false","true","true","int","1","[]","Optional[/**
 * HitTestResult for hitting a HTML::a tag
 */
]","\android\webkit\WebView.java"
"TRACKBALL_MOVE_COUNT","false","false","true","true","true","int","10","[]","Optional.empty","\android\webkit\WebView.java"
"PREVENT_DEFAULT_IGNORE","false","false","true","true","true","int","4","[]","Optional.empty","\android\webkit\WebView.java"
"mOverscrollDistance","false","false","true","false","false","int","null","[]","Optional[/**
 * Max distance to overscroll by in pixels.
 * This how far content can be pulled beyond its normal bounds by the user.
 */
]","\android\webkit\WebView.java"
"mSelectionStarted","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\webkit\WebView.java"
"mConfirmMove","false","false","true","false","false","boolean","null","[]","Optional[// true when the touch movement exceeds the slop
]","\android\webkit\WebView.java"
"RELEASE_SINGLE_TAP","false","false","true","true","true","int","5","[]","Optional.empty","\android\webkit\WebView.java"
"SHOW_FULLSCREEN","false","false","false","true","true","int","120","[]","Optional.empty","\android\webkit\WebView.java"
"mPrivateHandler","false","false","false","false","true","Handler","new PrivateHandler()","[]","Optional[/* package */
]","\android\webkit\WebView.java"
"TAP_TIMEOUT","false","false","true","true","true","int","200","[]","Optional[// In the browser, if it switches out of tap too soon, jump tap won't work.
]","\android\webkit\WebView.java"
"EDIT_TEXT_TYPE","true","false","false","true","true","int","9","[]","Optional[/**
 * HitTestResult for hitting an edit text area
 */
]","\android\webkit\WebView.java"
"mProxy","false","false","true","false","true","DragTracker","null","[]","Optional.empty","\android\webkit\WebView.java"
"TOUCH_SHORTPRESS_MODE","false","false","true","true","true","int","5","[]","Optional.empty","\android\webkit\WebView.java"
"mLastVelocity","false","false","true","false","false","float","null","[]","Optional.empty","\android\webkit\WebView.java"
"mString","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\WebView.java"
"FIRST_PRIVATE_MSG_ID","false","false","true","true","true","int","REMEMBER_PASSWORD","[]","Optional.empty","\android\webkit\WebView.java"
"SCHEME_MAILTO","true","false","false","true","true","String","""mailto:""","[]","Optional[/**
 * URI scheme for email address
 */
]","\android\webkit\WebView.java"
"mOverlayHorizontalScrollbar","false","false","true","false","false","boolean","true","[]","Optional[// style than the View's single scrollbar style
]","\android\webkit\WebView.java"
"mSelectingText","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\webkit\WebView.java"
"mDatabase","false","false","true","false","true","WebViewDatabase","null","[]","Optional.empty","\android\webkit\WebView.java"
"mExtendSelection","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\webkit\WebView.java"
"SET_SCROLLBAR_MODES","false","false","false","true","true","int","129","[]","Optional.empty","\android\webkit\WebView.java"
"MOVE_OUT_OF_PLUGIN","false","false","false","true","true","int","110","[]","Optional.empty","\android\webkit\WebView.java"
"mHistoryWidth","false","false","true","false","false","int","0","[]","Optional.empty","\android\webkit\WebView.java"
"mDefaultScale","false","false","true","false","false","float","null","[]","Optional.empty","\android\webkit\WebView.java"
"PREVENT_DEFAULT_NO","false","false","true","true","true","int","0","[]","Optional[// confirmed move before taking over the control.
]","\android\webkit\WebView.java"
"mLastCursorBounds","false","false","true","false","false","Rect","null","[]","Optional.empty","\android\webkit\WebView.java"
"mPictureListener","false","false","true","false","false","PictureListener","null","[]","Optional[// Used to notify listeners of a new picture.
]","\android\webkit\WebView.java"
"mName","false","false","true","false","false","String","null","[]","Optional.empty","\android\webkit\WebView.java"
"mOverlayVerticalScrollbar","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\webkit\WebView.java"
"mScroller","false","false","true","false","false","OverScroller","null","[]","Optional.empty","\android\webkit\WebView.java"
"mListView","false","false","true","false","false","ListView","null","[]","Optional.empty","\android\webkit\WebView.java"
"mZoomControls","false","false","true","false","false","ExtendedZoomControls","null","[]","Optional[// The View containing the zoom controls
]","\android\webkit\WebView.java"
"mTitleShadow","false","false","true","false","false","Drawable","null","[]","Optional[/**
 * Since we draw the title bar ourselves, we removed the shadow from the
 * browser's activity.  We do want a shadow at the bottom of the title bar,
 * or at the top of the screen if the title bar is not visible.  This
 * drawable serves that purpose.
 */
]","\android\webkit\WebView.java"
"DRAG_HELD_MOTIONLESS","false","false","true","true","true","int","8","[]","Optional.empty","\android\webkit\WebView.java"
"MOTIONLESS_TRUE","false","false","true","true","true","int","2","[]","Optional.empty","\android\webkit\WebView.java"
"mMinZoomScale","false","false","true","false","false","float","null","[]","Optional.empty","\android\webkit\WebView.java"
"LAST_PRIVATE_MSG_ID","false","false","true","true","true","int","PREVENT_DEFAULT_TIMEOUT","[]","Optional.empty","\android\webkit\WebView.java"
"mZoomListener","false","false","true","false","false","ZoomButtonsController.OnZoomListener","new ZoomButtonsController.OnZoomListener() {

    public void onVisibilityChanged(boolean visible) {
        if (visible) {
            switchOutDrawHistory();
            // Bring back the hidden zoom controls.
            mZoomButtonsController.getZoomControls().setVisibility(View.VISIBLE);
            updateZoomButtonsEnabled();
        }
    }

    public void onZoom(boolean zoomIn) {
        if (zoomIn) {
            zoomIn();
        } else {
            zoomOut();
        }
        updateZoomButtonsEnabled();
    }
}","[]","Optional.empty","\android\webkit\WebView.java"
"mBackgroundColor","false","false","true","false","false","int","Color.WHITE","[]","Optional.empty","\android\webkit\WebView.java"
"mCurrStretchY","false","false","true","false","false","float","null","[]","Optional.empty","\android\webkit\WebView.java"
"mIgnoreHeight","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\webkit\WebView.java"
"TOUCH_DONE_MODE","false","false","true","true","true","int","7","[]","Optional.empty","\android\webkit\WebView.java"
"mLastGlobalRect","false","false","true","false","false","Rect","null","[]","Optional.empty","\android\webkit\WebView.java"
"mLogEvent","false","false","false","true","false","boolean","true","[]","Optional[/* package */
]","\android\webkit\WebView.java"
"OPTION_DISABLED","false","false","false","true","true","int","0","[]","Optional.empty","\android\webkit\WebView.java"
"mInitialScaleInPercent","false","false","true","false","false","int","0","[]","Optional[// initial scale in percent. 0 means using default.
]","\android\webkit\WebView.java"
"SLIDE_TITLE_DURATION","false","false","true","true","true","int","500","[]","Optional[// milliseconds
]","\android\webkit\WebView.java"
"mCurrentTouchInterval","false","false","true","false","false","int","TOUCH_SENT_INTERVAL","[]","Optional.empty","\android\webkit\WebView.java"
"SCROLLBAR_AUTO","false","false","true","true","true","int","0","[]","Optional[// keep this in sync with WebCore:ScrollbarMode in WebKit
]","\android\webkit\WebView.java"
"TOUCH_SENT_INTERVAL","false","false","true","true","true","int","50","[]","Optional[/**
 * The minimum elapsed time before sending another ACTION_MOVE event to
 * WebViewCore. This really should be tuned for each type of the devices.
 * For example in Google Map api test case, it takes Dream device at least
 * 150ms to do a full cycle in the WebViewCore by processing a touch event,
 * triggering the layout and drawing the picture. While the same process
 * takes 60+ms on the current high speed device. If we make
 * TOUCH_SENT_INTERVAL too small, there will be multiple touch events sent
 * to WebViewCore queue and the real layout and draw events will be pushed
 * to further, which slows down the refresh rate. Choose 50 to favor the
 * current high speed devices. For Dream like devices, 100 is a better
 * choice. Maybe make this in the buildspec later.
 */
]","\android\webkit\WebView.java"
"mAllowPanAndScale","false","false","true","false","false","boolean","null","[]","Optional[/**
 * True if we have a touch panel capable of detecting smooth pan/scale at the same time
 */
]","\android\webkit\WebView.java"
"mTrackballDown","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\webkit\WebView.java"
"mHistoryHeight","false","false","true","false","false","int","0","[]","Optional.empty","\android\webkit\WebView.java"
"STD_SPEED","false","false","true","true","true","int","480","[]","Optional[// pixels per second
]","\android\webkit\WebView.java"
"mMaxDY","false","false","true","false","true","float","null","[]","Optional.empty","\android\webkit\WebView.java"
"mZoomCenterY","false","false","true","false","false","float","null","[]","Optional.empty","\android\webkit\WebView.java"
"TRACKBALL_MULTIPLIER","false","false","true","true","true","int","3","[]","Optional.empty","\android\webkit\WebView.java"
"mState","false","false","true","false","false","int","null","[]","Optional.empty","\android\webkit\WebView.java"
"mUserScroll","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\webkit\WebView.java"
"mZoomCenterX","false","false","true","false","false","float","null","[]","Optional[// determine the point around which we should zoom.
]","\android\webkit\WebView.java"
"mZoomStart","false","false","true","false","false","long","null","[]","Optional.empty","\android\webkit\WebView.java"
"WEBCORE_INITIALIZED_MSG_ID","false","false","false","true","true","int","107","[]","Optional.empty","\android\webkit\WebView.java"
"mHeightCanMeasure","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\webkit\WebView.java"
"mFullScreenHolder","false","false","false","false","false","PluginFullScreenHolder","null","[]","Optional[// Used to display in full screen mode
]","\android\webkit\WebView.java"
"mTouchSlopSquare","false","false","true","false","false","int","null","[]","Optional[// pre-computed square of ViewConfiguration.getScaledTouchSlop()
]","\android\webkit\WebView.java"
"mMapTrackballToArrowKeys","false","false","true","false","false","boolean","true","[]","Optional[// arrow key events, not trackball events, from one child to the next
]","\android\webkit\WebView.java"
"PREVENT_DEFAULT_TIMEOUT","false","false","true","true","true","int","10","[]","Optional.empty","\android\webkit\WebView.java"
"SRC_ANCHOR_TYPE","true","false","false","true","true","int","7","[]","Optional[/**
 * HitTestResult for hitting a HTML::a tag with src=http
 */
]","\android\webkit\WebView.java"
"mInZoomOverview","false","false","false","false","false","boolean","false","[]","Optional[// the last zoom scale.
]","\android\webkit\WebView.java"
"mPreviewZoomOnly","false","false","true","false","false","boolean","false","[]","Optional[// set to true temporarily during ScaleGesture triggered zoom
]","\android\webkit\WebView.java"
"mOverflingDistance","false","false","true","false","false","int","null","[]","Optional[/**
 * Max distance to overfling by in pixels.
 * This is how far flinged content can move beyond the end of its normal bounds.
 */
]","\android\webkit\WebView.java"
"DEFAULT_VIEWPORT_WIDTH","false","false","false","true","true","int","800","[]","Optional[// use DEFAULT_VIEWPORT_WIDTH as the default viewport width
]","\android\webkit\WebView.java"
"SWITCH_TO_SHORTPRESS","false","false","true","true","true","int","3","[]","Optional.empty","\android\webkit\WebView.java"
"mLastFind","false","false","true","false","false","String","null","[]","Optional[// orientation change or the dismissal of the soft keyboard.
]","\android\webkit\WebView.java"
"MOTIONLESS_TIME","false","false","true","true","true","int","100","[]","Optional[// draw unfiltered after drag is held without movement
]","\android\webkit\WebView.java"
"RETURN_LABEL","false","false","false","true","true","int","125","[]","Optional.empty","\android\webkit\WebView.java"
"TOUCH_SHORTPRESS_START_MODE","false","false","true","true","true","int","4","[]","Optional.empty","\android\webkit\WebView.java"
"REQUEST_KEYBOARD","false","false","false","true","true","int","118","[]","Optional.empty","\android\webkit\WebView.java"
"DRAW_EXTRAS_SELECTION","false","false","true","true","true","int","2","[]","Optional.empty","\android\webkit\WebView.java"
"mLastSentTouchTime","false","false","true","false","false","long","null","[]","Optional[/**
 * Time of the last time sending touch event to WebViewCore
 */
]","\android\webkit\WebView.java"
"mZoomButtonsController","false","false","true","false","false","ZoomButtonsController","null","[]","Optional[// getZoomButtonsController() to get better performance.
]","\android\webkit\WebView.java"
"UNKNOWN_TYPE","true","false","false","true","true","int","0","[]","Optional[/**
 * Default HitTestResult, where the target is unknown
 */
]","\android\webkit\WebView.java"
"IMAGE_TYPE","true","false","false","true","true","int","5","[]","Optional[/**
 * HitTestResult for hitting an HTML::img tag
 */
]","\android\webkit\WebView.java"
"mPageThatNeedsToSlideTitleBarOffScreen","false","false","true","false","false","String","null","[]","Optional[/**
 * The URL of a page that sent a message to scroll the title bar off screen.
 *
 * Many mobile sites tell the page to scroll to (0,1) in order to scroll the
 * title bar off the screen.  Sometimes, the scroll position is set before
 * the page finishes loading.  Rather than scrolling while the page is still
 * loading, keep track of the URL and new scroll position so we can perform
 * the scroll once the page finishes loading.
 */
]","\android\webkit\WebView.java"
"mDelayedDeleteRootLayer","false","false","true","false","false","boolean","null","[]","Optional[// deleting a root layer until there's something to draw of the new page.
]","\android\webkit\WebView.java"
"RESUME_WEBCORE_PRIORITY","false","false","true","true","true","int","7","[]","Optional.empty","\android\webkit\WebView.java"
"PREVENT_DEFAULT_YES","false","false","true","true","true","int","3","[]","Optional.empty","\android\webkit\WebView.java"
"mYDistanceToSlideTitleOffScreen","false","false","true","false","false","int","null","[]","Optional[/**
 * The destination Y scroll position to be used when the page finishes
 * loading.  See mPageThatNeedsToSlideTitleBarOffScreen.
 */
]","\android\webkit\WebView.java"
"MAX_DURATION","false","false","true","true","true","int","750","[]","Optional[// milliseconds
]","\android\webkit\WebView.java"
"HIDE_FULLSCREEN","false","false","false","true","true","int","121","[]","Optional.empty","\android\webkit\WebView.java"
"mMinLockSnapReverseDistance","false","false","true","false","false","int","null","[]","Optional[// adjustable parameters
]","\android\webkit\WebView.java"
"mTextGeneration","false","false","true","false","false","int","null","[]","Optional[// more key events.
]","\android\webkit\WebView.java"
"MOTIONLESS_FALSE","false","false","true","true","true","int","0","[]","Optional.empty","\android\webkit\WebView.java"
"SNAP_Y","false","false","true","true","true","int","4","[]","Optional[// may be combined with SNAP_LOCK
]","\android\webkit\WebView.java"
"mSelectedArray","false","false","true","false","false","int","null","[]","Optional[// which items are selected.
]","\android\webkit\WebView.java"
"MIN_SCROLL_AMOUNT_TO_DISABLE_DRAG_TRACKER","false","false","true","true","true","int","4","[]","Optional[// to have any effect.
]","\android\webkit\WebView.java"
"SNAP_X","false","false","true","true","true","int","2","[]","Optional[// may be combined with SNAP_LOCK
]","\android\webkit\WebView.java"
"DRAW_EXTRAS_FIND","false","false","true","true","true","int","1","[]","Optional.empty","\android\webkit\WebView.java"
"SCROLLBAR_ALWAYSON","false","false","true","true","true","int","2","[]","Optional[// as we auto fade scrollbar, this is ignored.
]","\android\webkit\WebView.java"
"TOUCH_PINCH_DRAG","false","false","true","true","true","int","8","[]","Optional.empty","\android\webkit\WebView.java"
"mInterp","false","false","true","false","false","Interpolator","null","[]","Optional.empty","\android\webkit\WebView.java"
"mStartY","false","false","true","false","true","float","null","[]","Optional.empty","\android\webkit\WebView.java"
"ANIMATING_STATE","false","false","true","true","true","int","1","[]","Optional.empty","\android\webkit\WebView.java"
"TRACKBALL_SCALE","false","false","true","true","true","int","400","[]","Optional.empty","\android\webkit\WebView.java"
"mDragTrackerHandler","false","false","true","false","false","DragTrackerHandler","null","[]","Optional.empty","\android\webkit\WebView.java"
"SCROLLBAR_ALWAYSOFF","false","false","true","true","true","int","1","[]","Optional.empty","\android\webkit\WebView.java"
"mWrapContent","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\webkit\WebView.java"
"mHeight","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebView.java"
"mEdgeGlowRight","false","false","true","false","false","EdgeGlow","null","[]","Optional.empty","\android\webkit\WebView.java"
"IMAGE_ANCHOR_TYPE","true","false","false","true","true","int","6","[]","Optional[/**
 * HitTestResult for hitting a HTML::a tag which contains HTML::img
 */
]","\android\webkit\WebView.java"
"mIsPaused","false","false","true","false","false","boolean","null","[]","Optional[// true if onPause has been called (and not onResume)
]","\android\webkit\WebView.java"
"LAST_PACKAGE_MSG_ID","false","false","true","true","true","int","SET_SCROLLBAR_MODES","[]","Optional.empty","\android\webkit\WebView.java"
"PREVENT_DEFAULT_NO_FROM_TOUCH_DOWN","false","false","true","true","true","int","2","[]","Optional.empty","\android\webkit\WebView.java"
"mScaleDetector","false","false","true","false","false","ScaleGestureDetector","null","[]","Optional[// use the framework's ScaleGestureDetector to handle multi-touch
]","\android\webkit\WebView.java"
"PAGE_SCROLL_OVERLAP","false","false","true","true","true","int","24","[]","Optional[// pages with the space bar, in pixels.
]","\android\webkit\WebView.java"
"DOM_FOCUS_CHANGED","false","false","false","true","true","int","122","[]","Optional.empty","\android\webkit\WebView.java"
"FIRST_PACKAGE_MSG_ID","false","false","true","true","true","int","SCROLL_TO_MSG_ID","[]","Optional.empty","\android\webkit\WebView.java"
"UPDATE_ZOOM_RANGE","false","false","false","true","true","int","109","[]","Optional.empty","\android\webkit\WebView.java"
"EMAIL_TYPE","true","false","false","true","true","int","4","[]","Optional[/**
 * HitTestResult for hitting an email address
 */
]","\android\webkit\WebView.java"
"mPreventDefault","false","false","true","false","false","int","PREVENT_DEFAULT_IGNORE","[]","Optional.empty","\android\webkit\WebView.java"
"mTextWrapWidth","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebView.java"
"SELECT_CURSOR_OFFSET","false","false","true","true","true","int","16","[]","Optional.empty","\android\webkit\WebView.java"
"mUpdateMessage","false","false","true","false","false","Message","null","[]","Optional.empty","\android\webkit\WebView.java"
"mTrackballXMove","false","false","true","false","false","int","0","[]","Optional.empty","\android\webkit\WebView.java"
"DEFAULT_SCALE_PERCENT","false","false","false","true","false","int","null","[]","Optional[// default scale. Depending on the display density.
]","\android\webkit\WebView.java"
"mZoomOverviewWidth","false","false","false","false","false","int","DEFAULT_VIEWPORT_WIDTH","[]","Optional[// engadget always have wider mContentWidth no matter what viewport size is.
]","\android\webkit\WebView.java"
"INVAL_RECT_MSG_ID","false","false","false","true","true","int","117","[]","Optional[// obj=Rect in doc coordinates
]","\android\webkit\WebView.java"
"mContentWidth","false","false","true","false","false","int","null","[]","Optional[// cache of value from WebViewCore
]","\android\webkit\WebView.java"
"mEdgeGlowBottom","false","false","true","false","false","EdgeGlow","null","[]","Optional.empty","\android\webkit\WebView.java"
"mType","false","false","true","false","false","int","null","[]","Optional.empty","\android\webkit\WebView.java"
"DEBUG_DRAG_TRACKER","false","false","true","true","true","boolean","false","[]","Optional[// enable debug output for drag trackers
]","\android\webkit\WebView.java"
"REMEMBER_PASSWORD","false","false","true","true","true","int","1","[]","Optional[/*
     * Private message ids
     */
]","\android\webkit\WebView.java"
"LONG_PRESS_TIMEOUT","false","false","true","true","true","int","1000","[]","Optional[// With a short timeout, it's difficult to treat trigger a short press.
]","\android\webkit\WebView.java"
"mDragTracker","false","false","true","false","false","DragTracker","null","[]","Optional.empty","\android\webkit\WebView.java"
"mLastVisibleRectSent","false","false","true","false","false","Rect","null","[]","Optional[// Used to avoid sending many visible rect messages.
]","\android\webkit\WebView.java"
"mHorizontalScrollBarMode","false","false","true","false","false","int","SCROLLBAR_AUTO","[]","Optional.empty","\android\webkit\WebView.java"
"OPTION_ENABLED","false","false","false","true","true","int","1","[]","Optional.empty","\android\webkit\WebView.java"
"mSnapScrollMode","false","false","true","false","false","int","SNAP_NONE","[]","Optional.empty","\android\webkit\WebView.java"
"ZOOM_CONTROLS_TIMEOUT","false","false","true","true","true","long","ViewConfiguration.getZoomControlsTimeout()","[]","Optional[// The time that the Zoom Controls are visible before fading away
]","\android\webkit\WebView.java"
"TRACKBALL_SCROLL_COUNT","false","false","true","true","true","int","5","[]","Optional.empty","\android\webkit\WebView.java"
"mEdgeGlowTop","false","false","true","false","false","EdgeGlow","null","[]","Optional[/*
     * These manage the edge glow effect when flung or pulled beyond the edges.
     * If one is not null, all are not null. Checking one for null is as good as checking each.
     */
]","\android\webkit\WebView.java"
"mSX","false","false","true","false","false","int","null","[]","Optional.empty","\android\webkit\WebView.java"
"mZoomControlRunnable","false","false","true","false","false","Runnable","null","[]","Optional.empty","\android\webkit\WebView.java"
"mMinDY","false","false","true","false","true","float","null","[]","Optional.empty","\android\webkit\WebView.java"
"mHeldMotionless","false","false","true","false","false","int","null","[]","Optional.empty","\android\webkit\WebView.java"
"mLastHeightSent","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebView.java"
"TRACKBALL_WAIT","false","false","true","true","true","int","100","[]","Optional.empty","\android\webkit\WebView.java"
"mLastVelY","false","false","true","false","false","float","null","[]","Optional.empty","\android\webkit\WebView.java"
"REQUEST_KEYBOARD_WITH_SELECTION_MSG_ID","false","false","false","true","true","int","128","[]","Optional.empty","\android\webkit\WebView.java"
"mLastVelX","false","false","true","false","false","float","null","[]","Optional.empty","\android\webkit\WebView.java"
"DRAW_EXTRAS_NONE","false","false","true","true","true","int","0","[]","Optional[// keep these in sync with their counterparts in WebView.cpp
]","\android\webkit\WebView.java"
"UPDATE_TEXTFIELD_TEXT_MSG_ID","false","false","false","true","true","int","108","[]","Optional.empty","\android\webkit\WebView.java"
"DO_MOTION_UP","false","false","false","true","true","int","119","[]","Optional.empty","\android\webkit\WebView.java"
"mNavSlop","false","false","true","false","false","int","null","[]","Optional[// pre-computed density adjusted navigation slop
]","\android\webkit\WebView.java"
"SNAP_LOCK","false","false","true","true","true","int","1","[]","Optional[// not a separate state
]","\android\webkit\WebView.java"
"mWidth","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebView.java"
"MOTIONLESS_PENDING","false","false","true","true","true","int","1","[]","Optional.empty","\android\webkit\WebView.java"
"SYNC_SCROLL_TO_MSG_ID","false","false","false","true","true","int","104","[]","Optional[// ! arg1=x, arg2=y
]","\android\webkit\WebView.java"
"mTextWrapScale","false","false","false","false","false","float","null","[]","Optional.empty","\android\webkit\WebView.java"
"mExtra","false","false","true","false","false","String","null","[]","Optional.empty","\android\webkit\WebView.java"
"mAdapter","false","false","true","false","false","Adapter","null","[]","Optional.empty","\android\webkit\WebView.java"
"mWebTextView","false","false","true","false","false","WebTextView","null","[]","Optional.empty","\android\webkit\WebView.java"
"mMaximumFling","false","false","true","false","false","int","null","[]","Optional.empty","\android\webkit\WebView.java"
"mGotCenterDown","false","false","true","false","false","boolean","false","[]","Optional[// affect long press with the trackball/touch.
]","\android\webkit\WebView.java"
"NEVER_REMEMBER_PASSWORD","false","false","true","true","true","int","2","[]","Optional.empty","\android\webkit\WebView.java"
"ZOOM_ANIMATION_LENGTH","false","false","true","true","true","int","500","[]","Optional.empty","\android\webkit\WebView.java"
"SNAP_NONE","false","false","true","true","true","int","0","[]","Optional.empty","\android\webkit\WebView.java"
"mInOverScrollMode","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\webkit\WebView.java"
"mTitleBar","false","false","true","false","false","View","null","[]","Optional[/**
 * A title bar which is embedded in this WebView, and scrolls along with it
 * vertically, but not horizontally.
 */
]","\android\webkit\WebView.java"
"mSelectX","false","false","true","false","false","int","0","[]","Optional.empty","\android\webkit\WebView.java"
"mSelectY","false","false","true","false","false","int","0","[]","Optional.empty","\android\webkit\WebView.java"
"mCheckedId","false","false","true","false","false","long","null","[]","Optional.empty","\android\webkit\WebView.java"
"mAnchorX","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebView.java"
"mAnchorY","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebView.java"
"DEFAULT_MAX_ZOOM_SCALE","false","false","true","true","false","float","null","[]","Optional[// default scale limit. Depending on the display density
]","\android\webkit\WebView.java"
"mShiftIsPressed","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\webkit\WebView.java"
"CLEAR_TEXT_ENTRY","false","false","false","true","true","int","111","[]","Optional.empty","\android\webkit\WebView.java"
"mZoomScale","false","false","true","false","false","float","null","[]","Optional[// if this is non-zero, it is used on drawing rather than mActualScale
]","\android\webkit\WebView.java"
"sMaxViewportWidth","false","false","false","true","false","int","DEFAULT_VIEWPORT_WIDTH","[]","Optional[// the minimum preferred width is huge, an upper limit is needed.
]","\android\webkit\WebView.java"
"mInvInitialZoomScale","false","false","true","false","false","float","null","[]","Optional.empty","\android\webkit\WebView.java"
"mFocusSizeChanged","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\webkit\WebView.java"
"REQUEST_FORM_DATA","false","false","true","true","true","int","6","[]","Optional.empty","\android\webkit\WebView.java"
"mGotKeyDown","false","false","true","false","false","boolean","null","[]","Optional[// Used to match key downs and key ups
]","\android\webkit\WebView.java"
"PREVENT_DEFAULT_MAYBE_YES","false","false","true","true","true","int","1","[]","Optional.empty","\android\webkit\WebView.java"
"mLastDeferTouchY","false","false","true","false","false","float","null","[]","Optional.empty","\android\webkit\WebView.java"
"mLastDeferTouchX","false","false","true","false","false","float","null","[]","Optional.empty","\android\webkit\WebView.java"
"mDoubleTapSlopSquare","false","false","true","false","false","int","null","[]","Optional[// pre-computed square of ViewConfiguration.getScaledDoubleTapSlop()
]","\android\webkit\WebView.java"
"mMaxZoomScale","false","false","true","false","false","float","null","[]","Optional[// scale limit, which can be set through viewport meta tag in the web page
]","\android\webkit\WebView.java"
"mTrackballRemainsX","false","false","true","false","false","float","0.0f","[]","Optional.empty","\android\webkit\WebView.java"
"mTrackballRemainsY","false","false","true","false","false","float","0.0f","[]","Optional.empty","\android\webkit\WebView.java"
"mSupportMultiTouch","false","false","true","false","false","boolean","null","[]","Optional[// whether support multi-touch
]","\android\webkit\WebView.java"
"WEBCORE_NEED_TOUCH_EVENTS","false","false","false","true","true","int","116","[]","Optional.empty","\android\webkit\WebView.java"
"HandlerPrivateDebugString","false","false","false","true","true","String","{ // = 1;
""REMEMBER_PASSWORD"", // = 2;
""NEVER_REMEMBER_PASSWORD"", // = 3;
""SWITCH_TO_SHORTPRESS"", // = 4;
""SWITCH_TO_LONGPRESS"", // = 5;
""RELEASE_SINGLE_TAP"", // = 6;
""REQUEST_FORM_DATA"", // = 7;
""RESUME_WEBCORE_PRIORITY"", // = 8;
""DRAG_HELD_MOTIONLESS"", // = 9;
""AWAKEN_SCROLL_BARS"", // = 10;
""PREVENT_DEFAULT_TIMEOUT"" }","[]","Optional.empty","\android\webkit\WebView.java"
"NO_LEFTEDGE","false","false","true","true","true","int","-1","[]","Optional[// return NO_LEFTEDGE means failure.
]","\android\webkit\WebView.java"
"AWAKEN_SCROLL_BARS","false","false","true","true","true","int","9","[]","Optional.empty","\android\webkit\WebView.java"
"SWITCH_TO_LONGPRESS","false","false","true","true","true","int","4","[]","Optional.empty","\android\webkit\WebView.java"
"mWebview","false","false","true","false","false","WebView","null","[]","Optional.empty","\android\webkit\WebView.java"
"mViewManager","false","false","false","false","true","ViewManager","null","[]","Optional[/* package */
]","\android\webkit\WebView.java"
"mActualScale","false","false","true","false","false","float","null","[]","Optional[// computed scale and inverse, from mZoomWidth.
]","\android\webkit\WebView.java"
"MIN_BREAK_SNAP_CROSS_DISTANCE","false","false","true","true","true","int","80","[]","Optional.empty","\android\webkit\WebView.java"
"TOUCH_DRAG_MODE","false","false","true","true","true","int","3","[]","Optional.empty","\android\webkit\WebView.java"
"mWebView","false","false","false","false","true","WebView","null","[]","Optional.empty","\android\webkit\WebView.java"
"UPDATE_TEXT_ENTRY_MSG_ID","false","false","false","true","true","int","106","[]","Optional.empty","\android\webkit\WebView.java"
"SCHEME_GEO","true","false","false","true","true","String","""geo:0,0?q=""","[]","Optional[/**
 * URI scheme for map address
 */
]","\android\webkit\WebView.java"
"mWidthCanMeasure","false","false","false","false","false","boolean","null","[]","Optional[/**
 * These prevent calling requestLayout if either dimension is fixed. This
 * depends on the layout parameters and the measure specs.
 */
]","\android\webkit\WebView.java"
"mUrl","false","false","true","false","false","String","null","[]","Optional.empty","\android\webkit\WebView.java"
"mSelection","false","false","true","false","false","int","null","[]","Optional[// where the initial selection is.
]","\android\webkit\WebView.java"
"mOverscrollDeltaY","false","false","true","false","false","int","null","[]","Optional.empty","\android\webkit\WebView.java"
"mOverscrollDeltaX","false","false","true","false","false","int","null","[]","Optional[/*
     * These manage the delta the user has pulled beyond the edges.
     */
]","\android\webkit\WebView.java"
"TRACKBALL_KEY_TIMEOUT","false","false","true","true","true","int","1000","[]","Optional.empty","\android\webkit\WebView.java"
"IMMEDIATE_REPAINT_MSG_ID","false","false","false","true","true","int","123","[]","Optional.empty","\android\webkit\WebView.java"
"mTouchMode","false","false","true","false","false","int","TOUCH_DONE_MODE","[]","Optional[/**
 * Touch mode
 */
]","\android\webkit\WebView.java"
"CENTER_FIT_RECT","false","false","false","true","true","int","127","[]","Optional.empty","\android\webkit\WebView.java"
"mTrackballYMove","false","false","true","false","false","int","0","[]","Optional.empty","\android\webkit\WebView.java"
"LOGTAG","false","false","false","true","true","String","""webview""","[]","Optional.empty","\android\webkit\WebView.java"
"mCallbackProxy","false","false","true","false","true","CallbackProxy","null","[]","Optional[// A final CallbackProxy shared by WebViewCore and BrowserFrame.
]","\android\webkit\WebView.java"
"mInvActualScale","false","false","true","false","false","float","null","[]","Optional.empty","\android\webkit\WebView.java"
"mInstance","false","false","true","true","false","DdmHandleHello","new DdmHandleHello()","[]","Optional.empty","\android\ddm\DdmHandleHello.java"
"CHUNK_HELO","true","false","false","true","true","int","type(""HELO"")","[]","Optional.empty","\android\ddm\DdmHandleHello.java"
"CHUNK_FEAT","true","false","false","true","true","int","type(""FEAT"")","[]","Optional.empty","\android\ddm\DdmHandleHello.java"
"CHUNK_WAIT","true","false","false","true","true","int","type(""WAIT"")","[]","Optional.empty","\android\ddm\DdmHandleHello.java"
"mText","false","false","true","false","false","char","null","[]","Optional.empty","\android\text\method\QwertyKeyListener.java"
"sInstance","false","false","true","true","false","QwertyKeyListener","new QwertyKeyListener[Capitalize.values().length * 2]","[]","Optional.empty","\android\text\method\QwertyKeyListener.java"
"mAutoText","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\text\method\QwertyKeyListener.java"
"PICKER_SETS","false","false","true","true","false","SparseArray<String>","new SparseArray<String>()","[]","Optional.empty","\android\text\method\QwertyKeyListener.java"
"mAutoCap","false","false","true","false","false","Capitalize","null","[]","Optional.empty","\android\text\method\QwertyKeyListener.java"
"mContentProvider","false","false","true","false","true","IContentProvider","null","[]","Optional.empty","\android\content\ContentProviderClient.java"
"mContentResolver","false","false","true","false","true","ContentResolver","null","[]","Optional.empty","\android\content\ContentProviderClient.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<RestoreSet>","new Parcelable.Creator<RestoreSet>() {

    public RestoreSet createFromParcel(Parcel in) {
        return new RestoreSet(in);
    }

    public RestoreSet[] newArray(int size) {
        return new RestoreSet[size];
    }
}","[]","Optional.empty","\android\app\backup\RestoreSet.java"
"device","true","false","false","false","false","String","null","[]","Optional[/**
 * Identifier of the device whose data this is.  This will be as unique as
 * is practically possible; for example, it might be an IMEI.
 */
]","\android\app\backup\RestoreSet.java"
"name","true","false","false","false","false","String","null","[]","Optional[/**
 * Name of this restore set.  May be user generated, may simply be the name
 * of the handset model, e.g. ""T-Mobile G1"".
 */
]","\android\app\backup\RestoreSet.java"
"token","true","false","false","false","false","long","null","[]","Optional[/**
 * Token that identifies this backup set unambiguously to the backup/restore
 * transport.  This is guaranteed to be valid for the duration of a restore
 * session, but is meaningless once the session has ended.
 */
]","\android\app\backup\RestoreSet.java"
"mKeys","false","false","true","false","false","int","null","[]","Optional.empty","\android\util\SparseArray.java"
"mSize","false","false","true","false","false","int","null","[]","Optional.empty","\android\util\SparseArray.java"
"DELETED","false","false","true","true","true","Object","new Object()","[]","Optional.empty","\android\util\SparseArray.java"
"mGarbage","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\util\SparseArray.java"
"mValues","false","false","true","false","false","Object","null","[]","Optional.empty","\android\util\SparseArray.java"
"SURFACE_TYPE_PUSH_BUFFERS","true","false","false","true","true","int","MEMORY_TYPE_PUSH_BUFFERS","[]","Optional[/**
 * Surface type: creates a ""push"" surface, that is a surface that
 * doesn't owns its buffers. With such a surface lockCanvas will fail.
 */
]","\android\view\SurfaceHolder.java"
"SURFACE_TYPE_NORMAL","true","false","false","true","true","int","MEMORY_TYPE_NORMAL","[]","Optional[/**
 * Surface type: creates a regular surface, usually in main, non
 * contiguous, cached/buffered RAM.
 */
]","\android\view\SurfaceHolder.java"
"SURFACE_TYPE_HARDWARE","true","false","false","true","true","int","MEMORY_TYPE_HARDWARE","[@Deprecated]","Optional[/**
 * Surface type: creates a suited to be used with DMA engines and
 * hardware accelerators.
 * @deprecated this is ignored, this value is set automatically when needed.
 */
]","\android\view\SurfaceHolder.java"
"SURFACE_TYPE_GPU","true","false","false","true","true","int","MEMORY_TYPE_GPU","[@Deprecated]","Optional[/**
 * Surface type: creates a surface suited to be used with the GPU
 * @deprecated this is ignored, this value is set automatically when needed.
 */
]","\android\view\SurfaceHolder.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<SavedState>","new Parcelable.Creator<SavedState>() {

    public SavedState createFromParcel(Parcel in) {
        return new SavedState(in);
    }

    public SavedState[] newArray(int size) {
        return new SavedState[size];
    }
}","[]","Optional.empty","\android\widget\CompoundButton.java"
"mChecked","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\CompoundButton.java"
"mOnCheckedChangeWidgetListener","false","false","true","false","false","OnCheckedChangeListener","null","[]","Optional.empty","\android\widget\CompoundButton.java"
"mOnCheckedChangeListener","false","false","true","false","false","OnCheckedChangeListener","null","[]","Optional.empty","\android\widget\CompoundButton.java"
"mBroadcasting","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\CompoundButton.java"
"mButtonDrawable","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\CompoundButton.java"
"mButtonResource","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\CompoundButton.java"
"CHECKED_STATE_SET","false","false","true","true","true","int","{ R.attr.state_checked }","[]","Optional.empty","\android\widget\CompoundButton.java"
"checked","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\widget\CompoundButton.java"
"mWriting","false","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\util\JournaledFile.java"
"mReal","false","false","false","false","false","File","null","[]","Optional.empty","\com\android\internal\util\JournaledFile.java"
"mTemp","false","false","false","false","false","File","null","[]","Optional.empty","\com\android\internal\util\JournaledFile.java"
"mYPrecision","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\MotionEvent.java"
"mEventTimeNanoSamples","false","false","true","false","false","long","null","[]","Optional[// Samples are ordered from oldest to newest.
]","\android\view\MotionEvent.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<MotionEvent>","new Parcelable.Creator<MotionEvent>() {

    public MotionEvent createFromParcel(Parcel in) {
        // skip token, we already know this is a MotionEvent
        in.readInt();
        return MotionEvent.createFromParcelBody(in);
    }

    public MotionEvent[] newArray(int size) {
        return new MotionEvent[size];
    }
}","[]","Optional.empty","\android\view\MotionEvent.java"
"mFlags","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\MotionEvent.java"
"gRecyclerTop","false","false","true","true","false","MotionEvent","null","[]","Optional.empty","\android\view\MotionEvent.java"
"ACTION_POINTER_DOWN","true","false","false","true","true","int","5","[]","Optional[/**
 * A non-primary pointer has gone down.  The bits in
 * {@link #ACTION_POINTER_ID_MASK} indicate which pointer changed.
 */
]","\android\view\MotionEvent.java"
"ACTION_POINTER_INDEX_MASK","true","false","false","true","true","int","0xff00","[]","Optional[/**
 * Bits in the action code that represent a pointer index, used with
 * {@link #ACTION_POINTER_DOWN} and {@link #ACTION_POINTER_UP}.  Shifting
 * down by {@link #ACTION_POINTER_INDEX_SHIFT} provides the actual pointer
 * index where the data for the pointer going up or down can be found; you can
 * get its identifier with {@link #getPointerId(int)} and the actual
 * data with {@link #getX(int)} etc.
 */
]","\android\view\MotionEvent.java"
"size","true","false","false","false","false","float","null","[]","Optional[/**
 * A scaled value of the approximate size of the pointer touch area.
 * This represents some approximation of the area of the screen being
 * pressed; the actual value in pixels corresponding to the
 * touch is normalized with the device specific range of values
 * and scaled to a value between 0 and 1. The value of size can be used to
 * determine fat touch events.
 */
]","\android\view\MotionEvent.java"
"gRecyclerUsed","false","false","true","true","false","int","0","[]","Optional.empty","\android\view\MotionEvent.java"
"ACTION_POINTER_3_DOWN","true","false","false","true","true","int","ACTION_POINTER_DOWN | 0x0200","[@Deprecated]","Optional[/**
 * @deprecated Use {@link #ACTION_POINTER_INDEX_MASK} to retrieve the
 * data index associated with {@link #ACTION_POINTER_DOWN}.
 */
]","\android\view\MotionEvent.java"
"ACTION_MOVE","true","false","false","true","true","int","2","[]","Optional[/**
 * Constant for {@link #getAction}: A change has happened during a
 * press gesture (between {@link #ACTION_DOWN} and {@link #ACTION_UP}).
 * The motion contains the most recent point, as well as any intermediate
 * points since the last down or move event.
 */
]","\android\view\MotionEvent.java"
"EDGE_TOP","true","false","false","true","true","int","0x00000001","[]","Optional[/**
 * Flag indicating the motion event intersected the top edge of the screen.
 */
]","\android\view\MotionEvent.java"
"SAMPLE_SIZE","false","false","true","true","true","int","3","[]","Optional[/*
     * Offset for the sample's size
     */
]","\android\view\MotionEvent.java"
"mRecycled","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\view\MotionEvent.java"
"ACTION_POINTER_1_DOWN","true","false","false","true","true","int","ACTION_POINTER_DOWN | 0x0000","[@Deprecated]","Optional[/**
 * @deprecated Use {@link #ACTION_POINTER_INDEX_MASK} to retrieve the
 * data index associated with {@link #ACTION_POINTER_DOWN}.
 */
]","\android\view\MotionEvent.java"
"MAX_RECYCLED","false","false","true","true","true","int","10","[]","Optional.empty","\android\view\MotionEvent.java"
"mLastDataSampleIndex","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\MotionEvent.java"
"mNumPointers","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\MotionEvent.java"
"mEdgeFlags","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\MotionEvent.java"
"EDGE_LEFT","true","false","false","true","true","int","0x00000004","[]","Optional[/**
 * Flag indicating the motion event intersected the left edge of the screen.
 */
]","\android\view\MotionEvent.java"
"ACTION_OUTSIDE","true","false","false","true","true","int","4","[]","Optional[/**
 * Constant for {@link #getAction}: A movement has happened outside of the
 * normal bounds of the UI element.  This does not provide a full gesture,
 * but only the initial location of the movement/touch.
 */
]","\android\view\MotionEvent.java"
"touchMajor","true","false","false","false","false","float","null","[]","Optional[/**
 * The length of the major axis of an ellipse that describes the touch area at
 * the point of contact.
 */
]","\android\view\MotionEvent.java"
"x","true","false","false","false","false","float","null","[]","Optional[/**
 * The X coordinate of the pointer movement.
 * The interpretation varies by input source and may represent the position of
 * the center of the contact area, a relative displacement in device-specific units
 * or something else.
 */
]","\android\view\MotionEvent.java"
"y","true","false","false","false","false","float","null","[]","Optional[/**
 * The Y coordinate of the pointer movement.
 * The interpretation varies by input source and may represent the position of
 * the center of the contact area, a relative displacement in device-specific units
 * or something else.
 */
]","\android\view\MotionEvent.java"
"touchMinor","true","false","false","false","false","float","null","[]","Optional[/**
 * The length of the minor axis of an ellipse that describes the touch area at
 * the point of contact.
 */
]","\android\view\MotionEvent.java"
"gRecyclerLock","false","false","true","true","false","Object","new Object()","[]","Optional.empty","\android\view\MotionEvent.java"
"EDGE_BOTTOM","true","false","false","true","true","int","0x00000002","[]","Optional[/**
 * Flag indicating the motion event intersected the bottom edge of the screen.
 */
]","\android\view\MotionEvent.java"
"ACTION_UP","true","false","false","true","true","int","1","[]","Optional[/**
 * Constant for {@link #getAction}: A pressed gesture has finished, the
 * motion contains the final release location as well as any intermediate
 * points since the last down or move event.
 */
]","\android\view\MotionEvent.java"
"FLAG_WINDOW_IS_OBSCURED","true","false","false","true","true","int","0x1","[]","Optional[/**
 * This flag indicates that the window that received this motion event is partly
 * or wholly obscured by another visible window above it.  This flag is set to true
 * even if the event did not directly pass through the obscured area.
 * A security sensitive application can check this flag to identify situations in which
 * a malicious application may have covered up part of its content for the purpose
 * of misleading the user or hijacking touches.  An appropriate response might be
 * to drop the suspect touches or to take additional precautions to confirm the user's
 * actual intent.
 */
]","\android\view\MotionEvent.java"
"ACTION_POINTER_3_UP","true","false","false","true","true","int","ACTION_POINTER_UP | 0x0200","[@Deprecated]","Optional[/**
 * @deprecated Use {@link #ACTION_POINTER_INDEX_MASK} to retrieve the
 * data index associated with {@link #ACTION_POINTER_UP}.
 */
]","\android\view\MotionEvent.java"
"mYOffset","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\MotionEvent.java"
"mDataSamples","false","false","true","false","false","float","null","[]","Optional[// Samples are ordered from oldest to newest.
]","\android\view\MotionEvent.java"
"mLastEventTimeNanoSampleIndex","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\MotionEvent.java"
"ACTION_POINTER_2_DOWN","true","false","false","true","true","int","ACTION_POINTER_DOWN | 0x0100","[@Deprecated]","Optional[/**
 * @deprecated Use {@link #ACTION_POINTER_INDEX_MASK} to retrieve the
 * data index associated with {@link #ACTION_POINTER_DOWN}.
 */
]","\android\view\MotionEvent.java"
"NUM_SAMPLE_DATA","false","false","true","true","true","int","9","[]","Optional[/*
     * Number of data items for each sample.
     */
]","\android\view\MotionEvent.java"
"EDGE_RIGHT","true","false","false","true","true","int","0x00000008","[]","Optional[/**
 * Flag indicating the motion event intersected the right edge of the screen.
 */
]","\android\view\MotionEvent.java"
"BASE_AVAIL_SAMPLES","false","false","true","true","true","int","8","[]","Optional[/*
     * Minimum number of samples for which to reserve space when allocating new motion events.
     */
]","\android\view\MotionEvent.java"
"TRACK_RECYCLED_LOCATION","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\view\MotionEvent.java"
"toolMinor","true","false","false","false","false","float","null","[]","Optional[/**
 * The length of the minor axis of an ellipse that describes the size of
 * the approaching tool.
 * The tool area represents the estimated size of the finger or pen that is
 * touching the device independent of its actual touch area at the point of contact.
 */
]","\android\view\MotionEvent.java"
"ACTION_POINTER_2_UP","true","false","false","true","true","int","ACTION_POINTER_UP | 0x0100","[@Deprecated]","Optional[/**
 * @deprecated Use {@link #ACTION_POINTER_INDEX_MASK} to retrieve the
 * data index associated with {@link #ACTION_POINTER_UP}.
 */
]","\android\view\MotionEvent.java"
"SAMPLE_ORIENTATION","false","false","true","true","true","int","8","[]","Optional[/*
     * Offset for the sample's orientation.
     */
]","\android\view\MotionEvent.java"
"SAMPLE_TOUCH_MAJOR","false","false","true","true","true","int","4","[]","Optional[/*
     * Offset for the sample's touch major axis length.
     */
]","\android\view\MotionEvent.java"
"SAMPLE_TOUCH_MINOR","false","false","true","true","true","int","5","[]","Optional[/*
     * Offset for the sample's touch minor axis length.
     */
]","\android\view\MotionEvent.java"
"ACTION_POINTER_ID_MASK","true","false","false","true","true","int","0xff00","[@Deprecated]","Optional[/**
 * @deprecated Renamed to {@link #ACTION_POINTER_INDEX_MASK} to match
 * the actual data contained in these bits.
 */
]","\android\view\MotionEvent.java"
"ACTION_POINTER_UP","true","false","false","true","true","int","6","[]","Optional[/**
 * A non-primary pointer has gone up.  The bits in
 * {@link #ACTION_POINTER_ID_MASK} indicate which pointer changed.
 */
]","\android\view\MotionEvent.java"
"mNext","false","false","true","false","false","MotionEvent","null","[]","Optional.empty","\android\view\MotionEvent.java"
"ACTION_MASK","true","false","false","true","true","int","0xff","[]","Optional[/**
 * Bit mask of the parts of the action code that are the action itself.
 */
]","\android\view\MotionEvent.java"
"toolMajor","true","false","false","false","false","float","null","[]","Optional[/**
 * The length of the major axis of an ellipse that describes the size of
 * the approaching tool.
 * The tool area represents the estimated size of the finger or pen that is
 * touching the device independent of its actual touch area at the point of contact.
 */
]","\android\view\MotionEvent.java"
"SAMPLE_PRESSURE","false","false","true","true","true","int","2","[]","Optional[/*
     * Offset for the sample's pressure.
     */
]","\android\view\MotionEvent.java"
"mXPrecision","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\MotionEvent.java"
"mDownTimeNano","false","false","true","false","false","long","null","[]","Optional.empty","\android\view\MotionEvent.java"
"ACTION_POINTER_INDEX_SHIFT","true","false","false","true","true","int","8","[]","Optional[/**
 * Bit shift for the action bits holding the pointer index as
 * defined by {@link #ACTION_POINTER_INDEX_MASK}.
 */
]","\android\view\MotionEvent.java"
"ACTION_CANCEL","true","false","false","true","true","int","3","[]","Optional[/**
 * Constant for {@link #getAction}: The current gesture has been aborted.
 * You will not receive any more points in it.  You should treat this as
 * an up event, but not perform any action that you normally would.
 */
]","\android\view\MotionEvent.java"
"mXOffset","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\MotionEvent.java"
"SAMPLE_Y","false","false","true","true","true","int","1","[]","Optional[/*
     * Offset for the sample's Y coordinate.
     */
]","\android\view\MotionEvent.java"
"SAMPLE_X","false","false","true","true","true","int","0","[]","Optional[/*
     * Offset for the sample's X coordinate.
     */
]","\android\view\MotionEvent.java"
"SAMPLE_TOOL_MAJOR","false","false","true","true","true","int","6","[]","Optional[/*
     * Offset for the sample's tool major axis length.
     */
]","\android\view\MotionEvent.java"
"ACTION_POINTER_ID_SHIFT","true","false","false","true","true","int","8","[@Deprecated]","Optional[/**
 * @deprecated Renamed to {@link #ACTION_POINTER_INDEX_SHIFT} to match
 * the actual data contained in these bits.
 */
]","\android\view\MotionEvent.java"
"ACTION_POINTER_1_UP","true","false","false","true","true","int","ACTION_POINTER_UP | 0x0000","[@Deprecated]","Optional[/**
 * @deprecated Use {@link #ACTION_POINTER_INDEX_MASK} to retrieve the
 * data index associated with {@link #ACTION_POINTER_UP}.
 */
]","\android\view\MotionEvent.java"
"SAMPLE_TOOL_MINOR","false","false","true","true","true","int","7","[]","Optional[/*
     * Offset for the sample's tool minor axis length.
     */
]","\android\view\MotionEvent.java"
"BASE_AVAIL_POINTERS","false","false","true","true","true","int","5","[]","Optional[/*
     * Minimum number of pointers for which to reserve space when allocating new
     * motion events.  This is explicitly not a bound on the maximum number of pointers.
     */
]","\android\view\MotionEvent.java"
"MS_PER_NS","false","false","true","true","true","long","1000000","[]","Optional.empty","\android\view\MotionEvent.java"
"ACTION_DOWN","true","false","false","true","true","int","0","[]","Optional[/**
 * Constant for {@link #getAction}: A pressed gesture has started, the
 * motion contains the initial starting location.
 */
]","\android\view\MotionEvent.java"
"mPointerIdentifiers","false","false","true","false","false","int","null","[]","Optional[// Array of mNumPointers size of identifiers for each pointer of data.
]","\android\view\MotionEvent.java"
"mAction","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\MotionEvent.java"
"pressure","true","false","false","false","false","float","null","[]","Optional[/**
 * A scaled value that describes the pressure applied to the pointer.
 * The pressure generally ranges from 0 (no pressure at all) to 1 (normal pressure),
 * however values higher than 1 may be generated depending on the calibration of
 * the input device.
 */
]","\android\view\MotionEvent.java"
"mNumSamples","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\MotionEvent.java"
"mMetaState","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\MotionEvent.java"
"mRecycledLocation","false","false","true","false","false","RuntimeException","null","[]","Optional.empty","\android\view\MotionEvent.java"
"orientation","true","false","false","false","false","float","null","[]","Optional[/**
 * The orientation of the touch area and tool area in radians clockwise from vertical.
 * An angle of 0 degrees indicates that the major axis of contact is oriented
 * upwards, is perfectly circular or is of unknown orientation.  A positive angle
 * indicates that the major axis of contact is oriented to the right.  A negative angle
 * indicates that the major axis of contact is oriented to the left.
 * The full range is from -PI/2 radians (finger pointing fully left) to PI/2 radians
 * (finger pointing fully right).
 */
]","\android\view\MotionEvent.java"
"minHeight","true","false","false","false","false","int","null","[]","Optional[/**
 * Minimum height of the AppWidget, in dp.
 *
 * <p>This field corresponds to the <code>android:minHeight</code> attribute in
 * the AppWidget meta-data file.
 */
]","\android\appwidget\AppWidgetProviderInfo.java"
"updatePeriodMillis","true","false","false","false","false","int","null","[]","Optional[/**
 * How often, in milliseconds, that this AppWidget wants to be updated.
 * The AppWidget manager may place a limit on how often a AppWidget is updated.
 *
 * <p>This field corresponds to the <code>android:updatePeriodMillis</code> attribute in
 * the AppWidget meta-data file.
 *
 * <p class=""note""><b>Note:</b> Updates requested with <code>updatePeriodMillis</code>
 * will not be delivered more than once every 30 minutes.</p>
 */
]","\android\appwidget\AppWidgetProviderInfo.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<AppWidgetProviderInfo>","new Parcelable.Creator<AppWidgetProviderInfo>() {

    public AppWidgetProviderInfo createFromParcel(Parcel parcel) {
        return new AppWidgetProviderInfo(parcel);
    }

    public AppWidgetProviderInfo[] newArray(int size) {
        return new AppWidgetProviderInfo[size];
    }
}","[]","Optional[/**
 * Parcelable.Creator that instantiates AppWidgetProviderInfo objects
 */
]","\android\appwidget\AppWidgetProviderInfo.java"
"icon","true","false","false","false","false","int","null","[]","Optional[/**
 * The icon to display for this AppWidget in the AppWidget picker.  If not supplied in the
 * xml, the application icon will be used.
 *
 * <p>This field corresponds to the <code>android:icon</code> attribute in
 * the <code>&lt;receiver&gt;</code> element in the AndroidManifest.xml file.
 */
]","\android\appwidget\AppWidgetProviderInfo.java"
"initialLayout","true","false","false","false","false","int","null","[]","Optional[/**
 * The resource id of the initial layout for this AppWidget.  This should be
 * displayed until the RemoteViews for the AppWidget is available.
 *
 * <p>This field corresponds to the <code>android:initialLayout</code> attribute in
 * the AppWidget meta-data file.
 */
]","\android\appwidget\AppWidgetProviderInfo.java"
"oldName","true","false","false","false","false","String","null","[]","Optional[/**
 * The previous name, if any, of the app widget receiver. If not supplied, it will be
 * ignored.
 *
 * <p>This field corresponds to the <code>&lt;meta-data /&gt;</code> with the name
 * <code>android.appwidget.oldName</code>.
 *
 * @hide Pending API approval
 */
]","\android\appwidget\AppWidgetProviderInfo.java"
"provider","true","false","false","false","false","ComponentName","null","[]","Optional[/**
 * Identity of this AppWidget component.  This component should be a {@link
 * android.content.BroadcastReceiver}, and it will be sent the AppWidget intents
 * {@link android.appwidget as described in the AppWidget package documentation}.
 *
 * <p>This field corresponds to the <code>android:name</code> attribute in
 * the <code>&lt;receiver&gt;</code> element in the AndroidManifest.xml file.
 */
]","\android\appwidget\AppWidgetProviderInfo.java"
"configure","true","false","false","false","false","ComponentName","null","[]","Optional[/**
 * The activity to launch that will configure the AppWidget.
 *
 * <p>This class name of field corresponds to the <code>android:configure</code> attribute in
 * the AppWidget meta-data file.  The package name always corresponds to the package containing
 * the AppWidget provider.
 */
]","\android\appwidget\AppWidgetProviderInfo.java"
"label","true","false","false","false","false","String","null","[]","Optional[/**
 * The label to display to the user in the AppWidget picker.  If not supplied in the
 * xml, the application label will be used.
 *
 * <p>This field corresponds to the <code>android:label</code> attribute in
 * the <code>&lt;receiver&gt;</code> element in the AndroidManifest.xml file.
 */
]","\android\appwidget\AppWidgetProviderInfo.java"
"minWidth","true","false","false","false","false","int","null","[]","Optional[/**
 * Minimum width of the AppWidget, in dp.
 *
 * <p>This field corresponds to the <code>android:minWidth</code> attribute in
 * the AppWidget meta-data file.
 */
]","\android\appwidget\AppWidgetProviderInfo.java"
"mCount","false","false","true","false","false","int","null","[]","Optional.empty","\android\pim\vcard\VCardEntryCounter.java"
"LIPS_ARE_SEALED","true","false","false","true","false","int","14","[]","Optional.empty","\com\android\internal\widget\Smileys.java"
"FOOT_IN_MOUTH","true","false","false","true","false","int","9","[]","Optional.empty","\com\android\internal\widget\Smileys.java"
"ANGEL","true","false","false","true","false","int","11","[]","Optional.empty","\com\android\internal\widget\Smileys.java"
"WINKING","true","false","false","true","false","int","2","[]","Optional.empty","\com\android\internal\widget\Smileys.java"
"KISSING","true","false","false","true","false","int","5","[]","Optional.empty","\com\android\internal\widget\Smileys.java"
"sIconIds","false","false","true","true","true","int","{ R.drawable.emo_im_happy, R.drawable.emo_im_sad, R.drawable.emo_im_winking, R.drawable.emo_im_tongue_sticking_out, R.drawable.emo_im_surprised, R.drawable.emo_im_kissing, R.drawable.emo_im_yelling, R.drawable.emo_im_cool, R.drawable.emo_im_money_mouth, R.drawable.emo_im_foot_in_mouth, R.drawable.emo_im_embarrassed, R.drawable.emo_im_angel, R.drawable.emo_im_undecided, R.drawable.emo_im_crying, R.drawable.emo_im_lips_are_sealed, R.drawable.emo_im_laughing, R.drawable.emo_im_wtf }","[]","Optional.empty","\com\android\internal\widget\Smileys.java"
"SURPRISED","true","false","false","true","false","int","4","[]","Optional.empty","\com\android\internal\widget\Smileys.java"
"YELLING","true","false","false","true","false","int","6","[]","Optional.empty","\com\android\internal\widget\Smileys.java"
"CRYING","true","false","false","true","false","int","13","[]","Optional.empty","\com\android\internal\widget\Smileys.java"
"MONEY_MOUTH","true","false","false","true","false","int","8","[]","Optional.empty","\com\android\internal\widget\Smileys.java"
"HAPPY","true","false","false","true","false","int","0","[]","Optional.empty","\com\android\internal\widget\Smileys.java"
"WTF","true","false","false","true","false","int","16","[]","Optional.empty","\com\android\internal\widget\Smileys.java"
"UNDECIDED","true","false","false","true","false","int","12","[]","Optional.empty","\com\android\internal\widget\Smileys.java"
"EMBARRASSED","true","false","false","true","false","int","10","[]","Optional.empty","\com\android\internal\widget\Smileys.java"
"COOL","true","false","false","true","false","int","7","[]","Optional.empty","\com\android\internal\widget\Smileys.java"
"LAUGHING","true","false","false","true","false","int","15","[]","Optional.empty","\com\android\internal\widget\Smileys.java"
"TONGUE_STICKING_OUT","true","false","false","true","false","int","3","[]","Optional.empty","\com\android\internal\widget\Smileys.java"
"SAD","true","false","false","true","false","int","1","[]","Optional.empty","\com\android\internal\widget\Smileys.java"
"KEY_MEANING","true","false","false","true","true","String","""meaning""","[]","Optional[/**
 * Result key corresponding to semantic meaning text.
 */
]","\android\speech\srec\Recognizer.java"
"EVENT_SPOKE_TOO_SOON","true","false","false","true","true","int","7","[]","Optional[/**
 * Beginning of utterance occured too soon.
 */
]","\android\speech\srec\Recognizer.java"
"mPutAudioBuffer","false","false","true","false","false","byte","null","[]","Optional[// audio buffer for putAudio(InputStream)
]","\android\speech\srec\Recognizer.java"
"mRecognizer","false","false","true","false","false","int","0","[]","Optional[// handle to SR_Recognizer object
]","\android\speech\srec\Recognizer.java"
"EVENT_STARTED","true","false","false","true","true","int","3","[]","Optional[/**
 * <code>Recognizer</code> has just been started.
 */
]","\android\speech\srec\Recognizer.java"
"KEY_LITERAL","true","false","false","true","true","String","""literal""","[]","Optional[/**
 * Result key corresponding to literal text.
 */
]","\android\speech\srec\Recognizer.java"
"EVENT_STOPPED","true","false","false","true","true","int","4","[]","Optional[/**
 * <code>Recognizer</code> is stopped.
 */
]","\android\speech\srec\Recognizer.java"
"EVENT_INVALID","true","false","false","true","true","int","0","[]","Optional[/**
 * Reserved value.
 */
]","\android\speech\srec\Recognizer.java"
"mGrammar","false","false","true","false","false","int","0","[]","Optional.empty","\android\speech\srec\Recognizer.java"
"EVENT_INCOMPLETE","true","false","false","true","true","int","2","[]","Optional[/**
 * <code>Recognizer</code> processed one frame of audio.
 */
]","\android\speech\srec\Recognizer.java"
"mActiveGrammar","false","false","true","false","false","Grammar","null","[]","Optional[// Grammar currently associated with Recognizer via SR_GrammarSetupRecognizer
]","\android\speech\srec\Recognizer.java"
"EVENT_NO_MATCH","true","false","false","true","true","int","1","[]","Optional[/**
 * <code>Recognizer</code> could not find a match for the utterance.
 */
]","\android\speech\srec\Recognizer.java"
"EVENT_RECOGNITION_RESULT","true","false","false","true","true","int","8","[]","Optional[/**
 * Recognition match detected.
 */
]","\android\speech\srec\Recognizer.java"
"EVENT_RECOGNITION_TIMEOUT","true","false","false","true","true","int","10","[]","Optional[/**
 * Timeout occured before speech recognition could complete.
 */
]","\android\speech\srec\Recognizer.java"
"EVENT_END_OF_VOICING","true","false","false","true","true","int","6","[]","Optional[/**
 * End of speech detected.
 */
]","\android\speech\srec\Recognizer.java"
"EVENT_MAX_SPEECH","true","false","false","true","true","int","12","[]","Optional[/**
 * More audio encountered than is allowed by 'swirec_max_speech_duration'.
 */
]","\android\speech\srec\Recognizer.java"
"TAG","false","false","true","true","false","String","""Recognizer""","[]","Optional.empty","\android\speech\srec\Recognizer.java"
"EVENT_START_OF_UTTERANCE_TIMEOUT","true","false","false","true","true","int","9","[]","Optional[/**
 * Timeout occured before beginning of utterance.
 */
]","\android\speech\srec\Recognizer.java"
"EVENT_NEED_MORE_AUDIO","true","false","false","true","true","int","11","[]","Optional[/**
 * Not enough samples to process one frame.
 */
]","\android\speech\srec\Recognizer.java"
"KEY_CONFIDENCE","true","false","false","true","true","String","""conf""","[]","Optional[/**
 * Result key corresponding to confidence score.
 */
]","\android\speech\srec\Recognizer.java"
"mVocabulary","false","false","true","false","false","int","0","[]","Optional[// handle to SR_Vocabulary object
]","\android\speech\srec\Recognizer.java"
"EVENT_START_OF_VOICING","true","false","false","true","true","int","5","[]","Optional[/**
 * Beginning of speech detected.
 */
]","\android\speech\srec\Recognizer.java"
"metrics","false","false","true","false","false","HttpConnectionMetricsImpl","null","[]","Optional.empty","\android\net\http\AndroidHttpClientConnection.java"
"maxLineLength","false","false","true","false","false","int","null","[]","Optional[// store CoreConnectionPNames.MAX_LINE_LENGTH for performance
]","\android\net\http\AndroidHttpClientConnection.java"
"open","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\net\http\AndroidHttpClientConnection.java"
"maxHeaderCount","false","false","true","false","false","int","null","[]","Optional.empty","\android\net\http\AndroidHttpClientConnection.java"
"outbuffer","false","false","true","false","false","SessionOutputBuffer","null","[]","Optional.empty","\android\net\http\AndroidHttpClientConnection.java"
"inbuffer","false","false","true","false","false","SessionInputBuffer","null","[]","Optional.empty","\android\net\http\AndroidHttpClientConnection.java"
"entityserializer","false","false","true","false","true","EntitySerializer","null","[]","Optional.empty","\android\net\http\AndroidHttpClientConnection.java"
"requestWriter","false","false","true","false","false","HttpMessageWriter","null","[]","Optional.empty","\android\net\http\AndroidHttpClientConnection.java"
"socket","false","false","true","false","false","Socket","null","[]","Optional.empty","\android\net\http\AndroidHttpClientConnection.java"
"mPreferenceManager","false","false","true","false","false","PreferenceManager","null","[]","Optional.empty","\android\preference\PreferenceInflater.java"
"INTENT_TAG_NAME","false","false","true","true","true","String","""intent""","[]","Optional.empty","\android\preference\PreferenceInflater.java"
"TAG","false","false","true","true","true","String","""PreferenceInflater""","[]","Optional.empty","\android\preference\PreferenceInflater.java"
"mPath","false","false","true","false","false","String","null","[]","Optional[/**
 * The path for the database file
 */
]","\android\database\sqlite\SQLiteDatabase.java"
"mFlags","false","false","true","false","false","int","null","[]","Optional[/**
 * The flags passed to open/create
 */
]","\android\database\sqlite\SQLiteDatabase.java"
"EMAIL_IN_DB_PATTERN","false","false","true","true","true","Pattern","Pattern.compile(""[\\w\\.\\-]+@[\\w\\.\\-]+"")","[]","Optional[// potentially logging them.
]","\android\database\sqlite\SQLiteDatabase.java"
"mNumCacheHits","false","false","true","false","false","int","null","[]","Optional[/**
 * maintain stats about number of cache hits and misses
 */
]","\android\database\sqlite\SQLiteDatabase.java"
"mMaxSqlCacheSize","false","false","true","false","false","int","MAX_SQL_CACHE_SIZE","[]","Optional[// max cache size per Database instance
]","\android\database\sqlite\SQLiteDatabase.java"
"SQLITE_MAX_LIKE_PATTERN_LENGTH","true","false","false","true","true","int","50000","[]","Optional[/**
 * Maximum Length Of A LIKE Or GLOB Pattern
 * The pattern matching algorithm used in the default LIKE and GLOB implementation
 * of SQLite can exhibit O(N^2) performance (where N is the number of characters in
 * the pattern) for certain pathological cases. To avoid denial-of-service attacks
 * the length of the LIKE or GLOB pattern is limited to SQLITE_MAX_LIKE_PATTERN_LENGTH bytes.
 * The default value of this limit is 50000. A modern workstation can evaluate
 * even a pathological LIKE or GLOB pattern of 50000 bytes relatively quickly.
 * The denial of service problem only comes into play when the pattern length gets
 * into millions of bytes. Nevertheless, since most useful LIKE or GLOB patterns
 * are at most a few dozen bytes in length, paranoid application developers may
 * want to reduce this parameter to something in the range of a few hundred
 * if they know that external users are able to generate arbitrary patterns.
 */
]","\android\database\sqlite\SQLiteDatabase.java"
"LOCK_ACQUIRED_WARNING_TIME_IN_MS_ALWAYS_PRINT","false","false","true","true","true","int","2000","[]","Optional.empty","\android\database\sqlite\SQLiteDatabase.java"
"LOCK_ACQUIRED_WARNING_TIME_IN_MS","false","false","true","true","true","int","300","[]","Optional[/**
 * If the lock is held this long then a warning will be printed when it is released.
 */
]","\android\database\sqlite\SQLiteDatabase.java"
"SLEEP_AFTER_YIELD_QUANTUM","false","false","true","true","true","int","1000","[]","Optional.empty","\android\database\sqlite\SQLiteDatabase.java"
"CONFLICT_REPLACE","true","false","false","true","true","int","5","[]","Optional[/**
 * When a UNIQUE constraint violation occurs, the pre-existing rows that
 * are causing the constraint violation are removed prior to inserting
 * or updating the current row. Thus the insert or update always occurs.
 * The command continues executing normally. No error is returned.
 * If a NOT NULL constraint violation occurs, the NULL value is replaced
 * by the default value for that column. If the column has no default
 * value, then the ABORT algorithm is used. If a CHECK constraint
 * violation occurs then the IGNORE algorithm is used. When this conflict
 * resolution strategy deletes rows in order to satisfy a constraint,
 * it does not invoke delete triggers on those rows.
 * This behavior might change in a future release.
 */
]","\android\database\sqlite\SQLiteDatabase.java"
"GET_LOCK_LOG_PREFIX","false","false","false","true","true","String","""GETLOCK:""","[]","Optional[/* package */
]","\android\database\sqlite\SQLiteDatabase.java"
"masterTable","false","false","false","false","false","String","null","[]","Optional[/**
 * The table containing the _sync_time column
 */
]","\android\database\sqlite\SQLiteDatabase.java"
"mPrograms","false","false","true","false","false","WeakHashMap<SQLiteClosable,Object>","null","[]","Optional.empty","\android\database\sqlite\SQLiteDatabase.java"
"mPathForLogs","false","false","true","false","false","String","null","[]","Optional[// lazily populated
]","\android\database\sqlite\SQLiteDatabase.java"
"mTransactionIsSuccessful","false","false","true","false","false","boolean","null","[]","Optional[/**
 * Valid during the life of a transaction, and indicates whether the entire transaction (the
 * outer one and all of the inner ones) so far has been successful.
 */
]","\android\database\sqlite\SQLiteDatabase.java"
"mTransactionListener","false","false","true","false","false","SQLiteTransactionListener","null","[]","Optional[/**
 * Valid during the life of a transaction.
 */
]","\android\database\sqlite\SQLiteDatabase.java"
"CONFLICT_VALUES","false","false","true","true","true","String","new String[] { """", "" OR ROLLBACK "", "" OR ABORT "", "" OR FAIL "", "" OR IGNORE "", "" OR REPLACE "" }","[]","Optional.empty","\android\database\sqlite\SQLiteDatabase.java"
"OPEN_READONLY","true","false","false","true","true","int","0x00000001","[]","Optional[// update native code if changing
]","\android\database\sqlite\SQLiteDatabase.java"
"CREATE_IF_NECESSARY","true","false","false","true","true","int","0x10000000","[]","Optional[// update native code if changing
]","\android\database\sqlite\SQLiteDatabase.java"
"CONFLICT_ABORT","true","false","false","true","true","int","2","[]","Optional[/**
 * When a constraint violation occurs,no ROLLBACK is executed
 * so changes from prior commands within the same transaction
 * are preserved. This is the default behavior.
 */
]","\android\database\sqlite\SQLiteDatabase.java"
"mNativeHandle","false","false","false","false","false","int","0","[]","Optional[/* package */
]","\android\database\sqlite\SQLiteDatabase.java"
"mFactory","false","false","true","false","false","CursorFactory","null","[]","Optional[/**
 * The optional factory to use when creating new Cursors
 */
]","\android\database\sqlite\SQLiteDatabase.java"
"deletedTable","false","false","false","false","false","String","null","[]","Optional[/**
 * The deleted table that corresponds to the master table
 */
]","\android\database\sqlite\SQLiteDatabase.java"
"mSyncUpdateInfo","false","false","true","false","true","Map<String,SyncUpdateInfo>","new HashMap<String, SyncUpdateInfo>()","[]","Optional[/**
 * Maps table names to info about what to which _sync_time column to set
 * to NULL on an update. This is used to support syncing.
 */
]","\android\database\sqlite\SQLiteDatabase.java"
"mRandom","false","false","true","false","true","Random","new Random()","[]","Optional.empty","\android\database\sqlite\SQLiteDatabase.java"
"mLastSqlStatement","false","false","true","false","false","String","null","[]","Optional.empty","\android\database\sqlite\SQLiteDatabase.java"
"mLockingEnabled","false","false","true","false","false","boolean","true","[]","Optional[/**
 * If set then the SQLiteDatabase is made thread-safe by using locks
 * around critical sections
 */
]","\android\database\sqlite\SQLiteDatabase.java"
"COMMIT_SQL","false","false","true","true","true","String","""COMMIT;""","[]","Optional.empty","\android\database\sqlite\SQLiteDatabase.java"
"OPEN_READWRITE","true","false","false","true","true","int","0x00000000","[]","Optional[// update native code if changing
]","\android\database\sqlite\SQLiteDatabase.java"
"mStackTrace","false","false","true","false","false","Throwable","null","[]","Optional[/**
 * Used to find out where this object was created in case it never got closed.
 */
]","\android\database\sqlite\SQLiteDatabase.java"
"mLock","false","false","true","false","true","ReentrantLock","new ReentrantLock(true)","[]","Optional[/**
 * Synchronize on this when accessing the database
 */
]","\android\database\sqlite\SQLiteDatabase.java"
"CONFLICT_FAIL","true","false","false","true","true","int","3","[]","Optional[/**
 * When a constraint violation occurs, the command aborts with a return
 * code SQLITE_CONSTRAINT. But any changes to the database that
 * the command made prior to encountering the constraint violation
 * are preserved and are not backed out.
 */
]","\android\database\sqlite\SQLiteDatabase.java"
"mCacheFullWarnings","false","false","true","false","false","int","null","[]","Optional.empty","\android\database\sqlite\SQLiteDatabase.java"
"EVENT_DB_CORRUPT","false","false","true","true","true","int","75004","[]","Optional.empty","\android\database\sqlite\SQLiteDatabase.java"
"mInnerTransactionIsSuccessful","false","false","true","false","false","boolean","null","[]","Optional[/**
 * Indicates whether the most-recently started transaction has been marked as successful.
 */
]","\android\database\sqlite\SQLiteDatabase.java"
"mTimeClosed","false","false","true","false","false","String","null","[]","Optional.empty","\android\database\sqlite\SQLiteDatabase.java"
"LOCK_WARNING_WINDOW_IN_MS","false","false","true","true","true","int","20000","[]","Optional[// unless run command adb shell setprop log.tag.Database VERBOSE
]","\android\database\sqlite\SQLiteDatabase.java"
"mCompiledQueries","false","false","false","false","false","Map<String,SQLiteCompiledSql>","Maps.newHashMap()","[]","Optional[/* package */
]","\android\database\sqlite\SQLiteDatabase.java"
"MAX_WARNINGS_ON_CACHESIZE_CONDITION","false","false","true","true","true","int","1","[]","Optional.empty","\android\database\sqlite\SQLiteDatabase.java"
"mNumCacheMisses","false","false","true","false","false","int","null","[]","Optional.empty","\android\database\sqlite\SQLiteDatabase.java"
"NO_LOCALIZED_COLLATORS","true","false","false","true","true","int","0x00000010","[]","Optional[// update native code if changing
]","\android\database\sqlite\SQLiteDatabase.java"
"QUERY_LOG_SQL_LENGTH","false","false","true","true","true","int","64","[]","Optional.empty","\android\database\sqlite\SQLiteDatabase.java"
"TAG","false","false","true","true","true","String","""Database""","[]","Optional.empty","\android\database\sqlite\SQLiteDatabase.java"
"mLockAcquiredThreadTime","false","false","true","false","false","long","0L","[]","Optional.empty","\android\database\sqlite\SQLiteDatabase.java"
"activeDatabases","false","false","true","true","true","ActiveDatabases","new ActiveDatabases()","[]","Optional.empty","\android\database\sqlite\SQLiteDatabase.java"
"mTimeOpened","false","false","true","false","false","String","null","[]","Optional[/**
 * the following 2 members maintain the time when a database is opened and closed
 */
]","\android\database\sqlite\SQLiteDatabase.java"
"sQueryLogTimeInMillis","false","false","true","true","false","int","0","[]","Optional[// lazily initialized
]","\android\database\sqlite\SQLiteDatabase.java"
"mTempTableSequence","false","false","false","false","false","int","0","[]","Optional[/* package */
]","\android\database\sqlite\SQLiteDatabase.java"
"CONFLICT_ROLLBACK","true","false","false","true","true","int","1","[]","Optional[/**
 * When a constraint violation occurs, an immediate ROLLBACK occurs,
 * thus ending the current transaction, and the command aborts with a
 * return code of SQLITE_CONSTRAINT. If no transaction is active
 * (other than the implied transaction that is created on every command)
 * then this algorithm works the same as ABORT.
 */
]","\android\database\sqlite\SQLiteDatabase.java"
"MAX_SQL_CACHE_SIZE","true","false","false","true","true","int","250","[]","Optional[/**
 * @hide
 */
]","\android\database\sqlite\SQLiteDatabase.java"
"mLockAcquiredWallTime","false","false","true","false","false","long","0L","[]","Optional.empty","\android\database\sqlite\SQLiteDatabase.java"
"CONFLICT_IGNORE","true","false","false","true","true","int","4","[]","Optional[/**
 * When a constraint violation occurs, the one row that contains
 * the constraint violation is not inserted or changed.
 * But the command continues executing normally. Other rows before and
 * after the row that contained the constraint violation continue to be
 * inserted or updated normally. No error is returned.
 */
]","\android\database\sqlite\SQLiteDatabase.java"
"CONFLICT_NONE","true","false","false","true","true","int","0","[]","Optional[/**
 * use the following when no conflict action is specified.
 */
]","\android\database\sqlite\SQLiteDatabase.java"
"mActiveDatabases","false","false","true","false","false","HashSet<WeakReference<SQLiteDatabase>>","new HashSet<WeakReference<SQLiteDatabase>>()","[]","Optional.empty","\android\database\sqlite\SQLiteDatabase.java"
"mLastLockMessageTime","false","false","true","false","false","long","0L","[]","Optional.empty","\android\database\sqlite\SQLiteDatabase.java"
"EVENT_DB_OPERATION","false","false","true","true","true","int","52000","[]","Optional.empty","\android\database\sqlite\SQLiteDatabase.java"
"LOCK_ACQUIRED_WARNING_THREAD_TIME_IN_MS","false","false","true","true","true","int","100","[]","Optional.empty","\android\database\sqlite\SQLiteDatabase.java"
"OPEN_READ_MASK","false","false","true","true","true","int","0x00000001","[]","Optional[// update native code if changing
]","\android\database\sqlite\SQLiteDatabase.java"
"LOG_SLOW_QUERIES_PROPERTY","false","false","true","true","true","String","""db.log.slow_query_threshold""","[]","Optional[// System property that enables logging of slow queries. Specify the threshold in ms.
]","\android\database\sqlite\SQLiteDatabase.java"
"mSlowQueryThreshold","false","false","true","false","true","int","null","[]","Optional.empty","\android\database\sqlite\SQLiteDatabase.java"
"foreignKey","false","false","false","false","false","String","null","[]","Optional[/**
 * The key in the local table the row in table. It may be _id, if table
 * is the local table.
 */
]","\android\database\sqlite\SQLiteDatabase.java"
"mPad","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\style\DrawableMarginSpan.java"
"mDrawable","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\text\style\DrawableMarginSpan.java"
"TAG","false","false","true","true","true","String","""EditableInputConnection""","[]","Optional.empty","\com\android\internal\widget\EditableInputConnection.java"
"mTextView","false","false","true","false","true","TextView","null","[]","Optional.empty","\com\android\internal\widget\EditableInputConnection.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\com\android\internal\widget\EditableInputConnection.java"
"mXml","false","false","false","false","false","XmlBlock.Parser","null","[]","Optional[/*package*/
]","\android\content\res\TypedArray.java"
"mRsrcs","false","false","false","false","false","int","null","[]","Optional[/*package*/
]","\android\content\res\TypedArray.java"
"mResources","false","false","true","false","true","Resources","null","[]","Optional.empty","\android\content\res\TypedArray.java"
"mLength","false","false","false","false","false","int","null","[]","Optional[/*package*/
]","\android\content\res\TypedArray.java"
"mIndices","false","false","false","false","false","int","null","[]","Optional[/*package*/
]","\android\content\res\TypedArray.java"
"mData","false","false","false","false","false","int","null","[]","Optional[/*package*/
]","\android\content\res\TypedArray.java"
"mValue","false","false","true","false","false","TypedValue","new TypedValue()","[]","Optional.empty","\android\content\res\TypedArray.java"
"MONTH","true","false","false","true","true","int","5","[]","Optional.empty","\android\text\format\Time.java"
"year","true","false","false","false","false","int","null","[]","Optional[/**
 * Year. TBD. Is this years since 1900 like in struct tm?
 */
]","\android\text\format\Time.java"
"monthDay","true","false","false","false","false","int","null","[]","Optional[/**
 * Day of month [1-31]
 */
]","\android\text\format\Time.java"
"WEDNESDAY","true","false","false","true","true","int","3","[]","Optional.empty","\android\text\format\Time.java"
"YEAR","true","false","false","true","true","int","6","[]","Optional.empty","\android\text\format\Time.java"
"weekDay","true","false","false","false","false","int","null","[]","Optional[/**
 * Day of week [0-6]
 */
]","\android\text\format\Time.java"
"sTimeOnlyFormat","false","false","true","true","false","String","null","[]","Optional.empty","\android\text\format\Time.java"
"sLongWeekdays","false","false","true","true","false","String","null","[]","Optional.empty","\android\text\format\Time.java"
"YEAR_DAY","true","false","false","true","true","int","8","[]","Optional.empty","\android\text\format\Time.java"
"TUESDAY","true","false","false","true","true","int","2","[]","Optional.empty","\android\text\format\Time.java"
"yearDay","true","false","false","false","false","int","null","[]","Optional[/**
 * Day of year [0-365]
 */
]","\android\text\format\Time.java"
"month","true","false","false","false","false","int","null","[]","Optional[/**
 * Month [0-11]
 */
]","\android\text\format\Time.java"
"Y_M_D_T_H_M_S_000","false","false","true","true","true","String","""%Y-%m-%dT%H:%M:%S.000""","[]","Optional.empty","\android\text\format\Time.java"
"sDateTimeFormat","false","false","true","true","false","String","null","[]","Optional.empty","\android\text\format\Time.java"
"sDateOnlyFormat","false","false","true","true","false","String","null","[]","Optional.empty","\android\text\format\Time.java"
"MONDAY","true","false","false","true","true","int","1","[]","Optional.empty","\android\text\format\Time.java"
"Y_M_D","false","false","true","true","true","String","""%Y-%m-%d""","[]","Optional.empty","\android\text\format\Time.java"
"WEEK_NUM","true","false","false","true","true","int","9","[]","Optional.empty","\android\text\format\Time.java"
"SATURDAY","true","false","false","true","true","int","6","[]","Optional.empty","\android\text\format\Time.java"
"DAYS_PER_MONTH","false","false","true","true","true","int","{ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }","[]","Optional.empty","\android\text\format\Time.java"
"sLongMonths","false","false","true","true","false","String","null","[]","Optional.empty","\android\text\format\Time.java"
"WEEK_DAY","true","false","false","true","true","int","7","[]","Optional.empty","\android\text\format\Time.java"
"Y_M_D_T_H_M_S_000_Z","false","false","true","true","true","String","""%Y-%m-%dT%H:%M:%S.000Z""","[]","Optional.empty","\android\text\format\Time.java"
"EPOCH_JULIAN_DAY","true","false","false","true","true","int","2440588","[]","Optional[/**
 * The Julian day of the epoch, that is, January 1, 1970 on the Gregorian
 * calendar.
 */
]","\android\text\format\Time.java"
"FRIDAY","true","false","false","true","true","int","5","[]","Optional.empty","\android\text\format\Time.java"
"sDateCommand","false","false","true","true","false","String","""%a %b %e %H:%M:%S %Z %Y""","[]","Optional.empty","\android\text\format\Time.java"
"TIMEZONE_UTC","true","false","false","true","true","String","""UTC""","[]","Optional.empty","\android\text\format\Time.java"
"sThursdayOffset","false","false","true","true","true","int","{ -3, 3, 2, 1, 0, -1, -2 }","[]","Optional[/**
 * This array is indexed by the weekDay field (SUNDAY=0, MONDAY=1, etc.)
 * and gives a number that can be added to the yearDay to give the
 * closest Thursday yearDay.
 */
]","\android\text\format\Time.java"
"THURSDAY","true","false","false","true","true","int","4","[]","Optional.empty","\android\text\format\Time.java"
"second","true","false","false","false","false","int","null","[]","Optional[/**
 * Seconds [0-61] (2 leap seconds allowed)
 */
]","\android\text\format\Time.java"
"allDay","true","false","false","false","false","boolean","null","[]","Optional[/**
 * True if this is an allDay event. The hour, minute, second fields are
 * all zero, and the date is displayed the same in all time zones.
 */
]","\android\text\format\Time.java"
"gmtoff","true","false","false","false","false","long","null","[]","Optional[/**
 * Offset from UTC (in seconds).
 */
]","\android\text\format\Time.java"
"MINUTE","true","false","false","true","true","int","2","[]","Optional.empty","\android\text\format\Time.java"
"SUNDAY","true","false","false","true","true","int","0","[]","Optional.empty","\android\text\format\Time.java"
"MONTH_DAY","true","false","false","true","true","int","4","[]","Optional.empty","\android\text\format\Time.java"
"HOUR","true","false","false","true","true","int","3","[]","Optional.empty","\android\text\format\Time.java"
"timezone","true","false","false","false","false","String","null","[]","Optional[/**
 * The timezone for this Time.  Should not be null.
 */
]","\android\text\format\Time.java"
"isDst","true","false","false","false","false","int","null","[]","Optional[/**
 * This time is in daylight savings time. One of:
 * <ul>
 * <li><b>positive</b> - in dst</li>
 * <li><b>0</b> - not in dst</li>
 * <li><b>negative</b> - unknown</li>
 * </ul>
 */
]","\android\text\format\Time.java"
"sLocale","false","false","true","true","false","Locale","null","[]","Optional[/*
     * The Locale for which date formatting strings have been loaded.
     */
]","\android\text\format\Time.java"
"sPm","false","false","true","true","false","String","null","[]","Optional.empty","\android\text\format\Time.java"
"hour","true","false","false","false","false","int","null","[]","Optional[/**
 * Hour of day [0-23]
 */
]","\android\text\format\Time.java"
"sShortWeekdays","false","false","true","true","false","String","null","[]","Optional.empty","\android\text\format\Time.java"
"sShortMonths","false","false","true","true","false","String","null","[]","Optional.empty","\android\text\format\Time.java"
"minute","true","false","false","false","false","int","null","[]","Optional[/**
 * Minute [0-59]
 */
]","\android\text\format\Time.java"
"sLongStandaloneMonths","false","false","true","true","false","String","null","[]","Optional.empty","\android\text\format\Time.java"
"SECOND","true","false","false","true","true","int","1","[]","Optional[/*
     * Define symbolic constants for accessing the fields in this class. Used in
     * getActualMaximum().
     */
]","\android\text\format\Time.java"
"sAm","false","false","true","true","false","String","null","[]","Optional.empty","\android\text\format\Time.java"
"MSG_BIND_PREFERENCES","false","false","true","true","true","int","0","[]","Optional.empty","\android\preference\PreferenceActivity.java"
"mSavedInstanceState","false","false","true","false","false","Bundle","null","[]","Optional.empty","\android\preference\PreferenceActivity.java"
"mPreferenceManager","false","false","true","false","false","PreferenceManager","null","[]","Optional.empty","\android\preference\PreferenceActivity.java"
"FIRST_REQUEST_CODE","false","false","true","true","true","int","100","[]","Optional[/**
 * The starting request code given out to preference framework.
 */
]","\android\preference\PreferenceActivity.java"
"mHandler","false","false","true","false","false","Handler","new Handler() {

    @Override
    public void handleMessage(Message msg) {
        switch(msg.what) {
            case MSG_BIND_PREFERENCES:
                bindPreferences();
                break;
        }
    }
}","[]","Optional.empty","\android\preference\PreferenceActivity.java"
"PREFERENCES_TAG","false","false","true","true","true","String","""android:preferences""","[]","Optional.empty","\android\preference\PreferenceActivity.java"
"intermediateDigit","false","false","true","false","false","Integer","null","[]","Optional.empty","\android\widget\DoubleDigitManager.java"
"mCallBack","false","false","true","false","true","CallBack","null","[]","Optional.empty","\android\widget\DoubleDigitManager.java"
"timeoutInMillis","false","false","true","false","true","long","null","[]","Optional.empty","\android\widget\DoubleDigitManager.java"
"PARENT_NON_CONFIG_INSTANCE_KEY","false","false","false","true","true","String","""android:parent_non_config_instance""","[]","Optional.empty","\android\app\ActivityGroup.java"
"mLocalActivityManager","false","true","false","false","false","LocalActivityManager","null","[]","Optional[/**
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\app\ActivityGroup.java"
"STATES_KEY","false","false","true","true","true","String","""android:states""","[]","Optional.empty","\android\app\ActivityGroup.java"
"TAG","false","false","true","true","true","String","""ActivityGroup""","[]","Optional.empty","\android\app\ActivityGroup.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<BaseSavedState>","new Parcelable.Creator<BaseSavedState>() {

    public BaseSavedState createFromParcel(Parcel in) {
        return new BaseSavedState(in);
    }

    public BaseSavedState[] newArray(int size) {
        return new BaseSavedState[size];
    }
}","[]","Optional.empty","\android\preference\Preference.java"
"mEnabled","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\preference\Preference.java"
"mDependencyKey","false","false","true","false","false","String","null","[]","Optional.empty","\android\preference\Preference.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\preference\Preference.java"
"mPersistent","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\preference\Preference.java"
"mWidgetLayoutResId","false","false","true","false","false","int","null","[]","Optional.empty","\android\preference\Preference.java"
"mHasSpecifiedLayout","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\preference\Preference.java"
"mId","false","false","true","false","false","long","null","[]","Optional[/**
 * Set when added to hierarchy since we need a unique ID within that
 * hierarchy.
 */
]","\android\preference\Preference.java"
"mOrder","false","false","true","false","false","int","DEFAULT_ORDER","[]","Optional.empty","\android\preference\Preference.java"
"mKey","false","false","true","false","false","String","null","[]","Optional.empty","\android\preference\Preference.java"
"mPreferenceManager","false","false","true","false","false","PreferenceManager","null","[]","Optional.empty","\android\preference\Preference.java"
"mRequiresKey","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\preference\Preference.java"
"mShouldDisableView","false","false","true","false","false","boolean","true","[]","Optional[/**
 * @see #setShouldDisableView(boolean)
 */
]","\android\preference\Preference.java"
"mDependencyMet","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\preference\Preference.java"
"mOnChangeListener","false","false","true","false","false","OnPreferenceChangeListener","null","[]","Optional.empty","\android\preference\Preference.java"
"mDefaultValue","false","false","true","false","false","Object","null","[]","Optional.empty","\android\preference\Preference.java"
"mDependents","false","false","true","false","false","List<Preference>","null","[]","Optional.empty","\android\preference\Preference.java"
"DEFAULT_ORDER","true","false","false","true","true","int","Integer.MAX_VALUE","[]","Optional[/**
 * Specify for {@link #setOrder(int)} if a specific order is not required.
 */
]","\android\preference\Preference.java"
"mLayoutResId","false","false","true","false","false","int","com.android.internal.R.layout.preference","[]","Optional.empty","\android\preference\Preference.java"
"mSelectable","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\preference\Preference.java"
"mSummary","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\preference\Preference.java"
"mBaseMethodCalled","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\preference\Preference.java"
"mTitle","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\preference\Preference.java"
"mListener","false","false","true","false","false","OnPreferenceChangeInternalListener","null","[]","Optional.empty","\android\preference\Preference.java"
"mOnClickListener","false","false","true","false","false","OnPreferenceClickListener","null","[]","Optional.empty","\android\preference\Preference.java"
"mIntent","false","false","true","false","false","Intent","null","[]","Optional.empty","\android\preference\Preference.java"
"BEEP_DURATION","false","false","true","true","true","int","150","[]","Optional.empty","\android\view\VolumePanel.java"
"mAdditionalMessage","false","false","true","false","true","TextView","null","[]","Optional.empty","\android\view\VolumePanel.java"
"MSG_STOP_SOUNDS","false","false","true","true","true","int","3","[]","Optional.empty","\android\view\VolumePanel.java"
"PLAY_SOUND_DELAY","true","false","false","true","true","int","300","[]","Optional[/**
 * The delay before playing a sound. This small period exists so the user
 * can press another key (non-volume keys, too) to have it NOT be audible.
 * <p>
 * PhoneWindow will implement this part.
 */
]","\android\view\VolumePanel.java"
"mAudioService","false","true","false","false","false","AudioService","null","[]","Optional.empty","\android\view\VolumePanel.java"
"mContext","false","true","false","false","false","Context","null","[]","Optional.empty","\android\view\VolumePanel.java"
"ALARM_VOLUME_TEXT","false","false","true","true","true","int","com.android.internal.R.string.volume_alarm","[]","Optional.empty","\android\view\VolumePanel.java"
"MSG_PLAY_SOUND","false","false","true","true","true","int","2","[]","Optional.empty","\android\view\VolumePanel.java"
"FREE_DELAY","false","false","true","true","true","int","10000","[]","Optional.empty","\android\view\VolumePanel.java"
"mLargeStreamIcon","false","false","true","false","true","ImageView","null","[]","Optional.empty","\android\view\VolumePanel.java"
"UNKNOWN_VOLUME_TEXT","false","false","true","true","true","int","com.android.internal.R.string.volume_unknown","[]","Optional.empty","\android\view\VolumePanel.java"
"mView","false","false","true","false","true","View","null","[]","Optional.empty","\android\view\VolumePanel.java"
"mRingIsSilent","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\view\VolumePanel.java"
"mAudioManager","false","false","true","false","false","AudioManager","null","[]","Optional.empty","\android\view\VolumePanel.java"
"mSmallStreamIcon","false","false","true","false","true","ImageView","null","[]","Optional.empty","\android\view\VolumePanel.java"
"VIBRATE_DELAY","true","false","false","true","true","int","300","[]","Optional[/**
 * The delay before vibrating. This small period exists so if the user is
 * moving to silent mode, it will not emit a short vibrate (it normally
 * would since vibrate is between normal mode and silent mode using hardware
 * keys).
 */
]","\android\view\VolumePanel.java"
"INCALL_VOLUME_TEXT","false","false","true","true","true","int","com.android.internal.R.string.volume_call","[]","Optional.empty","\android\view\VolumePanel.java"
"mToneGenerators","false","false","true","false","false","ToneGenerator","null","[]","Optional[// Synchronize when accessing this
]","\android\view\VolumePanel.java"
"mVibrator","false","false","true","false","false","Vibrator","null","[]","Optional.empty","\android\view\VolumePanel.java"
"BLUETOOTH_INCALL_VOLUME_TEXT","false","false","true","true","true","int","com.android.internal.R.string.volume_bluetooth_call","[]","Optional.empty","\android\view\VolumePanel.java"
"RINGTONE_VOLUME_TEXT","false","false","true","true","true","int","com.android.internal.R.string.volume_ringtone","[]","Optional.empty","\android\view\VolumePanel.java"
"mLevel","false","false","true","false","true","ProgressBar","null","[]","Optional.empty","\android\view\VolumePanel.java"
"mToast","false","false","true","false","true","Toast","null","[]","Optional.empty","\android\view\VolumePanel.java"
"MSG_VOLUME_CHANGED","false","false","true","true","true","int","0","[]","Optional.empty","\android\view\VolumePanel.java"
"TAG","false","false","true","true","true","String","""VolumePanel""","[]","Optional.empty","\android\view\VolumePanel.java"
"VIBRATE_DURATION","false","false","true","true","true","int","300","[]","Optional.empty","\android\view\VolumePanel.java"
"LOGD","false","false","true","true","false","boolean","false","[]","Optional.empty","\android\view\VolumePanel.java"
"MSG_FREE_RESOURCES","false","false","true","true","true","int","1","[]","Optional.empty","\android\view\VolumePanel.java"
"MSG_VIBRATE","false","false","true","true","true","int","4","[]","Optional.empty","\android\view\VolumePanel.java"
"NOTIFICATION_VOLUME_TEXT","false","false","true","true","true","int","com.android.internal.R.string.volume_notification","[]","Optional.empty","\android\view\VolumePanel.java"
"mMessage","false","false","true","false","true","TextView","null","[]","Optional.empty","\android\view\VolumePanel.java"
"MUSIC_VOLUME_TEXT","false","false","true","true","true","int","com.android.internal.R.string.volume_music","[]","Optional.empty","\android\view\VolumePanel.java"
"MAX_VOLUME","false","false","true","true","true","int","100","[]","Optional.empty","\android\view\VolumePanel.java"
"ORDER_REVERSE","true","false","false","true","true","int","1","[]","Optional[/**
 * Distributes the animation delays in the reverse order in which view were
 * added to their view group.
 */
]","\android\view\animation\LayoutAnimationController.java"
"mRandomizer","false","true","false","false","false","Random","null","[]","Optional[/**
 * The randomizer used when the order is set to random. Subclasses should
 * use this object to avoid creating their own.
 */
]","\android\view\animation\LayoutAnimationController.java"
"mOrder","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\animation\LayoutAnimationController.java"
"count","true","false","false","false","false","int","null","[]","Optional[/**
 * The number of children in the view group containing the view to which
 * these parameters are attached.
 */
]","\android\view\animation\LayoutAnimationController.java"
"ORDER_RANDOM","true","false","false","true","true","int","2","[]","Optional[/**
 * Randomly distributes the animation delays.
 */
]","\android\view\animation\LayoutAnimationController.java"
"mAnimation","false","true","false","false","false","Animation","null","[]","Optional[/**
 * The animation applied on each child of the view group on which this
 * layout animation controller is set.
 */
]","\android\view\animation\LayoutAnimationController.java"
"mDelay","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\animation\LayoutAnimationController.java"
"ORDER_NORMAL","true","false","false","true","true","int","0","[]","Optional[/**
 * Distributes the animation delays in the order in which view were added
 * to their view group.
 */
]","\android\view\animation\LayoutAnimationController.java"
"index","true","false","false","false","false","int","null","[]","Optional[/**
 * The index of the view to which these parameters are attached in its
 * containing view group.
 */
]","\android\view\animation\LayoutAnimationController.java"
"mInterpolator","false","true","false","false","false","Interpolator","null","[]","Optional[/**
 * The interpolator used to interpolate the delays.
 */
]","\android\view\animation\LayoutAnimationController.java"
"mDuration","false","false","true","false","false","long","null","[]","Optional.empty","\android\view\animation\LayoutAnimationController.java"
"mMaxDelay","false","false","true","false","false","long","null","[]","Optional.empty","\android\view\animation\LayoutAnimationController.java"
"mFinishedStart","false","false","false","false","false","boolean","false","[]","Optional.empty","\android\app\ExpandableListActivity.java"
"mList","false","false","false","false","false","ExpandableListView","null","[]","Optional.empty","\android\app\ExpandableListActivity.java"
"mAdapter","false","false","false","false","false","ExpandableListAdapter","null","[]","Optional.empty","\android\app\ExpandableListActivity.java"
"PROPERTY_NAME","true","false","false","true","true","String","""NAME""","[]","Optional[// (3.0, 4,0)
]","\android\pim\vcard\VCardConstants.java"
"PROPERTY_X_YAHOO","true","false","false","true","true","String","""X-YAHOO""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_ROLE","true","false","false","true","true","String","""ROLE""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PARAM_ENCODING_QP","true","false","false","true","true","String","""QUOTED-PRINTABLE""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"VERSION_V40","true","false","false","true","true","String","""4.0""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PARAM_PHONE_EXTRA_TYPE_OTHER","true","false","false","true","true","String","""OTHER""","[]","Optional[// vCard composer translates this type to ""VOICE"" Just for parsing.
]","\android\pim\vcard\VCardConstants.java"
"PROPERTY_TEL","true","false","false","true","true","String","""TEL""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PARAM_TYPE_INTERNET","true","false","false","true","true","String","""INTERNET""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_FN","true","false","false","true","true","String","""FN""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PARAM_TYPE_BBS","true","false","false","true","true","String","""BBS""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_DDAY","true","false","false","true","true","String","""DDAY""","[]","Optional[// Date of death (4.0)
]","\android\pim\vcard\VCardConstants.java"
"VERSION_V30","true","false","false","true","true","String","""3.0""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_X_NICKNAME","true","false","false","true","true","String","""X-NICKNAME""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_TITLE","true","false","false","true","true","String","""TITLE""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PARAM_TYPE_MODEM","true","false","false","true","true","String","""MODEM""","[]","Optional[// Phone types existing in vCard 2.1 but not known to ContactsContract.
]","\android\pim\vcard\VCardConstants.java"
"PROPERTY_X_ICQ","true","false","false","true","true","String","""X-ICQ""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PARAM_PHONE_EXTRA_TYPE_COMPANY_MAIN","true","false","false","true","true","String","""COMPANY-MAIN""","[]","Optional[// vCard composer translates this type to ""WORK"" + ""PREF"". Just for parsing.
]","\android\pim\vcard\VCardConstants.java"
"VERSION_V21","true","false","false","true","true","String","""2.1""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PARAM_ADR_TYPE_DOM","true","false","false","true","true","String","""DOM""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PARAM_TYPE_PREF","true","false","false","true","true","String","""PREF""","[]","Optional[// one ""PREF""s in one property name, while Android accepts them.
]","\android\pim\vcard\VCardConstants.java"
"PARAM_TYPE","true","false","false","true","true","String","""TYPE""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_X_AIM","true","false","false","true","true","String","""X-AIM""","[]","Optional[// Shown in http://en.wikipedia.org/wiki/VCard support are defined here.
]","\android\pim\vcard\VCardConstants.java"
"PROPERTY_X_PHONETIC_FIRST_NAME","true","false","false","true","true","String","""X-PHONETIC-FIRST-NAME""","[]","Optional[// De-fact property values expressing phonetic names.
]","\android\pim\vcard\VCardConstants.java"
"PARAM_ADR_TYPE_INTL","true","false","false","true","true","String","""INTL""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_BDAY","true","false","false","true","true","String","""BDAY""","[]","Optional[// Birthday (3.0, 4.0)
]","\android\pim\vcard\VCardConstants.java"
"PARAM_SORT_AS","true","false","false","true","true","String","""SORT-AS""","[]","Optional[// SORT-AS parameter introduced in vCard 4.0 (as of rev.13)
]","\android\pim\vcard\VCardConstants.java"
"PARAM_TYPE_TLX","true","false","false","true","true","String","""TLX""","[]","Optional[// Telex
]","\android\pim\vcard\VCardConstants.java"
"MAX_CHARACTER_NUMS_BASE64_V30","false","false","false","true","true","int","75","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_NOTE","true","false","false","true","true","String","""NOTE""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PARAM_ENCODING_BASE64","true","false","false","true","true","String","""BASE64""","[]","Optional[// Available in vCard 2.1
]","\android\pim\vcard\VCardConstants.java"
"PARAM_ADR_TYPE_PARCEL","true","false","false","true","true","String","""PARCEL""","[]","Optional[// TYPE parameters for postal addresses.
]","\android\pim\vcard\VCardConstants.java"
"PARAM_PHONE_EXTRA_TYPE_TTY_TDD","true","false","false","true","true","String","""TTY-TDD""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_EMAIL","true","false","false","true","true","String","""EMAIL""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PARAM_ENCODING_B","true","false","false","true","true","String","""B""","[]","Optional[// Available in vCard 3.0
]","\android\pim\vcard\VCardConstants.java"
"PROPERTY_VERSION","true","false","false","true","true","String","""VERSION""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PARAM_TYPE_X_IRMC_N","false","false","false","true","true","String","""X-IRMC-N""","[]","Optional[/* package */
]","\android\pim\vcard\VCardConstants.java"
"PARAM_EXTRA_TYPE_COMPANY","true","false","false","true","true","String","""COMPANY""","[]","Optional[// Do not use in composer side.
]","\android\pim\vcard\VCardConstants.java"
"PROPERTY_X_SKYPE_PSTNNUMBER","true","false","false","true","true","String","""X-SKYPE-PSTNNUMBER""","[]","Optional[// Phone number for Skype, available as usual phone.
]","\android\pim\vcard\VCardConstants.java"
"PROPERTY_SOUND","true","false","false","true","true","String","""SOUND""","[]","Optional[// Not fully supported.
]","\android\pim\vcard\VCardConstants.java"
"PARAM_TYPE_ISDN","true","false","false","true","true","String","""ISDN""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PARAM_PHONE_EXTRA_TYPE_ASSISTANT","true","false","false","true","true","String","""ASSISTANT""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PARAM_PHONE_EXTRA_TYPE_RADIO","true","false","false","true","true","String","""RADIO""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PARAM_TYPE_VIDEO","true","false","false","true","true","String","""VIDEO""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PARAM_TYPE_MSG","true","false","false","true","true","String","""MSG""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PARAM_TYPE_CELL","true","false","false","true","true","String","""CELL""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"MAX_CHARACTER_NUMS_QP","false","false","false","true","true","int","76","[]","Optional[/* package */
]","\android\pim\vcard\VCardConstants.java"
"PROPERTY_X_MSN","true","false","false","true","true","String","""X-MSN""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_X_JABBER","true","false","false","true","true","String","""X-JABBER""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_NICKNAME","true","false","false","true","true","String","""NICKNAME""","[]","Optional[// (3.0, 4.0)
]","\android\pim\vcard\VCardConstants.java"
"PARAM_ENCODING","true","false","false","true","true","String","""ENCODING""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_URL","true","false","false","true","true","String","""URL""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_X_QQ","true","false","false","true","true","String","""X-QQ""","[]","Optional[// Properties only ContactsStruct has. We alse use this.
]","\android\pim\vcard\VCardConstants.java"
"PROPERTY_DEATH","true","false","false","true","true","String","""DEATH""","[]","Optional[// Place of death (4.0)
]","\android\pim\vcard\VCardConstants.java"
"PROPERTY_ANNIVERSARY","true","false","false","true","true","String","""ANNIVERSARY""","[]","Optional[// Date of marriage (4.0)
]","\android\pim\vcard\VCardConstants.java"
"PROPERTY_X_REDUCTION","true","false","false","true","true","String","""X-REDUCTION""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PARAM_LANGUAGE","true","false","false","true","true","String","""LANGUAGE""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_X_ANDROID_CUSTOM","true","false","false","true","true","String","""X-ANDROID-CUSTOM""","[]","Optional[// Property for Android-specific fields.
]","\android\pim\vcard\VCardConstants.java"
"PROPERTY_LOGO","true","false","false","true","true","String","""LOGO""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PARAM_TYPE_WORK","true","false","false","true","true","String","""WORK""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PARAM_ENCODING_7BIT","true","false","false","true","true","String","""7BIT""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_X_GOOGLE_TALK_WITH_SPACE","true","false","false","true","true","String","""X-GOOGLE TALK""","[]","Optional[// in some special case (for that device/application).
]","\android\pim\vcard\VCardConstants.java"
"PARAM_TYPE_FAX","true","false","false","true","true","String","""FAX""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_BEGIN","true","false","false","true","true","String","""BEGIN""","[]","Optional[// The property names valid both in vCard 2.1 and 3.0.
]","\android\pim\vcard\VCardConstants.java"
"PROPERTY_ADR","true","false","false","true","true","String","""ADR""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"MAX_DATA_COLUMN","true","false","false","true","true","int","15","[]","Optional[// Used in unit test.
]","\android\pim\vcard\VCardConstants.java"
"PROPERTY_X_GOOGLE_TALK","true","false","false","true","true","String","""X-GOOGLE-TALK""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_BIRTH","true","false","false","true","true","String","""BIRTH""","[]","Optional[// Place of birth (4.0)
]","\android\pim\vcard\VCardConstants.java"
"PARAM_PHONE_EXTRA_TYPE_CALLBACK","true","false","false","true","true","String","""CALLBACK""","[]","Optional[// Parser passes these when ""X-"" is added to the parameter or not.
]","\android\pim\vcard\VCardConstants.java"
"PARAM_TYPE_PAGER","true","false","false","true","true","String","""PAGER""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PARAM_CHARSET","true","false","false","true","true","String","""CHARSET""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_X_CLASS","true","false","false","true","true","String","""X-CLASS""","[]","Optional[// Properties for DoCoMo vCard.
]","\android\pim\vcard\VCardConstants.java"
"PROPERTY_X_SKYPE_USERNAME","true","false","false","true","true","String","""X-SKYPE-USERNAME""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PARAM_TYPE_CAR","true","false","false","true","true","String","""CAR""","[]","Optional[// Phone type parameters valid in vCard and known to ContactsContract, but not so common.
]","\android\pim\vcard\VCardConstants.java"
"PROPERTY_REV","true","false","false","true","true","String","""REV""","[]","Optional[// TODO: Should be removed from the view of memory efficiency?
]","\android\pim\vcard\VCardConstants.java"
"PROPERTY_X_PHONETIC_LAST_NAME","true","false","false","true","true","String","""X-PHONETIC-LAST-NAME""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PARAM_TYPE_HOME","true","false","false","true","true","String","""HOME""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_X_DCM_HMN_MODE","true","false","false","true","true","String","""X-DCM-HMN-MODE""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PARAM_ENCODING_8BIT","true","false","false","true","true","String","""8BIT""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_N","true","false","false","true","true","String","""N""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_SORT_STRING","true","false","false","true","true","String","""SORT-STRING""","[]","Optional[// (3.0, 4.0)
]","\android\pim\vcard\VCardConstants.java"
"PARAM_TYPE_VOICE","true","false","false","true","true","String","""VOICE""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_X_NETMEETING","true","false","false","true","true","String","""X-NETMEETING""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_ORG","true","false","false","true","true","String","""ORG""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_X_NO","true","false","false","true","true","String","""X-NO""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_PHOTO","true","false","false","true","true","String","""PHOTO""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_X_PHONETIC_MIDDLE_NAME","true","false","false","true","true","String","""X-PHONETIC-MIDDLE-NAME""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_END","true","false","false","true","true","String","""END""","[]","Optional.empty","\android\pim\vcard\VCardConstants.java"
"PROPERTY_AGENT","true","false","false","true","true","String","""AGENT""","[]","Optional[// (3.0)
]","\android\pim\vcard\VCardConstants.java"
"mNativeSha1Context","false","false","true","false","false","int","null","[]","Optional[// ptr to native context
]","\android\security\Sha1MessageDigest.java"
"stats","true","false","false","false","true","SyncStats","null","[]","Optional[/**
 * Used to hold extras statistics about the sync operation. Some of these indicate that
 * the sync request resulted in a hard or soft error, others are for purely informational
 * purposes.
 */
]","\android\content\SyncResult.java"
"CREATOR","true","false","false","true","true","Creator<SyncResult>","new Creator<SyncResult>() {

    public SyncResult createFromParcel(Parcel in) {
        return new SyncResult(in);
    }

    public SyncResult[] newArray(int size) {
        return new SyncResult[size];
    }
}","[]","Optional.empty","\android\content\SyncResult.java"
"databaseError","true","false","false","false","false","boolean","null","[]","Optional[/**
 * Used to indicate that the SyncAdapter experienced a hard error due to an error it
 * received from interacting with the storage later. The SyncManager will record that
 * the sync request failed and it will not reschedule the request.
 */
]","\android\content\SyncResult.java"
"tooManyRetries","true","false","false","false","false","boolean","null","[]","Optional[/**
 * Used to indicate that the SyncAdapter experienced a hard error due to trying the same
 * operation too many times (as defined by the SyncAdapter). The SyncManager will record
 * that the sync request failed and it will not reschedule the request.
 */
]","\android\content\SyncResult.java"
"fullSyncRequested","true","false","false","false","false","boolean","null","[]","Optional[/**
 * If set the SyncManager will request an immediate sync with the same Account and authority
 * (but empty extras Bundle) as was used in the sync request.
 */
]","\android\content\SyncResult.java"
"delayUntil","true","false","false","false","false","long","null","[]","Optional[/**
 * Used to indicate to the SyncManager that future sync requests that match the request's
 * Account and authority should be delayed at least this many seconds.
 */
]","\android\content\SyncResult.java"
"ALREADY_IN_PROGRESS","true","false","false","true","true","SyncResult","null","[]","Optional[/**
 * This instance of a SyncResult is returned by the SyncAdapter in response to a
 * sync request when a sync is already underway. The SyncManager will reschedule the
 * sync request to try again later.
 */
]","\android\content\SyncResult.java"
"moreRecordsToGet","true","false","false","false","false","boolean","null","[]","Optional[/**
 * This field is ignored by the SyncManager.
 */
]","\android\content\SyncResult.java"
"partialSyncUnavailable","true","false","false","false","false","boolean","null","[]","Optional[/**
 * This field is ignored by the SyncManager.
 */
]","\android\content\SyncResult.java"
"syncAlreadyInProgress","true","false","false","false","true","boolean","null","[]","Optional[/**
 * Used to indicate that the SyncAdapter is already performing a sync operation, though
 * not necessarily for the requested account and authority and that it wasn't able to
 * process this request. The SyncManager will reschedule the request to run later.
 */
]","\android\content\SyncResult.java"
"tooManyDeletions","true","false","false","false","false","boolean","null","[]","Optional[/**
 * Used to indicate that the SyncAdapter determined that it would need to issue
 * too many delete operations to the server in order to satisfy the request
 * (as defined by the SyncAdapter). The SyncManager will record
 * that the sync request failed and will cause a System Notification to be created
 * asking the user what they want to do about this. It will give the user a chance to
 * choose between (1) go ahead even with those deletes, (2) revert the deletes,
 * or (3) take no action. If the user decides (1) or (2) the SyncManager will issue another
 * sync request with either {@link ContentResolver#SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS}
 * or {@link ContentResolver#SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS} set in the extras.
 * It is then up to the SyncAdapter to decide how to honor that request.
 */
]","\android\content\SyncResult.java"
"TAG","false","false","true","true","true","String","""DisableCarModeActivity""","[]","Optional.empty","\com\android\internal\app\DisableCarModeActivity.java"
"IS_GZIPPED","true","false","false","true","true","int","4","[]","Optional[/**
 * Flag value: Content can be decompressed with {@link java.util.zip.GZIPOutputStream}.
 */
]","\android\os\DropBoxManager.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<Entry>","new Parcelable.Creator() {

    public Entry[] newArray(int size) {
        return new Entry[size];
    }

    public Entry createFromParcel(Parcel in) {
        String tag = in.readString();
        long millis = in.readLong();
        int flags = in.readInt();
        if ((flags & HAS_BYTE_ARRAY) != 0) {
            return new Entry(tag, millis, in.createByteArray(), flags & ~HAS_BYTE_ARRAY);
        } else {
            return new Entry(tag, millis, in.readFileDescriptor(), flags);
        }
    }
}","[]","Optional.empty","\android\os\DropBoxManager.java"
"mFlags","false","false","true","false","true","int","null","[]","Optional.empty","\android\os\DropBoxManager.java"
"IS_EMPTY","true","false","false","true","true","int","1","[]","Optional[/**
 * Flag value: Entry's content was deleted to save space.
 */
]","\android\os\DropBoxManager.java"
"HAS_BYTE_ARRAY","false","false","true","true","true","int","8","[]","Optional[/**
 * Flag value for serialization only: Value is a byte array, not a file descriptor
 */
]","\android\os\DropBoxManager.java"
"mTimeMillis","false","false","true","false","true","long","null","[]","Optional.empty","\android\os\DropBoxManager.java"
"TAG","false","false","true","true","true","String","""DropBoxManager""","[]","Optional.empty","\android\os\DropBoxManager.java"
"IS_TEXT","true","false","false","true","true","int","2","[]","Optional[/**
 * Flag value: Content is human-readable UTF-8 text (can be combined with IS_GZIPPED).
 */
]","\android\os\DropBoxManager.java"
"mData","false","false","true","false","true","byte","null","[]","Optional.empty","\android\os\DropBoxManager.java"
"mService","false","false","true","false","true","IDropBoxManagerService","null","[]","Optional.empty","\android\os\DropBoxManager.java"
"mTag","false","false","true","false","true","String","null","[]","Optional.empty","\android\os\DropBoxManager.java"
"mFileDescriptor","false","false","true","false","true","ParcelFileDescriptor","null","[]","Optional.empty","\android\os\DropBoxManager.java"
"mBackupWriter","false","false","false","false","false","int","null","[]","Optional.empty","\android\app\backup\BackupDataOutput.java"
"LOG_SYNC_DETAILS","true","false","false","true","true","int","2743","[@Deprecated]","Optional[/**
 * Kernel event log tag.  Also listed in data/etc/event-log-tags.
 * @deprecated Private constant.  May go away in the next release.
 */
]","\android\content\AbstractThreadedSyncAdapter.java"
"mSyncThread","false","false","true","false","false","SyncThread","null","[]","Optional[// all accesses to this member variable must be synchronized on mSyncThreadLock
]","\android\content\AbstractThreadedSyncAdapter.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\android\content\AbstractThreadedSyncAdapter.java"
"mAutoInitialize","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\content\AbstractThreadedSyncAdapter.java"
"mISyncAdapterImpl","false","false","true","false","true","ISyncAdapterImpl","null","[]","Optional.empty","\android\content\AbstractThreadedSyncAdapter.java"
"mNumSyncStarts","false","false","true","false","true","AtomicInteger","null","[]","Optional.empty","\android\content\AbstractThreadedSyncAdapter.java"
"mAccount","false","false","true","false","true","Account","null","[]","Optional.empty","\android\content\AbstractThreadedSyncAdapter.java"
"mSyncContext","false","false","true","false","true","SyncContext","null","[]","Optional.empty","\android\content\AbstractThreadedSyncAdapter.java"
"mSyncThreadLock","false","false","true","false","true","Object","new Object()","[]","Optional.empty","\android\content\AbstractThreadedSyncAdapter.java"
"mExtras","false","false","true","false","true","Bundle","null","[]","Optional.empty","\android\content\AbstractThreadedSyncAdapter.java"
"mAuthority","false","false","true","false","true","String","null","[]","Optional.empty","\android\content\AbstractThreadedSyncAdapter.java"
"TAG","false","false","true","true","true","String","""PreferenceCategory""","[]","Optional.empty","\android\preference\PreferenceCategory.java"
"fileName","false","false","true","false","false","String","null","[]","Optional[/**
 * Name of the source file.
 */
]","\com\android\internal\http\multipart\ByteArrayPartSource.java"
"bytes","false","false","true","false","false","byte","null","[]","Optional[/**
 * Byte array of the source file.
 */
]","\com\android\internal\http\multipart\ByteArrayPartSource.java"
"TAG","false","false","true","true","true","String","""SendReq""","[]","Optional.empty","\com\google\android\mms\pdu\SendReq.java"
"mDialog","false","false","true","false","false","Dialog","null","[]","Optional[/**
 * The dialog, if it is showing.
 */
]","\android\preference\DialogPreference.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<SavedState>","new Parcelable.Creator<SavedState>() {

    public SavedState createFromParcel(Parcel in) {
        return new SavedState(in);
    }

    public SavedState[] newArray(int size) {
        return new SavedState[size];
    }
}","[]","Optional.empty","\android\preference\DialogPreference.java"
"mWhichButtonClicked","false","false","true","false","false","int","null","[]","Optional[/**
 * Which button was clicked.
 */
]","\android\preference\DialogPreference.java"
"mDialogLayoutResId","false","false","true","false","false","int","null","[]","Optional.empty","\android\preference\DialogPreference.java"
"mDialogMessage","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\preference\DialogPreference.java"
"mPositiveButtonText","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\preference\DialogPreference.java"
"mNegativeButtonText","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\preference\DialogPreference.java"
"dialogBundle","false","false","false","false","false","Bundle","null","[]","Optional.empty","\android\preference\DialogPreference.java"
"mDialogTitle","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\preference\DialogPreference.java"
"mDialogIcon","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\preference\DialogPreference.java"
"mBuilder","false","false","true","false","false","AlertDialog.Builder","null","[]","Optional.empty","\android\preference\DialogPreference.java"
"isDialogShowing","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\preference\DialogPreference.java"
"MEDIA_MOUNTED","true","false","false","true","true","String","""mounted""","[]","Optional[/**
 * getExternalStorageState() returns MEDIA_MOUNTED if the media is present
 * and mounted at its mount point with read/write access.
 */
]","\android\os\Environment.java"
"SECURE_DATA_DIRECTORY","false","false","true","true","true","File","getDirectory(""ANDROID_SECURE_DATA"", ""/data/secure"")","[]","Optional[/**
 * @hide
 */
]","\android\os\Environment.java"
"MEDIA_CHECKING","true","false","false","true","true","String","""checking""","[]","Optional[/**
 * getExternalStorageState() returns MEDIA_CHECKING if the media is present
 * and being disk-checked
 */
]","\android\os\Environment.java"
"DIRECTORY_DOWNLOADS","true","false","false","true","false","String","""Download""","[]","Optional[/**
 * Standard directory in which to place files that have been downloaded by
 * the user.  Note that this is primarily a convention for the top-level
 * public directory, you are free to download files anywhere in your own
 * private directories.  Also note that though the constant here is
 * named DIRECTORY_DOWNLOADS (plural), the actual file name is non-plural for
 * backwards compatibility reasons.
 */
]","\android\os\Environment.java"
"mMntSvc","false","false","true","true","false","IMountService","null","[]","Optional.empty","\android\os\Environment.java"
"DIRECTORY_MUSIC","true","false","false","true","false","String","""Music""","[]","Optional[/**
 * Standard directory in which to place any audio files that should be
 * in the regular list of music for the user.
 * This may be combined with
 * {@link #DIRECTORY_PODCASTS}, {@link #DIRECTORY_NOTIFICATIONS},
 * {@link #DIRECTORY_ALARMS}, and {@link #DIRECTORY_RINGTONES} as a series
 * of directories to categories a particular audio file as more than one
 * type.
 */
]","\android\os\Environment.java"
"SYSTEM_PROPERTY_EFS_ENABLED","false","false","true","true","true","String","""persist.security.efs.enabled""","[]","Optional.empty","\android\os\Environment.java"
"MEDIA_MOUNTED_READ_ONLY","true","false","false","true","true","String","""mounted_ro""","[]","Optional[/**
 * getExternalStorageState() returns MEDIA_MOUNTED_READ_ONLY if the media is present
 * and mounted at its mount point with read only access.
 */
]","\android\os\Environment.java"
"EXTERNAL_STORAGE_ANDROID_DATA_DIRECTORY","false","false","true","true","true","File","new File(new File(getDirectory(""EXTERNAL_STORAGE"", ""/sdcard""), ""Android""), ""data"")","[]","Optional.empty","\android\os\Environment.java"
"DIRECTORY_PODCASTS","true","false","false","true","false","String","""Podcasts""","[]","Optional[/**
 * Standard directory in which to place any audio files that should be
 * in the list of podcasts that the user can select (not as regular
 * music).
 * This may be combined with {@link #DIRECTORY_MUSIC},
 * {@link #DIRECTORY_NOTIFICATIONS},
 * {@link #DIRECTORY_ALARMS}, and {@link #DIRECTORY_RINGTONES} as a series
 * of directories to categories a particular audio file as more than one
 * type.
 */
]","\android\os\Environment.java"
"MEDIA_REMOVED","true","false","false","true","true","String","""removed""","[]","Optional[/**
 * getExternalStorageState() returns MEDIA_REMOVED if the media is not present.
 */
]","\android\os\Environment.java"
"DIRECTORY_MOVIES","true","false","false","true","false","String","""Movies""","[]","Optional[/**
 * Standard directory in which to place movies that are available to
 * the user.  Note that this is primarily a convention for the top-level
 * public directory, as the media scanner will find and collect movies
 * in any directory.
 */
]","\android\os\Environment.java"
"MEDIA_UNMOUNTED","true","false","false","true","true","String","""unmounted""","[]","Optional[/**
 * getExternalStorageState() returns MEDIA_UNMOUNTED if the media is present
 * but not mounted.
 */
]","\android\os\Environment.java"
"MEDIA_SHARED","true","false","false","true","true","String","""shared""","[]","Optional[/**
 * getExternalStorageState() returns MEDIA_SHARED if the media is present
 * not mounted, and shared via USB mass storage.
 */
]","\android\os\Environment.java"
"MEDIA_BAD_REMOVAL","true","false","false","true","true","String","""bad_removal""","[]","Optional[/**
 * getExternalStorageState() returns MEDIA_BAD_REMOVAL if the media was
 * removed before it was unmounted.
 */
]","\android\os\Environment.java"
"DIRECTORY_DCIM","true","false","false","true","false","String","""DCIM""","[]","Optional[/**
 * The traditional location for pictures and videos when mounting the
 * device as a camera.  Note that this is primarily a convention for the
 * top-level public directory, as this convention makes no sense elsewhere.
 */
]","\android\os\Environment.java"
"DIRECTORY_RINGTONES","true","false","false","true","false","String","""Ringtones""","[]","Optional[/**
 * Standard directory in which to place any audio files that should be
 * in the list of ringtones that the user can select (not as regular
 * music).
 * This may be combined with {@link #DIRECTORY_MUSIC},
 * {@link #DIRECTORY_PODCASTS}, {@link #DIRECTORY_NOTIFICATIONS}, and
 * {@link #DIRECTORY_ALARMS} as a series
 * of directories to categories a particular audio file as more than one
 * type.
 */
]","\android\os\Environment.java"
"DATA_DIRECTORY","false","false","true","true","true","File","getDirectory(""ANDROID_DATA"", ""/data"")","[]","Optional.empty","\android\os\Environment.java"
"ROOT_DIRECTORY","false","false","true","true","true","File","getDirectory(""ANDROID_ROOT"", ""/system"")","[]","Optional.empty","\android\os\Environment.java"
"EXTERNAL_STORAGE_ANDROID_MEDIA_DIRECTORY","false","false","true","true","true","File","new File(new File(getDirectory(""EXTERNAL_STORAGE"", ""/sdcard""), ""Android""), ""media"")","[]","Optional.empty","\android\os\Environment.java"
"MEDIA_UNMOUNTABLE","true","false","false","true","true","String","""unmountable""","[]","Optional[/**
 * getExternalStorageState() returns MEDIA_UNMOUNTABLE if the media is present
 * but cannot be mounted.  Typically this happens if the file system on the
 * media is corrupted.
 */
]","\android\os\Environment.java"
"MEDIA_NOFS","true","false","false","true","true","String","""nofs""","[]","Optional[/**
 * getExternalStorageState() returns MEDIA_NOFS if the media is present
 * but is blank or is using an unsupported filesystem
 */
]","\android\os\Environment.java"
"DOWNLOAD_CACHE_DIRECTORY","false","false","true","true","true","File","getDirectory(""DOWNLOAD_CACHE"", ""/cache"")","[]","Optional.empty","\android\os\Environment.java"
"DIRECTORY_ALARMS","true","false","false","true","false","String","""Alarms""","[]","Optional[/**
 * Standard directory in which to place any audio files that should be
 * in the list of alarms that the user can select (not as regular
 * music).
 * This may be combined with {@link #DIRECTORY_MUSIC},
 * {@link #DIRECTORY_PODCASTS}, {@link #DIRECTORY_NOTIFICATIONS},
 * and {@link #DIRECTORY_RINGTONES} as a series
 * of directories to categories a particular audio file as more than one
 * type.
 */
]","\android\os\Environment.java"
"EXTERNAL_STORAGE_DIRECTORY","false","false","true","true","true","File","getDirectory(""EXTERNAL_STORAGE"", ""/sdcard"")","[]","Optional.empty","\android\os\Environment.java"
"DIRECTORY_PICTURES","true","false","false","true","false","String","""Pictures""","[]","Optional[/**
 * Standard directory in which to place pictures that are available to
 * the user.  Note that this is primarily a convention for the top-level
 * public directory, as the media scanner will find and collect pictures
 * in any directory.
 */
]","\android\os\Environment.java"
"DIRECTORY_NOTIFICATIONS","true","false","false","true","false","String","""Notifications""","[]","Optional[/**
 * Standard directory in which to place any audio files that should be
 * in the list of notifications that the user can select (not as regular
 * music).
 * This may be combined with {@link #DIRECTORY_MUSIC},
 * {@link #DIRECTORY_PODCASTS},
 * {@link #DIRECTORY_ALARMS}, and {@link #DIRECTORY_RINGTONES} as a series
 * of directories to categories a particular audio file as more than one
 * type.
 */
]","\android\os\Environment.java"
"mBootCompletedReceiver","false","false","true","false","false","BroadcastReceiver","new BroadcastReceiver() {

    public void onReceive(Context context, Intent intent) {
        mSyncHandler.onBootCompleted();
    }
}","[]","Optional.empty","\android\content\SyncManager.java"
"MAX_TIME_PER_SYNC","false","false","true","true","true","long","null","[]","Optional[/**
 * If a sync takes longer than this and the sync queue is not empty then we will
 * cancel it and add it back to the end of the sync queue. In milliseconds.
 */
]","\android\content\SyncManager.java"
"INITIAL_SYNC_RETRY_TIME_IN_MS","false","false","true","true","true","long","30 * 1000","[]","Optional[// 30 seconds
]","\android\content\SyncManager.java"
"mSyncQueue","true","false","false","false","true","SyncQueue","null","[]","Optional.empty","\android\content\SyncManager.java"
"mSyncAdapter","false","false","false","false","false","ISyncAdapter","null","[]","Optional.empty","\android\content\SyncManager.java"
"mMainHandler","false","false","true","false","true","Handler","null","[]","Optional.empty","\android\content\SyncManager.java"
"mSyncWakeLock","false","false","true","false","false","PowerManager.WakeLock","null","[]","Optional.empty","\android\content\SyncManager.java"
"mErrorNotificationInstalled","false","false","true","false","false","boolean","false","[]","Optional[// it if sync is still failing
]","\android\content\SyncManager.java"
"mNeedSyncErrorNotification","false","false","true","false","false","boolean","false","[]","Optional[// set if the sync error indicator should be reported.
]","\android\content\SyncManager.java"
"syncResult","true","false","false","false","true","SyncResult","null","[]","Optional.empty","\android\content\SyncManager.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\content\SyncManager.java"
"HANDLE_SYNC_ALARM_WAKE_LOCK","false","false","true","true","true","String","""SyncManagerHandleSyncAlarm""","[]","Optional.empty","\android\content\SyncManager.java"
"LOCAL_SYNC_DELAY","false","false","true","true","true","long","null","[]","Optional[/**
 * Delay a sync due to local changes this long. In milliseconds
 */
]","\android\content\SyncManager.java"
"mBackgroundDataSettingChanged","false","false","true","false","false","BroadcastReceiver","new BroadcastReceiver() {

    public void onReceive(Context context, Intent intent) {
        if (getConnectivityManager().getBackgroundDataSetting()) {
            scheduleSync(null, /* account */
            null, /* authority */
            new Bundle(), 0, /* delay */
            false);
        }
    }
}","[]","Optional.empty","\android\content\SyncManager.java"
"mNeedSyncActiveNotification","false","false","true","false","false","boolean","false","[]","Optional[// set if the sync active indicator should be reported
]","\android\content\SyncManager.java"
"mAlarmScheduleTime","false","false","true","false","false","Long","null","[]","Optional.empty","\android\content\SyncManager.java"
"mDataConnectionIsConnected","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\content\SyncManager.java"
"mHistoryRowId","false","false","false","false","true","long","null","[]","Optional.empty","\android\content\SyncManager.java"
"mHandleAlarmWakeLock","false","false","true","false","false","PowerManager.WakeLock","null","[]","Optional.empty","\android\content\SyncManager.java"
"mShutdownIntentReceiver","false","false","true","false","false","BroadcastReceiver","new BroadcastReceiver() {

    public void onReceive(Context context, Intent intent) {
        Log.w(TAG, ""Writing sync state before shutdown..."");
        getSyncStorageEngine().writeAllState();
    }
}","[]","Optional.empty","\android\content\SyncManager.java"
"INITIAL_ACCOUNTS_ARRAY","false","false","true","true","true","Account","new Account[0]","[]","Optional.empty","\android\content\SyncManager.java"
"mTimeSpentSyncing","false","false","true","false","false","long","null","[]","Optional[/**
 * The cumulative time we have spent syncing
 */
]","\android\content\SyncManager.java"
"authority","true","false","false","false","false","String","null","[]","Optional[// only valid if isActive is true
]","\android\content\SyncManager.java"
"mConnManagerDoNotUseDirectly","false","false","true","false","false","ConnectivityManager","null","[]","Optional[// its accessor, getConnManager().
]","\android\content\SyncManager.java"
"mStorageIsLow","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\content\SyncManager.java"
"mBound","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\content\SyncManager.java"
"MESSAGE_SERVICE_DISCONNECTED","false","false","true","true","true","int","5","[]","Optional.empty","\android\content\SyncManager.java"
"MESSAGE_SERVICE_CONNECTED","false","false","true","true","true","int","4","[]","Optional.empty","\android\content\SyncManager.java"
"mTimeoutStartTime","false","false","false","false","false","long","null","[]","Optional.empty","\android\content\SyncManager.java"
"mWhenSyncStarted","false","false","false","false","false","long","0","[]","Optional[/**
 * Used to track when lastWasSyncing was last set
 */
]","\android\content\SyncManager.java"
"mAccounts","false","false","true","false","false","Account","INITIAL_ACCOUNTS_ARRAY","[]","Optional.empty","\android\content\SyncManager.java"
"mAccount","false","false","true","false","true","Account","null","[]","Optional.empty","\android\content\SyncManager.java"
"INITIALIZATION_UNBIND_DELAY_MS","false","false","true","true","true","int","5000","[]","Optional.empty","\android\content\SyncManager.java"
"mSyncHandler","false","false","true","false","true","SyncHandler","null","[]","Optional.empty","\android\content\SyncManager.java"
"MESSAGE_SYNC_FINISHED","false","false","true","true","true","int","1","[]","Optional[// Messages that can be sent on mHandler
]","\android\content\SyncManager.java"
"mActiveSyncContext","false","false","true","false","false","ActiveSyncContext","null","[]","Optional.empty","\android\content\SyncManager.java"
"mConnectivityIntentReceiver","false","false","true","false","false","BroadcastReceiver","new BroadcastReceiver() {

    public void onReceive(Context context, Intent intent) {
        NetworkInfo networkInfo = intent.getParcelableExtra(ConnectivityManager.EXTRA_NETWORK_INFO);
        NetworkInfo.State state = (networkInfo == null ? NetworkInfo.State.UNKNOWN : networkInfo.getState());
        if (Log.isLoggable(TAG, Log.VERBOSE)) {
            Log.v(TAG, ""received connectivity action.  network info: "" + networkInfo);
        }
        // since we still have a WiFi connection.
        switch(state) {
            case CONNECTED:
                mDataConnectionIsConnected = true;
                break;
            case DISCONNECTED:
                if (intent.getBooleanExtra(ConnectivityManager.EXTRA_NO_CONNECTIVITY, false)) {
                    mDataConnectionIsConnected = false;
                } else {
                    mDataConnectionIsConnected = true;
                }
                break;
            default:
        }
        if (mDataConnectionIsConnected) {
            sendCheckAlarmsMessage();
        }
    }
}","[]","Optional.empty","\android\content\SyncManager.java"
"MESSAGE_SYNC_ALARM","false","false","true","true","true","int","2","[]","Optional.empty","\android\content\SyncManager.java"
"mNotificationMgr","false","false","true","false","true","NotificationManager","null","[]","Optional.empty","\android\content\SyncManager.java"
"mSyncTimeTracker","true","false","false","false","true","SyncTimeTracker","new SyncTimeTracker()","[]","Optional.empty","\android\content\SyncManager.java"
"mAlarmService","false","false","true","false","false","AlarmManager","null","[]","Optional.empty","\android\content\SyncManager.java"
"activeSyncContext","true","false","false","false","true","ActiveSyncContext","null","[]","Optional.empty","\android\content\SyncManager.java"
"mSyncAdapters","false","false","true","false","true","SyncAdaptersCache","null","[]","Optional.empty","\android\content\SyncManager.java"
"mSyncNotificationInfo","true","false","false","false","true","SyncNotificationInfo","new SyncNotificationInfo()","[]","Optional.empty","\android\content\SyncManager.java"
"mStorageIntentReceiver","false","false","true","false","false","BroadcastReceiver","new BroadcastReceiver() {

    public void onReceive(Context context, Intent intent) {
        String action = intent.getAction();
        if (Intent.ACTION_DEVICE_STORAGE_LOW.equals(action)) {
            if (Log.isLoggable(TAG, Log.VERBOSE)) {
                Log.v(TAG, ""Internal storage is low."");
            }
            mStorageIsLow = true;
            cancelActiveSync(null, /* any account */
            null);
        } else if (Intent.ACTION_DEVICE_STORAGE_OK.equals(action)) {
            if (Log.isLoggable(TAG, Log.VERBOSE)) {
                Log.v(TAG, ""Internal storage is ok."");
            }
            mStorageIsLow = false;
            sendCheckAlarmsMessage();
        }
    }
}","[]","Optional.empty","\android\content\SyncManager.java"
"startTime","true","false","false","false","false","Long","null","[]","Optional[// the opposite transition.
]","\android\content\SyncManager.java"
"DEFAULT_MAX_SYNC_RETRY_TIME_IN_SECONDS","false","false","true","true","true","long","60 * 60","[]","Optional[// one hour
]","\android\content\SyncManager.java"
"ACTION_SYNC_ALARM","false","false","true","true","true","String","""android.content.syncmanager.SYNC_ALARM""","[]","Optional.empty","\android\content\SyncManager.java"
"mHandler","false","false","true","false","true","Handler","null","[]","Optional.empty","\android\content\SyncManager.java"
"TAG","false","false","true","true","true","String","""SyncManager""","[]","Optional.empty","\android\content\SyncManager.java"
"mSyncOperation","false","false","false","false","true","SyncOperation","null","[]","Optional.empty","\android\content\SyncManager.java"
"isActive","true","false","false","false","false","boolean","false","[]","Optional[// true iff the notification manager has been asked to send the notification
]","\android\content\SyncManager.java"
"mBootCompleted","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\content\SyncManager.java"
"syncAdapter","true","false","false","false","true","ISyncAdapter","null","[]","Optional.empty","\android\content\SyncManager.java"
"mStartTime","false","false","false","false","true","long","null","[]","Optional.empty","\android\content\SyncManager.java"
"ERROR_NOTIFICATION_DELAY_MS","false","false","true","true","true","long","1000 * 60 * 10","[]","Optional[// 10 minutes
]","\android\content\SyncManager.java"
"mSyncAlarmIntent","false","false","true","false","true","PendingIntent","null","[]","Optional.empty","\android\content\SyncManager.java"
"mSyncStorageEngine","false","false","true","false","true","SyncStorageEngine","null","[]","Optional.empty","\android\content\SyncManager.java"
"MESSAGE_CHECK_ALARMS","false","false","true","true","true","int","3","[]","Optional.empty","\android\content\SyncManager.java"
"mInitialized","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\content\SyncManager.java"
"DELAY_RETRY_SYNC_IN_PROGRESS_IN_SECONDS","false","false","true","true","true","int","10","[]","Optional[/**
 * How long to wait before retrying a sync that failed due to one already being in progress.
 */
]","\android\content\SyncManager.java"
"mReadyToRunLatch","false","false","true","false","false","CountDownLatch","new CountDownLatch(1)","[]","Optional.empty","\android\content\SyncManager.java"
"SYNC_NOTIFICATION_DELAY","false","false","true","true","true","long","30 * 1000","[]","Optional[// 30 seconds
]","\android\content\SyncManager.java"
"SYNC_WAKE_LOCK","false","false","true","true","true","String","""*sync*""","[]","Optional.empty","\android\content\SyncManager.java"
"mAuthority","false","false","true","false","true","String","null","[]","Optional.empty","\android\content\SyncManager.java"
"account","true","false","false","false","false","Account","null","[]","Optional[// only valid if isActive is true
]","\android\content\SyncManager.java"
"mLastWasSyncing","false","false","false","false","false","boolean","false","[]","Optional[/**
 * True if a sync was in progress on the most recent call to update()
 */
]","\android\content\SyncManager.java"
"EMAIL_LOOKUP_STRING_COLUMN_INDEX","false","false","false","true","true","int","1","[]","Optional.empty","\android\widget\QuickContactBadge.java"
"TOKEN_PHONE_LOOKUP_AND_TRIGGER","false","false","true","true","true","int","3","[]","Optional.empty","\android\widget\QuickContactBadge.java"
"mContactEmail","false","false","true","false","false","String","null","[]","Optional.empty","\android\widget\QuickContactBadge.java"
"TOKEN_CONTACT_LOOKUP_AND_TRIGGER","false","false","true","true","true","int","4","[]","Optional.empty","\android\widget\QuickContactBadge.java"
"CONTACT_LOOKUPKEY_COLUMN_INDEX","false","false","false","true","true","int","1","[]","Optional.empty","\android\widget\QuickContactBadge.java"
"mQueryHandler","false","false","true","false","false","QueryHandler","null","[]","Optional.empty","\android\widget\QuickContactBadge.java"
"PHONE_LOOKUP_PROJECTION","false","false","false","true","true","String","new String[] { PhoneLookup._ID, PhoneLookup.LOOKUP_KEY }","[]","Optional.empty","\android\widget\QuickContactBadge.java"
"mContactPhone","false","false","true","false","false","String","null","[]","Optional.empty","\android\widget\QuickContactBadge.java"
"TOKEN_EMAIL_LOOKUP","false","false","true","true","true","int","0","[]","Optional.empty","\android\widget\QuickContactBadge.java"
"CONTACT_ID_COLUMN_INDEX","false","false","false","true","true","int","0","[]","Optional.empty","\android\widget\QuickContactBadge.java"
"mSelectedContactsAppTabIndex","false","false","true","false","false","int","-1","[]","Optional.empty","\android\widget\QuickContactBadge.java"
"EMAIL_LOOKUP_PROJECTION","false","false","false","true","true","String","new String[] { RawContacts.CONTACT_ID, Contacts.LOOKUP_KEY }","[]","Optional.empty","\android\widget\QuickContactBadge.java"
"mBadgeBackground","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\QuickContactBadge.java"
"TOKEN_EMAIL_LOOKUP_AND_TRIGGER","false","false","true","true","true","int","2","[]","Optional.empty","\android\widget\QuickContactBadge.java"
"PHONE_ID_COLUMN_INDEX","false","false","false","true","true","int","0","[]","Optional.empty","\android\widget\QuickContactBadge.java"
"TOKEN_PHONE_LOOKUP","false","false","true","true","true","int","1","[]","Optional.empty","\android\widget\QuickContactBadge.java"
"EMAIL_ID_COLUMN_INDEX","false","false","false","true","true","int","0","[]","Optional.empty","\android\widget\QuickContactBadge.java"
"mNoBadgeBackground","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\QuickContactBadge.java"
"PHONE_LOOKUP_STRING_COLUMN_INDEX","false","false","false","true","true","int","1","[]","Optional.empty","\android\widget\QuickContactBadge.java"
"CONTACT_LOOKUP_PROJECTION","false","false","false","true","true","String","new String[] { Contacts._ID, Contacts.LOOKUP_KEY }","[]","Optional.empty","\android\widget\QuickContactBadge.java"
"mMode","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\QuickContactBadge.java"
"mExcludeMimes","false","true","false","false","false","String","null","[]","Optional.empty","\android\widget\QuickContactBadge.java"
"mContactUri","false","false","true","false","false","Uri","null","[]","Optional.empty","\android\widget\QuickContactBadge.java"
"mPool","false","false","true","true","false","Message","null","[]","Optional.empty","\android\os\Message.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<Message>","new Parcelable.Creator<Message>() {

    public Message createFromParcel(Parcel source) {
        Message msg = Message.obtain();
        msg.readFromParcel(source);
        return msg;
    }

    public Message[] newArray(int size) {
        return new Message[size];
    }
}","[]","Optional.empty","\android\os\Message.java"
"replyTo","true","false","false","false","false","Messenger","null","[]","Optional[/**
 * Optional Messenger where replies to this message can be sent.  The
 * semantics of exactly how this is used are up to the sender and
 * receiver.
 */
]","\android\os\Message.java"
"MAX_POOL_SIZE","false","false","true","true","true","int","10","[]","Optional.empty","\android\os\Message.java"
"arg2","true","false","false","false","false","int","null","[]","Optional[/**
 * arg1 and arg2 are lower-cost alternatives to using
 * {@link #setData(Bundle) setData()} if you only need to store a
 * few integer values.
 */
]","\android\os\Message.java"
"arg1","true","false","false","false","false","int","null","[]","Optional[/**
 * arg1 and arg2 are lower-cost alternatives to using
 * {@link #setData(Bundle) setData()} if you only need to store a
 * few integer values.
 */
]","\android\os\Message.java"
"mPoolSync","false","false","true","true","false","Object","new Object()","[]","Optional.empty","\android\os\Message.java"
"next","false","false","false","false","false","Message","null","[]","Optional[/*package*/
]","\android\os\Message.java"
"target","false","false","false","false","false","Handler","null","[]","Optional[/*package*/
]","\android\os\Message.java"
"what","true","false","false","false","false","int","null","[]","Optional[/**
 * User-defined message code so that the recipient can identify
 * what this message is about. Each {@link Handler} has its own name-space
 * for message codes, so you do not need to worry about yours conflicting
 * with other handlers.
 */
]","\android\os\Message.java"
"obj","true","false","false","false","false","Object","null","[]","Optional[/**
 * An arbitrary object to send to the recipient.  When using
 * {@link Messenger} to send the message across processes this can only
 * be non-null if it contains a Parcelable of a framework class (not one
 * implemented by the application).   For other data transfer use
 * {@link #setData}.
 *
 * <p>Note that Parcelable objects here are not supported prior to
 * the {@link android.os.Build.VERSION_CODES#FROYO} release.
 */
]","\android\os\Message.java"
"when","false","false","false","false","false","long","null","[]","Optional[/*package*/
]","\android\os\Message.java"
"mPoolSize","false","false","true","true","false","int","0","[]","Optional.empty","\android\os\Message.java"
"data","false","false","false","false","false","Bundle","null","[]","Optional[/*package*/
]","\android\os\Message.java"
"callback","false","false","false","false","false","Runnable","null","[]","Optional[/*package*/
]","\android\os\Message.java"
"ELLIPSIS_START","false","false","true","true","true","int","3","[]","Optional.empty","\android\text\DynamicLayout.java"
"mDisplay","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\text\DynamicLayout.java"
"START_MASK","false","false","true","true","true","int","0x1FFFFFFF","[]","Optional.empty","\android\text\DynamicLayout.java"
"sLock","false","false","true","true","false","Object","new Object()","[]","Optional.empty","\android\text\DynamicLayout.java"
"mInts","false","false","true","false","false","PackedIntVector","null","[]","Optional.empty","\android\text\DynamicLayout.java"
"DIR","false","false","true","true","true","int","START","[]","Optional.empty","\android\text\DynamicLayout.java"
"mEllipsizeAt","false","false","true","false","false","TextUtils.TruncateAt","null","[]","Optional.empty","\android\text\DynamicLayout.java"
"PRIORITY","false","false","true","true","true","int","128","[]","Optional.empty","\android\text\DynamicLayout.java"
"ELLIPSIS_COUNT","false","false","true","true","true","int","4","[]","Optional.empty","\android\text\DynamicLayout.java"
"mLayout","false","false","true","false","false","WeakReference","null","[]","Optional.empty","\android\text\DynamicLayout.java"
"mEllipsizedWidth","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\DynamicLayout.java"
"mBase","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\text\DynamicLayout.java"
"sStaticLayout","false","false","true","true","false","StaticLayout","new StaticLayout(true)","[]","Optional.empty","\android\text\DynamicLayout.java"
"mObjects","false","false","true","false","false","PackedObjectVector<Directions>","null","[]","Optional.empty","\android\text\DynamicLayout.java"
"ELLIPSIS_UNDEFINED","false","false","true","true","true","int","0x80000000","[]","Optional.empty","\android\text\DynamicLayout.java"
"START","false","false","true","true","true","int","0","[]","Optional.empty","\android\text\DynamicLayout.java"
"DESCENT","false","false","true","true","true","int","2","[]","Optional.empty","\android\text\DynamicLayout.java"
"TAB_MASK","false","false","true","true","true","int","0x20000000","[]","Optional.empty","\android\text\DynamicLayout.java"
"TOP","false","false","true","true","true","int","1","[]","Optional.empty","\android\text\DynamicLayout.java"
"mIncludePad","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\text\DynamicLayout.java"
"TAB","false","false","true","true","true","int","START","[]","Optional.empty","\android\text\DynamicLayout.java"
"COLUMNS_NORMAL","false","false","true","true","true","int","3","[]","Optional.empty","\android\text\DynamicLayout.java"
"mTopPadding","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\DynamicLayout.java"
"COLUMNS_ELLIPSIZE","false","false","true","true","true","int","5","[]","Optional.empty","\android\text\DynamicLayout.java"
"mWatcher","false","false","true","false","false","ChangeWatcher","null","[]","Optional.empty","\android\text\DynamicLayout.java"
"DIR_MASK","false","false","true","true","true","int","0xC0000000","[]","Optional.empty","\android\text\DynamicLayout.java"
"mEllipsize","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\text\DynamicLayout.java"
"DIR_SHIFT","false","false","true","true","true","int","30","[]","Optional.empty","\android\text\DynamicLayout.java"
"PROXY_CHANGE_ACTION","true","false","false","true","true","String","""android.intent.action.PROXY_CHANGE""","[]","Optional.empty","\android\net\Proxy.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional[// Set to true to enable extra debugging.
]","\android\net\Proxy.java"
"mInsecureFactory","false","false","true","false","false","SSLSocketFactory","null","[]","Optional.empty","\android\net\SSLCertificateSocketFactory.java"
"mHandshakeTimeoutMillis","false","false","true","false","true","int","null","[]","Optional.empty","\android\net\SSLCertificateSocketFactory.java"
"mSessionCache","false","false","true","false","true","SSLClientSessionCache","null","[]","Optional.empty","\android\net\SSLCertificateSocketFactory.java"
"HOSTNAME_VERIFIER","false","false","true","true","true","HostnameVerifier","HttpsURLConnection.getDefaultHostnameVerifier()","[]","Optional.empty","\android\net\SSLCertificateSocketFactory.java"
"mSecure","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\net\SSLCertificateSocketFactory.java"
"mSecureFactory","false","false","true","false","false","SSLSocketFactory","null","[]","Optional.empty","\android\net\SSLCertificateSocketFactory.java"
"TAG","false","false","true","true","true","String","""SSLCertificateSocketFactory""","[]","Optional.empty","\android\net\SSLCertificateSocketFactory.java"
"INSECURE_TRUST_MANAGER","false","false","true","true","true","TrustManager","new TrustManager[] { new X509TrustManager() {

    public X509Certificate[] getAcceptedIssuers() {
        return null;
    }

    public void checkClientTrusted(X509Certificate[] certs, String authType) {
    }

    public void checkServerTrusted(X509Certificate[] certs, String authType) {
    }
} }","[]","Optional.empty","\android\net\SSLCertificateSocketFactory.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<TransceiveResult>","new Parcelable.Creator<TransceiveResult>() {

    @Override
    public TransceiveResult createFromParcel(Parcel in) {
        boolean success = (in.readInt() == 1) ? true : false;
        boolean tagLost = (in.readInt() == 1) ? true : false;
        byte[] responseData;
        if (success) {
            int responseLength = in.readInt();
            responseData = new byte[responseLength];
            in.readByteArray(responseData);
        } else {
            responseData = null;
        }
        return new TransceiveResult(success, tagLost, responseData);
    }

    @Override
    public TransceiveResult[] newArray(int size) {
        return new TransceiveResult[size];
    }
}","[]","Optional.empty","\android\nfc\TransceiveResult.java"
"mSuccess","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\nfc\TransceiveResult.java"
"mTagLost","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\nfc\TransceiveResult.java"
"mResponseData","false","false","true","false","true","byte","null","[]","Optional.empty","\android\nfc\TransceiveResult.java"
"mInstance","false","false","true","true","false","DdmHandleExit","new DdmHandleExit()","[]","Optional.empty","\android\ddm\DdmHandleExit.java"
"CHUNK_EXIT","true","false","false","true","true","int","type(""EXIT"")","[]","Optional.empty","\android\ddm\DdmHandleExit.java"
"sInstance","false","false","true","true","true","CertificateChainValidator","new CertificateChainValidator()","[]","Optional[/**
 * The singleton instance of the certificate chain validator
 */
]","\android\net\http\CertificateChainValidator.java"
"SHOW_MONTH_DAY_YEAR","false","false","true","true","true","int","1","[]","Optional.empty","\android\widget\DateTimeView.java"
"mLastDisplay","false","false","false","false","false","int","-1","[]","Optional.empty","\android\widget\DateTimeView.java"
"SHOW_TIME","false","false","true","true","true","int","0","[]","Optional.empty","\android\widget\DateTimeView.java"
"mContentObserver","false","false","true","false","false","ContentObserver","new ContentObserver(new Handler()) {

    @Override
    public void onChange(boolean selfChange) {
        mLastFormat = null;
        update();
    }
}","[]","Optional.empty","\android\widget\DateTimeView.java"
"TWELVE_HOURS_IN_MINUTES","false","false","true","true","true","long","12 * 60","[]","Optional.empty","\android\widget\DateTimeView.java"
"mAttachedToWindow","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\DateTimeView.java"
"mTime","false","false","false","false","false","Date","null","[]","Optional.empty","\android\widget\DateTimeView.java"
"mLastFormat","false","false","false","false","false","DateFormat","null","[]","Optional.empty","\android\widget\DateTimeView.java"
"mTimeMillis","false","false","false","false","false","long","null","[]","Optional.empty","\android\widget\DateTimeView.java"
"TAG","false","false","true","true","true","String","""DateTimeView""","[]","Optional.empty","\android\widget\DateTimeView.java"
"TWENTY_FOUR_HOURS_IN_MILLIS","false","false","true","true","true","long","24 * 60 * 60 * 1000","[]","Optional.empty","\android\widget\DateTimeView.java"
"mUpdateTimeMillis","false","false","true","false","false","long","null","[]","Optional.empty","\android\widget\DateTimeView.java"
"mBroadcastReceiver","false","false","true","false","false","BroadcastReceiver","new BroadcastReceiver() {

    @Override
    public void onReceive(Context context, Intent intent) {
        String action = intent.getAction();
        if (Intent.ACTION_TIME_TICK.equals(action)) {
            if (System.currentTimeMillis() < mUpdateTimeMillis) {
                // every minute.
                return;
            }
        }
        // ACTION_TIME_CHANGED can also signal a change of 12/24 hr. format.
        mLastFormat = null;
        update();
    }
}","[]","Optional.empty","\android\widget\DateTimeView.java"
"mFinishedStart","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\app\ListActivity.java"
"mList","false","true","false","false","false","ListView","null","[]","Optional[/**
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\app\ListActivity.java"
"mRequestFocus","false","false","true","false","false","Runnable","new Runnable() {

    public void run() {
        mList.focusableViewAvailable(mList);
    }
}","[]","Optional.empty","\android\app\ListActivity.java"
"mHandler","false","false","true","false","false","Handler","new Handler()","[]","Optional.empty","\android\app\ListActivity.java"
"mAdapter","false","true","false","false","false","ListAdapter","null","[]","Optional[/**
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\app\ListActivity.java"
"mOnClickListener","false","false","true","false","false","AdapterView.OnItemClickListener","new AdapterView.OnItemClickListener() {

    public void onItemClick(AdapterView<?> parent, View v, int position, long id) {
        onListItemClick((ListView) parent, v, position, id);
    }
}","[]","Optional.empty","\android\app\ListActivity.java"
"CHEEK_EVENT","true","false","false","true","true","int","1","[]","Optional.empty","\android\os\LocalPowerManager.java"
"LONG_TOUCH_EVENT","true","false","false","true","true","int","3","[]","Optional[// up events or LONG_TOUCH events.
]","\android\os\LocalPowerManager.java"
"TOUCH_UP_EVENT","true","false","false","true","true","int","4","[]","Optional.empty","\android\os\LocalPowerManager.java"
"TOUCH_EVENT","true","false","false","true","true","int","2","[]","Optional[// touch events are TOUCH for 300ms, and then either
]","\android\os\LocalPowerManager.java"
"POKE_LOCK_IGNORE_TOUCH_AND_CHEEK_EVENTS","true","false","false","true","true","int","0x8","[]","Optional.empty","\android\os\LocalPowerManager.java"
"POKE_LOCK_MEDIUM_TIMEOUT","true","false","false","true","true","int","0x4","[]","Optional.empty","\android\os\LocalPowerManager.java"
"POKE_LOCK_IGNORE_CHEEK_EVENTS","true","false","false","true","true","int","0x1","[]","Optional.empty","\android\os\LocalPowerManager.java"
"POKE_LOCK_TIMEOUT_MASK","true","false","false","true","true","int","0x6","[]","Optional.empty","\android\os\LocalPowerManager.java"
"OTHER_EVENT","true","false","false","true","true","int","0","[]","Optional.empty","\android\os\LocalPowerManager.java"
"POKE_LOCK_SHORT_TIMEOUT","true","false","false","true","true","int","0x2","[]","Optional.empty","\android\os\LocalPowerManager.java"
"BUTTON_EVENT","true","false","false","true","true","int","5","[]","Optional[// Button and trackball events.
]","\android\os\LocalPowerManager.java"
"chunkSize","false","false","false","false","false","int","null","[]","Optional[// not including the header
]","\android\app\backup\BackupHelperDispatcher.java"
"mHelpers","false","false","false","false","false","TreeMap<String,BackupHelper>","new TreeMap<String, BackupHelper>()","[]","Optional.empty","\android\app\backup\BackupHelperDispatcher.java"
"TAG","false","false","true","true","true","String","""BackupHelperDispatcher""","[]","Optional.empty","\android\app\backup\BackupHelperDispatcher.java"
"keyPrefix","false","false","false","false","false","String","null","[]","Optional.empty","\android\app\backup\BackupHelperDispatcher.java"
"SECONDARY_EMAIL_TYPE","true","false","false","true","true","String","ContactsContract.Intents.Insert.SECONDARY_EMAIL_TYPE","[@Deprecated]","Optional[/**
 * The extra field for an optional second contact email type.
 * <P>Type: Either an integer value from {@link android.provider.Contacts.ContactMethodsColumns ContactMethodsColumns}
 * or a string specifying a custom label.</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"SKYPE","false","false","false","false","false","String","""SKYPE""","[]","Optional.empty","\android\provider\Contacts.java"
"POSTAL_ISPRIMARY","true","false","false","true","true","String","ContactsContract.Intents.Insert.POSTAL_ISPRIMARY","[@Deprecated]","Optional[/**
 * The extra field for the postal isprimary flag.
 * <P>Type: boolean</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"TERTIARY_PHONE","true","false","false","true","true","String","ContactsContract.Intents.Insert.TERTIARY_PHONE","[@Deprecated]","Optional[/**
 * The extra field for an optional third contact phone number.
 * <P>Type: String</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"TYPE_HOME","true","false","false","true","true","int","1","[@Deprecated]","Optional[/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"PROTOCOL_SKYPE","true","false","false","true","true","int","3","[@Deprecated]","Optional[/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"CONTENT_TYPE","true","false","false","true","true","String","""vnd.android.cursor.dir/contact_extensions""","[@Deprecated]","Optional[/**
 * The MIME type of {@link #CONTENT_URI} providing a directory of
 * phones.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"POSTAL_LOCATION_LONGITUDE","true","false","false","true","true","String","AUX_DATA","[@Deprecated]","Optional[/**
 * The column with longitude data for postal locations
 * <P>Type: REAL</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"LOCAL_VERSION","true","false","false","true","true","String","""local_version""","[@Deprecated]","Optional[/**
 * The _SYNC_VERSION of the photo that was last downloaded
 * <P>Type: TEXT</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"LIST_GROUP_ACTION","true","false","false","true","true","String","ContactsContract.Intents.UI.LIST_GROUP_ACTION","[@Deprecated]","Optional[/**
 * The action for the contacts list tab.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"QQ","false","false","false","false","false","String","""QQ""","[]","Optional.empty","\android\provider\Contacts.java"
"TYPE_WORK","true","false","false","true","true","int","1","[@Deprecated]","Optional[/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"LIST_DEFAULT","true","false","false","true","true","String","ContactsContract.Intents.UI.LIST_DEFAULT","[@Deprecated]","Optional[/**
 * The action for the default contacts list tab.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"DELETED_CONTENT_URI","true","false","false","true","true","Uri","Uri.parse(""content://contacts/deleted_groups"")","[@Deprecated]","Optional[/**
 * The content:// style URL for the table that holds the deleted
 * groups.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"DISPLAY_NAME","true","false","false","true","true","String","""display_name""","[@Deprecated]","Optional[/**
 * The display name. If name is not null name, else if number is not null number,
 * else if email is not null email.
 * <P>Type: TEXT</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"GROUP_ID","true","false","false","true","true","String","""group_id""","[@Deprecated]","Optional[/**
 * The row id of the accounts group.
 * <P>Type: TEXT</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"CONTENT_IM_ITEM_TYPE","true","false","false","true","true","String","""vnd.android.cursor.item/jabber-im""","[@Deprecated]","Optional[/**
 * The MIME type of a {@link #CONTENT_URI} sub-directory of a single
 * {@link Contacts#KIND_IM} entry.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"PHONE_ISPRIMARY","true","false","false","true","true","String","ContactsContract.Intents.Insert.PHONE_ISPRIMARY","[@Deprecated]","Optional[/**
 * The extra field for the phone isprimary flag.
 * <P>Type: boolean</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"KEY","true","false","false","true","true","String","""key""","[@Deprecated]","Optional[/**
 * The key of this setting.
 * <P>Type: TEXT</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"GROUP_MY_CONTACTS","true","false","false","true","true","String","""Contacts""","[@Deprecated]","Optional[/**
 * The ""My Contacts"" system group.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"AUX_DATA","true","false","false","true","true","String","""aux_data""","[@Deprecated]","Optional[/**
 * Auxiliary data for the contact method.
 * <P>Type: TEXT</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"GROUP_SYNC_ID","true","false","false","true","true","String","""group_sync_id""","[@Deprecated]","Optional[/**
 * The sync id of the group.
 * <P>Type: TEXT</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"SYSTEM_ID","true","false","false","true","true","String","""system_id""","[@Deprecated]","Optional[/**
 * The ID of this group if it is a System Group, null otherwise.
 * <P>Type: TEXT</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"TYPE_CUSTOM","true","false","false","true","true","int","0","[@Deprecated]","Optional[/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"SHOW_OR_CREATE_CONTACT","true","false","false","true","true","String","ContactsContract.Intents.SHOW_OR_CREATE_CONTACT","[@Deprecated]","Optional[/**
 * Takes as input a data URI with a mailto: or tel: scheme. If a single
 * contact exists with the given data it will be shown. If no contact
 * exists, a dialog will ask the user if they want to create a new
 * contact with the provided details filled in. If multiple contacts
 * share the data the user will be prompted to pick which contact they
 * want to view.
 * <p>
 * For <code>mailto:</code> URIs, the scheme specific portion must be a
 * raw email address, such as one built using
 * {@link Uri#fromParts(String, String, String)}.
 * <p>
 * For <code>tel:</code> URIs, the scheme specific portion is compared
 * to existing numbers using the standard caller ID lookup algorithm.
 * The number must be properly encoded, for example using
 * {@link Uri#fromParts(String, String, String)}.
 * <p>
 * Any extras from the {@link Insert} class will be passed along to the
 * create activity if there are no contacts to show.
 * <p>
 * Passing true for the {@link #EXTRA_FORCE_CREATE} extra will skip
 * prompting the user when the contact doesn't exist.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"WITH_EMAIL_OR_IM_FILTER_URI","true","false","false","true","true","Uri","Uri.parse(""content://contacts/people/with_email_or_im_filter"")","[@Deprecated]","Optional[/**
 * The content:// style URL for filtering people that have a specific
 * E-mail or IM address. The filter argument should be passed as an
 * additional path segment after this URI. This matches any people with
 * at least one E-mail or IM {@link ContactMethods} that match the
 * filter.
 *
 * Not exposed because we expect significant changes in the contacts
 * schema and do not want to have to support this.
 * @hide
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"DOWNLOAD_REQUIRED","true","false","false","true","true","String","""download_required""","[@Deprecated]","Optional[/**
 * non-zero if a download is required and the photo isn't marked as a bad resource.
 * You must specify this in the columns in order to use it in the where clause.
 * <P>Type: INTEGER(boolean)</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"CONTENT_POSTAL_ITEM_TYPE","true","false","false","true","true","String","""vnd.android.cursor.item/postal-address""","[@Deprecated]","Optional[/**
 * The MIME type of a {@link #CONTENT_URI} sub-directory of a single
 * {@link Contacts#KIND_POSTAL} entry.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"LIST_CONTACTS_WITH_PHONES_ACTION","true","false","false","true","true","String","ContactsContract.Intents.UI.LIST_CONTACTS_WITH_PHONES_ACTION","[@Deprecated]","Optional[/**
 * The action for the contacts with phone numbers list tab.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"FILTER_TEXT_EXTRA_KEY","true","false","false","true","true","String","ContactsContract.Intents.UI.FILTER_TEXT_EXTRA_KEY","[@Deprecated]","Optional[/**
 * Used as an int extra field in {@link #FILTER_CONTACTS_ACTION}
 * intents to supply the text on which to filter.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"CUSTOM_RINGTONE","true","false","false","true","true","String","""custom_ringtone""","[@Deprecated]","Optional[/**
 * A custom ringtone associated with a person. Not always present.
 * <P>Type: TEXT (URI to the ringtone)</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"TERTIARY_PHONE_TYPE","true","false","false","true","true","String","ContactsContract.Intents.Insert.TERTIARY_PHONE_TYPE","[@Deprecated]","Optional[/**
 * The extra field for an optional third contact phone number type.
 * <P>Type: Either an integer value from {@link android.provider.Contacts.PhonesColumns PhonesColumns},
 * or a string specifying a custom label.</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"PROTOCOL_GOOGLE_TALK","true","false","false","true","true","int","5","[@Deprecated]","Optional[/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"ICQ","false","false","false","false","false","String","""ICQ""","[]","Optional.empty","\android\provider\Contacts.java"
"GROUP_SYNC_ACCOUNT","true","false","false","true","true","String","""group_sync_account""","[@Deprecated]","Optional[/**
 * The account of the group.
 * <P>Type: TEXT</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"_SYNC_ACCOUNT","true","false","false","true","true","String","""_sync_account""","[@Deprecated]","Optional[/**
 * The _SYNC_ACCOUNT to which this setting corresponds. This may be null.
 * <P>Type: TEXT</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED","true","false","false","true","true","String","ContactsContract.Intents.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED","[@Deprecated]","Optional[/**
 * This is the intent that is fired when a search suggestion for creating a contact
 * is clicked on.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"PHONE_TYPE","true","false","false","true","true","String","ContactsContract.Intents.Insert.PHONE_TYPE","[@Deprecated]","Optional[/**
 * The extra field for the contact phone number type.
 * <P>Type: Either an integer value from {@link android.provider.Contacts.PhonesColumns PhonesColumns},
 * or a string specifying a custom label.</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"MOBILE_EMAIL_TYPE_NAME","true","false","false","true","true","String","""_AUTO_CELL""","[@Deprecated]","Optional[/**
 * @hide This is temporal. TYPE_MOBILE should be added to TYPE in the future.
 * This is not ""mobile"" but ""CELL"" since vCard uses it for identifying mobile phone.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"LAST_TIME_CONTACTED","true","false","false","true","true","String","""last_time_contacted""","[@Deprecated]","Optional[/**
 * The last time a person was contacted.
 * <P>Type: INTEGER</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"PHONETIC_NAME","true","false","false","true","true","String","ContactsContract.Intents.Insert.PHONETIC_NAME","[@Deprecated]","Optional[/**
 * The extra field for the contact phonetic name.
 * <P>Type: String</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"PHOTO_VERSION","true","false","false","true","true","String","""photo_version""","[@Deprecated]","Optional[/**
 * The server version of the photo
 * <P>Type: TEXT (the version number portion of the photo URI)</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"PROTOCOL_MSN","true","false","false","true","true","int","1","[@Deprecated]","Optional[/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"PRIORITY","false","false","false","false","false","String","""priority""","[]","Optional[/**
 * The priority, an integer, used by XMPP presence
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Contacts.java"
"DO_NOT_DISTURB","false","false","false","false","false","int","ContactsContract.StatusUpdates.DO_NOT_DISTURB","[]","Optional.empty","\android\provider\Contacts.java"
"EMAIL","true","false","false","true","true","String","ContactsContract.Intents.Insert.EMAIL","[@Deprecated]","Optional[/**
 * The extra field for the contact email address.
 * <P>Type: String</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"GROUPS_PROJECTION","false","false","true","true","true","String","new String[] { Groups._ID }","[]","Optional.empty","\android\provider\Contacts.java"
"CONTENT_ITEM_TYPE","true","false","false","true","true","String","""vnd.android.cursor.item/contact_extensions""","[@Deprecated]","Optional[/**
 * The MIME type of a {@link #CONTENT_URI} subdirectory of a single
 * phone.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"LABEL","true","false","false","true","true","String","""label""","[@Deprecated]","Optional[/**
 * The user provided label, only used if TYPE is TYPE_CUSTOM.
 * <P>Type: TEXT</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"NUMBER","true","false","false","true","true","String","""number""","[@Deprecated]","Optional[/**
 * The phone number as the user entered it.
 * <P>Type: TEXT</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"EXTRA_FORCE_CREATE","true","false","false","true","true","String","ContactsContract.Intents.EXTRA_FORCE_CREATE","[@Deprecated]","Optional[/**
 * Used with {@link #SHOW_OR_CREATE_CONTACT} to force creating a new
 * contact if no matching contact found. Otherwise, default behavior is
 * to prompt user with dialog before creating.
 * <p>
 * Type: BOOLEAN
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"TYPE_PAGER","true","false","false","true","true","int","6","[@Deprecated]","Optional[/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"NAME","true","false","false","true","true","String","ContactsContract.Intents.Insert.NAME","[@Deprecated]","Optional[/**
 * The extra field for the contact name.
 * <P>Type: String</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"_SYNC_ACCOUNT_TYPE","true","false","false","true","true","String","""_sync_account_type""","[@Deprecated]","Optional[/**
 * The _SYNC_ACCOUNT_TYPE to which this setting corresponds. This may be null.
 * <P>Type: TEXT</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"FULL_MODE","true","false","false","true","true","String","ContactsContract.Intents.Insert.FULL_MODE","[@Deprecated]","Optional[/**
 * If present, forces a bypass of quick insert mode.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"PERSON_ID","true","false","false","true","true","String","""person""","[@Deprecated]","Optional[/**
 * The ID of the person this phone number is assigned to.
 * <P>Type: INTEGER (long)</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"SECONDARY_PHONE","true","false","false","true","true","String","ContactsContract.Intents.Insert.SECONDARY_PHONE","[@Deprecated]","Optional[/**
 * The extra field for an optional second contact phone number.
 * <P>Type: String</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"CONTENT_POSTAL_TYPE","true","false","false","true","true","String","""vnd.android.cursor.dir/postal-address""","[@Deprecated]","Optional[/**
 * The MIME type of a {@link #CONTENT_EMAIL_URI} sub-directory of
 * multiple {@link Contacts#KIND_POSTAL} entries.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"NOTES","true","false","false","true","true","String","ContactsContract.Intents.Insert.NOTES","[@Deprecated]","Optional[/**
 * The extra field for the contact notes.
 * <P>Type: String</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"SHOULD_SYNC","true","false","false","true","true","String","""should_sync""","[@Deprecated]","Optional[/**
 * Whether this group should be synced if the SYNC_EVERYTHING settings is false
 * for this group's account.
 * <P>Type: INTEGER (boolean)</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"KIND_POSTAL","true","false","false","true","true","int","2","[@Deprecated]","Optional[/**
 * Signifies a postal address row that is stored in the ContactMethods table
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"KIND_ORGANIZATION","true","false","false","true","true","int","4","[@Deprecated]","Optional[/**
 * Signifies an Organization row that is stored in the Organizations table
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"RAW_CONTENT_URI","true","false","false","true","true","Uri","Uri.parse(""content://contacts/groupmembershipraw"")","[@Deprecated]","Optional[/**
 * The content:// style URL for this table
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"AWAY","false","false","false","false","false","int","ContactsContract.StatusUpdates.AWAY","[]","Optional.empty","\android\provider\Contacts.java"
"AVAILABLE","false","false","false","false","false","int","ContactsContract.StatusUpdates.AVAILABLE","[]","Optional.empty","\android\provider\Contacts.java"
"ACTION","true","false","false","true","true","String","ContactsContract.Intents.Insert.ACTION","[@Deprecated]","Optional[/**
 * The action code to use when adding a contact
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"ISPRIMARY","true","false","false","true","true","String","""isprimary""","[@Deprecated]","Optional[/**
 * Whether this is the primary organization
 * <P>Type: INTEGER (if set, non-0 means true)</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"CONTENT_FILTER_URI","true","false","false","true","true","Uri","Uri.parse(""content://contacts/people/filter"")","[@Deprecated]","Optional[/**
 * The content:// style URL for filtering people by name. The filter
 * argument should be passed as an additional path segment after this URI.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"PROTOCOL_QQ","true","false","false","true","true","int","4","[@Deprecated]","Optional[/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"TITLE","true","false","false","true","true","String","""title""","[@Deprecated]","Optional[/**
 * The title within this organization.
 * <P>Type: TEXT</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"EXTRA_TARGET_RECT","true","false","false","true","true","String","ContactsContract.Intents.EXTRA_TARGET_RECT","[@Deprecated]","Optional[/**
 * Optional extra used with {@link #SHOW_OR_CREATE_CONTACT} to specify a
 * dialog location using screen coordinates. When not specified, the
 * dialog will be centered.
 *
 * @hide pending API council review
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"CONTENT_FILTER_URL","true","false","false","true","true","Uri","Uri.parse(""content://contacts/phones/filter"")","[@Deprecated]","Optional[/**
 * The content:// style URL for filtering phone numbers
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"EMAIL_ISPRIMARY","true","false","false","true","true","String","ContactsContract.Intents.Insert.EMAIL_ISPRIMARY","[@Deprecated]","Optional[/**
 * The extra field for the email isprimary flag.
 * <P>Type: boolean</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED","true","false","false","true","true","String","ContactsContract.Intents.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED","[@Deprecated]","Optional[/**
 * This is the intent that is fired when a search suggestion for dialing a number
 * is clicked on.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"SEND_TO_VOICEMAIL","true","false","false","true","true","String","""send_to_voicemail""","[@Deprecated]","Optional[/**
 * Whether the person should always be sent to voicemail. Not always
 * present.
 * <P>Type: INTEGER (0 for false, 1 for true)</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"PROTOCOL_YAHOO","true","false","false","true","true","int","2","[@Deprecated]","Optional[/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"LIST_STREQUENT_ACTION","true","false","false","true","true","String","ContactsContract.Intents.UI.LIST_STREQUENT_ACTION","[@Deprecated]","Optional[/**
 * The action for the ""strequent"" contacts list tab. It first lists the starred
 * contacts in alphabetical order and then the frequent contacts in descending
 * order of the number of times they have been contacted.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"EXTRA_CREATE_DESCRIPTION","true","false","false","true","true","String","ContactsContract.Intents.EXTRA_CREATE_DESCRIPTION","[@Deprecated]","Optional[/**
 * Used with {@link #SHOW_OR_CREATE_CONTACT} to specify an exact
 * description to be shown when prompting user about creating a new
 * contact.
 * <p>
 * Type: STRING
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"TYPE","true","false","false","true","true","String","""type""","[@Deprecated]","Optional[/**
 * The type of the organizations.
 * <P>Type: INTEGER (one of the constants below)</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"SECONDARY_EMAIL","true","false","false","true","true","String","ContactsContract.Intents.Insert.SECONDARY_EMAIL","[@Deprecated]","Optional[/**
 * The extra field for an optional second contact email address.
 * <P>Type: String</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"DEFAULT_SORT_ORDER","true","false","false","true","true","String","""person, name ASC""","[@Deprecated]","Optional[/**
 * The default sort order for this table
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"LIST_FREQUENT_ACTION","true","false","false","true","true","String","ContactsContract.Intents.UI.LIST_FREQUENT_ACTION","[@Deprecated]","Optional[/**
 * The action for the frequent contacts list tab.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"YAHOO","false","false","false","false","false","String","""Yahoo""","[]","Optional[// 
]","\android\provider\Contacts.java"
"AIM","false","false","false","false","false","String","""AIM""","[]","Optional.empty","\android\provider\Contacts.java"
"AUTHORITY","true","false","false","true","true","String","""contacts""","[@Deprecated]","Optional[/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"COMPANY","true","false","false","true","true","String","ContactsContract.Intents.Insert.COMPANY","[@Deprecated]","Optional[/**
 * The extra field for the contact company.
 * <P>Type: String</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"IM_PROTOCOL","true","false","false","true","true","String","ContactsContract.Intents.Insert.IM_PROTOCOL","[@Deprecated]","Optional[/**
 * The extra field for the IM protocol
 * <P>Type: the result of {@link Contacts.ContactMethods#encodePredefinedImProtocol}
 * or {@link Contacts.ContactMethods#encodeCustomImProtocol}.</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"INVISIBLE","false","false","false","false","false","int","ContactsContract.StatusUpdates.INVISIBLE","[]","Optional.empty","\android\provider\Contacts.java"
"PROTOCOL_AIM","true","false","false","true","true","int","0","[@Deprecated]","Optional[/**
 * The predefined IM protocol types. The protocol can either be non-present, one
 * of these types, or a free-form string. These cases are encoded in the AUX_DATA
 * column as:
 * - null
 * - pre:<an integer, one of the protocols below>
 * - custom:<a string>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"PRIMARY_ORGANIZATION_ID","true","false","false","true","true","String","""primary_organization""","[@Deprecated]","Optional[/**
 * The ID of the persons preferred organization.
 * <P>Type: INTEGER (foreign key to organizations table on the
 * _ID field)</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"PRIMARY_PHONE_ID","true","false","false","true","true","String","""primary_phone""","[@Deprecated]","Optional[/**
 * The ID of the persons preferred phone number.
 * <P>Type: INTEGER (foreign key to phones table on the _ID field)</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"PRESENCE_STATUS","false","false","false","false","false","String","ContactsContract.StatusUpdates.PRESENCE","[]","Optional[/**
 * The server defined status.
 * <P>Type: INTEGER (one of the values below)</P>
 */
]","\android\provider\Contacts.java"
"TIMES_CONTACTED","true","false","false","true","true","String","""times_contacted""","[@Deprecated]","Optional[/**
 * The number of times a person has been contacted
 * <P>Type: INTEGER</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"TYPE_OTHER","true","false","false","true","true","int","2","[@Deprecated]","Optional[/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"IM_ACCOUNT","true","false","false","true","true","String","""im_account""","[@Deprecated]","Optional[/**
 * The IM account for the local user that the presence data came from.
 * <P>Type: STRING</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"ATTACH_IMAGE","true","false","false","true","true","String","ContactsContract.Intents.ATTACH_IMAGE","[@Deprecated]","Optional[/**
 * Starts an Activity that lets the user pick a contact to attach an image to.
 * After picking the contact it launches the image cropper in face detection mode.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"CONTENT_URI","true","false","false","true","true","Uri","Uri.parse(""content://contacts/extensions"")","[@Deprecated]","Optional[/**
 * The content:// style URL for this table
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"GROUP_SYNC_ACCOUNT_TYPE","true","false","false","true","true","String","""group_sync_account_type""","[@Deprecated]","Optional[/**
 * The account type of the group.
 * <P>Type: TEXT</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"EMAIL_TYPE","true","false","false","true","true","String","ContactsContract.Intents.Insert.EMAIL_TYPE","[@Deprecated]","Optional[/**
 * The extra field for the contact email type.
 * <P>Type: Either an integer value from {@link android.provider.Contacts.ContactMethodsColumns ContactMethodsColumns}
 * or a string specifying a custom label.</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"JABBER","false","false","false","false","false","String","""JABBER""","[]","Optional.empty","\android\provider\Contacts.java"
"IM_ISPRIMARY","true","false","false","true","true","String","ContactsContract.Intents.Insert.IM_ISPRIMARY","[@Deprecated]","Optional[/**
 * The extra field for the IM isprimary flag.
 * <P>Type: boolean</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"POSTAL_LOCATION_LATITUDE","true","false","false","true","true","String","DATA","[@Deprecated]","Optional[/**
 * The column with latitude data for postal locations
 * <P>Type: REAL</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"EXISTS_ON_SERVER","true","false","false","true","true","String","""exists_on_server""","[@Deprecated]","Optional[/**
 * non-zero if this photo is known to exist on the server
 * <P>Type: INTEGER(boolean)</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"JOB_TITLE","true","false","false","true","true","String","ContactsContract.Intents.Insert.JOB_TITLE","[@Deprecated]","Optional[/**
 * The extra field for the contact job title.
 * <P>Type: String</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"CONTENT_DIRECTORY","true","false","false","true","true","String","""photo""","[@Deprecated]","Optional[/**
 * The directory twig for this sub-table
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"STARRED","true","false","false","true","true","String","""starred""","[@Deprecated]","Optional[/**
 * Is the contact starred?
 * <P>Type: INTEGER (boolean)</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"MSN","false","false","false","false","false","String","""MSN""","[]","Optional.empty","\android\provider\Contacts.java"
"TERTIARY_EMAIL_TYPE","true","false","false","true","true","String","ContactsContract.Intents.Insert.TERTIARY_EMAIL_TYPE","[@Deprecated]","Optional[/**
 * The extra field for an optional third contact email type.
 * <P>Type: Either an integer value from {@link android.provider.Contacts.ContactMethodsColumns ContactMethodsColumns}
 * or a string specifying a custom label.</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"TAG","false","false","true","true","true","String","""Contacts""","[]","Optional.empty","\android\provider\Contacts.java"
"GROUP_ANDROID_STARRED","true","false","false","true","true","String","""Starred in Android""","[@Deprecated]","Optional[/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"GTALK","false","false","false","false","false","String","""GTalk""","[]","Optional.empty","\android\provider\Contacts.java"
"TYPE_FAX_WORK","true","false","false","true","true","int","4","[@Deprecated]","Optional[/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"VALUE","true","false","false","true","true","String","""value""","[@Deprecated]","Optional[/**
 * The value of this extension. May not be null.
 * <P>Type: TEXT</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"LIST_STARRED_ACTION","true","false","false","true","true","String","ContactsContract.Intents.UI.LIST_STARRED_ACTION","[@Deprecated]","Optional[/**
 * The action for the starred contacts list tab.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"POSTAL_TYPE","true","false","false","true","true","String","ContactsContract.Intents.Insert.POSTAL_TYPE","[@Deprecated]","Optional[/**
 * The extra field for the contact postal address type.
 * <P>Type: Either an integer value from {@link android.provider.Contacts.ContactMethodsColumns ContactMethodsColumns}
 * or a string specifying a custom label.</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"KIND_PHONE","true","false","false","true","true","int","5","[@Deprecated]","Optional[/**
 * Signifies an Phone row that is stored in the Phones table
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"PROTOCOL_ICQ","true","false","false","true","true","int","6","[@Deprecated]","Optional[/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"XMPP","false","false","false","false","false","String","""XMPP""","[]","Optional.empty","\android\provider\Contacts.java"
"LIST_ALL_CONTACTS_ACTION","true","false","false","true","true","String","ContactsContract.Intents.UI.LIST_ALL_CONTACTS_ACTION","[@Deprecated]","Optional[/**
 * The action for the all contacts list tab.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"SORT_STRING","true","false","false","true","true","String","""sort_string""","[@Deprecated]","Optional[/**
 * The field for sorting list phonetically. The content of this field
 * may not be human readable but phonetically sortable.
 * <P>Type: TEXT</p>
 * @hide Used only in Contacts application for now.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"CONTENT_EMAIL_ITEM_TYPE","true","false","false","true","true","String","""vnd.android.cursor.item/email""","[@Deprecated]","Optional[/**
 * The MIME type of a {@link #CONTENT_URI} sub-directory of a single
 * {@link Contacts#KIND_EMAIL} entry.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"PRIMARY_EMAIL_ID","true","false","false","true","true","String","""primary_email""","[@Deprecated]","Optional[/**
 * The ID of the persons preferred email.
 * <P>Type: INTEGER (foreign key to contact_methods table on the
 * _ID field)</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"PROTOCOL_JABBER","true","false","false","true","true","int","7","[@Deprecated]","Optional[/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"TYPE_FAX_HOME","true","false","false","true","true","int","5","[@Deprecated]","Optional[/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"TYPE_MOBILE","true","false","false","true","true","int","2","[@Deprecated]","Optional[/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"DATA","true","false","false","true","true","String","""data""","[@Deprecated]","Optional[/**
 * The image data, or null if there is no image.
 * <P>Type: BLOB</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"SYNC_EVERYTHING","true","false","false","true","true","String","""syncEverything""","[@Deprecated]","Optional[/**
 * A setting that is used to indicate if we should sync down all groups for the
 * specified account. For this setting the _SYNC_ACCOUNT column must be set.
 * If this isn't set then we will only sync the groups whose SHOULD_SYNC column
 * is set to true.
 * <p>
 * This is a boolean setting. It is true if it is set and it is anything other than the
 * emptry string or ""0"".
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"KIND","true","false","false","true","true","String","""kind""","[@Deprecated]","Optional[/**
 * The kind of the the contact method. For example, email address,
 * postal address, etc.
 * <P>Type: INTEGER (one of the values below)</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"PRESENCE_CUSTOM_STATUS","false","false","false","false","false","String","ContactsContract.StatusUpdates.STATUS","[]","Optional[/**
 * The user defined status line.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Contacts.java"
"GROUP_NAME_EXTRA_KEY","true","false","false","true","true","String","ContactsContract.Intents.UI.GROUP_NAME_EXTRA_KEY","[@Deprecated]","Optional[/**
 * When in LIST_GROUP_ACTION mode, this is the group to display.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"OFFLINE","false","false","false","false","false","int","ContactsContract.StatusUpdates.OFFLINE","[]","Optional[/**
 * Presence Status definition
 */
]","\android\provider\Contacts.java"
"SECONDARY_PHONE_TYPE","true","false","false","true","true","String","ContactsContract.Intents.Insert.SECONDARY_PHONE_TYPE","[@Deprecated]","Optional[/**
 * The extra field for an optional second contact phone number type.
 * <P>Type: Either an integer value from {@link android.provider.Contacts.PhonesColumns PhonesColumns},
 * or a string specifying a custom label.</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"SYNC_ERROR","true","false","false","true","true","String","""sync_error""","[@Deprecated]","Optional[/**
 * Contains the description of the upload or download error from
 * the previous attempt. If null then the previous attempt succeeded.
 * <P>Type: TEXT</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"KIND_EMAIL","true","false","false","true","true","int","1","[@Deprecated]","Optional[/**
 * Signifies an email address row that is stored in the ContactMethods table
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"CONTENT_EMAIL_URI","true","false","false","true","true","Uri","Uri.parse(""content://contacts/contact_methods/email"")","[@Deprecated]","Optional[/**
 * The content:// style URL for sub-directory of e-mail addresses.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"PHONE","true","false","false","true","true","String","ContactsContract.Intents.Insert.PHONE","[@Deprecated]","Optional[/**
 * The extra field for the contact phone number.
 * <P>Type: String</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"POSTAL","true","false","false","true","true","String","ContactsContract.Intents.Insert.POSTAL","[@Deprecated]","Optional[/**
 * The extra field for the contact postal address.
 * <P>Type: String</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"NUMBER_KEY","true","false","false","true","true","String","""number_key""","[@Deprecated]","Optional[/**
 * The normalized phone number
 * <P>Type: TEXT</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"TITLE_EXTRA_KEY","true","false","false","true","true","String","ContactsContract.Intents.UI.TITLE_EXTRA_KEY","[@Deprecated]","Optional[/**
 * A key for to be used as an intent extra to set the activity
 * title to a custom String value.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"FILTER_CONTACTS_ACTION","true","false","false","true","true","String","ContactsContract.Intents.UI.FILTER_CONTACTS_ACTION","[@Deprecated]","Optional[/**
 * Activity Action: Display a filtered list of contacts
 * <p>
 * Input: Extra field {@link #FILTER_TEXT_EXTRA_KEY} is the text to use for
 * filtering
 * <p>
 * Output: Nothing.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"TERTIARY_EMAIL","true","false","false","true","true","String","ContactsContract.Intents.Insert.TERTIARY_EMAIL","[@Deprecated]","Optional[/**
 * The extra field for an optional third contact email address.
 * <P>Type: String</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"KIND_IM","true","false","false","true","true","int","3","[@Deprecated]","Optional[/**
 * Signifies an IM address row that is stored in the ContactMethods table
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"IM_HANDLE","true","false","false","true","true","String","ContactsContract.Intents.Insert.IM_HANDLE","[@Deprecated]","Optional[/**
 * The extra field for an IM handle.
 * <P>Type: String</P>
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"MOBILE_EMAIL_TYPE_INDEX","true","false","false","true","true","int","2","[@Deprecated]","Optional[/**
 * @hide This is temporal. TYPE_MOBILE should be added to TYPE in the future.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"CONTENT_EMAIL_TYPE","true","false","false","true","true","String","""vnd.android.cursor.dir/email""","[@Deprecated]","Optional[/**
 * The MIME type of a {@link #CONTENT_EMAIL_URI} sub-directory of
 * multiple {@link Contacts#KIND_EMAIL} entries.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"IDLE","false","false","false","false","false","int","ContactsContract.StatusUpdates.IDLE","[]","Optional.empty","\android\provider\Contacts.java"
"SEARCH_SUGGESTION_CLICKED","true","false","false","true","true","String","ContactsContract.Intents.SEARCH_SUGGESTION_CLICKED","[@Deprecated]","Optional[/**
 * This is the intent that is fired when a search suggestion is clicked on.
 * @deprecated see {@link android.provider.ContactsContract}
 */
]","\android\provider\Contacts.java"
"FILTER_TOKEN","false","false","true","true","true","int","0xD0D0F00D","[]","Optional.empty","\android\widget\Filter.java"
"FINISH_TOKEN","false","false","true","true","true","int","0xDEADBEEF","[]","Optional.empty","\android\widget\Filter.java"
"listener","false","false","false","false","false","FilterListener","null","[]","Optional[/**
 * <p>The listener to notify upon completion. Can be null.</p>
 */
]","\android\widget\Filter.java"
"THREAD_NAME","false","false","true","true","true","String","""Filter""","[]","Optional.empty","\android\widget\Filter.java"
"results","false","false","false","false","false","FilterResults","null","[]","Optional[/**
 * <p>The results of the filtering operation.</p>
 */
]","\android\widget\Filter.java"
"count","true","false","false","false","false","int","null","[]","Optional[/**
 * <p>Contains the number of values computed by the filtering
 * operation.</p>
 */
]","\android\widget\Filter.java"
"mDelayer","false","false","true","false","false","Delayer","null","[]","Optional.empty","\android\widget\Filter.java"
"LOG_TAG","false","false","true","true","true","String","""Filter""","[]","Optional.empty","\android\widget\Filter.java"
"mLock","false","false","true","false","true","Object","new Object()","[]","Optional.empty","\android\widget\Filter.java"
"mResultHandler","false","false","true","false","false","Handler","null","[]","Optional.empty","\android\widget\Filter.java"
"constraint","false","false","false","false","false","CharSequence","null","[]","Optional[/**
 * <p>The constraint used to filter the data.</p>
 */
]","\android\widget\Filter.java"
"mThreadHandler","false","false","true","false","false","Handler","null","[]","Optional.empty","\android\widget\Filter.java"
"values","true","false","false","false","false","Object","null","[]","Optional[/**
 * <p>Contains all the values computed by the filtering operation.</p>
 */
]","\android\widget\Filter.java"
"HEARTBEAT_SEND_INTERVAL_IN_MS","false","false","true","true","true","long","1000","[]","Optional.empty","\android\content\SyncContext.java"
"mLastHeartbeatSendTime","false","false","true","false","false","long","null","[]","Optional.empty","\android\content\SyncContext.java"
"mSyncContext","false","false","true","false","false","ISyncContext","null","[]","Optional.empty","\android\content\SyncContext.java"
"mChildLayout","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ResourceCursorTreeAdapter.java"
"mLastChildLayout","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ResourceCursorTreeAdapter.java"
"mExpandedGroupLayout","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ResourceCursorTreeAdapter.java"
"mCollapsedGroupLayout","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ResourceCursorTreeAdapter.java"
"mInflater","false","false","true","false","false","LayoutInflater","null","[]","Optional.empty","\android\widget\ResourceCursorTreeAdapter.java"
"mApplication","false","false","true","false","false","Application","null","[]","Optional.empty","\android\app\Service.java"
"mClassName","false","false","true","false","false","String","null","[]","Optional.empty","\android\app\Service.java"
"mStartCompatibility","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\app\Service.java"
"START_STICKY_COMPATIBILITY","true","false","false","true","true","int","0","[]","Optional[/**
 * Constant to return from {@link #onStartCommand}: compatibility
 * version of {@link #START_STICKY} that does not guarantee that
 * {@link #onStartCommand} will be called again after being killed.
 */
]","\android\app\Service.java"
"START_NOT_STICKY","true","false","false","true","true","int","2","[]","Optional[/**
 * Constant to return from {@link #onStartCommand}: if this service's
 * process is killed while it is started (after returning from
 * {@link #onStartCommand}), and there are no new start intents to
 * deliver to it, then take the service out of the started state and
 * don't recreate until a future explicit call to
 * {@link Context#startService Context.startService(Intent)}.  The
 * service will not receive a {@link #onStartCommand(Intent, int, int)}
 * call with a null Intent because it will not be re-started if there
 * are no pending Intents to deliver.
 *
 * <p>This mode makes sense for things that want to do some work as a
 * result of being started, but can be stopped when under memory pressure
 * and will explicit start themselves again later to do more work.  An
 * example of such a service would be one that polls for data from
 * a server: it could schedule an alarm to poll every N minutes by having
 * the alarm start its service.  When its {@link #onStartCommand} is
 * called from the alarm, it schedules a new alarm for N minutes later,
 * and spawns a thread to do its networking.  If its process is killed
 * while doing that check, the service will not be restarted until the
 * alarm goes off.
 */
]","\android\app\Service.java"
"START_CONTINUATION_MASK","true","false","false","true","true","int","0xf","[]","Optional[/**
 * Bits returned by {@link #onStartCommand} describing how to continue
 * the service if it is killed.  May be {@link #START_STICKY},
 * {@link #START_NOT_STICKY}, {@link #START_REDELIVER_INTENT},
 * or {@link #START_STICKY_COMPATIBILITY}.
 */
]","\android\app\Service.java"
"mToken","false","false","true","false","false","IBinder","null","[]","Optional.empty","\android\app\Service.java"
"START_STICKY","true","false","false","true","true","int","1","[]","Optional[/**
 * Constant to return from {@link #onStartCommand}: if this service's
 * process is killed while it is started (after returning from
 * {@link #onStartCommand}), then leave it in the started state but
 * don't retain this delivered intent.  Later the system will try to
 * re-create the service.  Because it is in the started state, it will
 * guarantee to call {@link #onStartCommand} after creating the new
 * service instance; if there are not any pending start commands to be
 * delivered to the service, it will be called with a null intent
 * object, so you must take care to check for this.
 *
 * <p>This mode makes sense for things that will be explicitly started
 * and stopped to run for arbitrary periods of time, such as a service
 * performing background music playback.
 */
]","\android\app\Service.java"
"TAG","false","false","true","true","true","String","""Service""","[]","Optional.empty","\android\app\Service.java"
"mThread","false","false","true","false","false","ActivityThread","null","[]","Optional[// set by the thread after the constructor and before onCreate(Bundle icicle) is called.
]","\android\app\Service.java"
"START_FLAG_REDELIVERY","true","false","false","true","true","int","0x0001","[]","Optional[/**
 * This flag is set in {@link #onStartCommand} if the Intent is a
 * re-delivery of a previously delivered intent, because the service
 * had previously returned {@link #START_REDELIVER_INTENT} but had been
 * killed before calling {@link #stopSelf(int)} for that Intent.
 */
]","\android\app\Service.java"
"START_REDELIVER_INTENT","true","false","false","true","true","int","3","[]","Optional[/**
 * Constant to return from {@link #onStartCommand}: if this service's
 * process is killed while it is started (after returning from
 * {@link #onStartCommand}), then it will be scheduled for a restart
 * and the last delivered Intent re-delivered to it again via
 * {@link #onStartCommand}.  This Intent will remain scheduled for
 * redelivery until the service calls {@link #stopSelf(int)} with the
 * start ID provided to {@link #onStartCommand}.  The
 * service will not receive a {@link #onStartCommand(Intent, int, int)}
 * call with a null Intent because it will will only be re-started if
 * it is not finished processing all Intents sent to it (and any such
 * pending events will be delivered at the point of restart).
 */
]","\android\app\Service.java"
"mActivityManager","false","false","true","false","false","IActivityManager","null","[]","Optional.empty","\android\app\Service.java"
"START_FLAG_RETRY","true","false","false","true","true","int","0x0002","[]","Optional[/**
 * This flag is set in {@link #onStartCommand} if the Intent is a
 * a retry because the original attempt never got to or returned from
 * {@link #onStartCommand(Intent, int, int)}.
 */
]","\android\app\Service.java"
"mInstance","false","false","true","true","false","DdmHandleAppName","new DdmHandleAppName()","[]","Optional.empty","\android\ddm\DdmHandleAppName.java"
"CHUNK_APNM","true","false","false","true","true","int","type(""APNM"")","[]","Optional.empty","\android\ddm\DdmHandleAppName.java"
"mAppName","false","false","true","true","false","String","""""","[]","Optional.empty","\android\ddm\DdmHandleAppName.java"
"mSessionCache","false","false","false","false","true","SSLClientSessionCache","null","[]","Optional[/* package */
]","\android\net\SSLSessionCache.java"
"TAG","false","false","true","true","true","String","""SSLSessionCache""","[]","Optional.empty","\android\net\SSLSessionCache.java"
"mAlphabetArray","false","false","true","false","false","String","null","[]","Optional[/**
 * The section array converted from the alphabet string.
 */
]","\android\widget\AlphabetIndexer.java"
"mAlphabetLength","false","false","true","false","false","int","null","[]","Optional[/**
 * Cached length of the alphabet array.
 */
]","\android\widget\AlphabetIndexer.java"
"mCollator","false","false","true","false","false","java.text.Collator","null","[]","Optional[/**
 * Use a collator to compare strings in a localized manner.
 */
]","\android\widget\AlphabetIndexer.java"
"mDataCursor","false","true","false","false","false","Cursor","null","[]","Optional[/**
 * Cursor that is used by the adapter of the list view.
 */
]","\android\widget\AlphabetIndexer.java"
"mAlphabet","false","true","false","false","false","CharSequence","null","[]","Optional[/**
 * The string of characters that make up the indexing sections.
 */
]","\android\widget\AlphabetIndexer.java"
"mColumnIndex","false","true","false","false","false","int","null","[]","Optional[/**
 * The index of the cursor column that this list is sorted on.
 */
]","\android\widget\AlphabetIndexer.java"
"mAlphaMap","false","false","true","false","false","SparseIntArray","null","[]","Optional[/**
 * This contains a cache of the computed indices so far. It will get reset whenever
 * the dataset changes or the cursor changes.
 */
]","\android\widget\AlphabetIndexer.java"
"MAX_OFFENSES_PER_LOOP","false","false","true","true","true","int","10","[]","Optional[// of the Looper.
]","\android\os\StrictMode.java"
"PENALTY_DIALOG","true","false","false","true","true","int","0x20","[]","Optional[/**
 * @hide
 */
]","\android\os\StrictMode.java"
"MIN_LOG_INTERVAL_MS","false","false","true","true","true","long","1000","[]","Optional[// Only log a duplicate stack trace to the logs every second.
]","\android\os\StrictMode.java"
"PENALTY_GATHER","true","false","false","true","true","int","0x100","[]","Optional[/**
 * Non-public penalty mode which overrides all the other penalty
 * bits and signals that we're in a Binder call and we should
 * ignore the other penalty bits and instead serialize back all
 * our offending stack traces to the caller to ultimately handle
 * in the originating process.
 *
 * This must be kept in sync with the constant in libs/binder/Parcel.cpp
 *
 * @hide
 */
]","\android\os\StrictMode.java"
"policy","true","false","false","false","true","int","null","[]","Optional[/**
 * The strict mode policy mask at the time of violation.
 */
]","\android\os\StrictMode.java"
"durationMillis","true","false","false","false","false","int","-1","[]","Optional[/**
 * The wall time duration of the violation, when known.  -1 when
 * not known.
 */
]","\android\os\StrictMode.java"
"MIN_DIALOG_INTERVAL_MS","false","false","true","true","true","long","30000","[]","Optional[// Only show an annoying dialog at most every 30 seconds
]","\android\os\StrictMode.java"
"DETECT_DISK_READ","true","false","false","true","true","int","0x02","[]","Optional[// for ThreadPolicy
]","\android\os\StrictMode.java"
"DETECT_DISK_WRITE","true","false","false","true","true","int","0x01","[]","Optional[// for ThreadPolicy
]","\android\os\StrictMode.java"
"PENALTY_DEATH","true","false","false","true","true","int","0x40","[]","Optional[/**
 * @hide
 */
]","\android\os\StrictMode.java"
"mPolicyMask","false","false","true","false","false","int","null","[]","Optional.empty","\android\os\StrictMode.java"
"sVmPolicyMask","false","false","true","true","false","int","0","[]","Optional[/**
 * The current VmPolicy in effect.
 */
]","\android\os\StrictMode.java"
"mMask","false","false","true","false","false","int","null","[]","Optional.empty","\android\os\StrictMode.java"
"mask","false","false","false","false","true","int","null","[]","Optional.empty","\android\os\StrictMode.java"
"crashInfo","true","false","false","false","true","ApplicationErrorReport.CrashInfo","null","[]","Optional[/**
 * Stack and other stuff info.
 */
]","\android\os\StrictMode.java"
"violationsBeingTimed","false","false","true","true","true","ThreadLocal<ArrayList<ViolationInfo>>","new ThreadLocal<ArrayList<ViolationInfo>>() {

    @Override
    protected ArrayList<ViolationInfo> initialValue() {
        return new ArrayList<ViolationInfo>();
    }
}","[]","Optional.empty","\android\os\StrictMode.java"
"violationNumThisLoop","true","false","false","false","false","int","null","[]","Optional[/**
 * Which violation number this was (1-based) since the last Looper loop,
 * from the perspective of the root caller (if it crossed any processes
 * via Binder calls).  The value is 0 if the root caller wasn't on a Looper
 * thread.
 */
]","\android\os\StrictMode.java"
"PENALTY_LOG","true","false","false","true","true","int","0x10","[]","Optional[// normal android.util.Log
]","\android\os\StrictMode.java"
"gatheredViolations","false","false","true","true","true","ThreadLocal<ArrayList<ViolationInfo>>","new ThreadLocal<ArrayList<ViolationInfo>>() {

    @Override
    protected ArrayList<ViolationInfo> initialValue() {
        // hasGatheredViolations() below.
        return null;
    }
}","[]","Optional[/**
 * Log of strict mode violation stack traces that have occurred
 * during a Binder call, to be serialized back later to the caller
 * via Parcel.writeNoException() (amusingly) where the caller can
 * choose how to react.
 */
]","\android\os\StrictMode.java"
"mLastViolationTime","false","false","true","false","true","HashMap<Integer,Long>","new HashMap<Integer, Long>()","[]","Optional[// accessed by the same thread.
]","\android\os\StrictMode.java"
"DETECT_NETWORK","true","false","false","true","true","int","0x04","[]","Optional[// for ThreadPolicy
]","\android\os\StrictMode.java"
"TAG","false","false","true","true","true","String","""StrictMode""","[]","Optional.empty","\android\os\StrictMode.java"
"LAX","true","false","false","true","true","VmPolicy","new VmPolicy(0)","[]","Optional[/**
 * The default, lax policy which doesn't catch anything.
 */
]","\android\os\StrictMode.java"
"violationUptimeMillis","true","false","false","false","false","long","null","[]","Optional[/**
 * The time (in terms of SystemClock.uptimeMillis()) that the
 * violation occurred.
 */
]","\android\os\StrictMode.java"
"LOG_V","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\os\StrictMode.java"
"DETECT_VM_CURSOR_LEAKS","true","false","false","true","true","int","0x200","[]","Optional[// for ProcessPolicy
]","\android\os\StrictMode.java"
"PENALTY_DROPBOX","true","false","false","true","true","int","0x80","[]","Optional[/**
 * @hide
 */
]","\android\os\StrictMode.java"
"ident","true","false","false","false","true","int","null","[]","Optional.empty","\android\app\admin\DeviceAdminInfo.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<DeviceAdminInfo>","new Parcelable.Creator<DeviceAdminInfo>() {

    public DeviceAdminInfo createFromParcel(Parcel source) {
        return new DeviceAdminInfo(source);
    }

    public DeviceAdminInfo[] newArray(int size) {
        return new DeviceAdminInfo[size];
    }
}","[]","Optional[/**
 * Used to make this class parcelable.
 */
]","\android\app\admin\DeviceAdminInfo.java"
"USES_POLICY_WATCH_LOGIN","true","false","false","true","true","int","1","[]","Optional[/**
 * A type of policy that this device admin can use: able to watch login
 * attempts from the user, via {@link DeviceAdminReceiver#ACTION_PASSWORD_FAILED},
 * {@link DeviceAdminReceiver#ACTION_PASSWORD_SUCCEEDED}, and
 * {@link DevicePolicyManager#getCurrentFailedPasswordAttempts}.
 *
 * <p>To control this policy, the device admin must have a ""watch-login""
 * tag in the ""uses-policies"" section of its meta-data.
 */
]","\android\app\admin\DeviceAdminInfo.java"
"sPoliciesDisplayOrder","false","false","false","true","false","ArrayList<PolicyInfo>","new ArrayList<PolicyInfo>()","[]","Optional.empty","\android\app\admin\DeviceAdminInfo.java"
"sKnownPolicies","false","false","false","true","false","HashMap<String,Integer>","new HashMap<String, Integer>()","[]","Optional.empty","\android\app\admin\DeviceAdminInfo.java"
"mVisible","false","false","false","false","false","boolean","null","[]","Optional[/**
 * Whether this should be visible to the user.
 */
]","\android\app\admin\DeviceAdminInfo.java"
"USES_POLICY_LIMIT_PASSWORD","true","false","false","true","true","int","0","[]","Optional[/**
 * A type of policy that this device admin can use: limit the passwords
 * that the user can select, via {@link DevicePolicyManager#setPasswordQuality}
 * and {@link DevicePolicyManager#setPasswordMinimumLength}.
 *
 * <p>To control this policy, the device admin must have a ""limit-password""
 * tag in the ""uses-policies"" section of its meta-data.
 */
]","\android\app\admin\DeviceAdminInfo.java"
"description","true","false","false","false","true","int","null","[]","Optional.empty","\android\app\admin\DeviceAdminInfo.java"
"sRevKnownPolicies","false","false","false","true","false","SparseArray<PolicyInfo>","new SparseArray<PolicyInfo>()","[]","Optional.empty","\android\app\admin\DeviceAdminInfo.java"
"mUsesPolicies","false","false","false","false","false","int","null","[]","Optional[/**
 * The policies this administrator needs access to.
 */
]","\android\app\admin\DeviceAdminInfo.java"
"label","true","false","false","false","true","int","null","[]","Optional.empty","\android\app\admin\DeviceAdminInfo.java"
"USES_POLICY_WIPE_DATA","true","false","false","true","true","int","4","[]","Optional[/**
 * A type of policy that this device admin can use: able to factory
 * reset the device, erasing all of the user's data, via
 * {@link DevicePolicyManager#wipeData}.
 *
 * <p>To control this policy, the device admin must have a ""wipe-data""
 * tag in the ""uses-policies"" section of its meta-data.
 */
]","\android\app\admin\DeviceAdminInfo.java"
"TAG","false","false","false","true","true","String","""DeviceAdminInfo""","[]","Optional.empty","\android\app\admin\DeviceAdminInfo.java"
"USES_POLICY_FORCE_LOCK","true","false","false","true","true","int","3","[]","Optional[/**
 * A type of policy that this device admin can use: able to force the device
 * to lock via{@link DevicePolicyManager#lockNow} or limit the
 * maximum lock timeout for the device via
 * {@link DevicePolicyManager#setMaximumTimeToLock}.
 *
 * <p>To control this policy, the device admin must have a ""force-lock""
 * tag in the ""uses-policies"" section of its meta-data.
 */
]","\android\app\admin\DeviceAdminInfo.java"
"USES_POLICY_RESET_PASSWORD","true","false","false","true","true","int","2","[]","Optional[/**
 * A type of policy that this device admin can use: able to reset the
 * user's password via
 * {@link DevicePolicyManager#resetPassword}.
 *
 * <p>To control this policy, the device admin must have a ""reset-password""
 * tag in the ""uses-policies"" section of its meta-data.
 */
]","\android\app\admin\DeviceAdminInfo.java"
"tag","true","false","false","false","true","String","null","[]","Optional.empty","\android\app\admin\DeviceAdminInfo.java"
"mReceiver","false","false","false","false","true","ResolveInfo","null","[]","Optional[/**
 * The BroadcastReceiver that implements this device admin component.
 */
]","\android\app\admin\DeviceAdminInfo.java"
"mTextAppearanceContext","false","false","true","false","false","Context","null","[]","Optional.empty","\com\android\internal\view\menu\ListMenuItemView.java"
"mTitleView","false","false","true","false","false","TextView","null","[]","Optional.empty","\com\android\internal\view\menu\ListMenuItemView.java"
"mRadioButton","false","false","true","false","false","RadioButton","null","[]","Optional.empty","\com\android\internal\view\menu\ListMenuItemView.java"
"mTextAppearance","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\view\menu\ListMenuItemView.java"
"mIconView","false","false","true","false","false","ImageView","null","[]","Optional.empty","\com\android\internal\view\menu\ListMenuItemView.java"
"mCheckBox","false","false","true","false","false","CheckBox","null","[]","Optional.empty","\com\android\internal\view\menu\ListMenuItemView.java"
"mBackground","false","false","true","false","false","Drawable","null","[]","Optional.empty","\com\android\internal\view\menu\ListMenuItemView.java"
"mMenuType","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\view\menu\ListMenuItemView.java"
"mItemData","false","false","true","false","false","MenuItemImpl","null","[]","Optional.empty","\com\android\internal\view\menu\ListMenuItemView.java"
"mShortcutView","false","false","true","false","false","TextView","null","[]","Optional.empty","\com\android\internal\view\menu\ListMenuItemView.java"
"mPivotXType","false","false","true","false","false","int","ABSOLUTE","[]","Optional.empty","\android\view\animation\ScaleAnimation.java"
"mPivotYValue","false","false","true","false","false","float","0.0f","[]","Optional.empty","\android\view\animation\ScaleAnimation.java"
"mPivotYType","false","false","true","false","false","int","ABSOLUTE","[]","Optional.empty","\android\view\animation\ScaleAnimation.java"
"mFromX","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\animation\ScaleAnimation.java"
"mFromY","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\animation\ScaleAnimation.java"
"mToX","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\animation\ScaleAnimation.java"
"mToY","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\animation\ScaleAnimation.java"
"mPivotX","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\animation\ScaleAnimation.java"
"mPivotY","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\animation\ScaleAnimation.java"
"mPivotXValue","false","false","true","false","false","float","0.0f","[]","Optional.empty","\android\view\animation\ScaleAnimation.java"
"mLastCodeY","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mLastCodeX","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mPastTime","false","false","false","false","true","long","new long[NUM_PAST]","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"NOT_A_KEY","false","false","true","true","true","int","-1","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mDownTime","false","false","true","false","false","long","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mPreviewOffset","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mKeys","false","false","true","false","false","Key","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mShadowRadius","false","false","true","false","false","float","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mWindowOffset","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mShadowColor","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"MSG_REMOVE_PREVIEW","false","false","true","true","true","int","2","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"REPEAT_START_DELAY","false","false","true","true","true","int","400","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mPreviewTextSizeLarge","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mLastX","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mRepeatKeyIndex","false","false","true","false","false","int","NOT_A_KEY","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mBuffer","false","false","true","false","false","Bitmap","null","[]","Optional[/**
 * The keyboard bitmap for faster updates
 */
]","\android\inputmethodservice\KeyboardView.java"
"mLastY","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mXVelocity","false","false","false","false","false","float","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mProximityCorrectOn","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mPossiblePoly","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mPreviewLabel","false","false","true","false","false","StringBuilder","new StringBuilder(1)","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mOldPointerCount","false","false","true","false","false","int","1","[]","Optional[// Variables for dealing with multiple pointers
]","\android\inputmethodservice\KeyboardView.java"
"mLabelTextSize","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mLastKeyTime","false","false","true","false","false","long","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mSwipeThreshold","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mLastTapTime","false","false","true","false","false","long","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mKeyboard","false","false","true","false","false","Keyboard","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mKeyTextColor","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"LONGPRESS_TIMEOUT","false","false","true","true","true","int","ViewConfiguration.getLongPressTimeout()","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mDistances","false","false","true","false","false","int","new int[MAX_NEARBY_KEYS]","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mPastX","false","false","false","false","true","float","new float[NUM_PAST]","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mPastY","false","false","false","false","true","float","new float[NUM_PAST]","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"MSG_LONGPRESS","false","false","true","true","true","int","4","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mPopupKeyboard","false","false","true","false","false","PopupWindow","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"NUM_PAST","false","false","false","true","true","int","4","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mMiniKeyboardOnScreen","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mYVelocity","false","false","false","false","false","float","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mBackgroundDimAmount","false","false","true","false","false","float","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mCurrentKeyTime","false","false","true","false","false","long","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"LONGEST_PAST_TIME","false","false","false","true","true","int","200","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mInMultiTap","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mCurrentKeyIndex","false","false","true","false","false","int","NOT_A_KEY","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"MULTITAP_INTERVAL","false","false","true","true","true","int","800","[]","Optional[// milliseconds
]","\android\inputmethodservice\KeyboardView.java"
"mPreviewHeight","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mOldPointerX","false","false","true","false","false","float","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mOldPointerY","false","false","true","false","false","float","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mPreviewCentered","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mLastMoveTime","false","false","true","false","false","long","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mProximityThreshold","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mOffsetInWindow","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"DELAY_AFTER_PREVIEW","false","false","true","true","true","int","70","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mMiniKeyboardOffsetX","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mMiniKeyboardOffsetY","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mKeyboardActionListener","false","false","true","false","false","OnKeyboardActionListener","null","[]","Optional[/**
 * Listener for {@link OnKeyboardActionListener}.
 */
]","\android\inputmethodservice\KeyboardView.java"
"MAX_NEARBY_KEYS","false","false","true","true","false","int","12","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mPadding","false","false","true","false","false","Rect","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mKeyIndices","false","false","true","false","false","int","new int[12]","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mDirtyRect","false","false","true","false","false","Rect","new Rect()","[]","Optional[/**
 * The dirty region in the keyboard bitmap
 */
]","\android\inputmethodservice\KeyboardView.java"
"mDownKey","false","false","true","false","false","int","NOT_A_KEY","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"KEY_DELETE","false","false","true","true","true","int","{ Keyboard.KEYCODE_DELETE }","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"DEBOUNCE_TIME","false","false","true","true","true","int","70","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mPopupPreviewX","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mPopupPreviewY","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mPopupY","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mPopupX","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mKeyboardChanged","false","false","true","false","false","boolean","null","[]","Optional[/**
 * Notes if the keyboard just changed, so that we could possibly reallocate the mBuffer.
 */
]","\android\inputmethodservice\KeyboardView.java"
"mMiniKeyboardCache","false","false","true","false","false","Map<Key,View>","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"MSG_REPEAT","false","false","true","true","true","int","3","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mOldEventTime","false","false","true","false","false","long","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"DELAY_BEFORE_PREVIEW","false","false","true","true","true","int","0","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mStartX","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mCurrentKey","false","false","true","false","false","int","NOT_A_KEY","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mDrawPending","false","false","true","false","false","boolean","null","[]","Optional[/**
 * Whether the keyboard bitmap needs to be redrawn before it's blitted. *
 */
]","\android\inputmethodservice\KeyboardView.java"
"mStartY","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mPreviewPopup","false","false","true","false","false","PopupWindow","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mDisambiguateSwipe","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mKeyTextSize","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mPopupParent","false","false","true","false","false","View","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mGestureDetector","false","false","true","false","false","GestureDetector","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mPaint","false","false","true","false","false","Paint","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mShowPreview","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mLastSentIndex","false","false","true","false","false","int","null","[]","Optional[// For multi-tap
]","\android\inputmethodservice\KeyboardView.java"
"mHandler","false","false","false","false","false","Handler","new Handler() {

    @Override
    public void handleMessage(Message msg) {
        switch(msg.what) {
            case MSG_SHOW_PREVIEW:
                showKey(msg.arg1);
                break;
            case MSG_REMOVE_PREVIEW:
                mPreviewText.setVisibility(INVISIBLE);
                break;
            case MSG_REPEAT:
                if (repeatKey()) {
                    Message repeat = Message.obtain(this, MSG_REPEAT);
                    sendMessageDelayed(repeat, REPEAT_INTERVAL);
                }
                break;
            case MSG_LONGPRESS:
                openPopupIfRequired((MotionEvent) msg.obj);
                break;
        }
    }
}","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mPreviewText","false","false","true","false","false","TextView","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mUsedVelocity","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mClipRegion","false","false","true","false","false","Rect","new Rect(0, 0, 0, 0)","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mPopupLayout","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mInvalidatedKey","false","false","true","false","false","Key","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mSwipeTracker","false","false","true","false","false","SwipeTracker","new SwipeTracker()","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"LONG_PRESSABLE_STATE_SET","false","false","true","true","true","int","{ R.attr.state_long_pressable }","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mMiniKeyboardContainer","false","false","true","false","false","View","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mWindowY","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mCanvas","false","false","true","false","false","Canvas","null","[]","Optional[/**
 * The canvas for the above mutable keyboard bitmap
 */
]","\android\inputmethodservice\KeyboardView.java"
"mAbortKey","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mShowTouchPoints","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mVerticalCorrection","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"MSG_SHOW_PREVIEW","false","false","true","true","true","int","1","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mKeyBackground","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mMiniKeyboard","false","false","true","false","false","KeyboardView","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"REPEAT_INTERVAL","false","false","true","true","true","int","50","[]","Optional[// ~20 keys per second
]","\android\inputmethodservice\KeyboardView.java"
"mLastKey","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mTapCount","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\KeyboardView.java"
"mBottom","false","true","false","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""layout"")]","Optional[/**
 * The distance in pixels from the top edge of this view's parent
 * to the bottom edge of this view.
 * {@hide}
 */
]","\android\view\View.java"
"mUserPaddingRight","false","false","false","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""padding"")]","Optional[/**
 * Cache the paddingRight set by the user to append to the scrollbar's size.
 */
]","\android\view\View.java"
"OVER_SCROLL_NEVER","true","false","false","true","true","int","2","[]","Optional[/**
 * Never allow a user to over-scroll this view.
 *
 * @see #getOverScrollMode()
 * @see #setOverScrollMode(int)
 */
]","\android\view\View.java"
"paint","true","false","false","false","true","Paint","null","[]","Optional.empty","\android\view\View.java"
"mOnLongClickListener","false","true","false","false","false","OnLongClickListener","null","[]","Optional[/**
 * Listener used to dispatch long click events.
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\view\View.java"
"mPrivateFlags","false","false","false","false","false","int","null","[@ViewDebug.ExportedProperty(flagMapping = { @ViewDebug.FlagToString(mask = FORCE_LAYOUT, equals = FORCE_LAYOUT, name = ""FORCE_LAYOUT""), @ViewDebug.FlagToString(mask = LAYOUT_REQUIRED, equals = LAYOUT_REQUIRED, name = ""LAYOUT_REQUIRED""), @ViewDebug.FlagToString(mask = DRAWING_CACHE_VALID, equals = DRAWING_CACHE_VALID, name = ""DRAWING_CACHE_INVALID"", outputIf = false), @ViewDebug.FlagToString(mask = DRAWN, equals = DRAWN, name = ""DRAWN"", outputIf = true), @ViewDebug.FlagToString(mask = DRAWN, equals = DRAWN, name = ""NOT_DRAWN"", outputIf = false), @ViewDebug.FlagToString(mask = DIRTY_MASK, equals = DIRTY_OPAQUE, name = ""DIRTY_OPAQUE""), @ViewDebug.FlagToString(mask = DIRTY_MASK, equals = DIRTY, name = ""DIRTY"") })]","Optional[/**
 * {@hide}
 */
]","\android\view\View.java"
"DUPLICATE_PARENT_STATE","false","false","false","true","true","int","0x00400000","[]","Optional[/**
 * <p>Indicates that this view gets its drawable states from its direct parent
 * and ignores its original internal states.</p>
 *
 * @hide
 */
]","\android\view\View.java"
"AWAKEN_SCROLL_BARS_ON_ATTACH","false","false","true","true","true","int","0x08000000","[]","Optional[/**
 * Indicates that we should awaken scroll bars once attached
 *
 * @hide
 */
]","\android\view\View.java"
"mTmpInvalRect","false","false","false","false","true","Rect","new Rect()","[]","Optional[/**
 * Temporary for use in computing invalidate rectangles while
 * calling up the hierarchy.
 */
]","\android\view\View.java"
"mMeasuredHeight","false","true","false","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""measurement"")]","Optional[/**
 * Height as measured during measure pass.
 * {@hide}
 */
]","\android\view\View.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<BaseSavedState>","new Parcelable.Creator<BaseSavedState>() {

    public BaseSavedState createFromParcel(Parcel in) {
        return new BaseSavedState(in);
    }

    public BaseSavedState[] newArray(int size) {
        return new BaseSavedState[size];
    }
}","[]","Optional.empty","\android\view\View.java"
"SCROLLBARS_NONE","false","false","false","true","true","int","0x00000000","[]","Optional[/**
 * <p>This view doesn't show scrollbars.</p>
 * {@hide}
 */
]","\android\view\View.java"
"state","true","false","false","false","false","int","OFF","[]","Optional[/**
 * The current state of the scrollbars: ON, OFF, or FADING
 */
]","\android\view\View.java"
"SCROLLBARS_OUTSIDE_OVERLAY","true","false","false","true","true","int","0x02000000","[]","Optional[/**
 * The scrollbar style to display the scrollbars at the edge of the view,
 * without increasing the padding. The scrollbars will be overlaid with
 * translucency.
 */
]","\android\view\View.java"
"mSurface","false","false","false","false","false","Surface","null","[]","Optional.empty","\android\view\View.java"
"mOverScrollMode","false","false","true","false","false","int","null","[]","Optional[/**
 * Controls the over-scroll mode for this view.
 * See {@link #overScrollBy(int, int, int, int, int, int, int, int, boolean)},
 * {@link #OVER_SCROLL_ALWAYS}, {@link #OVER_SCROLL_IF_CONTENT_SCROLLS},
 * and {@link #OVER_SCROLL_NEVER}.
 */
]","\android\view\View.java"
"NO_ID","true","false","false","true","true","int","-1","[]","Optional[/**
 * Used to mark a View that has no ID.
 */
]","\android\view\View.java"
"KEEP_SCREEN_ON","true","false","false","true","true","int","0x04000000","[]","Optional[/**
 * View flag indicating that the screen should remain on while the
 * window containing this view is visible to the user.  This effectively
 * takes care of automatically setting the WindowManager's
 * {@link WindowManager.LayoutParams#FLAG_KEEP_SCREEN_ON}.
 */
]","\android\view\View.java"
"OVER_SCROLL_ALWAYS","true","false","false","true","true","int","0","[]","Optional[/**
 * Always allow a user to over-scroll this view, provided it is a
 * view that can scroll.
 *
 * @see #getOverScrollMode()
 * @see #setOverScrollMode(int)
 */
]","\android\view\View.java"
"mLeft","false","true","false","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""layout"")]","Optional[/**
 * The distance in pixels from the left edge of this view's parent
 * to the left edge of this view.
 * {@hide}
 */
]","\android\view\View.java"
"PRESSED_MIDDLE_STATE_SET","false","true","false","true","true","int","{ R.attr.state_middle, R.attr.state_pressed }","[]","Optional[/**
 * Used by views that contain lists of items. This state indicates that
 * the view is pressed and showing the middle item.
 * @hide
 */
]","\android\view\View.java"
"left","false","false","false","false","false","int","null","[]","Optional.empty","\android\view\View.java"
"mInvalidateChildLocation","false","false","false","false","true","int","new int[2]","[]","Optional[/**
 * Global to the view hierarchy used as a temporary for dealing with
 * x/y points in the ViewGroup.invalidateChild implementation.
 */
]","\android\view\View.java"
"FOCUSED_STATE_SET","false","true","false","true","true","int","{ R.attr.state_focused }","[]","Optional[/**
 * Indicates the view is focused. States are used with
 * {@link android.graphics.drawable.Drawable} to change the drawing of the
 * view depending on its state.
 *
 * @see android.graphics.drawable.Drawable
 * @see #getDrawableState()
 */
]","\android\view\View.java"
"FORCE_LAYOUT","false","false","false","true","true","int","0x00001000","[]","Optional[/**
 * {@hide}
 */
]","\android\view\View.java"
"FILTER_TOUCHES_WHEN_OBSCURED","false","false","false","true","true","int","0x00000400","[]","Optional[/**
 * Indicates that the view should filter touches when its window is obscured.
 * Refer to the class comments for more information about this security feature.
 * {@hide}
 */
]","\android\view\View.java"
"mCurrentAnimation","false","true","false","false","false","Animation","null","[]","Optional[/**
 * The animation currently associated with this view.
 * @hide
 */
]","\android\view\View.java"
"mBackgroundResource","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\View.java"
"CLICKABLE","false","false","false","true","true","int","0x00004000","[]","Optional[/**
 * <p>Indicates this view can be clicked. When clickable, a View reacts
 * to clicks by notifying the OnClickListener.<p>
 * {@hide}
 */
]","\android\view\View.java"
"mPaddingTop","false","true","false","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""padding"")]","Optional[/**
 * The top padding in pixels, that is the distance in pixels between the
 * top edge of this view and the top edge of its content.
 * {@hide}
 */
]","\android\view\View.java"
"ENABLED_SELECTED_STATE_SET","false","true","false","true","true","int","stateSetUnion(ENABLED_STATE_SET, SELECTED_STATE_SET)","[]","Optional[/**
 * Indicates the view is enabled and selected.
 *
 * @see #ENABLED_STATE_SET
 * @see #SELECTED_STATE_SET
 */
]","\android\view\View.java"
"mID","false","false","false","false","false","int","NO_ID","[@ViewDebug.ExportedProperty(resolveId = true)]","Optional[/**
 * The view's identifier.
 * {@hide}
 *
 * @see #setId(int)
 * @see #getId()
 */
]","\android\view\View.java"
"FOCUS_UP","true","false","false","true","true","int","0x00000021","[]","Optional[/**
 * Use with {@link #focusSearch}. Move focus up.
 */
]","\android\view\View.java"
"PRESSED_ENABLED_FOCUSED_STATE_SET","false","true","false","true","true","int","stateSetUnion(PRESSED_ENABLED_STATE_SET, FOCUSED_STATE_SET)","[]","Optional[/**
 * Indicates the view is pressed, enabled and focused.
 *
 * @see #PRESSED_STATE_SET
 * @see #ENABLED_STATE_SET
 * @see #FOCUSED_STATE_SET
 */
]","\android\view\View.java"
"scrollBarSize","true","false","false","false","false","int","null","[]","Optional.empty","\android\view\View.java"
"matrix","true","false","false","false","true","Matrix","null","[]","Optional.empty","\android\view\View.java"
"mContext","false","true","false","false","false","Context","null","[]","Optional[/**
 * The application environment this view lives in.
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\view\View.java"
"DIRTY","false","false","false","true","true","int","0x00200000","[]","Optional[/**
 * View flag indicating whether this view was invalidated (fully or partially.)
 *
 * @hide
 */
]","\android\view\View.java"
"DRAWING_CACHE_QUALITY_AUTO","true","false","false","true","true","int","0x00000000","[]","Optional[/**
 * <p>Enables automatic quality mode for the drawing cache.</p>
 */
]","\android\view\View.java"
"ENABLED_FOCUSED_STATE_SET","false","true","false","true","true","int","stateSetUnion(ENABLED_STATE_SET, FOCUSED_STATE_SET)","[]","Optional[/**
 * Indicates the view is enabled and has the focus.
 *
 * @see #ENABLED_STATE_SET
 * @see #FOCUSED_STATE_SET
 */
]","\android\view\View.java"
"mKeepScreenOn","false","false","false","false","false","boolean","null","[]","Optional[/**
 * Set during a traveral if any views want to keep the screen on.
 */
]","\android\view\View.java"
"FOCUSABLES_ALL","true","false","false","true","true","int","0x00000000","[]","Optional[/**
 * View flag indicating whether {@link #addFocusables(ArrayList, int, int)}
 * should add all focusable Views regardless if they are focusable in touch mode.
 */
]","\android\view\View.java"
"mDrawingCacheBackgroundColor","false","false","true","false","false","int","0","[]","Optional[/**
 * Solid color to use as a background when creating the drawing cache. Enables
 * the cache to use 16 bit bitmaps instead of 32 bit.
 */
]","\android\view\View.java"
"mTransparentLocation","false","false","false","false","true","int","new int[2]","[]","Optional[/**
 * Global to the view hierarchy used as a temporary for dealing with
 * x/y points in the transparent region computations.
 */
]","\android\view\View.java"
"DRAWING_CACHE_QUALITY_HIGH","true","false","false","true","true","int","0x00100000","[]","Optional[/**
 * <p>Enables high quality mode for the drawing cache.</p>
 */
]","\android\view\View.java"
"ENABLED_MASK","false","false","false","true","true","int","0x00000020","[]","Optional[/**
 * Mask for use with setFlags indicating bits used for indicating whether
 * this view is enabled
 * {@hide}
 */
]","\android\view\View.java"
"WANTS_FOCUS","false","false","false","true","true","int","0x00000001","[]","Optional[/**
 * {@hide}
 */
]","\android\view\View.java"
"fadeStartTime","true","false","false","false","false","long","null","[]","Optional[/**
 * When fading should start. This time moves into the future every time
 * a new scroll happens. Measured based on SystemClock.uptimeMillis()
 */
]","\android\view\View.java"
"ENABLED_STATE_SET","false","true","false","true","true","int","{ R.attr.state_enabled }","[]","Optional[/**
 * Indicates the view is enabled. States are used with
 * {@link android.graphics.drawable.Drawable} to change the drawing of the
 * view depending on its state.
 *
 * @see android.graphics.drawable.Drawable
 * @see #getDrawableState()
 */
]","\android\view\View.java"
"mOriginalWindowAttachCount","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\View.java"
"right","false","false","false","false","false","int","null","[]","Optional.empty","\android\view\View.java"
"DRAWN","false","false","false","true","true","int","0x00000020","[]","Optional[/**
 * {@hide}
 */
]","\android\view\View.java"
"sTagsLock","false","false","true","true","true","Object","new Object()","[]","Optional[/**
 * Lock used to access sTags.
 */
]","\android\view\View.java"
"UNSPECIFIED","true","false","false","true","true","int","0 << MODE_SHIFT","[]","Optional[/**
 * Measure specification mode: The parent has not imposed any constraint
 * on the child. It can be whatever size it wants.
 */
]","\android\view\View.java"
"mPendingCheckForTap","false","false","true","false","false","CheckForTap","null","[]","Optional.empty","\android\view\View.java"
"FIRST_STATE_SET","false","true","false","true","true","int","{ R.attr.state_first }","[]","Optional[/**
 * Used by views that contain lists of items. This state indicates that
 * the view is showing the first item.
 * @hide
 */
]","\android\view\View.java"
"mContentDescription","false","false","true","false","false","CharSequence","null","[]","Optional[/**
 * Briefly describes the view and is primarily used for accessibility support.
 */
]","\android\view\View.java"
"mUnsetPressedState","false","false","true","false","false","UnsetPressedState","null","[]","Optional.empty","\android\view\View.java"
"SELECTED_WINDOW_FOCUSED_STATE_SET","false","true","false","true","true","int","stateSetUnion(SELECTED_STATE_SET, WINDOW_FOCUSED_STATE_SET)","[]","Optional[/**
 * Indicates the view is selected and that its window has the focus.
 *
 * @see #SELECTED_STATE_SET
 * @see #WINDOW_FOCUSED_STATE_SET
 */
]","\android\view\View.java"
"PREPRESSED","false","false","true","true","true","int","0x02000000","[]","Optional[/**
 * Indicates a prepressed state;
 * the short time between ACTION_DOWN and recognizing
 * a 'real' press. Prepressed is used to recognize quick taps
 * even when they are shorter than ViewConfiguration.getTapTimeout().
 *
 * @hide
 */
]","\android\view\View.java"
"HAS_BOUNDS","false","false","false","true","true","int","0x00000010","[]","Optional[/**
 * {@hide}
 */
]","\android\view\View.java"
"mUnscaledDrawingCache","false","false","true","false","false","SoftReference<Bitmap>","null","[]","Optional.empty","\android\view\View.java"
"PRESSED_ENABLED_SELECTED_STATE_SET","false","true","false","true","true","int","stateSetUnion(PRESSED_ENABLED_STATE_SET, SELECTED_STATE_SET)","[]","Optional[/**
 * Indicates the view is pressed, enabled and selected.
 *
 * @see #PRESSED_STATE_SET
 * @see #ENABLED_STATE_SET
 * @see #SELECTED_STATE_SET
 */
]","\android\view\View.java"
"FADING_EDGE_HORIZONTAL","false","false","false","true","true","int","0x00001000","[]","Optional[/**
 * <p>This view shows horizontal fading edges.</p>
 * {@hide}
 */
]","\android\view\View.java"
"DRAW_ANIMATION","false","false","false","true","true","int","0x00000040","[]","Optional[/**
 * When this flag is set, this view is running an animation on behalf of its
 * children and should therefore not cancel invalidate requests, even if they
 * lie outside of this view's bounds.
 *
 * {@hide}
 */
]","\android\view\View.java"
"mWindowVisibility","false","false","false","false","false","int","null","[]","Optional[/**
 * The current visibility of the window.
 */
]","\android\view\View.java"
"INVALIDATE_MSG","false","false","false","true","true","int","0x1","[]","Optional[/**
 * Identifier for messages requesting the view to be invalidated.
 * Such messages should be sent to {@link #mHandler}.
 */
]","\android\view\View.java"
"mOnCreateContextMenuListener","false","true","false","false","false","OnCreateContextMenuListener","null","[]","Optional[/**
 * Listener used to build the context menu.
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\view\View.java"
"fadeScrollBars","true","false","false","false","false","boolean","null","[]","Optional.empty","\android\view\View.java"
"mKeyDispatchState","false","false","false","false","true","KeyEvent.DispatcherState","new KeyEvent.DispatcherState()","[]","Optional.empty","\android\view\View.java"
"mPendingCheckForLongPress","false","false","true","false","false","CheckForLongPress","null","[]","Optional.empty","\android\view\View.java"
"mWindowTop","false","false","false","false","false","int","null","[]","Optional[/**
 * Top position of this view's window
 */
]","\android\view\View.java"
"ONLY_DRAWS_BACKGROUND","false","false","false","true","true","int","0x00000100","[]","Optional[/**
 * {@hide}
 */
]","\android\view\View.java"
"mNextFocusLeftId","false","false","true","false","false","int","View.NO_ID","[]","Optional[/**
 * When this view has focus and the next focus is {@link #FOCUS_LEFT},
 * the user may specify which view to go to next.
 */
]","\android\view\View.java"
"mMeasuredWidth","false","true","false","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""measurement"")]","Optional[/**
 * Width as measured during measure pass.
 * {@hide}
 */
]","\android\view\View.java"
"IS_ROOT_NAMESPACE","false","false","false","true","true","int","0x00000008","[]","Optional[/**
 * {@hide}
 */
]","\android\view\View.java"
"SKIP_DRAW","false","false","false","true","true","int","0x00000080","[]","Optional[/**
 * {@hide}
 */
]","\android\view\View.java"
"OPAQUE_BACKGROUND","false","false","false","true","true","int","0x00800000","[]","Optional[/**
 * Indicates whether the background is opaque.
 *
 * @hide
 */
]","\android\view\View.java"
"LONG_CLICKABLE","false","false","false","true","true","int","0x00200000","[]","Optional[/**
 * <p>
 * Indicates this view can be long clicked. When long clickable, a View
 * reacts to long clicks by notifying the OnLongClickListener or showing a
 * context menu.
 * </p>
 * {@hide}
 */
]","\android\view\View.java"
"mWindowToken","false","false","false","false","true","IBinder","null","[]","Optional.empty","\android\view\View.java"
"SAVE_STATE_CALLED","false","false","true","true","true","int","0x00020000","[]","Optional.empty","\android\view\View.java"
"SOUND_EFFECTS_ENABLED","true","false","false","true","true","int","0x08000000","[]","Optional[/**
 * View flag indicating whether this view should have sound effects enabled
 * for events such as clicking and touching.
 */
]","\android\view\View.java"
"DISABLED","false","false","false","true","true","int","0x00000020","[]","Optional[/**
 * This view is disabled. Intrepretation varies by subclass.
 * Use with ENABLED_MASK when calling setFlags.
 * {@hide}
 */
]","\android\view\View.java"
"DIRTY_MASK","false","false","false","true","true","int","0x00600000","[]","Optional[/**
 * Mask for {@link #DIRTY} and {@link #DIRTY_OPAQUE}.
 *
 * @hide
 */
]","\android\view\View.java"
"scrollBarDefaultDelayBeforeFade","true","false","false","false","false","int","null","[]","Optional.empty","\android\view\View.java"
"NOT_FOCUSABLE","false","false","true","true","true","int","0x00000000","[]","Optional[/**
 * This view does not want keystrokes. Use with TAKES_FOCUS_MASK when
 * calling setFlags.
 */
]","\android\view\View.java"
"WILL_NOT_DRAW","false","false","false","true","true","int","0x00000080","[]","Optional[/**
 * This view won't draw. {@link #onDraw} won't be called and further
 * optimizations
 * will be performed. It is okay to have this flag set and a background.
 * Use with DRAW_MASK when calling setFlags.
 * {@hide}
 */
]","\android\view\View.java"
"mResources","false","false","true","false","false","Resources","null","[]","Optional.empty","\android\view\View.java"
"scrollBarInterpolator","true","false","false","false","true","Interpolator","new Interpolator(1, 2)","[]","Optional.empty","\android\view\View.java"
"GONE","true","false","false","true","true","int","0x00000008","[]","Optional[/**
 * This view is invisible, and it doesn't take any space for layout
 * purposes. Use with {@link #setVisibility}.
 */
]","\android\view\View.java"
"mOldHeightMeasureSpec","false","false","false","false","false","int","Integer.MIN_VALUE","[]","Optional[/**
 * @hide
 */
]","\android\view\View.java"
"SCROLL_CONTAINER","false","false","false","true","true","int","0x00080000","[]","Optional[/**
 * Set by {@link #setScrollContainer(boolean)}.
 */
]","\android\view\View.java"
"mWindow","false","false","false","false","true","IWindow","null","[]","Optional.empty","\android\view\View.java"
"mFocusablesTempList","false","false","false","false","true","ArrayList<View>","new ArrayList<View>(24)","[]","Optional[/**
 * Temporary list for use in collecting focusable descendents of a view.
 */
]","\android\view\View.java"
"HAPTIC_FEEDBACK_ENABLED","true","false","false","true","true","int","0x10000000","[]","Optional[/**
 * View flag indicating whether this view should have haptic feedback
 * enabled for events such as long presses.
 */
]","\android\view\View.java"
"mIgnoreDirtyState","false","false","false","false","false","boolean","null","[]","Optional[/**
 * Indicates whether or not ignoring the DIRTY_MASK flags.
 */
]","\android\view\View.java"
"FOCUSED","false","false","false","true","true","int","0x00000002","[]","Optional[/**
 * {@hide}
 */
]","\android\view\View.java"
"SCROLL_CONTAINER_ADDED","false","false","false","true","true","int","0x00100000","[]","Optional[/**
 * Set by {@link #setScrollContainer(boolean)}.
 */
]","\android\view\View.java"
"VISIBLE","true","false","false","true","true","int","0x00000000","[]","Optional[/**
 * This view is visible.  Use with {@link #setVisibility}.
 */
]","\android\view\View.java"
"DRAWABLE_STATE_DIRTY","false","false","false","true","true","int","0x00000400","[]","Optional[/**
 * {@hide}
 */
]","\android\view\View.java"
"LAST_STATE_SET","false","true","false","true","true","int","{ R.attr.state_last }","[]","Optional[/**
 * Used by views that contain lists of items. This state indicates that
 * the view is showing the last item.
 * @hide
 */
]","\android\view\View.java"
"PRESSED_SELECTED_STATE_SET","false","true","false","true","true","int","stateSetUnion(PRESSED_STATE_SET, SELECTED_STATE_SET)","[]","Optional[/**
 * Indicates the view is pressed and selected.
 *
 * @see #PRESSED_STATE_SET
 * @see #SELECTED_STATE_SET
 */
]","\android\view\View.java"
"ENABLED_FOCUSED_SELECTED_STATE_SET","false","true","false","true","true","int","stateSetUnion(ENABLED_FOCUSED_STATE_SET, SELECTED_STATE_SET)","[]","Optional[/**
 * Indicates the view is enabled, focused and selected.
 *
 * @see #ENABLED_STATE_SET
 * @see #FOCUSED_STATE_SET
 * @see #SELECTED_STATE_SET
 */
]","\android\view\View.java"
"mMinWidth","false","false","true","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""measurement"")]","Optional[/**
 * The minimum width of the view. We'll try our best to have the width
 * of this view to at least this amount.
 */
]","\android\view\View.java"
"scrollBar","true","false","false","false","false","ScrollBarDrawable","null","[]","Optional.empty","\android\view\View.java"
"SCROLLBARS_VERTICAL","false","false","false","true","true","int","0x00000200","[]","Optional[/**
 * <p>This view shows vertical scrollbars.</p>
 * {@hide}
 */
]","\android\view\View.java"
"ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET","false","true","false","true","true","int","stateSetUnion(ENABLED_SELECTED_STATE_SET, WINDOW_FOCUSED_STATE_SET)","[]","Optional[/**
 * Indicates the view is enabled, selected and its window has the focus.
 *
 * @see #ENABLED_STATE_SET
 * @see #SELECTED_STATE_SET
 * @see #WINDOW_FOCUSED_STATE_SET
 */
]","\android\view\View.java"
"MIDDLE_STATE_SET","false","true","false","true","true","int","{ R.attr.state_middle }","[]","Optional[/**
 * Used by views that contain lists of items. This state indicates that
 * the view is showing the middle item.
 * @hide
 */
]","\android\view\View.java"
"DRAWING_CACHE_QUALITY_MASK","false","false","false","true","true","int","0x00180000","[]","Optional[/**
 * <p>Mask for use with setFlags indicating bits used for the cache
 * quality property.</p>
 * {@hide}
 */
]","\android\view\View.java"
"ENABLED_WINDOW_FOCUSED_STATE_SET","false","true","false","true","true","int","stateSetUnion(ENABLED_STATE_SET, WINDOW_FOCUSED_STATE_SET)","[]","Optional[/**
 * Indicates the view is enabled and that its window has focus.
 *
 * @see #ENABLED_STATE_SET
 * @see #WINDOW_FOCUSED_STATE_SET
 */
]","\android\view\View.java"
"mMinHeight","false","false","true","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""measurement"")]","Optional[/**
 * The minimum height of the view. We'll try our best to have the height
 * of this view to at least this amount.
 */
]","\android\view\View.java"
"POOL_LIMIT","false","false","true","true","true","int","10","[]","Optional.empty","\android\view\View.java"
"target","false","false","false","false","false","View","null","[]","Optional.empty","\android\view\View.java"
"mBackgroundSizeChanged","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\view\View.java"
"FOCUSED_SELECTED_STATE_SET","false","true","false","true","true","int","stateSetUnion(FOCUSED_STATE_SET, SELECTED_STATE_SET)","[]","Optional[/**
 * Indicates the view is focused and selected.
 *
 * @see #FOCUSED_STATE_SET
 * @see #SELECTED_STATE_SET
 */
]","\android\view\View.java"
"PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET","false","true","false","true","true","int","stateSetUnion(PRESSED_SELECTED_STATE_SET, WINDOW_FOCUSED_STATE_SET)","[]","Optional[/**
 * Indicates the view is pressed, selected and its window has the focus.
 *
 * @see #PRESSED_STATE_SET
 * @see #SELECTED_STATE_SET
 * @see #WINDOW_FOCUSED_STATE_SET
 */
]","\android\view\View.java"
"mDrawingTime","false","false","false","false","false","long","null","[]","Optional[/**
 * Indicates the time at which drawing started to occur.
 */
]","\android\view\View.java"
"FADING_EDGE_VERTICAL","false","false","false","true","true","int","0x00002000","[]","Optional[/**
 * <p>This view shows vertical fading edges.</p>
 * {@hide}
 */
]","\android\view\View.java"
"mHasWindowFocus","false","false","false","false","false","boolean","null","[]","Optional[/**
 * Indicates whether the view's window currently has the focus.
 */
]","\android\view\View.java"
"OPAQUE_MASK","false","false","false","true","true","int","0x01800000","[]","Optional[/**
 * Indicates whether the view is opaque.
 *
 * @hide
 */
]","\android\view\View.java"
"mSession","false","false","false","false","true","IWindowSession","null","[]","Optional.empty","\android\view\View.java"
"ALPHA_SET","false","false","false","true","true","int","0x00040000","[]","Optional[/**
 * Indicates that the View returned true when onSetAlpha() was called and that
 * the alpha must be restored.
 * {@hide}
 */
]","\android\view\View.java"
"PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET","false","true","false","true","true","int","stateSetUnion(PRESSED_FOCUSED_STATE_SET, WINDOW_FOCUSED_STATE_SET)","[]","Optional[/**
 * Indicates the view is pressed, focused and its window has the focus.
 *
 * @see #PRESSED_STATE_SET
 * @see #FOCUSED_STATE_SET
 * @see #WINDOW_FOCUSED_STATE_SET
 */
]","\android\view\View.java"
"PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET","false","true","false","true","true","int","stateSetUnion(PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET, WINDOW_FOCUSED_STATE_SET)","[]","Optional[/**
 * Indicates the view is pressed, enabled, focused, selected and its window
 * has the focus.
 *
 * @see #PRESSED_STATE_SET
 * @see #ENABLED_STATE_SET
 * @see #SELECTED_STATE_SET
 * @see #FOCUSED_STATE_SET
 * @see #WINDOW_FOCUSED_STATE_SET
 */
]","\android\view\View.java"
"FOCUS_FORWARD","true","false","false","true","true","int","0x00000002","[]","Optional[/**
 * Use with {@link #focusSearch}. Move focus to the next selectable
 * item.
 */
]","\android\view\View.java"
"mScrollY","false","true","false","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""scrolling"")]","Optional[/**
 * The offset, in pixels, by which the content of this view is scrolled
 * vertically.
 * {@hide}
 */
]","\android\view\View.java"
"mScrollX","false","true","false","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""scrolling"")]","Optional[/**
 * The offset, in pixels, by which the content of this view is scrolled
 * horizontally.
 * {@hide}
 */
]","\android\view\View.java"
"mApplicationScale","false","false","false","false","false","float","null","[]","Optional[/**
 * Scale factor used by the compatibility mode
 */
]","\android\view\View.java"
"mRight","false","true","false","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""layout"")]","Optional[/**
 * The distance in pixels from the left edge of this view's parent
 * to the right edge of this view.
 * {@hide}
 */
]","\android\view\View.java"
"FADING_EDGE_NONE","false","false","false","true","true","int","0x00000000","[]","Optional[/**
 * <p>This view doesn't show fading edges.</p>
 * {@hide}
 */
]","\android\view\View.java"
"FADING","true","false","false","true","true","int","2","[]","Optional[/**
 * Scrollbars are fading away
 */
]","\android\view\View.java"
"DIRTY_OPAQUE","false","false","false","true","true","int","0x00400000","[]","Optional[/**
 * View flag indicating whether this view was invalidated by an opaque
 * invalidate request.
 *
 * @hide
 */
]","\android\view\View.java"
"FOCUSABLE","false","false","true","true","true","int","0x00000001","[]","Optional[/**
 * This view wants keystrokes. Use with TAKES_FOCUS_MASK when calling
 * setFlags.
 */
]","\android\view\View.java"
"FOCUSED_WINDOW_FOCUSED_STATE_SET","false","true","false","true","true","int","stateSetUnion(FOCUSED_STATE_SET, WINDOW_FOCUSED_STATE_SET)","[]","Optional[/**
 * Indicates the view has the focus and that its window has the focus.
 *
 * @see #FOCUSED_STATE_SET
 * @see #WINDOW_FOCUSED_STATE_SET
 */
]","\android\view\View.java"
"PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET","false","true","false","true","true","int","stateSetUnion(PRESSED_ENABLED_FOCUSED_STATE_SET, SELECTED_STATE_SET)","[]","Optional[/**
 * Indicates the view is pressed, enabled, focused and selected.
 *
 * @see #PRESSED_STATE_SET
 * @see #ENABLED_STATE_SET
 * @see #SELECTED_STATE_SET
 * @see #FOCUSED_STATE_SET
 */
]","\android\view\View.java"
"AT_MOST","true","false","false","true","true","int","2 << MODE_SHIFT","[]","Optional[/**
 * Measure specification mode: The child can be as large as it wants up
 * to the specified size.
 */
]","\android\view\View.java"
"DRAWING_CACHE_VALID","false","false","false","true","true","int","0x00008000","[]","Optional[/**
 * {@hide}
 */
]","\android\view\View.java"
"MODE_SHIFT","false","false","true","true","true","int","30","[]","Optional.empty","\android\view\View.java"
"mNext","false","false","true","false","false","InvalidateInfo","null","[]","Optional.empty","\android\view\View.java"
"PRESSED_FOCUSED_STATE_SET","false","true","false","true","true","int","stateSetUnion(PRESSED_STATE_SET, FOCUSED_STATE_SET)","[]","Optional[/**
 * Indicates the view is pressed and focused.
 *
 * @see #PRESSED_STATE_SET
 * @see #FOCUSED_STATE_SET
 */
]","\android\view\View.java"
"mTreeObserver","false","false","false","false","true","ViewTreeObserver","new ViewTreeObserver()","[]","Optional[/**
 * The view tree observer used to dispatch global events like
 * layout, pre-draw, touch mode change, etc.
 */
]","\android\view\View.java"
"SELECTED","false","false","false","true","true","int","0x00000004","[]","Optional[/**
 * {@hide}
 */
]","\android\view\View.java"
"INVISIBLE","true","false","false","true","true","int","0x00000004","[]","Optional[/**
 * This view is invisible, but it still takes up space for layout purposes.
 * Use with {@link #setVisibility}.
 */
]","\android\view\View.java"
"mPaddingBottom","false","true","false","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""padding"")]","Optional[/**
 * The bottom padding in pixels, that is the distance in pixels between the
 * bottom edge of this view and the bottom edge of its content.
 * {@hide}
 */
]","\android\view\View.java"
"DRAWING_CACHE_QUALITY_LOW","true","false","false","true","true","int","0x00080000","[]","Optional[/**
 * <p>Enables low quality mode for the drawing cache.</p>
 */
]","\android\view\View.java"
"mHasPerformedLongPress","false","false","true","false","false","boolean","null","[]","Optional[/**
 * Whether the long press's action has been invoked.  The tap's action is invoked on the
 * up event while a long press is invoked as soon as the long press duration is reached, so
 * a long press could be performed before the tap is checked, in which case the tap's action
 * should not be invoked.
 */
]","\android\view\View.java"
"mPerformClick","false","false","true","false","false","PerformClick","null","[]","Optional.empty","\android\view\View.java"
"mRootView","false","false","false","false","false","View","null","[]","Optional[/**
 * The top view of the hierarchy.
 */
]","\android\view\View.java"
"WINDOW_FOCUSED_STATE_SET","false","true","false","true","true","int","{ R.attr.state_window_focused }","[]","Optional[/**
 * Indicates the view's window has focus. States are used with
 * {@link android.graphics.drawable.Drawable} to change the drawing of the
 * view depending on its state.
 *
 * @see android.graphics.drawable.Drawable
 * @see #getDrawableState()
 */
]","\android\view\View.java"
"mViewScrollChanged","false","false","false","false","false","boolean","null","[]","Optional[/**
 * Set to true if a view has been scrolled.
 */
]","\android\view\View.java"
"mOnFocusChangeListener","false","true","false","false","false","OnFocusChangeListener","null","[]","Optional[/**
 * Listener used to dispatch focus change events.
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\view\View.java"
"EXACTLY","true","false","false","true","true","int","1 << MODE_SHIFT","[]","Optional[/**
 * Measure specification mode: The parent has determined an exact size
 * for the child. The child is going to be given those bounds regardless
 * of how big it wants to be.
 */
]","\android\view\View.java"
"SCROLLBARS_INSET_MASK","false","false","false","true","true","int","0x01000000","[]","Optional[/**
 * Mask to check if the scrollbar style is overlay or inset.
 * {@hide}
 */
]","\android\view\View.java"
"SCROLLBARS_OUTSIDE_MASK","false","false","false","true","true","int","0x02000000","[]","Optional[/**
 * Mask to check if the scrollbar style is inside or outside.
 * {@hide}
 */
]","\android\view\View.java"
"PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET","false","true","false","true","true","int","stateSetUnion(PRESSED_ENABLED_SELECTED_STATE_SET, WINDOW_FOCUSED_STATE_SET)","[]","Optional[/**
 * Indicates the view is pressed, enabled, selected and its window has the
 * focus.
 *
 * @see #PRESSED_STATE_SET
 * @see #ENABLED_STATE_SET
 * @see #SELECTED_STATE_SET
 * @see #WINDOW_FOCUSED_STATE_SET
 */
]","\android\view\View.java"
"sThreadLocal","false","false","false","true","true","ThreadLocal<Rect>","new ThreadLocal<Rect>()","[]","Optional[/**
 * Temporary Rect currently for use in setBackground().  This will probably
 * be extended in the future to hold our own class with more than just
 * a Rect. :)
 */
]","\android\view\View.java"
"MEASURED_DIMENSION_SET","false","false","false","true","true","int","0x00000800","[]","Optional[/**
 * {@hide}
 */
]","\android\view\View.java"
"OFF","true","false","false","true","true","int","0","[]","Optional[/**
 * Scrollbars are not visible
 */
]","\android\view\View.java"
"FADING_EDGE_MASK","false","false","false","true","true","int","0x00003000","[]","Optional[/**
 * <p>Mask for use with setFlags indicating bits used for indicating which
 * fading edges are enabled.</p>
 * {@hide}
 */
]","\android\view\View.java"
"mDrawingCache","false","false","true","false","false","SoftReference<Bitmap>","null","[]","Optional.empty","\android\view\View.java"
"sTags","false","false","true","true","false","WeakHashMap<View,SparseArray<Object>>","null","[]","Optional[/**
 * Map used to store views' tags.
 */
]","\android\view\View.java"
"ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET","false","true","false","true","true","int","stateSetUnion(ENABLED_FOCUSED_STATE_SET, WINDOW_FOCUSED_STATE_SET)","[]","Optional[/**
 * Indicates the view is enabled, focused and its window has the focus.
 *
 * @see #ENABLED_STATE_SET
 * @see #FOCUSED_STATE_SET
 * @see #WINDOW_FOCUSED_STATE_SET
 */
]","\android\view\View.java"
"EMPTY_STATE_SET","false","true","false","true","true","int","{}","[]","Optional[/**
 * Indicates the view has no states set. States are used with
 * {@link android.graphics.drawable.Drawable} to change the drawing of the
 * view depending on its state.
 *
 * @see android.graphics.drawable.Drawable
 * @see #getDrawableState()
 */
]","\android\view\View.java"
"top","false","false","false","false","false","int","null","[]","Optional.empty","\android\view\View.java"
"sPool","false","false","true","true","true","Pool<InvalidateInfo>","Pools.synchronizedPool(Pools.finitePool(new PoolableManager<InvalidateInfo>() {

    public InvalidateInfo newInstance() {
        return new InvalidateInfo();
    }

    public void onAcquired(InvalidateInfo element) {
    }

    public void onReleased(InvalidateInfo element) {
    }
}, POOL_LIMIT))","[]","Optional.empty","\android\view\View.java"
"PRESSED_LAST_STATE_SET","false","true","false","true","true","int","{ R.attr.state_last, R.attr.state_pressed }","[]","Optional[/**
 * Used by views that contain lists of items. This state indicates that
 * the view is pressed and showing the last item.
 * @hide
 */
]","\android\view\View.java"
"mWindowLeft","false","false","false","false","false","int","null","[]","Optional[/**
 * Left position of this view's window
 */
]","\android\view\View.java"
"mContentInsets","false","false","false","false","true","Rect","new Rect()","[]","Optional[/**
 * For windows that are full-screen but using insets to layout inside
 * of the screen decorations, these are the current insets for the
 * content of the window.
 */
]","\android\view\View.java"
"FITS_SYSTEM_WINDOWS","false","false","true","true","true","int","0x00000002","[]","Optional[/**
 * This view will adjust its padding to fit sytem windows (e.g. status bar)
 */
]","\android\view\View.java"
"FOCUS_DOWN","true","false","false","true","true","int","0x00000082","[]","Optional[/**
 * Use with {@link #focusSearch}. Move focus down.
 */
]","\android\view\View.java"
"SCROLLBARS_INSIDE_OVERLAY","true","false","false","true","true","int","0","[]","Optional[/**
 * The scrollbar style to display the scrollbars inside the content area,
 * without increasing the padding. The scrollbars will be overlaid with
 * translucency on the view's content.
 */
]","\android\view\View.java"
"mOldWidthMeasureSpec","false","false","false","false","false","int","Integer.MIN_VALUE","[]","Optional[/**
 * @hide
 */
]","\android\view\View.java"
"FOCUS_BACKWARD","true","false","false","true","true","int","0x00000001","[]","Optional[/**
 * Use with {@link #focusSearch}. Move focus to the previous selectable
 * item.
 */
]","\android\view\View.java"
"MODE_MASK","false","false","true","true","true","int","0x3 << MODE_SHIFT","[]","Optional.empty","\android\view\View.java"
"mParent","false","true","false","false","false","ViewParent","null","[]","Optional[/**
 * The parent this view is attached to.
 * {@hide}
 *
 * @see #getParent()
 */
]","\android\view\View.java"
"LAYOUT_REQUIRED","false","false","false","true","true","int","0x00002000","[]","Optional[/**
 * {@hide}
 */
]","\android\view\View.java"
"CANCEL_NEXT_UP_EVENT","false","false","false","true","true","int","0x04000000","[]","Optional[/**
 * Indicates whether the view is temporarily detached.
 *
 * @hide
 */
]","\android\view\View.java"
"mViewFlags","false","false","false","false","false","int","null","[@ViewDebug.ExportedProperty]","Optional[/**
 * The view flags hold various views states.
 * {@hide}
 */
]","\android\view\View.java"
"ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET","false","true","false","true","true","int","stateSetUnion(ENABLED_FOCUSED_SELECTED_STATE_SET, WINDOW_FOCUSED_STATE_SET)","[]","Optional[/**
 * Indicates the view is enabled, focused, selected and its window
 * has the focus.
 *
 * @see #ENABLED_STATE_SET
 * @see #FOCUSED_STATE_SET
 * @see #SELECTED_STATE_SET
 * @see #WINDOW_FOCUSED_STATE_SET
 */
]","\android\view\View.java"
"PRESSED_ENABLED_STATE_SET","false","true","false","true","true","int","stateSetUnion(PRESSED_STATE_SET, ENABLED_STATE_SET)","[]","Optional[/**
 * Indicates the view is pressed and enabled.
 *
 * @see #PRESSED_STATE_SET
 * @see #ENABLED_STATE_SET
 */
]","\android\view\View.java"
"PRESSED_STATE_SET","false","true","false","true","true","int","{ R.attr.state_pressed }","[]","Optional[/**
 * Indicates the view is pressed. States are used with
 * {@link android.graphics.drawable.Drawable} to change the drawing of the
 * view depending on its state.
 *
 * @see android.graphics.drawable.Drawable
 * @see #getDrawableState()
 * @hide
 */
]","\android\view\View.java"
"mHandler","false","false","false","false","true","Handler","null","[]","Optional[/**
 * A Handler supplied by a view's {@link android.view.ViewRoot}. This
 * handler can be used to pump events in the UI events queue.
 */
]","\android\view\View.java"
"mNextFocusRightId","false","false","true","false","false","int","View.NO_ID","[]","Optional[/**
 * When this view has focus and the next focus is {@link #FOCUS_RIGHT},
 * the user may specify which view to go to next.
 */
]","\android\view\View.java"
"SINGLE_STATE_SET","false","true","false","true","true","int","{ R.attr.state_single }","[]","Optional[/**
 * Used by views that contain lists of items. This state indicates that
 * the view is showing only one item.
 * @hide
 */
]","\android\view\View.java"
"mPanelParentWindowToken","false","false","false","false","false","IBinder","null","[]","Optional.empty","\android\view\View.java"
"PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET","false","true","false","true","true","int","stateSetUnion(PRESSED_FOCUSED_SELECTED_STATE_SET, WINDOW_FOCUSED_STATE_SET)","[]","Optional[/**
 * Indicates the view is pressed, focused, selected and its window has the focus.
 *
 * @see #PRESSED_STATE_SET
 * @see #FOCUSED_STATE_SET
 * @see #SELECTED_STATE_SET
 * @see #WINDOW_FOCUSED_STATE_SET
 */
]","\android\view\View.java"
"mUse32BitDrawingCache","false","false","false","false","false","boolean","null","[]","Optional[/**
 * Indicates whether views need to use 32-bit drawing caches
 */
]","\android\view\View.java"
"mFloatingTreeObserver","false","false","true","false","false","ViewTreeObserver","null","[]","Optional[/**
 * Special tree observer used when mAttachInfo is null.
 */
]","\android\view\View.java"
"fadingEdgeLength","true","false","false","false","false","int","null","[]","Optional.empty","\android\view\View.java"
"mLayoutParams","false","true","false","false","false","ViewGroup.LayoutParams","null","[]","Optional[/**
 * The layout parameters associated with this view and used by the parent
 * {@link android.view.ViewGroup} to determine how this view should be
 * laid out.
 * {@hide}
 */
]","\android\view\View.java"
"PRESSED_FIRST_STATE_SET","false","true","false","true","true","int","{ R.attr.state_first, R.attr.state_pressed }","[]","Optional[/**
 * Used by views that contain lists of items. This state indicates that
 * the view is pressed and showing the first item.
 * @hide
 */
]","\android\view\View.java"
"PRESSED_WINDOW_FOCUSED_STATE_SET","false","true","false","true","true","int","stateSetUnion(PRESSED_STATE_SET, WINDOW_FOCUSED_STATE_SET)","[]","Optional[/**
 * Indicates the view is pressed and its window has the focus.
 *
 * @see #PRESSED_STATE_SET
 * @see #WINDOW_FOCUSED_STATE_SET
 */
]","\android\view\View.java"
"mRootCallbacks","false","false","false","false","true","Callbacks","null","[]","Optional.empty","\android\view\View.java"
"DBG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\view\View.java"
"mTouchSlop","false","false","true","false","false","int","null","[]","Optional[/**
 * Cache the touch slop from the context that created the view.
 */
]","\android\view\View.java"
"PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET","false","true","false","true","true","int","stateSetUnion(PRESSED_ENABLED_STATE_SET, WINDOW_FOCUSED_STATE_SET)","[]","Optional[/**
 * Indicates the view is pressed, enabled and its window has the focus.
 *
 * @see #PRESSED_STATE_SET
 * @see #ENABLED_STATE_SET
 * @see #WINDOW_FOCUSED_STATE_SET
 */
]","\android\view\View.java"
"sInstanceCount","false","false","false","true","false","long","0","[]","Optional[// Used for debug only
]","\android\view\View.java"
"mGivenInternalInsets","false","false","false","false","true","ViewTreeObserver.InternalInsetsInfo","new ViewTreeObserver.InternalInsetsInfo()","[]","Optional[/**
 * The internal insets given by this window.  This value is
 * supplied by the client (through
 * {@link ViewTreeObserver.OnComputeInternalInsetsListener}) and will
 * be given to the window manager when changed to be used in laying
 * out windows behind it.
 */
]","\android\view\View.java"
"mTransparent","false","false","true","false","true","float","{ 0.0f }","[]","Optional.empty","\android\view\View.java"
"FOCUSABLE_IN_TOUCH_MODE","false","false","false","true","true","int","0x00040000","[]","Optional[/**
 * <p>Indicates this view can take / keep focus when int touch mode.</p>
 * {@hide}
 */
]","\android\view\View.java"
"DRAW_MASK","false","false","false","true","true","int","0x00000080","[]","Optional[/**
 * Mask for use with setFlags indicating bits used for indicating whether
 * this view is will draw
 * {@hide}
 */
]","\android\view\View.java"
"DRAWING_CACHE_QUALITY_FLAGS","false","false","true","true","true","int","{ DRAWING_CACHE_QUALITY_AUTO, DRAWING_CACHE_QUALITY_LOW, DRAWING_CACHE_QUALITY_HIGH }","[]","Optional.empty","\android\view\View.java"
"mVisibleInsets","false","false","false","false","true","Rect","new Rect()","[]","Optional[/**
 * For windows that are full-screen but using insets to layout inside
 * of the screen decorations, these are the current insets for the
 * actual visible parts of the window.
 */
]","\android\view\View.java"
"interpolatorValues","true","false","false","false","false","float","null","[]","Optional.empty","\android\view\View.java"
"SAVE_DISABLED","false","false","false","true","true","int","0x000010000","[]","Optional[/**
 * <p>Indicates that no icicle should be saved for this view.<p>
 * {@hide}
 */
]","\android\view\View.java"
"SAVE_DISABLED_MASK","false","false","false","true","true","int","0x000010000","[]","Optional[/**
 * <p>Mask for use with setFlags indicating bits used for the saveEnabled
 * property.</p>
 * {@hide}
 */
]","\android\view\View.java"
"PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET","false","true","false","true","true","int","stateSetUnion(PRESSED_ENABLED_FOCUSED_STATE_SET, WINDOW_FOCUSED_STATE_SET)","[]","Optional[/**
 * Indicates the view is pressed, enabled, focused and its window has the
 * focus.
 *
 * @see #PRESSED_STATE_SET
 * @see #ENABLED_STATE_SET
 * @see #FOCUSED_STATE_SET
 * @see #WINDOW_FOCUSED_STATE_SET
 */
]","\android\view\View.java"
"host","true","false","false","false","false","View","null","[]","Optional.empty","\android\view\View.java"
"mPaddingLeft","false","true","false","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""padding"")]","Optional[/**
 * The left padding in pixels, that is the distance in pixels between the
 * left edge of this view and the left edge of its content.
 * {@hide}
 */
]","\android\view\View.java"
"SELECTED_STATE_SET","false","true","false","true","true","int","{ R.attr.state_selected }","[]","Optional[/**
 * Indicates the view is selected. States are used with
 * {@link android.graphics.drawable.Drawable} to change the drawing of the
 * view depending on its state.
 *
 * @see android.graphics.drawable.Drawable
 * @see #getDrawableState()
 */
]","\android\view\View.java"
"mTop","false","true","false","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""layout"")]","Optional[/**
 * The distance in pixels from the top edge of this view's parent
 * to the top edge of this view.
 * {@hide}
 */
]","\android\view\View.java"
"mScrollCache","false","false","true","false","false","ScrollabilityCache","null","[]","Optional.empty","\android\view\View.java"
"mNextFocusUpId","false","false","true","false","false","int","View.NO_ID","[]","Optional[/**
 * When this view has focus and the next focus is {@link #FOCUS_UP},
 * the user may specify which view to go to next.
 */
]","\android\view\View.java"
"SCROLLBARS_HORIZONTAL","false","false","false","true","true","int","0x00000100","[]","Optional[/**
 * <p>This view shows horizontal scrollbars.</p>
 * {@hide}
 */
]","\android\view\View.java"
"mDrawableState","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\View.java"
"bottom","false","false","false","false","false","int","null","[]","Optional.empty","\android\view\View.java"
"VIEW_STATE_SETS","false","false","true","true","true","int","{ // 0 0 0 0 0
EMPTY_STATE_SET, // 0 0 0 0 1
WINDOW_FOCUSED_STATE_SET, // 0 0 0 1 0
SELECTED_STATE_SET, // 0 0 0 1 1
SELECTED_WINDOW_FOCUSED_STATE_SET, // 0 0 1 0 0
FOCUSED_STATE_SET, // 0 0 1 0 1
FOCUSED_WINDOW_FOCUSED_STATE_SET, // 0 0 1 1 0
FOCUSED_SELECTED_STATE_SET, // 0 0 1 1 1
FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET, // 0 1 0 0 0
ENABLED_STATE_SET, // 0 1 0 0 1
ENABLED_WINDOW_FOCUSED_STATE_SET, // 0 1 0 1 0
ENABLED_SELECTED_STATE_SET, // 0 1 0 1 1
ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET, // 0 1 1 0 0
ENABLED_FOCUSED_STATE_SET, // 0 1 1 0 1
ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET, // 0 1 1 1 0
ENABLED_FOCUSED_SELECTED_STATE_SET, // 0 1 1 1 1
ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET, // 1 0 0 0 0
PRESSED_STATE_SET, // 1 0 0 0 1
PRESSED_WINDOW_FOCUSED_STATE_SET, // 1 0 0 1 0
PRESSED_SELECTED_STATE_SET, // 1 0 0 1 1
PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET, // 1 0 1 0 0
PRESSED_FOCUSED_STATE_SET, // 1 0 1 0 1
PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET, // 1 0 1 1 0
PRESSED_FOCUSED_SELECTED_STATE_SET, // 1 0 1 1 1
PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET, // 1 1 0 0 0
PRESSED_ENABLED_STATE_SET, // 1 1 0 0 1
PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET, // 1 1 0 1 0
PRESSED_ENABLED_SELECTED_STATE_SET, // 1 1 0 1 1
PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET, // 1 1 1 0 0
PRESSED_ENABLED_FOCUSED_STATE_SET, // 1 1 1 0 1
PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET, // 1 1 1 1 0
PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET, // 1 1 1 1 1
PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET }","[]","Optional[/**
 * The order here is very important to {@link #getDrawableState()}
 */
]","\android\view\View.java"
"mUserPaddingBottom","false","false","false","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""padding"")]","Optional[/**
 * Cache the paddingBottom set by the user to append to the scrollbar's size.
 */
]","\android\view\View.java"
"mTouchDelegate","false","false","true","false","false","TouchDelegate","null","[]","Optional[/**
 * The delegate to handle touch events that are physically in this view
 * but should be handled by another view.
 */
]","\android\view\View.java"
"PRESSED_SINGLE_STATE_SET","false","true","false","true","true","int","{ R.attr.state_single, R.attr.state_pressed }","[]","Optional[/**
 * Used by views that contain lists of items. This state indicates that
 * the view is pressed and showing only one item.
 * @hide
 */
]","\android\view\View.java"
"mLastColor","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\View.java"
"mOnClickListener","false","true","false","false","false","OnClickListener","null","[]","Optional[/**
 * Listener used to dispatch click events.
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\view\View.java"
"mOnTouchListener","false","false","true","false","false","OnTouchListener","null","[]","Optional.empty","\android\view\View.java"
"VISIBILITY_MASK","false","false","false","true","true","int","0x0000000C","[]","Optional[/**
 * Mask for use with setFlags indicating bits used for visibility.
 * {@hide}
 */
]","\android\view\View.java"
"SCROLLBARS_INSIDE_INSET","true","false","false","true","true","int","0x01000000","[]","Optional[/**
 * The scrollbar style to display the scrollbars inside the padded area,
 * increasing the padding of the view. The scrollbars will not overlap the
 * content area of the view.
 */
]","\android\view\View.java"
"mInTouchMode","false","false","false","false","false","boolean","null","[]","Optional[/**
 * Indicates whether the view's window is currently in touch mode.
 */
]","\android\view\View.java"
"REQUEST_TRANSPARENT_REGIONS","false","false","false","true","true","int","0x00000200","[]","Optional[/**
 * {@hide}
 */
]","\android\view\View.java"
"mPaddingRight","false","true","false","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""padding"")]","Optional[/**
 * The right padding in pixels, that is the distance in pixels between the
 * right edge of this view and the right edge of its content.
 * {@hide}
 */
]","\android\view\View.java"
"FOCUS_LEFT","true","false","false","true","true","int","0x00000011","[]","Optional[/**
 * Use with {@link #focusSearch}. Move focus to the left.
 */
]","\android\view\View.java"
"mScrollContainers","false","false","false","false","true","ArrayList<View>","new ArrayList<View>()","[]","Optional[/**
 * All views in the window's hierarchy that serve as scroll containers,
 * used to determine if the window can be resized or must be panned
 * to adjust for a soft input area.
 */
]","\android\view\View.java"
"mOpaque","false","false","true","false","true","float","{ 255.0f }","[]","Optional.empty","\android\view\View.java"
"mWindowAttachCount","false","false","false","false","false","int","null","[]","Optional[/**
 * Count of how many windows this view has been attached to.
 */
]","\android\view\View.java"
"shader","true","false","false","false","false","Shader","null","[]","Optional.empty","\android\view\View.java"
"mCanvas","false","false","false","false","false","Canvas","null","[]","Optional[/**
 * A Canvas used by the view hierarchy to perform bitmap caching.
 */
]","\android\view\View.java"
"VISIBILITY_FLAGS","false","false","true","true","true","int","{ VISIBLE, INVISIBLE, GONE }","[]","Optional.empty","\android\view\View.java"
"WILL_NOT_CACHE_DRAWING","false","false","false","true","true","int","0x000020000","[]","Optional[/**
 * <p>Indicates that no drawing cache should ever be created for this view.<p>
 * {@hide}
 */
]","\android\view\View.java"
"scrollBarFadeDuration","true","false","false","false","false","int","null","[]","Optional.empty","\android\view\View.java"
"FOCUSABLE_MASK","false","false","true","true","true","int","0x00000001","[]","Optional[/**
 * Mask for use with setFlags indicating bits used for focus.
 */
]","\android\view\View.java"
"OVER_SCROLL_IF_CONTENT_SCROLLS","true","false","false","true","true","int","1","[]","Optional[/**
 * Allow a user to over-scroll this view only if the content is large
 * enough to meaningfully scroll, provided it is a view that can scroll.
 *
 * @see #getOverScrollMode()
 * @see #setOverScrollMode(int)
 */
]","\android\view\View.java"
"mViewVisibilityChanged","false","false","false","false","false","boolean","null","[]","Optional[/**
 * Set if the visibility of any views has changed.
 */
]","\android\view\View.java"
"FOCUSABLES_TOUCH_MODE","true","false","false","true","true","int","0x00000001","[]","Optional[/**
 * View flag indicating whether {@link #addFocusables(ArrayList, int, int)}
 * should add only Views focusable in touch mode.
 */
]","\android\view\View.java"
"mBGDrawable","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\view\View.java"
"PRESSED","false","false","true","true","true","int","0x00004000","[]","Optional.empty","\android\view\View.java"
"SCROLLBARS_STYLE_MASK","false","false","false","true","true","int","0x03000000","[]","Optional[/**
 * Mask for scrollbar style.
 * {@hide}
 */
]","\android\view\View.java"
"FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET","false","true","false","true","true","int","stateSetUnion(FOCUSED_SELECTED_STATE_SET, WINDOW_FOCUSED_STATE_SET)","[]","Optional[/**
 * Indicates the view is focused, selected and its window has the focus.
 *
 * @see #FOCUSED_STATE_SET
 * @see #SELECTED_STATE_SET
 * @see #WINDOW_FOCUSED_STATE_SET
 */
]","\android\view\View.java"
"DRAWING_CACHE_ENABLED","false","false","false","true","true","int","0x00008000","[]","Optional[/**
 * <p>Indicates this view is caching its drawing into a bitmap.</p>
 * {@hide}
 */
]","\android\view\View.java"
"mNextFocusDownId","false","false","true","false","false","int","View.NO_ID","[]","Optional[/**
 * When this view has focus and the next focus is {@link #FOCUS_DOWN},
 * the user may specify which view to go to next.
 */
]","\android\view\View.java"
"mTag","false","true","false","false","false","Object","null","[]","Optional[/**
 * The view's tag.
 * {@hide}
 *
 * @see #setTag(Object)
 * @see #getTag()
 */
]","\android\view\View.java"
"ON","true","false","false","true","true","int","1","[]","Optional[/**
 * Scrollbars are visible
 */
]","\android\view\View.java"
"SCROLLBARS_MASK","false","false","false","true","true","int","0x00000300","[]","Optional[/**
 * <p>Mask for use with setFlags indicating bits used for indicating which
 * scrollbars are enabled.</p>
 * {@hide}
 */
]","\android\view\View.java"
"OPAQUE_SCROLLBARS","false","false","false","true","true","int","0x01000000","[]","Optional[/**
 * Indicates whether the scrollbars are opaque.
 *
 * @hide
 */
]","\android\view\View.java"
"mRecomputeGlobalAttributes","false","false","false","false","false","boolean","null","[]","Optional[/**
 * Indicates that ViewRoot should trigger a global layout change
 * the next time it performs a traversal
 */
]","\android\view\View.java"
"SCROLLBARS_OUTSIDE_INSET","true","false","false","true","true","int","0x03000000","[]","Optional[/**
 * The scrollbar style to display the scrollbars at the edge of the view,
 * increasing the padding of the view. The scrollbars will only overlap the
 * background, if any.
 */
]","\android\view\View.java"
"ANIMATION_STARTED","false","false","false","true","true","int","0x00010000","[]","Optional[/**
 * Flag used to indicate that this view should be drawn once more (and only once
 * more) after its animation has completed.
 * {@hide}
 */
]","\android\view\View.java"
"FOCUS_RIGHT","true","false","false","true","true","int","0x00000042","[]","Optional[/**
 * Use with {@link #focusSearch}. Move focus to the right.
 */
]","\android\view\View.java"
"mScalingRequired","false","false","false","false","false","boolean","null","[]","Optional[/**
 * Indicates whether the application is in compatibility mode
 */
]","\android\view\View.java"
"PRESSED_FOCUSED_SELECTED_STATE_SET","false","true","false","true","true","int","stateSetUnion(PRESSED_FOCUSED_STATE_SET, SELECTED_STATE_SET)","[]","Optional[/**
 * Indicates the view is pressed, focused and selected.
 *
 * @see #PRESSED_STATE_SET
 * @see #SELECTED_STATE_SET
 * @see #FOCUSED_STATE_SET
 */
]","\android\view\View.java"
"mAttachInfo","false","false","false","false","false","AttachInfo","null","[]","Optional[/**
 * {@hide}
 */
]","\android\view\View.java"
"ENABLED","false","false","false","true","true","int","0x00000000","[]","Optional[/**
 * This view is enabled. Intrepretation varies by subclass.
 * Use with ENABLED_MASK when calling setFlags.
 * {@hide}
 */
]","\android\view\View.java"
"VIEW_LOG_TAG","false","true","false","true","true","String","""View""","[]","Optional[/**
 * The logging tag used by this class with android.util.Log.
 */
]","\android\view\View.java"
"mOnKeyListener","false","false","true","false","false","OnKeyListener","null","[]","Optional.empty","\android\view\View.java"
"INVALIDATE_RECT_MSG","false","false","false","true","true","int","0x2","[]","Optional[/**
 * Identifier for messages requesting the view to invalidate a region.
 * Such messages should be sent to {@link #mHandler}.
 */
]","\android\view\View.java"
"impl","false","false","true","false","false","LocalSocketImpl","null","[]","Optional.empty","\android\net\LocalSocket.java"
"implCreated","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\net\LocalSocket.java"
"localAddress","false","false","true","false","false","LocalSocketAddress","null","[]","Optional.empty","\android\net\LocalSocket.java"
"isBound","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\net\LocalSocket.java"
"isConnected","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\net\LocalSocket.java"
"mCalendar","false","false","true","false","false","Calendar","null","[]","Optional[// holds current month, year, helps compute display
]","\android\util\MonthDisplayHelper.java"
"mNumDaysInMonth","false","false","true","false","false","int","null","[]","Optional[// cached computed stuff that helps with display
]","\android\util\MonthDisplayHelper.java"
"mNumDaysInPrevMonth","false","false","true","false","false","int","null","[]","Optional.empty","\android\util\MonthDisplayHelper.java"
"mWeekStartDay","false","false","true","false","true","int","null","[]","Optional[// display pref
]","\android\util\MonthDisplayHelper.java"
"mOffset","false","false","true","false","false","int","null","[]","Optional.empty","\android\util\MonthDisplayHelper.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<SavedState>","new Parcelable.Creator<SavedState>() {

    public SavedState createFromParcel(Parcel in) {
        return new SavedState(in);
    }

    public SavedState[] newArray(int size) {
        return new SavedState[size];
    }
}","[]","Optional.empty","\android\widget\ExpandableListView.java"
"mOnGroupExpandListener","false","false","true","false","false","OnGroupExpandListener","null","[]","Optional.empty","\android\widget\ExpandableListView.java"
"mOnGroupCollapseListener","false","false","true","false","false","OnGroupCollapseListener","null","[]","Optional.empty","\android\widget\ExpandableListView.java"
"mOnChildClickListener","false","false","true","false","false","OnChildClickListener","null","[]","Optional.empty","\android\widget\ExpandableListView.java"
"PACKED_POSITION_MASK_GROUP","false","false","true","true","true","long","0x7FFFFFFF00000000L","[]","Optional[/**
 * The mask (in packed position representation) for the group
 */
]","\android\widget\ExpandableListView.java"
"mConnector","false","false","true","false","false","ExpandableListConnector","null","[]","Optional[/**
 * Serves as the glue/translator between a ListView and an ExpandableListView
 */
]","\android\widget\ExpandableListView.java"
"expandedGroupMetadataList","false","false","false","false","false","ArrayList<ExpandableListConnector.GroupMetadata>","null","[]","Optional.empty","\android\widget\ExpandableListView.java"
"CHILD_INDICATOR_INHERIT","true","false","false","true","true","int","-1","[]","Optional[/**
 * Denotes when a child indicator should inherit this bound from the generic
 * indicator bounds
 */
]","\android\widget\ExpandableListView.java"
"mOnGroupClickListener","false","false","true","false","false","OnGroupClickListener","null","[]","Optional.empty","\android\widget\ExpandableListView.java"
"mIndicatorRight","false","false","true","false","false","int","null","[]","Optional[/**
 * Right bound for drawing the indicator.
 */
]","\android\widget\ExpandableListView.java"
"GROUP_EXPANDED_EMPTY_STATE_SET","false","false","true","true","true","int","{ R.attr.state_expanded, R.attr.state_empty }","[]","Optional[/**
 * State indicating the group is expanded and empty (has no children).
 */
]","\android\widget\ExpandableListView.java"
"mChildIndicator","false","false","true","false","false","Drawable","null","[]","Optional[/**
 * The indicator drawn next to a child.
 */
]","\android\widget\ExpandableListView.java"
"mChildIndicatorLeft","false","false","true","false","false","int","null","[]","Optional[/**
 * Left bound for drawing the indicator of a child. Value of
 * {@link #CHILD_INDICATOR_INHERIT} means use mIndicatorLeft.
 */
]","\android\widget\ExpandableListView.java"
"PACKED_POSITION_VALUE_NULL","true","false","false","true","true","long","0x00000000FFFFFFFFL","[]","Optional[/**
 * The value for a packed position that represents neither/null/no
 * preference. This value is not otherwise possible since a group type
 * (first bit 0) should not have a child position filled.
 */
]","\android\widget\ExpandableListView.java"
"PACKED_POSITION_INT_MASK_GROUP","false","false","true","true","true","long","0x7FFFFFFF","[]","Optional[/**
 * The mask (in integer group position representation) for the group
 */
]","\android\widget\ExpandableListView.java"
"mIndicatorRect","false","false","true","false","true","Rect","new Rect()","[]","Optional[// Bounds of the indicator to be drawn
]","\android\widget\ExpandableListView.java"
"mIndicatorLeft","false","false","true","false","false","int","null","[]","Optional[/**
 * Left bound for drawing the indicator.
 */
]","\android\widget\ExpandableListView.java"
"targetView","true","false","false","false","false","View","null","[]","Optional[/**
 * The view for which the context menu is being displayed. This
 * will be one of the children Views of this {@link ExpandableListView}.
 */
]","\android\widget\ExpandableListView.java"
"PACKED_POSITION_SHIFT_GROUP","false","false","true","true","true","long","32","[]","Optional[/**
 * The shift amount (in packed position representation) for the group
 */
]","\android\widget\ExpandableListView.java"
"mGroupIndicator","false","false","true","false","false","Drawable","null","[]","Optional[/**
 * The indicator drawn next to a group.
 */
]","\android\widget\ExpandableListView.java"
"PACKED_POSITION_TYPE_CHILD","true","false","false","true","true","int","1","[]","Optional[/**
 * The packed position represents a child.
 */
]","\android\widget\ExpandableListView.java"
"CHILD_LAST_STATE_SET","false","false","true","true","true","int","{ R.attr.state_last }","[]","Optional[/**
 * State indicating the child is the last within its group.
 */
]","\android\widget\ExpandableListView.java"
"mChildIndicatorRight","false","false","true","false","false","int","null","[]","Optional[/**
 * Right bound for drawing the indicator of a child. Value of
 * {@link #CHILD_INDICATOR_INHERIT} means use mIndicatorRight.
 */
]","\android\widget\ExpandableListView.java"
"GROUP_EXPANDED_STATE_SET","false","false","true","true","true","int","{ R.attr.state_expanded }","[]","Optional[/**
 * State indicating the group is expanded.
 */
]","\android\widget\ExpandableListView.java"
"GROUP_STATE_SETS","false","false","true","true","true","int","{ // 00
EMPTY_STATE_SET, // 01
GROUP_EXPANDED_STATE_SET, // 10
GROUP_EMPTY_STATE_SET, // 11
GROUP_EXPANDED_EMPTY_STATE_SET }","[]","Optional[/**
 * States for the group where the 0th bit is expanded and 1st bit is empty.
 */
]","\android\widget\ExpandableListView.java"
"id","true","false","false","false","false","long","null","[]","Optional[/**
 * The ID of the item (group or child) for which the context menu is
 * being displayed.
 */
]","\android\widget\ExpandableListView.java"
"GROUP_EMPTY_STATE_SET","false","false","true","true","true","int","{ R.attr.state_empty }","[]","Optional[/**
 * State indicating the group is empty (has no children).
 */
]","\android\widget\ExpandableListView.java"
"PACKED_POSITION_MASK_CHILD","false","false","true","true","true","long","0x00000000FFFFFFFFL","[]","Optional[/**
 * The mask (in packed position representation) for the child
 */
]","\android\widget\ExpandableListView.java"
"PACKED_POSITION_INT_MASK_CHILD","false","false","true","true","true","long","0xFFFFFFFF","[]","Optional[/**
 * The mask (in integer child position representation) for the child
 */
]","\android\widget\ExpandableListView.java"
"mChildDivider","false","false","true","false","false","Drawable","null","[]","Optional[/**
 * Drawable to be used as a divider when it is adjacent to any children
 */
]","\android\widget\ExpandableListView.java"
"PACKED_POSITION_TYPE_GROUP","true","false","false","true","true","int","0","[]","Optional[/**
 * The packed position represents a group.
 */
]","\android\widget\ExpandableListView.java"
"EMPTY_STATE_SET","false","false","true","true","true","int","{}","[]","Optional.empty","\android\widget\ExpandableListView.java"
"PACKED_POSITION_TYPE_NULL","true","false","false","true","true","int","2","[]","Optional[/**
 * The packed position represents a neither/null/no preference.
 */
]","\android\widget\ExpandableListView.java"
"PACKED_POSITION_MASK_TYPE","false","false","true","true","true","long","0x8000000000000000L","[]","Optional[/**
 * The mask (in packed position representation) for the type
 */
]","\android\widget\ExpandableListView.java"
"mAdapter","false","false","true","false","false","ExpandableListAdapter","null","[]","Optional[/**
 * Gives us Views through group+child positions
 */
]","\android\widget\ExpandableListView.java"
"packedPosition","true","false","false","false","false","long","null","[]","Optional[/**
 * The packed position in the list represented by the adapter for which
 * the context menu is being displayed. Use the methods
 * {@link ExpandableListView#getPackedPositionType},
 * {@link ExpandableListView#getPackedPositionChild}, and
 * {@link ExpandableListView#getPackedPositionGroup} to unpack this.
 */
]","\android\widget\ExpandableListView.java"
"mClipChildDivider","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\ExpandableListView.java"
"PACKED_POSITION_SHIFT_TYPE","false","false","true","true","true","long","63","[]","Optional[/**
 * The shift amount (in packed position representation) for the type
 */
]","\android\widget\ExpandableListView.java"
"BUTTON1","true","false","false","true","true","int","BUTTON_POSITIVE","[@Deprecated]","Optional[/**
 * @deprecated Use {@link #BUTTON_POSITIVE}
 */
]","\android\content\DialogInterface.java"
"BUTTON_POSITIVE","true","false","false","true","true","int","-1","[]","Optional[/**
 * The identifier for the positive button.
 */
]","\android\content\DialogInterface.java"
"BUTTON2","true","false","false","true","true","int","BUTTON_NEGATIVE","[@Deprecated]","Optional[/**
 * @deprecated Use {@link #BUTTON_NEGATIVE}
 */
]","\android\content\DialogInterface.java"
"BUTTON3","true","false","false","true","true","int","BUTTON_NEUTRAL","[@Deprecated]","Optional[/**
 * @deprecated Use {@link #BUTTON_NEUTRAL}
 */
]","\android\content\DialogInterface.java"
"BUTTON_NEGATIVE","true","false","false","true","true","int","-2","[]","Optional[/**
 * The identifier for the negative button.
 */
]","\android\content\DialogInterface.java"
"BUTTON_NEUTRAL","true","false","false","true","true","int","-3","[]","Optional[/**
 * The identifier for the neutral button.
 */
]","\android\content\DialogInterface.java"
"mName","false","false","true","false","false","String","null","[]","Optional.empty","\android\text\util\Rfc822Token.java"
"mDefaultTouchRecepient","false","false","true","false","false","View","null","[]","Optional.empty","\com\android\internal\widget\LinearLayoutWithDefaultTouchRecepient.java"
"mTempRect","false","false","true","false","true","Rect","new Rect()","[]","Optional.empty","\com\android\internal\widget\LinearLayoutWithDefaultTouchRecepient.java"
"mParentMenu","false","false","true","false","false","MenuBuilder","null","[]","Optional.empty","\com\android\internal\view\menu\SubMenuBuilder.java"
"mItem","false","false","true","false","false","MenuItemImpl","null","[]","Optional.empty","\com\android\internal\view\menu\SubMenuBuilder.java"
"_COUNT","true","false","false","true","true","String","""_count""","[]","Optional[/**
 * The count of rows in a directory.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\BaseColumns.java"
"_ID","true","false","false","true","true","String","""_id""","[]","Optional[/**
 * The unique ID for a row.
 * <P>Type: INTEGER (long)</P>
 */
]","\android\provider\BaseColumns.java"
"FLAG_NOTIFY_CHILDREN_ON_DRAWABLE_STATE_CHANGE","false","false","true","true","true","int","0x10000","[]","Optional[/**
 * When set, this group will go through its list of children to notify them of
 * any drawable state change.
 */
]","\android\view\ViewGroup.java"
"height","true","false","false","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""layout"", mapping = { @ViewDebug.IntToString(from = MATCH_PARENT, to = ""MATCH_PARENT""), @ViewDebug.IntToString(from = WRAP_CONTENT, to = ""WRAP_CONTENT"") })]","Optional[/**
 * Information about how tall the view wants to be. Can be one of the
 * constants FILL_PARENT (replaced by MATCH_PARENT ,
 * in API Level 8) or WRAP_CONTENT. or an exact size.
 */
]","\android\view\ViewGroup.java"
"CHILD_LEFT_INDEX","false","false","true","true","true","int","0","[]","Optional[// Index of the child's left position in the mLocation array
]","\android\view\ViewGroup.java"
"topMargin","true","false","false","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""layout"")]","Optional[/**
 * The top margin in pixels of the child.
 */
]","\android\view\ViewGroup.java"
"FLAG_SUPPORT_STATIC_TRANSFORMATIONS","false","true","false","true","true","int","0x800","[]","Optional[/**
 * When set, this ViewGroup supports static transformations on children; this causes
 * {@link #getChildStaticTransformation(View, android.view.animation.Transformation)} to be
 * invoked when a child is drawn.
 *
 * Any subclass overriding
 * {@link #getChildStaticTransformation(View, android.view.animation.Transformation)} should
 * set this flags in {@link #mGroupFlags}.
 *
 * {@hide}
 */
]","\android\view\ViewGroup.java"
"CLIP_TO_PADDING_MASK","false","true","false","true","true","int","FLAG_CLIP_TO_PADDING | FLAG_PADDING_NOT_NULL","[]","Optional[/**
 * We clip to padding when FLAG_CLIP_TO_PADDING and FLAG_PADDING_NOT_NULL
 * are set at the same time.
 */
]","\android\view\ViewGroup.java"
"FLAG_USE_CHILD_DRAWING_ORDER","false","true","false","true","true","int","0x400","[]","Optional[/**
 * When set, the drawing method will call {@link #getChildDrawingOrder(int, int)}
 * to get the index of the child to draw for that iteration.
 *
 * @hide
 */
]","\android\view\ViewGroup.java"
"PERSISTENT_NO_CACHE","true","false","false","true","true","int","0x0","[]","Optional[/**
 * Used to indicate that no drawing cache should be kept in memory.
 */
]","\android\view\ViewGroup.java"
"FLAG_OPTIMIZE_INVALIDATE","false","false","true","true","true","int","0x80","[]","Optional[// characteristics
]","\android\view\ViewGroup.java"
"FLAG_CLEAR_TRANSFORMATION","false","false","true","true","true","int","0x100","[]","Optional[// When set, the next call to drawChild() will clear mChildTransformation's matrix
]","\android\view\ViewGroup.java"
"leftMargin","true","false","false","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""layout"")]","Optional[/**
 * The left margin in pixels of the child.
 */
]","\android\view\ViewGroup.java"
"mChildren","false","false","true","false","false","View","null","[]","Optional[// Child views of this ViewGroup
]","\android\view\ViewGroup.java"
"mInvalidateRegion","false","false","true","false","false","RectF","null","[]","Optional.empty","\android\view\ViewGroup.java"
"PERSISTENT_ALL_CACHES","true","false","false","true","true","int","0x3","[]","Optional[/**
 * Used to indicate that all drawing caches should be kept in memory.
 */
]","\android\view\ViewGroup.java"
"FLAG_CHILDREN_DRAWN_WITH_CACHE","false","false","true","true","true","int","0x8000","[]","Optional[/**
 * When set, and if FLAG_ALWAYS_DRAWN_WITH_CACHE is not set, this ViewGroup will try to
 * draw its children with their drawing cache.
 */
]","\android\view\ViewGroup.java"
"FLAG_ALPHA_LOWER_THAN_ONE","false","false","true","true","true","int","0x1000","[]","Optional[// 1.0 and set it in mCachePaint
]","\android\view\ViewGroup.java"
"DESCENDANT_FOCUSABILITY_FLAGS","false","false","true","true","true","int","{ FOCUS_BEFORE_DESCENDANTS, FOCUS_AFTER_DESCENDANTS, FOCUS_BLOCK_DESCENDANTS }","[]","Optional[/**
 * Used to map between enum in attrubutes and flag values.
 */
]","\android\view\ViewGroup.java"
"mLayoutAnimationController","false","false","true","false","false","LayoutAnimationController","null","[]","Optional[// Layout animation
]","\android\view\ViewGroup.java"
"mFocused","false","false","true","false","false","View","null","[]","Optional[// The view contained within this ViewGroup that has or contains focus.
]","\android\view\ViewGroup.java"
"mGroupFlags","false","true","false","false","false","int","null","[]","Optional[/**
 * Internal flags.
 *
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\view\ViewGroup.java"
"mOnHierarchyChangeListener","false","true","false","false","false","OnHierarchyChangeListener","null","[]","Optional[/**
 * Listener used to propagate events indicating when children are added
 * and/or removed from a view group.
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\view\ViewGroup.java"
"FILL_PARENT","true","false","false","true","true","int","-1","[@SuppressWarnings({ ""UnusedDeclaration"" }), @Deprecated]","Optional[/**
 * Special value for the height or width requested by a View.
 * FILL_PARENT means that the view wants to be as big as its parent,
 * minus the parent's padding, if any. This value is deprecated
 * starting in API Level 8 and replaced by {@link #MATCH_PARENT}.
 */
]","\android\view\ViewGroup.java"
"bottomMargin","true","false","false","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""layout"")]","Optional[/**
 * The bottom margin in pixels of the child.
 */
]","\android\view\ViewGroup.java"
"mAnimationListener","false","false","true","false","false","Animation.AnimationListener","null","[]","Optional.empty","\android\view\ViewGroup.java"
"rightMargin","true","false","false","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""layout"")]","Optional[/**
 * The right margin in pixels of the child.
 */
]","\android\view\ViewGroup.java"
"FLAG_ANIMATION_DONE","false","false","true","true","true","int","0x10","[]","Optional[// Set by default
]","\android\view\ViewGroup.java"
"mMotionTarget","false","false","true","false","false","View","null","[]","Optional[// Target of Motion events
]","\android\view\ViewGroup.java"
"mPersistentDrawingCache","false","true","false","false","false","int","null","[]","Optional[/**
 * Indicates which types of drawing caches are to be kept in memory.
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\view\ViewGroup.java"
"mChildrenCount","false","false","true","false","false","int","null","[]","Optional[// considered as children
]","\android\view\ViewGroup.java"
"MATCH_PARENT","true","false","false","true","true","int","-1","[]","Optional[/**
 * Special value for the height or width requested by a View.
 * MATCH_PARENT means that the view wants to be as big as its parent,
 * minus the parent's padding, if any. Introduced in API Level 8.
 */
]","\android\view\ViewGroup.java"
"FLAG_CLIP_TO_PADDING","false","false","true","true","true","int","0x2","[]","Optional[// Set by default
]","\android\view\ViewGroup.java"
"ARRAY_CAPACITY_INCREMENT","false","false","true","true","true","int","12","[]","Optional.empty","\android\view\ViewGroup.java"
"mDisappearingChildren","false","true","false","false","false","ArrayList<View>","null","[]","Optional[/**
 * Views which have been hidden or removed which need to be animated on
 * their way out.
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\view\ViewGroup.java"
"FLAG_MASK_FOCUSABILITY","false","false","true","true","true","int","0x60000","[]","Optional.empty","\android\view\ViewGroup.java"
"FLAG_ADD_STATES_FROM_CHILDREN","false","false","true","true","true","int","0x2000","[]","Optional[/**
 * When set, this ViewGroup's drawable states also include those
 * of its children.
 */
]","\android\view\ViewGroup.java"
"layoutAnimationParameters","true","false","false","false","false","LayoutAnimationController.AnimationParameters","null","[]","Optional[/**
 * Used to animate layouts.
 */
]","\android\view\ViewGroup.java"
"FOCUS_BEFORE_DESCENDANTS","true","false","false","true","true","int","0x20000","[]","Optional[/**
 * This view will get focus before any of its descendants.
 */
]","\android\view\ViewGroup.java"
"mTempRect","false","false","true","false","true","Rect","new Rect()","[]","Optional.empty","\android\view\ViewGroup.java"
"mCachePaint","false","false","true","false","true","Paint","new Paint()","[]","Optional[// Used to draw cached views
]","\android\view\ViewGroup.java"
"FLAG_DISALLOW_INTERCEPT","false","true","false","true","true","int","0x80000","[]","Optional[/**
 * When set, this ViewGroup should not intercept touch events.
 * {@hide}
 */
]","\android\view\ViewGroup.java"
"FLAG_NOTIFY_ANIMATION_LISTENER","false","false","true","true","true","int","0x200","[]","Optional[// This flag is set when the layout animation is over (after FLAG_ANIMATION_DONE is set)
]","\android\view\ViewGroup.java"
"width","true","false","false","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""layout"", mapping = { @ViewDebug.IntToString(from = MATCH_PARENT, to = ""MATCH_PARENT""), @ViewDebug.IntToString(from = WRAP_CONTENT, to = ""WRAP_CONTENT"") })]","Optional[/**
 * Information about how wide the view wants to be. Can be one of the
 * constants FILL_PARENT (replaced by MATCH_PARENT ,
 * in API Level 8) or WRAP_CONTENT. or an exact size.
 */
]","\android\view\ViewGroup.java"
"FOCUS_AFTER_DESCENDANTS","true","false","false","true","true","int","0x40000","[]","Optional[/**
 * This view will get focus only if none of its descendants want it.
 */
]","\android\view\ViewGroup.java"
"DBG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\view\ViewGroup.java"
"FLAG_PADDING_NOT_NULL","false","false","true","true","true","int","0x20","[]","Optional[// to clip it, even if FLAG_CLIP_TO_PADDING is set
]","\android\view\ViewGroup.java"
"FOCUS_BLOCK_DESCENDANTS","true","false","false","true","true","int","0x60000","[]","Optional[/**
 * This view will block any of its descendants from getting focus, even
 * if they are focusable.
 */
]","\android\view\ViewGroup.java"
"FLAG_ANIMATION_CACHE","false","false","true","true","true","int","0x40","[]","Optional[// Set by default
]","\android\view\ViewGroup.java"
"FLAG_INVALIDATE_REQUIRED","false","false","true","true","true","int","0x4","[]","Optional[// a child needs to be invalidated and FLAG_OPTIMIZE_INVALIDATE is set
]","\android\view\ViewGroup.java"
"CHILD_TOP_INDEX","false","false","true","true","true","int","1","[]","Optional[// Index of the child's top position in the mLocation array
]","\android\view\ViewGroup.java"
"ARRAY_INITIAL_CAPACITY","false","false","true","true","true","int","12","[]","Optional.empty","\android\view\ViewGroup.java"
"mChildTransformation","false","false","true","false","false","Transformation","null","[]","Optional[// The current transformation to apply on the child being drawn
]","\android\view\ViewGroup.java"
"FLAG_CLIP_CHILDREN","false","false","true","true","true","int","0x1","[]","Optional[// Set by default
]","\android\view\ViewGroup.java"
"FLAG_RUN_ANIMATION","false","false","true","true","true","int","0x8","[]","Optional[// When set, dispatchDraw() will run the layout animation and unset the flag
]","\android\view\ViewGroup.java"
"WRAP_CONTENT","true","false","false","true","true","int","-2","[]","Optional[/**
 * Special value for the height or width requested by a View.
 * WRAP_CONTENT means that the view wants to be just large enough to fit
 * its own internal content, taking its own padding into account.
 */
]","\android\view\ViewGroup.java"
"FLAG_ALWAYS_DRAWN_WITH_CACHE","false","false","true","true","true","int","0x4000","[]","Optional[/**
 * When set, this ViewGroup tries to always draw its children using their drawing cache.
 */
]","\android\view\ViewGroup.java"
"PERSISTENT_SCROLLING_CACHE","true","false","false","true","true","int","0x2","[]","Optional[/**
 * Used to indicate that the scrolling drawing cache should be kept in memory.
 */
]","\android\view\ViewGroup.java"
"PERSISTENT_ANIMATION_CACHE","true","false","false","true","true","int","0x1","[]","Optional[/**
 * Used to indicate that the animation drawing cache should be kept in memory.
 */
]","\android\view\ViewGroup.java"
"CREATOR","true","false","false","true","true","Creator<SyncInfo>","new Creator<SyncInfo>() {

    public SyncInfo createFromParcel(Parcel in) {
        return new SyncInfo(in);
    }

    public SyncInfo[] newArray(int size) {
        return new SyncInfo[size];
    }
}","[]","Optional[/**
 * @hide
 */
]","\android\content\SyncInfo.java"
"authorityId","true","false","false","false","true","int","null","[]","Optional[/**
 * @hide
 */
]","\android\content\SyncInfo.java"
"authority","true","false","false","false","true","String","null","[]","Optional[/**
 * The authority of the provider that is currently being synced.
 */
]","\android\content\SyncInfo.java"
"startTime","true","false","false","false","true","long","null","[]","Optional[/**
 * The start time of the current sync operation in milliseconds since boot.
 * This is represented in elapsed real time.
 * See {@link android.os.SystemClock#elapsedRealtime()}.
 */
]","\android\content\SyncInfo.java"
"account","true","false","false","false","true","Account","null","[]","Optional[/**
 * The {@link Account} that is currently being synced.
 */
]","\android\content\SyncInfo.java"
"mThreadId","false","false","true","false","true","long","null","[]","Optional.empty","\com\google\android\mms\util\PduCacheEntry.java"
"mPdu","false","false","true","false","true","GenericPdu","null","[]","Optional.empty","\com\google\android\mms\util\PduCacheEntry.java"
"mMessageBox","false","false","true","false","true","int","null","[]","Optional.empty","\com\google\android\mms\util\PduCacheEntry.java"
"RESPONSE_STATUS","true","false","false","true","true","int","0x92","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"REPLY_CHARGING_ACCEPTED","true","false","false","true","true","int","0x82","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_ERROR_PERMANENT_REPLY_CHARGING_FORWARDING_DENIED","true","false","false","true","true","int","0xE8","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"REPORT_ALLOWED","true","false","false","true","true","int","0x91","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"DELIVERY_TIME","true","false","false","true","true","int","0x87","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"STATUS_UNREACHABLE","true","false","false","true","true","int","0x87","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_CLASS_AUTO_STR","true","false","false","true","true","String","""auto""","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_CLASS","true","false","false","true","true","int","0x8A","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_CLASS_ADVERTISEMENT","true","false","false","true","true","int","0x81","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"PREVIOUSLY_SENT_DATE","true","false","false","true","true","int","0xA1","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"SENDER_VISIBILITY_HIDE","true","false","false","true","true","int","0x80","[]","Optional[/**
 * X-Mms-Sender-Visibility field types.
 */
]","\com\google\android\mms\pdu\PduHeaders.java"
"CONTENT_TYPE","true","false","false","true","true","int","0x84","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_ERROR_PERMANENT_ADDRESS_HIDING_NOT_SUPPORTED","true","false","false","true","true","int","0xEA","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_CLASS_PERSONAL","true","false","false","true","true","int","0x80","[]","Optional[/**
 * X-Mms-Message-Class field types.
 */
]","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_ERROR_PERMANENT_CONTENT_NOT_ACCEPTED","true","false","false","true","true","int","0xE5","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RETRIEVE_STATUS_ERROR_TRANSIENT_NETWORK_PROBLEM","true","false","false","true","true","int","0xC2","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_TYPE_MBOX_DELETE_CONF","true","false","false","true","true","int","0x92","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"PRIORITY_NORMAL","true","false","false","true","true","int","0x81","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"BCC","true","false","false","true","true","int","0x81","[]","Optional[/**
 * All pdu header fields.
 */
]","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_OK","true","false","false","true","true","int","0x80","[]","Optional[/**
 * X-Mms-Response-Status field types.
 */
]","\com\google\android\mms\pdu\PduHeaders.java"
"RECOMMENDED_RETRIEVAL_MODE_TEXT","true","false","false","true","true","int","0xB5","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MM_STATE_RETRIEVED","true","false","false","true","true","int","0x83","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MM_FLAGS_FILTER_TOKEN","true","false","false","true","true","int","0x82","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"PREVIOUSLY_SENT_BY","true","false","false","true","true","int","0xA0","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_TYPE_SEND_CONF","true","false","false","true","true","int","0x81","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_CLASS_PERSONAL_STR","true","false","false","true","true","String","""personal""","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MM_FLAGS_ADD_TOKEN","true","false","false","true","true","int","0x80","[]","Optional[/**
 * MM-Flags field type components.
 */
]","\com\google\android\mms\pdu\PduHeaders.java"
"ATTRIBUTES","true","false","false","true","true","int","0xA8","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_ERROR_PERMANENT_REPLY_CHARGING_LIMITATIONS_NOT_MET","true","false","false","true","true","int","0xE6","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"DISTRIBUTION_INDICATOR","true","false","false","true","true","int","0xB1","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RETRIEVE_TEXT","true","false","false","true","true","int","0x9A","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"READ_STATUS_READ","true","false","false","true","true","int","0x80","[]","Optional[/**
 * X-Mms-Read-Status field types.
 */
]","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_ERROR_UNSPECIFIED","true","false","false","true","true","int","0x81","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_TYPE_MBOX_VIEW_REQ","true","false","false","true","true","int","0x8D","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MMS_VERSION","true","false","false","true","true","int","0x8D","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"STATUS_RETRIEVED","true","false","false","true","true","int","0x81","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_ERROR_SERVICE_DENIED","true","false","false","true","true","int","0x82","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"VALUE_YES","true","false","false","true","true","int","0x80","[]","Optional[/**
 * X-Mms-Delivery-Report |
 * X-Mms-Read-Report |
 * X-Mms-Report-Allowed |
 * X-Mms-Sender-Visibility |
 * X-Mms-Store |
 * X-Mms-Stored |
 * X-Mms-Totals |
 * X-Mms-Quotas |
 * X-Mms-Distribution-Indicator |
 * X-Mms-DRM-Content |
 * X-Mms-Adaptation-Allowed |
 * field types.
 */
]","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_TYPE_DELETE_CONF","true","false","false","true","true","int","0x95","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"SENDER_VISIBILITY_SHOW","true","false","false","true","true","int","0x81","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"REPLY_CHARGING_ACCEPTED_TEXT_ONLY","true","false","false","true","true","int","0x83","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_ID","true","false","false","true","true","int","0x8B","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"CONTENT_CLASS_VIDEO_BASIC","true","false","false","true","true","int","0x83","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_ERROR_CONTENT_NOT_ACCEPTED","true","false","false","true","true","int","0x87","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"AUX_APPLIC_ID","true","false","false","true","true","int","0xB9","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"CC","true","false","false","true","true","int","0x82","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_SIZE","true","false","false","true","true","int","0x8E","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_ERROR_NETWORK_PROBLEM","true","false","false","true","true","int","0x86","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"REPLY_CHARGING_REQUESTED","true","false","false","true","true","int","0x80","[]","Optional[/**
 * X-Mms-Reply-Charging field types.
 */
]","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_TYPE_RETRIEVE_CONF","true","false","false","true","true","int","0x84","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"REPLY_CHARGING_REQUESTED_TEXT_ONLY","true","false","false","true","true","int","0x81","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"READ_REPORT","true","false","false","true","true","int","0x90","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_TYPE_ACKNOWLEDGE_IND","true","false","false","true","true","int","0x85","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"CONTENT_CLASS_MEGAPIXEL","true","false","false","true","true","int","0x85","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"STORE","true","false","false","true","true","int","0xA2","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"TOTALS","true","false","false","true","true","int","0xA9","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"SUBJECT","true","false","false","true","true","int","0x96","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"TO","true","false","false","true","true","int","0x97","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RETRIEVE_STATUS_OK","true","false","false","true","true","int","0x80","[]","Optional[/**
 * X-Mms-Retrieve-Status field types.
 */
]","\com\google\android\mms\pdu\PduHeaders.java"
"TRANSACTION_ID","true","false","false","true","true","int","0x98","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"ADAPTATION_ALLOWED","true","false","false","true","true","int","0xBC","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MM_STATE_NEW","true","false","false","true","true","int","0x82","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_TYPE_MBOX_DELETE_REQ","true","false","false","true","true","int","0x91","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_TYPE_READ_REC_IND","true","false","false","true","true","int","0x87","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"PRIORITY","true","false","false","true","true","int","0x8F","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"STORE_STATUS","true","false","false","true","true","int","0xA5","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"ADDITIONAL_HEADERS","true","false","false","true","true","int","0xB0","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_TYPE_MBOX_UPLOAD_REQ","true","false","false","true","true","int","0x8F","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_ERROR_TRANSIENT_SENDNG_ADDRESS_UNRESOLVED","true","false","false","true","true","int","0xC1","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"CANCEL_STATUS_REQUEST_CORRUPTED","true","false","false","true","true","int","0x81","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"CONTENT_LOCATION","true","false","false","true","true","int","0x83","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"STORE_STATUS_ERROR_END","true","false","false","true","true","int","0xFF","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MBOX_QUOTAS","true","false","false","true","true","int","0xAC","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"REPLY_APPLIC_ID","true","false","false","true","true","int","0xB8","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_TYPE_FORWARD_REQ","true","false","false","true","true","int","0x89","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"READ_STATUS__DELETED_WITHOUT_BEING_READ","true","false","false","true","true","int","0x81","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_ERROR_PERMANENT_MESSAGE_FORMAT_CORRUPT","true","false","false","true","true","int","0xE2","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"STATUS_UNRECOGNIZED","true","false","false","true","true","int","0x84","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"READ_STATUS","true","false","false","true","true","int","0x9B","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"REPLY_CHARGING","true","false","false","true","true","int","0x9C","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"CONTENT_CLASS_IMAGE_BASIC","true","false","false","true","true","int","0x81","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"FROM_INSERT_ADDRESS_TOKEN","true","false","false","true","true","int","0x81","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"STORE_STATUS_ERROR_PERMANENT_MESSAGE_FORMAT_CORRUPT","true","false","false","true","true","int","0xE2","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"FROM_INSERT_ADDRESS_TOKEN_STR","true","false","false","true","true","String","""insert-address-token""","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"STATUS_FORWARDED","true","false","false","true","true","int","0x86","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_CLASS_ADVERTISEMENT_STR","true","false","false","true","true","String","""advertisement""","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"READ_REPLY","true","false","false","true","true","int","0x90","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"STORE_STATUS_SUCCESS","true","false","false","true","true","int","0x80","[]","Optional[/**
 * X-Mms-Store-Status field types.
 */
]","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_ERROR_TRANSIENT_PARTIAL_SUCCESS","true","false","false","true","true","int","0xC4","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"CANCEL_STATUS_REQUEST_SUCCESSFULLY_RECEIVED","true","false","false","true","true","int","0x80","[]","Optional[/**
 * X-Mms-Cancel-Status field types.
 */
]","\com\google\android\mms\pdu\PduHeaders.java"
"STORE_STATUS_ERROR_PERMANENT_FAILURE","true","false","false","true","true","int","0xE0","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"START","true","false","false","true","true","int","0xAF","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"PRIORITY_HIGH","true","false","false","true","true","int","0x82","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_TYPE_CANCEL_REQ","true","false","false","true","true","int","0x96","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RETRIEVE_STATUS_ERROR_TRANSIENT_MESSAGE_NOT_FOUND","true","false","false","true","true","int","0xC1","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_ERROR_MESSAGE_FORMAT_CORRUPT","true","false","false","true","true","int","0x83","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_ERROR_PERMANENT_FAILURE","true","false","false","true","true","int","0xE0","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_TYPE_MBOX_UPLOAD_CONF","true","false","false","true","true","int","0x90","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"VALUE_ABSOLUTE_TOKEN","true","false","false","true","true","int","0x80","[]","Optional[/**
 * Delivery-Time |
 * Expiry and Reply-Charging-Deadline |
 * field type components.
 */
]","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_TYPE_MBOX_STORE_CONF","true","false","false","true","true","int","0x8C","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_TYPE_CANCEL_CONF","true","false","false","true","true","int","0x97","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"STORE_STATUS_ERROR_TRANSIENT_FAILURE","true","false","false","true","true","int","0xC0","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_TYPE_DELETE_REQ","true","false","false","true","true","int","0x94","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_TEXT","true","false","false","true","true","int","0x93","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MM_FLAGS","true","false","false","true","true","int","0xA4","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"PRIORITY_LOW","true","false","false","true","true","int","0x80","[]","Optional[/**
 * X-Mms-Priority field types.
 */
]","\com\google\android\mms\pdu\PduHeaders.java"
"DELIVERY_REPORT","true","false","false","true","true","int","0x86","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_CLASS_INFORMATIONAL","true","false","false","true","true","int","0x82","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"CONTENT_CLASS_TEXT","true","false","false","true","true","int","0x80","[]","Optional[/**
 * X-Mms-Content-Class field types.
 */
]","\com\google\android\mms\pdu\PduHeaders.java"
"RETRIEVE_STATUS_ERROR_PERMANENT_FAILURE","true","false","false","true","true","int","0xE0","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_TYPE_NOTIFICATION_IND","true","false","false","true","true","int","0x82","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RETRIEVE_STATUS","true","false","false","true","true","int","0x99","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_ERROR_PERMANENT_LACK_OF_PREPAID","true","false","false","true","true","int","0xEB","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RETRIEVE_STATUS_ERROR_TRANSIENT_FAILURE","true","false","false","true","true","int","0xC0","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_ERROR_PERMANENT_SENDING_ADDRESS_UNRESOLVED","true","false","false","true","true","int","0xE3","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"STORE_STATUS_ERROR_TRANSIENT_NETWORK_PROBLEM","true","false","false","true","true","int","0xC1","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_TYPE_MBOX_STORE_REQ","true","false","false","true","true","int","0x8B","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RECOMMENDED_RETRIEVAL_MODE","true","false","false","true","true","int","0xB4","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"FROM_ADDRESS_PRESENT_TOKEN","true","false","false","true","true","int","0x80","[]","Optional[/**
 * From field type components.
 */
]","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_TYPE_NOTIFYRESP_IND","true","false","false","true","true","int","0x83","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"STORE_STATUS_TEXT","true","false","false","true","true","int","0xA6","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"VALUE_RELATIVE_TOKEN","true","false","false","true","true","int","0x81","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RECOMMENDED_RETRIEVAL_MODE_MANUAL","true","false","false","true","true","int","0x80","[]","Optional[/**
 * X-Mms-Recommended-Retrieval-Mode field types.
 */
]","\com\google\android\mms\pdu\PduHeaders.java"
"CANCEL_STATUS","true","false","false","true","true","int","0xBF","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"STATUS_EXPIRED","true","false","false","true","true","int","0x80","[]","Optional[/**
 * X-Mms-Status Field.
 */
]","\com\google\android\mms\pdu\PduHeaders.java"
"FROM_ADDRESS_PRESENT_TOKEN_STR","true","false","false","true","true","String","""address-present-token""","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"CONTENT_CLASS_VIDEO_RICH","true","false","false","true","true","int","0x84","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"REPLY_CHARGING_DEADLINE","true","false","false","true","true","int","0x9D","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"APPLIC_ID","true","false","false","true","true","int","0xB7","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MBOX_TOTALS","true","false","false","true","true","int","0xAA","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_CLASS_AUTO","true","false","false","true","true","int","0x83","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"STORE_STATUS_ERROR_PERMANENT_MESSAGE_NOT_FOUND","true","false","false","true","true","int","0xE3","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"CONTENT_CLASS_CONTENT_RICH","true","false","false","true","true","int","0x87","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"CURRENT_MMS_VERSION","true","false","false","true","true","int","MMS_VERSION_1_2","[]","Optional[// Current version is 1.2.
]","\com\google\android\mms\pdu\PduHeaders.java"
"STATUS_DEFERRED","true","false","false","true","true","int","0x83","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"DRM_CONTENT","true","false","false","true","true","int","0xBB","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MM_STATE_SENT","true","false","false","true","true","int","0x81","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_ERROR_PERMANENT_SERVICE_DENIED","true","false","false","true","true","int","0xE1","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RETRIEVE_STATUS_ERROR_PERMANENT_MESSAGE_NOT_FOUND","true","false","false","true","true","int","0xE2","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_ERROR_PERMANENT_REPLY_CHARGING_NOT_SUPPORTED","true","false","false","true","true","int","0xE9","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"CANCEL_ID","true","false","false","true","true","int","0xBE","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"SENDER_VISIBILITY","true","false","false","true","true","int","0x94","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"STORE_STATUS_ERROR_PERMANENT_SERVICE_DENIED","true","false","false","true","true","int","0xE1","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_COUNT","true","false","false","true","true","int","0xAD","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MMS_VERSION_1_2","true","false","false","true","true","int","((1 << 4) | 2)","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MMS_VERSION_1_1","true","false","false","true","true","int","((1 << 4) | 1)","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_TYPE_READ_ORIG_IND","true","false","false","true","true","int","0x88","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MMS_VERSION_1_3","true","false","false","true","true","int","((1 << 4) | 3)","[]","Optional[/**
 * X-Mms-MMS-Version field types.
 */
]","\com\google\android\mms\pdu\PduHeaders.java"
"EXPIRY","true","false","false","true","true","int","0x88","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"ELEMENT_DESCRIPTOR","true","false","false","true","true","int","0xB2","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_ERROR_UNSUPPORTED_MESSAGE","true","false","false","true","true","int","0x88","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"FROM","true","false","false","true","true","int","0x89","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"STATUS_INDETERMINATE","true","false","false","true","true","int","0x85","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_ERROR_SENDING_ADDRESS_UNRESOLVED","true","false","false","true","true","int","0x84","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MM_STATE_FORWARDED","true","false","false","true","true","int","0x84","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MM_STATE_DRAFT","true","false","false","true","true","int","0x80","[]","Optional[/**
 * X-Mms-MM-State field types.
 */
]","\com\google\android\mms\pdu\PduHeaders.java"
"STATUS","true","false","false","true","true","int","0x95","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_ERROR_PERMANENT_REPLY_CHARGING_REQUEST_NOT_ACCEPTED","true","false","false","true","true","int","0xE6","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MMS_VERSION_1_0","true","false","false","true","true","int","((1 << 4) | 0)","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"CONTENT_CLASS_IMAGE_RICH","true","false","false","true","true","int","0x82","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"STORE_STATUS_ERROR_PERMANENT_MMBOX_FULL","true","false","false","true","true","int","0xE4","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"CONTENT_CLASS","true","false","false","true","true","int","0xBA","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_TYPE_MBOX_DESCR","true","false","false","true","true","int","0x93","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"mHeaderMap","false","false","true","false","false","HashMap<Integer,Object>","null","[]","Optional[/**
 * The map contains the value of all headers.
 */
]","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_TYPE","true","false","false","true","true","int","0x8C","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"STATUS_TEXT","true","false","false","true","true","int","0xB6","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"DATE","true","false","false","true","true","int","0x85","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_TYPE_MBOX_VIEW_CONF","true","false","false","true","true","int","0x8E","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"STORED","true","false","false","true","true","int","0xA7","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"LIMIT","true","false","false","true","true","int","0xB3","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"REPLY_CHARGING_ID","true","false","false","true","true","int","0x9E","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"REPLY_CHARGING_SIZE","true","false","false","true","true","int","0x9F","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"REPLACE_ID","true","false","false","true","true","int","0xBD","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MM_FLAGS_REMOVE_TOKEN","true","false","false","true","true","int","0x81","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"STATUS_REJECTED","true","false","false","true","true","int","0x82","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_CLASS_INFORMATIONAL_STR","true","false","false","true","true","String","""informational""","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_ERROR_TRANSIENT_MESSAGE_NOT_FOUND","true","false","false","true","true","int","0xC2","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_TYPE_FORWARD_CONF","true","false","false","true","true","int","0x8A","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_ERROR_TRANSIENT_FAILURE","true","false","false","true","true","int","0xC0","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RETRIEVE_STATUS_ERROR_END","true","false","false","true","true","int","0xFF","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"CONTENT","true","false","false","true","true","int","0xAE","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MM_STATE","true","false","false","true","true","int","0xA3","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"CONTENT_CLASS_CONTENT_BASIC","true","false","false","true","true","int","0x86","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_TYPE_DELIVERY_IND","true","false","false","true","true","int","0x86","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"QUOTAS","true","false","false","true","true","int","0xAB","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_ERROR_TRANSIENT_NETWORK_PROBLEM","true","false","false","true","true","int","0xC3","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_ERROR_PERMANENT_END","true","false","false","true","true","int","0xFF","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RETRIEVE_STATUS_ERROR_PERMANENT_CONTENT_UNSUPPORTED","true","false","false","true","true","int","0xE3","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"VALUE_NO","true","false","false","true","true","int","0x81","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"MESSAGE_TYPE_SEND_REQ","true","false","false","true","true","int","0x80","[]","Optional[/**
 * X-Mms-Message-Type field types.
 */
]","\com\google\android\mms\pdu\PduHeaders.java"
"RETRIEVE_STATUS_ERROR_PERMANENT_SERVICE_DENIED","true","false","false","true","true","int","0xE1","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_ERROR_MESSAGE_NOT_FOUND","true","false","false","true","true","int","0x85","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"RESPONSE_STATUS_ERROR_PERMANENT_MESSAGE_NOT_FOUND","true","false","false","true","true","int","0xE4","[]","Optional.empty","\com\google\android\mms\pdu\PduHeaders.java"
"CONTENT_TYPE","true","false","false","true","true","String","""vnd.android.cursor.dir/vnd.google.userword""","[]","Optional[/**
 * The MIME type of {@link #CONTENT_URI} providing a directory of words.
 */
]","\android\provider\UserDictionary.java"
"LOCALE","true","false","false","true","true","String","""locale""","[]","Optional[/**
 * The locale that this word belongs to. Null if it pertains to all
 * locales. Locale is as defined by the string returned by Locale.toString().
 * <p>TYPE: TEXT</p>
 */
]","\android\provider\UserDictionary.java"
"CONTENT_ITEM_TYPE","true","false","false","true","true","String","""vnd.android.cursor.item/vnd.google.userword""","[]","Optional[/**
 * The MIME type of a {@link #CONTENT_URI} sub-directory of a single word.
 */
]","\android\provider\UserDictionary.java"
"FREQUENCY","true","false","false","true","true","String","""frequency""","[]","Optional[/**
 * The frequency column. A value between 1 and 255. Higher values imply higher frequency.
 * <p>TYPE: INTEGER</p>
 */
]","\android\provider\UserDictionary.java"
"WORD","true","false","false","true","true","String","""word""","[]","Optional[/**
 * The word column.
 * <p>TYPE: TEXT</p>
 */
]","\android\provider\UserDictionary.java"
"DEFAULT_SORT_ORDER","true","false","false","true","true","String","FREQUENCY + "" DESC""","[]","Optional[/**
 * Sort by descending order of frequency.
 */
]","\android\provider\UserDictionary.java"
"AUTHORITY","true","false","false","true","true","String","""user_dictionary""","[]","Optional[/**
 * Authority string for this provider.
 */
]","\android\provider\UserDictionary.java"
"LOCALE_TYPE_ALL","true","false","false","true","true","int","0","[]","Optional[/**
 * The locale type to specify that the word is common to all locales.
 */
]","\android\provider\UserDictionary.java"
"LOCALE_TYPE_CURRENT","true","false","false","true","true","int","1","[]","Optional[/**
 * The locale type to specify that the word is for the current locale.
 */
]","\android\provider\UserDictionary.java"
"CONTENT_URI","true","false","false","true","true","Uri","Uri.parse(""content://"" + AUTHORITY + ""/words"")","[]","Optional[/**
 * The content:// style URL for this table
 */
]","\android\provider\UserDictionary.java"
"APP_ID","true","false","false","true","true","String","""appid""","[]","Optional[/**
 * The uid of the application that inserted the word.
 * <p>TYPE: INTEGER</p>
 */
]","\android\provider\UserDictionary.java"
"_ID","true","false","false","true","true","String","BaseColumns._ID","[]","Optional.empty","\android\provider\UserDictionary.java"
"mChildOnCheckedChangeListener","false","false","true","false","false","CompoundButton.OnCheckedChangeListener","null","[]","Optional[// tracks children radio buttons checked state
]","\android\widget\RadioGroup.java"
"mOnCheckedChangeListener","false","false","true","false","false","OnCheckedChangeListener","null","[]","Optional.empty","\android\widget\RadioGroup.java"
"mOnHierarchyChangeListener","false","false","true","false","false","ViewGroup.OnHierarchyChangeListener","null","[]","Optional.empty","\android\widget\RadioGroup.java"
"mPassThroughListener","false","false","true","false","false","PassThroughHierarchyChangeListener","null","[]","Optional.empty","\android\widget\RadioGroup.java"
"mCheckedId","false","false","true","false","false","int","-1","[]","Optional[// holds the checked id; the selection is empty by default
]","\android\widget\RadioGroup.java"
"mProtectFromCheckedChange","false","false","true","false","false","boolean","false","[]","Optional[// when true, mOnCheckedChangeListener discards events
]","\android\widget\RadioGroup.java"
"sUrlMatchFilter","true","false","false","true","true","MatchFilter","new MatchFilter() {

    public final boolean acceptMatch(CharSequence s, int start, int end) {
        if (start == 0) {
            return true;
        }
        if (s.charAt(start - 1) == '@') {
            return false;
        }
        return true;
    }
}","[]","Optional[/**
 * Filters out web URL matches that occur after an at-sign (@).  This is
 * to prevent turning the domain name in an email address into a web link.
 */
]","\android\text\util\Linkify.java"
"MAP_ADDRESSES","true","false","false","true","true","int","0x08","[]","Optional[/**
 * Bit field indicating that street addresses should be matched in methods that
 * take an options mask
 */
]","\android\text\util\Linkify.java"
"PHONE_NUMBERS","true","false","false","true","true","int","0x04","[]","Optional[/**
 * Bit field indicating that phone numbers should be matched in methods that
 * take an options mask
 */
]","\android\text\util\Linkify.java"
"EMAIL_ADDRESSES","true","false","false","true","true","int","0x02","[]","Optional[/**
 * Bit field indicating that email addresses should be matched in methods
 * that take an options mask
 */
]","\android\text\util\Linkify.java"
"WEB_URLS","true","false","false","true","true","int","0x01","[]","Optional[/**
 * Bit field indicating that web URLs should be matched in methods that
 * take an options mask
 */
]","\android\text\util\Linkify.java"
"end","false","false","false","false","false","int","null","[]","Optional.empty","\android\text\util\Linkify.java"
"start","false","false","false","false","false","int","null","[]","Optional.empty","\android\text\util\Linkify.java"
"sPhoneNumberMatchFilter","true","false","false","true","true","MatchFilter","new MatchFilter() {

    public final boolean acceptMatch(CharSequence s, int start, int end) {
        int digitCount = 0;
        for (int i = start; i < end; i++) {
            if (Character.isDigit(s.charAt(i))) {
                digitCount++;
                if (digitCount >= PHONE_NUMBER_MINIMUM_DIGITS) {
                    return true;
                }
            }
        }
        return false;
    }
}","[]","Optional[/**
 * Filters out URL matches that don't have enough digits to be a
 * phone number.
 */
]","\android\text\util\Linkify.java"
"sPhoneNumberTransformFilter","true","false","false","true","true","TransformFilter","new TransformFilter() {

    public final String transformUrl(final Matcher match, String url) {
        return Patterns.digitsAndPlusOnly(match);
    }
}","[]","Optional[/**
 * Transforms matched phone number text into something suitable
 * to be used in a tel: URL.  It does this by removing everything
 * but the digits and plus signs.  For instance:
 * &apos;+1 (919) 555-1212&apos;
 * becomes &apos;+19195551212&apos;
 */
]","\android\text\util\Linkify.java"
"PHONE_NUMBER_MINIMUM_DIGITS","false","false","true","true","true","int","5","[]","Optional[/**
 * Don't treat anything with fewer than this many digits as a
 * phone number.
 */
]","\android\text\util\Linkify.java"
"url","false","false","false","false","false","String","null","[]","Optional.empty","\android\text\util\Linkify.java"
"ALL","true","false","false","true","true","int","WEB_URLS | EMAIL_ADDRESSES | PHONE_NUMBERS | MAP_ADDRESSES","[]","Optional[/**
 * Bit mask indicating that all available patterns should be matched in
 * methods that take an options mask
 */
]","\android\text\util\Linkify.java"
"ACTION_DEVICE_SELECTED","true","false","false","true","true","String","""android.bluetooth.devicepicker.action.DEVICE_SELECTED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast when one BT device is selected from BT device picker screen.
 * Selected {@link BluetoothDevice} is returned in extra data named
 * {@link BluetoothDevice#EXTRA_DEVICE}.
 */
]","\android\bluetooth\BluetoothDevicePicker.java"
"ACTION_LAUNCH","true","false","false","true","true","String","""android.bluetooth.devicepicker.action.LAUNCH""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast when someone want to select one BT device from devices list.
 * This intent contains below extra data:
 * - {@link #EXTRA_NEED_AUTH} (boolean): if need authentication
 * - {@link #EXTRA_FILTER_TYPE} (int): what kinds of device should be
 * listed
 * - {@link #EXTRA_LAUNCH_PACKAGE} (string): where(which package) this
 * intent come from
 * - {@link #EXTRA_LAUNCH_CLASS} (string): where(which class) this intent
 * come from
 */
]","\android\bluetooth\BluetoothDevicePicker.java"
"FILTER_TYPE_TRANSFER","true","false","false","true","true","int","2","[]","Optional[/**
 * Ask device picker to show BT devices that support Object Transfer
 */
]","\android\bluetooth\BluetoothDevicePicker.java"
"FILTER_TYPE_ALL","true","false","false","true","true","int","0","[]","Optional[/**
 * Ask device picker to show all kinds of BT devices
 */
]","\android\bluetooth\BluetoothDevicePicker.java"
"EXTRA_LAUNCH_PACKAGE","true","false","false","true","true","String","""android.bluetooth.devicepicker.extra.LAUNCH_PACKAGE""","[]","Optional.empty","\android\bluetooth\BluetoothDevicePicker.java"
"FILTER_TYPE_AUDIO","true","false","false","true","true","int","1","[]","Optional[/**
 * Ask device picker to show BT devices that support AUDIO profiles
 */
]","\android\bluetooth\BluetoothDevicePicker.java"
"EXTRA_NEED_AUTH","true","false","false","true","true","String","""android.bluetooth.devicepicker.extra.NEED_AUTH""","[]","Optional.empty","\android\bluetooth\BluetoothDevicePicker.java"
"EXTRA_LAUNCH_CLASS","true","false","false","true","true","String","""android.bluetooth.devicepicker.extra.DEVICE_PICKER_LAUNCH_CLASS""","[]","Optional.empty","\android\bluetooth\BluetoothDevicePicker.java"
"EXTRA_FILTER_TYPE","true","false","false","true","true","String","""android.bluetooth.devicepicker.extra.FILTER_TYPE""","[]","Optional.empty","\android\bluetooth\BluetoothDevicePicker.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<SavedState>","new Parcelable.Creator<SavedState>() {

    public SavedState createFromParcel(Parcel in) {
        return new SavedState(in);
    }

    public SavedState[] newArray(int size) {
        return new SavedState[size];
    }
}","[]","Optional.empty","\android\widget\ProgressBar.java"
"mUiThreadId","false","false","true","false","false","long","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"mLastDrawTime","false","false","true","false","false","long","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"mNoInvalidate","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"mId","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"progress","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"mIndeterminateDrawable","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"mSecondaryProgress","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"mMaxWidth","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"mRefreshProgressRunnable","false","false","true","false","false","RefreshProgressRunnable","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"mShouldStartAnimationDrawable","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"secondaryProgress","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"mBehavior","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"mMinWidth","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"mProgress","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"mMinHeight","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"mFromUser","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"mAnimation","false","false","true","false","false","AlphaAnimation","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"MAX_LEVEL","false","false","true","true","true","int","10000","[]","Optional.empty","\android\widget\ProgressBar.java"
"mMaxHeight","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"mProgressDrawable","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"mInterpolator","false","false","true","false","false","Interpolator","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"mDuration","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"mOnlyIndeterminate","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"mSampleTile","false","false","false","false","false","Bitmap","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"mIndeterminate","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"mInDrawing","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"mMax","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"ANIMATION_RESOLUTION","false","false","true","true","true","int","200","[]","Optional.empty","\android\widget\ProgressBar.java"
"mCurrentDrawable","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"mTransformation","false","false","true","false","false","Transformation","null","[]","Optional.empty","\android\widget\ProgressBar.java"
"mFiles","false","false","false","false","false","String","null","[]","Optional.empty","\android\app\backup\AbsoluteFileBackupHelper.java"
"mContext","false","false","false","false","false","Context","null","[]","Optional.empty","\android\app\backup\AbsoluteFileBackupHelper.java"
"TAG","false","false","true","true","true","String","""AbsoluteFileBackupHelper""","[]","Optional.empty","\android\app\backup\AbsoluteFileBackupHelper.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\app\backup\AbsoluteFileBackupHelper.java"
"TYPE_APPLICATION","true","false","false","true","true","int","2","[]","Optional[/**
 * Window type: a normal application window.  The {@link #token} must be
 * an Activity token identifying who the window belongs to.
 */
]","\android\view\WindowManager.java"
"FLAG_KEEP_SURFACE_WHILE_ANIMATING","true","false","false","true","true","int","0x10000000","[]","Optional[/**
 * Window flag: *sigh* The lock screen wants to continue running its
 * animation while it is fading.  A kind-of hack to allow this.  Maybe
 * in the future we just make this the default behavior.
 *
 * {@hide}
 */
]","\android\view\WindowManager.java"
"BUTTON_BRIGHTNESS_CHANGED","true","false","false","true","true","int","1 << 12","[]","Optional[/**
 * {@hide}
 */
]","\android\view\WindowManager.java"
"FLAG_TURN_SCREEN_ON","true","false","false","true","true","int","0x00200000","[]","Optional[/**
 * Window flag: when set as a window is being added or made
 * visible, once the window has been shown then the system will
 * poke the power manager's user activity (as if the user had woken
 * up the device) to turn the screen on.
 */
]","\android\view\WindowManager.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<LayoutParams>","new Parcelable.Creator<LayoutParams>() {

    public LayoutParams createFromParcel(Parcel in) {
        return new LayoutParams(in);
    }

    public LayoutParams[] newArray(int size) {
        return new LayoutParams[size];
    }
}","[]","Optional.empty","\android\view\WindowManager.java"
"TYPE_CHANGED","true","false","false","true","true","int","1 << 1","[]","Optional.empty","\android\view\WindowManager.java"
"MEMORY_TYPE_GPU","true","false","false","true","true","int","2","[@Deprecated]","Optional[/**
 * Memory type: The window's surface is configured to be accessible
 * by graphics accelerators.
 * @deprecated this is ignored, this value is set automatically when needed.
 */
]","\android\view\WindowManager.java"
"FLAGS_CHANGED","true","false","false","true","true","int","1 << 2","[]","Optional.empty","\android\view\WindowManager.java"
"ANIMATION_CHANGED","true","false","false","true","true","int","1 << 4","[]","Optional.empty","\android\view\WindowManager.java"
"SOFT_INPUT_ADJUST_RESIZE","true","false","false","true","true","int","0x10","[]","Optional[/**
 * Adjustment option for {@link #softInputMode}: set to allow the
 * window to be resized when an input
 * method is shown, so that its contents are not covered by the input
 * method.  This can <em>not</em> be combined with
 * {@link #SOFT_INPUT_ADJUST_PAN}; if
 * neither of these are set, then the system will try to pick one or
 * the other depending on the contents of the window.
 */
]","\android\view\WindowManager.java"
"TYPE_INPUT_METHOD_DIALOG","true","false","false","true","true","int","FIRST_SYSTEM_WINDOW + 12","[]","Optional[/**
 * Window type: internal input methods dialog windows, which appear above
 * the current input method window.
 */
]","\android\view\WindowManager.java"
"MEMORY_TYPE_NORMAL","true","false","false","true","true","int","0","[]","Optional[/**
 * Memory type: The window's surface is allocated in main memory.
 */
]","\android\view\WindowManager.java"
"SOFT_INPUT_IS_FORWARD_NAVIGATION","true","false","false","true","true","int","0x100","[]","Optional[/**
 * Bit for {@link #softInputMode}: set when the user has navigated
 * forward to the window.  This is normally set automatically for
 * you by the system, though you may want to set it in certain cases
 * when you are displaying a window yourself.  This flag will always
 * be cleared automatically after the window is displayed.
 */
]","\android\view\WindowManager.java"
"dimAmount","true","false","false","false","false","float","1.0f","[]","Optional[/**
 * When {@link #FLAG_DIM_BEHIND} is set, this is the amount of dimming
 * to apply.  Range is from 1.0 for completely opaque to 0.0 for no
 * dim.
 */
]","\android\view\WindowManager.java"
"horizontalWeight","true","false","false","false","false","float","null","[]","Optional[/**
 * Indicates how much of the extra space will be allocated horizontally
 * to the view associated with these LayoutParams. Specify 0 if the view
 * should not be stretched. Otherwise the extra pixels will be pro-rated
 * among all views whose weight is greater than 0.
 */
]","\android\view\WindowManager.java"
"screenOrientation","true","false","false","false","false","int","ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED","[]","Optional[/**
 * Specific orientation value for a window.
 * May be any of the same values allowed
 * for {@link android.content.pm.ActivityInfo#screenOrientation}.
 * If not set, a default value of
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_UNSPECIFIED}
 * will be used.
 */
]","\android\view\WindowManager.java"
"TYPE_KEYGUARD","true","false","false","true","true","int","FIRST_SYSTEM_WINDOW + 4","[]","Optional[/**
 * Window type: keyguard window.
 */
]","\android\view\WindowManager.java"
"FLAG_DIM_BEHIND","true","false","false","true","true","int","0x00000002","[]","Optional[/**
 * Window flag: everything behind this window will be dimmed.
 * Use {@link #dimAmount} to control the amount of dim.
 */
]","\android\view\WindowManager.java"
"TYPE_BASE_APPLICATION","true","false","false","true","true","int","1","[]","Optional[/**
 * Window type: an application window that serves as the ""base"" window
 * of the overall application; all other application windows will
 * appear on top of it.
 */
]","\android\view\WindowManager.java"
"horizontalMargin","true","false","false","false","false","float","null","[]","Optional[/**
 * The horizontal margin, as a percentage of the container's width,
 * between the container and the widget.
 */
]","\android\view\WindowManager.java"
"FLAG_SHOW_WHEN_LOCKED","true","false","false","true","true","int","0x00080000","[]","Optional[/**
 * Window flag: special flag to let windows be shown when the screen
 * is locked. This will let application windows take precedence over
 * key guard or any other lock screens. Can be used with
 * {@link #FLAG_KEEP_SCREEN_ON} to turn screen on and display windows
 * directly before showing the key guard window.  Can be used with
 * {@link #FLAG_DISMISS_KEYGUARD} to automatically fully dismisss
 * non-secure keyguards.  This flag only applies to the top-most
 * full-screen window.
 */
]","\android\view\WindowManager.java"
"TYPE_SEARCH_BAR","true","false","false","true","true","int","FIRST_SYSTEM_WINDOW + 1","[]","Optional[/**
 * Window type: the search bar.  There can be only one search bar
 * window; it is placed at the top of the screen.
 */
]","\android\view\WindowManager.java"
"SOFT_INPUT_STATE_HIDDEN","true","false","false","true","true","int","2","[]","Optional[/**
 * Visibility state for {@link #softInputMode}: please hide any soft input
 * area when normally appropriate (when the user is navigating
 * forward to your window).
 */
]","\android\view\WindowManager.java"
"TYPE_SYSTEM_ERROR","true","false","false","true","true","int","FIRST_SYSTEM_WINDOW + 10","[]","Optional[/**
 * Window type: internal system error windows, appear on top of
 * everything they can.
 */
]","\android\view\WindowManager.java"
"FLAG_DISMISS_KEYGUARD","true","false","false","true","true","int","0x00400000","[]","Optional[/**
 * Window flag: when set the window will cause the keyguard to
 * be dismissed, only if it is not a secure lock keyguard.  Because such
 * a keyguard is not needed for security, it will never re-appear if
 * the user navigates to another window (in contrast to
 * {@link #FLAG_SHOW_WHEN_LOCKED}, which will only temporarily
 * hide both secure and non-secure keyguards but ensure they reappear
 * when the user moves to another UI that doesn't hide them).
 * If the keyguard is currently active and is secure (requires an
 * unlock pattern) than the user will still need to confirm it before
 * seeing this window, unless {@link #FLAG_SHOW_WHEN_LOCKED} has
 * also been set.
 */
]","\android\view\WindowManager.java"
"x","true","false","false","false","false","int","null","[]","Optional[/**
 * X position for this window.  With the default gravity it is ignored.
 * When using {@link Gravity#LEFT} or {@link Gravity#RIGHT} it provides
 * an offset from the given edge.
 */
]","\android\view\WindowManager.java"
"screenBrightness","true","false","false","false","false","float","BRIGHTNESS_OVERRIDE_NONE","[]","Optional[/**
 * This can be used to override the user's preferred brightness of
 * the screen.  A value of less than 0, the default, means to use the
 * preferred screen brightness.  0 to 1 adjusts the brightness from
 * dark to full bright.
 */
]","\android\view\WindowManager.java"
"y","true","false","false","false","false","int","null","[]","Optional[/**
 * Y position for this window.  With the default gravity it is ignored.
 * When using {@link Gravity#TOP} or {@link Gravity#BOTTOM} it provides
 * an offset from the given edge.
 */
]","\android\view\WindowManager.java"
"FIRST_SYSTEM_WINDOW","true","false","false","true","true","int","2000","[]","Optional[/**
 * Start of system-specific window types.  These are not normally
 * created by applications.
 */
]","\android\view\WindowManager.java"
"FIRST_APPLICATION_WINDOW","true","false","false","true","true","int","1","[]","Optional[/**
 * Start of window types that represent normal application windows.
 */
]","\android\view\WindowManager.java"
"ALPHA_CHANGED","true","false","false","true","true","int","1 << 7","[]","Optional.empty","\android\view\WindowManager.java"
"LAST_SUB_WINDOW","true","false","false","true","true","int","1999","[]","Optional[/**
 * End of types of sub-windows.
 */
]","\android\view\WindowManager.java"
"FLAG_SCALED","true","false","false","true","true","int","0x00004000","[]","Optional[/**
 * Window flag: a special mode where the layout parameters are used
 * to perform scaling of the surface when it is composited to the
 * screen.
 */
]","\android\view\WindowManager.java"
"FLAG_BLUR_BEHIND","true","false","false","true","true","int","0x00000004","[]","Optional[/**
 * Window flag: blur everything behind this window.
 */
]","\android\view\WindowManager.java"
"FLAG_DITHER","true","false","false","true","true","int","0x00001000","[]","Optional[/**
 * Window flag: turn on dithering when compositing this window to
 * the screen.
 */
]","\android\view\WindowManager.java"
"SCREEN_BRIGHTNESS_CHANGED","true","false","false","true","true","int","1 << 11","[]","Optional.empty","\android\view\WindowManager.java"
"TYPE_SYSTEM_ALERT","true","false","false","true","true","int","FIRST_SYSTEM_WINDOW + 3","[]","Optional[/**
 * Window type: system window, such as low power alert. These windows
 * are always on top of application windows.
 */
]","\android\view\WindowManager.java"
"FLAG_COMPATIBLE_WINDOW","true","false","false","true","true","int","0x20000000","[]","Optional[/**
 * Window flag: special flag to limit the size of the window to be
 * original size ([320x480] x density). Used to create window for applications
 * running under compatibility mode.
 *
 * {@hide}
 */
]","\android\view\WindowManager.java"
"MEMORY_TYPE_HARDWARE","true","false","false","true","true","int","1","[@Deprecated]","Optional[/**
 * Memory type: The window's surface is configured to be accessible
 * by DMA engines and hardware accelerators.
 * @deprecated this is ignored, this value is set automatically when needed.
 */
]","\android\view\WindowManager.java"
"BRIGHTNESS_OVERRIDE_NONE","true","false","false","true","true","float","-1.0f","[]","Optional[/**
 * Default value for {@link #screenBrightness} and {@link #buttonBrightness}
 * indicating that the brightness value is not overridden for this window
 * and normal brightness policy should be used.
 */
]","\android\view\WindowManager.java"
"SCREEN_ORIENTATION_CHANGED","true","false","false","true","true","int","1 << 10","[]","Optional.empty","\android\view\WindowManager.java"
"FLAG_TOUCHABLE_WHEN_WAKING","true","false","false","true","true","int","0x00000040","[]","Optional[/**
 * Window flag: When set, if the device is asleep when the touch
 * screen is pressed, you will receive this first touch event.  Usually
 * the first touch event is consumed by the system since the user can
 * not see what they are pressing on.
 */
]","\android\view\WindowManager.java"
"TYPE_APPLICATION_ATTACHED_DIALOG","true","false","false","true","true","int","FIRST_SUB_WINDOW + 3","[]","Optional[/**
 * Window type: like {@link #TYPE_APPLICATION_PANEL}, but layout
 * of the window happens as that of a top-level window, <em>not</em>
 * as a child of its container.
 */
]","\android\view\WindowManager.java"
"SOFT_INPUT_ADJUST_PAN","true","false","false","true","true","int","0x20","[]","Optional[/**
 * Adjustment option for {@link #softInputMode}: set to have a window
 * pan when an input method is
 * shown, so it doesn't need to deal with resizing but just panned
 * by the framework to ensure the current input focus is visible.  This
 * can <em>not</em> be combined with {@link #SOFT_INPUT_ADJUST_RESIZE}; if
 * neither of these are set, then the system will try to pick one or
 * the other depending on the contents of the window.
 */
]","\android\view\WindowManager.java"
"LAYOUT_CHANGED","true","false","false","true","true","int","1 << 0","[@SuppressWarnings({ ""PointlessBitwiseExpression"" })]","Optional.empty","\android\view\WindowManager.java"
"FLAG_KEEP_SCREEN_ON","true","false","false","true","true","int","0x00000080","[]","Optional[/**
 * Window flag: as long as this window is visible to the user, keep
 * the device's screen turned on and bright.
 */
]","\android\view\WindowManager.java"
"mCompatibilityParamsBackup","false","false","true","false","false","int","null","[]","Optional[// internal buffer to backup/restore parameters under compatibility mode.
]","\android\view\WindowManager.java"
"TYPE_APPLICATION_STARTING","true","false","false","true","true","int","3","[]","Optional[/**
 * Window type: special application window that is displayed while the
 * application is starting.  Not for use by applications themselves;
 * this is used by the system to display something until the
 * application can show its own windows.
 */
]","\android\view\WindowManager.java"
"LAST_SYSTEM_WINDOW","true","false","false","true","true","int","2999","[]","Optional[/**
 * End of types of system windows.
 */
]","\android\view\WindowManager.java"
"alpha","true","false","false","false","false","float","1.0f","[]","Optional[/**
 * An alpha value to apply to this entire window.
 * An alpha of 1.0 means fully opaque and 0.0 means fully transparent
 */
]","\android\view\WindowManager.java"
"TYPE_STATUS_BAR","true","false","false","true","true","int","FIRST_SYSTEM_WINDOW","[]","Optional[/**
 * Window type: the status bar.  There can be only one status bar
 * window; it is placed at the top of the screen, and all other
 * windows are shifted down so they are below it.
 */
]","\android\view\WindowManager.java"
"TITLE_CHANGED","true","false","false","true","true","int","1 << 6","[]","Optional.empty","\android\view\WindowManager.java"
"FLAG_NOT_TOUCH_MODAL","true","false","false","true","true","int","0x00000020","[]","Optional[/**
 * Window flag: Even when this window is focusable (its
 * {@link #FLAG_NOT_FOCUSABLE is not set), allow any pointer events
 * outside of the window to be sent to the windows behind it.  Otherwise
 * it will consume all pointer events itself, regardless of whether they
 * are inside of the window.
 */
]","\android\view\WindowManager.java"
"FLAG_LAYOUT_NO_LIMITS","true","false","false","true","true","int","0x00000200","[]","Optional[/**
 * Window flag: allow window to extend outside of the screen.
 */
]","\android\view\WindowManager.java"
"TYPE_INPUT_METHOD","true","false","false","true","true","int","FIRST_SYSTEM_WINDOW + 11","[]","Optional[/**
 * Window type: internal input methods windows, which appear above
 * the normal UI.  Application windows may be resized or panned to keep
 * the input focus visible while this window is displayed.
 */
]","\android\view\WindowManager.java"
"LAST_APPLICATION_WINDOW","true","false","false","true","true","int","99","[]","Optional[/**
 * End of types of application windows.
 */
]","\android\view\WindowManager.java"
"SOFT_INPUT_STATE_UNSPECIFIED","true","false","false","true","true","int","0","[]","Optional[/**
 * Visibility state for {@link #softInputMode}: no state has been specified.
 */
]","\android\view\WindowManager.java"
"gravity","true","false","false","false","false","int","null","[]","Optional[/**
 * Placement of window within the screen as per {@link Gravity}
 *
 * @see Gravity
 */
]","\android\view\WindowManager.java"
"TYPE_PHONE","true","false","false","true","true","int","FIRST_SYSTEM_WINDOW + 2","[]","Optional[/**
 * Window type: phone.  These are non-application windows providing
 * user interaction with the phone (in particular incoming calls).
 * These windows are normally placed above all applications, but behind
 * the status bar.
 */
]","\android\view\WindowManager.java"
"TYPE_SYSTEM_OVERLAY","true","false","false","true","true","int","FIRST_SYSTEM_WINDOW + 6","[]","Optional[/**
 * Window type: system overlay windows, which need to be displayed
 * on top of everything else.  These windows must not take input
 * focus, or they will interfere with the keyguard.
 */
]","\android\view\WindowManager.java"
"FLAG_WATCH_OUTSIDE_TOUCH","true","false","false","true","true","int","0x00040000","[]","Optional[/**
 * Window flag: if you have set {@link #FLAG_NOT_TOUCH_MODAL}, you
 * can set this flag to receive a single special MotionEvent with
 * the action
 * {@link MotionEvent#ACTION_OUTSIDE MotionEvent.ACTION_OUTSIDE} for
 * touches that occur outside of your window.  Note that you will not
 * receive the full down/move/up gesture, only the location of the
 * first down as an ACTION_OUTSIDE.
 */
]","\android\view\WindowManager.java"
"FLAG_LAYOUT_INSET_DECOR","true","false","false","true","true","int","0x00010000","[]","Optional[/**
 * Window flag: a special option only for use in combination with
 * {@link #FLAG_LAYOUT_IN_SCREEN}.  When requesting layout in the
 * screen your window may appear on top of or behind screen decorations
 * such as the status bar.  By also including this flag, the window
 * manager will report the inset rectangle needed to ensure your
 * content is not covered by screen decorations.  This flag is normally
 * set for you by Window as described in {@link Window#setFlags}.
 */
]","\android\view\WindowManager.java"
"TYPE_PRIORITY_PHONE","true","false","false","true","true","int","FIRST_SYSTEM_WINDOW + 7","[]","Optional[/**
 * Window type: priority phone UI, which needs to be displayed even if
 * the keyguard is active.  These windows must not take input
 * focus, or they will interfere with the keyguard.
 */
]","\android\view\WindowManager.java"
"FORMAT_CHANGED","true","false","false","true","true","int","1 << 3","[]","Optional.empty","\android\view\WindowManager.java"
"type","true","false","false","false","false","int","null","[@ViewDebug.ExportedProperty(mapping = { @ViewDebug.IntToString(from = TYPE_BASE_APPLICATION, to = ""TYPE_BASE_APPLICATION""), @ViewDebug.IntToString(from = TYPE_APPLICATION, to = ""TYPE_APPLICATION""), @ViewDebug.IntToString(from = TYPE_APPLICATION_STARTING, to = ""TYPE_APPLICATION_STARTING""), @ViewDebug.IntToString(from = TYPE_APPLICATION_PANEL, to = ""TYPE_APPLICATION_PANEL""), @ViewDebug.IntToString(from = TYPE_APPLICATION_MEDIA, to = ""TYPE_APPLICATION_MEDIA""), @ViewDebug.IntToString(from = TYPE_APPLICATION_SUB_PANEL, to = ""TYPE_APPLICATION_SUB_PANEL""), @ViewDebug.IntToString(from = TYPE_APPLICATION_ATTACHED_DIALOG, to = ""TYPE_APPLICATION_ATTACHED_DIALOG""), @ViewDebug.IntToString(from = TYPE_STATUS_BAR, to = ""TYPE_STATUS_BAR""), @ViewDebug.IntToString(from = TYPE_SEARCH_BAR, to = ""TYPE_SEARCH_BAR""), @ViewDebug.IntToString(from = TYPE_PHONE, to = ""TYPE_PHONE""), @ViewDebug.IntToString(from = TYPE_SYSTEM_ALERT, to = ""TYPE_SYSTEM_ALERT""), @ViewDebug.IntToString(from = TYPE_KEYGUARD, to = ""TYPE_KEYGUARD""), @ViewDebug.IntToString(from = TYPE_TOAST, to = ""TYPE_TOAST""), @ViewDebug.IntToString(from = TYPE_SYSTEM_OVERLAY, to = ""TYPE_SYSTEM_OVERLAY""), @ViewDebug.IntToString(from = TYPE_PRIORITY_PHONE, to = ""TYPE_PRIORITY_PHONE""), @ViewDebug.IntToString(from = TYPE_STATUS_BAR_PANEL, to = ""TYPE_STATUS_BAR_PANEL""), @ViewDebug.IntToString(from = TYPE_SYSTEM_DIALOG, to = ""TYPE_SYSTEM_DIALOG""), @ViewDebug.IntToString(from = TYPE_KEYGUARD_DIALOG, to = ""TYPE_KEYGUARD_DIALOG""), @ViewDebug.IntToString(from = TYPE_SYSTEM_ERROR, to = ""TYPE_SYSTEM_ERROR""), @ViewDebug.IntToString(from = TYPE_INPUT_METHOD, to = ""TYPE_INPUT_METHOD""), @ViewDebug.IntToString(from = TYPE_INPUT_METHOD_DIALOG, to = ""TYPE_INPUT_METHOD_DIALOG""), @ViewDebug.IntToString(from = TYPE_SECURE_SYSTEM_OVERLAY, to = ""TYPE_SECURE_SYSTEM_OVERLAY"") })]","Optional[/**
 * The general type of window.  There are three main classes of
 * window types:
 * <ul>
 * <li> <strong>Application windows</strong> (ranging from
 * {@link #FIRST_APPLICATION_WINDOW} to
 * {@link #LAST_APPLICATION_WINDOW}) are normal top-level application
 * windows.  For these types of windows, the {@link #token} must be
 * set to the token of the activity they are a part of (this will
 * normally be done for you if {@link #token} is null).
 * <li> <strong>Sub-windows</strong> (ranging from
 * {@link #FIRST_SUB_WINDOW} to
 * {@link #LAST_SUB_WINDOW}) are associated with another top-level
 * window.  For these types of windows, the {@link #token} must be
 * the token of the window it is attached to.
 * <li> <strong>System windows</strong> (ranging from
 * {@link #FIRST_SYSTEM_WINDOW} to
 * {@link #LAST_SYSTEM_WINDOW}) are special types of windows for
 * use by the system for specific purposes.  They should not normally
 * be used by applications, and a special permission is required
 * to use them.
 * </ul>
 *
 * @see #TYPE_BASE_APPLICATION
 * @see #TYPE_APPLICATION
 * @see #TYPE_APPLICATION_STARTING
 * @see #TYPE_APPLICATION_PANEL
 * @see #TYPE_APPLICATION_MEDIA
 * @see #TYPE_APPLICATION_SUB_PANEL
 * @see #TYPE_APPLICATION_ATTACHED_DIALOG
 * @see #TYPE_STATUS_BAR
 * @see #TYPE_SEARCH_BAR
 * @see #TYPE_PHONE
 * @see #TYPE_SYSTEM_ALERT
 * @see #TYPE_KEYGUARD
 * @see #TYPE_TOAST
 * @see #TYPE_SYSTEM_OVERLAY
 * @see #TYPE_PRIORITY_PHONE
 * @see #TYPE_STATUS_BAR_PANEL
 * @see #TYPE_SYSTEM_DIALOG
 * @see #TYPE_KEYGUARD_DIALOG
 * @see #TYPE_SYSTEM_ERROR
 * @see #TYPE_INPUT_METHOD
 * @see #TYPE_INPUT_METHOD_DIALOG
 */
]","\android\view\WindowManager.java"
"SOFT_INPUT_STATE_VISIBLE","true","false","false","true","true","int","4","[]","Optional[/**
 * Visibility state for {@link #softInputMode}: please show the soft
 * input area when normally appropriate (when the user is navigating
 * forward to your window).
 */
]","\android\view\WindowManager.java"
"SOFT_INPUT_STATE_UNCHANGED","true","false","false","true","true","int","1","[]","Optional[/**
 * Visibility state for {@link #softInputMode}: please don't change the state of
 * the soft input area.
 */
]","\android\view\WindowManager.java"
"FLAG_LAYOUT_IN_SCREEN","true","false","false","true","true","int","0x00000100","[]","Optional[/**
 * Window flag: place the window within the entire screen, ignoring
 * decorations around the border (a.k.a. the status bar).  The
 * window must correctly position its contents to take the screen
 * decoration into account.  This flag is normally set for you
 * by Window as described in {@link Window#setFlags}.
 */
]","\android\view\WindowManager.java"
"FLAG_SHOW_WALLPAPER","true","false","false","true","true","int","0x00100000","[]","Optional[/**
 * Window flag: ask that the system wallpaper be shown behind
 * your window.  The window surface must be translucent to be able
 * to actually see the wallpaper behind it; this flag just ensures
 * that the wallpaper surface will be there if this window actually
 * has translucent regions.
 */
]","\android\view\WindowManager.java"
"FLAG_ALLOW_LOCK_WHILE_SCREEN_ON","true","false","false","true","true","int","0x00000001","[]","Optional[/**
 * Window flag: as long as this window is visible to the user, allow
 * the lock screen to activate while the screen is on.
 * This can be used independently, or in combination with
 * {@link #FLAG_KEEP_SCREEN_ON} and/or {@link #FLAG_SHOW_WHEN_LOCKED}
 */
]","\android\view\WindowManager.java"
"TYPE_SYSTEM_DIALOG","true","false","false","true","true","int","FIRST_SYSTEM_WINDOW + 8","[]","Optional[/**
 * Window type: panel that slides out from the status bar
 */
]","\android\view\WindowManager.java"
"FLAG_FORCE_NOT_FULLSCREEN","true","false","false","true","true","int","0x00000800","[]","Optional[/**
 * Window flag: Override {@link #FLAG_FULLSCREEN and force the
 * screen decorations (such as status bar) to be shown.
 */
]","\android\view\WindowManager.java"
"FIRST_SUB_WINDOW","true","false","false","true","true","int","1000","[]","Optional[/**
 * Start of types of sub-windows.  The {@link #token} of these windows
 * must be set to the window they are attached to.  These types of
 * windows are kept next to their attached window in Z-order, and their
 * coordinate space is relative to their attached window.
 */
]","\android\view\WindowManager.java"
"mTitle","false","false","true","false","false","CharSequence","""""","[]","Optional.empty","\android\view\WindowManager.java"
"SOFT_INPUT_STATE_ALWAYS_HIDDEN","true","false","false","true","true","int","3","[]","Optional[/**
 * Visibility state for {@link #softInputMode}: please always hide any
 * soft input area when this window receives focus.
 */
]","\android\view\WindowManager.java"
"FLAG_SYSTEM_ERROR","true","false","false","true","true","int","0x40000000","[]","Optional[/**
 * Window flag: a special option intended for system dialogs.  When
 * this flag is set, the window will demand focus unconditionally when
 * it is created.
 * {@hide}
 */
]","\android\view\WindowManager.java"
"SOFT_INPUT_ADJUST_UNSPECIFIED","true","false","false","true","true","int","0x00","[]","Optional[/**
 * Adjustment option for {@link #softInputMode}: nothing specified.
 * The system will try to pick one or
 * the other depending on the contents of the window.
 */
]","\android\view\WindowManager.java"
"MEMORY_TYPE_PUSH_BUFFERS","true","false","false","true","true","int","3","[]","Optional[/**
 * Memory type: The window's surface doesn't own its buffers and
 * therefore cannot be locked. Instead the buffers are pushed to
 * it through native binder calls.
 */
]","\android\view\WindowManager.java"
"TYPE_APPLICATION_MEDIA","true","false","false","true","true","int","FIRST_SUB_WINDOW + 1","[]","Optional[/**
 * Window type: window for showing media (e.g. video).  These windows
 * are displayed behind their attached window.
 */
]","\android\view\WindowManager.java"
"BRIGHTNESS_OVERRIDE_OFF","true","false","false","true","true","float","0.0f","[]","Optional[/**
 * Value for {@link #screenBrightness} and {@link #buttonBrightness}
 * indicating that the screen or button backlight brightness should be set
 * to the lowest value when this window is in front.
 */
]","\android\view\WindowManager.java"
"flags","true","false","false","false","false","int","null","[@ViewDebug.ExportedProperty(flagMapping = { @ViewDebug.FlagToString(mask = FLAG_BLUR_BEHIND, equals = FLAG_BLUR_BEHIND, name = ""FLAG_BLUR_BEHIND""), @ViewDebug.FlagToString(mask = FLAG_DIM_BEHIND, equals = FLAG_DIM_BEHIND, name = ""FLAG_DIM_BEHIND""), @ViewDebug.FlagToString(mask = FLAG_NOT_FOCUSABLE, equals = FLAG_NOT_FOCUSABLE, name = ""FLAG_NOT_FOCUSABLE""), @ViewDebug.FlagToString(mask = FLAG_NOT_TOUCHABLE, equals = FLAG_NOT_TOUCHABLE, name = ""FLAG_NOT_TOUCHABLE""), @ViewDebug.FlagToString(mask = FLAG_NOT_TOUCH_MODAL, equals = FLAG_NOT_TOUCH_MODAL, name = ""FLAG_NOT_TOUCH_MODAL""), @ViewDebug.FlagToString(mask = FLAG_LAYOUT_IN_SCREEN, equals = FLAG_LAYOUT_IN_SCREEN, name = ""FLAG_LAYOUT_IN_SCREEN""), @ViewDebug.FlagToString(mask = FLAG_DITHER, equals = FLAG_DITHER, name = ""FLAG_DITHER""), @ViewDebug.FlagToString(mask = FLAG_TURN_SCREEN_ON, equals = FLAG_TURN_SCREEN_ON, name = ""FLAG_TURN_SCREEN_ON""), @ViewDebug.FlagToString(mask = FLAG_KEEP_SCREEN_ON, equals = FLAG_KEEP_SCREEN_ON, name = ""FLAG_KEEP_SCREEN_ON""), @ViewDebug.FlagToString(mask = FLAG_SHOW_WHEN_LOCKED, equals = FLAG_SHOW_WHEN_LOCKED, name = ""FLAG_SHOW_WHEN_LOCKED""), @ViewDebug.FlagToString(mask = FLAG_ALLOW_LOCK_WHILE_SCREEN_ON, equals = FLAG_ALLOW_LOCK_WHILE_SCREEN_ON, name = ""FLAG_ALLOW_LOCK_WHILE_SCREEN_ON""), @ViewDebug.FlagToString(mask = FLAG_DISMISS_KEYGUARD, equals = FLAG_DISMISS_KEYGUARD, name = ""FLAG_DISMISS_KEYGUARD""), @ViewDebug.FlagToString(mask = FLAG_FULLSCREEN, equals = FLAG_FULLSCREEN, name = ""FLAG_FULLSCREEN""), @ViewDebug.FlagToString(mask = FLAG_FORCE_NOT_FULLSCREEN, equals = FLAG_FORCE_NOT_FULLSCREEN, name = ""FLAG_FORCE_NOT_FULLSCREEN""), @ViewDebug.FlagToString(mask = FLAG_IGNORE_CHEEK_PRESSES, equals = FLAG_IGNORE_CHEEK_PRESSES, name = ""FLAG_IGNORE_CHEEK_PRESSES"") })]","Optional[/**
 * Various behavioral options/flags.  Default is none.
 *
 * @see #FLAG_BLUR_BEHIND
 * @see #FLAG_DIM_BEHIND
 * @see #FLAG_NOT_FOCUSABLE
 * @see #FLAG_NOT_TOUCHABLE
 * @see #FLAG_NOT_TOUCH_MODAL
 * @see #FLAG_LAYOUT_IN_SCREEN
 * @see #FLAG_DITHER
 * @see #FLAG_KEEP_SCREEN_ON
 * @see #FLAG_FULLSCREEN
 * @see #FLAG_FORCE_NOT_FULLSCREEN
 * @see #FLAG_IGNORE_CHEEK_PRESSES
 */
]","\android\view\WindowManager.java"
"MEMORY_TYPE_CHANGED","true","false","false","true","true","int","1 << 8","[]","Optional.empty","\android\view\WindowManager.java"
"FLAG_NOT_FOCUSABLE","true","false","false","true","true","int","0x00000008","[]","Optional[/**
 * Window flag: this window won't ever get key input focus, so the
 * user can not send key or other button events to it.  Those will
 * instead go to whatever focusable window is behind it.  This flag
 * will also enable {@link #FLAG_NOT_TOUCH_MODAL} whether or not that
 * is explicitly set.
 *
 * <p>Setting this flag also implies that the window will not need to
 * interact with
 * a soft input method, so it will be Z-ordered and positioned
 * independently of any active input method (typically this means it
 * gets Z-ordered on top of the input method, so it can use the full
 * screen for its content and cover the input method if needed.  You
 * can use {@link #FLAG_ALT_FOCUSABLE_IM} to modify this behavior.
 */
]","\android\view\WindowManager.java"
"BRIGHTNESS_OVERRIDE_FULL","true","false","false","true","true","float","1.0f","[]","Optional[/**
 * Value for {@link #screenBrightness} and {@link #buttonBrightness}
 * indicating that the screen or button backlight brightness should be set
 * to the hightest value when this window is in front.
 */
]","\android\view\WindowManager.java"
"DIM_AMOUNT_CHANGED","true","false","false","true","true","int","1 << 5","[]","Optional.empty","\android\view\WindowManager.java"
"windowAnimations","true","false","false","false","false","int","null","[]","Optional[/**
 * A style resource defining the animations to use for this window.
 * This must be a system resource; it can not be an application resource
 * because the window manager does not have access to applications.
 */
]","\android\view\WindowManager.java"
"TYPE_KEYGUARD_DIALOG","true","false","false","true","true","int","FIRST_SYSTEM_WINDOW + 9","[]","Optional[/**
 * Window type: dialogs that the keyguard shows
 */
]","\android\view\WindowManager.java"
"SOFT_INPUT_STATE_ALWAYS_VISIBLE","true","false","false","true","true","int","5","[]","Optional[/**
 * Visibility state for {@link #softInputMode}: please always make the
 * soft input area visible when this window receives input focus.
 */
]","\android\view\WindowManager.java"
"TYPE_SECURE_SYSTEM_OVERLAY","true","false","false","true","true","int","FIRST_SYSTEM_WINDOW + 15","[]","Optional[/**
 * Window type: secure system overlay windows, which need to be displayed
 * on top of everything else.  These windows must not take input
 * focus, or they will interfere with the keyguard.
 *
 * This is exactly like {@link #TYPE_SYSTEM_OVERLAY} except that only the
 * system itself is allowed to create these overlays.  Applications cannot
 * obtain permission to create secure system overlays.
 * @hide
 */
]","\android\view\WindowManager.java"
"verticalWeight","true","false","false","false","false","float","null","[]","Optional[/**
 * Indicates how much of the extra space will be allocated vertically
 * to the view associated with these LayoutParams. Specify 0 if the view
 * should not be stretched. Otherwise the extra pixels will be pro-rated
 * among all views whose weight is greater than 0.
 */
]","\android\view\WindowManager.java"
"verticalMargin","true","false","false","false","false","float","null","[]","Optional[/**
 * The vertical margin, as a percentage of the container's height,
 * between the container and the widget.
 */
]","\android\view\WindowManager.java"
"FLAG_ALT_FOCUSABLE_IM","true","false","false","true","true","int","0x00020000","[]","Optional[/**
 * Window flag: invert the state of {@link #FLAG_NOT_FOCUSABLE} with
 * respect to how this window interacts with the current method.  That
 * is, if FLAG_NOT_FOCUSABLE is set and this flag is set, then the
 * window will behave as if it needs to interact with the input method
 * and thus be placed behind/away from it; if FLAG_NOT_FOCUSABLE is
 * not set and this flag is set, then the window will behave as if it
 * doesn't need to interact with the input method and can be placed
 * to use more space and cover the input method.
 */
]","\android\view\WindowManager.java"
"token","true","false","false","false","false","IBinder","null","[]","Optional[/**
 * Identifier for this window.  This will usually be filled in for
 * you.
 */
]","\android\view\WindowManager.java"
"FLAG_SECURE","true","false","false","true","true","int","0x00002000","[]","Optional[/**
 * Window flag: don't allow screen shots while this window is
 * displayed.
 */
]","\android\view\WindowManager.java"
"FLAG_NOT_TOUCHABLE","true","false","false","true","true","int","0x00000010","[]","Optional[/**
 * Window flag: this window can never receive touch events.
 */
]","\android\view\WindowManager.java"
"memoryType","true","false","false","false","false","int","null","[]","Optional[/**
 * Specifies what type of memory buffers should be used by this window.
 * Default is normal.
 *
 * @see #MEMORY_TYPE_NORMAL
 * @see #MEMORY_TYPE_PUSH_BUFFERS
 */
]","\android\view\WindowManager.java"
"FLAG_IGNORE_CHEEK_PRESSES","true","false","false","true","true","int","0x00008000","[]","Optional[/**
 * Window flag: intended for windows that will often be used when the user is
 * holding the screen against their face, it will aggressively filter the event
 * stream to prevent unintended presses in this situation that may not be
 * desired for a particular window, when such an event stream is detected, the
 * application will receive a CANCEL motion event to indicate this so applications
 * can handle this accordingly by taking no action on the event
 * until the finger is released.
 */
]","\android\view\WindowManager.java"
"buttonBrightness","true","false","false","false","false","float","BRIGHTNESS_OVERRIDE_NONE","[]","Optional[/**
 * This can be used to override the standard behavior of the button and
 * keyboard backlights.  A value of less than 0, the default, means to
 * use the standard backlight behavior.  0 to 1 adjusts the brightness
 * from dark to full bright.
 */
]","\android\view\WindowManager.java"
"TYPE_WALLPAPER","true","false","false","true","true","int","FIRST_SYSTEM_WINDOW + 13","[]","Optional[/**
 * Window type: wallpaper window, placed behind any window that wants
 * to sit on top of the wallpaper.
 */
]","\android\view\WindowManager.java"
"format","true","false","false","false","false","int","null","[]","Optional[/**
 * The desired bitmap format.  May be one of the constants in
 * {@link android.graphics.PixelFormat}.  Default is OPAQUE.
 */
]","\android\view\WindowManager.java"
"SOFT_INPUT_MODE_CHANGED","true","false","false","true","true","int","1 << 9","[]","Optional.empty","\android\view\WindowManager.java"
"TYPE_APPLICATION_MEDIA_OVERLAY","true","false","false","true","true","int","FIRST_SUB_WINDOW + 4","[]","Optional[/**
 * Window type: window for showing overlays on top of media windows.
 * These windows are displayed between TYPE_APPLICATION_MEDIA and the
 * application window.  They should be translucent to be useful.  This
 * is a big ugly hack so:
 * @hide
 */
]","\android\view\WindowManager.java"
"SOFT_INPUT_MASK_STATE","true","false","false","true","true","int","0x0f","[]","Optional[/**
 * Mask for {@link #softInputMode} of the bits that determine the
 * desired visibility state of the soft input area for this window.
 */
]","\android\view\WindowManager.java"
"TYPE_APPLICATION_SUB_PANEL","true","false","false","true","true","int","FIRST_SUB_WINDOW + 2","[]","Optional[/**
 * Window type: a sub-panel on top of an application window.  These
 * windows are displayed on top their attached window and any
 * {@link #TYPE_APPLICATION_PANEL} panels.
 */
]","\android\view\WindowManager.java"
"TYPE_STATUS_BAR_PANEL","true","false","false","true","true","int","FIRST_SYSTEM_WINDOW + 14","[]","Optional[/**
 * Window type: panel that slides out from the status bar
 */
]","\android\view\WindowManager.java"
"TYPE_APPLICATION_PANEL","true","false","false","true","true","int","FIRST_SUB_WINDOW","[]","Optional[/**
 * Window type: a panel on top of an application window.  These windows
 * appear on top of their attached window.
 */
]","\android\view\WindowManager.java"
"FLAG_FULLSCREEN","true","false","false","true","true","int","0x00000400","[]","Optional[/**
 * Window flag: Hide all screen decorations (e.g. status bar) while
 * this window is displayed.  This allows the window to use the entire
 * display space for itself -- the status bar will be hidden when
 * an app window with this flag set is on the top layer.
 */
]","\android\view\WindowManager.java"
"packageName","true","false","false","false","false","String","null","[]","Optional[/**
 * Name of the package owning this window.
 */
]","\android\view\WindowManager.java"
"FLAG_SPLIT_TOUCH","true","false","false","true","true","int","0x00800000","[]","Optional[/**
 * Window flag: when set the window will accept for touch events
 * outside of its bounds to be sent to other windows that also
 * support split touch.  When this flag is not set, the first pointer
 * that goes down determines the window to which all subsequent touches
 * go until all pointers go up.  When this flag is set, each pointer
 * (not necessarily the first) that goes down determines the window
 * to which all subsequent touches of that pointer will go until that
 * pointer goes up thereby enabling touches with multiple pointers
 * to be split across multiple windows.
 *
 * {@hide}
 */
]","\android\view\WindowManager.java"
"SOFT_INPUT_MASK_ADJUST","true","false","false","true","true","int","0xf0","[]","Optional[/**
 * Mask for {@link #softInputMode} of the bits that determine the
 * way that the window should be adjusted to accommodate the soft
 * input window.
 */
]","\android\view\WindowManager.java"
"TYPE_TOAST","true","false","false","true","true","int","FIRST_SYSTEM_WINDOW + 5","[]","Optional[/**
 * Window type: transient notifications.
 */
]","\android\view\WindowManager.java"
"softInputMode","true","false","false","false","false","int","null","[]","Optional[/**
 * Desired operating mode for any soft input area.  May any combination
 * of:
 *
 * <ul>
 * <li> One of the visibility states
 * {@link #SOFT_INPUT_STATE_UNSPECIFIED}, {@link #SOFT_INPUT_STATE_UNCHANGED},
 * {@link #SOFT_INPUT_STATE_HIDDEN}, {@link #SOFT_INPUT_STATE_ALWAYS_VISIBLE}, or
 * {@link #SOFT_INPUT_STATE_VISIBLE}.
 * <li> One of the adjustment options
 * {@link #SOFT_INPUT_ADJUST_UNSPECIFIED},
 * {@link #SOFT_INPUT_ADJUST_RESIZE}, or
 * {@link #SOFT_INPUT_ADJUST_PAN}.
 */
]","\android\view\WindowManager.java"
"mColumns","false","false","true","false","false","HashMap<String,Integer>","null","[]","Optional.empty","\android\database\DatabaseUtils.java"
"LOCAL_LOGV","false","false","true","true","true","boolean","DEBUG ? Config.LOGD : Config.LOGV","[]","Optional.empty","\android\database\DatabaseUtils.java"
"mReplaceStatement","false","false","true","false","false","SQLiteStatement","null","[]","Optional.empty","\android\database\DatabaseUtils.java"
"mInsertStatement","false","false","true","false","false","SQLiteStatement","null","[]","Optional.empty","\android\database\DatabaseUtils.java"
"mColl","false","false","true","true","false","Collator","null","[]","Optional.empty","\android\database\DatabaseUtils.java"
"countProjection","false","false","true","true","true","String","new String[] { ""count(*)"" }","[]","Optional.empty","\android\database\DatabaseUtils.java"
"mPreparedStatement","false","false","true","false","false","SQLiteStatement","null","[]","Optional.empty","\android\database\DatabaseUtils.java"
"TABLE_INFO_PRAGMA_DEFAULT_INDEX","true","false","false","true","true","int","4","[]","Optional.empty","\android\database\DatabaseUtils.java"
"TABLE_INFO_PRAGMA_COLUMNNAME_INDEX","true","false","false","true","true","int","1","[]","Optional[/**
 * {@hide}
 *
 * These are the columns returned by sqlite's ""PRAGMA
 * table_info(...)"" command that we depend on.
 */
]","\android\database\DatabaseUtils.java"
"TAG","false","false","true","true","true","String","""DatabaseUtils""","[]","Optional.empty","\android\database\DatabaseUtils.java"
"mTableName","false","false","true","false","true","String","null","[]","Optional.empty","\android\database\DatabaseUtils.java"
"mInsertSQL","false","false","true","false","false","String","null","[]","Optional.empty","\android\database\DatabaseUtils.java"
"mDb","false","false","true","false","true","SQLiteDatabase","null","[]","Optional.empty","\android\database\DatabaseUtils.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\database\DatabaseUtils.java"
"mMajorWeight","false","false","true","false","false","float","null","[]","Optional.empty","\com\android\internal\widget\WeightedLinearLayout.java"
"mMinorWeight","false","false","true","false","false","float","null","[]","Optional.empty","\com\android\internal\widget\WeightedLinearLayout.java"
"mTriedToNotifyBeforeReady","false","false","true","false","false","boolean","null","[]","Optional[// is ready.
]","\android\webkit\JsResult.java"
"mProxy","false","true","false","false","true","CallbackProxy","null","[]","Optional[/**
 * This is the caller of the prompt and is the object that is waiting.
 * @hide
 */
]","\android\webkit\JsResult.java"
"mDefaultValue","false","false","true","false","true","boolean","null","[]","Optional[// This is the default value of the result.
]","\android\webkit\JsResult.java"
"mResult","false","true","false","false","false","boolean","null","[]","Optional[// This is a basic result of a confirm or prompt dialog.
]","\android\webkit\JsResult.java"
"mReady","false","false","true","false","false","boolean","null","[]","Optional[// ready to handle it.
]","\android\webkit\JsResult.java"
"CREATOR","true","false","false","true","true","Creator<ConfigurationInfo>","new Creator<ConfigurationInfo>() {

    public ConfigurationInfo createFromParcel(Parcel source) {
        return new ConfigurationInfo(source);
    }

    public ConfigurationInfo[] newArray(int size) {
        return new ConfigurationInfo[size];
    }
}","[]","Optional.empty","\android\content\pm\ConfigurationInfo.java"
"GL_ES_VERSION_UNDEFINED","true","false","false","true","true","int","0","[]","Optional[/**
 * Default value for {@link #reqGlEsVersion};
 */
]","\android\content\pm\ConfigurationInfo.java"
"reqGlEsVersion","true","false","false","false","false","int","null","[]","Optional[/**
 * The GLES version used by an application. The upper order 16 bits represent the
 * major version and the lower order 16 bits the minor version.
 */
]","\android\content\pm\ConfigurationInfo.java"
"reqInputFeatures","true","false","false","false","false","int","0","[]","Optional[/**
 * Flags associated with the input features.  Any combination of
 * {@link #INPUT_FEATURE_HARD_KEYBOARD},
 * {@link #INPUT_FEATURE_FIVE_WAY_NAV}
 */
]","\android\content\pm\ConfigurationInfo.java"
"INPUT_FEATURE_HARD_KEYBOARD","true","false","false","true","true","int","0x00000001","[]","Optional[/**
 * Value for {@link #reqInputFeatures}: if set, indicates that the application
 * requires a hard keyboard
 */
]","\android\content\pm\ConfigurationInfo.java"
"reqKeyboardType","true","false","false","false","false","int","null","[]","Optional[/**
 * Application's input method preference.
 * One of: {@link android.content.res.Configuration#KEYBOARD_UNDEFINED},
 * {@link android.content.res.Configuration#KEYBOARD_NOKEYS},
 * {@link android.content.res.Configuration#KEYBOARD_QWERTY},
 * {@link android.content.res.Configuration#KEYBOARD_12KEY}
 */
]","\android\content\pm\ConfigurationInfo.java"
"INPUT_FEATURE_FIVE_WAY_NAV","true","false","false","true","true","int","0x00000002","[]","Optional[/**
 * Value for {@link #reqInputFeatures}: if set, indicates that the application
 * requires a five way navigation device
 */
]","\android\content\pm\ConfigurationInfo.java"
"reqNavigation","true","false","false","false","false","int","null","[]","Optional[/**
 * A flag indicating whether any keyboard is available.
 * one of: {@link android.content.res.Configuration#NAVIGATION_UNDEFINED},
 * {@link android.content.res.Configuration#NAVIGATION_DPAD},
 * {@link android.content.res.Configuration#NAVIGATION_TRACKBALL},
 * {@link android.content.res.Configuration#NAVIGATION_WHEEL}
 */
]","\android\content\pm\ConfigurationInfo.java"
"reqTouchScreen","true","false","false","false","false","int","null","[]","Optional[/**
 * The kind of touch screen attached to the device.
 * One of: {@link android.content.res.Configuration#TOUCHSCREEN_NOTOUCH},
 * {@link android.content.res.Configuration#TOUCHSCREEN_STYLUS},
 * {@link android.content.res.Configuration#TOUCHSCREEN_FINGER}.
 */
]","\android\content\pm\ConfigurationInfo.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<AccessibilityServiceInfo>","new Parcelable.Creator<AccessibilityServiceInfo>() {

    public AccessibilityServiceInfo createFromParcel(Parcel parcel) {
        AccessibilityServiceInfo info = new AccessibilityServiceInfo();
        info.eventTypes = parcel.readInt();
        info.packageNames = parcel.readStringArray();
        info.feedbackType = parcel.readInt();
        info.notificationTimeout = parcel.readLong();
        info.flags = parcel.readInt();
        return info;
    }

    public AccessibilityServiceInfo[] newArray(int size) {
        return new AccessibilityServiceInfo[size];
    }
}","[]","Optional[/**
 * @see Parcelable.Creator
 */
]","\android\accessibilityservice\AccessibilityServiceInfo.java"
"FEEDBACK_SPOKEN","true","false","false","true","true","int","0x0000001","[]","Optional[/**
 * Denotes spoken feedback.
 */
]","\android\accessibilityservice\AccessibilityServiceInfo.java"
"notificationTimeout","true","false","false","false","false","long","null","[]","Optional[/**
 * The timeout after the most recent event of a given type before an
 * {@link AccessibilityService} is notified.
 * <p>
 * Note: The event notification timeout is useful to avoid propagating events to the client
 * too frequently since this is accomplished via an expensive interprocess call.
 * One can think of the timeout as a criteria to determine when event generation has
 * settled down
 */
]","\android\accessibilityservice\AccessibilityServiceInfo.java"
"FEEDBACK_AUDIBLE","true","false","false","true","true","int","0x0000004","[]","Optional[/**
 * Denotes audible (not spoken) feedback.
 */
]","\android\accessibilityservice\AccessibilityServiceInfo.java"
"DEFAULT","true","false","false","true","true","int","0x0000001","[]","Optional[/**
 * If an {@link AccessibilityService} is the default for a given type.
 * Default service is invoked only if no package specific one exists. In case of
 * more than one package specific service only the earlier registered is notified.
 */
]","\android\accessibilityservice\AccessibilityServiceInfo.java"
"FEEDBACK_VISUAL","true","false","false","true","true","int","0x0000008","[]","Optional[/**
 * Denotes visual feedback.
 */
]","\android\accessibilityservice\AccessibilityServiceInfo.java"
"flags","true","false","false","false","false","int","null","[]","Optional[/**
 * This field represents a set of flags used for configuring an
 * {@link AccessibilityService}.
 *
 * @see #DEFAULT
 */
]","\android\accessibilityservice\AccessibilityServiceInfo.java"
"FEEDBACK_HAPTIC","true","false","false","true","true","int","0x0000002","[]","Optional[/**
 * Denotes haptic feedback.
 */
]","\android\accessibilityservice\AccessibilityServiceInfo.java"
"feedbackType","true","false","false","false","false","int","null","[]","Optional[/**
 * The feedback type an {@link AccessibilityService} provides.
 *
 * @see #FEEDBACK_AUDIBLE
 * @see #FEEDBACK_GENERIC
 * @see #FEEDBACK_HAPTIC
 * @see #FEEDBACK_SPOKEN
 * @see #FEEDBACK_VISUAL
 */
]","\android\accessibilityservice\AccessibilityServiceInfo.java"
"packageNames","true","false","false","false","false","String","null","[]","Optional[/**
 * The package names an {@link AccessibilityService} is interested in. Setting
 * to null is equivalent to all packages.
 */
]","\android\accessibilityservice\AccessibilityServiceInfo.java"
"FEEDBACK_GENERIC","true","false","false","true","true","int","0x0000010","[]","Optional[/**
 * Denotes generic feedback.
 */
]","\android\accessibilityservice\AccessibilityServiceInfo.java"
"eventTypes","true","false","false","false","false","int","null","[]","Optional[/**
 * The event types an {@link AccessibilityService} is interested in.
 *
 * @see android.view.accessibility.AccessibilityEvent#TYPE_VIEW_CLICKED
 * @see android.view.accessibility.AccessibilityEvent#TYPE_VIEW_LONG_CLICKED
 * @see android.view.accessibility.AccessibilityEvent#TYPE_VIEW_FOCUSED
 * @see android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SELECTED
 * @see android.view.accessibility.AccessibilityEvent#TYPE_VIEW_TEXT_CHANGED
 * @see android.view.accessibility.AccessibilityEvent#TYPE_WINDOW_STATE_CHANGED
 * @see android.view.accessibility.AccessibilityEvent#TYPE_NOTIFICATION_STATE_CHANGED
 */
]","\android\accessibilityservice\AccessibilityServiceInfo.java"
"sKnownValueSet","false","false","false","true","true","Set<String>","Collections.unmodifiableSet(new HashSet<String>(Arrays.asList(""INLINE"", ""URL"", ""CONTENT-ID"", ""CID"")))","[]","Optional[/* package */
]","\android\pim\vcard\VCardParser_V21.java"
"mVCardParserImpl","false","false","true","false","true","VCardParserImpl_V21","null","[]","Optional.empty","\android\pim\vcard\VCardParser_V21.java"
"sKnownTypeSet","false","false","false","true","true","Set<String>","Collections.unmodifiableSet(new HashSet<String>(Arrays.asList(""DOM"", ""INTL"", ""POSTAL"", ""PARCEL"", ""HOME"", ""WORK"", ""PREF"", ""VOICE"", ""FAX"", ""MSG"", ""CELL"", ""PAGER"", ""BBS"", ""MODEM"", ""CAR"", ""ISDN"", ""VIDEO"", ""AOL"", ""APPLELINK"", ""ATTMAIL"", ""CIS"", ""EWORLD"", ""INTERNET"", ""IBMMAIL"", ""MCIMAIL"", ""POWERSHARE"", ""PRODIGY"", ""TLX"", ""X400"", ""GIF"", ""CGM"", ""WMF"", ""BMP"", ""MET"", ""PMB"", ""DIB"", ""PICT"", ""TIFF"", ""PDF"", ""PS"", ""JPEG"", ""QTIME"", ""MPEG"", ""MPEG2"", ""AVI"", ""WAVE"", ""AIFF"", ""PCM"", ""X509"", ""PGP"")))","[]","Optional[/* package */
]","\android\pim\vcard\VCardParser_V21.java"
"sKnownPropertyNameSet","false","false","false","true","true","Set<String>","Collections.unmodifiableSet(new HashSet<String>(Arrays.asList(""BEGIN"", ""LOGO"", ""PHOTO"", ""LABEL"", ""FN"", ""TITLE"", ""SOUND"", ""VERSION"", ""TEL"", ""EMAIL"", ""TZ"", ""GEO"", ""NOTE"", ""URL"", ""BDAY"", ""ROLE"", ""REV"", ""UID"", ""KEY"", ""MAILER"")))","[]","Optional[/* package */
]","\android\pim\vcard\VCardParser_V21.java"
"sAvailableEncoding","false","false","false","true","true","Set<String>","Collections.unmodifiableSet(new HashSet<String>(Arrays.asList(VCardConstants.PARAM_ENCODING_7BIT, VCardConstants.PARAM_ENCODING_8BIT, VCardConstants.PARAM_ENCODING_QP, VCardConstants.PARAM_ENCODING_BASE64, VCardConstants.PARAM_ENCODING_B)))","[]","Optional[/* package */
]","\android\pim\vcard\VCardParser_V21.java"
"mExtensionToMimeTypeMap","false","false","true","false","false","HashMap<String,String>","null","[]","Optional[/**
 * File extension to MIME type mapping:
 */
]","\android\webkit\MimeTypeMap.java"
"sMimeTypeMap","false","false","true","true","false","MimeTypeMap","null","[]","Optional[/**
 * Singleton MIME-type map instance:
 */
]","\android\webkit\MimeTypeMap.java"
"mMimeTypeToExtensionMap","false","false","true","false","false","HashMap<String,String>","null","[]","Optional[/**
 * MIME-type to file extension mapping:
 */
]","\android\webkit\MimeTypeMap.java"
"KEYCODE_SHIFT_LONGPRESS","false","false","false","true","true","int","-101","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboardView.java"
"KEYCODE_VOICE","false","false","false","true","true","int","-102","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboardView.java"
"KEYCODE_NEXT_LANGUAGE","false","false","false","true","true","int","-104","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboardView.java"
"KEYCODE_F1","false","false","false","true","true","int","-103","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboardView.java"
"KEYCODE_OPTIONS","false","false","false","true","true","int","-100","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboardView.java"
"TAG","false","false","true","true","true","String","""P2pInitiator""","[]","Optional.empty","\com\android\internal\nfc\P2pInitiator.java"
"mService","false","false","true","false","true","IP2pInitiator","null","[]","Optional[/**
 * The entry point for P2P tag operations.
 */
]","\com\android\internal\nfc\P2pInitiator.java"
"ACTION_APPWIDGET_PICK","true","false","false","true","true","String","""android.appwidget.action.APPWIDGET_PICK""","[]","Optional[/**
 * Send this from your {@link AppWidgetHost} activity when you want to pick an AppWidget to display.
 * The AppWidget picker activity will be launched.
 * <p>
 * You must supply the following extras:
 * <table>
 * <tr>
 * <td>{@link #EXTRA_APPWIDGET_ID}</td>
 * <td>A newly allocated appWidgetId, which will be bound to the AppWidget provider
 * once the user has selected one.</td>
 * </tr>
 * </table>
 *
 * <p>
 * The system will respond with an onActivityResult call with the following extras in
 * the intent:
 * <table>
 * <tr>
 * <td>{@link #EXTRA_APPWIDGET_ID}</td>
 * <td>The appWidgetId that you supplied in the original intent.</td>
 * </tr>
 * </table>
 * <p>
 * When you receive the result from the AppWidget pick activity, if the resultCode is
 * {@link android.app.Activity#RESULT_OK}, an AppWidget has been selected.  You should then
 * check the AppWidgetProviderInfo for the returned AppWidget, and if it has one, launch its configuration
 * activity.  If {@link android.app.Activity#RESULT_CANCELED} is returned, you should delete
 * the appWidgetId.
 *
 * @see #ACTION_APPWIDGET_CONFIGURE
 */
]","\android\appwidget\AppWidgetManager.java"
"mContext","false","false","false","false","false","Context","null","[]","Optional.empty","\android\appwidget\AppWidgetManager.java"
"EXTRA_APPWIDGET_IDS","true","false","false","true","true","String","""appWidgetIds""","[]","Optional[/**
 * An intent extra that contains multiple appWidgetIds.
 * <p>
 * The value will be an int array that can be retrieved like this:
 * {@sample frameworks/base/tests/appwidgets/AppWidgetHostTest/src/com/android/tests/appwidgethost/TestAppWidgetProvider.java getExtra_EXTRA_APPWIDGET_IDS}
 */
]","\android\appwidget\AppWidgetManager.java"
"META_DATA_APPWIDGET_OLD_NAME","true","false","false","true","true","String","""android.appwidget.oldName""","[]","Optional[/**
 * Field for the manifest meta-data tag used to indicate any previous name for the
 * app widget receiver.
 *
 * @see AppWidgetProviderInfo
 *
 * @hide Pending API approval
 */
]","\android\appwidget\AppWidgetManager.java"
"ACTION_APPWIDGET_DISABLED","true","false","false","true","true","String","""android.appwidget.action.APPWIDGET_DISABLED""","[]","Optional[/**
 * Sent when an instance of an AppWidget is removed from the last host.
 *
 * @see AppWidgetProvider#onEnabled AppWidgetProvider.onEnabled(Context context)
 */
]","\android\appwidget\AppWidgetManager.java"
"META_DATA_APPWIDGET_PROVIDER","true","false","false","true","true","String","""android.appwidget.provider""","[]","Optional[/**
 * Field for the manifest meta-data tag.
 *
 * @see AppWidgetProviderInfo
 */
]","\android\appwidget\AppWidgetManager.java"
"ACTION_APPWIDGET_DELETED","true","false","false","true","true","String","""android.appwidget.action.APPWIDGET_DELETED""","[]","Optional[/**
 * Sent when an instance of an AppWidget is deleted from its host.
 *
 * @see AppWidgetProvider#onDeleted AppWidgetProvider.onDeleted(Context context, int[] appWidgetIds)
 */
]","\android\appwidget\AppWidgetManager.java"
"EXTRA_CUSTOM_EXTRAS","true","false","false","true","true","String","""customExtras""","[]","Optional[/**
 * An intent extra to pass to the AppWidget picker containing a {@link java.util.List} of
 * {@link android.os.Bundle} objects to mix in to the list of AppWidgets that are
 * installed.  It will be added to the extras object on the {@link android.content.Intent}
 * that is returned from the picker activity.
 *
 * {@more}
 */
]","\android\appwidget\AppWidgetManager.java"
"EXTRA_APPWIDGET_ID","true","false","false","true","true","String","""appWidgetId""","[]","Optional[/**
 * An intent extra that contains one appWidgetId.
 * <p>
 * The value will be an int that can be retrieved like this:
 * {@sample frameworks/base/tests/appwidgets/AppWidgetHostTest/src/com/android/tests/appwidgethost/AppWidgetHostActivity.java getExtra_EXTRA_APPWIDGET_ID}
 */
]","\android\appwidget\AppWidgetManager.java"
"ACTION_APPWIDGET_CONFIGURE","true","false","false","true","true","String","""android.appwidget.action.APPWIDGET_CONFIGURE""","[]","Optional[/**
 * Sent when it is time to configure your AppWidget while it is being added to a host.
 * This action is not sent as a broadcast to the AppWidget provider, but as a startActivity
 * to the activity specified in the {@link AppWidgetProviderInfo AppWidgetProviderInfo meta-data}.
 *
 * <p>
 * The intent will contain the following extras:
 * <table>
 * <tr>
 * <td>{@link #EXTRA_APPWIDGET_ID}</td>
 * <td>The appWidgetId to configure.</td>
 * </tr>
 * </table>
 *
 * <p>If you return {@link android.app.Activity#RESULT_OK} using
 * {@link android.app.Activity#setResult Activity.setResult()}, the AppWidget will be added,
 * and you will receive an {@link #ACTION_APPWIDGET_UPDATE} broadcast for this AppWidget.
 * If you return {@link android.app.Activity#RESULT_CANCELED}, the host will cancel the add
 * and not display this AppWidget, and you will receive a {@link #ACTION_APPWIDGET_DELETED} broadcast.
 */
]","\android\appwidget\AppWidgetManager.java"
"mDisplayMetrics","false","false","true","false","false","DisplayMetrics","null","[]","Optional.empty","\android\appwidget\AppWidgetManager.java"
"ACTION_APPWIDGET_UPDATE","true","false","false","true","true","String","""android.appwidget.action.APPWIDGET_UPDATE""","[]","Optional[/**
 * Sent when it is time to update your AppWidget.
 *
 * <p>This may be sent in response to a new instance for this AppWidget provider having
 * been instantiated, the requested {@link AppWidgetProviderInfo#updatePeriodMillis update interval}
 * having lapsed, or the system booting.
 *
 * <p>
 * The intent will contain the following extras:
 * <table>
 * <tr>
 * <td>{@link #EXTRA_APPWIDGET_IDS}</td>
 * <td>The appWidgetIds to update.  This may be all of the AppWidgets created for this
 * provider, or just a subset.  The system tries to send updates for as few AppWidget
 * instances as possible.</td>
 * </tr>
 * </table>
 *
 * @see AppWidgetProvider#onUpdate AppWidgetProvider.onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds)
 */
]","\android\appwidget\AppWidgetManager.java"
"sService","false","false","false","true","false","IAppWidgetService","null","[]","Optional.empty","\android\appwidget\AppWidgetManager.java"
"TAG","false","false","false","true","true","String","""AppWidgetManager""","[]","Optional.empty","\android\appwidget\AppWidgetManager.java"
"INVALID_APPWIDGET_ID","true","false","false","true","true","int","0","[]","Optional[/**
 * A sentiel value that the AppWidget manager will never return as a appWidgetId.
 */
]","\android\appwidget\AppWidgetManager.java"
"EXTRA_CUSTOM_INFO","true","false","false","true","true","String","""customInfo""","[]","Optional[/**
 * An intent extra to pass to the AppWidget picker containing a {@link java.util.List} of
 * {@link AppWidgetProviderInfo} objects to mix in to the list of AppWidgets that are
 * installed.  (This is how the launcher shows the search widget).
 */
]","\android\appwidget\AppWidgetManager.java"
"sManagerCache","false","false","false","true","false","WeakHashMap<Context,WeakReference<AppWidgetManager>>","new WeakHashMap()","[]","Optional.empty","\android\appwidget\AppWidgetManager.java"
"ACTION_APPWIDGET_ENABLED","true","false","false","true","true","String","""android.appwidget.action.APPWIDGET_ENABLED""","[]","Optional[/**
 * Sent when an instance of an AppWidget is added to a host for the first time.
 * This broadcast is sent at boot time if there is a AppWidgetHost installed with
 * an instance for this provider.
 *
 * @see AppWidgetProvider#onEnabled AppWidgetProvider.onEnabled(Context context)
 */
]","\android\appwidget\AppWidgetManager.java"
"ANIM_DURATION","false","false","true","true","true","int","250","[]","Optional[// Time for most animations (in ms)
]","\com\android\internal\widget\SlidingTab.java"
"ALIGN_UNKNOWN","true","false","false","true","true","int","4","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"mCurrentSlider","false","false","true","false","false","Slider","null","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"mAnimating","false","false","true","false","false","boolean","null","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"STATE_ACTIVE","false","false","true","true","true","int","2","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"alignment_value","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"mTriggered","false","false","true","false","false","boolean","false","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"RIGHT_HANDLE","true","false","false","true","true","int","2","[]","Optional[/**
 * The interface was triggered because the user grabbed the right handle and moved it past
 * the threshold.
 */
]","\com\android\internal\widget\SlidingTab.java"
"mRightSlider","false","false","true","false","false","Slider","null","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"currentState","false","false","true","false","false","int","STATE_NORMAL","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"mOnTriggerListener","false","false","true","false","false","OnTriggerListener","null","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"TRACKING_MARGIN","false","false","true","true","true","int","50","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"alignment","false","false","true","false","false","int","ALIGN_UNKNOWN","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"ANIM_TARGET_TIME","false","false","true","true","true","int","500","[]","Optional[// Time to show targets (in ms)
]","\com\android\internal\widget\SlidingTab.java"
"mTmpRect","false","false","true","false","false","Rect","null","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"LOG_TAG","false","false","true","true","true","String","""SlidingTab""","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"mThreshold","false","false","true","false","false","float","null","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"target","false","false","true","false","true","ImageView","null","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"mTracking","false","false","true","false","false","boolean","null","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"mOtherSlider","false","false","true","false","false","Slider","null","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"mHoldLeftOnTransition","false","false","true","false","false","boolean","true","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"STATE_NORMAL","false","false","true","true","true","int","0","[]","Optional[/**
 * States for the view.
 */
]","\com\android\internal\widget\SlidingTab.java"
"VERTICAL","false","false","true","true","true","int","1","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"text","false","false","true","false","true","TextView","null","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"mDensity","false","false","true","false","false","float","null","[]","Optional[// used to scale dimensions for bitmaps.
]","\com\android\internal\widget\SlidingTab.java"
"VIBRATE_SHORT","false","false","true","true","true","long","30","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"LEFT_HANDLE","true","false","false","true","true","int","1","[]","Optional[/**
 * The interface was triggered because the user grabbed the left handle and moved it past
 * the threshold.
 */
]","\com\android\internal\widget\SlidingTab.java"
"NO_HANDLE","true","false","false","true","true","int","0","[]","Optional[/**
 * The interface was triggered because the user let go of the handle without reaching the
 * threshold.
 */
]","\com\android\internal\widget\SlidingTab.java"
"mVibrator","false","false","true","false","false","Vibrator","null","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"mHoldRightOnTransition","false","false","true","false","false","boolean","true","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"ALIGN_TOP","true","false","false","true","true","int","2","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"ALIGN_LEFT","true","false","false","true","true","int","0","[]","Optional[/**
 * Tab alignment - determines which side the tab should be drawn on
 */
]","\com\android\internal\widget\SlidingTab.java"
"mOrientation","false","false","true","false","false","int","null","[]","Optional[/**
 * Either {@link #HORIZONTAL} or {@link #VERTICAL}.
 */
]","\com\android\internal\widget\SlidingTab.java"
"DBG","false","false","true","true","true","boolean","false","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"mGrabbedState","false","false","true","false","false","int","OnTriggerListener.NO_HANDLE","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"tab","false","false","true","false","true","ImageView","null","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"ALIGN_RIGHT","true","false","false","true","true","int","1","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"THRESHOLD","false","false","true","true","true","float","2.0f / 3.0f","[]","Optional[// TODO: Make these configurable
]","\com\android\internal\widget\SlidingTab.java"
"mAnimationDoneListener","false","false","true","false","true","AnimationListener","new AnimationListener() {

    public void onAnimationStart(Animation animation) {
    }

    public void onAnimationRepeat(Animation animation) {
    }

    public void onAnimationEnd(Animation animation) {
        onAnimationDone();
    }
}","[]","Optional[/**
 * Listener used to reset the view when the current animation completes.
 */
]","\com\android\internal\widget\SlidingTab.java"
"HORIZONTAL","false","false","true","true","true","int","0","[]","Optional[// as defined in attrs.xml
]","\com\android\internal\widget\SlidingTab.java"
"ALIGN_BOTTOM","true","false","false","true","true","int","3","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"mLeftSlider","false","false","true","false","false","Slider","null","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"STATE_PRESSED","false","false","true","true","true","int","1","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"VIBRATE_LONG","false","false","true","true","true","long","40","[]","Optional.empty","\com\android\internal\widget\SlidingTab.java"
"mOnSeekBarChangeListener","false","false","true","false","false","OnSeekBarChangeListener","null","[]","Optional.empty","\android\widget\SeekBar.java"
"LONG_PRESS","true","false","false","true","true","int","0","[]","Optional[/**
 * The user has performed a long press on an object that is resulting
 * in an action being performed.
 */
]","\android\view\HapticFeedbackConstants.java"
"FLAG_IGNORE_GLOBAL_SETTING","true","false","false","true","true","int","0x0002","[]","Optional[/**
 * Flag for {@link View#performHapticFeedback(int, int)
 * View.performHapticFeedback(int, int)}: Ignore the global setting
 * for whether to perform haptic feedback, do it always.
 */
]","\android\view\HapticFeedbackConstants.java"
"SAFE_MODE_ENABLED","true","false","false","true","true","int","10001","[]","Optional[/**
 * This is a private constant.  Feel free to renumber as desired.
 * @hide
 */
]","\android\view\HapticFeedbackConstants.java"
"FLAG_IGNORE_VIEW_SETTING","true","false","false","true","true","int","0x0001","[]","Optional[/**
 * Flag for {@link View#performHapticFeedback(int, int)
 * View.performHapticFeedback(int, int)}: Ignore the setting in the
 * view for whether to perform haptic feedback, do it always.
 */
]","\android\view\HapticFeedbackConstants.java"
"KEYBOARD_TAP","true","false","false","true","true","int","3","[]","Optional[/**
 * The user has pressed a soft keyboard key.
 */
]","\android\view\HapticFeedbackConstants.java"
"VIRTUAL_KEY","true","false","false","true","true","int","1","[]","Optional[/**
 * The user has pressed on a virtual on-screen key.
 */
]","\android\view\HapticFeedbackConstants.java"
"SAFE_MODE_DISABLED","true","false","false","true","true","int","10000","[]","Optional[/**
 * This is a private constant.  Feel free to renumber as desired.
 * @hide
 */
]","\android\view\HapticFeedbackConstants.java"
"mBuilder","false","false","true","false","true","StringBuilder","null","[]","Optional.empty","\android\util\StringBuilderPrinter.java"
"mPriority","false","false","true","false","false","int","null","[]","Optional.empty","\android\os\HandlerThread.java"
"mTid","false","false","true","false","false","int","-1","[]","Optional.empty","\android\os\HandlerThread.java"
"mLooper","false","false","true","false","false","Looper","null","[]","Optional.empty","\android\os\HandlerThread.java"
"ZORDER_NORMAL","true","false","false","true","true","int","0","[]","Optional[/**
 * Requests that the content being animated be kept in its current Z
 * order.
 */
]","\android\view\animation\Animation.java"
"mRepeatCount","false","false","false","false","false","int","0","[]","Optional[/**
 * The number of times the animation must repeat. By default, an animation repeats
 * indefinitely.
 */
]","\android\view\animation\Animation.java"
"mEnded","false","false","false","false","false","boolean","false","[]","Optional[/**
 * Set by {@link #getTransformation(long, Transformation)} when the animation ends.
 */
]","\android\view\animation\Animation.java"
"mStarted","false","false","false","false","false","boolean","false","[]","Optional[/**
 * Set by {@link #getTransformation(long, Transformation)} when the animation starts.
 */
]","\android\view\animation\Animation.java"
"START_ON_FIRST_FRAME","true","false","false","true","true","int","-1","[]","Optional[/**
 * Can be used as the start time to indicate the start time should be the current
 * time when {@link #getTransformation(long, Transformation)} is invoked for the
 * first animation frame. This can is useful for short animations.
 */
]","\android\view\animation\Animation.java"
"mRegion","false","false","false","false","false","RectF","new RectF()","[]","Optional.empty","\android\view\animation\Animation.java"
"ZORDER_BOTTOM","true","false","false","true","true","int","-1","[]","Optional[/**
 * Requests that the content being animated be forced under all other
 * content for the duration of the animation.
 */
]","\android\view\animation\Animation.java"
"REVERSE","true","false","false","true","true","int","2","[]","Optional[/**
 * When the animation reaches the end and the repeat count is INFINTE_REPEAT
 * or a positive value, the animation plays backward (and then forward again).
 */
]","\android\view\animation\Animation.java"
"mFillAfter","false","false","false","false","false","boolean","false","[]","Optional[/**
 * Indicates whether the animation transformation should be applied after the
 * animation ends.
 */
]","\android\view\animation\Animation.java"
"mDetachWallpaper","false","false","true","false","false","boolean","false","[]","Optional[/**
 * Don't animate the wallpaper.
 */
]","\android\view\animation\Animation.java"
"ABSOLUTE","true","false","false","true","true","int","0","[]","Optional[/**
 * The specified dimension is an absolute number of pixels.
 */
]","\android\view\animation\Animation.java"
"RELATIVE_TO_PARENT","true","false","false","true","true","int","2","[]","Optional[/**
 * The specified dimension holds a float and should be multiplied by the
 * height or width of the parent of the object being animated.
 */
]","\android\view\animation\Animation.java"
"INFINITE","true","false","false","true","true","int","-1","[]","Optional[/**
 * Repeat the animation indefinitely.
 */
]","\android\view\animation\Animation.java"
"RELATIVE_TO_SELF","true","false","false","true","true","int","1","[]","Optional[/**
 * The specified dimension holds a float and should be multiplied by the
 * height or width of the object being animated.
 */
]","\android\view\animation\Animation.java"
"mOneMoreTime","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\view\animation\Animation.java"
"type","true","false","false","false","false","int","null","[]","Optional[/**
 * One of Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or
 * Animation.RELATIVE_TO_PARENT.
 */
]","\android\view\animation\Animation.java"
"mCycleFlip","false","false","false","false","false","boolean","false","[]","Optional[/**
 * Set by {@link #getTransformation(long, Transformation)} when the animation repeats
 * in REVERSE mode.
 */
]","\android\view\animation\Animation.java"
"mFillBefore","false","false","false","false","false","boolean","true","[]","Optional[/**
 * Indicates whether the animation transformation should be applied before the
 * animation starts.
 */
]","\android\view\animation\Animation.java"
"ZORDER_TOP","true","false","false","true","true","int","1","[]","Optional[/**
 * Requests that the content being animated be forced on top of all other
 * content for the duration of the animation.
 */
]","\android\view\animation\Animation.java"
"mMore","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\view\animation\Animation.java"
"mInterpolator","false","false","false","false","false","Interpolator","null","[]","Optional[/**
 * The interpolator used by the animation to smooth the movement.
 */
]","\android\view\animation\Animation.java"
"mDuration","false","false","false","false","false","long","null","[]","Optional[/**
 * The duration of one animation cycle in milliseconds.
 */
]","\android\view\animation\Animation.java"
"mPreviousTransformation","false","false","false","false","false","Transformation","new Transformation()","[]","Optional.empty","\android\view\animation\Animation.java"
"mRepeatMode","false","false","false","false","false","int","RESTART","[]","Optional[/**
 * The behavior of the animation when it repeats. The repeat mode is either
 * {@link #RESTART} or {@link #REVERSE}.
 */
]","\android\view\animation\Animation.java"
"mZAdjustment","false","false","true","false","false","int","null","[]","Optional[/**
 * Desired Z order mode during animation.
 */
]","\android\view\animation\Animation.java"
"mListener","false","false","false","false","false","AnimationListener","null","[]","Optional[/**
 * The animation listener to be notified when the animation starts, ends or repeats.
 */
]","\android\view\animation\Animation.java"
"mStartTime","false","false","false","false","false","long","-1","[]","Optional[/**
 * The time in milliseconds at which the animation must start;
 */
]","\android\view\animation\Animation.java"
"mInitialized","false","false","false","false","false","boolean","false","[]","Optional[/**
 * This value must be set to true by {@link #initialize(int, int, int, int)}. It
 * indicates the animation was successfully initialized and can be played.
 */
]","\android\view\animation\Animation.java"
"mTransformation","false","false","false","false","false","Transformation","new Transformation()","[]","Optional.empty","\android\view\animation\Animation.java"
"RESTART","true","false","false","true","true","int","1","[]","Optional[/**
 * When the animation reaches the end and the repeat count is INFINTE_REPEAT
 * or a positive value, the animation restarts from the beginning.
 */
]","\android\view\animation\Animation.java"
"mStartOffset","false","false","false","false","false","long","null","[]","Optional[/**
 * The delay in milliseconds after which the animation must start. When the
 * start offset is > 0, the start time of the animation is startTime + startOffset.
 */
]","\android\view\animation\Animation.java"
"value","true","false","false","false","false","float","null","[]","Optional[/**
 * The absolute or relative dimension for this Description.
 */
]","\android\view\animation\Animation.java"
"mFillEnabled","false","false","false","false","false","boolean","false","[]","Optional[/**
 * Indicates whether fillAfter should be taken into account.
 */
]","\android\view\animation\Animation.java"
"mRepeated","false","false","false","false","false","int","0","[]","Optional[/**
 * Indicates how many times the animation was repeated.
 */
]","\android\view\animation\Animation.java"
"mPreviousRegion","false","false","false","false","false","RectF","new RectF()","[]","Optional.empty","\android\view\animation\Animation.java"
"mAtParser","false","true","false","false","false","AtParser","null","[]","Optional.empty","\android\bluetooth\HeadsetBase.java"
"DIRECTION_OUTGOING","true","false","false","true","true","int","2","[]","Optional.empty","\android\bluetooth\HeadsetBase.java"
"mWakeLock","false","false","true","false","false","WakeLock","null","[]","Optional[// held while processing an AT command
]","\android\bluetooth\HeadsetBase.java"
"mEventThreadInterrupted","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\bluetooth\HeadsetBase.java"
"mEventThreadHandler","false","false","true","false","false","Handler","null","[]","Optional.empty","\android\bluetooth\HeadsetBase.java"
"mTimeoutRemainingMs","false","false","true","false","false","int","null","[]","Optional.empty","\android\bluetooth\HeadsetBase.java"
"sAtInputCount","false","false","true","true","false","int","0","[]","Optional.empty","\android\bluetooth\HeadsetBase.java"
"mDirection","false","false","true","false","true","int","null","[]","Optional.empty","\android\bluetooth\HeadsetBase.java"
"RFCOMM_DISCONNECTED","true","false","false","true","true","int","1","[]","Optional.empty","\android\bluetooth\HeadsetBase.java"
"mConnectTimestamp","false","false","true","false","true","long","null","[]","Optional.empty","\android\bluetooth\HeadsetBase.java"
"DIRECTION_INCOMING","true","false","false","true","true","int","1","[]","Optional.empty","\android\bluetooth\HeadsetBase.java"
"mAddress","false","false","true","false","true","String","null","[]","Optional[// for native code
]","\android\bluetooth\HeadsetBase.java"
"TAG","false","false","true","true","true","String","""Bluetooth HeadsetBase""","[]","Optional.empty","\android\bluetooth\HeadsetBase.java"
"DBG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\bluetooth\HeadsetBase.java"
"mRfcommChannel","false","false","true","false","true","int","null","[]","Optional.empty","\android\bluetooth\HeadsetBase.java"
"mNativeData","false","false","true","false","false","int","null","[]","Optional.empty","\android\bluetooth\HeadsetBase.java"
"mAdapter","false","false","true","false","true","BluetoothAdapter","null","[]","Optional.empty","\android\bluetooth\HeadsetBase.java"
"mRemoteDevice","false","false","true","false","true","BluetoothDevice","null","[]","Optional.empty","\android\bluetooth\HeadsetBase.java"
"mEventThread","false","false","true","false","false","Thread","null","[]","Optional.empty","\android\bluetooth\HeadsetBase.java"
"sProportion","false","false","true","true","false","float","0","[]","Optional.empty","\android\content\res\StringBlock.java"
"mSize","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\res\StringBlock.java"
"italicId","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\res\StringBlock.java"
"mNative","false","false","true","false","true","int","null","[]","Optional.empty","\android\content\res\StringBlock.java"
"mUseSparse","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\content\res\StringBlock.java"
"underlineId","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\res\StringBlock.java"
"smallId","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\res\StringBlock.java"
"mSparseStrings","false","false","true","false","false","SparseArray<CharSequence>","null","[]","Optional.empty","\android\content\res\StringBlock.java"
"supId","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\res\StringBlock.java"
"strikeId","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\res\StringBlock.java"
"mStrings","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\content\res\StringBlock.java"
"mOwnsNative","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\content\res\StringBlock.java"
"mStyleIDs","false","false","false","false","false","StyleIDs","null","[]","Optional.empty","\android\content\res\StringBlock.java"
"boldId","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\res\StringBlock.java"
"listItemId","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\res\StringBlock.java"
"TAG","false","false","true","true","true","String","""AssetManager""","[]","Optional.empty","\android\content\res\StringBlock.java"
"ttId","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\res\StringBlock.java"
"bigId","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\res\StringBlock.java"
"marqueeId","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\res\StringBlock.java"
"localLOGV","false","false","true","true","true","boolean","Config.LOGV || false","[]","Optional.empty","\android\content\res\StringBlock.java"
"subId","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\res\StringBlock.java"
"ORIGINATE_TIME_OFFSET","false","false","true","true","true","int","24","[]","Optional.empty","\android\net\SntpClient.java"
"NTP_PORT","false","false","true","true","true","int","123","[]","Optional.empty","\android\net\SntpClient.java"
"NTP_MODE_CLIENT","false","false","true","true","true","int","3","[]","Optional.empty","\android\net\SntpClient.java"
"NTP_PACKET_SIZE","false","false","true","true","true","int","48","[]","Optional.empty","\android\net\SntpClient.java"
"mRoundTripTime","false","false","true","false","false","long","null","[]","Optional[// round trip time in milliseconds
]","\android\net\SntpClient.java"
"mNtpTimeReference","false","false","true","false","false","long","null","[]","Optional[// value of SystemClock.elapsedRealtime() corresponding to mNtpTime
]","\android\net\SntpClient.java"
"TRANSMIT_TIME_OFFSET","false","false","true","true","true","int","40","[]","Optional.empty","\android\net\SntpClient.java"
"mNtpTime","false","false","true","false","false","long","null","[]","Optional[// system time computed from NTP server response
]","\android\net\SntpClient.java"
"TAG","false","false","true","true","true","String","""SntpClient""","[]","Optional.empty","\android\net\SntpClient.java"
"RECEIVE_TIME_OFFSET","false","false","true","true","true","int","32","[]","Optional.empty","\android\net\SntpClient.java"
"NTP_VERSION","false","false","true","true","true","int","3","[]","Optional.empty","\android\net\SntpClient.java"
"OFFSET_1900_TO_1970","false","false","true","true","true","long","((365L * 70L) + 17L) * 24L * 60L * 60L","[]","Optional[// 70 years plus 17 leap days
]","\android\net\SntpClient.java"
"REFERENCE_TIME_OFFSET","false","false","true","true","true","int","16","[]","Optional.empty","\android\net\SntpClient.java"
"height","true","false","false","false","true","float","null","[]","Optional.empty","\android\gesture\OrientedBoundingBox.java"
"squareness","true","false","false","false","true","float","null","[]","Optional.empty","\android\gesture\OrientedBoundingBox.java"
"centerY","true","false","false","false","true","float","null","[]","Optional.empty","\android\gesture\OrientedBoundingBox.java"
"centerX","true","false","false","false","true","float","null","[]","Optional.empty","\android\gesture\OrientedBoundingBox.java"
"width","true","false","false","false","true","float","null","[]","Optional.empty","\android\gesture\OrientedBoundingBox.java"
"orientation","true","false","false","false","true","float","null","[]","Optional.empty","\android\gesture\OrientedBoundingBox.java"
"mPS","false","false","true","false","true","PrintStream","null","[]","Optional.empty","\android\util\PrintStreamPrinter.java"
"mFocusFinder","false","false","true","false","false","FocusFinder","null","[]","Optional.empty","\android\view\FocusFinderHelper.java"
"INDEX_TOP","false","false","true","true","true","int","1","[]","Optional.empty","\android\widget\LinearLayout.java"
"mUseLargestChild","false","false","true","false","false","boolean","null","[@ViewDebug.ExportedProperty(category = ""layout"")]","Optional.empty","\android\widget\LinearLayout.java"
"weight","true","false","false","false","false","float","null","[@ViewDebug.ExportedProperty(category = ""layout"")]","Optional[/**
 * Indicates how much of the extra space in the LinearLayout will be
 * allocated to the view associated with these LayoutParams. Specify
 * 0 if the view should not be stretched. Otherwise the extra pixels
 * will be pro-rated among all views whose weight is greater than 0.
 */
]","\android\widget\LinearLayout.java"
"mWeightSum","false","false","true","false","false","float","null","[@ViewDebug.ExportedProperty(category = ""layout"")]","Optional.empty","\android\widget\LinearLayout.java"
"gravity","true","false","false","false","false","int","-1","[@ViewDebug.ExportedProperty(category = ""layout"", mapping = { @ViewDebug.IntToString(from = -1, to = ""NONE""), @ViewDebug.IntToString(from = Gravity.NO_GRAVITY, to = ""NONE""), @ViewDebug.IntToString(from = Gravity.TOP, to = ""TOP""), @ViewDebug.IntToString(from = Gravity.BOTTOM, to = ""BOTTOM""), @ViewDebug.IntToString(from = Gravity.LEFT, to = ""LEFT""), @ViewDebug.IntToString(from = Gravity.RIGHT, to = ""RIGHT""), @ViewDebug.IntToString(from = Gravity.CENTER_VERTICAL, to = ""CENTER_VERTICAL""), @ViewDebug.IntToString(from = Gravity.FILL_VERTICAL, to = ""FILL_VERTICAL""), @ViewDebug.IntToString(from = Gravity.CENTER_HORIZONTAL, to = ""CENTER_HORIZONTAL""), @ViewDebug.IntToString(from = Gravity.FILL_HORIZONTAL, to = ""FILL_HORIZONTAL""), @ViewDebug.IntToString(from = Gravity.CENTER, to = ""CENTER""), @ViewDebug.IntToString(from = Gravity.FILL, to = ""FILL"") })]","Optional[/**
 * Gravity for the view associated with these LayoutParams.
 *
 * @see android.view.Gravity
 */
]","\android\widget\LinearLayout.java"
"mMaxAscent","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\LinearLayout.java"
"mBaselineChildTop","false","false","true","false","false","int","0","[@ViewDebug.ExportedProperty(category = ""measurement"")]","Optional[/**
 * The additional offset to the child's baseline.
 * We'll calculate the baseline of this layout as we measure vertically; for
 * horizontal linear layouts, the offset of 0 is appropriate.
 */
]","\android\widget\LinearLayout.java"
"mBaselineAligned","false","false","true","false","false","boolean","true","[@ViewDebug.ExportedProperty(category = ""layout"")]","Optional[/**
 * Whether the children of this layout are baseline aligned.  Only applicable
 * if {@link #mOrientation} is horizontal.
 */
]","\android\widget\LinearLayout.java"
"VERTICAL","true","false","false","true","true","int","1","[]","Optional.empty","\android\widget\LinearLayout.java"
"INDEX_BOTTOM","false","false","true","true","true","int","2","[]","Optional.empty","\android\widget\LinearLayout.java"
"VERTICAL_GRAVITY_COUNT","false","false","true","true","true","int","4","[]","Optional.empty","\android\widget\LinearLayout.java"
"mOrientation","false","false","true","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""measurement"")]","Optional.empty","\android\widget\LinearLayout.java"
"mBaselineAlignedChildIndex","false","false","true","false","false","int","-1","[@ViewDebug.ExportedProperty(category = ""layout"")]","Optional[/**
 * If this layout is part of another layout that is baseline aligned,
 * use the child at this index as the baseline.
 *
 * Note: this is orthogonal to {@link #mBaselineAligned}, which is concerned
 * with whether the children of this layout are baseline aligned.
 */
]","\android\widget\LinearLayout.java"
"HORIZONTAL","true","false","false","true","true","int","0","[]","Optional.empty","\android\widget\LinearLayout.java"
"INDEX_FILL","false","false","true","true","true","int","3","[]","Optional.empty","\android\widget\LinearLayout.java"
"mGravity","false","false","true","false","false","int","Gravity.LEFT | Gravity.TOP","[@ViewDebug.ExportedProperty(category = ""measurement"", mapping = { @ViewDebug.IntToString(from = -1, to = ""NONE""), @ViewDebug.IntToString(from = Gravity.NO_GRAVITY, to = ""NONE""), @ViewDebug.IntToString(from = Gravity.TOP, to = ""TOP""), @ViewDebug.IntToString(from = Gravity.BOTTOM, to = ""BOTTOM""), @ViewDebug.IntToString(from = Gravity.LEFT, to = ""LEFT""), @ViewDebug.IntToString(from = Gravity.RIGHT, to = ""RIGHT""), @ViewDebug.IntToString(from = Gravity.CENTER_VERTICAL, to = ""CENTER_VERTICAL""), @ViewDebug.IntToString(from = Gravity.FILL_VERTICAL, to = ""FILL_VERTICAL""), @ViewDebug.IntToString(from = Gravity.CENTER_HORIZONTAL, to = ""CENTER_HORIZONTAL""), @ViewDebug.IntToString(from = Gravity.FILL_HORIZONTAL, to = ""FILL_HORIZONTAL""), @ViewDebug.IntToString(from = Gravity.CENTER, to = ""CENTER""), @ViewDebug.IntToString(from = Gravity.FILL, to = ""FILL"") })]","Optional.empty","\android\widget\LinearLayout.java"
"INDEX_CENTER_VERTICAL","false","false","true","true","true","int","0","[]","Optional.empty","\android\widget\LinearLayout.java"
"mTotalLength","false","false","true","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""measurement"")]","Optional.empty","\android\widget\LinearLayout.java"
"mMaxDescent","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\LinearLayout.java"
"TWO_DIGIT_FORMATTER","true","false","false","true","true","NumberPicker.Formatter","new NumberPicker.Formatter() {

    final StringBuilder mBuilder = new StringBuilder();

    final java.util.Formatter mFmt = new java.util.Formatter(mBuilder);

    final Object[] mArgs = new Object[1];

    public String toString(int value) {
        mArgs[0] = value;
        mBuilder.delete(0, mBuilder.length());
        mFmt.format(""%02d"", mArgs);
        return mFmt.toString();
    }
}","[]","Optional[/*
     * Use a custom NumberPicker formatting callback to use two-digit
     * minutes strings like ""01"".  Keeping a static formatter etc. is the
     * most efficient way to do this; it avoids creating temporary objects
     * on every call to format().
     */
]","\android\widget\NumberPicker.java"
"mDecrement","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\NumberPicker.java"
"mFormatter","false","false","true","false","false","Formatter","null","[]","Optional.empty","\android\widget\NumberPicker.java"
"DIGIT_CHARACTERS","false","false","true","true","true","char","new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' }","[]","Optional.empty","\android\widget\NumberPicker.java"
"mRunnable","false","false","true","false","true","Runnable","new Runnable() {

    public void run() {
        if (mIncrement) {
            changeCurrent(mCurrent + 1);
            mHandler.postDelayed(this, mSpeed);
        } else if (mDecrement) {
            changeCurrent(mCurrent - 1);
            mHandler.postDelayed(this, mSpeed);
        }
    }
}","[]","Optional.empty","\android\widget\NumberPicker.java"
"mFmt","false","false","false","false","true","java.util.Formatter","new java.util.Formatter(mBuilder)","[]","Optional.empty","\android\widget\NumberPicker.java"
"mArgs","false","false","false","false","true","Object","new Object[1]","[]","Optional.empty","\android\widget\NumberPicker.java"
"mCurrent","false","false","true","false","false","int","null","[]","Optional[/**
 * Current value of this NumberPicker
 */
]","\android\widget\NumberPicker.java"
"mEnd","false","false","true","false","false","int","null","[]","Optional[/**
 * Upper value of the range of numbers allowed for the NumberPicker
 */
]","\android\widget\NumberPicker.java"
"mSpeed","false","false","true","false","false","long","300","[]","Optional.empty","\android\widget\NumberPicker.java"
"mText","false","false","true","false","true","EditText","null","[]","Optional.empty","\android\widget\NumberPicker.java"
"mStart","false","false","true","false","false","int","null","[]","Optional[/**
 * Lower value of the range of numbers allowed for the NumberPicker
 */
]","\android\widget\NumberPicker.java"
"mIncrement","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\NumberPicker.java"
"mHandler","false","false","true","false","true","Handler","null","[]","Optional.empty","\android\widget\NumberPicker.java"
"mListener","false","false","true","false","false","OnChangedListener","null","[]","Optional.empty","\android\widget\NumberPicker.java"
"mDisplayedValues","false","false","true","false","false","String","null","[]","Optional.empty","\android\widget\NumberPicker.java"
"mPrevious","false","false","true","false","false","int","null","[]","Optional[/**
 * Previous value of this NumberPicker.
 */
]","\android\widget\NumberPicker.java"
"mBuilder","false","false","false","false","true","StringBuilder","new StringBuilder()","[]","Optional.empty","\android\widget\NumberPicker.java"
"mIncrementButton","false","false","true","false","false","NumberPickerButton","null","[]","Optional.empty","\android\widget\NumberPicker.java"
"mNumberInputFilter","false","false","true","false","true","InputFilter","null","[]","Optional.empty","\android\widget\NumberPicker.java"
"mDecrementButton","false","false","true","false","false","NumberPickerButton","null","[]","Optional.empty","\android\widget\NumberPicker.java"
"SERVICE_INTERFACE","true","false","false","true","true","String","""android.service.wallpaper.WallpaperService""","[@SdkConstant(SdkConstantType.SERVICE_ACTION)]","Optional[/**
 * The {@link Intent} that must be declared as handled by the service.
 * To be supported, the service must also require the
 * {@link android.Manifest.permission#BIND_WALLPAPER} permission so
 * that other applications can not abuse it.
 */
]","\android\service\wallpaper\WallpaperService.java"
"mPendingXOffsetStep","false","false","false","false","false","float","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mIWallpaperEngine","false","false","false","false","false","IWallpaperEngineWrapper","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mCallbackLooper","false","false","true","false","false","Looper","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mActiveEngines","false","false","true","false","true","ArrayList<Engine>","new ArrayList<Engine>()","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mReqHeight","false","false","false","false","false","int","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mPendingSync","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mPendingYOffsetStep","false","false","false","false","false","float","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"DO_SET_DESIRED_SIZE","false","false","true","true","true","int","30","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mIsPreview","false","false","false","false","true","boolean","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mSurfaceHolder","false","false","false","false","true","BaseSurfaceHolder","new BaseSurfaceHolder() {

    {
        mRequestedFormat = PixelFormat.RGB_565;
    }

    @Override
    public boolean onAllowLockCanvas() {
        return mDrawingAllowed;
    }

    @Override
    public void onRelayoutContainer() {
        Message msg = mCaller.obtainMessage(MSG_UPDATE_SURFACE);
        mCaller.sendMessage(msg);
    }

    @Override
    public void onUpdateSurface() {
        Message msg = mCaller.obtainMessage(MSG_UPDATE_SURFACE);
        mCaller.sendMessage(msg);
    }

    public boolean isCreating() {
        return mIsCreating;
    }

    @Override
    public void setFixedSize(int width, int height) {
        throw new UnsupportedOperationException(""Wallpapers currently only support sizing from layout"");
    }

    public void setKeepScreenOn(boolean screenOn) {
        throw new UnsupportedOperationException(""Wallpapers do not support keep screen on"");
    }
}","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"x","false","false","false","false","false","int","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"y","false","false","false","false","false","int","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"z","false","false","false","false","false","int","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mPendingYOffset","false","false","false","false","false","float","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"SERVICE_META_DATA","true","false","false","true","true","String","""android.service.wallpaper""","[]","Optional[/**
 * Name under which a WallpaperService component publishes information
 * about itself.  This meta-data must reference an XML resource containing
 * a <code>&lt;{@link android.R.styleable#Wallpaper wallpaper}&gt;</code>
 * tag.
 */
]","\android\service\wallpaper\WallpaperService.java"
"mInputHandler","false","false","false","false","true","InputHandler","new BaseInputHandler() {

    @Override
    public void handleMotion(MotionEvent event, Runnable finishedCallback) {
        try {
            int source = event.getSource();
            if ((source & InputDevice.SOURCE_CLASS_POINTER) != 0) {
                dispatchPointer(event);
            }
        } finally {
            finishedCallback.run();
        }
    }
}","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"MSG_WALLPAPER_OFFSETS","false","false","true","true","true","int","10020","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mScreenOn","false","false","false","false","false","boolean","true","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mInputChannel","false","false","false","false","false","InputChannel","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mOffsetMessageEnqueued","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mPendingXOffset","false","false","false","false","false","float","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mWindowType","false","false","false","false","true","int","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mWinFrame","false","false","false","false","true","Rect","new Rect()","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"MSG_UPDATE_SURFACE","false","false","true","true","true","int","10000","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"MSG_WALLPAPER_COMMAND","false","false","true","true","true","int","10025","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mWindowToken","false","false","false","false","true","IBinder","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"sync","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mVisible","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mLayout","false","false","false","false","true","WindowManager.LayoutParams","new WindowManager.LayoutParams()","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mReqWidth","false","false","false","false","false","int","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mTarget","false","false","true","false","true","WallpaperService","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mWindow","false","false","false","false","true","BaseIWindow","new BaseIWindow() {

    @Override
    public void resized(int w, int h, Rect coveredInsets, Rect visibleInsets, boolean reportDraw, Configuration newConfig) {
        Message msg = mCaller.obtainMessageI(MSG_WINDOW_RESIZED, reportDraw ? 1 : 0);
        mCaller.sendMessage(msg);
    }

    @Override
    public void dispatchAppVisibility(boolean visible) {
        // activity tell us when to run.
        if (!mIWallpaperEngine.mIsPreview) {
            Message msg = mCaller.obtainMessageI(MSG_VISIBILITY_CHANGED, visible ? 1 : 0);
            mCaller.sendMessage(msg);
        }
    }

    @Override
    public void dispatchWallpaperOffsets(float x, float y, float xStep, float yStep, boolean sync) {
        synchronized (mLock) {
            if (DEBUG)
                Log.v(TAG, ""Dispatch wallpaper offsets: "" + x + "", "" + y);
            mPendingXOffset = x;
            mPendingYOffset = y;
            mPendingXOffsetStep = xStep;
            mPendingYOffsetStep = yStep;
            if (sync) {
                mPendingSync = true;
            }
            if (!mOffsetMessageEnqueued) {
                mOffsetMessageEnqueued = true;
                Message msg = mCaller.obtainMessage(MSG_WALLPAPER_OFFSETS);
                mCaller.sendMessage(msg);
            }
        }
    }

    public void dispatchWallpaperCommand(String action, int x, int y, int z, Bundle extras, boolean sync) {
        synchronized (mLock) {
            if (DEBUG)
                Log.v(TAG, ""Dispatch wallpaper command: "" + x + "", "" + y);
            WallpaperCommand cmd = new WallpaperCommand();
            cmd.action = action;
            cmd.x = x;
            cmd.y = y;
            cmd.z = z;
            cmd.extras = extras;
            cmd.sync = sync;
            Message msg = mCaller.obtainMessage(MSG_WALLPAPER_COMMAND);
            msg.obj = cmd;
            mCaller.sendMessage(msg);
        }
    }
}","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mCreated","false","false","false","false","false","boolean","null","[]","Optional[// Current window state.
]","\android\service\wallpaper\WallpaperService.java"
"mConnection","false","false","false","false","true","IWallpaperConnection","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mInitializing","false","false","false","false","false","boolean","true","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"MSG_VISIBILITY_CHANGED","false","false","true","true","true","int","10010","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mWindowFlags","false","false","false","false","false","int","WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mSession","false","false","false","false","false","IWindowSession","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mFormat","false","false","false","false","false","int","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mEngine","false","false","false","false","false","Engine","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mDestroyed","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"action","false","false","false","false","false","String","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mLock","false","false","false","false","true","Object","new Object()","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mDrawingAllowed","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"MSG_TOUCH_EVENT","false","false","true","true","true","int","10040","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mIsCreating","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mCurWidth","false","false","false","false","false","int","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mPendingMove","false","false","false","false","false","MotionEvent","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"MSG_WINDOW_RESIZED","false","false","true","true","true","int","10030","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"extras","false","false","false","false","false","Bundle","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mHeight","false","false","false","false","false","int","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mSurfaceCreated","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mContentInsets","false","false","false","false","true","Rect","new Rect()","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mType","false","false","false","false","false","int","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mCurWindowFlags","false","false","false","false","false","int","mWindowFlags","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"TAG","false","false","false","true","true","String","""WallpaperService""","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mVisibleInsets","false","false","false","false","true","Rect","new Rect()","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mCurHeight","false","false","false","false","false","int","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mWidth","false","false","false","false","false","int","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mReportedVisible","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"DO_ATTACH","false","false","true","true","true","int","10","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mReceiver","false","false","false","false","true","BroadcastReceiver","new BroadcastReceiver() {

    @Override
    public void onReceive(Context context, Intent intent) {
        if (Intent.ACTION_SCREEN_ON.equals(intent.getAction())) {
            mScreenOn = true;
            reportVisibility();
        } else if (Intent.ACTION_SCREEN_OFF.equals(intent.getAction())) {
            mScreenOn = false;
            reportVisibility();
        }
    }
}","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mCaller","false","false","true","false","true","HandlerCaller","null","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mConfiguration","false","false","false","false","true","Configuration","new Configuration()","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"DO_DETACH","false","false","true","true","true","int","20","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"DEBUG","false","false","false","true","true","boolean","false","[]","Optional.empty","\android\service\wallpaper\WallpaperService.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\text\style\ImageSpan.java"
"mSource","false","false","true","false","false","String","null","[]","Optional.empty","\android\text\style\ImageSpan.java"
"mContentUri","false","false","true","false","false","Uri","null","[]","Optional.empty","\android\text\style\ImageSpan.java"
"mDrawable","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\text\style\ImageSpan.java"
"mResourceId","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\style\ImageSpan.java"
"mParts","false","false","true","false","false","Vector<PduPart>","null","[]","Optional.empty","\com\google\android\mms\pdu\PduBody.java"
"mPartMapByName","false","false","true","false","false","Map<String,PduPart>","null","[]","Optional.empty","\com\google\android\mms\pdu\PduBody.java"
"mPartMapByFileName","false","false","true","false","false","Map<String,PduPart>","null","[]","Optional.empty","\com\google\android\mms\pdu\PduBody.java"
"mPartMapByContentLocation","false","false","true","false","false","Map<String,PduPart>","null","[]","Optional.empty","\com\google\android\mms\pdu\PduBody.java"
"mPartMapByContentId","false","false","true","false","false","Map<String,PduPart>","null","[]","Optional.empty","\com\google\android\mms\pdu\PduBody.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<PathPermission>","new Parcelable.Creator<PathPermission>() {

    public PathPermission createFromParcel(Parcel source) {
        return new PathPermission(source);
    }

    public PathPermission[] newArray(int size) {
        return new PathPermission[size];
    }
}","[]","Optional.empty","\android\content\pm\PathPermission.java"
"mReadPermission","false","false","true","false","true","String","null","[]","Optional.empty","\android\content\pm\PathPermission.java"
"mWritePermission","false","false","true","false","true","String","null","[]","Optional.empty","\android\content\pm\PathPermission.java"
"BRIGHTNESS_OFF","true","false","false","true","true","int","0","[]","Optional[/**
 * Brightness value for fully off
 */
]","\android\os\Power.java"
"BRIGHTNESS_ON","true","false","false","true","true","int","255","[]","Optional[/**
 * Brightness value for fully on
 */
]","\android\os\Power.java"
"LOW_BATTERY_THRESHOLD","true","false","false","true","true","int","10","[]","Optional[/**
 * Threshold for BRIGHTNESS_LOW_BATTERY (percentage)
 * Screen will stay dim if battery level is <= LOW_BATTERY_THRESHOLD
 */
]","\android\os\Power.java"
"BRIGHTNESS_LOW_BATTERY","true","false","false","true","true","int","10","[]","Optional[/**
 * Brightness value to use when battery is low
 */
]","\android\os\Power.java"
"BRIGHTNESS_DIM","true","false","false","true","true","int","20","[]","Optional[/**
 * Brightness value for dim backlight
 */
]","\android\os\Power.java"
"FULL_WAKE_LOCK","true","false","false","true","true","int","2","[]","Optional[/**
 * Wake lock that ensures that the screen is on.
 */
]","\android\os\Power.java"
"PARTIAL_WAKE_LOCK","true","false","false","true","true","int","1","[]","Optional[/**
 * Wake lock that ensures that the CPU is running.  The screen might
 * not be on.
 */
]","\android\os\Power.java"
"PDU_COLUMN_MESSAGE_BOX","false","false","true","true","true","int","1","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"ENCODED_STRING_COLUMN_NAME_MAP","false","false","true","true","true","HashMap<Integer,String>","null","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"CHARSET_COLUMN_INDEX_MAP","false","false","true","true","true","HashMap<Integer,Integer>","null","[]","Optional[// These map are used for convenience in persist() and load().
]","\com\google\android\mms\pdu\PduPersister.java"
"ADDRESS_FIELDS","false","false","true","true","true","int","new int[] { PduHeaders.BCC, PduHeaders.CC, PduHeaders.FROM, PduHeaders.TO }","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PDU_COLUMN_RESPONSE_TEXT","false","false","true","true","true","int","9","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PART_COLUMN_FILENAME","false","false","true","true","true","int","6","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PDU_PROJECTION","false","false","true","true","true","String","new String[] { Mms._ID, Mms.MESSAGE_BOX, Mms.THREAD_ID, Mms.RETRIEVE_TEXT, Mms.SUBJECT, Mms.CONTENT_LOCATION, Mms.CONTENT_TYPE, Mms.MESSAGE_CLASS, Mms.MESSAGE_ID, Mms.RESPONSE_TEXT, Mms.TRANSACTION_ID, Mms.CONTENT_CLASS, Mms.DELIVERY_REPORT, Mms.MESSAGE_TYPE, Mms.MMS_VERSION, Mms.PRIORITY, Mms.READ_REPORT, Mms.READ_STATUS, Mms.REPORT_ALLOWED, Mms.RETRIEVE_STATUS, Mms.STATUS, Mms.DATE, Mms.DELIVERY_TIME, Mms.EXPIRY, Mms.MESSAGE_SIZE, Mms.SUBJECT_CHARSET, Mms.RETRIEVE_TEXT_CHARSET }","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PART_COLUMN_NAME","false","false","true","true","true","int","7","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PART_COLUMN_CONTENT_ID","false","false","true","true","true","int","3","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"CHARSET_COLUMN_NAME_MAP","false","false","true","true","true","HashMap<Integer,String>","null","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PDU_COLUMN_MESSAGE_ID","false","false","true","true","true","int","8","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"TEXT_STRING_COLUMN_NAME_MAP","false","false","true","true","true","HashMap<Integer,String>","null","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PDU_CACHE_INSTANCE","false","false","true","true","true","PduCache","null","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PART_COLUMN_CONTENT_DISPOSITION","false","false","true","true","true","int","2","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PART_COLUMN_CHARSET","false","false","true","true","true","int","1","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"LOCAL_LOGV","false","false","true","true","true","boolean","DEBUG ? Config.LOGD : Config.LOGV","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PDU_COLUMN_STATUS","false","false","true","true","true","int","20","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"LONG_COLUMN_NAME_MAP","false","false","true","true","true","HashMap<Integer,String>","null","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PDU_COLUMN_MESSAGE_SIZE","false","false","true","true","true","int","24","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PART_PROJECTION","false","false","true","true","true","String","new String[] { Part._ID, Part.CHARSET, Part.CONTENT_DISPOSITION, Part.CONTENT_ID, Part.CONTENT_LOCATION, Part.CONTENT_TYPE, Part.FILENAME, Part.NAME, Part.TEXT }","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PART_COLUMN_ID","false","false","true","true","true","int","0","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PDU_COLUMN_DATE","false","false","true","true","true","int","21","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PDU_COLUMN_CONTENT_TYPE","false","false","true","true","true","int","6","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"sPersister","false","false","true","true","false","PduPersister","null","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PDU_COLUMN_TRANSACTION_ID","false","false","true","true","true","int","10","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"mContentResolver","false","false","true","false","true","ContentResolver","null","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PDU_COLUMN_READ_STATUS","false","false","true","true","true","int","17","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"ENCODED_STRING_COLUMN_INDEX_MAP","false","false","true","true","true","HashMap<Integer,Integer>","null","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PDU_COLUMN_MMS_VERSION","false","false","true","true","true","int","14","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"DUMMY_THREAD_ID","false","false","true","true","true","long","Long.MAX_VALUE","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PDU_COLUMN_CONTENT_LOCATION","false","false","true","true","true","int","5","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PROC_STATUS_COMPLETED","true","false","false","true","true","int","3","[]","Optional[/**
 * Indicate that we have successfully processed a MM.
 */
]","\com\google\android\mms\pdu\PduPersister.java"
"PDU_COLUMN_PRIORITY","false","false","true","true","true","int","15","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PDU_COLUMN_DELIVERY_REPORT","false","false","true","true","true","int","12","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PART_COLUMN_CONTENT_TYPE","false","false","true","true","true","int","5","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PDU_COLUMN_DELIVERY_TIME","false","false","true","true","true","int","22","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"TEMPORARY_DRM_OBJECT_URI","true","false","false","true","true","String","""content://mms/"" + Long.MAX_VALUE + ""/part""","[]","Optional[/**
 * The uri of temporary drm objects.
 */
]","\com\google\android\mms\pdu\PduPersister.java"
"MESSAGE_BOX_MAP","false","false","true","true","true","HashMap<Uri,Integer>","null","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PDU_COLUMN_RETRIEVE_TEXT_CHARSET","false","false","true","true","true","int","26","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PDU_COLUMN_RETRIEVE_STATUS","false","false","true","true","true","int","19","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"TEXT_STRING_COLUMN_INDEX_MAP","false","false","true","true","true","HashMap<Integer,Integer>","null","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PDU_COLUMN_RETRIEVE_TEXT","false","false","true","true","true","int","3","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"TAG","false","false","true","true","true","String","""PduPersister""","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PDU_COLUMN_THREAD_ID","false","false","true","true","true","int","2","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PDU_COLUMN_CONTENT_CLASS","false","false","true","true","true","int","11","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PDU_COLUMN_READ_REPORT","false","false","true","true","true","int","16","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"LONG_COLUMN_INDEX_MAP","false","false","true","true","true","HashMap<Integer,Integer>","null","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"OCTET_COLUMN_NAME_MAP","false","false","true","true","true","HashMap<Integer,String>","null","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PDU_COLUMN_REPORT_ALLOWED","false","false","true","true","true","int","18","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PDU_COLUMN_ID","false","false","true","true","true","int","0","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PDU_COLUMN_MESSAGE_TYPE","false","false","true","true","true","int","13","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PART_COLUMN_TEXT","false","false","true","true","true","int","8","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"OCTET_COLUMN_INDEX_MAP","false","false","true","true","true","HashMap<Integer,Integer>","null","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PDU_COLUMN_SUBJECT_CHARSET","false","false","true","true","true","int","25","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PART_COLUMN_CONTENT_LOCATION","false","false","true","true","true","int","4","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PROC_STATUS_PERMANENTLY_FAILURE","true","false","false","true","true","int","2","[]","Optional[/**
 * Indicate that we permanently failed to process a MM.
 */
]","\com\google\android\mms\pdu\PduPersister.java"
"PDU_COLUMN_EXPIRY","false","false","true","true","true","int","23","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PDU_COLUMN_MESSAGE_CLASS","false","false","true","true","true","int","7","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PROC_STATUS_TRANSIENT_FAILURE","true","false","false","true","true","int","1","[]","Optional[/**
 * Indicate that we transiently failed to process a MM.
 */
]","\com\google\android\mms\pdu\PduPersister.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"PDU_COLUMN_SUBJECT","false","false","true","true","true","int","4","[]","Optional.empty","\com\google\android\mms\pdu\PduPersister.java"
"SHOW_FPS","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\view\ViewRoot.java"
"FAST_MOVE_TIME","false","false","false","true","true","long","150","[]","Optional[/**
 * The maximum amount of time (in milliseconds) between events in order
 * for us to consider the user to be doing fast trackball movements,
 * and thus apply an acceleration.
 */
]","\android\view\ViewRoot.java"
"sWindowSession","false","false","false","true","false","IWindowSession","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mTransparentRegion","false","false","false","false","true","Region","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mLastScrolledFocus","false","false","false","false","false","View","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mGL","false","false","false","false","false","GL11","null","[]","Optional.empty","\android\view\ViewRoot.java"
"DISPATCH_POINTER","true","false","false","true","true","int","1006","[]","Optional.empty","\android\view\ViewRoot.java"
"RESIZED","true","false","false","true","true","int","1002","[]","Optional.empty","\android\view\ViewRoot.java"
"mSurface","false","false","true","false","true","Surface","new Surface()","[]","Optional[// Surface can never be reassigned or cleared (use Surface.clear()).
]","\android\view\ViewRoot.java"
"DEBUG_INPUT_RESIZE","false","false","true","true","true","boolean","false || LOCAL_LOGV","[]","Optional.empty","\android\view\ViewRoot.java"
"sRunQueues","false","false","false","true","true","ThreadLocal<RunQueue>","new ThreadLocal<RunQueue>()","[]","Optional.empty","\android\view\ViewRoot.java"
"mFinishedCallback","false","false","true","false","false","Runnable","null","[]","Optional.empty","\android\view\ViewRoot.java"
"DEBUG_CONFIGURATION","false","false","true","true","true","boolean","false || LOCAL_LOGV","[]","Optional.empty","\android\view\ViewRoot.java"
"delay","false","false","false","false","false","long","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mLastWasImTarget","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mGlWanted","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mTrackballAxisY","false","false","false","false","true","TrackballAxis","new TrackballAxis()","[]","Optional.empty","\android\view\ViewRoot.java"
"mWindowAttributes","false","false","false","false","true","WindowManager.LayoutParams","new WindowManager.LayoutParams()","[]","Optional.empty","\android\view\ViewRoot.java"
"mTrackballAxisX","false","false","false","false","true","TrackballAxis","new TrackballAxis()","[]","Optional.empty","\android\view\ViewRoot.java"
"mFirst","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mIsAnimating","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\view\ViewRoot.java"
"absPosition","false","false","false","false","false","float","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mPendingVisibleInsets","false","false","false","false","true","Rect","new Rect()","[]","Optional.empty","\android\view\ViewRoot.java"
"DIE","true","false","false","true","true","int","1001","[]","Optional.empty","\android\view\ViewRoot.java"
"mPreviousTransparentRegion","false","false","false","false","true","Region","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mNewSurfaceNeeded","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mPendingEvents","false","false","false","false","true","SparseArray<Object>","new SparseArray<Object>()","[]","Optional.empty","\android\view\ViewRoot.java"
"mEgl","false","false","false","false","false","EGL10","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mSurfaceHolder","false","false","false","false","false","BaseSurfaceHolder","null","[]","Optional.empty","\android\view\ViewRoot.java"
"sFirstDrawComplete","false","false","false","true","false","boolean","false","[]","Optional.empty","\android\view\ViewRoot.java"
"mAddedTouchMode","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\view\ViewRoot.java"
"LOCAL_LOGV","false","false","true","true","true","boolean","false ? Config.LOGD : Config.LOGV","[@SuppressWarnings({ ""ConstantConditionalExpression"" })]","Optional.empty","\android\view\ViewRoot.java"
"DEBUG_LAYOUT","false","false","true","true","true","boolean","false || LOCAL_LOGV","[]","Optional.empty","\android\view\ViewRoot.java"
"WINDOW_FOCUS_CHANGED","true","false","false","true","true","int","1004","[]","Optional.empty","\android\view\ViewRoot.java"
"CLOSE_SYSTEM_DIALOGS","true","false","false","true","true","int","1014","[]","Optional.empty","\android\view\ViewRoot.java"
"mInputHandler","false","false","true","false","true","InputHandler","new InputHandler() {

    public void handleKey(KeyEvent event, Runnable finishedCallback) {
        startInputEvent(finishedCallback);
        dispatchKey(event, true);
    }

    public void handleMotion(MotionEvent event, Runnable finishedCallback) {
        startInputEvent(finishedCallback);
        dispatchMotion(event, true);
    }
}","[]","Optional.empty","\android\view\ViewRoot.java"
"MAX_TRACKBALL_DELAY","false","false","false","true","true","int","250","[]","Optional[/**
 * Maximum time we allow the user to roll the trackball enough to generate
 * a key event, before resetting the counters.
 */
]","\android\view\ViewRoot.java"
"sDrawTime","false","false","true","true","false","int","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mDirty","false","false","false","false","false","Rect","null","[]","Optional[// will be a graphics.Region soon
]","\android\view\ViewRoot.java"
"dir","false","false","false","false","false","int","null","[]","Optional.empty","\android\view\ViewRoot.java"
"DEBUG_INPUT","false","false","true","true","true","boolean","true || LOCAL_LOGV","[]","Optional.empty","\android\view\ViewRoot.java"
"mInputChannel","false","false","false","false","false","InputChannel","null","[]","Optional.empty","\android\view\ViewRoot.java"
"acceleration","false","false","false","false","false","float","1","[]","Optional.empty","\android\view\ViewRoot.java"
"mView","false","false","false","false","false","View","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mLastConfiguration","false","false","false","false","true","Configuration","new Configuration()","[]","Optional.empty","\android\view\ViewRoot.java"
"mWinFrame","false","false","false","false","true","Rect","null","[]","Optional[// frame given by window manager.
]","\android\view\ViewRoot.java"
"DISPATCH_APP_VISIBILITY","true","false","false","true","true","int","1008","[]","Optional.empty","\android\view\ViewRoot.java"
"mRealFocusedView","false","false","false","false","false","View","null","[]","Optional[// this is not set to null in touch mode
]","\android\view\ViewRoot.java"
"MEASURE_LATENCY","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\view\ViewRoot.java"
"mScroller","false","false","false","false","false","Scroller","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mWindow","false","false","false","false","true","W","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mHasHadWindowFocus","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\view\ViewRoot.java"
"CHECK_FOCUS","true","false","false","true","true","int","1013","[]","Optional.empty","\android\view\ViewRoot.java"
"mAudioManager","false","false","false","false","false","AudioManager","null","[]","Optional[/**
 * see {@link #playSoundEffect(int)}
 */
]","\android\view\ViewRoot.java"
"mAppVisible","false","false","false","false","false","boolean","true","[]","Optional.empty","\android\view\ViewRoot.java"
"mFocusedView","false","false","false","false","false","View","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mUseGL","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mPendingEventSeq","false","false","false","false","false","int","0","[]","Optional.empty","\android\view\ViewRoot.java"
"nonAccelMovement","false","false","false","false","false","int","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mSurfaceHolderCallback","false","false","false","false","false","SurfaceHolder.Callback2","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mLayoutRequested","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mViewRoot","false","false","true","false","true","WeakReference<ViewRoot>","null","[]","Optional.empty","\android\view\ViewRoot.java"
"step","false","false","false","false","false","int","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mWillDrawSoon","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\view\ViewRoot.java"
"coveredInsets","false","false","false","false","false","Rect","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mActions","false","false","true","false","true","ArrayList<HandlerAction>","new ArrayList<HandlerAction>()","[]","Optional.empty","\android\view\ViewRoot.java"
"mLocation","false","false","false","false","true","WindowLeaked","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mScrollY","false","false","false","false","false","int","null","[]","Optional.empty","\android\view\ViewRoot.java"
"WATCH_POINTER","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\view\ViewRoot.java"
"mVisRect","false","false","false","false","true","Rect","null","[]","Optional[// used to retrieve visible rect of focused view.
]","\android\view\ViewRoot.java"
"action","false","false","false","false","false","Runnable","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mViewConfiguration","false","false","false","false","true","ViewConfiguration","null","[]","Optional.empty","\android\view\ViewRoot.java"
"ACCEL_MOVE_SCALING_FACTOR","false","false","false","true","true","float","(1.0f / 40)","[]","Optional[/**
 * Scaling factor to the time (in milliseconds) between events to how
 * much to multiple/divide the current acceleration.  When movement
 * is < FAST_MOVE_TIME this multiplies the acceleration; when >
 * FAST_MOVE_TIME it divides it.
 */
]","\android\view\ViewRoot.java"
"DISPATCH_KEY_FROM_IME","true","false","false","true","true","int","1011","[]","Optional.empty","\android\view\ViewRoot.java"
"mDensity","false","false","true","false","true","int","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mDrawingAllowed","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\view\ViewRoot.java"
"DEBUG_DRAW","false","false","true","true","true","boolean","false || LOCAL_LOGV","[]","Optional[/**
 * @noinspection PointlessBooleanExpression
 */
]","\android\view\ViewRoot.java"
"mScrollMayChange","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\view\ViewRoot.java"
"DO_TRAVERSAL","true","false","false","true","true","int","1000","[]","Optional.empty","\android\view\ViewRoot.java"
"mCurScrollY","false","false","false","false","false","int","null","[]","Optional.empty","\android\view\ViewRoot.java"
"DISPATCH_TRACKBALL","true","false","false","true","true","int","1007","[]","Optional.empty","\android\view\ViewRoot.java"
"mEglContext","false","false","false","false","false","EGLContext","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mTmpLocation","false","false","false","false","true","int","new int[2]","[]","Optional.empty","\android\view\ViewRoot.java"
"DISPATCH_KEY","true","false","false","true","true","int","1005","[]","Optional.empty","\android\view\ViewRoot.java"
"mEglDisplay","false","false","false","false","false","EGLDisplay","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mAddNesting","false","false","false","false","false","int","null","[]","Optional[/*package*/
]","\android\view\ViewRoot.java"
"MAX_ACCELERATION","false","false","false","true","true","float","20","[]","Optional[/**
 * The maximum amount of acceleration we will apply.
 */
]","\android\view\ViewRoot.java"
"mIsCreating","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\view\ViewRoot.java"
"FINISHED_EVENT","true","false","false","true","true","int","1010","[]","Optional.empty","\android\view\ViewRoot.java"
"sFirstDrawHandlers","false","false","false","true","true","ArrayList<Runnable>","new ArrayList<Runnable>()","[]","Optional.empty","\android\view\ViewRoot.java"
"mWindowAttributesChanged","false","false","false","false","false","boolean","false","[]","Optional.empty","\android\view\ViewRoot.java"
"mTraversalScheduled","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mTempRect","false","false","false","false","true","Rect","null","[]","Optional[// used in the transaction to not thrash the heap.
]","\android\view\ViewRoot.java"
"mHolder","false","false","true","false","false","SurfaceHolder","new SurfaceHolder() {

    // we only need a SurfaceHolder for opengl. it would be nice
    // to implement everything else though, especially the callback
    // support (opengl doesn't make use of it right now, but eventually
    // will).
    public Surface getSurface() {
        return mSurface;
    }

    public boolean isCreating() {
        return false;
    }

    public void addCallback(Callback callback) {
    }

    public void removeCallback(Callback callback) {
    }

    public void setFixedSize(int width, int height) {
    }

    public void setSizeFromLayout() {
    }

    public void setFormat(int format) {
    }

    public void setType(int type) {
    }

    public void setKeepScreenOn(boolean screenOn) {
    }

    public Canvas lockCanvas() {
        return null;
    }

    public Canvas lockCanvas(Rect dirty) {
        return null;
    }

    public void unlockCanvasAndPost(Canvas canvas) {
    }

    public Rect getSurfaceFrame() {
        return null;
    }
}","[]","Optional.empty","\android\view\ViewRoot.java"
"mHeight","false","false","false","false","false","int","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mAdded","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\view\ViewRoot.java"
"FINISH_INPUT_CONNECTION","true","false","false","true","true","int","1012","[]","Optional.empty","\android\view\ViewRoot.java"
"mLastGivenInsets","false","false","false","false","true","ViewTreeObserver.InternalInsetsInfo","new ViewTreeObserver.InternalInsetsInfo()","[]","Optional.empty","\android\view\ViewRoot.java"
"mStaticInit","false","false","false","true","true","Object","new Object()","[]","Optional.empty","\android\view\ViewRoot.java"
"DISPATCH_GET_NEW_SURFACE","true","false","false","true","true","int","1009","[]","Optional.empty","\android\view\ViewRoot.java"
"TAG","false","false","true","true","true","String","""ViewRoot""","[]","Optional.empty","\android\view\ViewRoot.java"
"sConfigCallbacks","false","false","false","true","true","ArrayList<ComponentCallbacks>","new ArrayList<ComponentCallbacks>()","[]","Optional.empty","\android\view\ViewRoot.java"
"mReportNextDraw","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\view\ViewRoot.java"
"DBG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\view\ViewRoot.java"
"lt","false","false","true","true","false","LatencyTimer","null","[]","Optional.empty","\android\view\ViewRoot.java"
"sInstanceCount","false","false","false","true","false","long","0","[]","Optional.empty","\android\view\ViewRoot.java"
"mPendingConfiguration","false","false","false","false","true","Configuration","new Configuration()","[]","Optional.empty","\android\view\ViewRoot.java"
"mInputMethodCallback","false","false","false","false","true","InputMethodCallback","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mPendingContentInsets","false","false","false","false","true","Rect","new Rect()","[]","Optional.empty","\android\view\ViewRoot.java"
"mSoftInputMode","false","false","false","false","false","int","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mFullRedrawNeeded","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mThread","false","false","false","false","true","Thread","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mInputQueue","false","false","false","false","false","InputQueue","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mWidth","false","false","false","false","false","int","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mLastTrackballTime","false","false","false","false","false","long","0","[]","Optional.empty","\android\view\ViewRoot.java"
"position","false","false","false","false","false","float","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mInitialized","false","false","false","true","false","boolean","false","[]","Optional.empty","\android\view\ViewRoot.java"
"mGlCanvas","false","false","false","false","false","Canvas","null","[]","Optional.empty","\android\view\ViewRoot.java"
"DEBUG_TRACKBALL","false","false","true","true","true","boolean","false || LOCAL_LOGV","[]","Optional.empty","\android\view\ViewRoot.java"
"DEBUG_ORIENTATION","false","false","true","true","true","boolean","false || LOCAL_LOGV","[]","Optional.empty","\android\view\ViewRoot.java"
"DEBUG_IMF","false","false","true","true","true","boolean","false || LOCAL_LOGV","[]","Optional.empty","\android\view\ViewRoot.java"
"RESIZED_REPORT","true","false","false","true","true","int","1003","[]","Optional.empty","\android\view\ViewRoot.java"
"lastMoveTime","false","false","false","false","false","long","0","[]","Optional.empty","\android\view\ViewRoot.java"
"mInputQueueCallback","false","false","false","false","false","InputQueue.Callback","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mProfile","false","false","true","false","false","boolean","false","[]","Optional[// FIXME for perf testing only
]","\android\view\ViewRoot.java"
"mEglSurface","false","false","false","false","false","EGLSurface","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mTranslator","false","false","false","false","false","CompatibilityInfo.Translator","null","[]","Optional.empty","\android\view\ViewRoot.java"
"newConfig","false","false","false","false","false","Configuration","null","[]","Optional.empty","\android\view\ViewRoot.java"
"visibleInsets","false","false","false","false","false","Rect","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mAttachInfo","false","false","false","false","true","View.AttachInfo","null","[]","Optional.empty","\android\view\ViewRoot.java"
"mViewVisibility","false","false","false","false","false","int","null","[]","Optional.empty","\android\view\ViewRoot.java"
"SIZE","true","false","false","true","true","String","""_size""","[]","Optional[/**
 * The size of the file in bytes
 * <P>Type: INTEGER (long)</P>
 */
]","\android\provider\DrmStore.java"
"MIME_TYPE","true","false","false","true","true","String","""mime_type""","[]","Optional[/**
 * The MIME type of the file
 * <P>Type: TEXT</P>
 */
]","\android\provider\DrmStore.java"
"TITLE","true","false","false","true","true","String","""title""","[]","Optional[/**
 * The title of the file content
 * <P>Type: TEXT</P>
 */
]","\android\provider\DrmStore.java"
"AUTHORITY","true","false","false","true","true","String","""drm""","[]","Optional.empty","\android\provider\DrmStore.java"
"CONTENT_URI","true","false","false","true","true","Uri","Uri.parse(""content://"" + AUTHORITY + ""/audio"")","[]","Optional.empty","\android\provider\DrmStore.java"
"TAG","false","false","true","true","true","String","""DrmStore""","[]","Optional.empty","\android\provider\DrmStore.java"
"DATA","true","false","false","true","true","String","""_data""","[]","Optional[/**
 * The data stream for the file
 * <P>Type: DATA STREAM</P>
 */
]","\android\provider\DrmStore.java"
"ACCESS_DRM_PERMISSION","false","false","true","true","true","String","""android.permission.ACCESS_DRM""","[]","Optional[/**
 * This is in the Manifest class of the drm provider, but that isn't visible
 * in the framework.
 */
]","\android\provider\DrmStore.java"
"mInstrumentation","false","false","true","false","false","Instrumentation","null","[]","Optional.empty","\android\test\InstrumentationTestCase.java"
"fis","false","false","true","false","false","SocketInputStream","null","[]","Optional.empty","\android\net\LocalSocketImpl.java"
"fd","false","false","true","false","false","FileDescriptor","null","[]","Optional[/**
 * null if closed or not yet created
 */
]","\android\net\LocalSocketImpl.java"
"fos","false","false","true","false","false","SocketOutputStream","null","[]","Optional.empty","\android\net\LocalSocketImpl.java"
"outboundFileDescriptors","false","false","false","false","false","FileDescriptor","null","[]","Optional[/**
 * file descriptor array that should be written during next write
 */
]","\android\net\LocalSocketImpl.java"
"writeMonitor","false","false","true","false","false","Object","new Object()","[]","Optional.empty","\android\net\LocalSocketImpl.java"
"readMonitor","false","false","true","false","false","Object","new Object()","[]","Optional.empty","\android\net\LocalSocketImpl.java"
"inboundFileDescriptors","false","false","false","false","false","FileDescriptor","null","[]","Optional[/**
 * file descriptor array received during a previous read
 */
]","\android\net\LocalSocketImpl.java"
"DO_ATTACH_TOKEN","false","false","true","true","true","int","10","[]","Optional.empty","\android\inputmethodservice\IInputMethodWrapper.java"
"DO_REVOKE_SESSION","false","false","true","true","true","int","50","[]","Optional.empty","\android\inputmethodservice\IInputMethodWrapper.java"
"mContext","false","false","false","false","true","Context","null","[]","Optional.empty","\android\inputmethodservice\IInputMethodWrapper.java"
"mInputMethod","false","false","false","false","true","WeakReference<InputMethod>","null","[]","Optional.empty","\android\inputmethodservice\IInputMethodWrapper.java"
"DO_START_INPUT","false","false","true","true","true","int","32","[]","Optional.empty","\android\inputmethodservice\IInputMethodWrapper.java"
"DO_DUMP","false","false","true","true","true","int","1","[]","Optional.empty","\android\inputmethodservice\IInputMethodWrapper.java"
"mTarget","false","false","false","false","true","WeakReference<AbstractInputMethodService>","null","[]","Optional.empty","\android\inputmethodservice\IInputMethodWrapper.java"
"DO_SET_SESSION_ENABLED","false","false","true","true","true","int","45","[]","Optional.empty","\android\inputmethodservice\IInputMethodWrapper.java"
"DO_SET_INPUT_CONTEXT","false","false","true","true","true","int","20","[]","Optional.empty","\android\inputmethodservice\IInputMethodWrapper.java"
"TAG","false","false","true","true","true","String","""InputMethodWrapper""","[]","Optional.empty","\android\inputmethodservice\IInputMethodWrapper.java"
"DO_RESTART_INPUT","false","false","true","true","true","int","34","[]","Optional.empty","\android\inputmethodservice\IInputMethodWrapper.java"
"DO_HIDE_SOFT_INPUT","false","false","true","true","true","int","70","[]","Optional.empty","\android\inputmethodservice\IInputMethodWrapper.java"
"mCb","false","false","false","false","true","IInputMethodCallback","null","[]","Optional.empty","\android\inputmethodservice\IInputMethodWrapper.java"
"mCaller","false","false","false","false","true","HandlerCaller","null","[]","Optional.empty","\android\inputmethodservice\IInputMethodWrapper.java"
"DO_UNSET_INPUT_CONTEXT","false","false","true","true","true","int","30","[]","Optional.empty","\android\inputmethodservice\IInputMethodWrapper.java"
"DO_CREATE_SESSION","false","false","true","true","true","int","40","[]","Optional.empty","\android\inputmethodservice\IInputMethodWrapper.java"
"notified","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\inputmethodservice\IInputMethodWrapper.java"
"DO_SHOW_SOFT_INPUT","false","false","true","true","true","int","60","[]","Optional.empty","\android\inputmethodservice\IInputMethodWrapper.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\inputmethodservice\IInputMethodWrapper.java"
"CREATOR","true","false","false","true","true","Creator<TechListParcel>","new Creator<TechListParcel>() {

    @Override
    public TechListParcel createFromParcel(Parcel source) {
        int count = source.readInt();
        String[][] techLists = new String[count][];
        for (int i = 0; i < count; i++) {
            techLists[i] = source.readStringArray();
        }
        return new TechListParcel(techLists);
    }

    @Override
    public TechListParcel[] newArray(int size) {
        return new TechListParcel[size];
    }
}","[]","Optional.empty","\android\nfc\TechListParcel.java"
"mTechLists","false","false","true","false","false","String","null","[]","Optional.empty","\android\nfc\TechListParcel.java"
"RELEASE","true","false","false","true","true","boolean","!DEBUG","[@Deprecated]","Optional[/**
 * @deprecated Use {@link #DEBUG} instead.
 */
]","\android\util\Config.java"
"LOGD","true","false","false","true","true","boolean","true","[@Deprecated]","Optional[/**
 * @deprecated Always true.
 */
]","\android\util\Config.java"
"LOGV","true","false","false","true","true","boolean","false","[@Deprecated]","Optional[/**
 * @deprecated Always false.
 */
]","\android\util\Config.java"
"PROFILE","true","false","false","true","true","boolean","false","[@Deprecated]","Optional[/**
 * @deprecated Always false.
 */
]","\android\util\Config.java"
"DEBUG","true","false","false","true","true","boolean","ConfigBuildFlags.DEBUG","[]","Optional[/**
 * If this is a debug build, this field will be true.
 */
]","\android\util\Config.java"
"mNeedToParseVersion","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\pim\vcard\VCardSourceDetector.java"
"PARSE_TYPE_APPLE","false","false","true","true","true","int","1","[]","Optional[// We confirmed they usually use UTF-8, but not sure about vCard type.
]","\android\pim\vcard\VCardSourceDetector.java"
"FOMA_SIGNS","false","false","true","true","false","Set<String>","new HashSet<String>(Arrays.asList(""X-SD-VERN"", ""X-SD-FORMAT_VER"", ""X-SD-CATEGORIES"", ""X-SD-CLASS"", ""X-SD-DCREATED"", ""X-SD-DESCRIPTION""))","[]","Optional[// In other words, Japanese FOMA mobile phones are detected as FOMA, not JAPANESE_MOBILE_PHONES.
]","\android\pim\vcard\VCardSourceDetector.java"
"mVersion","false","false","true","false","false","int","-1","[]","Optional[// -1 == unknown
]","\android\pim\vcard\VCardSourceDetector.java"
"WINDOWS_MOBILE_PHONE_SIGNS","false","false","true","true","false","Set<String>","new HashSet<String>(Arrays.asList(""X-MICROSOFT-ASST_TEL"", ""X-MICROSOFT-ASSISTANT"", ""X-MICROSOFT-OFFICELOC""))","[]","Optional.empty","\android\pim\vcard\VCardSourceDetector.java"
"PARSE_TYPE_UNKNOWN","true","false","false","true","true","int","0","[]","Optional[/**
 * Represents that no estimation is available. Users of this class is able to this
 * constant when you don't want to let a vCard parser rely on estimation for parse type.
 */
]","\android\pim\vcard\VCardSourceDetector.java"
"LOG_TAG","false","false","true","true","true","String","""VCardSourceDetector""","[]","Optional.empty","\android\pim\vcard\VCardSourceDetector.java"
"APPLE_SIGNS","false","false","true","true","false","Set<String>","new HashSet<String>(Arrays.asList(""X-PHONETIC-FIRST-NAME"", ""X-PHONETIC-MIDDLE-NAME"", ""X-PHONETIC-LAST-NAME"", ""X-ABADR"", ""X-ABUID""))","[]","Optional.empty","\android\pim\vcard\VCardSourceDetector.java"
"mSpecifiedCharset","false","false","true","false","false","String","null","[]","Optional.empty","\android\pim\vcard\VCardSourceDetector.java"
"mNeedToParseCharset","false","false","true","false","false","boolean","null","[]","Optional[// Some mobile phones (like FOMA) tells us the charset of the data.
]","\android\pim\vcard\VCardSourceDetector.java"
"TYPE_FOMA_CHARSET_SIGN","false","false","true","true","false","String","""X-SD-CHAR_CODE""","[]","Optional.empty","\android\pim\vcard\VCardSourceDetector.java"
"PARSE_TYPE_MOBILE_PHONE_JP","false","false","true","true","true","int","2","[]","Optional[// For Japanese mobile phones, which are usually using Shift_JIS as a charset.
]","\android\pim\vcard\VCardSourceDetector.java"
"PARSE_TYPE_WINDOWS_MOBILE_V65_JP","false","false","true","true","true","int","4","[]","Optional[// For Japanese Windows Mobel phones. It's version is supposed to be 6.5.
]","\android\pim\vcard\VCardSourceDetector.java"
"PARSE_TYPE_DOCOMO_TORELATE_NEST","false","false","true","true","true","int","3","[]","Optional[// For some of mobile phones released from DoCoMo, which use nested vCard.
]","\android\pim\vcard\VCardSourceDetector.java"
"JAPANESE_MOBILE_PHONE_SIGNS","false","false","true","true","false","Set<String>","new HashSet<String>(Arrays.asList(""X-GNO"", ""X-GN"", ""X-REDUCTION""))","[]","Optional.empty","\android\pim\vcard\VCardSourceDetector.java"
"mParseType","false","false","true","false","false","int","0","[]","Optional[// Not sure.
]","\android\pim\vcard\VCardSourceDetector.java"
"numRunning","true","false","false","false","false","int","null","[]","Optional[/**
 * Number of activities that are currently running (not stopped
 * and persisted) in this task.
 */
]","\android\app\ActivityManager.java"
"importanceReasonCode","true","false","false","false","false","int","null","[]","Optional[/**
 * The reason for {@link #importance}, if any.
 */
]","\android\app\ActivityManager.java"
"importanceReasonComponent","true","false","false","false","false","ComponentName","null","[]","Optional[/**
 * For the specified values of {@link #importanceReasonCode}, this
 * is the name of the component that is being used in this process.
 */
]","\android\app\ActivityManager.java"
"CREATOR","true","false","false","true","true","Creator<RunningAppProcessInfo>","new Creator<RunningAppProcessInfo>() {

    public RunningAppProcessInfo createFromParcel(Parcel source) {
        return new RunningAppProcessInfo(source);
    }

    public RunningAppProcessInfo[] newArray(int size) {
        return new RunningAppProcessInfo[size];
    }
}","[]","Optional.empty","\android\app\ActivityManager.java"
"clientCount","true","false","false","false","false","int","null","[]","Optional[/**
 * Number of clients connected to the service.
 */
]","\android\app\ActivityManager.java"
"IMPORTANCE_VISIBLE","true","false","false","true","true","int","200","[]","Optional[/**
 * Constant for {@link #importance}: this process is running something
 * that is actively visible to the user, though not in the immediate
 * foreground.
 */
]","\android\app\ActivityManager.java"
"importanceReasonPid","true","false","false","false","false","int","null","[]","Optional[/**
 * For the specified values of {@link #importanceReasonCode}, this
 * is the process ID of the other process that is a client of this
 * process.  This will be 0 if no other process is using this one.
 */
]","\android\app\ActivityManager.java"
"IMPORTANCE_CANT_SAVE_STATE","true","false","false","true","true","int","170","[]","Optional[/**
 * Constant for {@link #importance}: this process is running an
 * application that can not save its state, and thus can't be killed
 * while in the background.
 * @hide
 */
]","\android\app\ActivityManager.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\android\app\ActivityManager.java"
"uid","true","false","false","false","false","int","null","[]","Optional[/**
 * The user id of this process.
 */
]","\android\app\ActivityManager.java"
"crashCount","true","false","false","false","false","int","null","[]","Optional[/**
 * Number of times the service's process has crashed while the service
 * is running.
 */
]","\android\app\ActivityManager.java"
"NO_ERROR","true","false","false","true","true","int","0","[]","Optional[/**
 * Condition codes
 */
]","\android\app\ActivityManager.java"
"NOT_RESPONDING","true","false","false","true","true","int","2","[]","Optional.empty","\android\app\ActivityManager.java"
"started","true","false","false","false","false","boolean","null","[]","Optional[/**
 * Set to true if this service has been explicitly started.
 */
]","\android\app\ActivityManager.java"
"FLAG_CANT_SAVE_STATE","true","false","false","true","true","int","1 << 0","[]","Optional[/**
 * Constant for {@link #flags}: this is an app that is unable to
 * correctly save its state when going to the background,
 * so it can not be killed while in the background.
 * @hide
 */
]","\android\app\ActivityManager.java"
"IMPORTANCE_BACKGROUND","true","false","false","true","true","int","400","[]","Optional[/**
 * Constant for {@link #importance}: this process process contains
 * background code that is expendable.
 */
]","\android\app\ActivityManager.java"
"FLAG_FOREGROUND","true","false","false","true","true","int","1 << 1","[]","Optional[/**
 * Bit for {@link #flags}: set if the service has asked to
 * run as a foreground process.
 */
]","\android\app\ActivityManager.java"
"IMPORTANCE_PERCEPTIBLE","true","false","false","true","true","int","130","[]","Optional[/**
 * Constant for {@link #importance}: this process is running something
 * that is considered to be actively perceptible to the user.  An
 * example would be an application performing background music playback.
 */
]","\android\app\ActivityManager.java"
"FLAG_PERSISTENT_PROCESS","true","false","false","true","true","int","1 << 3","[]","Optional[/**
 * Bit for {@link #flags): set if the service is running in a
 * persistent process.
 */
]","\android\app\ActivityManager.java"
"REASON_PROVIDER_IN_USE","true","false","false","true","true","int","1","[]","Optional[/**
 * Constant for {@link #importanceReasonCode}: one of the application's
 * content providers is being used by another process.  The pid of
 * the client process is in {@link #importanceReasonPid} and the
 * target provider in this process is in
 * {@link #importanceReasonComponent}.
 */
]","\android\app\ActivityManager.java"
"IMPORTANCE_FOREGROUND","true","false","false","true","true","int","100","[]","Optional[/**
 * Constant for {@link #importance}: this process is running the
 * foreground UI.
 */
]","\android\app\ActivityManager.java"
"lastActivityTime","true","false","false","false","false","long","null","[]","Optional[/**
 * The time when there was last activity in the service (either
 * explicit requests to start it or clients binding to it).  This
 * is in units of {@link android.os.SystemClock#uptimeMillis()}.
 */
]","\android\app\ActivityManager.java"
"importance","true","false","false","false","false","int","null","[]","Optional[/**
 * The relative importance level that the system places on this
 * process.  May be one of {@link #IMPORTANCE_FOREGROUND},
 * {@link #IMPORTANCE_VISIBLE}, {@link #IMPORTANCE_SERVICE},
 * {@link #IMPORTANCE_BACKGROUND}, or {@link #IMPORTANCE_EMPTY}.  These
 * constants are numbered so that ""more important"" values are always
 * smaller than ""less important"" values.
 */
]","\android\app\ActivityManager.java"
"description","true","false","false","false","false","CharSequence","null","[]","Optional[/**
 * Description of the task's current state.
 */
]","\android\app\ActivityManager.java"
"baseActivity","true","false","false","false","false","ComponentName","null","[]","Optional[/**
 * The component launched as the first activity in the task.  This can
 * be considered the ""application"" of this task.
 */
]","\android\app\ActivityManager.java"
"FLAG_STARTED","true","false","false","true","true","int","1 << 0","[]","Optional[/**
 * Bit for {@link #flags}: set if this service has been
 * explicitly started.
 */
]","\android\app\ActivityManager.java"
"numActivities","true","false","false","false","false","int","null","[]","Optional[/**
 * Number of activities in this task.
 */
]","\android\app\ActivityManager.java"
"lowMemory","true","false","false","false","false","boolean","null","[]","Optional[/**
 * Set to true if the system considers itself to currently be in a low
 * memory situation.
 */
]","\android\app\ActivityManager.java"
"origActivity","true","false","false","false","false","ComponentName","null","[]","Optional[/**
 * If this task was started from an alias, this is the actual
 * activity component that was initially started; the component of
 * the baseIntent in this case is the name of the actual activity
 * implementation that the alias referred to.  Otherwise, this is null.
 */
]","\android\app\ActivityManager.java"
"shortMsg","true","false","false","false","false","String","null","[]","Optional[/**
 * A short message describing the error condition.
 */
]","\android\app\ActivityManager.java"
"service","true","false","false","false","false","ComponentName","null","[]","Optional[/**
 * The service component.
 */
]","\android\app\ActivityManager.java"
"REASON_SERVICE_IN_USE","true","false","false","true","true","int","2","[]","Optional[/**
 * Constant for {@link #importanceReasonCode}: one of the application's
 * content providers is being used by another process.  The pid of
 * the client process is in {@link #importanceReasonPid} and the
 * target provider in this process is in
 * {@link #importanceReasonComponent}.
 */
]","\android\app\ActivityManager.java"
"FLAG_PERSISTENT","true","false","false","true","true","int","1 << 1","[]","Optional[/**
 * Constant for {@link #flags}: this process is associated with a
 * persistent system app.
 * @hide
 */
]","\android\app\ActivityManager.java"
"clientPackage","true","false","false","false","false","String","null","[]","Optional[/**
 * For special services that are bound to by system code, this is
 * the package that holds the binding.
 */
]","\android\app\ActivityManager.java"
"topActivity","true","false","false","false","false","ComponentName","null","[]","Optional[/**
 * The activity component at the top of the history stack of the task.
 * This is what the user is currently doing.
 */
]","\android\app\ActivityManager.java"
"foreground","true","false","false","false","false","boolean","null","[]","Optional[/**
 * Set to true if the service has asked to run as a foreground process.
 */
]","\android\app\ActivityManager.java"
"RECENT_IGNORE_UNAVAILABLE","true","false","false","true","true","int","0x0002","[]","Optional[/**
 * @hide
 * TODO: Make this public.  Provides a list that does not contain any
 * recent tasks that currently are not available to the user.
 */
]","\android\app\ActivityManager.java"
"baseIntent","true","false","false","false","false","Intent","null","[]","Optional[/**
 * The original Intent used to launch the task.  You can use this
 * Intent to re-launch the task (if it is no longer running) or bring
 * the current task to the front.
 */
]","\android\app\ActivityManager.java"
"id","true","false","false","false","false","int","null","[]","Optional[/**
 * A unique identifier for this task.
 */
]","\android\app\ActivityManager.java"
"FLAG_SYSTEM_PROCESS","true","false","false","true","true","int","1 << 2","[]","Optional[/**
 * Bit for {@link #flags): set if the service is running in a
 * core system process.
 */
]","\android\app\ActivityManager.java"
"restarting","true","false","false","false","false","long","null","[]","Optional[/**
 * If non-zero, this service is not currently running, but scheduled to
 * restart at the given time.
 */
]","\android\app\ActivityManager.java"
"flags","true","false","false","false","false","int","null","[]","Optional[/**
 * Flags of information.  May be any of
 * {@link #FLAG_CANT_SAVE_STATE}.
 * @hide
 */
]","\android\app\ActivityManager.java"
"stackTrace","true","false","false","false","false","String","null","[]","Optional[/**
 * The stack trace where the error originated.  May be null.
 */
]","\android\app\ActivityManager.java"
"IMPORTANCE_EMPTY","true","false","false","true","true","int","500","[]","Optional[/**
 * Constant for {@link #importance}: this process is empty of any
 * actively running code.
 */
]","\android\app\ActivityManager.java"
"activeSince","true","false","false","false","false","long","null","[]","Optional[/**
 * The time when the service was first made active, either by someone
 * starting or binding to it.  This
 * is in units of {@link android.os.SystemClock#elapsedRealtime()}.
 */
]","\android\app\ActivityManager.java"
"clientLabel","true","false","false","false","false","int","null","[]","Optional[/**
 * For special services that are bound to by system code, this is
 * a string resource providing a user-visible label for who the
 * client is.
 */
]","\android\app\ActivityManager.java"
"mHandler","false","false","true","false","true","Handler","null","[]","Optional.empty","\android\app\ActivityManager.java"
"TAG","false","false","true","true","false","String","""ActivityManager""","[]","Optional.empty","\android\app\ActivityManager.java"
"RECENT_WITH_EXCLUDED","true","false","false","true","true","int","0x0001","[]","Optional[/**
 * Flag for use with {@link #getRecentTasks}: return all tasks, even those
 * that have set their
 * {@link android.content.Intent#FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS} flag.
 */
]","\android\app\ActivityManager.java"
"pid","true","false","false","false","false","int","null","[]","Optional[/**
 * The pid of this process; 0 if none
 */
]","\android\app\ActivityManager.java"
"threshold","true","false","false","false","false","long","null","[]","Optional[/**
 * The threshold of {@link #availMem} at which we consider memory to be
 * low and start killing background services and other non-extraneous
 * processes.
 */
]","\android\app\ActivityManager.java"
"CRASHED","true","false","false","true","true","int","1","[]","Optional.empty","\android\app\ActivityManager.java"
"processName","true","false","false","false","false","String","null","[]","Optional[/**
 * The name of the process that this object is associated with
 */
]","\android\app\ActivityManager.java"
"availMem","true","false","false","false","false","long","null","[]","Optional[/**
 * The total available memory on the system.  This number should not
 * be considered absolute: due to the nature of the kernel, a significant
 * portion of this memory is actually in use and needed for the overall
 * system to run well.
 */
]","\android\app\ActivityManager.java"
"tag","true","false","false","false","false","String","null","[]","Optional[/**
 * The activity name associated with the error, if known.  May be null.
 */
]","\android\app\ActivityManager.java"
"thumbnail","true","false","false","false","false","Bitmap","null","[]","Optional[/**
 * Thumbnail representation of the task's current state.
 */
]","\android\app\ActivityManager.java"
"pkgList","true","false","false","false","false","String","null","[]","Optional[/**
 * All packages that have been loaded into the process.
 */
]","\android\app\ActivityManager.java"
"longMsg","true","false","false","false","false","String","null","[]","Optional[/**
 * A long message describing the error condition.
 */
]","\android\app\ActivityManager.java"
"lru","true","false","false","false","false","int","null","[]","Optional[/**
 * An additional ordering within a particular {@link #importance}
 * category, providing finer-grained information about the relative
 * utility of processes within a category.  This number means nothing
 * except that a smaller values are more recently used (and thus
 * more important).  Currently an LRU value is only maintained for
 * the {@link #IMPORTANCE_BACKGROUND} category, though others may
 * be maintained in the future.
 */
]","\android\app\ActivityManager.java"
"REASON_UNKNOWN","true","false","false","true","true","int","0","[]","Optional[/**
 * Constant for {@link #importanceReasonCode}: nothing special has
 * been specified for the reason for this level.
 */
]","\android\app\ActivityManager.java"
"condition","true","false","false","false","false","int","null","[]","Optional[/**
 * The condition that the process is in.
 */
]","\android\app\ActivityManager.java"
"localLOGV","false","false","true","true","false","boolean","DEBUG || android.util.Config.LOGV","[]","Optional.empty","\android\app\ActivityManager.java"
"IMPORTANCE_SERVICE","true","false","false","true","true","int","300","[]","Optional[/**
 * Constant for {@link #importance}: this process is contains services
 * that should remain running.
 */
]","\android\app\ActivityManager.java"
"crashData","true","false","false","false","false","byte","null","[]","Optional[/**
 * to be deprecated: This value will always be null.
 */
]","\android\app\ActivityManager.java"
"process","true","false","false","false","false","String","null","[]","Optional[/**
 * The name of the process this service runs in.
 */
]","\android\app\ActivityManager.java"
"DEBUG","false","false","true","true","false","boolean","false","[]","Optional.empty","\android\app\ActivityManager.java"
"mColumns","false","false","true","false","false","String","null","[]","Optional.empty","\android\database\BulkCursorToCursorAdaptor.java"
"mBulkCursor","false","false","true","false","false","IBulkCursor","null","[]","Optional.empty","\android\database\BulkCursorToCursorAdaptor.java"
"mObserverBridge","false","false","true","false","false","SelfContentObserver","null","[]","Optional.empty","\android\database\BulkCursorToCursorAdaptor.java"
"mCount","false","false","true","false","false","int","null","[]","Optional.empty","\android\database\BulkCursorToCursorAdaptor.java"
"mWantsAllOnMoveCalls","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\database\BulkCursorToCursorAdaptor.java"
"TAG","false","false","true","true","true","String","""BulkCursor""","[]","Optional.empty","\android\database\BulkCursorToCursorAdaptor.java"
"CREATOR","true","false","false","true","true","Creator<FeatureInfo>","new Creator<FeatureInfo>() {

    public FeatureInfo createFromParcel(Parcel source) {
        return new FeatureInfo(source);
    }

    public FeatureInfo[] newArray(int size) {
        return new FeatureInfo[size];
    }
}","[]","Optional.empty","\android\content\pm\FeatureInfo.java"
"GL_ES_VERSION_UNDEFINED","true","false","false","true","true","int","0","[]","Optional[/**
 * Default value for {@link #reqGlEsVersion};
 */
]","\android\content\pm\FeatureInfo.java"
"reqGlEsVersion","true","false","false","false","false","int","null","[]","Optional[/**
 * The GLES version used by an application. The upper order 16 bits represent the
 * major version and the lower order 16 bits the minor version.  Only valid
 * if {@link #name} is null.
 */
]","\android\content\pm\FeatureInfo.java"
"FLAG_REQUIRED","true","false","false","true","true","int","0x0001","[]","Optional[/**
 * Set on {@link #flags} if this feature has been required by the application.
 */
]","\android\content\pm\FeatureInfo.java"
"name","true","false","false","false","false","String","null","[]","Optional[/**
 * The name of this feature, for example ""android.hardware.camera"".  If
 * this is null, then this is an OpenGL ES version feature as described
 * in {@link #reqGlEsVersion}.
 */
]","\android\content\pm\FeatureInfo.java"
"flags","true","false","false","false","false","int","null","[]","Optional[/**
 * Additional flags.  May be zero or more of {@link #FLAG_REQUIRED}.
 */
]","\android\content\pm\FeatureInfo.java"
"URI_SCHEME_INLINE","true","false","false","true","true","String","""inline""","[]","Optional[/**
 * The scheme used currently for html content in {@link #EXTRA_VOICE_SEARCH_RESULT_HTML}.
 * Note that this should only be used in tandem with this particular extra; it should
 * NOT be used for generic URIs such as those found in the data field of an Intent.
 */
]","\android\speech\RecognizerResultsIntent.java"
"EXTRA_VOICE_SEARCH_RESULT_STRINGS","true","false","false","true","true","String","""android.speech.extras.VOICE_SEARCH_RESULT_STRINGS""","[]","Optional[/**
 * The key to an extra {@link ArrayList} of {@link String}s that contains the list of
 * recognition alternates from voice search, in order from highest to lowest confidence.
 */
]","\android\speech\RecognizerResultsIntent.java"
"EXTRA_VOICE_SEARCH_RESULT_URLS","true","false","false","true","true","String","""android.speech.extras.VOICE_SEARCH_RESULT_URLS""","[]","Optional[/**
 * The key to an extra {@link ArrayList} of {@link String}s that contains the search urls
 * to use, if available, for the recognition alternates provided in
 * {@link #EXTRA_VOICE_SEARCH_RESULT_STRINGS}. This list should always be the same size as the
 * one provided in {@link #EXTRA_VOICE_SEARCH_RESULT_STRINGS} - if a result cannot provide a
 * search url, that entry in this ArrayList should be <code>null</code>, and the implementor of
 * {@link #ACTION_VOICE_SEARCH_RESULTS} should execute a search of its own choosing,
 * based on the recognition result string.
 */
]","\android\speech\RecognizerResultsIntent.java"
"ACTION_VOICE_SEARCH_RESULTS","true","false","false","true","true","String","""android.speech.action.VOICE_SEARCH_RESULTS""","[]","Optional[/**
 * Intent that can be sent by implementations of voice search to display the results of
 * a search in, for example, a web browser.
 *
 * This intent should always be accompanied by at least
 * {@link #EXTRA_VOICE_SEARCH_RESULT_STRINGS}, and optionally but recommended,
 * {@link #EXTRA_VOICE_SEARCH_RESULT_URLS}, and sometimes
 * {@link #EXTRA_VOICE_SEARCH_RESULT_HTML} and
 * {@link #EXTRA_VOICE_SEARCH_RESULT_HTML_BASE_URLS}.
 *
 * These are parallel arrays, where a recognition result string at index N of
 * {@link #EXTRA_VOICE_SEARCH_RESULT_STRINGS} should be accompanied by a url to use for
 * searching based on that string at index N of {@link #EXTRA_VOICE_SEARCH_RESULT_URLS},
 * and, possibly, the full html to display for that result at index N of
 * {@link #EXTRA_VOICE_SEARCH_RESULT_HTML}. If full html is provided, a base url (or
 * list of base urls) should be provided with {@link #EXTRA_VOICE_SEARCH_RESULT_HTML_BASE_URLS}.
 */
]","\android\speech\RecognizerResultsIntent.java"
"EXTRA_VOICE_SEARCH_RESULT_HTML_BASE_URLS","true","false","false","true","true","String","""android.speech.extras.VOICE_SEARCH_RESULT_HTML_BASE_URLS""","[]","Optional[/**
 * The key to an extra {@link ArrayList} of {@link String}s that contains the base url to
 * assume when interpreting html provided in {@link #EXTRA_VOICE_SEARCH_RESULT_HTML}.
 *
 * A list of size 1 may be provided to apply the same base url to all html results.
 * A list of the same size as {@link #EXTRA_VOICE_SEARCH_RESULT_STRINGS} may be provided
 * to apply different base urls to each different html result in the
 * {@link #EXTRA_VOICE_SEARCH_RESULT_HTML} list.
 */
]","\android\speech\RecognizerResultsIntent.java"
"EXTRA_VOICE_SEARCH_RESULT_HTTP_HEADERS","true","false","false","true","true","String","""android.speech.extras.EXTRA_VOICE_SEARCH_RESULT_HTTP_HEADERS""","[]","Optional[/**
 * The key to an extra {@link ArrayList} of {@link Bundle}s that contains key/value pairs.
 * All the values and the keys are {@link String}s. Each key/value pair represents an extra HTTP
 * header. The keys can't be the standard HTTP headers as they are set by the WebView.
 *
 * A list of size 1 may be provided to apply the same HTTP headers to all web results. A
 * list of the same size as {@link #EXTRA_VOICE_SEARCH_RESULT_STRINGS} may be provided to
 * apply different HTTP headers to each different web result in the list. These headers will
 * only be used in the case that the url for a particular web result (from
 * {@link #EXTRA_VOICE_SEARCH_RESULT_URLS}) is loaded.
 */
]","\android\speech\RecognizerResultsIntent.java"
"EXTRA_VOICE_SEARCH_RESULT_HTML","true","false","false","true","true","String","""android.speech.extras.VOICE_SEARCH_RESULT_HTML""","[]","Optional[/**
 * The key to an extra {@link ArrayList} of {@link String}s that contains the html content to
 * use, if available, for the recognition alternates provided in
 * {@link #EXTRA_VOICE_SEARCH_RESULT_STRINGS}. This list should always be the same size as the
 * one provided in {@link #EXTRA_VOICE_SEARCH_RESULT_STRINGS} - if a result cannot provide
 * html, that entry in this list should be <code>null</code>, and the implementor of
 * {@link #ACTION_VOICE_SEARCH_RESULTS} should back off to the corresponding url provided in
 * {@link #EXTRA_VOICE_SEARCH_RESULT_URLS}, if available, or else should execute a search of
 * its own choosing, based on the recognition result string.
 *
 * Currently this html content should be expected in the form of a uri with scheme
 * {@link #URI_SCHEME_INLINE} for the Browser. In the future this may change to a ""content://""
 * uri or some other identifier. Anyone who reads this extra should confirm that a result is
 * in fact an ""inline:"" uri and back off to the urls or strings gracefully if it is not, thus
 * maintaining future backwards compatibility if this changes.
 */
]","\android\speech\RecognizerResultsIntent.java"
"PERIOD_DAY","true","false","false","true","true","int","5","[]","Optional[// @hide
]","\android\net\ThrottleManager.java"
"PERIOD_MONTH","true","false","false","true","true","int","2","[]","Optional[// {@hide}
]","\android\net\ThrottleManager.java"
"PERIOD_60MIN","true","false","false","true","true","int","8","[]","Optional[// @hide
]","\android\net\ThrottleManager.java"
"PERIOD_60SEC","true","false","false","true","true","int","10","[]","Optional[// @hide
]","\android\net\ThrottleManager.java"
"EXTRA_CYCLE_END","true","false","false","true","true","String","""cycleEnd""","[]","Optional[/**
 * contains a long of the ms since 1970 used to init a calendar, etc for the end
 * of the cycle
 * {@hide}
 */
]","\android\net\ThrottleManager.java"
"THROTTLE_POLL_ACTION","true","false","false","true","true","String","""android.net.thrott.POLL_ACTION""","[]","Optional[/**
 * Broadcast each polling period to indicate new data counts.
 *
 * Includes four extras:
 * EXTRA_CYCLE_READ - a long of the read bytecount for the current cycle
 * EXTRA_CYCLE_WRITE -a long of the write bytecount for the current cycle
 * EXTRA_CYLCE_START -a long of MS for the cycle start time
 * EXTRA_CYCLE_END   -a long of MS for the cycle stop time
 * {@hide}
 */
]","\android\net\ThrottleManager.java"
"EXTRA_CYCLE_READ","true","false","false","true","true","String","""cycleRead""","[]","Optional[/**
 * The lookup key for a long for the read bytecount for this period.  Retrieve with
 * {@link android.content.Intent#getLongExtra(String)}.
 * {@hide}
 */
]","\android\net\ThrottleManager.java"
"EXTRA_THROTTLE_LEVEL","true","false","false","true","true","String","""level""","[]","Optional[/**
 * int of the current bandwidth in TODO
 * {@hide}
 */
]","\android\net\ThrottleManager.java"
"POLICY_CHANGED_ACTION","true","false","false","true","true","String","""android.net.thrott.POLICY_CHANGED_ACTION""","[]","Optional[/**
 * Broadcast on boot and whenever the settings change.
 * {@hide}
 */
]","\android\net\ThrottleManager.java"
"PERIOD_CYCLE","true","false","false","true","true","int","0","[]","Optional[// {@hide}
]","\android\net\ThrottleManager.java"
"PERIOD_YEAR","true","false","false","true","true","int","1","[]","Optional[// {@hide}
]","\android\net\ThrottleManager.java"
"PERIOD_SECOND","true","false","false","true","true","int","11","[]","Optional[// @hide
]","\android\net\ThrottleManager.java"
"EXTRA_CYCLE_WRITE","true","false","false","true","true","String","""cycleWrite""","[]","Optional[/**
 * contains a long of the number of bytes written in the cycle
 * {@hide}
 */
]","\android\net\ThrottleManager.java"
"THROTTLE_ACTION","true","false","false","true","true","String","""android.net.thrott.THROTTLE_ACTION""","[]","Optional[/**
 * Broadcast when the thottle level changes.
 * {@hide}
 */
]","\android\net\ThrottleManager.java"
"PERIOD_7DAY","true","false","false","true","true","int","4","[]","Optional[// @hide
]","\android\net\ThrottleManager.java"
"PERIOD_WEEK","true","false","false","true","true","int","3","[]","Optional[// {@hide}
]","\android\net\ThrottleManager.java"
"PERIOD_HOUR","true","false","false","true","true","int","7","[]","Optional[// @hide
]","\android\net\ThrottleManager.java"
"EXTRA_CYCLE_START","true","false","false","true","true","String","""cycleStart""","[]","Optional[/**
 * contains a long of the number of bytes read in the cycle
 * {@hide}
 */
]","\android\net\ThrottleManager.java"
"DIRECTION_TX","true","false","false","true","true","int","0","[]","Optional[// {@hide}
]","\android\net\ThrottleManager.java"
"PERIOD_MINUTE","true","false","false","true","true","int","9","[]","Optional[// @hide
]","\android\net\ThrottleManager.java"
"DIRECTION_RX","true","false","false","true","true","int","1","[]","Optional[// {@hide}
]","\android\net\ThrottleManager.java"
"PERIOD_24HOUR","true","false","false","true","true","int","6","[]","Optional[// @hide
]","\android\net\ThrottleManager.java"
"mService","false","false","true","false","false","IThrottleManager","null","[]","Optional.empty","\android\net\ThrottleManager.java"
"mArrowMatrix","false","false","false","false","true","Matrix","new Matrix()","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"mDimplesOfFling","false","false","true","false","false","int","0","[]","Optional[/**
 * The number of dimples we are flinging when we do the ""spin"" animation.  Used to know when to
 * wrap the icons back around so they ""rotate back"" onto the screen.
 * @see #updateAnimation()
 */
]","\com\android\internal\widget\RotarySelector.java"
"mArrowLongRight","false","false","true","false","false","Bitmap","null","[]","Optional[// Long arrow starting on the right, pointing CCW
]","\com\android\internal\widget\RotarySelector.java"
"mAnimating","false","false","true","false","false","boolean","false","[]","Optional[// the user lets go before triggering an action
]","\com\android\internal\widget\RotarySelector.java"
"mAnimationStartTime","false","false","true","false","false","long","null","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"mArrowShortLeftAndRight","false","false","true","false","false","Bitmap","null","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"mLeftHandleIcon","false","false","true","false","false","Bitmap","null","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"mVelocityTracker","false","false","true","false","false","VelocityTracker","null","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"mTriggered","false","false","true","false","false","boolean","false","[]","Optional[/**
 * Whether the user has triggered something (e.g dragging the left handle all the way over to
 * the right).
 */
]","\com\android\internal\widget\RotarySelector.java"
"SNAP_BACK_ANIMATION_DURATION_MILLIS","false","false","false","true","true","int","300","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"RIGHT_HANDLE","true","false","false","true","true","int","2","[]","Optional[/**
 * The dial was triggered because the user grabbed the right handle,
 * and rotated the dial counterclockwise.
 */
]","\com\android\internal\widget\RotarySelector.java"
"mDimpleDim","false","false","true","false","false","Bitmap","null","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"mBackgroundWidth","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"OUTER_ROTARY_RADIUS_DIP","false","false","false","true","true","int","390","[]","Optional[/**
 * Dimensions of arc in background drawable.
 */
]","\com\android\internal\widget\RotarySelector.java"
"ARROW_SCRUNCH_DIP","false","false","true","true","true","int","6","[]","Optional[/**
 * The drawable for the arrows need to be scrunched this many dips towards the rotary bg below
 * it.
 */
]","\com\android\internal\widget\RotarySelector.java"
"mDimpleWidth","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"mDimpleSpacing","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"ROTARY_STROKE_WIDTH_DIP","false","false","false","true","true","int","83","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"mBackgroundHeight","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"RIGHT_HANDLE_GRABBED","true","false","false","true","true","int","2","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"LOG_TAG","false","false","true","true","true","String","""RotarySelector""","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"mRightHandleX","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"mAnimationDuration","false","false","true","false","false","long","null","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"EDGE_TRIGGER_DIP","false","false","true","true","true","int","100","[]","Optional[/**
 * How far from the edge of the screen the user must drag to trigger the event.
 */
]","\com\android\internal\widget\RotarySelector.java"
"mRightHandleIcon","false","false","true","false","false","Bitmap","null","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"mOnDialTriggerListener","false","false","true","false","false","OnDialTriggerListener","null","[]","Optional[// Listener for onDialTrigger() callbacks.
]","\com\android\internal\widget\RotarySelector.java"
"VERTICAL","true","false","false","true","true","int","1","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"mDensity","false","false","true","false","false","float","null","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"mEdgeTriggerThresh","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"mDimple","false","false","true","false","false","Bitmap","null","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"VIBRATE_SHORT","false","false","true","true","true","long","20","[]","Optional[// msec
]","\com\android\internal\widget\RotarySelector.java"
"mAnimatingDeltaXEnd","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"mLeftHandleX","false","false","true","false","false","int","null","[]","Optional[// positions of the left and right handle
]","\com\android\internal\widget\RotarySelector.java"
"LEFT_HANDLE","true","false","false","true","true","int","1","[]","Optional[/**
 * The dial was triggered because the user grabbed the left handle,
 * and rotated the dial clockwise.
 */
]","\com\android\internal\widget\RotarySelector.java"
"mBgMatrix","false","false","false","false","true","Matrix","new Matrix()","[]","Optional[// used to rotate the background and arrow assets depending on orientation
]","\com\android\internal\widget\RotarySelector.java"
"mVibrator","false","false","true","false","false","Vibrator","null","[]","Optional[// Vibration (haptic feedback)
]","\com\android\internal\widget\RotarySelector.java"
"mInterpolator","false","false","true","false","false","DecelerateInterpolator","null","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"mMaximumVelocity","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"mOrientation","false","false","true","false","false","int","null","[]","Optional[/**
 * Either {@link #HORIZONTAL} or {@link #VERTICAL}.
 */
]","\com\android\internal\widget\RotarySelector.java"
"mPaint","false","false","true","false","false","Paint","new Paint()","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"mInnerRadius","false","false","true","false","true","int","null","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"DBG","false","false","true","true","true","boolean","false","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"mGrabbedState","false","false","true","false","false","int","NOTHING_GRABBED","[]","Optional[/**
 * If the user is currently dragging something.
 */
]","\com\android\internal\widget\RotarySelector.java"
"VISUAL_DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"SPIN_ANIMATION_DURATION_MILLIS","false","false","false","true","true","int","800","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"mAnimatingDeltaXStart","false","false","true","false","false","int","null","[]","Optional[// the animation will interpolate from this delta to zero
]","\com\android\internal\widget\RotarySelector.java"
"mBackground","false","false","true","false","false","Bitmap","null","[]","Optional[// UI elements
]","\com\android\internal\widget\RotarySelector.java"
"HORIZONTAL","true","false","false","true","true","int","0","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"mMinimumVelocity","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"LEFT_HANDLE_GRABBED","true","false","false","true","true","int","1","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"EDGE_PADDING_DIP","false","false","true","true","true","int","9","[]","Optional[/**
 * How far inset the left and right circles should be
 */
]","\com\android\internal\widget\RotarySelector.java"
"mOuterRadius","false","false","true","false","true","int","null","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"mArrowLongLeft","false","false","true","false","false","Bitmap","null","[]","Optional[// Long arrow starting on the left, pointing clockwise
]","\com\android\internal\widget\RotarySelector.java"
"NOTHING_GRABBED","true","false","false","true","true","int","0","[]","Optional.empty","\com\android\internal\widget\RotarySelector.java"
"mRotaryOffsetX","false","false","true","false","false","int","0","[]","Optional[// current offset of rotary widget along the x axis
]","\com\android\internal\widget\RotarySelector.java"
"VIBRATE_LONG","false","false","true","true","true","long","20","[]","Optional[// msec
]","\com\android\internal\widget\RotarySelector.java"
"SINK_STATE_CONNECTING","false","false","true","true","true","String","""connecting""","[]","Optional.empty","\android\server\BluetoothA2dpService.java"
"mIntentFilter","false","false","true","false","true","IntentFilter","null","[]","Optional.empty","\android\server\BluetoothA2dpService.java"
"mTargetA2dpState","false","false","true","false","false","int","null","[]","Optional.empty","\android\server\BluetoothA2dpService.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\android\server\BluetoothA2dpService.java"
"BLUETOOTH_ADMIN_PERM","false","false","true","true","true","String","android.Manifest.permission.BLUETOOTH_ADMIN","[]","Optional.empty","\android\server\BluetoothA2dpService.java"
"mSinkCount","false","false","true","true","false","int","null","[]","Optional.empty","\android\server\BluetoothA2dpService.java"
"PROPERTY_STATE","false","false","true","true","true","String","""State""","[]","Optional.empty","\android\server\BluetoothA2dpService.java"
"mBluetoothService","false","false","true","false","true","BluetoothService","null","[]","Optional.empty","\android\server\BluetoothA2dpService.java"
"mAudioDevices","false","false","true","false","false","HashMap<BluetoothDevice,Integer>","null","[]","Optional.empty","\android\server\BluetoothA2dpService.java"
"mAudioManager","false","false","true","false","true","AudioManager","null","[]","Optional.empty","\android\server\BluetoothA2dpService.java"
"BLUETOOTH_A2DP_SERVICE","true","false","false","true","true","String","""bluetooth_a2dp""","[]","Optional.empty","\android\server\BluetoothA2dpService.java"
"BLUETOOTH_PERM","false","false","true","true","true","String","android.Manifest.permission.BLUETOOTH","[]","Optional.empty","\android\server\BluetoothA2dpService.java"
"TAG","false","false","true","true","true","String","""BluetoothA2dpService""","[]","Optional.empty","\android\server\BluetoothA2dpService.java"
"SINK_STATE_PLAYING","false","false","true","true","true","String","""playing""","[]","Optional.empty","\android\server\BluetoothA2dpService.java"
"DBG","false","false","true","true","true","boolean","true","[]","Optional.empty","\android\server\BluetoothA2dpService.java"
"BLUETOOTH_ENABLED","false","false","true","true","true","String","""bluetooth_enabled""","[]","Optional.empty","\android\server\BluetoothA2dpService.java"
"mAdapter","false","false","true","false","true","BluetoothAdapter","null","[]","Optional.empty","\android\server\BluetoothA2dpService.java"
"mReceiver","false","false","true","false","true","BroadcastReceiver","new BroadcastReceiver() {

    @Override
    public void onReceive(Context context, Intent intent) {
        String action = intent.getAction();
        BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
        if (action.equals(BluetoothAdapter.ACTION_STATE_CHANGED)) {
            int state = intent.getIntExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.ERROR);
            switch(state) {
                case BluetoothAdapter.STATE_ON:
                    onBluetoothEnable();
                    break;
                case BluetoothAdapter.STATE_TURNING_OFF:
                    onBluetoothDisable();
                    break;
            }
        } else if (action.equals(BluetoothDevice.ACTION_BOND_STATE_CHANGED)) {
            int bondState = intent.getIntExtra(BluetoothDevice.EXTRA_BOND_STATE, BluetoothDevice.ERROR);
            switch(bondState) {
                case BluetoothDevice.BOND_BONDED:
                    if (getSinkPriority(device) == BluetoothA2dp.PRIORITY_UNDEFINED) {
                        setSinkPriority(device, BluetoothA2dp.PRIORITY_ON);
                    }
                    break;
                case BluetoothDevice.BOND_NONE:
                    setSinkPriority(device, BluetoothA2dp.PRIORITY_UNDEFINED);
                    break;
            }
        } else if (action.equals(BluetoothDevice.ACTION_ACL_DISCONNECTED)) {
            synchronized (this) {
                if (mAudioDevices.containsKey(device)) {
                    int state = mAudioDevices.get(device);
                    handleSinkStateChange(device, state, BluetoothA2dp.STATE_DISCONNECTED);
                }
            }
        } else if (action.equals(AudioManager.VOLUME_CHANGED_ACTION)) {
            int streamType = intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_TYPE, -1);
            if (streamType == AudioManager.STREAM_MUSIC) {
                BluetoothDevice[] sinks = getConnectedSinks();
                if (sinks.length != 0 && isPhoneDocked(sinks[0])) {
                    String address = sinks[0].getAddress();
                    int newVolLevel = intent.getIntExtra(AudioManager.EXTRA_VOLUME_STREAM_VALUE, 0);
                    int oldVolLevel = intent.getIntExtra(AudioManager.EXTRA_PREV_VOLUME_STREAM_VALUE, 0);
                    String path = mBluetoothService.getObjectPathFromAddress(address);
                    if (newVolLevel > oldVolLevel) {
                        avrcpVolumeUpNative(path);
                    } else if (newVolLevel < oldVolLevel) {
                        avrcpVolumeDownNative(path);
                    }
                }
            }
        }
    }
}","[]","Optional.empty","\android\server\BluetoothA2dpService.java"
"SINK_STATE_CONNECTED","false","false","true","true","true","String","""connected""","[]","Optional.empty","\android\server\BluetoothA2dpService.java"
"SINK_STATE_DISCONNECTED","false","false","true","true","true","String","""disconnected""","[]","Optional.empty","\android\server\BluetoothA2dpService.java"
"mConnectedTechnology","false","false","false","false","false","int","null","[]","Optional[/*package*/
]","\android\nfc\Tag.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<Tag>","new Parcelable.Creator<Tag>() {

    @Override
    public Tag createFromParcel(Parcel in) {
        INfcTag tagService;
        // Tag fields
        byte[] id = Tag.readBytesWithNull(in);
        int[] techList = new int[in.readInt()];
        in.readIntArray(techList);
        Bundle[] techExtras = in.createTypedArray(Bundle.CREATOR);
        int serviceHandle = in.readInt();
        int isMock = in.readInt();
        if (isMock == 0) {
            tagService = INfcTag.Stub.asInterface(in.readStrongBinder());
        } else {
            tagService = null;
        }
        return new Tag(id, techList, techExtras, serviceHandle, tagService);
    }

    @Override
    public Tag[] newArray(int size) {
        return new Tag[size];
    }
}","[]","Optional.empty","\android\nfc\Tag.java"
"mTechExtras","false","false","false","false","true","Bundle","null","[]","Optional[/*package*/
]","\android\nfc\Tag.java"
"mId","false","false","false","false","true","byte","null","[]","Optional[/*package*/
]","\android\nfc\Tag.java"
"mTagService","false","false","false","false","true","INfcTag","null","[]","Optional[/*package*/
]","\android\nfc\Tag.java"
"mTechList","false","false","false","false","true","int","null","[]","Optional[/*package*/
]","\android\nfc\Tag.java"
"mServiceHandle","false","false","false","false","true","int","null","[]","Optional[// for use by NFC service, 0 indicates a mock
]","\android\nfc\Tag.java"
"mTechStringList","false","false","false","false","true","String","null","[]","Optional[/*package*/
]","\android\nfc\Tag.java"
"dev","true","false","false","false","false","int","null","[]","Optional.empty","\android\os\FileUtils.java"
"S_IXUSR","true","false","false","true","true","int","00100","[]","Optional.empty","\android\os\FileUtils.java"
"ctime","true","false","false","false","false","long","null","[]","Optional.empty","\android\os\FileUtils.java"
"S_IRWXU","true","false","false","true","true","int","00700","[]","Optional.empty","\android\os\FileUtils.java"
"size","true","false","false","false","false","long","null","[]","Optional.empty","\android\os\FileUtils.java"
"S_IRWXO","true","false","false","true","true","int","00007","[]","Optional.empty","\android\os\FileUtils.java"
"S_IRWXG","true","false","false","true","true","int","00070","[]","Optional.empty","\android\os\FileUtils.java"
"uid","true","false","false","false","false","int","null","[]","Optional.empty","\android\os\FileUtils.java"
"S_IRUSR","true","false","false","true","true","int","00400","[]","Optional.empty","\android\os\FileUtils.java"
"rdev","true","false","false","false","false","int","null","[]","Optional.empty","\android\os\FileUtils.java"
"blksize","true","false","false","false","false","int","null","[]","Optional.empty","\android\os\FileUtils.java"
"S_IXOTH","true","false","false","true","true","int","00001","[]","Optional.empty","\android\os\FileUtils.java"
"S_IWUSR","true","false","false","true","true","int","00200","[]","Optional.empty","\android\os\FileUtils.java"
"mtime","true","false","false","false","false","long","null","[]","Optional.empty","\android\os\FileUtils.java"
"S_IROTH","true","false","false","true","true","int","00004","[]","Optional.empty","\android\os\FileUtils.java"
"S_IXGRP","true","false","false","true","true","int","00010","[]","Optional.empty","\android\os\FileUtils.java"
"S_IWOTH","true","false","false","true","true","int","00002","[]","Optional.empty","\android\os\FileUtils.java"
"blocks","true","false","false","false","false","long","null","[]","Optional.empty","\android\os\FileUtils.java"
"S_IRGRP","true","false","false","true","true","int","00040","[]","Optional.empty","\android\os\FileUtils.java"
"S_IWGRP","true","false","false","true","true","int","00020","[]","Optional.empty","\android\os\FileUtils.java"
"atime","true","false","false","false","false","long","null","[]","Optional.empty","\android\os\FileUtils.java"
"nlink","true","false","false","false","false","int","null","[]","Optional.empty","\android\os\FileUtils.java"
"SAFE_FILENAME_PATTERN","false","false","true","true","true","Pattern","Pattern.compile(""[\\w%+,./=_-]+"")","[]","Optional[/**
 * Regular expression for safe filenames: no spaces or metacharacters
 */
]","\android\os\FileUtils.java"
"mode","true","false","false","false","false","int","null","[]","Optional.empty","\android\os\FileUtils.java"
"gid","true","false","false","false","false","int","null","[]","Optional.empty","\android\os\FileUtils.java"
"ino","true","false","false","false","false","int","null","[]","Optional.empty","\android\os\FileUtils.java"
"TYPE_TEST","false","false","true","true","true","int","3","[]","Optional[// AT+FOO=?
]","\android\bluetooth\AtParser.java"
"TYPE_ACTION","false","false","true","true","true","int","0","[]","Optional[// AT+FOO
]","\android\bluetooth\AtParser.java"
"mExtHandlers","false","false","true","false","false","HashMap<String,AtCommandHandler>","null","[]","Optional.empty","\android\bluetooth\AtParser.java"
"mBasicHandlers","false","false","true","false","false","HashMap<Character,AtCommandHandler>","null","[]","Optional.empty","\android\bluetooth\AtParser.java"
"mLastInput","false","false","true","false","false","String","null","[]","Optional[// for ""A/"" (repeat last command) support
]","\android\bluetooth\AtParser.java"
"TYPE_READ","false","false","true","true","true","int","1","[]","Optional[// AT+FOO?
]","\android\bluetooth\AtParser.java"
"TYPE_SET","false","false","true","true","true","int","2","[]","Optional[// AT+FOO=
]","\android\bluetooth\AtParser.java"
"mKeys","false","false","true","false","false","long","null","[]","Optional.empty","\android\util\LongSparseArray.java"
"mSize","false","false","true","false","false","int","null","[]","Optional.empty","\android\util\LongSparseArray.java"
"DELETED","false","false","true","true","true","Object","new Object()","[]","Optional.empty","\android\util\LongSparseArray.java"
"mGarbage","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\util\LongSparseArray.java"
"mValues","false","false","true","false","false","Object","null","[]","Optional.empty","\android\util\LongSparseArray.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\com\android\internal\backup\LocalTransport.java"
"mPackageManager","false","false","true","false","false","PackageManager","null","[]","Optional.empty","\com\android\internal\backup\LocalTransport.java"
"mDataDir","false","false","true","false","false","File","new File(Environment.getDownloadCacheDirectory(), ""backup"")","[]","Optional.empty","\com\android\internal\backup\LocalTransport.java"
"mRestorePackage","false","false","true","false","false","int","-1","[]","Optional[// Index into mRestorePackages
]","\com\android\internal\backup\LocalTransport.java"
"TAG","false","false","true","true","true","String","""LocalTransport""","[]","Optional.empty","\com\android\internal\backup\LocalTransport.java"
"RESTORE_TOKEN","false","false","true","true","true","long","1","[]","Optional[// The single hardcoded restore set always has the same (nonzero!) token
]","\com\android\internal\backup\LocalTransport.java"
"TRANSPORT_DIR_NAME","false","false","true","true","true","String","""com.android.internal.backup.LocalTransport""","[]","Optional.empty","\com\android\internal\backup\LocalTransport.java"
"mRestorePackages","false","false","true","false","false","PackageInfo","null","[]","Optional.empty","\com\android\internal\backup\LocalTransport.java"
"DEBUG","false","false","true","true","true","boolean","true","[]","Optional.empty","\com\android\internal\backup\LocalTransport.java"
"mOptionalIconsVisible","false","false","true","false","false","boolean","false","[]","Optional.empty","\com\android\internal\view\menu\MenuBuilder.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\com\android\internal\view\menu\MenuBuilder.java"
"mPreventDispatchingItemsChanged","false","false","true","false","false","boolean","false","[]","Optional[/**
 * Prevents onItemsChanged from doing its junk, useful for batching commands
 * that may individually call onItemsChanged.
 */
]","\com\android\internal\view\menu\MenuBuilder.java"
"sCategoryToOrder","false","false","true","true","true","int","new int[] { 1, /* No category */
4, /* CONTAINER */
5, /* SYSTEM */
3, /* SECONDARY */
2, /* ALTERNATIVE */
0 }","[]","Optional.empty","\com\android\internal\view\menu\MenuBuilder.java"
"NUM_TYPES","true","false","false","true","true","int","3","[]","Optional[/**
 * The number of different menu types
 */
]","\com\android\internal\view\menu\MenuBuilder.java"
"mIsVisibleItemsStale","false","false","true","false","false","boolean","null","[]","Optional[/**
 * Whether or not the items (or any one item's shown state) has changed since it was last
 * fetched from {@link #getVisibleItems()}
 */
]","\com\android\internal\view\menu\MenuBuilder.java"
"TYPE_ICON","true","false","false","true","true","int","0","[]","Optional[/**
 * The menu type that represents the icon menu view
 */
]","\com\android\internal\view\menu\MenuBuilder.java"
"mQwertyMode","false","false","true","false","false","boolean","null","[]","Optional[/**
 * Whether the shortcuts should be qwerty-accessible. Use isQwertyMode()
 * instead of accessing this directly.
 */
]","\com\android\internal\view\menu\MenuBuilder.java"
"mShortcutsVisible","false","false","true","false","false","boolean","null","[]","Optional[/**
 * Whether the shortcuts should be visible on menus. Use isShortcutsVisible()
 * instead of accessing this directly.
 */
]","\com\android\internal\view\menu\MenuBuilder.java"
"TYPE_DIALOG","true","false","false","true","true","int","2","[]","Optional[/**
 * The menu type that represents a menu dialog. Examples are context and sub
 * menus. This menu type will not have a corresponding MenuView, but it will
 * have an ItemView.
 */
]","\com\android\internal\view\menu\MenuBuilder.java"
"mResources","false","false","true","false","true","Resources","null","[]","Optional.empty","\com\android\internal\view\menu\MenuBuilder.java"
"ITEM_LAYOUT_RES_FOR_TYPE","false","false","false","true","true","int","new int[] { com.android.internal.R.layout.icon_menu_item_layout, com.android.internal.R.layout.list_menu_item_layout, com.android.internal.R.layout.list_menu_item_layout }","[]","Optional[// Order must be the same order as the TYPE_*
]","\com\android\internal\view\menu\MenuBuilder.java"
"THEME_RES_FOR_TYPE","false","false","false","true","true","int","new int[] { com.android.internal.R.style.Theme_IconMenu, com.android.internal.R.style.Theme_ExpandedMenu, 0 }","[]","Optional[// Order must be the same order as the TYPE_*
]","\com\android\internal\view\menu\MenuBuilder.java"
"mCurrentMenuInfo","false","false","true","false","false","ContextMenuInfo","null","[]","Optional[/**
 * Current use case is Context Menus: As Views populate the context menu, each one has
 * extra information that should be passed along.  This is the current menu info that
 * should be set on all items added to this menu.
 */
]","\com\android\internal\view\menu\MenuBuilder.java"
"mHeaderIcon","false","false","false","false","false","Drawable","null","[]","Optional[/**
 * Header icon for menu types that have a header and support icons (context)
 */
]","\com\android\internal\view\menu\MenuBuilder.java"
"mFrozenViewStates","false","false","true","false","false","SparseArray<Parcelable>","null","[]","Optional[/**
 * Contains the state of the View hierarchy for all menu views when the menu
 * was frozen.
 */
]","\com\android\internal\view\menu\MenuBuilder.java"
"mHeaderView","false","false","false","false","false","View","null","[]","Optional[/**
 * Header custom view for menu types that have a header and support custom views (context)
 */
]","\com\android\internal\view\menu\MenuBuilder.java"
"mHeaderTitle","false","false","false","false","false","CharSequence","null","[]","Optional[/**
 * Header title for menu types that have a header (context and submenus)
 */
]","\com\android\internal\view\menu\MenuBuilder.java"
"mMenuView","false","false","true","false","false","WeakReference<MenuView>","null","[]","Optional[/**
 * The lazily loaded {@link MenuView}
 */
]","\com\android\internal\view\menu\MenuBuilder.java"
"mVisibleItems","false","false","true","false","false","ArrayList<MenuItemImpl>","null","[]","Optional[/**
 * Contains only the items that are currently visible.  This will be created/refreshed from
 * {@link #getVisibleItems()}
 */
]","\com\android\internal\view\menu\MenuBuilder.java"
"TYPE_EXPANDED","true","false","false","true","true","int","1","[]","Optional[/**
 * The menu type that represents the expanded menu view
 */
]","\com\android\internal\view\menu\MenuBuilder.java"
"mItems","false","false","true","false","false","ArrayList<MenuItemImpl>","null","[]","Optional[/**
 * Contains all of the items for this menu
 */
]","\com\android\internal\view\menu\MenuBuilder.java"
"mCallback","false","false","true","false","false","Callback","null","[]","Optional[/**
 * Callback that will receive the various menu-related events generated by
 * this class. Use getCallback to get a reference to the callback.
 */
]","\com\android\internal\view\menu\MenuBuilder.java"
"mMenuTypes","false","false","true","false","false","MenuType","null","[]","Optional.empty","\com\android\internal\view\menu\MenuBuilder.java"
"LAYOUT_RES_FOR_TYPE","false","false","false","true","true","int","new int[] { com.android.internal.R.layout.icon_menu_layout, com.android.internal.R.layout.expanded_menu_layout, 0 }","[]","Optional[// Order must be the same order as the TYPE_*
]","\com\android\internal\view\menu\MenuBuilder.java"
"VIEWS_TAG","false","false","true","true","true","String","""android:views""","[]","Optional.empty","\com\android\internal\view\menu\MenuBuilder.java"
"mInflater","false","false","true","false","false","LayoutInflater","null","[]","Optional[/**
 * The layout inflater that uses the menu type's theme
 */
]","\com\android\internal\view\menu\MenuBuilder.java"
"mMenuType","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\view\menu\MenuBuilder.java"
"LOGTAG","false","false","true","true","true","String","""MenuBuilder""","[]","Optional.empty","\com\android\internal\view\menu\MenuBuilder.java"
"POLICY_IMPL_CLASS_NAME","false","false","true","true","true","String","""com.android.internal.policy.impl.Policy""","[]","Optional.empty","\com\android\internal\policy\PolicyManager.java"
"sPolicy","false","false","true","true","true","IPolicy","null","[]","Optional.empty","\com\android\internal\policy\PolicyManager.java"
"PASSWORD_HOST_COL","false","false","true","true","true","String","""host""","[]","Optional[// column id strings for ""password"" table
]","\android\webkit\WebViewDatabase.java"
"CACHE_DATABASE_FILE","false","false","true","true","true","String","""webviewCache.db""","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"DATABASE_VERSION","false","false","true","true","true","int","10","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"PASSWORD_PASSWORD_COL","false","false","true","true","true","String","""password""","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"mPasswordLock","false","false","true","false","true","Object","new Object()","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"mCacheInserter","false","false","true","true","false","DatabaseUtils.InsertHelper","null","[]","Optional[// use InsertHelper to improve insert performance by 40%
]","\android\webkit\WebViewDatabase.java"
"CACHE_LAST_MODIFY_COL","false","false","true","true","true","String","""lastmodify""","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"mInstance","false","false","true","true","false","WebViewDatabase","null","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"CACHE_URL_COL","false","false","true","true","true","String","""url""","[]","Optional[// column id strings for ""cache"" table
]","\android\webkit\WebViewDatabase.java"
"FORMDATA_URLID_COL","false","false","true","true","true","String","""urlid""","[]","Optional[// column id strings for ""formdata"" table
]","\android\webkit\WebViewDatabase.java"
"ID_COL","false","false","true","true","true","String","""_id""","[]","Optional[// column id strings for ""_id"" which can be used by any table
]","\android\webkit\WebViewDatabase.java"
"TABLE_PASSWORD_ID","false","false","true","true","true","int","1","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"HTTPAUTH_PASSWORD_COL","false","false","true","true","true","String","""password""","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"CACHE_CONTENTLENGTH_COL","false","false","true","true","true","String","""contentlength""","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"HTTPAUTH_REALM_COL","false","false","true","true","true","String","""realm""","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"CACHE_DATABASE_VERSION","false","false","true","true","true","int","4","[]","Optional[// 9 -> 10 Update httpauth table UNIQUE
]","\android\webkit\WebViewDatabase.java"
"mCacheExpiresStringColIndex","false","false","true","true","false","int","null","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"mCacheDatabase","false","false","true","true","false","SQLiteDatabase","null","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"TABLE_FORMDATA_ID","false","false","true","true","true","int","3","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"mCacheLastModifyColIndex","false","false","true","true","false","int","null","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"COOKIES_PATH_COL","false","false","true","true","true","String","""path""","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"CACHE_CONTENTDISPOSITION_COL","false","false","true","true","true","String","""contentdisposition""","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"mFormLock","false","false","true","false","true","Object","new Object()","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"mDatabase","false","false","true","true","false","SQLiteDatabase","null","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"mCacheCrossDomainColIndex","false","false","true","true","false","int","null","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"FORMDATA_VALUE_COL","false","false","true","true","true","String","""value""","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"FORMDATA_NAME_COL","false","false","true","true","true","String","""name""","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"FORMURL_URL_COL","false","false","true","true","true","String","""url""","[]","Optional[// column id strings for ""formurl"" table
]","\android\webkit\WebViewDatabase.java"
"PASSWORD_USERNAME_COL","false","false","true","true","true","String","""username""","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"mCacheContentLengthColIndex","false","false","true","true","false","int","null","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"COOKIES_DOMAIN_COL","false","false","true","true","true","String","""domain""","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"COOKIES_VALUE_COL","false","false","true","true","true","String","""value""","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"mCacheETagColIndex","false","false","true","true","false","int","null","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"CACHE_MIMETYPE_COL","false","false","true","true","true","String","""mimetype""","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"CACHE_ETAG_COL","false","false","true","true","true","String","""etag""","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"CACHE_ENCODING_COL","false","false","true","true","true","String","""encoding""","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"mCacheLocationColIndex","false","false","true","true","false","int","null","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"ID_PROJECTION","false","false","true","true","true","String","new String[] { ""_id"" }","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"COOKIES_SECURE_COL","false","false","true","true","true","String","""secure""","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"TABLE_COOKIES_ID","false","false","true","true","true","int","0","[]","Optional[// Table ids (they are index to mTableNames)
]","\android\webkit\WebViewDatabase.java"
"HTTPAUTH_USERNAME_COL","false","false","true","true","true","String","""username""","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"mCacheMimeTypeColIndex","false","false","true","true","false","int","null","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"HTTPAUTH_HOST_COL","false","false","true","true","true","String","""host""","[]","Optional[// column id strings for ""httpauth"" table
]","\android\webkit\WebViewDatabase.java"
"mHttpAuthLock","false","false","true","false","true","Object","new Object()","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"CACHE_EXPIRES_COL","false","false","true","true","true","String","""expires""","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"mCacheFilePathColIndex","false","false","true","true","false","int","null","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"CACHE_HTTP_STATUS_COL","false","false","true","true","true","String","""httpstatus""","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"CACHE_CROSSDOMAIN_COL","false","false","true","true","true","String","""crossdomain""","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"mCacheExpiresColIndex","false","false","true","true","false","int","null","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"TABLE_HTTPAUTH_ID","false","false","true","true","true","int","4","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"TABLE_FORMURL_ID","false","false","true","true","true","int","2","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"mCacheHttpStatusColIndex","false","false","true","true","false","int","null","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"CACHE_LOCATION_COL","false","false","true","true","true","String","""location""","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"mCacheContentDispositionColIndex","false","false","true","true","false","int","null","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"COOKIES_NAME_COL","false","false","true","true","true","String","""name""","[]","Optional[// column id strings for ""cookies"" table
]","\android\webkit\WebViewDatabase.java"
"mCacheTransactionRefcount","false","false","true","true","false","int","null","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"COOKIES_EXPIRES_COL","false","false","true","true","true","String","""expires""","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"CACHE_FILE_PATH_COL","false","false","true","true","true","String","""filepath""","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"DATABASE_FILE","false","false","true","true","true","String","""webview.db""","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"mCacheEncodingColIndex","false","false","true","true","false","int","null","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"mTableNames","false","false","true","true","true","String","{ ""cookies"", ""password"", ""formurl"", ""formdata"", ""httpauth"" }","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"mCacheUrlColIndex","false","false","true","true","false","int","null","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"LOGTAG","false","true","false","true","true","String","""webviewdatabase""","[]","Optional[// log tag
]","\android\webkit\WebViewDatabase.java"
"CACHE_EXPIRES_STRING_COL","false","false","true","true","true","String","""expiresstring""","[]","Optional.empty","\android\webkit\WebViewDatabase.java"
"mCookieLock","false","false","true","false","true","Object","new Object()","[]","Optional[// synchronize locks
]","\android\webkit\WebViewDatabase.java"
"mOperationsMap","false","false","true","false","true","HashMap<String,SyncOperation>","Maps.newHashMap()","[]","Optional[// quick lookup of an enqueued SyncOperation.
]","\android\content\SyncQueue.java"
"TAG","false","false","true","true","true","String","""SyncManager""","[]","Optional.empty","\android\content\SyncQueue.java"
"mSyncStorageEngine","false","false","true","false","false","SyncStorageEngine","null","[]","Optional.empty","\android\content\SyncQueue.java"
"PROP_VALUE_MAX","true","false","false","true","true","int","91","[]","Optional.empty","\android\os\SystemProperties.java"
"PROP_NAME_MAX","true","false","false","true","true","int","31","[]","Optional.empty","\android\os\SystemProperties.java"
"ERROR_COULD_NOT_UNMOUNT","true","false","false","true","true","int","22","[]","Optional[/**
 * The OBB could not be unmounted. This most likely indicates that a file is
 * in use on the OBB. Returned in status messages from calls made via
 * {@link StorageManager}
 */
]","\android\os\storage\OnObbStateChangeListener.java"
"ERROR_ALREADY_MOUNTED","true","false","false","true","true","int","24","[]","Optional[/**
 * The OBB has already been mounted. Returned in status messages from calls
 * made via {@link StorageManager}
 */
]","\android\os\storage\OnObbStateChangeListener.java"
"MOUNTED","true","false","false","true","true","int","1","[]","Optional[/**
 * The OBB container is now mounted and ready for use. Returned in status
 * messages from calls made via {@link StorageManager}
 */
]","\android\os\storage\OnObbStateChangeListener.java"
"ERROR_INTERNAL","true","false","false","true","true","int","20","[]","Optional[/**
 * There was an internal system error encountered while trying to mount the
 * OBB. Returned in status messages from calls made via
 * {@link StorageManager}
 */
]","\android\os\storage\OnObbStateChangeListener.java"
"ERROR_PERMISSION_DENIED","true","false","false","true","true","int","25","[]","Optional[/**
 * The current application does not have permission to use this OBB. This
 * could be because the OBB indicates it's owned by a different package or
 * some other error. Returned in status messages from calls made via
 * {@link StorageManager}
 */
]","\android\os\storage\OnObbStateChangeListener.java"
"ERROR_COULD_NOT_MOUNT","true","false","false","true","true","int","21","[]","Optional[/**
 * The OBB could not be mounted by the system. Returned in status messages
 * from calls made via {@link StorageManager}
 */
]","\android\os\storage\OnObbStateChangeListener.java"
"ERROR_NOT_MOUNTED","true","false","false","true","true","int","23","[]","Optional[/**
 * A call was made to unmount the OBB when it was not mounted. Returned in
 * status messages from calls made via {@link StorageManager}
 */
]","\android\os\storage\OnObbStateChangeListener.java"
"UNMOUNTED","true","false","false","true","true","int","2","[]","Optional[/**
 * The OBB container is now unmounted and not usable. Returned in status
 * messages from calls made via {@link StorageManager}
 */
]","\android\os\storage\OnObbStateChangeListener.java"
"mOnChronometerTickListener","false","false","true","false","false","OnChronometerTickListener","null","[]","Optional.empty","\android\widget\Chronometer.java"
"mRunning","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\Chronometer.java"
"mFormatterArgs","false","false","true","false","false","Object","new Object[1]","[]","Optional.empty","\android\widget\Chronometer.java"
"mLogged","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\Chronometer.java"
"mStarted","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\Chronometer.java"
"mFormatter","false","false","true","false","false","Formatter","null","[]","Optional.empty","\android\widget\Chronometer.java"
"mVisible","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\Chronometer.java"
"mBase","false","false","true","false","false","long","null","[]","Optional.empty","\android\widget\Chronometer.java"
"mFormat","false","false","true","false","false","String","null","[]","Optional.empty","\android\widget\Chronometer.java"
"mFormatterLocale","false","false","true","false","false","Locale","null","[]","Optional.empty","\android\widget\Chronometer.java"
"TICK_WHAT","false","false","true","true","true","int","2","[]","Optional.empty","\android\widget\Chronometer.java"
"mFormatBuilder","false","false","true","false","false","StringBuilder","null","[]","Optional.empty","\android\widget\Chronometer.java"
"mHandler","false","false","true","false","false","Handler","new Handler() {

    public void handleMessage(Message m) {
        if (mRunning) {
            updateText(SystemClock.elapsedRealtime());
            dispatchChronometerTick();
            sendMessageDelayed(Message.obtain(this, TICK_WHAT), 1000);
        }
    }
}","[]","Optional.empty","\android\widget\Chronometer.java"
"TAG","false","false","true","true","true","String","""Chronometer""","[]","Optional.empty","\android\widget\Chronometer.java"
"mRecycle","false","false","true","false","false","StringBuilder","new StringBuilder(8)","[]","Optional.empty","\android\widget\Chronometer.java"
"mKeys","false","false","true","false","false","int","null","[]","Optional.empty","\android\util\SparseBooleanArray.java"
"mSize","false","false","true","false","false","int","null","[]","Optional.empty","\android\util\SparseBooleanArray.java"
"mValues","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\util\SparseBooleanArray.java"
"mColumns","false","false","true","false","false","String","null","[]","Optional[/**
 * The names of the columns in the rows
 */
]","\android\database\sqlite\SQLiteCursor.java"
"mDriver","false","false","true","false","false","SQLiteCursorDriver","null","[]","Optional[/**
 * The compiled query this cursor came from
 */
]","\android\database\sqlite\SQLiteCursor.java"
"mColumnNameMap","false","false","true","false","false","Map<String,Integer>","null","[]","Optional[/**
 * A mapping of column names to column indices, to speed up lookups
 */
]","\android\database\sqlite\SQLiteCursor.java"
"mDatabase","false","false","true","false","false","SQLiteDatabase","null","[]","Optional[/**
 * The database the cursor was created from
 */
]","\android\database\sqlite\SQLiteCursor.java"
"mQuery","false","false","true","false","false","SQLiteQuery","null","[]","Optional[/**
 * The query object for the cursor
 */
]","\android\database\sqlite\SQLiteCursor.java"
"mStackTrace","false","false","true","false","false","Throwable","null","[]","Optional[/**
 * Used to find out where a cursor was allocated in case it never got released.
 */
]","\android\database\sqlite\SQLiteCursor.java"
"mLock","false","false","true","false","false","ReentrantLock","null","[]","Optional.empty","\android\database\sqlite\SQLiteCursor.java"
"mEditTable","false","false","true","false","false","String","null","[]","Optional[/**
 * The name of the table to edit
 */
]","\android\database\sqlite\SQLiteCursor.java"
"mCount","false","false","true","false","false","int","NO_COUNT","[]","Optional[/**
 * The number of rows in the cursor
 */
]","\android\database\sqlite\SQLiteCursor.java"
"mPendingData","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\database\sqlite\SQLiteCursor.java"
"NO_COUNT","false","false","false","true","true","int","-1","[]","Optional.empty","\android\database\sqlite\SQLiteCursor.java"
"TAG","false","false","false","true","true","String","""Cursor""","[]","Optional.empty","\android\database\sqlite\SQLiteCursor.java"
"mThreadState","false","false","true","false","true","int","null","[]","Optional.empty","\android\database\sqlite\SQLiteCursor.java"
"mMaxRead","false","false","true","false","false","int","Integer.MAX_VALUE","[]","Optional[/**
 * mMaxRead is the max items that each cursor window reads
 * default to a very high value
 */
]","\android\database\sqlite\SQLiteCursor.java"
"mInitialRead","false","false","true","false","false","int","Integer.MAX_VALUE","[]","Optional.empty","\android\database\sqlite\SQLiteCursor.java"
"mNotificationHandler","false","true","false","false","false","MainThreadNotificationHandler","null","[]","Optional[/**
 * @hide
 */
]","\android\database\sqlite\SQLiteCursor.java"
"mCursorState","false","false","true","false","false","int","0","[]","Optional.empty","\android\database\sqlite\SQLiteCursor.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<CursorWindow>","new Parcelable.Creator<CursorWindow>() {

    public CursorWindow createFromParcel(Parcel source) {
        return new CursorWindow(source);
    }

    public CursorWindow[] newArray(int size) {
        return new CursorWindow[size];
    }
}","[]","Optional.empty","\android\database\CursorWindow.java"
"nWindow","false","false","true","false","false","int","null","[@SuppressWarnings(""unused"")]","Optional[/**
 * The pointer to the native window class
 */
]","\android\database\CursorWindow.java"
"mStartPos","false","false","true","false","false","int","null","[]","Optional.empty","\android\database\CursorWindow.java"
"sInstance","false","false","true","true","false","ScrollingMovementMethod","null","[]","Optional.empty","\android\text\method\ScrollingMovementMethod.java"
"STATE_CONNECTING","true","false","false","true","true","int","1","[]","Optional.empty","\android\bluetooth\BluetoothA2dp.java"
"PRIORITY_ON","true","false","false","true","true","int","100","[]","Optional[/**
 * Default priority for a2dp devices that should allow incoming
 * connections
 */
]","\android\bluetooth\BluetoothA2dp.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\android\bluetooth\BluetoothA2dp.java"
"STATE_CONNECTED","true","false","false","true","true","int","2","[]","Optional.empty","\android\bluetooth\BluetoothA2dp.java"
"PRIORITY_UNDEFINED","true","false","false","true","true","int","-1","[]","Optional[/**
 * Default priority when not set or when the device is unpaired
 */
]","\android\bluetooth\BluetoothA2dp.java"
"EXTRA_PREVIOUS_SINK_STATE","true","false","false","true","true","String","""android.bluetooth.a2dp.extra.PREVIOUS_SINK_STATE""","[]","Optional[/**
 * int extra for ACTION_SINK_STATE_CHANGED
 */
]","\android\bluetooth\BluetoothA2dp.java"
"EXTRA_SINK_STATE","true","false","false","true","true","String","""android.bluetooth.a2dp.extra.SINK_STATE""","[]","Optional[/**
 * int extra for ACTION_SINK_STATE_CHANGED
 */
]","\android\bluetooth\BluetoothA2dp.java"
"STATE_DISCONNECTED","true","false","false","true","true","int","0","[]","Optional.empty","\android\bluetooth\BluetoothA2dp.java"
"STATE_PLAYING","true","false","false","true","true","int","4","[]","Optional[/**
 * Playing implies connected
 */
]","\android\bluetooth\BluetoothA2dp.java"
"PRIORITY_OFF","true","false","false","true","true","int","0","[]","Optional[/**
 * Default priority for a2dp devices that should not allow incoming
 * connections
 */
]","\android\bluetooth\BluetoothA2dp.java"
"TAG","false","false","true","true","true","String","""BluetoothA2dp""","[]","Optional.empty","\android\bluetooth\BluetoothA2dp.java"
"DBG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\bluetooth\BluetoothA2dp.java"
"STATE_DISCONNECTING","true","false","false","true","true","int","3","[]","Optional.empty","\android\bluetooth\BluetoothA2dp.java"
"ACTION_SINK_STATE_CHANGED","true","false","false","true","true","String","""android.bluetooth.a2dp.action.SINK_STATE_CHANGED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Indicates the state of an A2DP audio sink has changed.
 * This intent will always contain EXTRA_SINK_STATE,
 * EXTRA_PREVIOUS_SINK_STATE and BluetoothDevice.EXTRA_DEVICE
 * extras.
 */
]","\android\bluetooth\BluetoothA2dp.java"
"PRIORITY_AUTO_CONNECT","true","false","false","true","true","int","1000","[]","Optional[/**
 * Default priority for a2dp devices that we try to auto-connect
 * and allow incoming connections
 */
]","\android\bluetooth\BluetoothA2dp.java"
"mService","false","false","true","false","true","IBluetoothA2dp","null","[]","Optional.empty","\android\bluetooth\BluetoothA2dp.java"
"mTransformer","false","false","true","false","false","PasswordTransformationMethod","null","[]","Optional.empty","\android\text\method\PasswordTransformationMethod.java"
"mSource","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\text\method\PasswordTransformationMethod.java"
"mText","false","false","true","false","false","Spannable","null","[]","Optional.empty","\android\text\method\PasswordTransformationMethod.java"
"DOT","false","false","true","true","false","char","'\u2022'","[]","Optional.empty","\android\text\method\PasswordTransformationMethod.java"
"sInstance","false","false","true","true","false","PasswordTransformationMethod","null","[]","Optional.empty","\android\text\method\PasswordTransformationMethod.java"
"DO_UPDATE_EXTRACTED_TEXT","false","false","true","true","true","int","67","[]","Optional.empty","\android\inputmethodservice\IInputMethodSessionWrapper.java"
"DO_DISPATCH_KEY_EVENT","false","false","true","true","true","int","70","[]","Optional.empty","\android\inputmethodservice\IInputMethodSessionWrapper.java"
"DO_DISPLAY_COMPLETIONS","false","false","true","true","true","int","65","[]","Optional.empty","\android\inputmethodservice\IInputMethodSessionWrapper.java"
"mInputMethodSession","false","false","false","false","false","InputMethodSession","null","[]","Optional.empty","\android\inputmethodservice\IInputMethodSessionWrapper.java"
"DO_UPDATE_SELECTION","false","false","true","true","true","int","90","[]","Optional.empty","\android\inputmethodservice\IInputMethodSessionWrapper.java"
"DO_UPDATE_CURSOR","false","false","true","true","true","int","95","[]","Optional.empty","\android\inputmethodservice\IInputMethodSessionWrapper.java"
"DO_FINISH_INPUT","false","false","true","true","true","int","60","[]","Optional.empty","\android\inputmethodservice\IInputMethodSessionWrapper.java"
"DO_APP_PRIVATE_COMMAND","false","false","true","true","true","int","100","[]","Optional.empty","\android\inputmethodservice\IInputMethodSessionWrapper.java"
"DO_FINISH_SESSION","false","false","true","true","true","int","110","[]","Optional.empty","\android\inputmethodservice\IInputMethodSessionWrapper.java"
"TAG","false","false","true","true","true","String","""InputMethodWrapper""","[]","Optional.empty","\android\inputmethodservice\IInputMethodSessionWrapper.java"
"DO_TOGGLE_SOFT_INPUT","false","false","true","true","true","int","105","[]","Optional.empty","\android\inputmethodservice\IInputMethodSessionWrapper.java"
"DO_DISPATCH_TRACKBALL_EVENT","false","false","true","true","true","int","80","[]","Optional.empty","\android\inputmethodservice\IInputMethodSessionWrapper.java"
"mCb","false","false","false","false","true","IInputMethodCallback","null","[]","Optional.empty","\android\inputmethodservice\IInputMethodSessionWrapper.java"
"mCaller","false","false","false","false","false","HandlerCaller","null","[]","Optional.empty","\android\inputmethodservice\IInputMethodSessionWrapper.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\inputmethodservice\IInputMethodSessionWrapper.java"
"sInstance","false","false","true","true","false","Spannable.Factory","new Spannable.Factory()","[]","Optional.empty","\android\text\Spannable.java"
"DEFAULT_TRANSFER_ENCODING","true","false","false","true","true","String","""8bit""","[]","Optional[/**
 * Default transfer encoding of string parameters
 */
]","\com\android\internal\http\multipart\StringPart.java"
"content","false","false","true","false","false","byte","null","[]","Optional[/**
 * Contents of this StringPart.
 */
]","\com\android\internal\http\multipart\StringPart.java"
"DEFAULT_CONTENT_TYPE","true","false","false","true","true","String","""text/plain""","[]","Optional[/**
 * Default content encoding of string parameters.
 */
]","\com\android\internal\http\multipart\StringPart.java"
"LOG","false","false","true","true","true","Log","LogFactory.getLog(StringPart.class)","[]","Optional[/**
 * Log object for this class.
 */
]","\com\android\internal\http\multipart\StringPart.java"
"DEFAULT_CHARSET","true","false","false","true","true","String","""US-ASCII""","[]","Optional[/**
 * Default charset of string parameters
 */
]","\com\android\internal\http\multipart\StringPart.java"
"value","false","false","true","false","false","String","null","[]","Optional[/**
 * The String value of this part.
 */
]","\com\android\internal\http\multipart\StringPart.java"
"mBaseName","false","false","true","false","true","File","null","[]","Optional.empty","\com\android\internal\os\AtomicFile.java"
"mBackupName","false","false","true","false","true","File","null","[]","Optional.empty","\com\android\internal\os\AtomicFile.java"
"mPad","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\style\IconMarginSpan.java"
"mBitmap","false","false","true","false","false","Bitmap","null","[]","Optional.empty","\android\text\style\IconMarginSpan.java"
"linkColor","true","false","false","false","false","int","null","[]","Optional.empty","\android\text\TextPaint.java"
"density","true","false","false","false","false","float","1.0f","[]","Optional.empty","\android\text\TextPaint.java"
"baselineShift","true","false","false","false","false","int","null","[]","Optional.empty","\android\text\TextPaint.java"
"bgColor","true","false","false","false","false","int","null","[]","Optional.empty","\android\text\TextPaint.java"
"drawableState","true","false","false","false","false","int","null","[]","Optional.empty","\android\text\TextPaint.java"
"mRemote","false","true","false","false","false","IContentObserver","null","[]","Optional.empty","\android\database\CursorToBulkCursorAdaptor.java"
"mReadOnly","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\database\CursorToBulkCursorAdaptor.java"
"mWindow","false","false","true","false","false","CursorWindow","null","[]","Optional.empty","\android\database\CursorToBulkCursorAdaptor.java"
"mCursor","false","false","true","false","true","CrossProcessCursor","null","[]","Optional.empty","\android\database\CursorToBulkCursorAdaptor.java"
"TAG","false","false","true","true","true","String","""Cursor""","[]","Optional.empty","\android\database\CursorToBulkCursorAdaptor.java"
"mObserver","false","false","true","false","false","ContentObserverProxy","null","[]","Optional.empty","\android\database\CursorToBulkCursorAdaptor.java"
"mProviderName","false","false","true","false","true","String","null","[]","Optional.empty","\android\database\CursorToBulkCursorAdaptor.java"
"mHandle","false","true","false","false","false","int","null","[]","Optional[/**
 * The handle returned by the NFC service and used to identify the LLCP connectionless socket in
 * every call of this class.
 */
]","\com\android\internal\nfc\LlcpConnectionlessSocket.java"
"TAG","false","false","true","true","true","String","""LlcpConnectionlessSocket""","[]","Optional.empty","\com\android\internal\nfc\LlcpConnectionlessSocket.java"
"mService","false","true","false","false","false","ILlcpConnectionlessSocket","null","[]","Optional[/**
 * The entry point for LLCP Connectionless socket operations.
 */
]","\com\android\internal\nfc\LlcpConnectionlessSocket.java"
"sRecycledPointerCount","false","false","true","true","false","int","null","[]","Optional.empty","\android\view\VelocityTracker.java"
"xVelocity","true","false","false","false","false","float","null","[]","Optional.empty","\android\view\VelocityTracker.java"
"MAX_AGE_MILLISECONDS","false","false","true","true","true","int","200","[]","Optional.empty","\android\view\VelocityTracker.java"
"NUM_PAST","false","false","true","true","true","int","10","[]","Optional.empty","\android\view\VelocityTracker.java"
"next","true","false","false","false","false","Pointer","null","[]","Optional.empty","\android\view\VelocityTracker.java"
"mPointerListHead","false","false","true","false","false","Pointer","null","[]","Optional[// sorted by id in increasing order
]","\android\view\VelocityTracker.java"
"pastX","true","false","false","false","true","float","new float[NUM_PAST]","[]","Optional.empty","\android\view\VelocityTracker.java"
"pastY","true","false","false","false","true","float","new float[NUM_PAST]","[]","Optional.empty","\android\view\VelocityTracker.java"
"mGeneration","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\VelocityTracker.java"
"id","true","false","false","false","false","int","null","[]","Optional.empty","\android\view\VelocityTracker.java"
"yVelocity","true","false","false","false","false","float","null","[]","Optional.empty","\android\view\VelocityTracker.java"
"generation","true","false","false","false","false","int","null","[]","Optional.empty","\android\view\VelocityTracker.java"
"mNext","false","false","true","false","false","VelocityTracker","null","[]","Optional.empty","\android\view\VelocityTracker.java"
"POINTER_POOL_CAPACITY","false","false","true","true","true","int","20","[]","Optional.empty","\android\view\VelocityTracker.java"
"sPool","false","false","true","true","true","Pool<VelocityTracker>","Pools.synchronizedPool(Pools.finitePool(new PoolableManager<VelocityTracker>() {

    public VelocityTracker newInstance() {
        return new VelocityTracker();
    }

    public void onAcquired(VelocityTracker element) {
    }

    public void onReleased(VelocityTracker element) {
        element.clear();
    }
}, 2))","[]","Optional.empty","\android\view\VelocityTracker.java"
"mLastTouchIndex","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\VelocityTracker.java"
"pastTime","true","false","false","false","true","long","new long[NUM_PAST]","[]","Optional[// uses Long.MIN_VALUE as a sentinel
]","\android\view\VelocityTracker.java"
"TAG","false","false","true","true","true","String","""VelocityTracker""","[]","Optional.empty","\android\view\VelocityTracker.java"
"localLOGV","false","false","true","true","true","boolean","DEBUG || Config.LOGV","[]","Optional.empty","\android\view\VelocityTracker.java"
"sRecycledPointerListHead","false","false","true","true","false","Pointer","null","[]","Optional.empty","\android\view\VelocityTracker.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\view\VelocityTracker.java"
"INITIALIZING","false","false","false","true","true","int","1","[]","Optional[// Ready to launch (after startActivity()).
]","\android\app\LocalActivityManager.java"
"instanceState","false","false","false","false","false","Bundle","null","[]","Optional[// Last retrieved freeze state.
]","\android\app\LocalActivityManager.java"
"mCurState","false","false","true","false","false","int","INITIALIZING","[]","Optional[/**
 * Current state the owner (ActivityGroup) is in
 */
]","\android\app\LocalActivityManager.java"
"activity","false","false","false","false","false","Activity","null","[]","Optional[// Currently instantiated activity.
]","\android\app\LocalActivityManager.java"
"mActivities","false","false","true","false","true","Map<String,LocalActivityRecord>","new HashMap<String, LocalActivityRecord>()","[]","Optional[/**
 * id -> record of all known activities.
 */
]","\android\app\LocalActivityManager.java"
"curState","false","false","false","false","false","int","RESTORED","[]","Optional[// Current state the activity is in.
]","\android\app\LocalActivityManager.java"
"mActivityArray","false","false","true","false","true","ArrayList<LocalActivityRecord>","new ArrayList<LocalActivityRecord>()","[]","Optional[/**
 * array of all known activities for easy iterating.
 */
]","\android\app\LocalActivityManager.java"
"CREATED","false","false","false","true","true","int","2","[]","Optional[// Created, not started or resumed.
]","\android\app\LocalActivityManager.java"
"window","false","false","false","false","false","Window","null","[]","Optional[// Activity's top-level window.
]","\android\app\LocalActivityManager.java"
"mSingleMode","false","false","true","false","false","boolean","null","[]","Optional[/**
 * True if only one activity can be resumed at a time
 */
]","\android\app\LocalActivityManager.java"
"RESTORED","false","false","false","true","true","int","0","[]","Optional[// State restored, but no startActivity().
]","\android\app\LocalActivityManager.java"
"mActivityThread","false","false","true","false","true","ActivityThread","null","[]","Optional[/**
 * Thread our activities are running in.
 */
]","\android\app\LocalActivityManager.java"
"id","false","false","false","false","true","String","null","[]","Optional[// Unique name of this record.
]","\android\app\LocalActivityManager.java"
"mResumed","false","false","true","false","false","LocalActivityRecord","null","[]","Optional[/**
 * The activity that is currently resumed.
 */
]","\android\app\LocalActivityManager.java"
"activityInfo","false","false","false","false","false","ActivityInfo","null","[]","Optional[// Package manager info about activity.
]","\android\app\LocalActivityManager.java"
"mParent","false","false","true","false","true","Activity","null","[]","Optional[/**
 * The containing activity that owns the activities we create.
 */
]","\android\app\LocalActivityManager.java"
"mFinishing","false","false","true","false","false","boolean","null","[]","Optional[/**
 * Set to true once we find out the container is finishing.
 */
]","\android\app\LocalActivityManager.java"
"DESTROYED","false","false","false","true","true","int","5","[]","Optional[// No longer with us.
]","\android\app\LocalActivityManager.java"
"TAG","false","false","true","true","true","String","""LocalActivityManager""","[]","Optional.empty","\android\app\LocalActivityManager.java"
"RESUMED","false","false","false","true","true","int","4","[]","Optional[// Created started and resumed.
]","\android\app\LocalActivityManager.java"
"localLOGV","false","false","true","true","true","boolean","false || Config.LOGV","[]","Optional.empty","\android\app\LocalActivityManager.java"
"STARTED","false","false","false","true","true","int","3","[]","Optional[// Created and started, not resumed.
]","\android\app\LocalActivityManager.java"
"intent","false","false","false","false","false","Intent","null","[]","Optional[// Which activity to run here.
]","\android\app\LocalActivityManager.java"
"EXTRA_SC","true","false","false","true","true","String","""systemcode""","[]","Optional[/**
 * @hide
 */
]","\android\nfc\tech\NfcF.java"
"EXTRA_PMM","true","false","false","true","true","String","""pmm""","[]","Optional[/**
 * @hide
 */
]","\android\nfc\tech\NfcF.java"
"mManufacturer","false","false","true","false","false","byte","null","[]","Optional.empty","\android\nfc\tech\NfcF.java"
"mSystemCode","false","false","true","false","false","byte","null","[]","Optional.empty","\android\nfc\tech\NfcF.java"
"priority","false","false","true","false","true","int","null","[]","Optional.empty","\com\android\internal\os\AndroidPrintStream.java"
"tag","false","false","true","false","true","String","null","[]","Optional.empty","\com\android\internal\os\AndroidPrintStream.java"
"dns2","true","false","false","false","false","int","null","[]","Optional.empty","\android\net\DhcpInfo.java"
"dns1","true","false","false","false","false","int","null","[]","Optional.empty","\android\net\DhcpInfo.java"
"CREATOR","true","false","false","true","true","Creator<DhcpInfo>","new Creator<DhcpInfo>() {

    public DhcpInfo createFromParcel(Parcel in) {
        DhcpInfo info = new DhcpInfo();
        info.ipAddress = in.readInt();
        info.gateway = in.readInt();
        info.netmask = in.readInt();
        info.dns1 = in.readInt();
        info.dns2 = in.readInt();
        info.serverAddress = in.readInt();
        info.leaseDuration = in.readInt();
        return info;
    }

    public DhcpInfo[] newArray(int size) {
        return new DhcpInfo[size];
    }
}","[]","Optional[/**
 * Implement the Parcelable interface {@hide}
 */
]","\android\net\DhcpInfo.java"
"leaseDuration","true","false","false","false","false","int","null","[]","Optional.empty","\android\net\DhcpInfo.java"
"serverAddress","true","false","false","false","false","int","null","[]","Optional.empty","\android\net\DhcpInfo.java"
"gateway","true","false","false","false","false","int","null","[]","Optional.empty","\android\net\DhcpInfo.java"
"ipAddress","true","false","false","false","false","int","null","[]","Optional.empty","\android\net\DhcpInfo.java"
"netmask","true","false","false","false","false","int","null","[]","Optional.empty","\android\net\DhcpInfo.java"
"ALT_IPA_NAME","false","false","true","true","true","int","7","[]","Optional.empty","\com\android\internal\net\DomainNameValidator.java"
"TAG","false","false","true","true","true","String","""DomainNameValidator""","[]","Optional.empty","\com\android\internal\net\DomainNameValidator.java"
"ALT_DNS_NAME","false","false","true","true","true","int","2","[]","Optional.empty","\com\android\internal\net\DomainNameValidator.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\com\android\internal\net\DomainNameValidator.java"
"LOG_ENABLED","false","false","true","true","true","boolean","DEBUG ? Config.LOGD : Config.LOGV","[]","Optional.empty","\com\android\internal\net\DomainNameValidator.java"
"QUICK_IP_PATTERN","false","false","true","true","false","Pattern","null","[]","Optional.empty","\com\android\internal\net\DomainNameValidator.java"
"ICON","true","false","false","true","true","String","""icon""","[]","Optional.empty","\android\provider\Applications.java"
"APPLICATION_DIR_TYPE","true","false","false","true","true","String","ContentResolver.CURSOR_DIR_BASE_TYPE + ""/"" + APPLICATION_SUB_TYPE","[]","Optional[/**
 * The MIME type for a list of application items.
 */
]","\android\provider\Applications.java"
"NAME","true","false","false","true","true","String","""name""","[]","Optional.empty","\android\provider\Applications.java"
"APPLICATION_SUB_TYPE","false","false","true","true","true","String","""vnd.android.application""","[]","Optional.empty","\android\provider\Applications.java"
"AUTHORITY","true","false","false","true","true","String","""applications""","[]","Optional[/**
 * The content authority for this provider.
 */
]","\android\provider\Applications.java"
"URI","true","false","false","true","true","String","""uri""","[]","Optional.empty","\android\provider\Applications.java"
"CONTENT_URI","true","false","false","true","true","Uri","Uri.parse(""content://"" + AUTHORITY)","[]","Optional[/**
 * The content:// style URL for this provider
 */
]","\android\provider\Applications.java"
"SEARCH_PATH","true","false","false","true","true","String","""search""","[]","Optional[/**
 * The content path for application search.
 */
]","\android\provider\Applications.java"
"APPLICATION_PATH","true","false","false","true","true","String","""applications""","[]","Optional[/**
 * The content path for application component URIs.
 */
]","\android\provider\Applications.java"
"APPLICATION_ITEM_TYPE","true","false","false","true","true","String","ContentResolver.CURSOR_ITEM_BASE_TYPE + ""/"" + APPLICATION_SUB_TYPE","[]","Optional[/**
 * The MIME type for a single application item.
 */
]","\android\provider\Applications.java"
"mTransport","false","false","true","false","false","Transport","null","[]","Optional.empty","\android\database\ContentObserver.java"
"mContentObserver","false","false","false","false","false","ContentObserver","null","[]","Optional.empty","\android\database\ContentObserver.java"
"lock","false","false","true","false","false","Object","new Object()","[]","Optional[// Protects mTransport
]","\android\database\ContentObserver.java"
"mHandler","false","false","false","false","false","Handler","null","[]","Optional[/* package */
]","\android\database\ContentObserver.java"
"mSelf","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\database\ContentObserver.java"
"TYPE_MATRIX","true","false","false","true","false","int","0x2","[]","Optional[/**
 * Indicates a transformation that applies a matrix only (alpha = 1.)
 */
]","\android\view\animation\Transformation.java"
"mMatrix","false","true","false","false","false","Matrix","null","[]","Optional.empty","\android\view\animation\Transformation.java"
"mTransformationType","false","true","false","false","false","int","null","[]","Optional.empty","\android\view\animation\Transformation.java"
"TYPE_IDENTITY","true","false","false","true","false","int","0x0","[]","Optional[/**
 * Indicates a transformation that has no effect (alpha = 1 and identity matrix.)
 */
]","\android\view\animation\Transformation.java"
"mAlpha","false","true","false","false","false","float","null","[]","Optional.empty","\android\view\animation\Transformation.java"
"TYPE_BOTH","true","false","false","true","false","int","TYPE_ALPHA | TYPE_MATRIX","[]","Optional[/**
 * Indicates a transformation that applies an alpha and a matrix.
 */
]","\android\view\animation\Transformation.java"
"TYPE_ALPHA","true","false","false","true","false","int","0x1","[]","Optional[/**
 * Indicates a transformation that applies an alpha only (uses an identity matrix.)
 */
]","\android\view\animation\Transformation.java"
"mBuffer","false","false","true","false","true","ByteBuffer","null","[]","Optional.empty","\android\util\EventLog.java"
"LONG_TYPE","false","false","true","true","true","byte","1","[]","Optional.empty","\android\util\EventLog.java"
"TAGS_FILE","false","false","true","true","true","String","""/system/etc/event-log-tags""","[]","Optional.empty","\android\util\EventLog.java"
"STRING_TYPE","false","false","true","true","true","byte","2","[]","Optional.empty","\android\util\EventLog.java"
"LIST_TYPE","false","false","true","true","true","byte","3","[]","Optional.empty","\android\util\EventLog.java"
"THREAD_OFFSET","false","false","true","true","true","int","8","[]","Optional.empty","\android\util\EventLog.java"
"COMMENT_PATTERN","false","false","true","true","true","String","""^\\s*(#.*)?$""","[]","Optional.empty","\android\util\EventLog.java"
"DATA_START","false","false","true","true","true","int","24","[]","Optional.empty","\android\util\EventLog.java"
"SECONDS_OFFSET","false","false","true","true","true","int","12","[]","Optional.empty","\android\util\EventLog.java"
"TAG_PATTERN","false","false","true","true","true","String","""^\\s*(\\d+)\\s+(\\w+)\\s*(\\(.*\\))?\\s*$""","[]","Optional.empty","\android\util\EventLog.java"
"sTagNames","false","false","true","true","false","HashMap<Integer,String>","null","[]","Optional.empty","\android\util\EventLog.java"
"TAG","false","false","true","true","true","String","""EventLog""","[]","Optional.empty","\android\util\EventLog.java"
"PAYLOAD_START","false","false","true","true","true","int","20","[]","Optional.empty","\android\util\EventLog.java"
"PROCESS_OFFSET","false","false","true","true","true","int","4","[]","Optional.empty","\android\util\EventLog.java"
"sTagCodes","false","false","true","true","false","HashMap<String,Integer>","null","[]","Optional.empty","\android\util\EventLog.java"
"INT_TYPE","false","false","true","true","true","byte","0","[]","Optional[// Value types
]","\android\util\EventLog.java"
"LENGTH_OFFSET","false","false","true","true","true","int","0","[]","Optional[// Layout of event log entry received from kernel.
]","\android\util\EventLog.java"
"TAG_OFFSET","false","false","true","true","true","int","20","[]","Optional.empty","\android\util\EventLog.java"
"NANOSECONDS_OFFSET","false","false","true","true","true","int","16","[]","Optional.empty","\android\util\EventLog.java"
"first","true","false","false","false","true","F","null","[]","Optional.empty","\android\util\Pair.java"
"second","true","false","false","false","true","S","null","[]","Optional.empty","\android\util\Pair.java"
"lastFailureSource","true","false","false","false","false","int","null","[]","Optional.empty","\android\content\SyncStatusInfo.java"
"CREATOR","true","false","false","true","true","Creator<SyncStatusInfo>","new Creator<SyncStatusInfo>() {

    public SyncStatusInfo createFromParcel(Parcel in) {
        return new SyncStatusInfo(in);
    }

    public SyncStatusInfo[] newArray(int size) {
        return new SyncStatusInfo[size];
    }
}","[]","Optional.empty","\android\content\SyncStatusInfo.java"
"periodicSyncTimes","true","false","false","false","false","ArrayList<Long>","null","[]","Optional.empty","\android\content\SyncStatusInfo.java"
"lastSuccessTime","true","false","false","false","false","long","null","[]","Optional.empty","\android\content\SyncStatusInfo.java"
"initialize","true","false","false","false","false","boolean","null","[]","Optional.empty","\android\content\SyncStatusInfo.java"
"authorityId","true","false","false","false","true","int","null","[]","Optional.empty","\android\content\SyncStatusInfo.java"
"pending","true","false","false","false","false","boolean","null","[]","Optional.empty","\android\content\SyncStatusInfo.java"
"numSourcePoll","true","false","false","false","false","int","null","[]","Optional.empty","\android\content\SyncStatusInfo.java"
"lastFailureTime","true","false","false","false","false","long","null","[]","Optional.empty","\android\content\SyncStatusInfo.java"
"numSourceUser","true","false","false","false","false","int","null","[]","Optional.empty","\android\content\SyncStatusInfo.java"
"lastSuccessSource","true","false","false","false","false","int","null","[]","Optional.empty","\android\content\SyncStatusInfo.java"
"numSourcePeriodic","true","false","false","false","false","int","null","[]","Optional.empty","\android\content\SyncStatusInfo.java"
"initialFailureTime","true","false","false","false","false","long","null","[]","Optional.empty","\android\content\SyncStatusInfo.java"
"totalElapsedTime","true","false","false","false","false","long","null","[]","Optional.empty","\android\content\SyncStatusInfo.java"
"numSourceServer","true","false","false","false","false","int","null","[]","Optional.empty","\android\content\SyncStatusInfo.java"
"VERSION","false","false","false","true","true","int","2","[]","Optional.empty","\android\content\SyncStatusInfo.java"
"TAG","false","false","true","true","true","String","""Sync""","[]","Optional.empty","\android\content\SyncStatusInfo.java"
"numSourceLocal","true","false","false","false","false","int","null","[]","Optional.empty","\android\content\SyncStatusInfo.java"
"numSyncs","true","false","false","false","false","int","null","[]","Optional.empty","\android\content\SyncStatusInfo.java"
"lastFailureMesg","true","false","false","false","false","String","null","[]","Optional.empty","\android\content\SyncStatusInfo.java"
"mOffCalled","false","false","true","false","false","boolean","null","[]","Optional.empty","\com\android\server\ResettableTimeout.java"
"mLock","false","false","true","false","false","ConditionVariable","new ConditionVariable()","[]","Optional.empty","\com\android\server\ResettableTimeout.java"
"mOffAt","false","false","true","false","false","long","null","[]","Optional[// turn it off at this time.
]","\com\android\server\ResettableTimeout.java"
"mThread","false","false","true","false","false","Thread","null","[]","Optional.empty","\com\android\server\ResettableTimeout.java"
"POSITIVE_BUTTON","false","false","true","true","true","int","AlertDialog.BUTTON_POSITIVE","[]","Optional.empty","\com\android\internal\app\ExternalMediaFormatActivity.java"
"mStorageReceiver","false","false","true","false","false","BroadcastReceiver","new BroadcastReceiver() {

    @Override
    public void onReceive(Context context, Intent intent) {
        String action = intent.getAction();
        Log.d(""ExternalMediaFormatActivity"", ""got action "" + action);
        if (action == Intent.ACTION_MEDIA_REMOVED || action == Intent.ACTION_MEDIA_CHECKING || action == Intent.ACTION_MEDIA_MOUNTED || action == Intent.ACTION_MEDIA_SHARED) {
            finish();
        }
    }
}","[]","Optional[/**
 * Used to detect when the media state changes, in case we need to call finish()
 */
]","\com\android\internal\app\ExternalMediaFormatActivity.java"
"SIZE","true","false","false","true","true","String","""_size""","[]","Optional[/**
 * The number of bytes in the file identified by the openable URI. Null if unknown.
 */
]","\android\provider\OpenableColumns.java"
"DISPLAY_NAME","true","false","false","true","true","String","""_display_name""","[]","Optional[/**
 * The human-friendly name of file. If this is not provided then the name should default to the
 * the last segment of the file's URI.
 */
]","\android\provider\OpenableColumns.java"
"mLast","false","false","true","false","false","long","null","[]","Optional.empty","\android\net\http\Timer.java"
"mStart","false","false","true","false","false","long","null","[]","Optional.empty","\android\net\http\Timer.java"
"mMyIcon","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\preference\SeekBarPreference.java"
"TAG","false","false","true","true","true","String","""SeekBarPreference""","[]","Optional.empty","\android\preference\SeekBarPreference.java"
"mClassLoader","false","false","true","false","false","ClassLoader","null","[]","Optional[/**
 * The ClassLoader used when unparcelling data from mParcelledData.
 */
]","\android\os\Bundle.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<Bundle>","new Parcelable.Creator<Bundle>() {

    public Bundle createFromParcel(Parcel in) {
        return in.readBundle();
    }

    public Bundle[] newArray(int size) {
        return new Bundle[size];
    }
}","[]","Optional.empty","\android\os\Bundle.java"
"mParcelledData","false","false","false","false","false","Parcel","null","[]","Optional[/* package */
]","\android\os\Bundle.java"
"EMPTY","true","false","false","true","true","Bundle","null","[]","Optional.empty","\android\os\Bundle.java"
"LOG_TAG","false","false","true","true","true","String","""Bundle""","[]","Optional.empty","\android\os\Bundle.java"
"mHasFds","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\os\Bundle.java"
"mFdsKnown","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\os\Bundle.java"
"mMap","false","false","false","false","false","Map<String,Object>","null","[]","Optional[/* package */
]","\android\os\Bundle.java"
"ORIGINAL","false","false","true","true","false","char","new char[] { '\n', '\r' }","[]","Optional.empty","\android\text\method\SingleLineTransformationMethod.java"
"sInstance","false","false","true","true","false","SingleLineTransformationMethod","null","[]","Optional.empty","\android\text\method\SingleLineTransformationMethod.java"
"REPLACEMENT","false","false","true","true","false","char","new char[] { ' ', '\uFEFF' }","[]","Optional.empty","\android\text\method\SingleLineTransformationMethod.java"
"ERROR","true","false","false","true","true","int","6","[]","Optional[/**
 * Priority constant for the println method; use Log.e.
 */
]","\android\util\Log.java"
"sWtfHandler","false","false","true","true","false","TerribleFailureHandler","new TerribleFailureHandler() {

    public void onTerribleFailure(String tag, TerribleFailure what) {
        RuntimeInit.wtf(tag, what);
    }
}","[]","Optional.empty","\android\util\Log.java"
"LOG_ID_RADIO","true","false","false","true","true","int","1","[]","Optional[/**
 * @hide
 */
]","\android\util\Log.java"
"INFO","true","false","false","true","true","int","4","[]","Optional[/**
 * Priority constant for the println method; use Log.i.
 */
]","\android\util\Log.java"
"LOG_ID_SYSTEM","true","false","false","true","true","int","3","[]","Optional[/**
 * @hide
 */
]","\android\util\Log.java"
"WARN","true","false","false","true","true","int","5","[]","Optional[/**
 * Priority constant for the println method; use Log.w.
 */
]","\android\util\Log.java"
"VERBOSE","true","false","false","true","true","int","2","[]","Optional[/**
 * Priority constant for the println method; use Log.v.
 */
]","\android\util\Log.java"
"ASSERT","true","false","false","true","true","int","7","[]","Optional[/**
 * Priority constant for the println method.
 */
]","\android\util\Log.java"
"LOG_ID_MAIN","true","false","false","true","true","int","0","[]","Optional[/**
 * @hide
 */
]","\android\util\Log.java"
"LOG_ID_EVENTS","true","false","false","true","true","int","2","[]","Optional[/**
 * @hide
 */
]","\android\util\Log.java"
"DEBUG","true","false","false","true","true","int","3","[]","Optional[/**
 * Priority constant for the println method; use Log.d.
 */
]","\android\util\Log.java"
"STATE_TURNING_OFF","true","false","false","true","true","int","13","[]","Optional[/**
 * Indicates the local Bluetooth adapter is turning off. Local clients
 * should immediately attempt graceful disconnection of any remote links.
 */
]","\android\bluetooth\BluetoothAdapter.java"
"ERROR","true","false","false","true","true","int","Integer.MIN_VALUE","[]","Optional[/**
 * Sentinel error value for this class. Guaranteed to not equal any other
 * integer constant in this class. Provided as a convenience for functions
 * that require a sentinel error value, for example:
 * <p><code>Intent.getIntExtra(BluetoothAdapter.EXTRA_STATE,
 * BluetoothAdapter.ERROR)</code>
 */
]","\android\bluetooth\BluetoothAdapter.java"
"ADDRESS_LENGTH","false","false","true","true","true","int","17","[]","Optional.empty","\android\bluetooth\BluetoothAdapter.java"
"EXTRA_SCAN_MODE","true","false","false","true","true","String","""android.bluetooth.adapter.extra.SCAN_MODE""","[]","Optional[/**
 * Used as an int extra field in {@link #ACTION_SCAN_MODE_CHANGED}
 * intents to request the current scan mode. Possible values are:
 * {@link #SCAN_MODE_NONE},
 * {@link #SCAN_MODE_CONNECTABLE},
 * {@link #SCAN_MODE_CONNECTABLE_DISCOVERABLE},
 */
]","\android\bluetooth\BluetoothAdapter.java"
"EXTRA_PREVIOUS_SCAN_MODE","true","false","false","true","true","String","""android.bluetooth.adapter.extra.PREVIOUS_SCAN_MODE""","[]","Optional[/**
 * Used as an int extra field in {@link #ACTION_SCAN_MODE_CHANGED}
 * intents to request the previous scan mode. Possible values are:
 * {@link #SCAN_MODE_NONE},
 * {@link #SCAN_MODE_CONNECTABLE},
 * {@link #SCAN_MODE_CONNECTABLE_DISCOVERABLE},
 */
]","\android\bluetooth\BluetoothAdapter.java"
"ACTION_DISCOVERY_FINISHED","true","false","false","true","true","String","""android.bluetooth.adapter.action.DISCOVERY_FINISHED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: The local Bluetooth adapter has finished the device
 * discovery process.
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH} to receive.
 */
]","\android\bluetooth\BluetoothAdapter.java"
"EXTRA_DISCOVERABLE_DURATION","true","false","false","true","true","String","""android.bluetooth.adapter.extra.DISCOVERABLE_DURATION""","[]","Optional[/**
 * Used as an optional int extra field in {@link
 * #ACTION_REQUEST_DISCOVERABLE} intents to request a specific duration
 * for discoverability in seconds. The current default is 120 seconds, and
 * requests over 300 seconds will be capped. These values could change.
 */
]","\android\bluetooth\BluetoothAdapter.java"
"SCAN_MODE_CONNECTABLE","true","false","false","true","true","int","21","[]","Optional[/**
 * Indicates that inquiry scan is disabled, but page scan is enabled on the
 * local Bluetooth adapter. Therefore this device is not discoverable from
 * remote Bluetooth devices, but is connectable from remote devices that
 * have previously discovered this device.
 */
]","\android\bluetooth\BluetoothAdapter.java"
"SCAN_MODE_NONE","true","false","false","true","true","int","20","[]","Optional[/**
 * Indicates that both inquiry scan and page scan are disabled on the local
 * Bluetooth adapter. Therefore this device is neither discoverable
 * nor connectable from remote Bluetooth devices.
 */
]","\android\bluetooth\BluetoothAdapter.java"
"ACTION_STATE_CHANGED","true","false","false","true","true","String","""android.bluetooth.adapter.action.STATE_CHANGED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: The state of the local Bluetooth adapter has been
 * changed.
 * <p>For example, Bluetooth has been turned on or off.
 * <p>Always contains the extra fields {@link #EXTRA_STATE} and {@link
 * #EXTRA_PREVIOUS_STATE} containing the new and old states
 * respectively.
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH} to receive.
 */
]","\android\bluetooth\BluetoothAdapter.java"
"sChannels","false","false","true","true","false","LinkedList<Integer>","null","[]","Optional[// master list of non-reserved channels
]","\android\bluetooth\BluetoothAdapter.java"
"STATE_TURNING_ON","true","false","false","true","true","int","11","[]","Optional[/**
 * Indicates the local Bluetooth adapter is turning on. However local
 * clients should wait for {@link #STATE_ON} before attempting to
 * use the adapter.
 */
]","\android\bluetooth\BluetoothAdapter.java"
"RESERVED_RFCOMM_CHANNELS","false","false","true","true","true","int","new int[] { // HFAG
10, // HSAG
11, // OPUSH
12, // PBAP
19 }","[]","Optional.empty","\android\bluetooth\BluetoothAdapter.java"
"ACTION_REQUEST_DISCOVERABLE","true","false","false","true","true","String","""android.bluetooth.adapter.action.REQUEST_DISCOVERABLE""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show a system activity that requests discoverable mode.
 * This activity will also request the user to turn on Bluetooth if it
 * is not currently enabled.
 * <p>Discoverable mode is equivalent to {@link
 * #SCAN_MODE_CONNECTABLE_DISCOVERABLE}. It allows remote devices to see
 * this Bluetooth adapter when they perform a discovery.
 * <p>For privacy, Android is not discoverable by default.
 * <p>The sender of this Intent can optionally use extra field {@link
 * #EXTRA_DISCOVERABLE_DURATION} to request the duration of
 * discoverability. Currently the default duration is 120 seconds, and
 * maximum duration is capped at 300 seconds for each request.
 * <p>Notification of the result of this activity is posted using the
 * {@link android.app.Activity#onActivityResult} callback. The
 * <code>resultCode</code>
 * will be the duration (in seconds) of discoverability or
 * {@link android.app.Activity#RESULT_CANCELED} if the user rejected
 * discoverability or an error has occurred.
 * <p>Applications can also listen for {@link #ACTION_SCAN_MODE_CHANGED}
 * for global notification whenever the scan mode changes. For example, an
 * application can be notified when the device has ended discoverability.
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH}
 */
]","\android\bluetooth\BluetoothAdapter.java"
"ACTION_DISCOVERY_STARTED","true","false","false","true","true","String","""android.bluetooth.adapter.action.DISCOVERY_STARTED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: The local Bluetooth adapter has started the remote
 * device discovery process.
 * <p>This usually involves an inquiry scan of about 12 seconds, followed
 * by a page scan of each new device to retrieve its Bluetooth name.
 * <p>Register for {@link BluetoothDevice#ACTION_FOUND} to be notified as
 * remote Bluetooth devices are found.
 * <p>Device discovery is a heavyweight procedure. New connections to
 * remote Bluetooth devices should not be attempted while discovery is in
 * progress, and existing connections will experience limited bandwidth
 * and high latency. Use {@link #cancelDiscovery()} to cancel an ongoing
 * discovery.
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH} to receive.
 */
]","\android\bluetooth\BluetoothAdapter.java"
"mChannels","false","false","true","false","true","LinkedList<Integer>","null","[]","Optional[// local list of channels left to try
]","\android\bluetooth\BluetoothAdapter.java"
"STATE_ON","true","false","false","true","true","int","12","[]","Optional[/**
 * Indicates the local Bluetooth adapter is on, and ready for use.
 */
]","\android\bluetooth\BluetoothAdapter.java"
"STATE_OFF","true","false","false","true","true","int","10","[]","Optional[/**
 * Indicates the local Bluetooth adapter is off.
 */
]","\android\bluetooth\BluetoothAdapter.java"
"EXTRA_PREVIOUS_STATE","true","false","false","true","true","String","""android.bluetooth.adapter.extra.PREVIOUS_STATE""","[]","Optional[/**
 * Used as an int extra field in {@link #ACTION_STATE_CHANGED}
 * intents to request the previous power state. Possible values are:
 * {@link #STATE_OFF},
 * {@link #STATE_TURNING_ON},
 * {@link #STATE_ON},
 * {@link #STATE_TURNING_OFF},
 */
]","\android\bluetooth\BluetoothAdapter.java"
"mHandler","false","false","true","false","false","Handler","new Handler() {

    public void handleMessage(Message msg) {
        /* handle socket closing */
        int handle = msg.what;
        try {
            if (DBG)
                Log.d(TAG, ""Removing service record "" + Integer.toHexString(handle));
            mService.removeServiceRecord(handle);
        } catch (RemoteException e) {
            Log.e(TAG, """", e);
        }
    }
}","[]","Optional.empty","\android\bluetooth\BluetoothAdapter.java"
"TAG","false","false","true","true","true","String","""BluetoothAdapter""","[]","Optional.empty","\android\bluetooth\BluetoothAdapter.java"
"EXTRA_LOCAL_NAME","true","false","false","true","true","String","""android.bluetooth.adapter.extra.LOCAL_NAME""","[]","Optional[/**
 * Used as a String extra field in {@link #ACTION_LOCAL_NAME_CHANGED}
 * intents to request the local Bluetooth name.
 */
]","\android\bluetooth\BluetoothAdapter.java"
"DBG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\bluetooth\BluetoothAdapter.java"
"SCAN_MODE_CONNECTABLE_DISCOVERABLE","true","false","false","true","true","int","23","[]","Optional[/**
 * Indicates that both inquiry scan and page scan are enabled on the local
 * Bluetooth adapter. Therefore this device is both discoverable and
 * connectable from remote Bluetooth devices.
 */
]","\android\bluetooth\BluetoothAdapter.java"
"ACTION_REQUEST_ENABLE","true","false","false","true","true","String","""android.bluetooth.adapter.action.REQUEST_ENABLE""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show a system activity that allows the user to turn on
 * Bluetooth.
 * <p>This system activity will return once Bluetooth has completed turning
 * on, or the user has decided not to turn Bluetooth on.
 * <p>Notification of the result of this activity is posted using the
 * {@link android.app.Activity#onActivityResult} callback. The
 * <code>resultCode</code>
 * will be {@link android.app.Activity#RESULT_OK} if Bluetooth has been
 * turned on or {@link android.app.Activity#RESULT_CANCELED} if the user
 * has rejected the request or an error has occurred.
 * <p>Applications can also listen for {@link #ACTION_STATE_CHANGED}
 * for global notification whenever Bluetooth is turned on or off.
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH}
 */
]","\android\bluetooth\BluetoothAdapter.java"
"sAdapter","false","false","true","true","false","BluetoothAdapter","null","[]","Optional[/**
 * Lazily initialized singleton. Guaranteed final after first object
 * constructed.
 */
]","\android\bluetooth\BluetoothAdapter.java"
"EXTRA_STATE","true","false","false","true","true","String","""android.bluetooth.adapter.extra.STATE""","[]","Optional[/**
 * Used as an int extra field in {@link #ACTION_STATE_CHANGED}
 * intents to request the current power state. Possible values are:
 * {@link #STATE_OFF},
 * {@link #STATE_TURNING_ON},
 * {@link #STATE_ON},
 * {@link #STATE_TURNING_OFF},
 */
]","\android\bluetooth\BluetoothAdapter.java"
"ACTION_SCAN_MODE_CHANGED","true","false","false","true","true","String","""android.bluetooth.adapter.action.SCAN_MODE_CHANGED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: Indicates the Bluetooth scan mode of the local Adapter
 * has changed.
 * <p>Always contains the extra fields {@link #EXTRA_SCAN_MODE} and {@link
 * #EXTRA_PREVIOUS_SCAN_MODE} containing the new and old scan modes
 * respectively.
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH}
 */
]","\android\bluetooth\BluetoothAdapter.java"
"mService","false","false","true","false","true","IBluetooth","null","[]","Optional.empty","\android\bluetooth\BluetoothAdapter.java"
"mUuid","false","false","true","false","true","UUID","null","[]","Optional.empty","\android\bluetooth\BluetoothAdapter.java"
"BLUETOOTH_SERVICE","true","false","false","true","true","String","""bluetooth""","[]","Optional[/**
 * @hide
 */
]","\android\bluetooth\BluetoothAdapter.java"
"sRandom","false","false","true","true","false","Random","null","[]","Optional.empty","\android\bluetooth\BluetoothAdapter.java"
"ACTION_LOCAL_NAME_CHANGED","true","false","false","true","true","String","""android.bluetooth.adapter.action.LOCAL_NAME_CHANGED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: The local Bluetooth adapter has changed its friendly
 * Bluetooth name.
 * <p>This name is visible to remote Bluetooth devices.
 * <p>Always contains the extra field {@link #EXTRA_LOCAL_NAME} containing
 * the name.
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH} to receive.
 */
]","\android\bluetooth\BluetoothAdapter.java"
"DOWNLOADS_COLUMN_URI","false","false","true","true","true","int","1","[]","Optional[/**
 * The column index for the URI.
 * @hide
 */
]","\android\net\Downloads.java"
"completed","true","false","false","false","false","boolean","false","[]","Optional.empty","\android\net\Downloads.java"
"DOWNLOADS_COLUMN_CURRENT_BYTES","false","false","true","true","true","int","5","[]","Optional[/**
 * The column index for the number of bytes downloaded so far.
 * @hide
 */
]","\android\net\Downloads.java"
"filename","true","false","false","false","false","String","null","[]","Optional[/**
 * The filename of the active download.
 */
]","\android\net\Downloads.java"
"STATUS_DOWNLOADED_UPDATE","false","false","true","true","true","int","4","[]","Optional[/**
 * @hide
 */
]","\android\net\Downloads.java"
"DOWNLOAD_DESTINATION_CACHE_PURGEABLE","true","false","false","true","true","int","3","[]","Optional[/**
 * This download will be saved to the download manager's private
 * partition and will be purged as necessary to make space. This is
 * for private files (similar to CACHE_PARTITION) that aren't deleted
 * immediately after they are used, and are kept around by the download
 * manager as long as space is available.
 */
]","\android\net\Downloads.java"
"statusCode","true","false","false","false","false","int","-1","[]","Optional[/**
 * An opaque status code for the download
 */
]","\android\net\Downloads.java"
"STATUS_PENDING","true","false","false","true","true","int","190","[]","Optional[/**
 * This download hasn't started yet
 */
]","\android\net\Downloads.java"
"STATUS_INSUFFICIENT_SPACE_ERROR","true","false","false","true","true","int","498","[]","Optional[/**
 * This download couldn't be completed due to insufficient storage
 * space.  Typically, this is because the SD card is full.
 */
]","\android\net\Downloads.java"
"DOWNLOADS_COLUMN_STATUS","false","false","true","true","true","int","2","[]","Optional[/**
 * The column index for the status code.
 * @hide
 */
]","\android\net\Downloads.java"
"ACTION_DOWNLOAD_COMPLETED","true","false","false","true","true","String","""android.intent.action.DOWNLOAD_COMPLETED""","[]","Optional[/**
 * Broadcast Action: this is sent by the download manager to the app
 * that had initiated a download when that download completes. The
 * download's content: uri is specified in the intent's data.
 */
]","\android\net\Downloads.java"
"QUERY_WHERE_APP_DATA_CLAUSE","false","false","true","true","true","String","android.provider.Downloads.Impl.COLUMN_APP_DATA + ""=?""","[]","Optional[/**
 * Query where clause by app data.
 * @hide
 */
]","\android\net\Downloads.java"
"COLUMN_NOTIFICATION_EXTRAS","true","false","false","true","true","String","""notificationextras""","[]","Optional[/**
 * If extras are specified when requesting a download they will be provided in the intent that
 * is sent to the specified class and package when a download has finished.
 * <P>Type: TEXT</P>
 * <P>Owner can Init</P>
 */
]","\android\net\Downloads.java"
"STATUS_UNHANDLED_REDIRECT","true","false","false","true","true","int","493","[]","Optional[/**
 * This download couldn't be completed because of an HTTP
 * redirect response that the download manager couldn't
 * handle.
 */
]","\android\net\Downloads.java"
"DOWNLOADS_PROJECTION","false","false","true","true","true","String","{ BaseColumns._ID, android.provider.Downloads.Impl.COLUMN_APP_DATA, android.provider.Downloads.Impl.COLUMN_STATUS, android.provider.Downloads.Impl._DATA, android.provider.Downloads.Impl.COLUMN_LAST_MODIFICATION, android.provider.Downloads.Impl.COLUMN_CURRENT_BYTES }","[]","Optional[/**
 * Column projection for the query to the download manager. This must match
 * with the constants DOWNLOADS_COLUMN_*.
 * @hide
 */
]","\android\net\Downloads.java"
"STATUS_DOWNLOADING_UPDATE","false","false","true","true","true","int","3","[]","Optional[/**
 * @hide
 */
]","\android\net\Downloads.java"
"STATUS_UNKNOWN_ERROR","true","false","false","true","true","int","491","[]","Optional[/**
 * This download has completed with an error.
 * Warning: there will be other status values that indicate errors in
 * the future. Use isStatusError() to capture the entire category.
 */
]","\android\net\Downloads.java"
"QUERY_WHERE_CLAUSE","false","false","true","true","true","String","android.provider.Downloads.Impl.COLUMN_NOTIFICATION_PACKAGE + ""=? AND "" + android.provider.Downloads.Impl.COLUMN_NOTIFICATION_CLASS + ""=?""","[]","Optional[/**
 * Query where clause for general querying.
 */
]","\android\net\Downloads.java"
"id","true","false","false","false","false","long","DOWNLOAD_ID_INVALID","[]","Optional[/**
 * An opaque id for the download
 */
]","\android\net\Downloads.java"
"DOWNLOADS_COLUMN_ID","false","false","true","true","true","int","0","[]","Optional[/**
 * The column index for the ID.
 * @hide
 */
]","\android\net\Downloads.java"
"bytesSoFar","true","false","false","false","false","long","-1","[]","Optional[/**
 * Approximate number of bytes downloaded so far, for debugging purposes.
 */
]","\android\net\Downloads.java"
"PROJECTION","false","false","true","true","true","String","{ BaseColumns._ID, android.provider.Downloads.Impl.COLUMN_CURRENT_BYTES, android.provider.Downloads.Impl.COLUMN_TOTAL_BYTES }","[]","Optional[/**
 * @hide
 */
]","\android\net\Downloads.java"
"STATUS_SUCCESS","true","false","false","true","true","int","200","[]","Optional[/**
 * This download has successfully completed.
 * Warning: there might be other status values that indicate success
 * in the future.
 * Use isSucccess() to capture the entire category.
 */
]","\android\net\Downloads.java"
"STATUS_RUNNING","true","false","false","true","true","int","192","[]","Optional[/**
 * This download has started
 */
]","\android\net\Downloads.java"
"STATUS_INVALID","false","false","true","true","true","int","0","[]","Optional[/**
 * @hide
 */
]","\android\net\Downloads.java"
"STATUS_DEVICE_NOT_FOUND_ERROR","true","false","false","true","true","int","499","[]","Optional[/**
 * This download couldn't be completed because no external storage
 * device was found.  Typically, this is because the SD card is not
 * mounted.
 */
]","\android\net\Downloads.java"
"DOWNLOAD_DESTINATION_EXTERNAL","true","false","false","true","true","int","1","[]","Optional[/**
 * This download will be saved to the external storage. This is the
 * default behavior, and should be used for any file that the user
 * can freely access, copy, delete. Even with that destination,
 * unencrypted DRM files are saved in secure internal storage.
 * Downloads to the external destination only write files for which
 * there is a registered handler. The resulting files are accessible
 * by filename to all applications.
 */
]","\android\net\Downloads.java"
"DOWNLOAD_DESTINATION_CACHE","true","false","false","true","true","int","2","[]","Optional[/**
 * This download will be saved to the download manager's private
 * partition. This is the behavior used by applications that want to
 * download private files that are used and deleted soon after they
 * get downloaded. All file types are allowed, and only the initiating
 * application can access the file (indirectly through a content
 * provider). This requires the
 * android.permission.ACCESS_DOWNLOAD_MANAGER_ADVANCED permission.
 */
]","\android\net\Downloads.java"
"DOWNLOAD_ID_INVALID","true","false","false","true","true","long","-1","[]","Optional[/**
 * An invalid download id
 */
]","\android\net\Downloads.java"
"DOWNLOADS_COLUMN_LAST_MODIFICATION","false","false","true","true","true","int","4","[]","Optional[/**
 * The column index for the last modification time.
 * @hide
 */
]","\android\net\Downloads.java"
"STATUS_NOT_ACCEPTABLE","true","false","false","true","true","int","406","[]","Optional[/**
 * This download can't be performed because the content type cannot be
 * handled.
 */
]","\android\net\Downloads.java"
"DOWNLOADS_COLUMN_FILENAME","false","false","true","true","true","int","3","[]","Optional[/**
 * The column index for the filename.
 * @hide
 */
]","\android\net\Downloads.java"
"SCALING_THRESHOLD","false","false","true","true","true","float","0.26f","[]","Optional.empty","\android\gesture\GestureUtils.java"
"NONUNIFORM_SCALE","false","false","true","true","true","float","(float) Math.sqrt(2)","[]","Optional.empty","\android\gesture\GestureUtils.java"
"CONTENT_TYPE","true","false","false","true","true","String","""vnd.android.cursor.dir/calls""","[]","Optional[/**
 * The MIME type of {@link #CONTENT_URI} and {@link #CONTENT_FILTER_URI}
 * providing a directory of calls.
 */
]","\android\provider\CallLog.java"
"CACHED_NUMBER_TYPE","true","false","false","true","true","String","""numbertype""","[]","Optional[/**
 * The cached number type (Home, Work, etc) associated with the
 * phone number, if it exists.
 * This value is not guaranteed to be current, if the contact information
 * associated with this number has changed.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\CallLog.java"
"DURATION","true","false","false","true","true","String","""duration""","[]","Optional[/**
 * The duration of the call in seconds
 * <P>Type: INTEGER (long)</P>
 */
]","\android\provider\CallLog.java"
"CONTENT_ITEM_TYPE","true","false","false","true","true","String","""vnd.android.cursor.item/calls""","[]","Optional[/**
 * The MIME type of a {@link #CONTENT_URI} sub-directory of a single
 * call.
 */
]","\android\provider\CallLog.java"
"NUMBER","true","false","false","true","true","String","""number""","[]","Optional[/**
 * The phone number as the user entered it.
 * <P>Type: TEXT</P>
 */
]","\android\provider\CallLog.java"
"CACHED_NAME","true","false","false","true","true","String","""name""","[]","Optional[/**
 * The cached name associated with the phone number, if it exists.
 * This value is not guaranteed to be current, if the contact information
 * associated with this number has changed.
 * <P>Type: TEXT</P>
 */
]","\android\provider\CallLog.java"
"OUTGOING_TYPE","true","false","false","true","true","int","2","[]","Optional.empty","\android\provider\CallLog.java"
"CONTENT_FILTER_URI","true","false","false","true","true","Uri","Uri.parse(""content://call_log/calls/filter"")","[]","Optional[/**
 * The content:// style URL for filtering this table on phone numbers
 */
]","\android\provider\CallLog.java"
"TYPE","true","false","false","true","true","String","""type""","[]","Optional[/**
 * The type of the call (incoming, outgoing or missed).
 * <P>Type: INTEGER (int)</P>
 */
]","\android\provider\CallLog.java"
"DEFAULT_SORT_ORDER","true","false","false","true","true","String","""date DESC""","[]","Optional[/**
 * The default sort order for this table
 */
]","\android\provider\CallLog.java"
"AUTHORITY","true","false","false","true","true","String","""call_log""","[]","Optional.empty","\android\provider\CallLog.java"
"CACHED_NUMBER_LABEL","true","false","false","true","true","String","""numberlabel""","[]","Optional[/**
 * The cached number label, for a custom number type, associated with the
 * phone number, if it exists.
 * This value is not guaranteed to be current, if the contact information
 * associated with this number has changed.
 * <P>Type: TEXT</P>
 */
]","\android\provider\CallLog.java"
"MISSED_TYPE","true","false","false","true","true","int","3","[]","Optional.empty","\android\provider\CallLog.java"
"CONTENT_URI","true","false","false","true","true","Uri","Uri.parse(""content://call_log/calls"")","[]","Optional[/**
 * The content:// style URL for this table
 */
]","\android\provider\CallLog.java"
"NEW","true","false","false","true","true","String","""new""","[]","Optional[/**
 * Whether or not the call has been acknowledged
 * <P>Type: INTEGER (boolean)</P>
 */
]","\android\provider\CallLog.java"
"DATE","true","false","false","true","true","String","""date""","[]","Optional[/**
 * The date the call occured, in milliseconds since the epoch
 * <P>Type: INTEGER (long)</P>
 */
]","\android\provider\CallLog.java"
"INCOMING_TYPE","true","false","false","true","true","int","1","[]","Optional.empty","\android\provider\CallLog.java"
"DISPLAY_MODE_LIST","true","false","false","true","true","int","0x2","[]","Optional[/**
 * Displays a live folder's content in a list.
 *
 * @see LiveFolders#EXTRA_LIVE_FOLDER_DISPLAY_MODE
 */
]","\android\provider\LiveFolders.java"
"ICON_PACKAGE","true","false","false","true","true","String","""icon_package""","[]","Optional[/**
 * <p>Content provider column.</p>
 * <p>Package where to find the icon of the live folder item. This value can be
 * obtained easily using
 * {@link android.content.Intent.ShortcutIconResource#fromContext(android.content.Context, int)}.</p>
 * <p>Optional.</p>
 * <p>Type: String.</p>
 *
 * @see #ICON_RESOURCE
 * @see android.content.Intent.ShortcutIconResource
 */
]","\android\provider\LiveFolders.java"
"ACTION_CREATE_LIVE_FOLDER","true","false","false","true","true","String","""android.intent.action.CREATE_LIVE_FOLDER""","[@SdkConstant(SdkConstant.SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Creates a live folder.
 * <p>Input: Nothing.</p>
 * <p>Output: An Intent representing the live folder. The intent must contain four
 * extras: EXTRA_LIVE_FOLDER_NAME (value: String),
 * EXTRA_LIVE_FOLDER_ICON (value: ShortcutIconResource),
 * EXTRA_LIVE_FOLDER_URI (value: String) and
 * EXTRA_LIVE_FOLDER_DISPLAY_MODE (value: int). The Intent can optionnally contain
 * EXTRA_LIVE_FOLDER_BASE_INTENT (value: Intent).</p>
 *
 * @see #EXTRA_LIVE_FOLDER_NAME
 * @see #EXTRA_LIVE_FOLDER_ICON
 * @see #EXTRA_LIVE_FOLDER_DISPLAY_MODE
 * @see #EXTRA_LIVE_FOLDER_BASE_INTENT
 * @see android.content.Intent.ShortcutIconResource
 */
]","\android\provider\LiveFolders.java"
"DESCRIPTION","true","false","false","true","true","String","""description""","[]","Optional[/**
 * <p>Content provider column.</p>
 * <p>Description of the live folder item. This value is ignored if the
 * live folder's display mode is {@link LiveFolders#DISPLAY_MODE_GRID}.</p>
 * <p>Optional.</p>
 * <p>Type: String.</p>
 *
 * @see LiveFolders#EXTRA_LIVE_FOLDER_DISPLAY_MODE
 */
]","\android\provider\LiveFolders.java"
"EXTRA_LIVE_FOLDER_BASE_INTENT","true","false","false","true","true","String","""android.intent.extra.livefolder.BASE_INTENT""","[]","Optional[/**
 * The name of the extra used to define the base Intent of a live folder.
 *
 * @see #ACTION_CREATE_LIVE_FOLDER
 */
]","\android\provider\LiveFolders.java"
"ICON_RESOURCE","true","false","false","true","true","String","""icon_resource""","[]","Optional[/**
 * <p>Content provider column.</p>
 * <p>Resource name of the live folder item. This value can be obtained easily using
 * {@link android.content.Intent.ShortcutIconResource#fromContext(android.content.Context, int)}.</p>
 * <p>Optional.</p>
 * <p>Type: String.</p>
 *
 * @see #ICON_PACKAGE
 * @see android.content.Intent.ShortcutIconResource
 */
]","\android\provider\LiveFolders.java"
"NAME","true","false","false","true","true","String","""name""","[]","Optional[/**
 * <p>Content provider column.</p>
 * <p>Name of the live folder item.</p>
 * <p>Required.</p>
 * <p>Type: String.</p>
 */
]","\android\provider\LiveFolders.java"
"DISPLAY_MODE_GRID","true","false","false","true","true","int","0x1","[]","Optional[/**
 * Displays a live folder's content in a grid.
 *
 * @see LiveFolders#EXTRA_LIVE_FOLDER_DISPLAY_MODE
 */
]","\android\provider\LiveFolders.java"
"INTENT","true","false","false","true","true","String","""intent""","[]","Optional[/**
 * <p>Content provider column.</p>
 * <p>Intent of the live folder item.</p>
 * <p>Optional if the live folder has a base intent.</p>
 * <p>Type: {@link android.content.Intent}.</p>
 *
 * @see LiveFolders#EXTRA_LIVE_FOLDER_BASE_INTENT
 */
]","\android\provider\LiveFolders.java"
"ICON_BITMAP","true","false","false","true","true","String","""icon_bitmap""","[]","Optional[/**
 * <p>Content provider column.</p>
 * <p>Icon of the live folder item, as a custom bitmap.</p>
 * <p>Optional.</p>
 * <p>Type: {@link android.graphics.Bitmap}.</p>
 */
]","\android\provider\LiveFolders.java"
"EXTRA_LIVE_FOLDER_DISPLAY_MODE","true","false","false","true","true","String","""android.intent.extra.livefolder.DISPLAY_MODE""","[]","Optional[/**
 * The name of the extra used to define the display mode of a live folder.
 *
 * @see #ACTION_CREATE_LIVE_FOLDER
 * @see #DISPLAY_MODE_GRID
 * @see #DISPLAY_MODE_LIST
 */
]","\android\provider\LiveFolders.java"
"EXTRA_LIVE_FOLDER_ICON","true","false","false","true","true","String","""android.intent.extra.livefolder.ICON""","[]","Optional[/**
 * The name of the extra used to define the icon of a live folder.
 *
 * @see #ACTION_CREATE_LIVE_FOLDER
 */
]","\android\provider\LiveFolders.java"
"EXTRA_LIVE_FOLDER_NAME","true","false","false","true","true","String","""android.intent.extra.livefolder.NAME""","[]","Optional[/**
 * The name of the extra used to define the name of a live folder.
 *
 * @see #ACTION_CREATE_LIVE_FOLDER
 */
]","\android\provider\LiveFolders.java"
"CREATOR","true","false","false","true","true","Creator<PermissionGroupInfo>","new Creator<PermissionGroupInfo>() {

    public PermissionGroupInfo createFromParcel(Parcel source) {
        return new PermissionGroupInfo(source);
    }

    public PermissionGroupInfo[] newArray(int size) {
        return new PermissionGroupInfo[size];
    }
}","[]","Optional.empty","\android\content\pm\PermissionGroupInfo.java"
"nonLocalizedDescription","true","false","false","false","false","CharSequence","null","[]","Optional[/**
 * The description string provided in the AndroidManifest file, if any.  You
 * probably don't want to use this, since it will be null if the description
 * is in a resource.  You probably want
 * {@link PermissionInfo#loadDescription} instead.
 */
]","\android\content\pm\PermissionGroupInfo.java"
"descriptionRes","true","false","false","false","false","int","null","[]","Optional[/**
 * A string resource identifier (in the package's resources) of this
 * permission's description.  From the ""description"" attribute or,
 * if not set, 0.
 */
]","\android\content\pm\PermissionGroupInfo.java"
"mPW","false","false","true","false","true","PrintWriter","null","[]","Optional.empty","\android\util\PrintWriterPrinter.java"
"COLUMN_REFERER","true","false","false","true","true","String","""referer""","[]","Optional[/**
 * The name of the column containing the referer (sic) that the initiating
 * application wants the download manager to use for this download.
 * <P>Type: TEXT</P>
 * <P>Owner can Init</P>
 */
]","\android\provider\Downloads.java"
"DESTINATION_CACHE_PARTITION_NOROAMING","true","false","false","true","true","int","3","[]","Optional[/**
 * This download will be saved to the download manager's private
 * partition, as with DESTINATION_CACHE_PARTITION, but the download
 * will not proceed if the user is on a roaming data connection.
 */
]","\android\provider\Downloads.java"
"STATUS_LENGTH_REQUIRED","true","false","false","true","true","int","411","[]","Optional[/**
 * This download cannot be performed because the length cannot be
 * determined accurately. This is the code for the HTTP error ""Length
 * Required"", which is typically used when making requests that require
 * a content length but don't have one, and it is also used in the
 * client when a response is received whose length cannot be determined
 * accurately (therefore making it impossible to know when a download
 * completes).
 */
]","\android\provider\Downloads.java"
"ALL_DOWNLOADS_CONTENT_URI","true","false","false","true","true","Uri","Uri.parse(""content://downloads/all_downloads"")","[]","Optional[/**
 * The content URI for accessing all downloads across all UIDs (requires the
 * ACCESS_ALL_DOWNLOADS permission).
 */
]","\android\provider\Downloads.java"
"STATUS_FILE_ERROR","true","false","false","true","true","int","492","[]","Optional[/**
 * This download couldn't be completed because of a storage issue.
 * Typically, that's because the filesystem is missing or full.
 * Use the more specific {@link #STATUS_INSUFFICIENT_SPACE_ERROR}
 * and {@link #STATUS_DEVICE_NOT_FOUND_ERROR} when appropriate.
 */
]","\android\provider\Downloads.java"
"ACTION_NOTIFICATION_CLICKED","true","false","false","true","true","String","""android.intent.action.DOWNLOAD_NOTIFICATION_CLICKED""","[]","Optional[/**
 * Broadcast Action: this is sent by the download manager to the app
 * that had initiated a download when the user selects the notification
 * associated with that download. The download's content: uri is specified
 * in the intent's data if the click is associated with a single download,
 * or Downloads.CONTENT_URI if the notification is associated with
 * multiple downloads.
 * Note: this is not currently sent for downloads that have completed
 * successfully.
 */
]","\android\provider\Downloads.java"
"DESTINATION_EXTERNAL","true","false","false","true","true","int","0","[]","Optional[/**
 * This download will be saved to the external storage. This is the
 * default behavior, and should be used for any file that the user
 * can freely access, copy, delete. Even with that destination,
 * unencrypted DRM files are saved in secure internal storage.
 * Downloads to the external destination only write files for which
 * there is a registered handler. The resulting files are accessible
 * by filename to all applications.
 */
]","\android\provider\Downloads.java"
"COLUMN_FILE_NAME_HINT","true","false","false","true","true","String","""hint""","[]","Optional[/**
 * The name of the column containing the filename that the initiating
 * application recommends. When possible, the download manager will attempt
 * to use this filename, or a variation, as the actual name for the file.
 * <P>Type: TEXT</P>
 * <P>Owner can Init</P>
 */
]","\android\provider\Downloads.java"
"CONTROL_RUN","true","false","false","true","true","int","0","[]","Optional[/**
 * This download is allowed to run.
 */
]","\android\provider\Downloads.java"
"COLUMN_TITLE","true","false","false","true","true","String","""title""","[]","Optional[/**
 * The name of the column where the initiating application can provided the
 * title of this download. The title will be displayed ito the user in the
 * list of downloads.
 * <P>Type: TEXT</P>
 * <P>Owner can Init/Read/Write</P>
 */
]","\android\provider\Downloads.java"
"COLUMN_HEADER","true","false","false","true","true","String","""header""","[]","Optional.empty","\android\provider\Downloads.java"
"STATUS_TOO_MANY_REDIRECTS","true","false","false","true","true","int","497","[]","Optional[/**
 * This download couldn't be completed because there were
 * too many redirects.
 */
]","\android\provider\Downloads.java"
"STATUS_PENDING","true","false","false","true","true","int","190","[]","Optional[/**
 * This download hasn't stated yet
 */
]","\android\provider\Downloads.java"
"COLUMN_IS_VISIBLE_IN_DOWNLOADS_UI","true","false","false","true","true","String","""is_visible_in_downloads_ui""","[]","Optional[/**
 * Whether or not this download should be displayed in the system's Downloads UI.  Defaults
 * to true.
 * <P>Type: INTEGER</P>
 * <P>Owner can Init/Read</P>
 */
]","\android\provider\Downloads.java"
"STATUS_INSUFFICIENT_SPACE_ERROR","true","false","false","true","true","int","498","[]","Optional[/**
 * This download couldn't be completed due to insufficient storage
 * space.  Typically, this is because the SD card is full.
 */
]","\android\provider\Downloads.java"
"STATUS_UNHANDLED_HTTP_CODE","true","false","false","true","true","int","494","[]","Optional[/**
 * This download couldn't be completed because of an
 * unspecified unhandled HTTP code.
 */
]","\android\provider\Downloads.java"
"COLUMN_OTHER_UID","true","false","false","true","true","String","""otheruid""","[]","Optional[/**
 * The name of the column where the initiating application can provide the
 * UID of another application that is allowed to access this download. If
 * multiple applications share the same UID, all those applications will be
 * allowed to access this download. This column can be updated after the
 * download is initiated. This requires the permission
 * android.permission.ACCESS_DOWNLOAD_MANAGER_ADVANCED.
 * <P>Type: INTEGER</P>
 * <P>Owner can Init</P>
 */
]","\android\provider\Downloads.java"
"COLUMN_MIME_TYPE","true","false","false","true","true","String","""mimetype""","[]","Optional[/**
 * The name of the column containing the MIME type of the downloaded data.
 * <P>Type: TEXT</P>
 * <P>Owner can Init/Read</P>
 */
]","\android\provider\Downloads.java"
"COLUMN_CONTROL","true","false","false","true","true","String","""control""","[]","Optional[/**
 * The name of the column containing the current control state  of the download.
 * Applications can write to this to control (pause/resume) the download.
 * the CONTROL_* constants for a list of legal values.
 * <P>Type: INTEGER</P>
 * <P>Owner can Read</P>
 */
]","\android\provider\Downloads.java"
"MIN_ARTIFICIAL_ERROR_STATUS","true","false","false","true","true","int","488","[]","Optional[/**
 * The lowest-valued error status that is not an actual HTTP status code.
 */
]","\android\provider\Downloads.java"
"DESTINATION_CACHE_PARTITION","true","false","false","true","true","int","1","[]","Optional[/**
 * This download will be saved to the download manager's private
 * partition. This is the behavior used by applications that want to
 * download private files that are used and deleted soon after they
 * get downloaded. All file types are allowed, and only the initiating
 * application can access the file (indirectly through a content
 * provider). This requires the
 * android.permission.ACCESS_DOWNLOAD_MANAGER_ADVANCED permission.
 */
]","\android\provider\Downloads.java"
"STATUS_CANNOT_RESUME","true","false","false","true","true","int","489","[]","Optional[/**
 * Some possibly transient error occurred, but we can't resume the download.
 */
]","\android\provider\Downloads.java"
"COLUMN_COOKIE_DATA","true","false","false","true","true","String","""cookiedata""","[]","Optional[/**
 * The name of the column contain the values of the cookie to be used for
 * the download. This is used directly as the value for the Cookie: HTTP
 * header that gets sent with the request.
 * <P>Type: TEXT</P>
 * <P>Owner can Init</P>
 */
]","\android\provider\Downloads.java"
"ACTION_DOWNLOAD_COMPLETED","true","false","false","true","true","String","""android.intent.action.DOWNLOAD_COMPLETED""","[]","Optional[/**
 * Broadcast Action: this is sent by the download manager to the app
 * that had initiated a download when that download completes. The
 * download's content: uri is specified in the intent's data.
 */
]","\android\provider\Downloads.java"
"DESTINATION_FILE_URI","true","false","false","true","true","int","4","[]","Optional[/**
 * This download will be saved to the location given by the file URI in
 * {@link #COLUMN_FILE_NAME_HINT}.
 */
]","\android\provider\Downloads.java"
"COLUMN_NOTIFICATION_EXTRAS","true","false","false","true","true","String","""notificationextras""","[]","Optional[/**
 * If extras are specified when requesting a download they will be provided in the intent that
 * is sent to the specified class and package when a download has finished.
 * <P>Type: TEXT</P>
 * <P>Owner can Init</P>
 */
]","\android\provider\Downloads.java"
"STATUS_CANCELED","true","false","false","true","true","int","490","[]","Optional[/**
 * This download was canceled
 */
]","\android\provider\Downloads.java"
"COLUMN_BYPASS_RECOMMENDED_SIZE_LIMIT","true","false","false","true","true","String","""bypass_recommended_size_limit""","[]","Optional[/**
 * If true, the user has confirmed that this download can proceed over the mobile network
 * even though it exceeds the recommended maximum size.
 * <P>Type: BOOLEAN</P>
 */
]","\android\provider\Downloads.java"
"COLUMN_ALLOWED_NETWORK_TYPES","true","false","false","true","true","String","""allowed_network_types""","[]","Optional[/**
 * The name of the column holding a bitmask of allowed network types.  This is only used for
 * public API downloads.
 * <P>Type: INTEGER</P>
 * <P>Owner can Init/Read</P>
 */
]","\android\provider\Downloads.java"
"COLUMN_DOWNLOAD_ID","true","false","false","true","true","String","""download_id""","[]","Optional.empty","\android\provider\Downloads.java"
"COLUMN_APP_DATA","true","false","false","true","true","String","""entity""","[]","Optional[/**
 * The name of the column containing application-specific data.
 * <P>Type: TEXT</P>
 * <P>Owner can Init/Read/Write</P>
 */
]","\android\provider\Downloads.java"
"STATUS_UNHANDLED_REDIRECT","true","false","false","true","true","int","493","[]","Optional[/**
 * This download couldn't be completed because of an HTTP
 * redirect response that the download manager couldn't
 * handle.
 */
]","\android\provider\Downloads.java"
"PERMISSION_ACCESS_ALL","true","false","false","true","true","String","""android.permission.ACCESS_ALL_DOWNLOADS""","[]","Optional[/**
 * The permission to access the all the downloads in the manager.
 */
]","\android\provider\Downloads.java"
"COLUMN_LAST_MODIFICATION","true","false","false","true","true","String","""lastmod""","[]","Optional[/**
 * The name of the column containing the date at which some interesting
 * status changed in the download. Stored as a System.currentTimeMillis()
 * value.
 * <P>Type: BIGINT</P>
 * <P>Owner can Read</P>
 */
]","\android\provider\Downloads.java"
"COLUMN_DELETED","true","false","false","true","true","String","""deleted""","[]","Optional[/**
 * Set to true if this download is deleted. It is completely removed from the database
 * when MediaProvider database also deletes the metadata asociated with this downloaded file.
 * <P>Type: BOOLEAN</P>
 * <P>Owner can Read</P>
 */
]","\android\provider\Downloads.java"
"STATUS_FILE_ALREADY_EXISTS_ERROR","true","false","false","true","true","int","488","[]","Optional[/**
 * The requested destination file already exists.
 */
]","\android\provider\Downloads.java"
"COLUMN_VISIBILITY","true","false","false","true","true","String","""visibility""","[]","Optional[/**
 * The name of the column containing the flags that controls whether the
 * download is displayed by the UI. See the VISIBILITY_* constants for
 * a list of legal values.
 * <P>Type: INTEGER</P>
 * <P>Owner can Init/Read/Write</P>
 */
]","\android\provider\Downloads.java"
"COLUMN_NOTIFICATION_PACKAGE","true","false","false","true","true","String","""notificationpackage""","[]","Optional[/**
 * The name of the column containing the package name of the application
 * that initiating the download. The download manager will send
 * notifications to a component in this package when the download completes.
 * <P>Type: TEXT</P>
 * <P>Owner can Init/Read</P>
 */
]","\android\provider\Downloads.java"
"STATUS_BAD_REQUEST","true","false","false","true","true","int","400","[]","Optional[/**
 * This request couldn't be parsed. This is also used when processing
 * requests with unknown/unsupported URI schemes.
 */
]","\android\provider\Downloads.java"
"URI_SEGMENT","true","false","false","true","true","String","""headers""","[]","Optional[/**
 * Path segment to add to a download URI to retrieve request headers
 */
]","\android\provider\Downloads.java"
"COLUMN_TOTAL_BYTES","true","false","false","true","true","String","""total_bytes""","[]","Optional[/**
 * The name of the column containing the total size of the file being
 * downloaded.
 * <P>Type: INTEGER</P>
 * <P>Owner can Read</P>
 */
]","\android\provider\Downloads.java"
"STATUS_UNKNOWN_ERROR","true","false","false","true","true","int","491","[]","Optional[/**
 * This download has completed with an error.
 * Warning: there will be other status values that indicate errors in
 * the future. Use isStatusError() to capture the entire category.
 */
]","\android\provider\Downloads.java"
"STATUS_QUEUED_FOR_WIFI","true","false","false","true","true","int","196","[]","Optional[/**
 * This download exceeded a size limit for mobile networks and is waiting for a Wi-Fi
 * connection to proceed.
 */
]","\android\provider\Downloads.java"
"VISIBILITY_VISIBLE","true","false","false","true","true","int","0","[]","Optional[/**
 * This download is visible but only shows in the notifications
 * while it's in progress.
 */
]","\android\provider\Downloads.java"
"VISIBILITY_HIDDEN","true","false","false","true","true","int","2","[]","Optional[/**
 * This download doesn't show in the UI or in the notifications.
 */
]","\android\provider\Downloads.java"
"DESTINATION_CACHE_PARTITION_PURGEABLE","true","false","false","true","true","int","2","[]","Optional[/**
 * This download will be saved to the download manager's private
 * partition and will be purged as necessary to make space. This is
 * for private files (similar to CACHE_PARTITION) that aren't deleted
 * immediately after they are used, and are kept around by the download
 * manager as long as space is available.
 */
]","\android\provider\Downloads.java"
"INSERT_KEY_PREFIX","true","false","false","true","true","String","""http_header_""","[]","Optional[/**
 * Prefix for ContentValues keys that contain HTTP header lines, to be passed to
 * DownloadProvider.insert().
 */
]","\android\provider\Downloads.java"
"PERMISSION_CACHE","true","false","false","true","true","String","""android.permission.ACCESS_CACHE_FILESYSTEM""","[]","Optional[/**
 * The permission to directly access the download manager's cache
 * directory
 */
]","\android\provider\Downloads.java"
"VISIBILITY_VISIBLE_NOTIFY_COMPLETED","true","false","false","true","true","int","1","[]","Optional[/**
 * This download is visible and shows in the notifications while
 * in progress and after completion.
 */
]","\android\provider\Downloads.java"
"PERMISSION_ACCESS_ADVANCED","true","false","false","true","true","String","""android.permission.ACCESS_DOWNLOAD_MANAGER_ADVANCED""","[]","Optional[/**
 * The permission to access the download manager's advanced functions
 */
]","\android\provider\Downloads.java"
"COLUMN_IS_PUBLIC_API","true","false","false","true","true","String","""is_public_api""","[]","Optional[/**
 * The name of the column indicating whether the download was requesting through the public
 * API.  This controls some differences in behavior.
 * <P>Type: BOOLEAN</P>
 * <P>Owner can Init/Read</P>
 */
]","\android\provider\Downloads.java"
"STATUS_SUCCESS","true","false","false","true","true","int","200","[]","Optional[/**
 * This download has successfully completed.
 * Warning: there might be other status values that indicate success
 * in the future.
 * Use isSucccess() to capture the entire category.
 */
]","\android\provider\Downloads.java"
"STATUS_RUNNING","true","false","false","true","true","int","192","[]","Optional[/**
 * This download has started
 */
]","\android\provider\Downloads.java"
"COLUMN_MEDIAPROVIDER_URI","true","false","false","true","true","String","""mediaprovider_uri""","[]","Optional[/**
 * The URI to the corresponding entry in MediaProvider for this downloaded entry. It is
 * used to delete the entries from MediaProvider database when it is deleted from the
 * downloaded list.
 * <P>Type: TEXT</P>
 * <P>Owner can Read</P>
 */
]","\android\provider\Downloads.java"
"COLUMN_VALUE","true","false","false","true","true","String","""value""","[]","Optional.empty","\android\provider\Downloads.java"
"CONTENT_URI","true","false","false","true","true","Uri","Uri.parse(""content://downloads/my_downloads"")","[]","Optional[/**
 * The content:// URI to access downloads owned by the caller's UID.
 */
]","\android\provider\Downloads.java"
"COLUMN_NOTIFICATION_CLASS","true","false","false","true","true","String","""notificationclass""","[]","Optional[/**
 * The name of the column containing the component name of the class that
 * will receive notifications associated with the download. The
 * package/class combination is passed to
 * Intent.setClassName(String,String).
 * <P>Type: TEXT</P>
 * <P>Owner can Init/Read</P>
 */
]","\android\provider\Downloads.java"
"STATUS_DEVICE_NOT_FOUND_ERROR","true","false","false","true","true","int","499","[]","Optional[/**
 * This download couldn't be completed because no external storage
 * device was found.  Typically, this is because the SD card is not
 * mounted.
 */
]","\android\provider\Downloads.java"
"STATUS_WAITING_TO_RETRY","true","false","false","true","true","int","194","[]","Optional[/**
 * This download encountered some network error and is waiting before retrying the request.
 */
]","\android\provider\Downloads.java"
"COLUMN_NO_INTEGRITY","true","false","false","true","true","String","""no_integrity""","[]","Optional[/**
 * The name of the column containing the flags that indicates whether
 * the initiating application is capable of verifying the integrity of
 * the downloaded file. When this flag is set, the download manager
 * performs downloads and reports success even in some situations where
 * it can't guarantee that the download has completed (e.g. when doing
 * a byte-range request without an ETag, or when it can't determine
 * whether a download fully completed).
 * <P>Type: BOOLEAN</P>
 * <P>Owner can Init</P>
 */
]","\android\provider\Downloads.java"
"PERMISSION_SEND_INTENTS","true","false","false","true","true","String","""android.permission.SEND_DOWNLOAD_COMPLETED_INTENTS""","[]","Optional[/**
 * The permission to send broadcasts on download completion
 */
]","\android\provider\Downloads.java"
"COLUMN_CURRENT_BYTES","true","false","false","true","true","String","""current_bytes""","[]","Optional[/**
 * The name of the column containing the size of the part of the file that
 * has been downloaded so far.
 * <P>Type: INTEGER</P>
 * <P>Owner can Read</P>
 */
]","\android\provider\Downloads.java"
"PERMISSION_ACCESS","true","false","false","true","true","String","""android.permission.ACCESS_DOWNLOAD_MANAGER""","[]","Optional[/**
 * The permission to access the download manager
 */
]","\android\provider\Downloads.java"
"COLUMN_USER_AGENT","true","false","false","true","true","String","""useragent""","[]","Optional[/**
 * The name of the column containing the user agent that the initiating
 * application wants the download manager to use for this download.
 * <P>Type: TEXT</P>
 * <P>Owner can Init</P>
 */
]","\android\provider\Downloads.java"
"STATUS_HTTP_DATA_ERROR","true","false","false","true","true","int","495","[]","Optional[/**
 * This download couldn't be completed because of an
 * error receiving or processing data at the HTTP level.
 */
]","\android\provider\Downloads.java"
"STATUS_PAUSED_BY_APP","true","false","false","true","true","int","193","[]","Optional[/**
 * This download has been paused by the owning app.
 */
]","\android\provider\Downloads.java"
"STATUS_WAITING_FOR_NETWORK","true","false","false","true","true","int","195","[]","Optional[/**
 * This download is waiting for network connectivity to proceed.
 */
]","\android\provider\Downloads.java"
"COLUMN_URI","true","false","false","true","true","String","""uri""","[]","Optional[/**
 * The name of the column containing the URI of the data being downloaded.
 * <P>Type: TEXT</P>
 * <P>Owner can Init/Read</P>
 */
]","\android\provider\Downloads.java"
"COLUMN_STATUS","true","false","false","true","true","String","""status""","[]","Optional[/**
 * The name of the column containing the current status of the download.
 * Applications can read this to follow the progress of each download. See
 * the STATUS_* constants for a list of legal values.
 * <P>Type: INTEGER</P>
 * <P>Owner can Read</P>
 */
]","\android\provider\Downloads.java"
"STATUS_HTTP_EXCEPTION","true","false","false","true","true","int","496","[]","Optional[/**
 * This download couldn't be completed because of an
 * HttpException while setting up the request.
 */
]","\android\provider\Downloads.java"
"CONTROL_PAUSED","true","false","false","true","true","int","1","[]","Optional[/**
 * This download must pause at the first opportunity.
 */
]","\android\provider\Downloads.java"
"COLUMN_DESCRIPTION","true","false","false","true","true","String","""description""","[]","Optional[/**
 * The name of the column where the initiating application can provide the
 * description of this download. The description will be displayed to the
 * user in the list of downloads.
 * <P>Type: TEXT</P>
 * <P>Owner can Init/Read/Write</P>
 */
]","\android\provider\Downloads.java"
"STATUS_NOT_ACCEPTABLE","true","false","false","true","true","int","406","[]","Optional[/**
 * This download can't be performed because the content type cannot be
 * handled.
 */
]","\android\provider\Downloads.java"
"STATUS_PRECONDITION_FAILED","true","false","false","true","true","int","412","[]","Optional[/**
 * This download was interrupted and cannot be resumed.
 * This is the code for the HTTP error ""Precondition Failed"", and it is
 * also used in situations where the client doesn't have an ETag at all.
 */
]","\android\provider\Downloads.java"
"PERMISSION_NO_NOTIFICATION","true","false","false","true","true","String","""android.permission.DOWNLOAD_WITHOUT_NOTIFICATION""","[]","Optional[/**
 * The permission to download files without any system notification being shown.
 */
]","\android\provider\Downloads.java"
"HEADERS_DB_TABLE","true","false","false","true","true","String","""request_headers""","[]","Optional.empty","\android\provider\Downloads.java"
"_DATA","true","false","false","true","true","String","""_data""","[]","Optional[/**
 * The name of the column containing the filename where the downloaded data
 * was actually stored.
 * <P>Type: TEXT</P>
 * <P>Owner can Read</P>
 */
]","\android\provider\Downloads.java"
"COLUMN_DESTINATION","true","false","false","true","true","String","""destination""","[]","Optional[/**
 * The name of the column containing the flag that controls the destination
 * of the download. See the DESTINATION_* constants for a list of legal values.
 * <P>Type: INTEGER</P>
 * <P>Owner can Init</P>
 */
]","\android\provider\Downloads.java"
"COLUMN_ALLOW_ROAMING","true","false","false","true","true","String","""allow_roaming""","[]","Optional[/**
 * The name of the column indicating whether roaming connections can be used.  This is only
 * used for public API downloads.
 * <P>Type: BOOLEAN</P>
 * <P>Owner can Init/Read</P>
 */
]","\android\provider\Downloads.java"
"PERMISSION_CACHE_NON_PURGEABLE","true","false","false","true","true","String","""android.permission.DOWNLOAD_CACHE_NON_PURGEABLE""","[]","Optional[/**
 * The permission to download files to the cache partition that won't be automatically
 * purged when space is needed.
 */
]","\android\provider\Downloads.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<NdefMessage>","new Parcelable.Creator<NdefMessage>() {

    @Override
    public NdefMessage createFromParcel(Parcel in) {
        int recordsLength = in.readInt();
        NdefRecord[] records = new NdefRecord[recordsLength];
        in.readTypedArray(records, NdefRecord.CREATOR);
        return new NdefMessage(records);
    }

    @Override
    public NdefMessage[] newArray(int size) {
        return new NdefMessage[size];
    }
}","[]","Optional.empty","\android\nfc\NdefMessage.java"
"FLAG_ME","false","false","true","true","true","byte","(byte) 0x40","[]","Optional.empty","\android\nfc\NdefMessage.java"
"FLAG_MB","false","false","true","true","true","byte","(byte) 0x80","[]","Optional.empty","\android\nfc\NdefMessage.java"
"mRecords","false","false","true","false","true","NdefRecord","null","[]","Optional.empty","\android\nfc\NdefMessage.java"
"mNativeBridge","false","false","true","false","false","int","null","[]","Optional[// Native object pointer for interacting in native code.
]","\android\webkit\JWebCoreJavaBridge.java"
"mPauseTimerRefCount","false","false","true","false","false","int","null","[]","Optional[// Reference count the pause/resume of timers
]","\android\webkit\JWebCoreJavaBridge.java"
"sCurrentMainWebView","false","false","true","true","false","WeakReference<WebView>","new WeakReference<WebView>(null)","[]","Optional[// can get the proper Context.
]","\android\webkit\JWebCoreJavaBridge.java"
"REFRESH_PLUGINS","false","false","false","true","true","int","100","[]","Optional[/* package */
]","\android\webkit\JWebCoreJavaBridge.java"
"mHasDeferredTimers","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\webkit\JWebCoreJavaBridge.java"
"mTimerPaused","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\webkit\JWebCoreJavaBridge.java"
"TIMER_MESSAGE","false","false","true","true","true","int","1","[]","Optional[// Identifier for the timer message.
]","\android\webkit\JWebCoreJavaBridge.java"
"mHasInstantTimer","false","false","true","false","false","boolean","null","[]","Optional[// immediately.
]","\android\webkit\JWebCoreJavaBridge.java"
"FUNCPTR_MESSAGE","false","false","true","true","true","int","2","[]","Optional[// ID for servicing functionptr queue
]","\android\webkit\JWebCoreJavaBridge.java"
"LOGTAG","false","false","true","true","true","String","""webkit-timers""","[]","Optional[// Log system identifier.
]","\android\webkit\JWebCoreJavaBridge.java"
"mCardState","false","false","true","false","true","int","null","[]","Optional.empty","\android\nfc\tech\Ndef.java"
"TYPE_3","true","false","false","true","true","int","3","[]","Optional[/**
 * @hide
 */
]","\android\nfc\tech\Ndef.java"
"TYPE_4","true","false","false","true","true","int","4","[]","Optional[/**
 * @hide
 */
]","\android\nfc\tech\Ndef.java"
"TYPE_1","true","false","false","true","true","int","1","[]","Optional[/**
 * @hide
 */
]","\android\nfc\tech\Ndef.java"
"TYPE_2","true","false","false","true","true","int","2","[]","Optional[/**
 * @hide
 */
]","\android\nfc\tech\Ndef.java"
"NDEF_MODE_READ_WRITE","true","false","false","true","true","int","2","[]","Optional[/**
 * @hide
 */
]","\android\nfc\tech\Ndef.java"
"mNdefMsg","false","false","true","false","true","NdefMessage","null","[]","Optional.empty","\android\nfc\tech\Ndef.java"
"NDEF_MODE_UNKNOWN","true","false","false","true","true","int","3","[]","Optional[/**
 * @hide
 */
]","\android\nfc\tech\Ndef.java"
"TYPE_MIFARE_CLASSIC","true","false","false","true","true","int","101","[]","Optional[/**
 * @hide
 */
]","\android\nfc\tech\Ndef.java"
"MIFARE_CLASSIC","true","false","false","true","true","String","""com.nxp.ndef.mifareclassic""","[]","Optional.empty","\android\nfc\tech\Ndef.java"
"EXTRA_NDEF_TYPE","true","false","false","true","true","String","""ndeftype""","[]","Optional[/**
 * @hide
 */
]","\android\nfc\tech\Ndef.java"
"TYPE_OTHER","true","false","false","true","true","int","-1","[]","Optional[/**
 * @hide
 */
]","\android\nfc\tech\Ndef.java"
"EXTRA_NDEF_MAXLENGTH","true","false","false","true","true","String","""ndefmaxlength""","[]","Optional[/**
 * @hide
 */
]","\android\nfc\tech\Ndef.java"
"TAG","false","false","true","true","true","String","""NFC""","[]","Optional.empty","\android\nfc\tech\Ndef.java"
"NFC_FORUM_TYPE_1","true","false","false","true","true","String","""org.nfcforum.ndef.type1""","[]","Optional.empty","\android\nfc\tech\Ndef.java"
"NFC_FORUM_TYPE_2","true","false","false","true","true","String","""org.nfcforum.ndef.type2""","[]","Optional.empty","\android\nfc\tech\Ndef.java"
"EXTRA_NDEF_MSG","true","false","false","true","true","String","""ndefmsg""","[]","Optional[/**
 * @hide
 */
]","\android\nfc\tech\Ndef.java"
"NFC_FORUM_TYPE_3","true","false","false","true","true","String","""org.nfcforum.ndef.type3""","[]","Optional.empty","\android\nfc\tech\Ndef.java"
"NFC_FORUM_TYPE_4","true","false","false","true","true","String","""org.nfcforum.ndef.type4""","[]","Optional.empty","\android\nfc\tech\Ndef.java"
"mMaxNdefSize","false","false","true","false","true","int","null","[]","Optional.empty","\android\nfc\tech\Ndef.java"
"EXTRA_NDEF_CARDSTATE","true","false","false","true","true","String","""ndefcardstate""","[]","Optional[/**
 * @hide
 */
]","\android\nfc\tech\Ndef.java"
"mNdefType","false","false","true","false","true","int","null","[]","Optional.empty","\android\nfc\tech\Ndef.java"
"NDEF_MODE_READ_ONLY","true","false","false","true","true","int","1","[]","Optional[/**
 * @hide
 */
]","\android\nfc\tech\Ndef.java"
"UNKNOWN","true","false","false","true","true","String","""android.ndef.unknown""","[]","Optional[/**
 * @hide
 */
]","\android\nfc\tech\Ndef.java"
"SUGGEST_COLUMN_FORMAT","true","false","false","true","true","String","""suggest_format""","[]","Optional[/**
 * Column name for suggestions cursor.  <i>Unused - can be null or column can be omitted.</i>
 */
]","\android\app\SearchManager.java"
"CONTEXT_IS_VOICE","true","false","false","true","true","String","""android.search.CONTEXT_IS_VOICE""","[]","Optional[/**
 * This means that context is voice, and therefore the SearchDialog should
 * continue showing the microphone until the user indicates that he/she does
 * not want to re-speak (e.g. by typing).
 *
 * @hide
 */
]","\android\app\SearchManager.java"
"QUERY","true","false","false","true","true","String","""query""","[]","Optional[/**
 * Intent extra data key: Use this key with
 * {@link android.content.Intent#getStringExtra
 * content.Intent.getStringExtra()}
 * to obtain the query string from Intent.ACTION_SEARCH.
 */
]","\android\app\SearchManager.java"
"SEARCH_MODE","true","false","false","true","true","String","""search_mode""","[]","Optional[/**
 * Intent extra data key: Use {@link android.content.Intent#getBundleExtra
 * content.Intent.getBundleExtra(SEARCH_MODE)} to get the search mode used
 * to launch the intent.
 * The only current value for this is {@link #MODE_GLOBAL_SEARCH_SUGGESTION}.
 *
 * @hide
 */
]","\android\app\SearchManager.java"
"SUGGEST_PARAMETER_LIMIT","true","false","false","true","true","String","""limit""","[]","Optional[/**
 * Query parameter added to suggestion queries to limit the number of suggestions returned.
 * This limit is only advisory and suggestion providers may chose to ignore it.
 */
]","\android\app\SearchManager.java"
"MENU_KEYCODE","true","false","false","true","true","int","KeyEvent.KEYCODE_S","[]","Optional[/**
 * This is a shortcut definition for the default menu key to use for invoking search.
 *
 * See Menu.Item.setAlphabeticShortcut() for more information.
 */
]","\android\app\SearchManager.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\android\app\SearchManager.java"
"SUGGEST_COLUMN_INTENT_DATA_ID","true","false","false","true","true","String","""suggest_intent_data_id""","[]","Optional[/**
 * Column name for suggestions cursor.  <i>Optional.</i>  If this column exists <i>and</i>
 * this element exists at the given row, then ""/"" and this value will be appended to the data
 * field in the Intent.  This should only be used if the data field has already been set to an
 * appropriate base string.
 */
]","\android\app\SearchManager.java"
"SUGGEST_COLUMN_INTENT_ACTION","true","false","false","true","true","String","""suggest_intent_action""","[]","Optional[/**
 * Column name for suggestions cursor.  <i>Optional.</i>  If this column exists <i>and</i>
 * this element exists at the given row, this is the action that will be used when
 * forming the suggestion's intent.  If the element is not provided, the action will be taken
 * from the android:searchSuggestIntentAction field in your XML metadata.  <i>At least one of
 * these must be present for the suggestion to generate an intent.</i>  Note:  If your action is
 * the same for all suggestions, it is more efficient to specify it using XML metadata and omit
 * it from the cursor.
 */
]","\android\app\SearchManager.java"
"SUGGEST_COLUMN_TEXT_2_URL","true","false","false","true","true","String","""suggest_text_2_url""","[]","Optional[/**
 * Column name for suggestions cursor.  <i>Optional.</i> This is a URL that will be shown
 * as the second line of text instead of {@link #SUGGEST_COLUMN_TEXT_2}. This is a separate
 * column so that the search UI knows to display the text as a URL, e.g. by using a different
 * color. If this column is absent, or has the value {@code null},
 * {@link #SUGGEST_COLUMN_TEXT_2} will be used instead.
 */
]","\android\app\SearchManager.java"
"SUGGEST_MIME_TYPE","true","false","false","true","true","String","""vnd.android.cursor.dir/vnd.android.search.suggest""","[]","Optional[/**
 * MIME type for suggestions data.  You'll use this in your suggestions content provider
 * in the getType() function.
 */
]","\android\app\SearchManager.java"
"mAssociatedPackage","false","false","true","false","false","String","null","[]","Optional[/**
 * The package associated with this seach manager.
 */
]","\android\app\SearchManager.java"
"ACTION_MSG","true","false","false","true","true","String","""action_msg""","[]","Optional[/**
 * Intent extra data key: Use this key with Intent.ACTION_SEARCH and
 * {@link android.content.Intent#getStringExtra content.Intent.getStringExtra()}
 * to obtain the action message that was defined for a particular search action key and/or
 * suggestion.  It will be null if the search was launched by typing ""enter"", touched the the
 * ""GO"" button, or other means not involving any action key.
 */
]","\android\app\SearchManager.java"
"SUGGEST_COLUMN_INTENT_COMPONENT_NAME","true","false","false","true","true","String","""suggest_intent_component""","[]","Optional[/**
 * TODO: Remove
 *
 * @hide
 */
]","\android\app\SearchManager.java"
"SUGGEST_COLUMN_ICON_2","true","false","false","true","true","String","""suggest_icon_2""","[]","Optional[/**
 * Column name for suggestions cursor.  <i>Optional.</i>  If your cursor includes this column,
 * then all suggestions will be provided in a format that includes space for two small icons,
 * one at the left and one at the right of each suggestion.  The data in the column must
 * be a resource ID of a drawable, or a URI in one of the following formats:
 *
 * <ul>
 * <li>content ({@link android.content.ContentResolver#SCHEME_CONTENT})</li>
 * <li>android.resource ({@link android.content.ContentResolver#SCHEME_ANDROID_RESOURCE})</li>
 * <li>file ({@link android.content.ContentResolver#SCHEME_FILE})</li>
 * </ul>
 *
 * See {@link android.content.ContentResolver#openAssetFileDescriptor(Uri, String)}
 * for more information on these schemes.
 */
]","\android\app\SearchManager.java"
"SUGGEST_COLUMN_ICON_1","true","false","false","true","true","String","""suggest_icon_1""","[]","Optional[/**
 * Column name for suggestions cursor.  <i>Optional.</i>  If your cursor includes this column,
 * then all suggestions will be provided in a format that includes space for two small icons,
 * one at the left and one at the right of each suggestion.  The data in the column must
 * be a resource ID of a drawable, or a URI in one of the following formats:
 *
 * <ul>
 * <li>content ({@link android.content.ContentResolver#SCHEME_CONTENT})</li>
 * <li>android.resource ({@link android.content.ContentResolver#SCHEME_ANDROID_RESOURCE})</li>
 * <li>file ({@link android.content.ContentResolver#SCHEME_FILE})</li>
 * </ul>
 *
 * See {@link android.content.ContentResolver#openAssetFileDescriptor(Uri, String)}
 * for more information on these schemes.
 */
]","\android\app\SearchManager.java"
"mSearchDialog","false","false","true","false","false","SearchDialog","null","[]","Optional.empty","\android\app\SearchManager.java"
"SUGGEST_COLUMN_SHORTCUT_ID","true","false","false","true","true","String","""suggest_shortcut_id""","[]","Optional[/**
 * Column name for suggestions cursor. <i>Optional.</i>  This column is used to indicate whether
 * a search suggestion should be stored as a shortcut, and whether it should be refreshed.  If
 * missing, the result will be stored as a shortcut and never validated.  If set to
 * {@link #SUGGEST_NEVER_MAKE_SHORTCUT}, the result will not be stored as a shortcut.
 * Otherwise, the shortcut id will be used to check back for an up to date suggestion using
 * {@link #SUGGEST_URI_PATH_SHORTCUT}.
 */
]","\android\app\SearchManager.java"
"mCancelListener","false","false","false","false","false","OnCancelListener","null","[]","Optional[/* package */
]","\android\app\SearchManager.java"
"APP_DATA","true","false","false","true","true","String","""app_data""","[]","Optional[/**
 * Intent extra data key: Use this key with Intent.ACTION_SEARCH and
 * {@link android.content.Intent#getBundleExtra
 * content.Intent.getBundleExtra()}
 * to obtain any additional app-specific data that was inserted by the
 * activity that launched the search.
 */
]","\android\app\SearchManager.java"
"SUGGEST_URI_PATH_QUERY","true","false","false","true","true","String","""search_suggest_query""","[]","Optional[/**
 * Uri path for queried suggestions data.  This is the path that the search manager
 * will use when querying your content provider for suggestions data based on user input
 * (e.g. looking for partial matches).
 * Typically you'll use this with a URI matcher.
 */
]","\android\app\SearchManager.java"
"INTENT_ACTION_SEARCH_SETTINGS","true","false","false","true","true","String","""android.search.action.SEARCH_SETTINGS""","[]","Optional[/**
 * Intent action for starting the global search settings activity.
 * The global search provider should handle this intent.
 */
]","\android\app\SearchManager.java"
"INTENT_ACTION_SEARCHABLES_CHANGED","true","false","false","true","true","String","""android.search.action.SEARCHABLES_CHANGED""","[]","Optional[/**
 * Intent action broadcasted to inform that the searchables list or default have changed.
 * Components should handle this intent if they cache any searchable data and wish to stay
 * up to date on changes.
 */
]","\android\app\SearchManager.java"
"INTENT_ACTION_WEB_SEARCH_SETTINGS","true","false","false","true","true","String","""android.search.action.WEB_SEARCH_SETTINGS""","[]","Optional[/**
 * Intent action for starting a web search provider's settings activity.
 * Web search providers should handle this intent if they have provider-specific
 * settings to implement.
 */
]","\android\app\SearchManager.java"
"INTENT_ACTION_NONE","true","false","false","true","true","String","""android.search.action.ZILCH""","[]","Optional[/**
 * If a suggestion has this value in {@link #SUGGEST_COLUMN_INTENT_ACTION},
 * the search dialog will take no action.
 *
 * @hide
 */
]","\android\app\SearchManager.java"
"SUGGEST_COLUMN_INTENT_DATA","true","false","false","true","true","String","""suggest_intent_data""","[]","Optional[/**
 * Column name for suggestions cursor.  <i>Optional.</i>  If this column exists <i>and</i>
 * this element exists at the given row, this is the data that will be used when
 * forming the suggestion's intent.  If the element is not provided, the data will be taken
 * from the android:searchSuggestIntentData field in your XML metadata.  If neither source
 * is provided, the Intent's data field will be null.  Note:  If your data is
 * the same for all suggestions, or can be described using a constant part and a specific ID,
 * it is more efficient to specify it using XML metadata and omit it from the cursor.
 */
]","\android\app\SearchManager.java"
"SUGGEST_COLUMN_SPINNER_WHILE_REFRESHING","true","false","false","true","true","String","""suggest_spinner_while_refreshing""","[]","Optional[/**
 * Column name for suggestions cursor. <i>Optional.</i> This column is used to specify
 * that a spinner should be shown in lieu of an icon2 while the shortcut of this suggestion
 * is being refreshed.
 */
]","\android\app\SearchManager.java"
"mDismissListener","false","false","false","false","false","OnDismissListener","null","[]","Optional[/* package */
]","\android\app\SearchManager.java"
"SHORTCUT_MIME_TYPE","true","false","false","true","true","String","""vnd.android.cursor.item/vnd.android.search.suggest""","[]","Optional[/**
 * MIME type for shortcut validation.  You'll use this in your suggestions content provider
 * in the getType() function.
 */
]","\android\app\SearchManager.java"
"SUGGEST_COLUMN_INTENT_EXTRA_DATA","true","false","false","true","true","String","""suggest_intent_extra_data""","[]","Optional[/**
 * Column name for suggestions cursor.  <i>Optional.</i>  If this column exists <i>and</i>
 * this element exists at the given row, this is the data that will be used when
 * forming the suggestion's intent. If not provided, the Intent's extra data field will be null.
 * This column allows suggestions to provide additional arbitrary data which will be included as
 * an extra under the key {@link #EXTRA_DATA_KEY}.
 */
]","\android\app\SearchManager.java"
"EXTRA_DATA_KEY","true","false","false","true","true","String","""intent_extra_data_key""","[]","Optional[/**
 * Intent extra data key: This key will be used for the extra populated by the
 * {@link #SUGGEST_COLUMN_INTENT_EXTRA_DATA} column.
 */
]","\android\app\SearchManager.java"
"DISABLE_VOICE_SEARCH","true","false","false","true","true","String","""android.search.DISABLE_VOICE_SEARCH""","[]","Optional[/**
 * This means that the voice icon should not be shown at all, because the
 * current search engine does not support voice search.
 * @hide
 */
]","\android\app\SearchManager.java"
"INTENT_ACTION_GLOBAL_SEARCH","true","false","false","true","true","String","""android.search.action.GLOBAL_SEARCH""","[]","Optional[/**
 * Intent action for starting the global search activity.
 * The global search provider should handle this intent.
 *
 * Supported extra data keys: {@link #QUERY},
 * {@link #EXTRA_SELECT_QUERY},
 * {@link #APP_DATA}.
 */
]","\android\app\SearchManager.java"
"SUGGEST_URI_PATH_SHORTCUT","true","false","false","true","true","String","""search_suggest_shortcut""","[]","Optional[/**
 * Uri path for shortcut validation.  This is the path that the search manager will use when
 * querying your content provider to refresh a shortcutted suggestion result and to check if it
 * is still valid.  When asked, a source may return an up to date result, or no result.  No
 * result indicates the shortcut refers to a no longer valid sugggestion.
 *
 * @see #SUGGEST_COLUMN_SHORTCUT_ID
 */
]","\android\app\SearchManager.java"
"mHandler","false","false","false","false","true","Handler","null","[]","Optional[/* package */
]","\android\app\SearchManager.java"
"TAG","false","false","true","true","true","String","""SearchManager""","[]","Optional.empty","\android\app\SearchManager.java"
"DBG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\app\SearchManager.java"
"USER_QUERY","true","false","false","true","true","String","""user_query""","[]","Optional[/**
 * Intent extra data key: Use this key with
 * {@link android.content.Intent#getStringExtra
 * content.Intent.getStringExtra()}
 * to obtain the query string typed in by the user.
 * This may be different from the value of {@link #QUERY}
 * if the intent is the result of selecting a suggestion.
 * In that case, {@link #QUERY} will contain the value of
 * {@link #SUGGEST_COLUMN_QUERY} for the suggestion, and
 * {@link #USER_QUERY} will contain the string typed by the
 * user.
 */
]","\android\app\SearchManager.java"
"CURSOR_EXTRA_KEY_IN_PROGRESS","true","false","false","true","true","String","""in_progress""","[]","Optional[/**
 * Boolean extra data key for a suggestion provider to return in {@link Cursor#getExtras} to
 * indicate that the search is not complete yet. This can be used by the search UI
 * to indicate that a search is in progress. The suggestion provider can return partial results
 * this way and send a change notification on the cursor when more results are available.
 */
]","\android\app\SearchManager.java"
"INTENT_ACTION_SEARCH_SETTINGS_CHANGED","true","false","false","true","true","String","""android.search.action.SETTINGS_CHANGED""","[]","Optional[/**
 * Intent action broadcasted to inform that the search settings have changed in some way.
 * Either searchables have been enabled or disabled, or a different web search provider
 * has been chosen.
 */
]","\android\app\SearchManager.java"
"SUGGEST_COLUMN_TEXT_1","true","false","false","true","true","String","""suggest_text_1""","[]","Optional[/**
 * Column name for suggestions cursor.  <i>Required.</i>  This is the primary line of text that
 * will be presented to the user as the suggestion.
 */
]","\android\app\SearchManager.java"
"SUGGEST_COLUMN_TEXT_2","true","false","false","true","true","String","""suggest_text_2""","[]","Optional[/**
 * Column name for suggestions cursor.  <i>Optional.</i>  If your cursor includes this column,
 * then all suggestions will be provided in a two-line format.  The second line of text is in
 * a much smaller appearance.
 */
]","\android\app\SearchManager.java"
"SUGGEST_COLUMN_BACKGROUND_COLOR","true","false","false","true","true","String","""suggest_background_color""","[]","Optional[/**
 * Column name for suggestions cursor. <i>Optional.</i>  This column is used to specify the
 * cursor item's background color if it needs a non-default background color. A non-zero value
 * indicates a valid background color to override the default.
 *
 * @hide For internal use, not part of the public API.
 */
]","\android\app\SearchManager.java"
"SUGGEST_COLUMN_QUERY","true","false","false","true","true","String","""suggest_intent_query""","[]","Optional[/**
 * Column name for suggestions cursor.  <i>Required if action is
 * {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH}, optional otherwise.</i>  If this
 * column exists <i>and</i> this element exists at the given row, this is the data that will be
 * used when forming the suggestion's query.
 */
]","\android\app\SearchManager.java"
"mService","false","false","true","true","false","ISearchManager","null","[]","Optional[/**
 * Reference to the shared system search service.
 */
]","\android\app\SearchManager.java"
"MENU_KEY","true","false","false","true","true","char","'s'","[]","Optional[/**
 * This is a shortcut definition for the default menu key to use for invoking search.
 *
 * See Menu.Item.setAlphabeticShortcut() for more information.
 */
]","\android\app\SearchManager.java"
"ACTION_KEY","true","false","false","true","true","String","""action_key""","[]","Optional[/**
 * Intent extra data key: Use this key with Intent.ACTION_SEARCH and
 * {@link android.content.Intent#getIntExtra content.Intent.getIntExtra()}
 * to obtain the keycode that the user used to trigger this query.  It will be zero if the
 * user simply pressed the ""GO"" button on the search UI.  This is primarily used in conjunction
 * with the keycode attribute in the actionkey element of your searchable.xml configuration
 * file.
 */
]","\android\app\SearchManager.java"
"SUGGEST_NEVER_MAKE_SHORTCUT","true","false","false","true","true","String","""_-1""","[]","Optional[/**
 * Column value for suggestion column {@link #SUGGEST_COLUMN_SHORTCUT_ID} when a suggestion
 * should not be stored as a shortcut in global search.
 */
]","\android\app\SearchManager.java"
"EXTRA_SELECT_QUERY","true","false","false","true","true","String","""select_query""","[]","Optional[/**
 * Boolean extra data key for {@link #INTENT_ACTION_GLOBAL_SEARCH} intents. If {@code true},
 * the initial query should be selected when the global search activity is started, so
 * that the user can easily replace it with another query.
 */
]","\android\app\SearchManager.java"
"mKeys","false","false","true","false","false","int","null","[]","Optional.empty","\android\util\SparseIntArray.java"
"mSize","false","false","true","false","false","int","null","[]","Optional.empty","\android\util\SparseIntArray.java"
"mValues","false","false","true","false","false","int","null","[]","Optional.empty","\android\util\SparseIntArray.java"
"TRANSACTION_onObbResult","false","false","false","true","true","int","(IBinder.FIRST_CALL_TRANSACTION + 0)","[]","Optional.empty","\android\os\storage\IObbActionListener.java"
"mRemote","false","false","true","false","false","IBinder","null","[]","Optional.empty","\android\os\storage\IObbActionListener.java"
"DESCRIPTOR","false","false","true","true","true","String","""IObbActionListener""","[]","Optional.empty","\android\os\storage\IObbActionListener.java"
"mToken","false","false","true","false","true","Binder","new Binder()","[]","Optional.empty","\android\os\Vibrator.java"
"TAG","false","false","true","true","true","String","""Vibrator""","[]","Optional.empty","\android\os\Vibrator.java"
"mService","false","false","false","false","false","IVibratorService","null","[]","Optional.empty","\android\os\Vibrator.java"
"TAG","false","false","true","true","true","String","""NfcSecureElement""","[]","Optional.empty","\android\nfc\NfcSecureElement.java"
"mService","false","false","true","false","false","INfcSecureElement","null","[]","Optional.empty","\android\nfc\NfcSecureElement.java"
"sMockGeolocation","false","false","true","true","false","MockGeolocation","null","[]","Optional[// Global instance of a MockGeolocation
]","\android\webkit\MockGeolocation.java"
"mRunning","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\net\http\ConnectionThread.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\net\http\ConnectionThread.java"
"mId","false","false","true","false","false","int","null","[]","Optional.empty","\android\net\http\ConnectionThread.java"
"mTotalThreadTime","false","false","false","false","false","long","null","[]","Optional.empty","\android\net\http\ConnectionThread.java"
"mConnection","false","false","false","false","false","Connection","null","[]","Optional.empty","\android\net\http\ConnectionThread.java"
"mConnectionManager","false","false","true","false","false","RequestQueue.ConnectionManager","null","[]","Optional.empty","\android\net\http\ConnectionThread.java"
"mRequestFeeder","false","false","true","false","false","RequestFeeder","null","[]","Optional.empty","\android\net\http\ConnectionThread.java"
"mWaiting","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\net\http\ConnectionThread.java"
"WAIT_TIMEOUT","false","false","false","true","true","int","5000","[]","Optional.empty","\android\net\http\ConnectionThread.java"
"WAIT_TICK","false","false","false","true","true","int","1000","[]","Optional.empty","\android\net\http\ConnectionThread.java"
"mCurrentThreadTime","false","false","false","false","false","long","null","[]","Optional[// Performance probe
]","\android\net\http\ConnectionThread.java"
"mInstrumentation","false","false","true","false","true","Instrumentation","null","[]","Optional.empty","\android\test\InstrumentationTestSuite.java"
"SYNC_EXTRAS_DO_NOT_RETRY","true","false","false","true","true","String","""do_not_retry""","[]","Optional[/**
 * If this extra is set to true then the request will not be retried if it fails.
 */
]","\android\content\ContentResolver.java"
"SCHEME_ANDROID_RESOURCE","true","false","false","true","true","String","""android.resource""","[]","Optional.empty","\android\content\ContentResolver.java"
"sContentService","false","false","true","true","false","IContentService","null","[]","Optional.empty","\android\content\ContentResolver.java"
"mContentProvider","false","false","true","false","false","IContentProvider","null","[]","Optional.empty","\android\content\ContentResolver.java"
"SYNC_OBSERVER_TYPE_ACTIVE","true","false","false","true","true","int","1 << 2","[]","Optional.empty","\android\content\ContentResolver.java"
"CURSOR_ITEM_BASE_TYPE","true","false","false","true","true","String","""vnd.android.cursor.item""","[]","Optional[/**
 * This is the Android platform's base MIME type for a content: URI
 * containing a Cursor of a single item.  Applications should use this
 * as the base type along with their own sub-type of their content: URIs
 * that represent a particular item.  For example, hypothetical IMAP email
 * client may have a URI
 * <code>content://com.company.provider.imap/inbox/1</code> for a particular
 * message in the inbox, whose MIME type would be reported as
 * <code>CURSOR_ITEM_BASE_TYPE + ""/vnd.company.imap-msg""</code>
 *
 * <p>Compare with {@link #CURSOR_DIR_BASE_TYPE}.
 */
]","\android\content\ContentResolver.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\android\content\ContentResolver.java"
"SYNC_EXTRAS_INITIALIZE","true","false","false","true","true","String","""initialize""","[]","Optional[/**
 * Set by the SyncManager to request that the SyncAdapter initialize itself for
 * the given account/authority pair. One required initialization step is to
 * ensure that {@link #setIsSyncable(android.accounts.Account, String, int)} has been
 * called with a >= 0 value. When this flag is set the SyncAdapter does not need to
 * do a full sync, though it is allowed to do so.
 */
]","\android\content\ContentResolver.java"
"SYNC_ERROR_TOO_MANY_DELETIONS","true","false","false","true","true","int","6","[]","Optional[/**
 * @hide
 */
]","\android\content\ContentResolver.java"
"r","true","false","false","false","false","Resources","null","[]","Optional.empty","\android\content\ContentResolver.java"
"mCloseFlag","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\content\ContentResolver.java"
"SYNC_OBSERVER_TYPE_ALL","true","false","false","true","true","int","0x7fffffff","[]","Optional[/**
 * @hide
 */
]","\android\content\ContentResolver.java"
"SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS","true","false","false","true","true","String","""deletions_override""","[]","Optional.empty","\android\content\ContentResolver.java"
"SYNC_EXTRAS_FORCE","true","false","false","true","true","String","""force""","[@Deprecated]","Optional[/**
 * @deprecated instead use
 * {@link #SYNC_EXTRAS_MANUAL}
 */
]","\android\content\ContentResolver.java"
"SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS","true","false","false","true","true","String","""discard_deletions""","[]","Optional.empty","\android\content\ContentResolver.java"
"SYNC_OBSERVER_TYPE_SETTINGS","true","false","false","true","true","int","1 << 0","[]","Optional.empty","\android\content\ContentResolver.java"
"SYNC_EXTRAS_IGNORE_BACKOFF","true","false","false","true","true","String","""ignore_backoff""","[]","Optional[/**
 * If this extra is set to true then any backoffs for the initial attempt (e.g. due to retries)
 * are ignored by the sync scheduler. If this request fails and gets rescheduled then the
 * retries will still honor the backoff.
 */
]","\android\content\ContentResolver.java"
"SYNC_ERROR_SYNC_ALREADY_IN_PROGRESS","true","false","false","true","true","int","1","[]","Optional[/**
 * @hide
 */
]","\android\content\ContentResolver.java"
"SCHEME_CONTENT","true","false","false","true","true","String","""content""","[]","Optional.empty","\android\content\ContentResolver.java"
"SYNC_ERROR_AUTHENTICATION","true","false","false","true","true","int","2","[]","Optional[/**
 * @hide
 */
]","\android\content\ContentResolver.java"
"mRandom","false","false","true","false","true","Random","new Random()","[]","Optional[// guarded by itself
]","\android\content\ContentResolver.java"
"SYNC_EXTRAS_MANUAL","true","false","false","true","true","String","""force""","[]","Optional[/**
 * Setting this extra is the equivalent of setting both {@link #SYNC_EXTRAS_IGNORE_SETTINGS}
 * and {@link #SYNC_EXTRAS_IGNORE_BACKOFF}
 */
]","\android\content\ContentResolver.java"
"id","true","false","false","false","false","int","null","[]","Optional.empty","\android\content\ContentResolver.java"
"CONTENT_SERVICE_NAME","true","false","false","true","true","String","""content""","[]","Optional[/**
 * @hide
 */
]","\android\content\ContentResolver.java"
"SYNC_ERROR_INTERNAL","true","false","false","true","true","int","8","[]","Optional[/**
 * @hide
 */
]","\android\content\ContentResolver.java"
"SYNC_OBSERVER_TYPE_STATUS","true","false","false","true","true","int","1 << 3","[]","Optional[/**
 * @hide
 */
]","\android\content\ContentResolver.java"
"SLOW_THRESHOLD_MILLIS","false","false","true","true","true","int","500","[]","Optional[// sampled accordingly.
]","\android\content\ContentResolver.java"
"SYNC_EXTRAS_UPLOAD","true","false","false","true","true","String","""upload""","[]","Optional.empty","\android\content\ContentResolver.java"
"SYNC_ERROR_IO","true","false","false","true","true","int","3","[]","Optional[/**
 * @hide
 */
]","\android\content\ContentResolver.java"
"SYNC_EXTRAS_IGNORE_SETTINGS","true","false","false","true","true","String","""ignore_settings""","[]","Optional[/**
 * If this extra is set to true then the sync settings (like getSyncAutomatically())
 * are ignored by the sync scheduler.
 */
]","\android\content\ContentResolver.java"
"SYNC_OBSERVER_TYPE_PENDING","true","false","false","true","true","int","1 << 1","[]","Optional.empty","\android\content\ContentResolver.java"
"mReleaseProviderFlag","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\content\ContentResolver.java"
"TAG","false","false","true","true","true","String","""ContentResolver""","[]","Optional.empty","\android\content\ContentResolver.java"
"SCHEME_FILE","true","false","false","true","true","String","""file""","[]","Optional.empty","\android\content\ContentResolver.java"
"SYNC_ERROR_PARSE","true","false","false","true","true","int","4","[]","Optional[/**
 * @hide
 */
]","\android\content\ContentResolver.java"
"CURSOR_DIR_BASE_TYPE","true","false","false","true","true","String","""vnd.android.cursor.dir""","[]","Optional[/**
 * This is the Android platform's base MIME type for a content: URI
 * containing a Cursor of zero or more items.  Applications should use this
 * as the base type along with their own sub-type of their content: URIs
 * that represent a directory of items.  For example, hypothetical IMAP email
 * client may have a URI
 * <code>content://com.company.provider.imap/inbox</code> for all of the
 * messages in its inbox, whose MIME type would be reported as
 * <code>CURSOR_DIR_BASE_TYPE + ""/vnd.company.imap-msg""</code>
 *
 * <p>Note how the base MIME type varies between this and
 * {@link #CURSOR_ITEM_BASE_TYPE} depending on whether there is
 * one single item or multiple items in the data set, while the sub-type
 * remains the same because in either case the data structure contained
 * in the cursor is the same.
 */
]","\android\content\ContentResolver.java"
"SYNC_ERROR_TOO_MANY_RETRIES","true","false","false","true","true","int","7","[]","Optional[/**
 * @hide
 */
]","\android\content\ContentResolver.java"
"SYNC_EXTRAS_EXPEDITED","true","false","false","true","true","String","""expedited""","[]","Optional.empty","\android\content\ContentResolver.java"
"SYNC_EXTRAS_ACCOUNT","true","false","false","true","true","String","""account""","[@Deprecated]","Optional[/**
 * @deprecated instead use
 * {@link #requestSync(android.accounts.Account, String, android.os.Bundle)}
 */
]","\android\content\ContentResolver.java"
"SYNC_ERROR_CONFLICT","true","false","false","true","true","int","5","[]","Optional[/**
 * @hide
 */
]","\android\content\ContentResolver.java"
"FOLDING_SEPARATOR","false","false","true","true","true","String","""\n ""","[]","Optional.empty","\android\pim\RecurrenceSet.java"
"exrules","true","false","false","false","false","EventRecurrence","null","[]","Optional.empty","\android\pim\RecurrenceSet.java"
"rrules","true","false","false","false","false","EventRecurrence","null","[]","Optional[// TODO: make these final?
]","\android\pim\RecurrenceSet.java"
"RULE_SEPARATOR","false","false","true","true","true","String","""\n""","[]","Optional.empty","\android\pim\RecurrenceSet.java"
"exdates","true","false","false","false","false","long","null","[]","Optional.empty","\android\pim\RecurrenceSet.java"
"FOLD_RE","false","false","true","true","true","Pattern","Pattern.compile("".{75}"")","[]","Optional.empty","\android\pim\RecurrenceSet.java"
"rdates","true","false","false","false","false","long","null","[]","Optional.empty","\android\pim\RecurrenceSet.java"
"TAG","false","false","true","true","true","String","""CalendarProvider""","[]","Optional.empty","\android\pim\RecurrenceSet.java"
"IGNORABLE_ICAL_WHITESPACE_RE","false","false","true","true","true","Pattern","Pattern.compile(""(?:\\r\\n?|\\n)[ \t]"")","[]","Optional.empty","\android\pim\RecurrenceSet.java"
"TAG","false","false","true","true","true","String","""Account""","[]","Optional.empty","\android\accounts\AccountAuthenticatorCache.java"
"sSerializer","false","false","true","true","true","MySerializer","new MySerializer()","[]","Optional.empty","\android\accounts\AccountAuthenticatorCache.java"
"mFieldId","false","false","true","false","false","int","0","[]","Optional[/**
 * If the inflated resource is not a TextView, {@link #mFieldId} is used to find
 * a TextView inside the inflated views hierarchy. This field must contain the
 * identifier that matches the one defined in the resource file.
 */
]","\android\widget\ArrayAdapter.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\widget\ArrayAdapter.java"
"mObjects","false","false","true","false","false","List<T>","null","[]","Optional[/**
 * Contains the list of objects that represent the data of this ArrayAdapter.
 * The content of this list is referred to as ""the array"" in the documentation.
 */
]","\android\widget\ArrayAdapter.java"
"mNotifyOnChange","false","false","true","false","false","boolean","true","[]","Optional[/**
 * Indicates whether or not {@link #notifyDataSetChanged()} must be called whenever
 * {@link #mObjects} is modified.
 */
]","\android\widget\ArrayAdapter.java"
"mLock","false","false","true","false","true","Object","new Object()","[]","Optional[/**
 * Lock used to modify the content of {@link #mObjects}. Any write operation
 * performed on the array should be synchronized on this lock. This lock is also
 * used by the filter (see {@link #getFilter()} to make a synchronized copy of
 * the original array of data.
 */
]","\android\widget\ArrayAdapter.java"
"mFilter","false","false","true","false","false","ArrayFilter","null","[]","Optional.empty","\android\widget\ArrayAdapter.java"
"mResource","false","false","true","false","false","int","null","[]","Optional[/**
 * The resource indicating what views to inflate to display the content of this
 * array adapter.
 */
]","\android\widget\ArrayAdapter.java"
"mDropDownResource","false","false","true","false","false","int","null","[]","Optional[/**
 * The resource indicating what views to inflate to display the content of this
 * array adapter in a drop down widget.
 */
]","\android\widget\ArrayAdapter.java"
"mOriginalValues","false","false","true","false","false","ArrayList<T>","null","[]","Optional.empty","\android\widget\ArrayAdapter.java"
"mInflater","false","false","true","false","false","LayoutInflater","null","[]","Optional.empty","\android\widget\ArrayAdapter.java"
"mBytes","false","false","true","false","false","ByteBuffer","ByteBuffer.allocate(BUFFER_LEN)","[]","Optional.empty","\com\android\internal\util\FastXmlSerializer.java"
"mCharset","false","false","true","false","false","CharsetEncoder","null","[]","Optional.empty","\com\android\internal\util\FastXmlSerializer.java"
"mPos","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\util\FastXmlSerializer.java"
"ESCAPE_TABLE","false","false","true","true","true","String","new String[] { // 0-7
null, // 0-7
null, // 0-7
null, // 0-7
null, // 0-7
null, // 0-7
null, // 0-7
null, // 0-7
null, // 8-15
null, // 8-15
null, // 8-15
null, // 8-15
null, // 8-15
null, // 8-15
null, // 8-15
null, // 8-15
null, // 16-23
null, // 16-23
null, // 16-23
null, // 16-23
null, // 16-23
null, // 16-23
null, // 16-23
null, // 16-23
null, // 24-31
null, // 24-31
null, // 24-31
null, // 24-31
null, // 24-31
null, // 24-31
null, // 24-31
null, // 24-31
null, // 32-39
null, // 32-39
null, // 32-39
""&quot;"", // 32-39
null, // 32-39
null, // 32-39
null, // 32-39
""&amp;"", // 32-39
null, // 40-47
null, // 40-47
null, // 40-47
null, // 40-47
null, // 40-47
null, // 40-47
null, // 40-47
null, // 40-47
null, // 48-55
null, // 48-55
null, // 48-55
null, // 48-55
null, // 48-55
null, // 48-55
null, // 48-55
null, // 48-55
null, // 56-63
null, // 56-63
null, // 56-63
null, // 56-63
null, // 56-63
""&lt;"", // 56-63
null, // 56-63
""&gt;"", // 56-63
null }","[]","Optional.empty","\com\android\internal\util\FastXmlSerializer.java"
"mText","false","false","true","false","true","char","new char[BUFFER_LEN]","[]","Optional.empty","\com\android\internal\util\FastXmlSerializer.java"
"mOutputStream","false","false","true","false","false","OutputStream","null","[]","Optional.empty","\com\android\internal\util\FastXmlSerializer.java"
"mWriter","false","false","true","false","false","Writer","null","[]","Optional.empty","\com\android\internal\util\FastXmlSerializer.java"
"BUFFER_LEN","false","false","true","true","true","int","8192","[]","Optional.empty","\com\android\internal\util\FastXmlSerializer.java"
"mInTag","false","false","true","false","false","boolean","null","[]","Optional.empty","\com\android\internal\util\FastXmlSerializer.java"
"CREATOR","true","false","false","true","true","Creator<InterfaceConfiguration>","new Creator<InterfaceConfiguration>() {

    public InterfaceConfiguration createFromParcel(Parcel in) {
        InterfaceConfiguration info = new InterfaceConfiguration();
        info.hwAddr = in.readString();
        info.ipAddr = in.readInt();
        info.netmask = in.readInt();
        info.interfaceFlags = in.readString();
        return info;
    }

    public InterfaceConfiguration[] newArray(int size) {
        return new InterfaceConfiguration[size];
    }
}","[]","Optional[/**
 * Implement the Parcelable interface {@hide}
 */
]","\android\net\InterfaceConfiguration.java"
"interfaceFlags","true","false","false","false","false","String","null","[]","Optional.empty","\android\net\InterfaceConfiguration.java"
"ipAddr","true","false","false","false","false","int","null","[]","Optional.empty","\android\net\InterfaceConfiguration.java"
"hwAddr","true","false","false","false","false","String","null","[]","Optional.empty","\android\net\InterfaceConfiguration.java"
"netmask","true","false","false","false","false","int","null","[]","Optional.empty","\android\net\InterfaceConfiguration.java"
"name","false","false","true","false","true","String","null","[]","Optional.empty","\android\net\LocalSocketAddress.java"
"id","false","false","true","false","false","int","null","[]","Optional[/**
 * The id matches with a #define in include/cutils/sockets.h
 */
]","\android\net\LocalSocketAddress.java"
"namespace","false","false","true","false","true","Namespace","null","[]","Optional.empty","\android\net\LocalSocketAddress.java"
"MONTH","true","false","false","true","true","char","'M'","[]","Optional[/**
 * This designator indicates the month of the year
 *
 * Examples for September:
 * M -> 9
 * MM -> 09
 * MMM -> Sep
 * MMMM -> September
 */
]","\android\text\format\DateFormat.java"
"YEAR","true","false","false","true","true","char","'y'","[]","Optional[/**
 * This designator indicates the year.
 *
 * Examples for 2006
 * y -> 06
 * yyyy -> 2006
 */
]","\android\text\format\DateFormat.java"
"sIs24HourLocale","false","false","true","true","false","Locale","null","[]","Optional.empty","\android\text\format\DateFormat.java"
"SECONDS","true","false","false","true","true","char","'s'","[]","Optional[/**
 * This designator indicates the seconds of the minute.
 *
 * Examples for 7 seconds past the minute:
 * s -> 7
 * ss -> 07
 */
]","\android\text\format\DateFormat.java"
"CAPITAL_AM_PM","true","false","false","true","true","char","'A'","[]","Optional[/**
 * This designator indicates whether the <code>HOUR</code> field is before
 * or after noon.  The output is capitalized.
 *
 * Examples:
 * A -> A or P
 * AA -> AM or PM
 */
]","\android\text\format\DateFormat.java"
"QUOTE","true","false","false","true","true","char","'\''","[]","Optional[/**
 * Text in the format string that should be copied verbatim rather that
 * interpreted as formatting codes must be surrounded by the <code>QUOTE</code>
 * character.  If you need to embed a literal <code>QUOTE</code> character in
 * the output text then use two in a row.
 */
]","\android\text\format\DateFormat.java"
"sLocaleLock","false","false","true","true","true","Object","new Object()","[]","Optional.empty","\android\text\format\DateFormat.java"
"sIs24Hour","false","false","true","true","false","boolean","null","[]","Optional.empty","\android\text\format\DateFormat.java"
"AM_PM","true","false","false","true","true","char","'a'","[]","Optional[/**
 * This designator indicates whether the <code>HOUR</code> field is before
 * or after noon.  The output is lower-case.
 *
 * Examples:
 * a -> a or p
 * aa -> am or pm
 */
]","\android\text\format\DateFormat.java"
"DAY","true","false","false","true","true","char","'E'","[]","Optional[/**
 * This designator indicates the name of the day of the week.
 *
 * Examples for Sunday:
 * E -> Sun
 * EEEE -> Sunday
 */
]","\android\text\format\DateFormat.java"
"MINUTE","true","false","false","true","true","char","'m'","[]","Optional[/**
 * This designator indicates the minute of the hour.
 *
 * Examples for 7 minutes past the hour:
 * m -> 7
 * mm -> 07
 */
]","\android\text\format\DateFormat.java"
"DATE","true","false","false","true","true","char","'d'","[]","Optional[/**
 * This designator indicates the day of the month.
 *
 * Examples for the 9th of the month:
 * d -> 9
 * dd -> 09
 */
]","\android\text\format\DateFormat.java"
"HOUR","true","false","false","true","true","char","'h'","[]","Optional[/**
 * This designator indicates the hour of the day in 12 hour format.
 *
 * Examples for 3pm:
 * h -> 3
 * hh -> 03
 */
]","\android\text\format\DateFormat.java"
"TIME_ZONE","true","false","false","true","true","char","'z'","[]","Optional[/**
 * This designator indicates the offset of the timezone from GMT.
 *
 * Example for US/Pacific timezone:
 * z -> -0800
 * zz -> PST
 */
]","\android\text\format\DateFormat.java"
"HOUR_OF_DAY","true","false","false","true","true","char","'k'","[]","Optional[/**
 * This designator indicates the hour of the day in 24 hour format.
 *
 * Example for 3pm:
 * k -> 15
 *
 * Examples for midnight:
 * k -> 0
 * kk -> 00
 */
]","\android\text\format\DateFormat.java"
"mCycles","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\animation\CycleInterpolator.java"
"mBottom","false","false","false","false","false","int","null","[]","Optional[// for Direct
]","\android\text\BoringLayout.java"
"FIRST_RIGHT_TO_LEFT","false","false","true","true","true","char","'\u0590'","[]","Optional.empty","\android\text\BoringLayout.java"
"sTemp","false","false","true","true","true","TextPaint","new TextPaint()","[]","Optional.empty","\android\text\BoringLayout.java"
"mEllipsizedWidth","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\BoringLayout.java"
"mDirect","false","false","true","false","false","String","null","[]","Optional.empty","\android\text\BoringLayout.java"
"mPaint","false","false","true","false","false","Paint","null","[]","Optional.empty","\android\text\BoringLayout.java"
"width","true","false","false","false","false","int","null","[]","Optional.empty","\android\text\BoringLayout.java"
"mMax","false","false","true","false","false","float","null","[]","Optional.empty","\android\text\BoringLayout.java"
"mTopPadding","false","false","true","false","false","int","null","[]","Optional[/* package */
]","\android\text\BoringLayout.java"
"mSharedPreferencesMode","false","false","true","false","false","int","null","[]","Optional[/**
 * The SharedPreferences mode that will be used for all {@link Preference}s
 * managed by this instance.
 */
]","\android\preference\PreferenceManager.java"
"mSharedPreferences","false","false","true","false","false","SharedPreferences","null","[]","Optional[/**
 * Cached shared preferences.
 */
]","\android\preference\PreferenceManager.java"
"mPreferencesScreens","false","false","true","false","false","List<DialogInterface>","null","[]","Optional[/**
 * List of dialogs that should be dismissed when we receive onNewIntent in
 * our PreferenceActivity.
 */
]","\android\preference\PreferenceManager.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional[/**
 * The context to use. This should always be set.
 *
 * @see #mActivity
 */
]","\android\preference\PreferenceManager.java"
"mPreferenceScreen","false","false","true","false","false","PreferenceScreen","null","[]","Optional[/**
 * The {@link PreferenceScreen} at the root of the preference hierarchy.
 */
]","\android\preference\PreferenceManager.java"
"METADATA_KEY_PREFERENCES","true","false","false","true","true","String","""android.preference""","[]","Optional[/**
 * The Activity meta-data key for its XML preference hierarchy.
 */
]","\android\preference\PreferenceManager.java"
"mNextId","false","false","true","false","false","long","0","[]","Optional[/**
 * The counter for unique IDs.
 */
]","\android\preference\PreferenceManager.java"
"mActivity","false","false","true","false","false","Activity","null","[]","Optional[/**
 * @see #getActivity()
 */
]","\android\preference\PreferenceManager.java"
"mActivityStopListeners","false","false","true","false","false","List<OnActivityStopListener>","null","[]","Optional[/**
 * List of activity stop listeners.
 */
]","\android\preference\PreferenceManager.java"
"KEY_HAS_SET_DEFAULT_VALUES","true","false","false","true","true","String","""_has_set_default_values""","[]","Optional.empty","\android\preference\PreferenceManager.java"
"mSharedPreferencesName","false","false","true","false","false","String","null","[]","Optional[/**
 * The SharedPreferences name that will be used for all {@link Preference}s
 * managed by this instance.
 */
]","\android\preference\PreferenceManager.java"
"mActivityResultListeners","false","false","true","false","false","List<OnActivityResultListener>","null","[]","Optional[/**
 * List of activity result listeners.
 */
]","\android\preference\PreferenceManager.java"
"mEditor","false","false","true","false","false","SharedPreferences.Editor","null","[]","Optional[/**
 * If in no-commit mode, the shared editor to give out (which will be
 * committed when exiting no-commit mode).
 */
]","\android\preference\PreferenceManager.java"
"mActivityDestroyListeners","false","false","true","false","false","List<OnActivityDestroyListener>","null","[]","Optional[/**
 * List of activity destroy listeners.
 */
]","\android\preference\PreferenceManager.java"
"TAG","false","false","true","true","true","String","""PreferenceManager""","[]","Optional.empty","\android\preference\PreferenceManager.java"
"mNextRequestCode","false","false","true","false","false","int","null","[]","Optional[/**
 * The counter for unique request codes.
 */
]","\android\preference\PreferenceManager.java"
"mNoCommit","false","false","true","false","false","boolean","null","[]","Optional[/**
 * Blocks commits from happening on the shared editor. This is used when
 * inflating the hierarchy. Do not set this directly, use {@link #setNoCommit(boolean)}
 */
]","\android\preference\PreferenceManager.java"
"mOnPreferenceTreeClickListener","false","false","true","false","false","OnPreferenceTreeClickListener","null","[]","Optional.empty","\android\preference\PreferenceManager.java"
"state","false","false","true","false","false","HierarchicalState","null","[]","Optional.empty","\com\android\internal\util\ProcessedMessages.java"
"mMaxSize","false","false","true","false","false","int","DEFAULT_SIZE","[]","Optional.empty","\com\android\internal\util\ProcessedMessages.java"
"DEFAULT_SIZE","true","false","false","true","true","int","20","[]","Optional.empty","\com\android\internal\util\ProcessedMessages.java"
"what","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\util\ProcessedMessages.java"
"mOldestIndex","false","false","true","false","false","int","0","[]","Optional.empty","\com\android\internal\util\ProcessedMessages.java"
"mCount","false","false","true","false","false","int","0","[]","Optional.empty","\com\android\internal\util\ProcessedMessages.java"
"mMessages","false","false","true","false","false","Vector<Info>","new Vector<Info>()","[]","Optional.empty","\com\android\internal\util\ProcessedMessages.java"
"orgState","false","false","true","false","false","HierarchicalState","null","[]","Optional.empty","\com\android\internal\util\ProcessedMessages.java"
"mClear","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\app\ContextImpl.java"
"mDiskWritesInFlight","false","false","true","false","false","int","0","[]","Optional[// guarded by 'this'
]","\android\app\ContextImpl.java"
"mClipboardManager","false","false","true","false","false","ClipboardManager","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mSensorManager","false","false","true","false","false","SensorManager","null","[]","Optional.empty","\android\app\ContextImpl.java"
"changesMade","true","false","false","false","false","boolean","null","[]","Optional[// any keys different?
]","\android\app\ContextImpl.java"
"mActivityToken","false","false","true","false","false","IBinder","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mModified","false","false","true","false","true","Map<String,Object>","Maps.newHashMap()","[]","Optional.empty","\android\app\ContextImpl.java"
"mCacheDir","false","false","true","false","false","File","null","[]","Optional.empty","\android\app\ContextImpl.java"
"sWifiManager","false","false","true","true","false","WifiManager","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mSearchManager","false","false","true","false","false","SearchManager","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mapToWriteToDisk","true","false","false","false","false","Map<?,?>","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mListeners","false","false","true","false","true","WeakHashMap<OnSharedPreferenceChangeListener,Object>","null","[]","Optional.empty","\android\app\ContextImpl.java"
"writeToDiskResult","true","false","false","false","false","boolean","false","[]","Optional.empty","\android\app\ContextImpl.java"
"sConnectivityManager","false","false","true","true","false","ConnectivityManager","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mContext","false","false","true","false","true","ContextImpl","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mTelephonyManager","false","false","true","false","false","TelephonyManager","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mDatabasesDir","false","false","true","false","false","File","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mRestricted","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mPackageManager","false","false","true","false","false","PackageManager","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mLayoutInflater","false","false","true","false","false","LayoutInflater","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mSync","false","false","true","false","true","Object","new Object()","[]","Optional.empty","\android\app\ContextImpl.java"
"mStatTimestamp","false","false","true","false","false","long","null","[]","Optional[// guarded by 'this'
]","\android\app\ContextImpl.java"
"sIconCache","false","false","true","true","false","HashMap<ResourceName,WeakReference<Drawable>>","new HashMap<ResourceName, WeakReference<Drawable>>()","[]","Optional.empty","\android\app\ContextImpl.java"
"mContentResolver","false","false","true","false","false","ApplicationContentResolver","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mStorageManager","false","false","true","false","false","StorageManager","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mResources","false","false","true","false","false","Resources","null","[]","Optional.empty","\android\app\ContextImpl.java"
"keysModified","true","false","false","false","false","List<String>","null","[]","Optional[// may be null
]","\android\app\ContextImpl.java"
"mLoaded","false","false","true","false","false","boolean","false","[]","Optional[// guarded by 'this'
]","\android\app\ContextImpl.java"
"mAudioManager","false","false","true","false","false","AudioManager","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mBackupFile","false","false","true","false","true","File","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mDownloadManager","false","false","true","false","false","DownloadManager","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mExternalCacheDir","false","false","true","false","false","File","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mUiModeManager","false","false","true","false","false","UiModeManager","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mNotificationManager","false","false","true","false","false","NotificationManager","null","[]","Optional.empty","\android\app\ContextImpl.java"
"sPowerManager","false","false","true","true","false","PowerManager","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mFilesDir","false","false","true","false","false","File","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mDevicePolicyManager","false","false","true","false","false","DevicePolicyManager","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mThemeResource","false","false","true","false","false","int","0","[]","Optional.empty","\android\app\ContextImpl.java"
"mPM","false","false","true","false","true","IPackageManager","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mVibrator","false","false","true","false","false","Vibrator","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mPackageInfo","false","false","false","false","false","LoadedApk","null","[]","Optional[/*package*/
]","\android\app\ContextImpl.java"
"mReceiverRestrictedContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mOuterContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\app\ContextImpl.java"
"listeners","true","false","false","false","false","Set<OnSharedPreferenceChangeListener>","null","[]","Optional[// may be null
]","\android\app\ContextImpl.java"
"mWallpaperManager","false","false","true","false","false","WallpaperManager","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mPreferencesDir","false","false","true","false","false","File","null","[]","Optional.empty","\android\app\ContextImpl.java"
"TAG","false","false","true","true","true","String","""ApplicationContext""","[]","Optional.empty","\android\app\ContextImpl.java"
"mContent","false","false","true","true","true","Object","new Object()","[]","Optional.empty","\android\app\ContextImpl.java"
"mMainThread","false","false","true","false","true","ActivityThread","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mStatSize","false","false","true","false","false","long","null","[]","Optional[// guarded by 'this'
]","\android\app\ContextImpl.java"
"sInstanceCount","false","false","true","true","false","long","0","[]","Optional.empty","\android\app\ContextImpl.java"
"mTheme","false","false","true","false","false","Resources.Theme","null","[]","Optional.empty","\android\app\ContextImpl.java"
"sAlarmManager","false","false","true","true","false","AlarmManager","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mDropBoxManager","false","false","true","false","false","DropBoxManager","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mMode","false","false","true","false","true","int","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mMap","false","false","true","false","false","Map<String,Object>","null","[]","Optional[// guarded by 'this'
]","\android\app\ContextImpl.java"
"iconId","false","false","false","false","true","int","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mFile","false","false","true","false","true","File","null","[]","Optional.empty","\android\app\ContextImpl.java"
"sThrottleManager","false","false","true","true","false","ThrottleManager","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mCachedSafeMode","false","false","false","false","false","int","-1","[]","Optional.empty","\android\app\ContextImpl.java"
"sLocationManager","false","false","true","true","false","LocationManager","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mWritingToDiskLock","false","false","true","false","true","Object","new Object()","[]","Optional.empty","\android\app\ContextImpl.java"
"mStatusBarManager","false","false","true","false","false","StatusBarManager","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mActivityManager","false","false","true","false","false","ActivityManager","null","[]","Optional.empty","\android\app\ContextImpl.java"
"sSharedPrefs","false","false","true","true","true","HashMap<String,SharedPreferencesImpl>","new HashMap<String, SharedPreferencesImpl>()","[]","Optional.empty","\android\app\ContextImpl.java"
"mAccountManager","false","false","true","false","false","AccountManager","null","[]","Optional[// protected by mSync
]","\android\app\ContextImpl.java"
"sSync","false","false","true","true","true","Object","new Object()","[]","Optional.empty","\android\app\ContextImpl.java"
"writtenToDiskLatch","true","false","false","false","true","CountDownLatch","new CountDownLatch(1)","[]","Optional.empty","\android\app\ContextImpl.java"
"EMPTY_FILE_LIST","false","false","true","true","true","String","{}","[]","Optional.empty","\android\app\ContextImpl.java"
"mNfcManager","false","false","true","false","false","NfcManager","null","[]","Optional.empty","\android\app\ContextImpl.java"
"packageName","false","false","false","false","true","String","null","[]","Optional.empty","\android\app\ContextImpl.java"
"mExternalFilesDir","false","false","true","false","false","File","null","[]","Optional.empty","\android\app\ContextImpl.java"
"DEBUG_ICONS","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\app\ContextImpl.java"
"sStringCache","false","false","true","true","false","HashMap<ResourceName,WeakReference<CharSequence>>","new HashMap<ResourceName, WeakReference<CharSequence>>()","[]","Optional.empty","\android\app\ContextImpl.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\app\ContextImpl.java"
"mGesturePaint","false","false","true","false","true","Paint","new Paint()","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"GESTURE_STROKE_TYPE_MULTIPLE","true","false","false","true","true","int","1","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mPath","false","false","true","false","true","Path","new Path()","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mOnGestureListeners","false","false","true","false","true","ArrayList<OnGestureListener>","new ArrayList<OnGestureListener>()","[]","Optional[// TODO: Make this a list of WeakReferences
]","\android\gesture\GestureOverlayView.java"
"mCurrentGesture","false","false","true","false","false","Gesture","null","[]","Optional[// current gesture
]","\android\gesture\GestureOverlayView.java"
"mCurveEndY","false","false","true","false","false","float","null","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mStrokeBuffer","false","false","true","false","true","ArrayList<GesturePoint>","new ArrayList<GesturePoint>(100)","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"fireActionPerformed","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mGestureStrokeWidth","false","false","true","false","false","float","12.0f","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mFadingStart","false","false","true","false","false","long","null","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mFadingAlpha","false","false","true","false","false","float","1.0f","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"resetMultipleStrokes","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mOnGesturingListeners","false","false","true","false","true","ArrayList<OnGesturingListener>","new ArrayList<OnGesturingListener>()","[]","Optional[// TODO: Make this a list of WeakReferences
]","\android\gesture\GestureOverlayView.java"
"mGestureStrokeType","false","false","true","false","false","int","GESTURE_STROKE_TYPE_SINGLE","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mGestureStrokeAngleThreshold","false","false","true","false","false","float","40.0f","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mInvalidateExtraBorder","false","false","true","false","false","int","10","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mGestureStrokeSquarenessTreshold","false","false","true","false","false","float","0.275f","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mIsGesturing","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mFadeEnabled","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mIsFadingOut","false","false","true","false","false","boolean","false","[]","Optional[// fading out effect
]","\android\gesture\GestureOverlayView.java"
"mFadeOffset","false","false","true","false","false","long","420","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mUncertainGestureColor","false","false","true","false","false","int","0x48FFFF00","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mInterceptEvents","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mGestureStrokeLengthThreshold","false","false","true","false","false","float","50.0f","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mCurveEndX","false","false","true","false","false","float","null","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"GESTURE_STROKE_TYPE_SINGLE","true","false","false","true","true","int","0","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mFadeDuration","false","false","true","false","false","long","150","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mInvalidRect","false","false","true","false","true","Rect","new Rect()","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mPreviousWasGesturing","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mHandleGestureActions","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"ORIENTATION_VERTICAL","true","false","false","true","true","int","1","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"DITHER_FLAG","false","false","true","true","true","boolean","true","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mGestureVisible","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mInterpolator","false","false","true","false","true","AccelerateDecelerateInterpolator","new AccelerateDecelerateInterpolator()","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mOrientation","false","false","true","false","false","int","ORIENTATION_VERTICAL","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mIsListeningForGestures","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"GESTURE_RENDERING_ANTIALIAS","false","false","true","true","true","boolean","true","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mX","false","false","true","false","false","float","null","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mY","false","false","true","false","false","float","null","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mResetGesture","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"ORIENTATION_HORIZONTAL","true","false","false","true","true","int","0","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mCertainGestureColor","false","false","true","false","false","int","0xFFFFFF00","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mFadingOut","false","false","true","false","true","FadeOutRunnable","new FadeOutRunnable()","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mFadingHasStarted","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mCurrentColor","false","false","true","false","false","int","null","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mOnGesturePerformedListeners","false","false","true","false","true","ArrayList<OnGesturePerformedListener>","new ArrayList<OnGesturePerformedListener>()","[]","Optional[// TODO: Make this a list of WeakReferences
]","\android\gesture\GestureOverlayView.java"
"mTotalLength","false","false","true","false","false","float","null","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"FADE_ANIMATION_RATE","false","false","true","true","true","int","16","[]","Optional.empty","\android\gesture\GestureOverlayView.java"
"mOriginal","false","false","true","false","false","char","null","[]","Optional.empty","\android\text\method\ReplacementTransformationMethod.java"
"mSpanned","false","false","true","false","false","Spanned","null","[]","Optional.empty","\android\text\method\ReplacementTransformationMethod.java"
"mSource","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\text\method\ReplacementTransformationMethod.java"
"sInstanceSync","false","false","false","true","true","Object","new Object()","[]","Optional.empty","\android\view\accessibility\AccessibilityManager.java"
"DO_SET_ENABLED","false","false","true","true","true","int","10","[]","Optional.empty","\android\view\accessibility\AccessibilityManager.java"
"LOG_TAG","false","false","true","true","true","String","""AccessibilityManager""","[]","Optional.empty","\android\view\accessibility\AccessibilityManager.java"
"mClient","false","false","false","false","true","IAccessibilityManagerClient.Stub","new IAccessibilityManagerClient.Stub() {

    public void setEnabled(boolean enabled) {
        mHandler.obtainMessage(DO_SET_ENABLED, enabled ? 1 : 0, 0).sendToTarget();
    }
}","[]","Optional.empty","\android\view\accessibility\AccessibilityManager.java"
"mIsEnabled","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\view\accessibility\AccessibilityManager.java"
"mHandler","false","false","false","false","true","Handler","null","[]","Optional.empty","\android\view\accessibility\AccessibilityManager.java"
"sInstance","false","false","true","true","false","AccessibilityManager","null","[]","Optional.empty","\android\view\accessibility\AccessibilityManager.java"
"mService","false","false","false","false","true","IAccessibilityManager","null","[]","Optional.empty","\android\view\accessibility\AccessibilityManager.java"
"mYOffset","false","false","false","false","false","float","null","[]","Optional.empty","\com\android\internal\service\wallpaper\ImageWallpaper.java"
"mLock","false","false","true","false","true","Object","new Object()","[]","Optional.empty","\com\android\internal\service\wallpaper\ImageWallpaper.java"
"mXOffset","false","false","false","false","false","float","null","[]","Optional.empty","\com\android\internal\service\wallpaper\ImageWallpaper.java"
"mWallpaperManager","false","false","false","false","false","WallpaperManager","null","[]","Optional.empty","\com\android\internal\service\wallpaper\ImageWallpaper.java"
"mThread","false","false","true","false","false","HandlerThread","null","[]","Optional.empty","\com\android\internal\service\wallpaper\ImageWallpaper.java"
"mBackground","false","false","false","false","false","Drawable","null","[]","Optional.empty","\com\android\internal\service\wallpaper\ImageWallpaper.java"
"mReceiver","false","false","true","false","false","WallpaperObserver","null","[]","Optional.empty","\com\android\internal\service\wallpaper\ImageWallpaper.java"
"mDragStartTime","false","false","true","false","false","long","null","[]","Optional.empty","\android\webkit\WebTextView.java"
"mInSetTextAndKeepSelection","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\webkit\WebTextView.java"
"mDragStartX","false","false","true","false","false","float","null","[]","Optional[// when a drag starts
]","\android\webkit\WebTextView.java"
"mDragStartY","false","false","true","false","false","float","null","[]","Optional.empty","\android\webkit\WebTextView.java"
"mDragSent","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\webkit\WebTextView.java"
"mSingle","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\webkit\WebTextView.java"
"NO_FILTERS","false","false","true","true","true","InputFilter","new InputFilter[0]","[]","Optional[// is made public/protected.
]","\android\webkit\WebTextView.java"
"mScrolled","false","false","true","false","false","boolean","null","[]","Optional[// scroll or the web page to scroll.  Gets reset after a touch down.
]","\android\webkit\WebTextView.java"
"mHeightSpec","false","false","true","false","false","int","null","[]","Optional.empty","\android\webkit\WebTextView.java"
"mCharacter","false","false","true","false","false","char","new char[1]","[]","Optional[// KeyEvents may be determined.
]","\android\webkit\WebTextView.java"
"mMaxLength","false","false","true","false","false","int","null","[]","Optional.empty","\android\webkit\WebTextView.java"
"mWidthSpec","false","false","true","false","false","int","null","[]","Optional.empty","\android\webkit\WebTextView.java"
"mFromSetInputType","false","false","true","false","false","boolean","null","[]","Optional[// do not want to pass this change to webkit.
]","\android\webkit\WebTextView.java"
"mNodePointer","false","false","true","false","false","int","null","[]","Optional.empty","\android\webkit\WebTextView.java"
"mHasPerformedLongClick","false","false","true","false","false","boolean","null","[]","Optional[// an ACTION_DOWN MotionEvent
]","\android\webkit\WebTextView.java"
"mBackground","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\webkit\WebTextView.java"
"mFromWebKit","false","false","true","false","false","boolean","null","[]","Optional[// we do not need to pass the selection back to webkit.
]","\android\webkit\WebTextView.java"
"mPreChange","false","false","true","false","false","String","null","[]","Optional[// need to send down the DOM events.
]","\android\webkit\WebTextView.java"
"mGotEnterDown","false","false","true","false","false","boolean","null","[]","Optional[// the shift key from working properly.
]","\android\webkit\WebTextView.java"
"mFromFocusChange","false","false","true","false","false","boolean","null","[]","Optional[// selection.
]","\android\webkit\WebTextView.java"
"mTextView","false","false","true","false","false","TextView","null","[]","Optional.empty","\android\webkit\WebTextView.java"
"mWebView","false","false","true","false","false","WebView","null","[]","Optional.empty","\android\webkit\WebTextView.java"
"mGotTouchDown","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\webkit\WebTextView.java"
"LOGTAG","false","false","false","true","true","String","""webtextview""","[]","Optional.empty","\android\webkit\WebTextView.java"
"mAnimateOnClick","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mAnimatedAcceleration","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"MAXIMUM_MINOR_VELOCITY","false","false","true","true","true","float","150.0f","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mAnimating","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mAnimationPosition","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"MSG_ANIMATE","false","false","true","true","true","int","1000","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mMaximumTapVelocity","false","false","true","false","true","int","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mMaximumMinorVelocity","false","false","true","false","true","int","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mVelocityTracker","false","false","true","false","false","VelocityTracker","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mOnDrawerScrollListener","false","false","true","false","false","OnDrawerScrollListener","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mCurrentAnimationTime","false","false","true","false","false","long","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mInvalidate","false","false","true","false","true","Rect","new Rect()","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mHandle","false","false","true","false","false","View","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mOnDrawerOpenListener","false","false","true","false","false","OnDrawerOpenListener","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"EXPANDED_FULL_OPEN","false","false","true","true","true","int","-10001","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mTracking","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mFrame","false","false","true","false","true","Rect","new Rect()","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mAllowSingleTap","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mTapThreshold","false","false","true","false","true","int","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"ORIENTATION_VERTICAL","true","false","false","true","true","int","1","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mExpanded","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mAnimatedVelocity","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mMaximumAcceleration","false","false","true","false","true","int","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"TAP_THRESHOLD","false","false","true","true","true","int","6","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mHandleWidth","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mAnimationLastTime","false","false","true","false","false","long","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mHandleHeight","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"MAXIMUM_MAJOR_VELOCITY","false","false","true","true","true","float","200.0f","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mOnDrawerCloseListener","false","false","true","false","false","OnDrawerCloseListener","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"COLLAPSED_FULL_CLOSED","false","false","true","true","true","int","-10002","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mVelocityUnits","false","false","true","false","true","int","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mHandler","false","false","true","false","true","Handler","new SlidingHandler()","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mTouchDelta","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mContent","false","false","true","false","false","View","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mMaximumMajorVelocity","false","false","true","false","true","int","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"MAXIMUM_ACCELERATION","false","false","true","true","true","float","2000.0f","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"ANIMATION_FRAME_DURATION","false","false","true","true","true","int","1000 / 60","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mVertical","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"ORIENTATION_HORIZONTAL","true","false","false","true","true","int","0","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mLocked","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"VELOCITY_UNITS","false","false","true","true","true","int","1000","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"MAXIMUM_TAP_VELOCITY","false","false","true","true","true","float","100.0f","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mBottomOffset","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mTopOffset","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mHandleId","false","false","true","false","true","int","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"mContentId","false","false","true","false","true","int","null","[]","Optional.empty","\android\widget\SlidingDrawer.java"
"APP_INSTALL_EXTERNAL","true","false","false","true","true","int","2","[]","Optional.empty","\com\android\internal\content\PackageHelper.java"
"RECOMMEND_INSTALL_INTERNAL","true","false","false","true","true","int","1","[]","Optional.empty","\com\android\internal\content\PackageHelper.java"
"APP_INSTALL_INTERNAL","true","false","false","true","true","int","1","[]","Optional.empty","\com\android\internal\content\PackageHelper.java"
"RECOMMEND_FAILED_INVALID_LOCATION","true","false","false","true","true","int","-3","[]","Optional.empty","\com\android\internal\content\PackageHelper.java"
"RECOMMEND_INSTALL_EXTERNAL","true","false","false","true","true","int","2","[]","Optional.empty","\com\android\internal\content\PackageHelper.java"
"APP_INSTALL_AUTO","true","false","false","true","true","int","0","[]","Optional[// App installation location settings values
]","\com\android\internal\content\PackageHelper.java"
"RECOMMEND_FAILED_INSUFFICIENT_STORAGE","true","false","false","true","true","int","-1","[]","Optional.empty","\com\android\internal\content\PackageHelper.java"
"RECOMMEND_FAILED_ALREADY_EXISTS","true","false","false","true","true","int","-4","[]","Optional.empty","\com\android\internal\content\PackageHelper.java"
"TAG","false","false","true","true","true","String","""PackageHelper""","[]","Optional.empty","\com\android\internal\content\PackageHelper.java"
"RECOMMEND_FAILED_INVALID_APK","true","false","false","true","true","int","-2","[]","Optional.empty","\com\android\internal\content\PackageHelper.java"
"localLOGV","false","false","true","true","true","boolean","true","[]","Optional.empty","\com\android\internal\content\PackageHelper.java"
"RECOMMEND_MEDIA_UNAVAILABLE","true","false","false","true","true","int","-5","[]","Optional.empty","\com\android\internal\content\PackageHelper.java"
"mOnTabChangeListener","false","false","true","false","false","OnTabChangeListener","null","[]","Optional.empty","\android\widget\TabHost.java"
"mTabKeyListener","false","false","true","false","false","OnKeyListener","null","[]","Optional.empty","\android\widget\TabHost.java"
"mContentStrategy","false","false","true","false","false","ContentStrategy","null","[]","Optional.empty","\android\widget\TabHost.java"
"mView","false","false","true","false","true","View","null","[]","Optional.empty","\android\widget\TabHost.java"
"mIcon","false","false","true","false","true","Drawable","null","[]","Optional.empty","\android\widget\TabHost.java"
"mLocalActivityManager","false","true","false","false","false","LocalActivityManager","null","[]","Optional[/**
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\widget\TabHost.java"
"mTabWidget","false","false","true","false","false","TabWidget","null","[]","Optional.empty","\android\widget\TabHost.java"
"mLabel","false","false","true","false","true","CharSequence","null","[]","Optional.empty","\android\widget\TabHost.java"
"mFactory","false","false","true","false","false","TabContentFactory","null","[]","Optional.empty","\android\widget\TabHost.java"
"mCurrentTab","false","true","false","false","false","int","-1","[]","Optional[/**
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\widget\TabHost.java"
"mCurrentView","false","false","true","false","false","View","null","[]","Optional.empty","\android\widget\TabHost.java"
"mTabContent","false","false","true","false","false","View","null","[]","Optional.empty","\android\widget\TabHost.java"
"mTabSpecs","false","false","true","false","false","List<TabSpec>","new ArrayList<TabSpec>(2)","[]","Optional.empty","\android\widget\TabHost.java"
"mIndicatorStrategy","false","false","true","false","false","IndicatorStrategy","null","[]","Optional.empty","\android\widget\TabHost.java"
"mLaunchedView","false","false","true","false","false","View","null","[]","Optional.empty","\android\widget\TabHost.java"
"mIntent","false","false","true","false","true","Intent","null","[]","Optional.empty","\android\widget\TabHost.java"
"mTag","false","false","true","false","true","String","null","[]","Optional.empty","\android\widget\TabHost.java"
"CREATOR","true","false","false","true","true","Creator<Account>","new Creator<Account>() {

    public Account createFromParcel(Parcel source) {
        return new Account(source);
    }

    public Account[] newArray(int size) {
        return new Account[size];
    }
}","[]","Optional.empty","\android\accounts\Account.java"
"name","true","false","false","false","true","String","null","[]","Optional.empty","\android\accounts\Account.java"
"type","true","false","false","false","true","String","null","[]","Optional.empty","\android\accounts\Account.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<SavedState>","new Parcelable.Creator<SavedState>() {

    public SavedState createFromParcel(Parcel in) {
        return new SavedState(in);
    }

    public SavedState[] newArray(int size) {
        return new SavedState[size];
    }
}","[]","Optional.empty","\android\preference\CheckBoxPreference.java"
"mChecked","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\preference\CheckBoxPreference.java"
"mSummaryOn","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\preference\CheckBoxPreference.java"
"mAccessibilityManager","false","false","true","false","false","AccessibilityManager","null","[]","Optional.empty","\android\preference\CheckBoxPreference.java"
"mSummaryOff","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\preference\CheckBoxPreference.java"
"mDisableDependentsState","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\preference\CheckBoxPreference.java"
"checked","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\preference\CheckBoxPreference.java"
"mSendAccessibilityEventViewClickedType","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\preference\CheckBoxPreference.java"
"mOneByte","false","false","true","false","false","byte","new byte[1]","[]","Optional.empty","\android\speech\srec\MicrophoneInputStream.java"
"mAudioRecord","false","false","true","false","false","int","0","[]","Optional.empty","\android\speech\srec\MicrophoneInputStream.java"
"TAG","false","false","true","true","true","String","""MicrophoneInputStream""","[]","Optional.empty","\android\speech\srec\MicrophoneInputStream.java"
"mFlags","false","false","true","false","false","int","0","[]","Optional.empty","\android\view\animation\AnimationSet.java"
"PROPERTY_START_OFFSET_MASK","false","false","true","true","true","int","0x8","[]","Optional.empty","\android\view\animation\AnimationSet.java"
"PROPERTY_CHANGE_BOUNDS_MASK","false","false","true","true","true","int","0x80","[]","Optional.empty","\android\view\animation\AnimationSet.java"
"PROPERTY_MORPH_MATRIX_MASK","false","false","true","true","true","int","0x40","[]","Optional.empty","\android\view\animation\AnimationSet.java"
"mLastEnd","false","false","true","false","false","long","null","[]","Optional.empty","\android\view\animation\AnimationSet.java"
"PROPERTY_DURATION_MASK","false","false","true","true","true","int","0x20","[]","Optional.empty","\android\view\animation\AnimationSet.java"
"PROPERTY_SHARE_INTERPOLATOR_MASK","false","false","true","true","true","int","0x10","[]","Optional.empty","\android\view\animation\AnimationSet.java"
"PROPERTY_REPEAT_MODE_MASK","false","false","true","true","true","int","0x4","[]","Optional.empty","\android\view\animation\AnimationSet.java"
"PROPERTY_FILL_BEFORE_MASK","false","false","true","true","true","int","0x2","[]","Optional.empty","\android\view\animation\AnimationSet.java"
"mAnimations","false","false","true","false","false","ArrayList<Animation>","new ArrayList<Animation>()","[]","Optional.empty","\android\view\animation\AnimationSet.java"
"PROPERTY_FILL_AFTER_MASK","false","false","true","true","true","int","0x1","[]","Optional.empty","\android\view\animation\AnimationSet.java"
"mTempTransformation","false","false","true","false","false","Transformation","new Transformation()","[]","Optional.empty","\android\view\animation\AnimationSet.java"
"mStoredOffsets","false","false","true","false","false","long","null","[]","Optional.empty","\android\view\animation\AnimationSet.java"
"DATABASE_VERSION","false","false","true","true","true","int","2 * 256","[]","Optional[// 1->2   added UNIQUE constraint to display1 column
]","\android\content\SearchRecentSuggestionsProvider.java"
"mSuggestionsUri","false","false","true","false","false","Uri","null","[]","Optional.empty","\android\content\SearchRecentSuggestionsProvider.java"
"mTwoLineDisplay","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\content\SearchRecentSuggestionsProvider.java"
"URI_MATCH_SUGGEST","false","false","true","true","true","int","1","[]","Optional[// Uri and query support
]","\android\content\SearchRecentSuggestionsProvider.java"
"NULL_COLUMN","false","false","true","true","true","String","""query""","[]","Optional.empty","\android\content\SearchRecentSuggestionsProvider.java"
"DATABASE_MODE_QUERIES","true","false","false","true","true","int","1","[]","Optional[/**
 * This mode bit configures the database to record recent queries.  <i>required</i>
 *
 * @see #setupSuggestions(String, int)
 */
]","\android\content\SearchRecentSuggestionsProvider.java"
"mUriMatcher","false","false","true","false","false","UriMatcher","null","[]","Optional.empty","\android\content\SearchRecentSuggestionsProvider.java"
"mSuggestSuggestionClause","false","false","true","false","false","String","null","[]","Optional.empty","\android\content\SearchRecentSuggestionsProvider.java"
"mSuggestionProjection","false","false","true","false","false","String","null","[]","Optional.empty","\android\content\SearchRecentSuggestionsProvider.java"
"sSuggestions","false","false","true","true","true","String","""suggestions""","[]","Optional.empty","\android\content\SearchRecentSuggestionsProvider.java"
"ORDER_BY","false","false","true","true","true","String","""date DESC""","[]","Optional.empty","\android\content\SearchRecentSuggestionsProvider.java"
"DATABASE_MODE_2LINES","true","false","false","true","true","int","2","[]","Optional[/**
 * This mode bit configures the database to include a 2nd annotation line with each entry.
 * <i>optional</i>
 *
 * @see #setupSuggestions(String, int)
 */
]","\android\content\SearchRecentSuggestionsProvider.java"
"TAG","false","false","true","true","true","String","""SuggestionsProvider""","[]","Optional[// debugging support
]","\android\content\SearchRecentSuggestionsProvider.java"
"mMode","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\SearchRecentSuggestionsProvider.java"
"mOpenHelper","false","false","true","false","false","SQLiteOpenHelper","null","[]","Optional[// general database configuration and tables
]","\android\content\SearchRecentSuggestionsProvider.java"
"sDatabaseName","false","false","true","true","true","String","""suggestions.db""","[]","Optional.empty","\android\content\SearchRecentSuggestionsProvider.java"
"mNewVersion","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\SearchRecentSuggestionsProvider.java"
"mAuthority","false","false","true","false","false","String","null","[]","Optional[// client-provided configuration values
]","\android\content\SearchRecentSuggestionsProvider.java"
"mWebViewCore","false","false","true","false","true","WebViewCore","null","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"POLICY_FUNCTION","false","false","false","true","true","int","1003","[]","Optional[// a message posted when the user decides the policy
]","\android\webkit\BrowserFrame.java"
"FRAME_LOADTYPE_RELOAD","false","false","false","true","true","int","4","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"mLoadInitFromJava","false","false","false","false","false","boolean","null","[]","Optional[/* package */
]","\android\webkit\BrowserFrame.java"
"mLoadType","false","false","true","false","false","int","null","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"FRAME_LOADTYPE_INDEXEDBACKFORWARD","false","false","false","true","true","int","3","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"mCommitted","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"mJSInterfaceMap","false","false","true","false","false","Map<String,Object>","null","[]","Optional[// Attached Javascript interfaces
]","\android\webkit\BrowserFrame.java"
"mDatabase","false","false","true","false","true","WebViewDatabase","null","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"SUBMIT_LABEL","false","false","true","true","true","int","6","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"FRAME_LOADTYPE_BACK","false","false","false","true","true","int","1","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"sConfigCallback","false","false","false","true","false","ConfigCallback","null","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"mHandlers","false","false","true","false","true","ArrayList<WeakReference<Handler>>","new ArrayList<WeakReference<Handler>>()","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"FRAME_LOADTYPE_REPLACE","false","false","false","true","true","int","8","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"mWindowManager","false","false","true","false","true","WindowManager","null","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"sJavaBridge","false","false","false","true","false","JWebCoreJavaBridge","null","[]","Optional[// requests from WebCore.
]","\android\webkit\BrowserFrame.java"
"TRANSITION_SWITCH_THRESHOLD","false","false","true","true","true","int","75","[]","Optional[// A progress threshold to switch from history Picture to live Picture
]","\android\webkit\BrowserFrame.java"
"POLICY_USE","false","false","false","true","true","int","0","[]","Optional[// XXX: Must match PolicyAction in FrameLoaderTypes.h in webcore
]","\android\webkit\BrowserFrame.java"
"RESET_LABEL","false","false","true","true","true","int","5","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"mBlockMessages","false","false","true","false","false","boolean","false","[]","Optional[// queue has been cleared,they are ignored.
]","\android\webkit\BrowserFrame.java"
"mSettings","false","false","true","false","true","WebSettings","null","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"FILE_UPLOAD_LABEL","false","false","true","true","true","int","4","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"mOrientation","false","false","true","false","false","int","-1","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"ORIENTATION_CHANGED","false","false","false","true","true","int","1002","[]","Optional[// orientation change message
]","\android\webkit\BrowserFrame.java"
"FRAME_LOADTYPE_SAME","false","false","false","true","true","int","6","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"mFirstLayoutDone","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"FRAME_LOADTYPE_REDIRECT","false","false","false","true","true","int","7","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"FRAME_LOADTYPE_RELOADALLOWINGSTALEDATA","false","false","false","true","true","int","5","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"MAX_OUTSTANDING_REQUESTS","false","false","true","true","true","int","300","[]","Optional[/**
 * Cap the number of LoadListeners that will be instantiated, so
 * we don't blow the GREF count.  Attempting to queue more than
 * this many requests will prompt an error() callback on the
 * request's LoadListener
 */
]","\android\webkit\BrowserFrame.java"
"mIsMainFrame","false","false","true","false","false","boolean","null","[]","Optional[// Is this frame the main frame?
]","\android\webkit\BrowserFrame.java"
"DRAWABLEDIR","false","false","true","true","true","int","3","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"FRAME_COMPLETED","false","false","false","true","true","int","1001","[]","Optional[// a message posted when a frame loading is completed
]","\android\webkit\BrowserFrame.java"
"POLICY_IGNORE","false","false","false","true","true","int","2","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"FRAME_LOADTYPE_FORWARD","false","false","false","true","true","int","2","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"FRAME_LOADTYPE_STANDARD","false","false","false","true","true","int","0","[]","Optional[// Note: need to keep these in sync with FrameLoaderTypes.h in native
]","\android\webkit\BrowserFrame.java"
"mNativeFrame","false","false","false","false","false","int","null","[]","Optional[/*package*/
]","\android\webkit\BrowserFrame.java"
"NODOMAIN","false","false","true","true","true","int","1","[]","Optional[// These ids need to be in sync with enum rawResId in PlatformBridge.h
]","\android\webkit\BrowserFrame.java"
"LOGTAG","false","false","true","true","true","String","""webkit""","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"mCallbackProxy","false","false","true","false","true","CallbackProxy","null","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"LOADERROR","false","false","true","true","true","int","2","[]","Optional.empty","\android\webkit\BrowserFrame.java"
"DOWN","false","false","true","true","true","int","3","[]","Optional.empty","\android\text\method\LinkMovementMethod.java"
"UP","false","false","true","true","true","int","2","[]","Optional.empty","\android\text\method\LinkMovementMethod.java"
"FROM_BELOW","false","false","true","true","false","Object","new NoCopySpan.Concrete()","[]","Optional.empty","\android\text\method\LinkMovementMethod.java"
"CLICK","false","false","true","true","true","int","1","[]","Optional.empty","\android\text\method\LinkMovementMethod.java"
"sInstance","false","false","true","true","false","LinkMovementMethod","null","[]","Optional.empty","\android\text\method\LinkMovementMethod.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<SavedState>","new Parcelable.Creator<SavedState>() {

    public SavedState createFromParcel(Parcel in) {
        return new SavedState(in);
    }

    public SavedState[] newArray(int size) {
        return new SavedState[size];
    }
}","[]","Optional.empty","\android\widget\AbsSpinner.java"
"mTouchFrame","false","false","true","false","false","Rect","null","[]","Optional[/**
 * Temporary frame to hold a child View's frame rectangle
 */
]","\android\widget\AbsSpinner.java"
"mRecycler","false","false","false","false","true","RecycleBin","new RecycleBin()","[]","Optional.empty","\android\widget\AbsSpinner.java"
"mWidthMeasureSpec","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\AbsSpinner.java"
"mSelectionTopPadding","false","false","false","false","false","int","0","[]","Optional.empty","\android\widget\AbsSpinner.java"
"selectedId","false","false","false","false","false","long","null","[]","Optional.empty","\android\widget\AbsSpinner.java"
"mSelectionLeftPadding","false","false","false","false","false","int","0","[]","Optional.empty","\android\widget\AbsSpinner.java"
"mBlockLayoutRequests","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\widget\AbsSpinner.java"
"mScrapHeap","false","false","true","false","true","SparseArray<View>","new SparseArray<View>()","[]","Optional.empty","\android\widget\AbsSpinner.java"
"mHeightMeasureSpec","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\AbsSpinner.java"
"mSpinnerPadding","false","false","false","false","true","Rect","new Rect()","[]","Optional.empty","\android\widget\AbsSpinner.java"
"mSelectionBottomPadding","false","false","false","false","false","int","0","[]","Optional.empty","\android\widget\AbsSpinner.java"
"mAdapter","false","false","false","false","false","SpinnerAdapter","null","[]","Optional.empty","\android\widget\AbsSpinner.java"
"position","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\AbsSpinner.java"
"mSelectionRightPadding","false","false","false","false","false","int","0","[]","Optional.empty","\android\widget\AbsSpinner.java"
"mDataSetObserver","false","false","true","false","false","DataSetObserver","null","[]","Optional.empty","\android\widget\AbsSpinner.java"
"vector","false","false","false","false","true","float","null","[]","Optional[// the feature vector
]","\android\gesture\Instance.java"
"ORIENTATIONS","false","false","true","true","true","float","{ 0, (float) (Math.PI / 4), (float) (Math.PI / 2), (float) (Math.PI * 3 / 4), (float) Math.PI, -0, (float) (-Math.PI / 4), (float) (-Math.PI / 2), (float) (-Math.PI * 3 / 4), (float) -Math.PI }","[]","Optional.empty","\android\gesture\Instance.java"
"label","false","false","false","false","true","String","null","[]","Optional[// the label can be null
]","\android\gesture\Instance.java"
"PATCH_SAMPLE_SIZE","false","false","true","true","true","int","16","[]","Optional.empty","\android\gesture\Instance.java"
"id","false","false","false","false","true","long","null","[]","Optional[// the id of the instance
]","\android\gesture\Instance.java"
"SEQUENCE_SAMPLE_SIZE","false","false","true","true","true","int","16","[]","Optional.empty","\android\gesture\Instance.java"
"CREATOR","true","false","false","true","true","Creator<PeriodicSync>","new Creator<PeriodicSync>() {

    public PeriodicSync createFromParcel(Parcel source) {
        return new PeriodicSync(Account.CREATOR.createFromParcel(source), source.readString(), source.readBundle(), source.readLong());
    }

    public PeriodicSync[] newArray(int size) {
        return new PeriodicSync[size];
    }
}","[]","Optional.empty","\android\content\PeriodicSync.java"
"authority","true","false","false","false","true","String","null","[]","Optional[/**
 * The authority of the sync
 */
]","\android\content\PeriodicSync.java"
"period","true","false","false","false","true","long","null","[]","Optional[/**
 * How frequently the sync should be scheduled, in seconds.
 */
]","\android\content\PeriodicSync.java"
"extras","true","false","false","false","true","Bundle","null","[]","Optional[/**
 * Any extras that parameters that are to be passed to the sync adapter.
 */
]","\android\content\PeriodicSync.java"
"account","true","false","false","false","true","Account","null","[]","Optional[/**
 * The account to be synced
 */
]","\android\content\PeriodicSync.java"
"CONTENT_TYPE","false","false","true","true","true","String","""content-type""","[]","Optional.empty","\android\webkit\FrameLoader.java"
"mReferrer","false","false","true","false","false","String","null","[]","Optional.empty","\android\webkit\FrameLoader.java"
"mContentType","false","false","true","false","false","String","null","[]","Optional.empty","\android\webkit\FrameLoader.java"
"mMethod","false","false","true","false","true","String","null","[]","Optional.empty","\android\webkit\FrameLoader.java"
"mNetwork","false","false","true","false","false","Network","null","[]","Optional.empty","\android\webkit\FrameLoader.java"
"mSettings","false","false","true","false","true","WebSettings","null","[]","Optional.empty","\android\webkit\FrameLoader.java"
"URI_PROTOCOL","false","false","true","true","true","int","0x100","[]","Optional.empty","\android\webkit\FrameLoader.java"
"mListener","false","false","true","false","true","LoadListener","null","[]","Optional.empty","\android\webkit\FrameLoader.java"
"HEADER_STR","false","false","false","true","true","String","""text/xml, text/html, "" + ""application/xhtml+xml, image/png, text/plain, */*;q=0.8""","[]","Optional.empty","\android\webkit\FrameLoader.java"
"mAboutBlank","false","false","true","true","true","String","""<!DOCTYPE html PUBLIC \""-//W3C//DTD HTML 4.01 Transitional//EB\"">"" + ""<html><head><title>about:blank</title></head><body></body></html>""","[]","Optional[// Contents of an about:blank page
]","\android\webkit\FrameLoader.java"
"mHeaders","false","false","true","false","false","Map<String,String>","null","[]","Optional.empty","\android\webkit\FrameLoader.java"
"mPostData","false","false","true","false","false","byte","null","[]","Optional.empty","\android\webkit\FrameLoader.java"
"mCacheMode","false","false","true","false","false","int","null","[]","Optional.empty","\android\webkit\FrameLoader.java"
"LOGTAG","false","false","true","true","true","String","""webkit""","[]","Optional.empty","\android\webkit\FrameLoader.java"
"contentTypes","false","false","false","true","true","String","{ ""*/*"", /* 0x00 */
""text/*"", /* 0x01 */
""text/html"", /* 0x02 */
""text/plain"", /* 0x03 */
""text/x-hdml"", /* 0x04 */
""text/x-ttml"", /* 0x05 */
""text/x-vCalendar"", /* 0x06 */
""text/x-vCard"", /* 0x07 */
""text/vnd.wap.wml"", /* 0x08 */
""text/vnd.wap.wmlscript"", /* 0x09 */
""text/vnd.wap.wta-event"", /* 0x0A */
""multipart/*"", /* 0x0B */
""multipart/mixed"", /* 0x0C */
""multipart/form-data"", /* 0x0D */
""multipart/byterantes"", /* 0x0E */
""multipart/alternative"", /* 0x0F */
""application/*"", /* 0x10 */
""application/java-vm"", /* 0x11 */
""application/x-www-form-urlencoded"", /* 0x12 */
""application/x-hdmlc"", /* 0x13 */
""application/vnd.wap.wmlc"", /* 0x14 */
""application/vnd.wap.wmlscriptc"", /* 0x15 */
""application/vnd.wap.wta-eventc"", /* 0x16 */
""application/vnd.wap.uaprof"", /* 0x17 */
""application/vnd.wap.wtls-ca-certificate"", /* 0x18 */
""application/vnd.wap.wtls-user-certificate"", /* 0x19 */
""application/x-x509-ca-cert"", /* 0x1A */
""application/x-x509-user-cert"", /* 0x1B */
""image/*"", /* 0x1C */
""image/gif"", /* 0x1D */
""image/jpeg"", /* 0x1E */
""image/tiff"", /* 0x1F */
""image/png"", /* 0x20 */
""image/vnd.wap.wbmp"", /* 0x21 */
""application/vnd.wap.multipart.*"", /* 0x22 */
""application/vnd.wap.multipart.mixed"", /* 0x23 */
""application/vnd.wap.multipart.form-data"", /* 0x24 */
""application/vnd.wap.multipart.byteranges"", /* 0x25 */
""application/vnd.wap.multipart.alternative"", /* 0x26 */
""application/xml"", /* 0x27 */
""text/xml"", /* 0x28 */
""application/vnd.wap.wbxml"", /* 0x29 */
""application/x-x968-cross-cert"", /* 0x2A */
""application/x-x968-ca-cert"", /* 0x2B */
""application/x-x968-user-cert"", /* 0x2C */
""text/vnd.wap.si"", /* 0x2D */
""application/vnd.wap.sic"", /* 0x2E */
""text/vnd.wap.sl"", /* 0x2F */
""application/vnd.wap.slc"", /* 0x30 */
""text/vnd.wap.co"", /* 0x31 */
""application/vnd.wap.coc"", /* 0x32 */
""application/vnd.wap.multipart.related"", /* 0x33 */
""application/vnd.wap.sia"", /* 0x34 */
""text/vnd.wap.connectivity-xml"", /* 0x35 */
""application/vnd.wap.connectivity-wbxml"", /* 0x36 */
""application/pkcs7-mime"", /* 0x37 */
""application/vnd.wap.hashed-certificate"", /* 0x38 */
""application/vnd.wap.signed-certificate"", /* 0x39 */
""application/vnd.wap.cert-response"", /* 0x3A */
""application/xhtml+xml"", /* 0x3B */
""application/wml+xml"", /* 0x3C */
""text/css"", /* 0x3D */
""application/vnd.wap.mms-message"", /* 0x3E */
""application/vnd.wap.rollover-certificate"", /* 0x3F */
""application/vnd.wap.locc+wbxml"", /* 0x40 */
""application/vnd.wap.loc+xml"", /* 0x41 */
""application/vnd.syncml.dm+wbxml"", /* 0x42 */
""application/vnd.syncml.dm+xml"", /* 0x43 */
""application/vnd.syncml.notification"", /* 0x44 */
""application/vnd.wap.xhtml+xml"", /* 0x45 */
""application/vnd.wv.csp.cir"", /* 0x46 */
""application/vnd.oma.dd+xml"", /* 0x47 */
""application/vnd.oma.drm.message"", /* 0x48 */
""application/vnd.oma.drm.content"", /* 0x49 */
""application/vnd.oma.drm.rights+xml"", /* 0x4A */
""application/vnd.oma.drm.rights+wbxml"", /* 0x4B */
""application/vnd.wv.csp+xml"", /* 0x4C */
""application/vnd.wv.csp+wbxml"", /* 0x4D */
""application/vnd.syncml.ds.notification"", /* 0x4E */
""audio/*"", /* 0x4F */
""video/*"", /* 0x50 */
""application/vnd.oma.dd2+xml"", /* 0x51 */
""application/mikey"" }","[]","Optional[/**
 * All content types. From:
 * http://www.openmobilealliance.org/tech/omna/omna-wsp-content-type.htm
 */
]","\com\google\android\mms\pdu\PduContentTypes.java"
"MODE_INVALID","true","false","false","true","true","short","0xff","[]","Optional[/**
 * Invalid target type.
 */
]","\com\android\internal\nfc\P2pDevice.java"
"MODE_P2P_INITIATOR","true","false","false","true","true","short","0x01","[]","Optional[/**
 * Peer-to-Peer Initiator.
 */
]","\com\android\internal\nfc\P2pDevice.java"
"MODE_P2P_TARGET","true","false","false","true","true","short","0x00","[]","Optional[/**
 * Peer-to-Peer Target.
 */
]","\com\android\internal\nfc\P2pDevice.java"
"isClosed","false","true","false","false","false","boolean","false","[]","Optional[/**
 * Flag set when the object is closed and thus not usable any more.
 */
]","\com\android\internal\nfc\P2pDevice.java"
"mHandle","false","true","false","false","false","int","null","[]","Optional[/**
 * Target handle, used by native calls.
 */
]","\com\android\internal\nfc\P2pDevice.java"
"parent","false","false","true","false","false","Keyboard","null","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"KEY_STATE_NORMAL_ON","false","false","true","true","true","int","{ android.R.attr.state_checkable, android.R.attr.state_checked }","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"height","true","false","false","false","false","int","null","[]","Optional[/**
 * Height of the key, not including the gap
 */
]","\android\inputmethodservice\Keyboard.java"
"mDefaultHeight","false","false","true","false","false","int","null","[]","Optional[/**
 * Default key height
 */
]","\android\inputmethodservice\Keyboard.java"
"mKeys","false","false","true","false","false","List<Key>","null","[]","Optional[/**
 * List of keys in this keyboard
 */
]","\android\inputmethodservice\Keyboard.java"
"mTotalHeight","false","false","true","false","false","int","null","[]","Optional[/**
 * Total height of the keyboard, including the padding and keys
 */
]","\android\inputmethodservice\Keyboard.java"
"icon","true","false","false","false","false","Drawable","null","[]","Optional[/**
 * Icon to display instead of a label. Icon takes precedence over a label
 */
]","\android\inputmethodservice\Keyboard.java"
"EDGE_TOP","true","false","false","true","true","int","0x04","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"verticalGap","true","false","false","false","false","int","null","[]","Optional[/**
 * Vertical gap following this row.
 */
]","\android\inputmethodservice\Keyboard.java"
"mShiftKeyIndex","false","false","true","false","false","int","-1","[]","Optional[/**
 * Key index for the shift key, if present
 */
]","\android\inputmethodservice\Keyboard.java"
"mKeyWidth","false","false","true","false","false","int","null","[]","Optional[/**
 * Current key width, while loading the keyboard
 */
]","\android\inputmethodservice\Keyboard.java"
"repeatable","true","false","false","false","false","boolean","null","[]","Optional[/**
 * Whether this key repeats itself when held down
 */
]","\android\inputmethodservice\Keyboard.java"
"mDisplayWidth","false","false","true","false","false","int","null","[]","Optional[/**
 * Width of the screen available to fit the keyboard
 */
]","\android\inputmethodservice\Keyboard.java"
"KEY_STATE_PRESSED","false","false","true","true","true","int","{ android.R.attr.state_pressed }","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"KEY_STATE_NORMAL","false","false","true","true","true","int","{}","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"EDGE_LEFT","true","false","false","true","true","int","0x01","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"defaultHorizontalGap","true","false","false","false","false","int","null","[]","Optional[/**
 * Default horizontal gap between keys in this row.
 */
]","\android\inputmethodservice\Keyboard.java"
"x","true","false","false","false","false","int","null","[]","Optional[/**
 * X coordinate of the key in the keyboard layout
 */
]","\android\inputmethodservice\Keyboard.java"
"SEARCH_DISTANCE","false","false","true","true","false","float","1.8f","[]","Optional[/**
 * Number of key widths from current touch point to search for nearest keys.
 */
]","\android\inputmethodservice\Keyboard.java"
"y","true","false","false","false","false","int","null","[]","Optional[/**
 * Y coordinate of the key in the keyboard layout
 */
]","\android\inputmethodservice\Keyboard.java"
"KEYCODE_CANCEL","true","false","false","true","true","int","-3","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"mDisplayHeight","false","false","true","false","false","int","null","[]","Optional[/**
 * Height of the screen
 */
]","\android\inputmethodservice\Keyboard.java"
"EDGE_BOTTOM","true","false","false","true","true","int","0x08","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"mTotalWidth","false","false","true","false","false","int","null","[]","Optional[/**
 * Total width of the keyboard, including left side gaps and keys, but not any gaps on the
 * right side.
 */
]","\android\inputmethodservice\Keyboard.java"
"defaultHeight","true","false","false","false","false","int","null","[]","Optional[/**
 * Default height of a key in this row.
 */
]","\android\inputmethodservice\Keyboard.java"
"GRID_HEIGHT","false","false","true","true","true","int","5","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"KEYCODE_SHIFT","true","false","false","true","true","int","-1","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"EDGE_RIGHT","true","false","false","true","true","int","0x02","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"defaultWidth","true","false","false","false","false","int","null","[]","Optional[/**
 * Default width of a key in this row.
 */
]","\android\inputmethodservice\Keyboard.java"
"mProximityThreshold","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"gap","true","false","false","false","false","int","null","[]","Optional[/**
 * The horizontal gap before this key
 */
]","\android\inputmethodservice\Keyboard.java"
"mLabel","false","false","true","false","false","CharSequence","null","[]","Optional[/**
 * Keyboard label *
 */
]","\android\inputmethodservice\Keyboard.java"
"GRID_WIDTH","false","false","true","true","true","int","10","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"KEYCODE_ALT","true","false","false","true","true","int","-6","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"label","true","false","false","false","false","CharSequence","null","[]","Optional[/**
 * Label to display
 */
]","\android\inputmethodservice\Keyboard.java"
"mKeyHeight","false","false","true","false","false","int","null","[]","Optional[/**
 * Current key height, while loading the keyboard
 */
]","\android\inputmethodservice\Keyboard.java"
"KEY_STATE_PRESSED_OFF","false","false","true","true","true","int","{ android.R.attr.state_pressed, android.R.attr.state_checkable }","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"mCellWidth","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"KEY_STATE_NORMAL_OFF","false","false","true","true","true","int","{ android.R.attr.state_checkable }","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"text","true","false","false","false","false","CharSequence","null","[]","Optional[/**
 * Text to output when pressed. This can be multiple characters, like "".com""
 */
]","\android\inputmethodservice\Keyboard.java"
"mCellHeight","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"pressed","true","false","false","false","false","boolean","null","[]","Optional[/**
 * The current pressed state of this key
 */
]","\android\inputmethodservice\Keyboard.java"
"mDefaultVerticalGap","false","false","true","false","false","int","null","[]","Optional[/**
 * Default gap between rows
 */
]","\android\inputmethodservice\Keyboard.java"
"mKeyboardMode","false","false","true","false","false","int","null","[]","Optional[/**
 * Keyboard mode, or zero, if none.
 */
]","\android\inputmethodservice\Keyboard.java"
"edgeFlags","true","false","false","false","false","int","null","[]","Optional[/**
 * Flags that specify the anchoring to edges of the keyboard for detecting touch events
 * that are just out of the boundary of the key. This is a bit mask of
 * {@link Keyboard#EDGE_LEFT}, {@link Keyboard#EDGE_RIGHT}, {@link Keyboard#EDGE_TOP} and
 * {@link Keyboard#EDGE_BOTTOM}.
 */
]","\android\inputmethodservice\Keyboard.java"
"sticky","true","false","false","false","false","boolean","null","[]","Optional[/**
 * Whether this key is sticky, i.e., a toggle key
 */
]","\android\inputmethodservice\Keyboard.java"
"KEYCODE_MODE_CHANGE","true","false","false","true","true","int","-2","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"KEYCODE_DELETE","true","false","false","true","true","int","-5","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"mDefaultWidth","false","false","true","false","false","int","null","[]","Optional[/**
 * Default key width
 */
]","\android\inputmethodservice\Keyboard.java"
"mDefaultHorizontalGap","false","false","true","false","false","int","null","[]","Optional[/**
 * Horizontal gap default for all rows
 */
]","\android\inputmethodservice\Keyboard.java"
"TAG_KEY","false","false","true","true","true","String","""Key""","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"mModifierKeys","false","false","true","false","false","List<Key>","null","[]","Optional[/**
 * List of modifier keys such as Shift & Alt, if any
 */
]","\android\inputmethodservice\Keyboard.java"
"GRID_SIZE","false","false","true","true","true","int","GRID_WIDTH * GRID_HEIGHT","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"width","true","false","false","false","false","int","null","[]","Optional[/**
 * Width of the key, not including the gap
 */
]","\android\inputmethodservice\Keyboard.java"
"TAG","false","false","false","true","true","String","""Keyboard""","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"mShifted","false","false","true","false","false","boolean","null","[]","Optional[/**
 * Is the keyboard in the shifted state
 */
]","\android\inputmethodservice\Keyboard.java"
"codes","true","false","false","false","false","int","null","[]","Optional[/**
 * All the key codes (unicode or custom code) that this key could generate, zero'th
 * being the most important.
 */
]","\android\inputmethodservice\Keyboard.java"
"mGridNeighbors","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"modifier","true","false","false","false","false","boolean","null","[]","Optional[/**
 * Whether this is a modifier key, such as Shift or Alt
 */
]","\android\inputmethodservice\Keyboard.java"
"mode","true","false","false","false","false","int","null","[]","Optional[/**
 * The keyboard mode for this row
 */
]","\android\inputmethodservice\Keyboard.java"
"mShiftKey","false","false","true","false","false","Key","null","[]","Optional[/**
 * Key instance for the shift key, if present
 */
]","\android\inputmethodservice\Keyboard.java"
"TAG_KEYBOARD","false","false","true","true","true","String","""Keyboard""","[]","Optional[// Keyboard XML Tags
]","\android\inputmethodservice\Keyboard.java"
"rowEdgeFlags","true","false","false","false","false","int","null","[]","Optional[/**
 * Edge flags for this row of keys. Possible values that can be assigned are
 * {@link Keyboard#EDGE_TOP EDGE_TOP} and {@link Keyboard#EDGE_BOTTOM EDGE_BOTTOM}
 */
]","\android\inputmethodservice\Keyboard.java"
"popupResId","true","false","false","false","false","int","null","[]","Optional[/**
 * If this key pops up a mini keyboard, this is the resource id for the XML layout for that
 * keyboard.
 */
]","\android\inputmethodservice\Keyboard.java"
"on","true","false","false","false","false","boolean","null","[]","Optional[/**
 * If this is a sticky key, is it on?
 */
]","\android\inputmethodservice\Keyboard.java"
"keyboard","false","false","true","false","false","Keyboard","null","[]","Optional[/**
 * The keyboard that this key belongs to
 */
]","\android\inputmethodservice\Keyboard.java"
"KEYCODE_DONE","true","false","false","true","true","int","-4","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"iconPreview","true","false","false","false","false","Drawable","null","[]","Optional[/**
 * Preview version of the icon, for the preview popup
 */
]","\android\inputmethodservice\Keyboard.java"
"KEY_STATE_PRESSED_ON","false","false","true","true","true","int","{ android.R.attr.state_pressed, android.R.attr.state_checkable, android.R.attr.state_checked }","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"TAG_ROW","false","false","true","true","true","String","""Row""","[]","Optional.empty","\android\inputmethodservice\Keyboard.java"
"popupCharacters","true","false","false","false","false","CharSequence","null","[]","Optional[/**
 * Popup characters
 */
]","\android\inputmethodservice\Keyboard.java"
"mChecked","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\CheckedTextView.java"
"mBasePaddingRight","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\CheckedTextView.java"
"mCheckMarkResource","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\CheckedTextView.java"
"mCheckMarkDrawable","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\CheckedTextView.java"
"mCheckMarkWidth","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\CheckedTextView.java"
"CHECKED_STATE_SET","false","false","true","true","true","int","{ R.attr.state_checked }","[]","Optional.empty","\android\widget\CheckedTextView.java"
"NXP_MANUFACTURER_ID","false","false","true","true","true","int","0x04","[]","Optional.empty","\android\nfc\tech\MifareUltralight.java"
"PAGE_SIZE","true","false","false","true","true","int","4","[]","Optional[/**
 * Size of a MIFARE Ultralight page in bytes
 */
]","\android\nfc\tech\MifareUltralight.java"
"TYPE_ULTRALIGHT","true","false","false","true","true","int","1","[]","Optional[/**
 * A MIFARE Ultralight tag
 */
]","\android\nfc\tech\MifareUltralight.java"
"TYPE_ULTRALIGHT_C","true","false","false","true","true","int","2","[]","Optional[/**
 * A MIFARE Ultralight C tag
 */
]","\android\nfc\tech\MifareUltralight.java"
"mType","false","false","true","false","false","int","null","[]","Optional.empty","\android\nfc\tech\MifareUltralight.java"
"MAX_PAGE_COUNT","false","false","true","true","true","int","256","[]","Optional.empty","\android\nfc\tech\MifareUltralight.java"
"TYPE_UNKNOWN","true","false","false","true","true","int","-1","[]","Optional[/**
 * A MIFARE Ultralight compatible tag of unknown type
 */
]","\android\nfc\tech\MifareUltralight.java"
"URI_STR","false","false","true","true","true","String","""uri""","[]","Optional.empty","\android\content\DefaultDataHandler.java"
"POSTFIX","false","false","true","true","true","String","""postfix""","[]","Optional.empty","\android\content\DefaultDataHandler.java"
"ARG","false","false","true","true","true","String","""arg""","[]","Optional.empty","\android\content\DefaultDataHandler.java"
"mContentResolver","false","false","true","false","false","ContentResolver","null","[]","Optional.empty","\android\content\DefaultDataHandler.java"
"mUris","false","false","true","false","false","Stack<Uri>","new Stack<Uri>()","[]","Optional.empty","\android\content\DefaultDataHandler.java"
"COL","false","false","true","true","true","String","""col""","[]","Optional.empty","\android\content\DefaultDataHandler.java"
"SELECT","false","false","true","true","true","String","""select""","[]","Optional.empty","\android\content\DefaultDataHandler.java"
"ROW","false","false","true","true","true","String","""row""","[]","Optional.empty","\android\content\DefaultDataHandler.java"
"mValues","false","false","true","false","false","ContentValues","null","[]","Optional.empty","\android\content\DefaultDataHandler.java"
"DEL","false","false","true","true","true","String","""del""","[]","Optional.empty","\android\content\DefaultDataHandler.java"
"NAVIGATION_LEFT","true","false","false","true","true","int","1","[]","Optional.empty","\android\view\SoundEffectConstants.java"
"NAVIGATION_RIGHT","true","false","false","true","true","int","3","[]","Optional.empty","\android\view\SoundEffectConstants.java"
"CLICK","true","false","false","true","true","int","0","[]","Optional.empty","\android\view\SoundEffectConstants.java"
"NAVIGATION_DOWN","true","false","false","true","true","int","4","[]","Optional.empty","\android\view\SoundEffectConstants.java"
"NAVIGATION_UP","true","false","false","true","true","int","2","[]","Optional.empty","\android\view\SoundEffectConstants.java"
"SOURCE_CLASS_POINTER","true","false","false","true","true","int","0x00000002","[]","Optional[/**
 * The input source is a pointing device associated with a display.
 * Examples: {@link #SOURCE_TOUCHSCREEN}, {@link #SOURCE_MOUSE}.
 *
 * A {@link MotionEvent} should be interpreted as absolute coordinates in
 * display units according to the {@link View} hierarchy.  Pointer down/up indicated when
 * the finger touches the display or when the selection button is pressed/released.
 *
 * Use {@link #getMotionRange} to query the range of the pointing device.  Some devices permit
 * touches outside the display area so the effective range may be somewhat smaller or larger
 * than the actual display size.
 */
]","\android\view\InputDevice.java"
"KEYBOARD_TYPE_NON_ALPHABETIC","true","false","false","true","true","int","1","[]","Optional[/**
 * The keyboard is not fully alphabetic.  It may be a numeric keypad or an assortment
 * of buttons that are not mapped as alphabetic keys suitable for text input.
 */
]","\android\view\InputDevice.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<InputDevice>","new Parcelable.Creator<InputDevice>() {

    public InputDevice createFromParcel(Parcel in) {
        InputDevice result = new InputDevice();
        result.readFromParcel(in);
        return result;
    }

    public InputDevice[] newArray(int size) {
        return new InputDevice[size];
    }
}","[]","Optional.empty","\android\view\InputDevice.java"
"SOURCE_KEYBOARD","true","false","false","true","true","int","0x00000100 | SOURCE_CLASS_BUTTON","[]","Optional[/**
 * The input source is a keyboard.
 *
 * @see #SOURCE_CLASS_BUTTON
 */
]","\android\view\InputDevice.java"
"SOURCE_TOUCHPAD","true","false","false","true","true","int","0x00100000 | SOURCE_CLASS_POSITION","[]","Optional[/**
 * The input source is a touch pad or digitizer tablet that is not
 * associated with a display (unlike {@link #SOURCE_TOUCHSCREEN}).
 *
 * @see #SOURCE_CLASS_POSITION
 */
]","\android\view\InputDevice.java"
"SOURCE_DPAD","true","false","false","true","true","int","0x00000200 | SOURCE_CLASS_BUTTON","[]","Optional[/**
 * The input source is a DPad.
 *
 * @see #SOURCE_CLASS_BUTTON
 */
]","\android\view\InputDevice.java"
"mId","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\InputDevice.java"
"SOURCE_CLASS_POSITION","true","false","false","true","true","int","0x00000008","[]","Optional[/**
 * The input source is an absolute positioning device not associated with a display
 * (unlike {@link #SOURCE_CLASS_POINTER}).
 *
 * A {@link MotionEvent} should be interpreted as absolute coordinates in
 * device-specific surface units.
 *
 * Use {@link #getMotionRange} to query the range of positions.
 */
]","\android\view\InputDevice.java"
"mFuzz","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\InputDevice.java"
"SOURCE_MOUSE","true","false","false","true","true","int","0x00002000 | SOURCE_CLASS_POINTER","[]","Optional[/**
 * The input source is a mouse pointing device.
 * This code is also used for other mouse-like pointing devices such as trackpads
 * and trackpoints.
 *
 * @see #SOURCE_CLASS_POINTER
 */
]","\android\view\InputDevice.java"
"mMin","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\InputDevice.java"
"SOURCE_UNKNOWN","true","false","false","true","true","int","0x00000000","[]","Optional[/**
 * The input source is unknown.
 */
]","\android\view\InputDevice.java"
"mName","false","false","true","false","false","String","null","[]","Optional.empty","\android\view\InputDevice.java"
"mKeyboardType","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\InputDevice.java"
"SOURCE_CLASS_BUTTON","true","false","false","true","true","int","0x00000001","[]","Optional[/**
 * The input source has buttons or keys.
 * Examples: {@link #SOURCE_KEYBOARD}, {@link #SOURCE_DPAD}.
 *
 * A {@link KeyEvent} should be interpreted as a button or key press.
 *
 * Use {@link #getKeyCharacterMap} to query the device's button and key mappings.
 */
]","\android\view\InputDevice.java"
"MOTION_RANGE_Y","true","false","false","true","true","int","1","[]","Optional[/**
 * Constant for retrieving the range of values for {@link MotionEvent.PointerCoords#y}.
 *
 * @see #getMotionRange
 */
]","\android\view\InputDevice.java"
"MOTION_RANGE_X","true","false","false","true","true","int","0","[]","Optional[/**
 * Constant for retrieving the range of values for {@link MotionEvent.PointerCoords#x}.
 *
 * @see #getMotionRange
 */
]","\android\view\InputDevice.java"
"mMotionRanges","false","false","true","false","false","MotionRange","null","[]","Optional.empty","\android\view\InputDevice.java"
"SOURCE_ANY","true","false","false","true","true","int","0xffffff00","[]","Optional[/**
 * A special input source constant that is used when filtering input devices
 * to match devices that provide any type of input source.
 */
]","\android\view\InputDevice.java"
"SOURCE_TRACKBALL","true","false","false","true","true","int","0x00010000 | SOURCE_CLASS_TRACKBALL","[]","Optional[/**
 * The input source is a trackball.
 *
 * @see #SOURCE_CLASS_TRACKBALL
 */
]","\android\view\InputDevice.java"
"mSources","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\InputDevice.java"
"SOURCE_CLASS_TRACKBALL","true","false","false","true","true","int","0x00000004","[]","Optional[/**
 * The input source is a trackball navigation device.
 * Examples: {@link #SOURCE_TRACKBALL}.
 *
 * A {@link MotionEvent} should be interpreted as relative movements in device-specific
 * units used for navigation purposes.  Pointer down/up indicates when the selection button
 * is pressed/released.
 *
 * Use {@link #getMotionRange} to query the range of motion.
 */
]","\android\view\InputDevice.java"
"MOTION_RANGE_SIZE","true","false","false","true","true","int","3","[]","Optional[/**
 * Constant for retrieving the range of values for {@link MotionEvent.PointerCoords#size}.
 *
 * @see #getMotionRange
 */
]","\android\view\InputDevice.java"
"SOURCE_TOUCHSCREEN","true","false","false","true","true","int","0x00001000 | SOURCE_CLASS_POINTER","[]","Optional[/**
 * The input source is a touch screen pointing device.
 *
 * @see #SOURCE_CLASS_POINTER
 */
]","\android\view\InputDevice.java"
"SOURCE_CLASS_MASK","true","false","false","true","true","int","0x000000ff","[]","Optional[/**
 * A mask for input source classes.
 *
 * Each distinct input source constant has one or more input source class bits set to
 * specify the desired interpretation for its input events.
 */
]","\android\view\InputDevice.java"
"mMax","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\InputDevice.java"
"MOTION_RANGE_PRESSURE","true","false","false","true","true","int","2","[]","Optional[/**
 * Constant for retrieving the range of values for {@link MotionEvent.PointerCoords#pressure}.
 *
 * @see #getMotionRange
 */
]","\android\view\InputDevice.java"
"MOTION_RANGE_ORIENTATION","true","false","false","true","true","int","8","[]","Optional[/**
 * Constant for retrieving the range of values for
 * {@link MotionEvent.PointerCoords#orientation}.
 *
 * @see #getMotionRange
 */
]","\android\view\InputDevice.java"
"MOTION_RANGE_LAST","false","false","true","true","true","int","MOTION_RANGE_ORIENTATION","[]","Optional.empty","\android\view\InputDevice.java"
"mFlat","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\InputDevice.java"
"MOTION_RANGE_TOOL_MINOR","true","false","false","true","true","int","7","[]","Optional[/**
 * Constant for retrieving the range of values for {@link MotionEvent.PointerCoords#toolMinor}.
 *
 * @see #getMotionRange
 */
]","\android\view\InputDevice.java"
"MOTION_RANGE_TOOL_MAJOR","true","false","false","true","true","int","6","[]","Optional[/**
 * Constant for retrieving the range of values for {@link MotionEvent.PointerCoords#toolMajor}.
 *
 * @see #getMotionRange
 */
]","\android\view\InputDevice.java"
"MOTION_RANGE_TOUCH_MINOR","true","false","false","true","true","int","5","[]","Optional[/**
 * Constant for retrieving the range of values for {@link MotionEvent.PointerCoords#touchMinor}.
 *
 * @see #getMotionRange
 */
]","\android\view\InputDevice.java"
"KEYBOARD_TYPE_ALPHABETIC","true","false","false","true","true","int","2","[]","Optional[/**
 * The keyboard supports a complement of alphabetic keys.
 */
]","\android\view\InputDevice.java"
"MOTION_RANGE_TOUCH_MAJOR","true","false","false","true","true","int","4","[]","Optional[/**
 * Constant for retrieving the range of values for {@link MotionEvent.PointerCoords#touchMajor}.
 *
 * @see #getMotionRange
 */
]","\android\view\InputDevice.java"
"KEYBOARD_TYPE_NONE","true","false","false","true","true","int","0","[]","Optional[/**
 * There is no keyboard.
 */
]","\android\view\InputDevice.java"
"ADD_FLAG_IN_TOUCH_MODE","true","false","false","true","true","int","RELAYOUT_IN_TOUCH_MODE","[]","Optional.empty","\android\view\WindowManagerImpl.java"
"ADD_NOT_APP_TOKEN","true","false","false","true","true","int","-3","[]","Optional.empty","\android\view\WindowManagerImpl.java"
"mParams","false","false","true","false","false","WindowManager.LayoutParams","null","[]","Optional.empty","\android\view\WindowManagerImpl.java"
"ADD_APP_EXITING","true","false","false","true","true","int","-4","[]","Optional.empty","\android\view\WindowManagerImpl.java"
"RELAYOUT_IN_TOUCH_MODE","true","false","false","true","true","int","0x1","[]","Optional[/**
 * The user is navigating with keys (not the touch screen), so
 * navigational focus should be shown.
 */
]","\android\view\WindowManagerImpl.java"
"ADD_OKAY","true","false","false","true","true","int","0","[]","Optional.empty","\android\view\WindowManagerImpl.java"
"ADD_BAD_APP_TOKEN","true","false","false","true","true","int","-1","[]","Optional.empty","\android\view\WindowManagerImpl.java"
"mViews","false","false","true","false","false","View","null","[]","Optional.empty","\android\view\WindowManagerImpl.java"
"ADD_PERMISSION_DENIED","true","false","false","true","true","int","-8","[]","Optional.empty","\android\view\WindowManagerImpl.java"
"mWindowManager","false","false","true","true","false","WindowManagerImpl","new WindowManagerImpl()","[]","Optional.empty","\android\view\WindowManagerImpl.java"
"ADD_DUPLICATE_ADD","true","false","false","true","true","int","-5","[]","Optional.empty","\android\view\WindowManagerImpl.java"
"ADD_BAD_SUBWINDOW_TOKEN","true","false","false","true","true","int","-2","[]","Optional.empty","\android\view\WindowManagerImpl.java"
"ADD_STARTING_NOT_NEEDED","true","false","false","true","true","int","-6","[]","Optional.empty","\android\view\WindowManagerImpl.java"
"RELAYOUT_FIRST_TIME","true","false","false","true","true","int","0x2","[]","Optional[/**
 * This is the first time the window is being drawn,
 * so the client must call drawingFinished() when done
 */
]","\android\view\WindowManagerImpl.java"
"ADD_MULTIPLE_SINGLETON","true","false","false","true","true","int","-7","[]","Optional.empty","\android\view\WindowManagerImpl.java"
"mRoots","false","false","true","false","false","ViewRoot","null","[]","Optional.empty","\android\view\WindowManagerImpl.java"
"ADD_FLAG_APP_VISIBLE","true","false","false","true","true","int","0x2","[]","Optional.empty","\android\view\WindowManagerImpl.java"
"mSize","false","false","true","false","true","int","null","[]","Optional.empty","\android\text\style\AbsoluteSizeSpan.java"
"mDip","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\text\style\AbsoluteSizeSpan.java"
"descriptor","false","false","false","true","true","String","""android.content.IContentProvider""","[]","Optional[/* IPC constants */
]","\android\content\IContentProvider.java"
"OPEN_FILE_TRANSACTION","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 13","[]","Optional.empty","\android\content\IContentProvider.java"
"INSERT_TRANSACTION","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 2","[]","Optional.empty","\android\content\IContentProvider.java"
"DELETE_TRANSACTION","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 3","[]","Optional.empty","\android\content\IContentProvider.java"
"APPLY_BATCH_TRANSACTION","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 19","[]","Optional.empty","\android\content\IContentProvider.java"
"QUERY_TRANSACTION","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION","[]","Optional.empty","\android\content\IContentProvider.java"
"BULK_INSERT_TRANSACTION","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 12","[]","Optional.empty","\android\content\IContentProvider.java"
"GET_TYPE_TRANSACTION","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 1","[]","Optional.empty","\android\content\IContentProvider.java"
"OPEN_ASSET_FILE_TRANSACTION","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 14","[]","Optional.empty","\android\content\IContentProvider.java"
"UPDATE_TRANSACTION","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 9","[]","Optional.empty","\android\content\IContentProvider.java"
"CALL_TRANSACTION","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 20","[]","Optional.empty","\android\content\IContentProvider.java"
"ACTION_PASSWORD_FAILED","true","false","false","true","true","String","""android.app.action.ACTION_PASSWORD_FAILED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Action sent to a device administrator when the user has failed at
 * attempted to enter the password.  You can at this point check the
 * number of failed password attempts there have been with
 * {@link DevicePolicyManager#getCurrentFailedPasswordAttempts
 * DevicePolicyManager.getCurrentFailedPasswordAttempts()}.  You will generally
 * handle this in {@link DeviceAdminReceiver#onPasswordFailed}.
 *
 * <p>The calling device admin must have requested
 * {@link DeviceAdminInfo#USES_POLICY_WATCH_LOGIN} to receive
 * this broadcast.
 */
]","\android\app\admin\DeviceAdminReceiver.java"
"mWho","false","false","true","false","false","ComponentName","null","[]","Optional.empty","\android\app\admin\DeviceAdminReceiver.java"
"ACTION_DEVICE_ADMIN_DISABLE_REQUESTED","true","false","false","true","true","String","""android.app.action.DEVICE_ADMIN_DISABLE_REQUESTED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Action sent to a device administrator when the user has requested to
 * disable it, but before this has actually been done.  This gives you
 * a chance to supply a message to the user about the impact of
 * disabling your admin, by setting the extra field
 * {@link #EXTRA_DISABLE_WARNING} in the result Intent.  If not set,
 * no warning will be displayed.  If set, the given text will be shown
 * to the user before they disable your admin.
 */
]","\android\app\admin\DeviceAdminReceiver.java"
"ACTION_DEVICE_ADMIN_DISABLED","true","false","false","true","true","String","""android.app.action.DEVICE_ADMIN_DISABLED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Action sent to a device administrator when the user has disabled
 * it.  Upon return, the application no longer has access to the
 * protected device policy manager APIs.  You will generally
 * handle this in {@link DeviceAdminReceiver#onDisabled(Context, Intent)}.  Note
 * that this action will be
 * sent the receiver regardless of whether it is explicitly listed in
 * its intent filter.
 */
]","\android\app\admin\DeviceAdminReceiver.java"
"ACTION_DEVICE_ADMIN_ENABLED","true","false","false","true","true","String","""android.app.action.DEVICE_ADMIN_ENABLED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * This is the primary action that a device administrator must implement to be
 * allowed to manage a device.  This will be set to the receiver
 * when the user enables it for administration.  You will generally
 * handle this in {@link DeviceAdminReceiver#onEnabled(Context, Intent)}.  To be
 * supported, the receiver must also require the
 * {@link android.Manifest.permission#BIND_DEVICE_ADMIN} permission so
 * that other applications can not abuse it.
 */
]","\android\app\admin\DeviceAdminReceiver.java"
"EXTRA_DISABLE_WARNING","true","false","false","true","true","String","""android.app.extra.DISABLE_WARNING""","[]","Optional[/**
 * A CharSequence that can be shown to the user informing them of the
 * impact of disabling your admin.
 *
 * @see #ACTION_DEVICE_ADMIN_DISABLE_REQUESTED
 */
]","\android\app\admin\DeviceAdminReceiver.java"
"DEVICE_ADMIN_META_DATA","true","false","false","true","true","String","""android.app.device_admin""","[]","Optional[/**
 * Name under which an DevicePolicy component publishes information
 * about itself.  This meta-data must reference an XML resource containing
 * a device-admin tag.  XXX TO DO: describe syntax.
 */
]","\android\app\admin\DeviceAdminReceiver.java"
"mManager","false","false","true","false","false","DevicePolicyManager","null","[]","Optional.empty","\android\app\admin\DeviceAdminReceiver.java"
"ACTION_PASSWORD_SUCCEEDED","true","false","false","true","true","String","""android.app.action.ACTION_PASSWORD_SUCCEEDED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Action sent to a device administrator when the user has successfully
 * entered their password, after failing one or more times.
 *
 * <p>The calling device admin must have requested
 * {@link DeviceAdminInfo#USES_POLICY_WATCH_LOGIN} to receive
 * this broadcast.
 */
]","\android\app\admin\DeviceAdminReceiver.java"
"ACTION_PASSWORD_CHANGED","true","false","false","true","true","String","""android.app.action.ACTION_PASSWORD_CHANGED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Action sent to a device administrator when the user has changed the
 * password of their device.  You can at this point check the characteristics
 * of the new password with {@link DevicePolicyManager#isActivePasswordSufficient()
 * DevicePolicyManager.isActivePasswordSufficient()}.
 * You will generally
 * handle this in {@link DeviceAdminReceiver#onPasswordChanged}.
 *
 * <p>The calling device admin must have requested
 * {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to receive
 * this broadcast.
 */
]","\android\app\admin\DeviceAdminReceiver.java"
"TAG","false","false","true","true","false","String","""DevicePolicy""","[]","Optional.empty","\android\app\admin\DeviceAdminReceiver.java"
"localLOGV","false","false","true","true","false","boolean","DEBUG || android.util.Config.LOGV","[]","Optional.empty","\android\app\admin\DeviceAdminReceiver.java"
"DEBUG","false","false","true","true","false","boolean","false","[]","Optional.empty","\android\app\admin\DeviceAdminReceiver.java"
"mTokenizer","false","false","true","false","false","Tokenizer","null","[]","Optional.empty","\android\widget\MultiAutoCompleteTextView.java"
"IDX_PRAGMA","false","false","true","true","true","int","16","[]","Optional.empty","\android\net\http\Headers.java"
"transferEncoding","false","false","true","false","false","long","null","[]","Optional[/* parsed values */
]","\android\net\http\Headers.java"
"CACHE_CONTROL","true","false","false","true","true","String","""cache-control""","[]","Optional.empty","\android\net\http\Headers.java"
"CONN_CLOSE","true","false","false","true","true","int","1","[]","Optional[/**
 * indicate HTTP 1.0 connection close after the response
 */
]","\android\net\http\Headers.java"
"CONTENT_TYPE","true","false","false","true","true","String","""content-type""","[]","Optional.empty","\android\net\http\Headers.java"
"IDX_LOCATION","false","false","true","true","true","int","5","[]","Optional.empty","\android\net\http\Headers.java"
"PRAGMA","true","false","false","true","true","String","""pragma""","[]","Optional.empty","\android\net\http\Headers.java"
"NO_TRANSFER_ENCODING","true","false","false","true","true","long","0","[]","Optional.empty","\android\net\http\Headers.java"
"TRANSFER_ENCODING","true","false","false","true","true","String","""transfer-encoding""","[]","Optional[// header strings
]","\android\net\http\Headers.java"
"IDX_CONN_DIRECTIVE","false","false","true","true","true","int","4","[]","Optional.empty","\android\net\http\Headers.java"
"CONTENT_LEN","true","false","false","true","true","String","""content-length""","[]","Optional.empty","\android\net\http\Headers.java"
"LOCATION","true","false","false","true","true","String","""location""","[]","Optional.empty","\android\net\http\Headers.java"
"HASH_ACCEPT_RANGES","false","false","true","true","true","int","1397189435","[]","Optional.empty","\android\net\http\Headers.java"
"CONTENT_DISPOSITION","true","false","false","true","true","String","""content-disposition""","[]","Optional.empty","\android\net\http\Headers.java"
"IDX_CONTENT_DISPOSITION","false","false","true","true","true","int","9","[]","Optional.empty","\android\net\http\Headers.java"
"cookies","false","false","true","false","false","ArrayList<String>","new ArrayList<String>(2)","[]","Optional.empty","\android\net\http\Headers.java"
"CONN_KEEP_ALIVE","true","false","false","true","true","int","2","[]","Optional[/**
 * indicate HTTP 1.1 connection keep alive
 */
]","\android\net\http\Headers.java"
"IDX_TRANSFER_ENCODING","false","false","true","true","true","int","0","[]","Optional[// string array
]","\android\net\http\Headers.java"
"IDX_CACHE_CONTROL","false","false","true","true","true","int","12","[]","Optional.empty","\android\net\http\Headers.java"
"HASH_SET_COOKIE","false","false","true","true","true","int","1237214767","[]","Optional.empty","\android\net\http\Headers.java"
"IDX_SET_COOKIE","false","false","true","true","true","int","15","[]","Optional.empty","\android\net\http\Headers.java"
"HASH_EXPIRES","false","false","true","true","true","int","-1309235404","[]","Optional.empty","\android\net\http\Headers.java"
"connectionType","false","false","true","false","false","int","null","[]","Optional.empty","\android\net\http\Headers.java"
"IDX_WWW_AUTHENTICATE","false","false","true","true","true","int","7","[]","Optional.empty","\android\net\http\Headers.java"
"HASH_CONN_DIRECTIVE","false","false","true","true","true","int","-775651618","[]","Optional.empty","\android\net\http\Headers.java"
"HASH_PROXY_CONNECTION","false","false","true","true","true","int","285929373","[]","Optional.empty","\android\net\http\Headers.java"
"IDX_ETAG","false","false","true","true","true","int","14","[]","Optional.empty","\android\net\http\Headers.java"
"HASH_CONTENT_TYPE","false","false","true","true","true","int","785670158","[]","Optional.empty","\android\net\http\Headers.java"
"HASH_PRAGMA","false","false","true","true","true","int","-980228804","[]","Optional.empty","\android\net\http\Headers.java"
"IDX_LAST_MODIFIED","false","false","true","true","true","int","13","[]","Optional.empty","\android\net\http\Headers.java"
"mExtraHeaderNames","false","false","true","false","false","ArrayList<String>","new ArrayList<String>(4)","[]","Optional[// Catch-all for headers not explicitly handled
]","\android\net\http\Headers.java"
"LAST_MODIFIED","true","false","false","true","true","String","""last-modified""","[]","Optional.empty","\android\net\http\Headers.java"
"HASH_TRANSFER_ENCODING","false","false","true","true","true","int","1274458357","[]","Optional[// following hash are generated by String.hashCode()
]","\android\net\http\Headers.java"
"mExtraHeaderValues","false","false","true","false","false","ArrayList<String>","new ArrayList<String>(4)","[]","Optional.empty","\android\net\http\Headers.java"
"HASH_LOCATION","false","false","true","true","true","int","1901043637","[]","Optional.empty","\android\net\http\Headers.java"
"IDX_EXPIRES","false","false","true","true","true","int","11","[]","Optional.empty","\android\net\http\Headers.java"
"HASH_WWW_AUTHENTICATE","false","false","true","true","true","int","-243037365","[]","Optional.empty","\android\net\http\Headers.java"
"IDX_PROXY_CONNECTION","false","false","true","true","true","int","6","[]","Optional.empty","\android\net\http\Headers.java"
"HASH_LAST_MODIFIED","false","false","true","true","true","int","150043680","[]","Optional.empty","\android\net\http\Headers.java"
"IDX_CONTENT_TYPE","false","false","true","true","true","int","2","[]","Optional.empty","\android\net\http\Headers.java"
"HASH_CONTENT_LEN","false","false","true","true","true","int","-1132779846","[]","Optional.empty","\android\net\http\Headers.java"
"HASH_CACHE_CONTROL","false","false","true","true","true","int","-208775662","[]","Optional.empty","\android\net\http\Headers.java"
"HASH_CONTENT_ENCODING","false","false","true","true","true","int","2095084583","[]","Optional.empty","\android\net\http\Headers.java"
"ACCEPT_RANGES","true","false","false","true","true","String","""accept-ranges""","[]","Optional.empty","\android\net\http\Headers.java"
"ETAG","true","false","false","true","true","String","""etag""","[]","Optional.empty","\android\net\http\Headers.java"
"WWW_AUTHENTICATE","true","false","false","true","true","String","""www-authenticate""","[]","Optional.empty","\android\net\http\Headers.java"
"IDX_REFRESH","false","false","true","true","true","int","17","[]","Optional.empty","\android\net\http\Headers.java"
"CONTENT_ENCODING","true","false","false","true","true","String","""content-encoding""","[]","Optional.empty","\android\net\http\Headers.java"
"IDX_CONTENT_ENCODING","false","false","true","true","true","int","3","[]","Optional.empty","\android\net\http\Headers.java"
"IDX_ACCEPT_RANGES","false","false","true","true","true","int","10","[]","Optional.empty","\android\net\http\Headers.java"
"SET_COOKIE","true","false","false","true","true","String","""set-cookie""","[]","Optional.empty","\android\net\http\Headers.java"
"HASH_CONTENT_DISPOSITION","false","false","true","true","true","int","-1267267485","[]","Optional.empty","\android\net\http\Headers.java"
"HEADER_COUNT","false","false","true","true","true","int","19","[]","Optional.empty","\android\net\http\Headers.java"
"IDX_PROXY_AUTHENTICATE","false","false","true","true","true","int","8","[]","Optional.empty","\android\net\http\Headers.java"
"contentLength","false","false","true","false","false","long","null","[]","Optional[// Content length of the incoming data
]","\android\net\http\Headers.java"
"IDX_X_PERMITTED_CROSS_DOMAIN_POLICIES","false","false","true","true","true","int","18","[]","Optional.empty","\android\net\http\Headers.java"
"NO_CONN_TYPE","true","false","false","true","true","int","0","[]","Optional[// initial values.
]","\android\net\http\Headers.java"
"sHeaderNames","false","false","true","true","true","String","{ TRANSFER_ENCODING, CONTENT_LEN, CONTENT_TYPE, CONTENT_ENCODING, CONN_DIRECTIVE, LOCATION, PROXY_CONNECTION, WWW_AUTHENTICATE, PROXY_AUTHENTICATE, CONTENT_DISPOSITION, ACCEPT_RANGES, EXPIRES, CACHE_CONTROL, LAST_MODIFIED, ETAG, SET_COOKIE, PRAGMA, REFRESH, X_PERMITTED_CROSS_DOMAIN_POLICIES }","[]","Optional.empty","\android\net\http\Headers.java"
"CONN_DIRECTIVE","true","false","false","true","true","String","""connection""","[]","Optional.empty","\android\net\http\Headers.java"
"HASH_REFRESH","false","false","true","true","true","int","1085444827","[]","Optional.empty","\android\net\http\Headers.java"
"NO_CONTENT_LENGTH","true","false","false","true","true","long","-1","[]","Optional.empty","\android\net\http\Headers.java"
"HASH_X_PERMITTED_CROSS_DOMAIN_POLICIES","false","false","true","true","true","int","-1345594014","[]","Optional.empty","\android\net\http\Headers.java"
"REFRESH","true","false","false","true","true","String","""refresh""","[]","Optional.empty","\android\net\http\Headers.java"
"PROXY_CONNECTION","true","false","false","true","true","String","""proxy-connection""","[]","Optional.empty","\android\net\http\Headers.java"
"IDX_CONTENT_LEN","false","false","true","true","true","int","1","[]","Optional.empty","\android\net\http\Headers.java"
"EXPIRES","true","false","false","true","true","String","""expires""","[]","Optional.empty","\android\net\http\Headers.java"
"mHeaders","false","false","true","false","false","String","new String[HEADER_COUNT]","[]","Optional.empty","\android\net\http\Headers.java"
"X_PERMITTED_CROSS_DOMAIN_POLICIES","true","false","false","true","true","String","""x-permitted-cross-domain-policies""","[]","Optional.empty","\android\net\http\Headers.java"
"HASH_PROXY_AUTHENTICATE","false","false","true","true","true","int","-301767724","[]","Optional.empty","\android\net\http\Headers.java"
"HASH_ETAG","false","false","true","true","true","int","3123477","[]","Optional.empty","\android\net\http\Headers.java"
"PROXY_AUTHENTICATE","true","false","false","true","true","String","""proxy-authenticate""","[]","Optional.empty","\android\net\http\Headers.java"
"LOGTAG","false","false","true","true","true","String","""Http""","[]","Optional.empty","\android\net\http\Headers.java"
"ESCAPE_CHAR","false","false","true","true","false","byte","'='","[]","Optional.empty","\com\google\android\mms\pdu\QuotedPrintable.java"
"mAccountAuthenticatorResponse","false","false","true","false","false","AccountAuthenticatorResponse","null","[]","Optional.empty","\android\accounts\AccountAuthenticatorActivity.java"
"mResultBundle","false","false","true","false","false","Bundle","null","[]","Optional.empty","\android\accounts\AccountAuthenticatorActivity.java"
"mDataSetObservable","false","false","true","false","true","DataSetObservable","new DataSetObservable()","[]","Optional.empty","\android\widget\BaseAdapter.java"
"earliestRunTime","true","false","false","false","false","long","null","[]","Optional.empty","\android\content\SyncOperation.java"
"key","true","false","false","false","true","String","null","[]","Optional.empty","\android\content\SyncOperation.java"
"authority","true","false","false","false","false","String","null","[]","Optional.empty","\android\content\SyncOperation.java"
"extras","true","false","false","false","false","Bundle","null","[]","Optional.empty","\android\content\SyncOperation.java"
"syncSource","true","false","false","false","false","int","null","[]","Optional.empty","\android\content\SyncOperation.java"
"pendingOperation","true","false","false","false","false","SyncStorageEngine.PendingOperation","null","[]","Optional.empty","\android\content\SyncOperation.java"
"expedited","true","false","false","false","false","boolean","null","[]","Optional.empty","\android\content\SyncOperation.java"
"account","true","false","false","false","true","Account","null","[]","Optional.empty","\android\content\SyncOperation.java"
"ri","false","false","false","false","false","ResolveInfo","null","[]","Optional.empty","\com\android\internal\app\ResolverActivity.java"
"displayLabel","false","false","false","false","false","CharSequence","null","[]","Optional.empty","\com\android\internal\app\ResolverActivity.java"
"displayIcon","false","false","false","false","false","Drawable","null","[]","Optional.empty","\com\android\internal\app\ResolverActivity.java"
"mList","false","false","true","false","false","List<DisplayResolveInfo>","null","[]","Optional.empty","\com\android\internal\app\ResolverActivity.java"
"extendedInfo","false","false","false","false","false","CharSequence","null","[]","Optional.empty","\com\android\internal\app\ResolverActivity.java"
"mClearDefaultHint","false","false","true","false","false","TextView","null","[]","Optional.empty","\com\android\internal\app\ResolverActivity.java"
"origIntent","false","false","false","false","false","Intent","null","[]","Optional.empty","\com\android\internal\app\ResolverActivity.java"
"mPm","false","false","true","false","false","PackageManager","null","[]","Optional.empty","\com\android\internal\app\ResolverActivity.java"
"mAlwaysCheck","false","false","true","false","false","CheckBox","null","[]","Optional.empty","\com\android\internal\app\ResolverActivity.java"
"mAdapter","false","false","true","false","false","ResolveListAdapter","null","[]","Optional.empty","\com\android\internal\app\ResolverActivity.java"
"mInflater","false","false","true","false","true","LayoutInflater","null","[]","Optional.empty","\com\android\internal\app\ResolverActivity.java"
"mIntent","false","false","true","false","true","Intent","null","[]","Optional.empty","\com\android\internal\app\ResolverActivity.java"
"mDialog","false","false","true","false","false","StyledTextDialog","null","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"mCurStart","false","false","true","false","false","int","0","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"MODE_NOTHING","true","false","false","true","true","int","0","[]","Optional[/**
 * The mode that no editing action is done.
 */
]","\com\android\internal\widget\EditStyledText.java"
"mSoftKeyBlockFlag","false","false","true","false","false","boolean","false","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"MODE_SIZE","true","false","false","true","true","int","3","[]","Optional[/**
 * The mode of changing size.
 */
]","\com\android\internal\widget\EditStyledText.java"
"mCurEnd","false","false","true","false","false","int","0","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"MODE_CUT","true","false","false","true","true","int","7","[]","Optional[/**
 * The mode of changing cut.
 */
]","\com\android\internal\widget\EditStyledText.java"
"mEditFlag","false","false","true","false","false","boolean","false","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"STATE_SELECT_FIX","true","false","false","true","true","int","3","[]","Optional[/**
 * The state that selection is done and not fixed.
 */
]","\com\android\internal\widget\EditStyledText.java"
"HINT_MSG_SELECT_END","true","false","false","true","true","int","3","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"mSizeSendInts","false","false","false","false","false","CharSequence","null","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"mConverter","false","false","true","false","false","StyledTextConverter","null","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"mSizeNames","false","false","false","false","false","CharSequence","null","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"DEFAULT_BACKGROUND_COLOR","true","false","false","true","true","int","0x00FFFFFF","[]","Optional[/**
 * The help message strings.
 */
]","\com\android\internal\widget\EditStyledText.java"
"STATE_SELECT_ON","true","false","false","true","true","int","1","[]","Optional[/**
 * The state that selection is started.
 */
]","\com\android\internal\widget\EditStyledText.java"
"mView","false","false","true","false","false","View","null","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"mAlignNames","false","false","false","false","false","CharSequence","null","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"MODE_COLOR","true","false","false","true","true","int","4","[]","Optional[/**
 * The mode of changing color.
 */
]","\com\android\internal\widget\EditStyledText.java"
"STATE_SELECT_OFF","true","false","false","true","true","int","0","[]","Optional[/**
 * The state that selection isn't started.
 */
]","\com\android\internal\widget\EditStyledText.java"
"mColorInts","false","false","false","false","false","CharSequence","null","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"mBackgroundColor","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"LOG_TAG","false","false","true","true","true","String","""EditStyledText""","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"mState","false","false","true","false","false","int","0","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"mSizeDisplayInts","false","false","false","false","false","CharSequence","null","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"HINT_MSG_PUSH_COMPETE","true","false","false","true","true","int","4","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"mESTInterface","false","false","true","false","false","EditStyledTextNotifier","null","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"STATE_SELECTED","true","false","false","true","true","int","2","[]","Optional[/**
 * The state that selection is done, but not fixed.
 */
]","\com\android\internal\widget\EditStyledText.java"
"MODE_SELECT","true","false","false","true","true","int","5","[]","Optional[/**
 * The mode of selection.
 */
]","\com\android\internal\widget\EditStyledText.java"
"mSizeTitle","false","false","false","false","false","CharSequence","null","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"mManager","false","false","false","false","false","EditorManager","null","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"MODE_PASTE","true","false","false","true","true","int","2","[]","Optional[/**
 * The mode of paste.
 */
]","\com\android\internal\widget\EditStyledText.java"
"mColorTitle","false","false","false","false","false","CharSequence","null","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"mDefaultBackground","false","false","true","false","false","Drawable","null","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"DBG","false","false","true","true","true","boolean","false","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"HINT_MSG_COPY_BUF_BLANK","true","false","false","true","true","int","1","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"mMode","false","false","true","false","false","int","0","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"MODE_ALIGN","true","false","false","true","true","int","6","[]","Optional[/**
 * The mode of changing alignment.
 */
]","\com\android\internal\widget\EditStyledText.java"
"mBuilder","false","false","false","false","false","Builder","null","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"MODE_COPY","true","false","false","true","true","int","1","[]","Optional[/**
 * The mode of copy.
 */
]","\com\android\internal\widget\EditStyledText.java"
"mAlignTitle","false","false","false","false","false","CharSequence","null","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"HINT_MSG_NULL","true","false","false","true","true","int","0","[]","Optional[/**
 * The help message strings.
 */
]","\com\android\internal\widget\EditStyledText.java"
"mColorNames","false","false","false","false","false","CharSequence","null","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"mEST","false","false","false","false","false","EditStyledText","null","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"HINT_MSG_SELECT_START","true","false","false","true","true","int","2","[]","Optional.empty","\com\android\internal\widget\EditStyledText.java"
"ACTION_RF_FIELD_OFF_DETECTED","true","false","false","true","true","String","""android.nfc.action.RF_FIELD_OFF_DETECTED""","[]","Optional[/**
 * Broadcast Action: an RF Field OFF has been detected.
 * @hide
 */
]","\android\nfc\NfcAdapter.java"
"ACTION_TAG_LEFT_FIELD","true","false","false","true","true","String","""android.nfc.action.TAG_LOST""","[]","Optional[/**
 * Broadcast to only the activity that handles ACTION_TAG_DISCOVERED
 * @hide
 */
]","\android\nfc\NfcAdapter.java"
"EXTRA_NEW_BOOLEAN_STATE","true","false","false","true","true","String","""android.nfc.isEnabled""","[]","Optional[/**
 * The Intent extra for ACTION_ADAPTER_STATE_CHANGE, saying what the new state is.
 *
 * @hide
 */
]","\android\nfc\NfcAdapter.java"
"ACTION_TAG_DISCOVERED","true","false","false","true","true","String","""android.nfc.action.TAG_DISCOVERED""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Intent to start an activity when a tag is discovered.
 */
]","\android\nfc\NfcAdapter.java"
"LLCP_LINK_STATE_DEACTIVATED","true","false","false","true","true","int","1","[]","Optional[/**
 * LLCP link status: The LLCP link is deactivated.
 * @hide
 */
]","\android\nfc\NfcAdapter.java"
"DISCOVERY_MODE_CARD_EMULATION","false","false","true","true","true","int","2","[]","Optional[/**
 * Card Emulation mode Enables the manager to act as an NFC tag. Provided
 * that a Secure Element (an UICC for instance) is connected to the NFC
 * controller through its SWP interface, it can be exposed to the outside
 * NFC world and be addressed by external readers the same way they would
 * with a tag.
 * <p>
 * Which Secure Element is exposed is implementation-dependent.
 *
 * @hide
 */
]","\android\nfc\NfcAdapter.java"
"sIsInitialized","false","false","true","true","false","boolean","false","[]","Optional[// Guarded by NfcAdapter.class
]","\android\nfc\NfcAdapter.java"
"DISCOVERY_MODE_TAG_READER","false","false","true","true","true","int","0","[]","Optional[/**
 * Tag Reader Discovery mode
 * @hide
 */
]","\android\nfc\NfcAdapter.java"
"ACTION_TRANSACTION_DETECTED","true","false","false","true","true","String","""android.nfc.action.TRANSACTION_DETECTED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: a transaction with a secure element has been detected.
 * <p>
 * Always contains the extra field
 * {@link android.nfc.NfcAdapter#EXTRA_AID}
 * @hide
 */
]","\android\nfc\NfcAdapter.java"
"ACTION_NDEF_DISCOVERED","true","false","false","true","true","String","""android.nfc.action.NDEF_DISCOVERED""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Intent to start an activity when a tag with NDEF payload is discovered.
 * If the tag has and NDEF payload this intent is started before
 * {@link #ACTION_TECH_DISCOVERED}.
 *
 * If any activities respond to this intent neither
 * {@link #ACTION_TECH_DISCOVERED} or {@link #ACTION_TAG_DISCOVERED} will be started.
 */
]","\android\nfc\NfcAdapter.java"
"LLCP_LINK_STATE_ACTIVATED","true","false","false","true","true","int","0","[]","Optional[/**
 * LLCP link status: The LLCP link is activated.
 * @hide
 */
]","\android\nfc\NfcAdapter.java"
"ACTION_TECH_DISCOVERED","true","false","false","true","true","String","""android.nfc.action.TECH_DISCOVERED""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Intent to started when a tag is discovered. The data URI is formated as
 * {@code vnd.android.nfc://tag/} with the path having a directory entry for each technology
 * in the {@link Tag#getTechList()} is sorted ascending order.
 *
 * This intent is started after {@link #ACTION_NDEF_DISCOVERED} and before
 * {@link #ACTION_TAG_DISCOVERED}
 *
 * If any activities respond to this intent {@link #ACTION_TAG_DISCOVERED} will not be started.
 */
]","\android\nfc\NfcAdapter.java"
"mForegroundNdefPushListener","false","false","false","false","false","OnActivityPausedListener","new OnActivityPausedListener() {

    @Override
    public void onPaused(Activity activity) {
        disableForegroundNdefPushInternal(activity, true);
    }
}","[]","Optional.empty","\android\nfc\NfcAdapter.java"
"EXTRA_ID","true","false","false","true","true","String","""android.nfc.extra.ID""","[]","Optional[/**
 * Optional byte[] extra for the tag identifier.
 */
]","\android\nfc\NfcAdapter.java"
"ACTION_RF_FIELD_ON_DETECTED","true","false","false","true","true","String","""android.nfc.action.RF_FIELD_ON_DETECTED""","[]","Optional[/**
 * Broadcast Action: an RF field ON has been detected.
 * @hide
 */
]","\android\nfc\NfcAdapter.java"
"EXTRA_NDEF_MESSAGES","true","false","false","true","true","String","""android.nfc.extra.NDEF_MESSAGES""","[]","Optional[/**
 * Optional NdefMessage[] extra for the ACTION_TAG intents.
 */
]","\android\nfc\NfcAdapter.java"
"ACTION_ADAPTER_STATE_CHANGE","true","false","false","true","true","String","""android.nfc.action.ADAPTER_STATE_CHANGE""","[]","Optional[/**
 * Broadcast Action: an adapter's state changed between enabled and disabled.
 *
 * The new value is stored in the extra EXTRA_NEW_BOOLEAN_STATE and just contains
 * whether it's enabled or disabled, not including any information about whether it's
 * actively enabling or disabling.
 *
 * @hide
 */
]","\android\nfc\NfcAdapter.java"
"sTagService","false","false","true","true","false","INfcTag","null","[]","Optional.empty","\android\nfc\NfcAdapter.java"
"EXTRA_AID","true","false","false","true","true","String","""android.nfc.extra.AID""","[]","Optional[/**
 * Mandatory byte array extra field in
 * {@link android.nfc.NfcAdapter#ACTION_TRANSACTION_DETECTED}.
 * <p>
 * Contains the AID of the applet involved in the transaction.
 * @hide
 */
]","\android\nfc\NfcAdapter.java"
"sService","false","false","true","true","false","INfcAdapter","null","[]","Optional[// recovery
]","\android\nfc\NfcAdapter.java"
"ACTION_LLCP_LINK_STATE_CHANGED","true","false","false","true","true","String","""android.nfc.action.LLCP_LINK_STATE_CHANGED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: the LLCP link state changed.
 * <p>
 * Always contains the extra field
 * {@link android.nfc.NfcAdapter#EXTRA_LLCP_LINK_STATE_CHANGED}.
 * @hide
 */
]","\android\nfc\NfcAdapter.java"
"DISCOVERY_MODE_NFCIP1","false","false","true","true","true","int","1","[]","Optional[/**
 * NFC-IP1 Peer-to-Peer mode Enables the manager to act as a peer in an
 * NFC-IP1 communication. Implementations should not assume that the
 * controller will end up behaving as an NFC-IP1 target or initiator and
 * should handle both cases, depending on the type of the remote peer type.
 * @hide
 */
]","\android\nfc\NfcAdapter.java"
"TAG","false","false","true","true","true","String","""NFC""","[]","Optional.empty","\android\nfc\NfcAdapter.java"
"EXTRA_TAG","true","false","false","true","true","String","""android.nfc.extra.TAG""","[]","Optional[/**
 * Mandatory Tag extra for the ACTION_TAG intents.
 */
]","\android\nfc\NfcAdapter.java"
"EXTRA_LLCP_LINK_STATE_CHANGED","true","false","false","true","true","String","""android.nfc.extra.LLCP_LINK_STATE""","[]","Optional[/**
 * Used as int extra field in
 * {@link android.nfc.NfcAdapter#ACTION_LLCP_LINK_STATE_CHANGED}.
 * <p>
 * It contains the new state of the LLCP link.
 * @hide
 */
]","\android\nfc\NfcAdapter.java"
"mForegroundDispatchListener","false","false","false","false","false","OnActivityPausedListener","new OnActivityPausedListener() {

    @Override
    public void onPaused(Activity activity) {
        disableForegroundDispatchInternal(activity, true);
    }
}","[]","Optional.empty","\android\nfc\NfcAdapter.java"
"hintMaxLines","true","false","false","false","false","int","null","[]","Optional[/**
 * Hint for the maximum number of lines to return.
 */
]","\android\view\inputmethod\ExtractedTextRequest.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<ExtractedTextRequest>","new Parcelable.Creator<ExtractedTextRequest>() {

    public ExtractedTextRequest createFromParcel(Parcel source) {
        ExtractedTextRequest res = new ExtractedTextRequest();
        res.token = source.readInt();
        res.flags = source.readInt();
        res.hintMaxLines = source.readInt();
        res.hintMaxChars = source.readInt();
        return res;
    }

    public ExtractedTextRequest[] newArray(int size) {
        return new ExtractedTextRequest[size];
    }
}","[]","Optional[/**
 * Used to make this class parcelable.
 */
]","\android\view\inputmethod\ExtractedTextRequest.java"
"flags","true","false","false","false","false","int","null","[]","Optional[/**
 * Additional request flags, having the same possible values as the
 * flags parameter of {@link InputConnection#getTextBeforeCursor
 * InputConnection.getTextBeforeCursor()}.
 */
]","\android\view\inputmethod\ExtractedTextRequest.java"
"token","true","false","false","false","false","int","null","[]","Optional[/**
 * Arbitrary integer that can be supplied in the request, which will be
 * delivered back when reporting updates.
 */
]","\android\view\inputmethod\ExtractedTextRequest.java"
"hintMaxChars","true","false","false","false","false","int","null","[]","Optional[/**
 * Hint for the maximum number of characters to return.
 */
]","\android\view\inputmethod\ExtractedTextRequest.java"
"mInterpreterCollection","false","false","true","false","true","Collection<VCardInterpreter>","null","[]","Optional.empty","\android\pim\vcard\VCardInterpreterCollection.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional[// Context that the service is running in.
]","\android\server\search\SearchManagerService.java"
"mSearchables","false","false","true","false","false","Searchables","null","[]","Optional[// This field is initialized lazily in getSearchables(), and then never modified.
]","\android\server\search\SearchManagerService.java"
"TAG","false","false","true","true","true","String","""SearchManagerService""","[]","Optional[// general debugging support
]","\android\server\search\SearchManagerService.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\text\ClipboardManager.java"
"sService","false","false","true","true","false","IClipboard","null","[]","Optional.empty","\android\text\ClipboardManager.java"
"CHARACTERS","true","false","false","true","true","char","new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '#', '*', '+', '-', '(', ')', ',', '/', 'N', '.', ' ', ';' }","[]","Optional[/**
 * The characters that are used.
 *
 * @see KeyEvent#getMatch
 * @see #getAcceptedChars
 */
]","\android\text\method\DialerKeyListener.java"
"sInstance","false","false","true","true","false","DialerKeyListener","null","[]","Optional.empty","\android\text\method\DialerKeyListener.java"
"START_SUCCESS","true","false","false","true","true","int","0","[]","Optional[/**
 * Activity was started successfully as normal.
 */
]","\android\app\IActivityManager.java"
"PUBLISH_SERVICE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 37","[]","Optional.empty","\android\app\IActivityManager.java"
"UNBIND_SERVICE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 36","[]","Optional.empty","\android\app\IActivityManager.java"
"INTENT_SENDER_BROADCAST","true","false","false","true","true","int","1","[]","Optional.empty","\android\app\IActivityManager.java"
"descriptor","false","false","false","false","false","String","""android.app.IActivityManager""","[]","Optional.empty","\android\app\IActivityManager.java"
"GET_SERVICES_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 80","[]","Optional.empty","\android\app\IActivityManager.java"
"GET_PROCESSES_IN_ERROR_STATE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 76","[]","Optional.empty","\android\app\IActivityManager.java"
"KILL_BACKGROUND_PROCESSES_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 102","[]","Optional.empty","\android\app\IActivityManager.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<WaitResult>","new Parcelable.Creator<WaitResult>() {

    public WaitResult createFromParcel(Parcel source) {
        return new WaitResult(source);
    }

    public WaitResult[] newArray(int size) {
        return new WaitResult[size];
    }
}","[]","Optional.empty","\android\app\IActivityManager.java"
"CLOSE_SYSTEM_DIALOGS_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 96","[]","Optional.empty","\android\app\IActivityManager.java"
"SET_SERVICE_FOREGROUND_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 73","[]","Optional.empty","\android\app\IActivityManager.java"
"REPORT_THUMBNAIL_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 27","[]","Optional.empty","\android\app\IActivityManager.java"
"START_INSTRUMENTATION_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 43","[]","Optional.empty","\android\app\IActivityManager.java"
"GET_CONFIGURATION_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 45","[]","Optional.empty","\android\app\IActivityManager.java"
"ACTIVITY_IDLE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 17","[]","Optional.empty","\android\app\IActivityManager.java"
"INTENT_SENDER_SERVICE","true","false","false","true","true","int","4","[]","Optional.empty","\android\app\IActivityManager.java"
"GOING_TO_SLEEP_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 39","[]","Optional.empty","\android\app\IActivityManager.java"
"FINISH_HEAVY_WEIGHT_APP_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 108","[]","Optional.empty","\android\app\IActivityManager.java"
"START_SERVICE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 33","[]","Optional.empty","\android\app\IActivityManager.java"
"IS_IMMERSIVE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 110","[]","Optional.empty","\android\app\IActivityManager.java"
"MOVE_TASK_BACKWARDS_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 25","[]","Optional.empty","\android\app\IActivityManager.java"
"START_NEXT_MATCHING_ACTIVITY_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 66","[]","Optional.empty","\android\app\IActivityManager.java"
"KILL_PIDS_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 79","[]","Optional.empty","\android\app\IActivityManager.java"
"SET_REQUESTED_ORIENTATION_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 69","[]","Optional.empty","\android\app\IActivityManager.java"
"REGISTER_ACTIVITY_WATCHER_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 92","[]","Optional.empty","\android\app\IActivityManager.java"
"result","true","false","false","false","false","int","null","[]","Optional.empty","\android\app\IActivityManager.java"
"SIGNAL_PERSISTENT_PROCESSES_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 58","[]","Optional.empty","\android\app\IActivityManager.java"
"GET_ACTIVITY_CLASS_FOR_TOKEN_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 48","[]","Optional.empty","\android\app\IActivityManager.java"
"CHECK_URI_PERMISSION_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 53","[]","Optional.empty","\android\app\IActivityManager.java"
"SHUTDOWN_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 86","[]","Optional.empty","\android\app\IActivityManager.java"
"ENTER_SAFE_MODE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 65","[]","Optional.empty","\android\app\IActivityManager.java"
"UNHANDLED_BACK_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 3","[]","Optional.empty","\android\app\IActivityManager.java"
"ACTIVITY_DESTROYED_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 61","[]","Optional.empty","\android\app\IActivityManager.java"
"START_RETURN_INTENT_TO_CALLER","true","false","false","true","true","int","1","[]","Optional[/**
 * Returned by startActivity() if the caller asked that the Intent not
 * be executed if it is the recipient, and that is indeed the case.
 */
]","\android\app\IActivityManager.java"
"UNREGISTER_RECEIVER_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 12","[]","Optional.empty","\android\app\IActivityManager.java"
"START_FORWARD_AND_REQUEST_CONFLICT","true","false","false","true","true","int","-3","[]","Optional.empty","\android\app\IActivityManager.java"
"CANCEL_INTENT_SENDER_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 63","[]","Optional.empty","\android\app\IActivityManager.java"
"START_ACTIVITY_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 2","[]","Optional.empty","\android\app\IActivityManager.java"
"SET_DEBUG_APP_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 41","[]","Optional.empty","\android\app\IActivityManager.java"
"info","true","false","false","false","true","ProviderInfo","null","[]","Optional.empty","\android\app\IActivityManager.java"
"GET_PROVIDER_MIME_TYPE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 114","[]","Optional.empty","\android\app\IActivityManager.java"
"ACTIVITY_PAUSED_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 18","[]","Optional.empty","\android\app\IActivityManager.java"
"REGISTER_RECEIVER_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 11","[]","Optional.empty","\android\app\IActivityManager.java"
"INTENT_SENDER_ACTIVITY","true","false","false","true","true","int","2","[]","Optional.empty","\android\app\IActivityManager.java"
"HANDLE_APPLICATION_WTF_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 101","[]","Optional.empty","\android\app\IActivityManager.java"
"REMOVE_CONTENT_PROVIDER_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 68","[]","Optional.empty","\android\app\IActivityManager.java"
"MOVE_TASK_TO_BACK_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 24","[]","Optional.empty","\android\app\IActivityManager.java"
"WILL_ACTIVITY_BE_VISIBLE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 105","[]","Optional.empty","\android\app\IActivityManager.java"
"UPDATE_CONFIGURATION_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 46","[]","Optional.empty","\android\app\IActivityManager.java"
"BROADCAST_INTENT_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 13","[]","Optional.empty","\android\app\IActivityManager.java"
"GET_PROCESS_LIMIT_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 51","[]","Optional.empty","\android\app\IActivityManager.java"
"PEEK_SERVICE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 84","[]","Optional.empty","\android\app\IActivityManager.java"
"MOVE_ACTIVITY_TASK_TO_BACK_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 74","[]","Optional.empty","\android\app\IActivityManager.java"
"INTENT_SENDER_ACTIVITY_RESULT","true","false","false","true","true","int","3","[]","Optional.empty","\android\app\IActivityManager.java"
"UNREGISTER_ACTIVITY_WATCHER_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 93","[]","Optional.empty","\android\app\IActivityManager.java"
"START_RUNNING_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION","[]","Optional[// sent by C++ code.
]","\android\app\IActivityManager.java"
"GET_RUNNING_EXTERNAL_APPLICATIONS_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 107","[]","Optional.empty","\android\app\IActivityManager.java"
"timeout","true","false","false","false","false","boolean","null","[]","Optional.empty","\android\app\IActivityManager.java"
"NEW_URI_PERMISSION_OWNER_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 115","[]","Optional.empty","\android\app\IActivityManager.java"
"provider","true","false","false","false","false","IContentProvider","null","[]","Optional.empty","\android\app\IActivityManager.java"
"SET_PROCESS_FOREGROUND_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 72","[]","Optional.empty","\android\app\IActivityManager.java"
"KILL_APPLICATION_WITH_UID_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 95","[]","Optional.empty","\android\app\IActivityManager.java"
"GET_CALLING_PACKAGE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 20","[]","Optional.empty","\android\app\IActivityManager.java"
"IS_TOP_ACTIVITY_IMMERSIVE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 112","[]","Optional.empty","\android\app\IActivityManager.java"
"SERVICE_DONE_EXECUTING_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 60","[]","Optional.empty","\android\app\IActivityManager.java"
"START_INTENT_NOT_RESOLVED","true","false","false","true","true","int","-1","[]","Optional.empty","\android\app\IActivityManager.java"
"MOVE_TASK_TO_FRONT_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 23","[]","Optional.empty","\android\app\IActivityManager.java"
"GRANT_URI_PERMISSION_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 54","[]","Optional.empty","\android\app\IActivityManager.java"
"FINISH_OTHER_INSTANCES_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 38","[]","Optional.empty","\android\app\IActivityManager.java"
"GET_TASKS_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 22","[]","Optional.empty","\android\app\IActivityManager.java"
"SET_PROCESS_LIMIT_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 50","[]","Optional.empty","\android\app\IActivityManager.java"
"GET_RUNNING_APP_PROCESSES_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 82","[]","Optional.empty","\android\app\IActivityManager.java"
"STOP_SERVICE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 34","[]","Optional.empty","\android\app\IActivityManager.java"
"GET_MEMORY_INFO_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 75","[]","Optional.empty","\android\app\IActivityManager.java"
"WAKING_UP_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 40","[]","Optional.empty","\android\app\IActivityManager.java"
"STOP_SERVICE_TOKEN_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 47","[]","Optional.empty","\android\app\IActivityManager.java"
"FORCE_STOP_PACKAGE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 78","[]","Optional.empty","\android\app\IActivityManager.java"
"START_PERMISSION_DENIED","true","false","false","true","true","int","-4","[]","Optional.empty","\android\app\IActivityManager.java"
"GET_CALLING_ACTIVITY_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 21","[]","Optional.empty","\android\app\IActivityManager.java"
"SET_IMMERSIVE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 111","[]","Optional.empty","\android\app\IActivityManager.java"
"GET_RUNNING_SERVICE_CONTROL_PANEL_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 32","[]","Optional.empty","\android\app\IActivityManager.java"
"START_BACKUP_AGENT_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 89","[]","Optional.empty","\android\app\IActivityManager.java"
"GET_TASK_FOR_ACTIVITY_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 26","[]","Optional.empty","\android\app\IActivityManager.java"
"START_NOT_ACTIVITY","true","false","false","true","true","int","-5","[]","Optional.empty","\android\app\IActivityManager.java"
"BACKUP_AGENT_CREATED_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 90","[]","Optional.empty","\android\app\IActivityManager.java"
"PROFILE_CONTROL_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 85","[]","Optional.empty","\android\app\IActivityManager.java"
"ATTACH_APPLICATION_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 16","[]","Optional.empty","\android\app\IActivityManager.java"
"UNBIND_FINISHED_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 71","[]","Optional.empty","\android\app\IActivityManager.java"
"GRANT_URI_PERMISSION_FROM_OWNER_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 116","[]","Optional.empty","\android\app\IActivityManager.java"
"START_ACTIVITY_AND_WAIT_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 104","[]","Optional.empty","\android\app\IActivityManager.java"
"REVOKE_URI_PERMISSION_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 55","[]","Optional.empty","\android\app\IActivityManager.java"
"FINISH_ACTIVITY_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 10","[]","Optional[// Remaining non-native transaction codes.
]","\android\app\IActivityManager.java"
"RESUME_APP_SWITCHES_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 88","[]","Optional.empty","\android\app\IActivityManager.java"
"NOTE_WAKEUP_ALARM_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 67","[]","Optional.empty","\android\app\IActivityManager.java"
"OVERRIDE_PENDING_TRANSITION_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 100","[]","Optional.empty","\android\app\IActivityManager.java"
"START_ACTIVITY_WITH_CONFIG_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 106","[]","Optional.empty","\android\app\IActivityManager.java"
"FINISH_SUB_ACTIVITY_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 31","[]","Optional.empty","\android\app\IActivityManager.java"
"SET_ALWAYS_FINISH_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 42","[]","Optional.empty","\android\app\IActivityManager.java"
"GET_DEVICE_CONFIGURATION_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 83","[]","Optional.empty","\android\app\IActivityManager.java"
"BROADCAST_SUCCESS","true","false","false","true","true","int","0","[]","Optional.empty","\android\app\IActivityManager.java"
"OPEN_CONTENT_URI_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 4","[]","Optional.empty","\android\app\IActivityManager.java"
"STOP_APP_SWITCHES_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 87","[]","Optional.empty","\android\app\IActivityManager.java"
"UNBIND_BACKUP_AGENT_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 91","[]","Optional.empty","\android\app\IActivityManager.java"
"SET_ACTIVITY_CONTROLLER_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 56","[]","Optional.empty","\android\app\IActivityManager.java"
"START_SWITCHES_CANCELED","true","false","false","true","true","int","4","[]","Optional[/**
 * Returned by startActivity() if the start request was canceled because
 * app switches are temporarily canceled to ensure the user's last request
 * (such as pressing home) is performed.
 */
]","\android\app\IActivityManager.java"
"START_DELIVERED_TO_TOP","true","false","false","true","true","int","3","[]","Optional[/**
 * Returned by startActivity() if an activity wasn't really started, but
 * the given Intent was given to the existing top activity.
 */
]","\android\app\IActivityManager.java"
"GET_REQUESTED_ORIENTATION_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 70","[]","Optional.empty","\android\app\IActivityManager.java"
"GET_PACKAGE_FOR_TOKEN_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 49","[]","Optional.empty","\android\app\IActivityManager.java"
"GET_PACKAGE_FOR_INTENT_SENDER_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 64","[]","Optional.empty","\android\app\IActivityManager.java"
"START_CLASS_NOT_FOUND","true","false","false","true","true","int","-2","[]","Optional.empty","\android\app\IActivityManager.java"
"totalTime","true","false","false","false","false","long","null","[]","Optional.empty","\android\app\IActivityManager.java"
"CRASH_APPLICATION_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 113","[]","Optional.empty","\android\app\IActivityManager.java"
"thisTime","true","false","false","false","false","long","null","[]","Optional.empty","\android\app\IActivityManager.java"
"GET_RECENT_TASKS_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 59","[]","Optional.empty","\android\app\IActivityManager.java"
"ACTIVITY_STOPPED_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 19","[]","Optional.empty","\android\app\IActivityManager.java"
"IS_USER_A_MONKEY_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 103","[]","Optional.empty","\android\app\IActivityManager.java"
"who","true","false","false","false","false","ComponentName","null","[]","Optional.empty","\android\app\IActivityManager.java"
"GET_INTENT_SENDER_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 62","[]","Optional.empty","\android\app\IActivityManager.java"
"KILL_APPLICATION_PROCESS_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 98","[]","Optional.empty","\android\app\IActivityManager.java"
"HANDLE_APPLICATION_STRICT_MODE_VIOLATION_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 109","[]","Optional.empty","\android\app\IActivityManager.java"
"GET_PROCESS_MEMORY_INFO_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 97","[]","Optional.empty","\android\app\IActivityManager.java"
"HANDLE_APPLICATION_CRASH_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 1","[]","Optional.empty","\android\app\IActivityManager.java"
"BIND_SERVICE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 35","[]","Optional.empty","\android\app\IActivityManager.java"
"CLEAR_APP_DATA_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 77","[]","Optional.empty","\android\app\IActivityManager.java"
"SHOW_WAITING_FOR_DEBUGGER_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 57","[]","Optional.empty","\android\app\IActivityManager.java"
"GET_CONTENT_PROVIDER_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 28","[]","Optional.empty","\android\app\IActivityManager.java"
"noReleaseNeeded","true","false","false","false","false","boolean","null","[]","Optional.empty","\android\app\IActivityManager.java"
"START_ACTIVITY_IN_PACKAGE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 94","[]","Optional.empty","\android\app\IActivityManager.java"
"REVOKE_URI_PERMISSION_FROM_OWNER_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 117","[]","Optional.empty","\android\app\IActivityManager.java"
"FINISH_INSTRUMENTATION_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 44","[]","Optional.empty","\android\app\IActivityManager.java"
"FINISH_RECEIVER_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 15","[]","Optional.empty","\android\app\IActivityManager.java"
"CHECK_PERMISSION_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 52","[]","Optional.empty","\android\app\IActivityManager.java"
"PUBLISH_CONTENT_PROVIDERS_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 29","[]","Optional.empty","\android\app\IActivityManager.java"
"START_TASK_TO_FRONT","true","false","false","true","true","int","2","[]","Optional[/**
 * Returned by startActivity() if an activity wasn't really started, but
 * a task was simply brought to the foreground.
 */
]","\android\app\IActivityManager.java"
"START_ACTIVITY_INTENT_SENDER_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 99","[]","Optional.empty","\android\app\IActivityManager.java"
"START_CANCELED","true","false","false","true","true","int","-6","[]","Optional.empty","\android\app\IActivityManager.java"
"BROADCAST_STICKY_CANT_HAVE_PERMISSION","true","false","false","true","true","int","-1","[]","Optional.empty","\android\app\IActivityManager.java"
"UNBROADCAST_INTENT_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 14","[]","Optional.empty","\android\app\IActivityManager.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<StatusBarIconList>","new Parcelable.Creator<StatusBarIconList>() {

    public StatusBarIconList createFromParcel(Parcel parcel) {
        return new StatusBarIconList(parcel);
    }

    public StatusBarIconList[] newArray(int size) {
        return new StatusBarIconList[size];
    }
}","[]","Optional[/**
 * Parcelable.Creator that instantiates StatusBarIconList objects
 */
]","\com\android\internal\statusbar\StatusBarIconList.java"
"mIcons","false","false","true","false","false","StatusBarIcon","null","[]","Optional.empty","\com\android\internal\statusbar\StatusBarIconList.java"
"mSlots","false","false","true","false","false","String","null","[]","Optional.empty","\com\android\internal\statusbar\StatusBarIconList.java"
"mId","false","false","true","false","true","int","null","[]","Optional[// Unique identifier.
]","\android\webkit\WebHistoryItem.java"
"mOriginalUrl","false","false","true","false","false","String","null","[]","Optional[// The original requested url of this item.
]","\android\webkit\WebHistoryItem.java"
"mTouchIconUrl","false","false","true","false","false","String","null","[]","Optional[// The apple-touch-icon url for use when adding the site to the home screen
]","\android\webkit\WebHistoryItem.java"
"mCustomData","false","false","true","false","false","Object","null","[]","Optional[// Custom client data that is not flattened or read by native code.
]","\android\webkit\WebHistoryItem.java"
"mFavicon","false","false","true","false","false","Bitmap","null","[]","Optional[// The favicon for this item.
]","\android\webkit\WebHistoryItem.java"
"mTitle","false","false","true","false","false","String","null","[]","Optional[// The title of this item's document.
]","\android\webkit\WebHistoryItem.java"
"mFlattenedData","false","false","true","false","false","byte","null","[]","Optional[// The pre-flattened data used for saving the state.
]","\android\webkit\WebHistoryItem.java"
"sNextId","false","false","true","true","false","int","0","[]","Optional[// Global identifier count.
]","\android\webkit\WebHistoryItem.java"
"mUrl","false","false","true","false","false","String","null","[]","Optional[// The base url of this item.
]","\android\webkit\WebHistoryItem.java"
"mRingtoneClickListener","false","false","true","false","false","DialogInterface.OnClickListener","new DialogInterface.OnClickListener() {

    /*
         * On item clicked
         */
    public void onClick(DialogInterface dialog, int which) {
        // Save the position of most recently clicked item
        mClickedPos = which;
        // Play clip
        playRingtone(which, 0);
    }
}","[]","Optional.empty","\com\android\internal\app\RingtonePickerActivity.java"
"DELAY_MS_SELECTION_PLAYED","false","false","true","true","true","int","300","[]","Optional.empty","\com\android\internal\app\RingtonePickerActivity.java"
"mUriForDefaultItem","false","false","true","false","false","Uri","null","[]","Optional[/**
 * The Uri to play when the 'Default' item is clicked.
 */
]","\com\android\internal\app\RingtonePickerActivity.java"
"mHasSilentItem","false","false","true","false","false","boolean","null","[]","Optional[/**
 * Whether this list has the 'Silent' item.
 */
]","\com\android\internal\app\RingtonePickerActivity.java"
"mStaticItemCount","false","false","true","false","false","int","null","[]","Optional[/**
 * The number of static items in the list.
 */
]","\com\android\internal\app\RingtonePickerActivity.java"
"mRingtoneManager","false","false","true","false","false","RingtoneManager","null","[]","Optional.empty","\com\android\internal\app\RingtonePickerActivity.java"
"mClickedPos","false","false","true","false","false","int","-1","[]","Optional[/**
 * The position in the list of the last clicked item.
 */
]","\com\android\internal\app\RingtonePickerActivity.java"
"mCursor","false","false","true","false","false","Cursor","null","[]","Optional.empty","\com\android\internal\app\RingtonePickerActivity.java"
"mSilentPos","false","false","true","false","false","int","-1","[]","Optional[/**
 * The position in the list of the 'Silent' item.
 */
]","\com\android\internal\app\RingtonePickerActivity.java"
"mHasDefaultItem","false","false","true","false","false","boolean","null","[]","Optional[/**
 * Whether this list has the 'Default' item.
 */
]","\com\android\internal\app\RingtonePickerActivity.java"
"mHandler","false","false","true","false","false","Handler","null","[]","Optional.empty","\com\android\internal\app\RingtonePickerActivity.java"
"TAG","false","false","true","true","true","String","""RingtonePickerActivity""","[]","Optional.empty","\com\android\internal\app\RingtonePickerActivity.java"
"mDefaultRingtonePos","false","false","true","false","false","int","-1","[]","Optional[/**
 * The position in the list of the 'Default' item.
 */
]","\com\android\internal\app\RingtonePickerActivity.java"
"mExistingUri","false","false","true","false","false","Uri","null","[]","Optional[/**
 * The Uri to place a checkmark next to.
 */
]","\com\android\internal\app\RingtonePickerActivity.java"
"mDefaultRingtone","false","false","true","false","false","Ringtone","null","[]","Optional[/**
 * A Ringtone for the default ringtone. In most cases, the RingtoneManager
 * will stop the previous ringtone. However, the RingtoneManager doesn't
 * manage the default ringtone for us, so we should stop this one manually.
 */
]","\com\android\internal\app\RingtonePickerActivity.java"
"mSampleRingtonePos","false","false","true","false","false","int","-1","[]","Optional[/**
 * The position in the list of the ringtone to sample.
 */
]","\com\android\internal\app\RingtonePickerActivity.java"
"mDragging","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\MediaController.java"
"mRewListener","false","false","true","false","false","View.OnClickListener","new View.OnClickListener() {

    public void onClick(View v) {
        int pos = mPlayer.getCurrentPosition();
        // milliseconds
        pos -= 5000;
        mPlayer.seekTo(pos);
        setProgress();
        show(sDefaultTimeout);
    }
}","[]","Optional.empty","\android\widget\MediaController.java"
"mSeekListener","false","false","true","false","false","OnSeekBarChangeListener","new OnSeekBarChangeListener() {

    public void onStartTrackingTouch(SeekBar bar) {
        show(3600000);
        mDragging = true;
        // By removing these pending progress messages we make sure
        // that a) we won't update the progress while the user adjusts
        // the seekbar and b) once the user is done dragging the thumb
        // we will post one of these messages to the queue again and
        // this ensures that there will be exactly one message queued up.
        mHandler.removeMessages(SHOW_PROGRESS);
    }

    public void onProgressChanged(SeekBar bar, int progress, boolean fromuser) {
        if (!fromuser) {
            // the progress bar's position.
            return;
        }
        long duration = mPlayer.getDuration();
        long newposition = (duration * progress) / 1000L;
        mPlayer.seekTo((int) newposition);
        if (mCurrentTime != null)
            mCurrentTime.setText(stringForTime((int) newposition));
    }

    public void onStopTrackingTouch(SeekBar bar) {
        mDragging = false;
        setProgress();
        updatePausePlay();
        show(sDefaultTimeout);
        // Ensure that progress is properly updated in the future,
        // the call to show() does not guarantee this because it is a
        // no-op if we are already showing.
        mHandler.sendEmptyMessage(SHOW_PROGRESS);
    }
}","[]","Optional[// we will simply apply the updated position without suspending regular updates.
]","\android\widget\MediaController.java"
"mPauseListener","false","false","true","false","false","View.OnClickListener","new View.OnClickListener() {

    public void onClick(View v) {
        doPauseResume();
        show(sDefaultTimeout);
    }
}","[]","Optional.empty","\android\widget\MediaController.java"
"mFfwdListener","false","false","true","false","false","View.OnClickListener","new View.OnClickListener() {

    public void onClick(View v) {
        int pos = mPlayer.getCurrentPosition();
        // milliseconds
        pos += 15000;
        mPlayer.seekTo(pos);
        setProgress();
        show(sDefaultTimeout);
    }
}","[]","Optional.empty","\android\widget\MediaController.java"
"mFromXml","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\MediaController.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\widget\MediaController.java"
"mRewButton","false","false","true","false","false","ImageButton","null","[]","Optional.empty","\android\widget\MediaController.java"
"mFormatter","false","false","false","false","false","Formatter","null","[]","Optional.empty","\android\widget\MediaController.java"
"mNextListener","false","false","true","false","false","View.OnClickListener","null","[]","Optional.empty","\android\widget\MediaController.java"
"mAnchor","false","false","true","false","false","View","null","[]","Optional.empty","\android\widget\MediaController.java"
"mWindow","false","false","true","false","false","Window","null","[]","Optional.empty","\android\widget\MediaController.java"
"mRoot","false","false","true","false","false","View","null","[]","Optional.empty","\android\widget\MediaController.java"
"FADE_OUT","false","false","true","true","true","int","1","[]","Optional.empty","\android\widget\MediaController.java"
"mTouchListener","false","false","true","false","false","OnTouchListener","new OnTouchListener() {

    public boolean onTouch(View v, MotionEvent event) {
        if (event.getAction() == MotionEvent.ACTION_DOWN) {
            if (mShowing) {
                hide();
            }
        }
        return false;
    }
}","[]","Optional.empty","\android\widget\MediaController.java"
"mProgress","false","false","true","false","false","ProgressBar","null","[]","Optional.empty","\android\widget\MediaController.java"
"mFfwdButton","false","false","true","false","false","ImageButton","null","[]","Optional.empty","\android\widget\MediaController.java"
"mPlayer","false","false","true","false","false","MediaPlayerControl","null","[]","Optional.empty","\android\widget\MediaController.java"
"mWindowManager","false","false","true","false","false","WindowManager","null","[]","Optional.empty","\android\widget\MediaController.java"
"mDecor","false","false","true","false","false","View","null","[]","Optional.empty","\android\widget\MediaController.java"
"mEndTime","false","false","true","false","false","TextView","null","[]","Optional.empty","\android\widget\MediaController.java"
"mListenersSet","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\MediaController.java"
"mPauseButton","false","false","true","false","false","ImageButton","null","[]","Optional.empty","\android\widget\MediaController.java"
"mFormatBuilder","false","false","false","false","false","StringBuilder","null","[]","Optional.empty","\android\widget\MediaController.java"
"SHOW_PROGRESS","false","false","true","true","true","int","2","[]","Optional.empty","\android\widget\MediaController.java"
"mHandler","false","false","true","false","false","Handler","new Handler() {

    @Override
    public void handleMessage(Message msg) {
        int pos;
        switch(msg.what) {
            case FADE_OUT:
                hide();
                break;
            case SHOW_PROGRESS:
                pos = setProgress();
                if (!mDragging && mShowing && mPlayer.isPlaying()) {
                    msg = obtainMessage(SHOW_PROGRESS);
                    sendMessageDelayed(msg, 1000 - (pos % 1000));
                }
                break;
        }
    }
}","[]","Optional.empty","\android\widget\MediaController.java"
"mUseFastForward","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\MediaController.java"
"mPrevButton","false","false","true","false","false","ImageButton","null","[]","Optional.empty","\android\widget\MediaController.java"
"mNextButton","false","false","true","false","false","ImageButton","null","[]","Optional.empty","\android\widget\MediaController.java"
"sDefaultTimeout","false","false","true","true","true","int","3000","[]","Optional.empty","\android\widget\MediaController.java"
"mShowing","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\MediaController.java"
"mNativeContext","false","false","true","false","false","int","null","[]","Optional.empty","\android\os\StatFs.java"
"mSurface","false","false","false","false","true","Surface","new Surface()","[]","Optional.empty","\android\view\SurfaceView.java"
"mRequestedType","false","false","false","false","false","int","-1","[]","Optional.empty","\android\view\SurfaceView.java"
"mSurfaceView","false","false","true","false","true","WeakReference<SurfaceView>","null","[]","Optional.empty","\android\view\SurfaceView.java"
"mLeft","false","false","false","false","false","int","-1","[]","Optional.empty","\android\view\SurfaceView.java"
"mScrollChangedListener","false","false","false","false","true","ViewTreeObserver.OnScrollChangedListener","new ViewTreeObserver.OnScrollChangedListener() {

    public void onScrollChanged() {
        updateWindow(false, false);
    }
}","[]","Optional.empty","\android\view\SurfaceView.java"
"mNewSurfaceNeeded","false","false","false","false","false","boolean","false","[]","Optional.empty","\android\view\SurfaceView.java"
"mSurfaceHolder","false","false","true","false","false","SurfaceHolder","new SurfaceHolder() {

    private static final String LOG_TAG = ""SurfaceHolder"";

    public boolean isCreating() {
        return mIsCreating;
    }

    public void addCallback(Callback callback) {
        synchronized (mCallbacks) {
            // have only a couple callbacks, so it doesn't matter.
            if (mCallbacks.contains(callback) == false) {
                mCallbacks.add(callback);
            }
        }
    }

    public void removeCallback(Callback callback) {
        synchronized (mCallbacks) {
            mCallbacks.remove(callback);
        }
    }

    public void setFixedSize(int width, int height) {
        if (mRequestedWidth != width || mRequestedHeight != height) {
            mRequestedWidth = width;
            mRequestedHeight = height;
            requestLayout();
        }
    }

    public void setSizeFromLayout() {
        if (mRequestedWidth != -1 || mRequestedHeight != -1) {
            mRequestedWidth = mRequestedHeight = -1;
            requestLayout();
        }
    }

    public void setFormat(int format) {
        // means 565 for SurfaceView
        if (format == PixelFormat.OPAQUE)
            format = PixelFormat.RGB_565;
        mRequestedFormat = format;
        if (mWindow != null) {
            updateWindow(false, false);
        }
    }

    public void setType(int type) {
        switch(type) {
            case SURFACE_TYPE_HARDWARE:
            case SURFACE_TYPE_GPU:
                // these are deprecated, treat as ""NORMAL""
                type = SURFACE_TYPE_NORMAL;
                break;
        }
        switch(type) {
            case SURFACE_TYPE_NORMAL:
            case SURFACE_TYPE_PUSH_BUFFERS:
                mRequestedType = type;
                if (mWindow != null) {
                    updateWindow(false, false);
                }
                break;
        }
    }

    public void setKeepScreenOn(boolean screenOn) {
        Message msg = mHandler.obtainMessage(KEEP_SCREEN_ON_MSG);
        msg.arg1 = screenOn ? 1 : 0;
        mHandler.sendMessage(msg);
    }

    public Canvas lockCanvas() {
        return internalLockCanvas(null);
    }

    public Canvas lockCanvas(Rect dirty) {
        return internalLockCanvas(dirty);
    }

    private final Canvas internalLockCanvas(Rect dirty) {
        if (mType == SURFACE_TYPE_PUSH_BUFFERS) {
            throw new BadSurfaceTypeException(""Surface type is SURFACE_TYPE_PUSH_BUFFERS"");
        }
        mSurfaceLock.lock();
        if (localLOGV)
            Log.i(TAG, ""Locking canvas... stopped="" + mDrawingStopped + "", win="" + mWindow);
        Canvas c = null;
        if (!mDrawingStopped && mWindow != null) {
            Rect frame = dirty != null ? dirty : mSurfaceFrame;
            try {
                c = mSurface.lockCanvas(frame);
            } catch (Exception e) {
                Log.e(LOG_TAG, ""Exception locking surface"", e);
            }
        }
        if (localLOGV)
            Log.i(TAG, ""Returned canvas: "" + c);
        if (c != null) {
            mLastLockTime = SystemClock.uptimeMillis();
            return c;
        }
        // If the Surface is not ready to be drawn, then return null,
        // but throttle calls to this function so it isn't called more
        // than every 100ms.
        long now = SystemClock.uptimeMillis();
        long nextTime = mLastLockTime + 100;
        if (nextTime > now) {
            try {
                Thread.sleep(nextTime - now);
            } catch (InterruptedException e) {
            }
            now = SystemClock.uptimeMillis();
        }
        mLastLockTime = now;
        mSurfaceLock.unlock();
        return null;
    }

    public void unlockCanvasAndPost(Canvas canvas) {
        mSurface.unlockCanvasAndPost(canvas);
        mSurfaceLock.unlock();
    }

    public Surface getSurface() {
        return mSurface;
    }

    public Rect getSurfaceFrame() {
        return mSurfaceFrame;
    }
}","[]","Optional.empty","\android\view\SurfaceView.java"
"mRequestedHeight","false","false","false","false","false","int","-1","[]","Optional.empty","\android\view\SurfaceView.java"
"mLastLockTime","false","false","false","false","false","long","0","[]","Optional.empty","\android\view\SurfaceView.java"
"mWindowVisibility","false","false","false","false","false","boolean","false","[]","Optional.empty","\android\view\SurfaceView.java"
"mCallbacks","false","false","false","false","true","ArrayList<SurfaceHolder.Callback>","new ArrayList<SurfaceHolder.Callback>()","[]","Optional.empty","\android\view\SurfaceView.java"
"mSurfaceLock","false","false","false","false","true","ReentrantLock","new ReentrantLock()","[]","Optional.empty","\android\view\SurfaceView.java"
"mWindowType","false","false","false","false","false","int","WindowManager.LayoutParams.TYPE_APPLICATION_MEDIA","[]","Optional.empty","\android\view\SurfaceView.java"
"mWinFrame","false","false","false","false","true","Rect","new Rect()","[]","Optional.empty","\android\view\SurfaceView.java"
"mVisible","false","false","false","false","false","boolean","false","[]","Optional.empty","\android\view\SurfaceView.java"
"mLayout","false","false","false","false","true","WindowManager.LayoutParams","new WindowManager.LayoutParams()","[]","Optional.empty","\android\view\SurfaceView.java"
"mWindow","false","false","false","false","false","MyWindow","null","[]","Optional.empty","\android\view\SurfaceView.java"
"mLastSurfaceWidth","false","false","false","false","false","int","-1","[]","Optional.empty","\android\view\SurfaceView.java"
"LOG_TAG","false","false","true","true","true","String","""SurfaceHolder""","[]","Optional.empty","\android\view\SurfaceView.java"
"mSession","false","false","false","false","false","IWindowSession","null","[]","Optional.empty","\android\view\SurfaceView.java"
"mFormat","false","false","false","false","false","int","-1","[]","Optional.empty","\android\view\SurfaceView.java"
"mLocation","false","false","false","false","true","int","new int[2]","[]","Optional.empty","\android\view\SurfaceView.java"
"GET_NEW_SURFACE_MSG","false","false","false","true","true","int","2","[]","Optional.empty","\android\view\SurfaceView.java"
"mDestroyReportNeeded","false","false","false","false","false","boolean","false","[]","Optional.empty","\android\view\SurfaceView.java"
"mIsCreating","false","false","false","false","false","boolean","false","[]","Optional.empty","\android\view\SurfaceView.java"
"mCurWidth","false","false","false","false","false","int","-1","[]","Optional.empty","\android\view\SurfaceView.java"
"mHeight","false","false","false","false","false","int","-1","[]","Optional.empty","\android\view\SurfaceView.java"
"mContentInsets","false","false","false","false","true","Rect","new Rect()","[]","Optional.empty","\android\view\SurfaceView.java"
"mSurfaceFrame","false","false","false","false","true","Rect","new Rect()","[]","Optional.empty","\android\view\SurfaceView.java"
"mType","false","false","false","false","false","int","-1","[]","Optional.empty","\android\view\SurfaceView.java"
"mRequestedFormat","false","false","false","false","false","int","PixelFormat.RGB_565","[]","Optional[/* Set SurfaceView's format to 565 by default to maintain backward
     * compatibility with applications assuming this format.
     */
]","\android\view\SurfaceView.java"
"mHandler","false","false","false","false","true","Handler","new Handler() {

    @Override
    public void handleMessage(Message msg) {
        switch(msg.what) {
            case KEEP_SCREEN_ON_MSG:
                {
                    setKeepScreenOn(msg.arg1 != 0);
                }
                break;
            case GET_NEW_SURFACE_MSG:
                {
                    handleGetNewSurface();
                }
                break;
            case UPDATE_WINDOW_MSG:
                {
                    updateWindow(false, false);
                }
                break;
        }
    }
}","[]","Optional.empty","\android\view\SurfaceView.java"
"TAG","false","false","true","true","true","String","""SurfaceView""","[]","Optional.empty","\android\view\SurfaceView.java"
"KEEP_SCREEN_ON_MSG","false","false","false","true","true","int","1","[]","Optional.empty","\android\view\SurfaceView.java"
"mRequestedWidth","false","false","false","false","false","int","-1","[]","Optional.empty","\android\view\SurfaceView.java"
"mVisibleInsets","false","false","false","false","true","Rect","new Rect()","[]","Optional.empty","\android\view\SurfaceView.java"
"mTop","false","false","false","false","false","int","-1","[]","Optional.empty","\android\view\SurfaceView.java"
"UPDATE_WINDOW_MSG","false","false","false","true","true","int","3","[]","Optional.empty","\android\view\SurfaceView.java"
"mCurHeight","false","false","false","false","false","int","-1","[]","Optional.empty","\android\view\SurfaceView.java"
"mWidth","false","false","false","false","false","int","-1","[]","Optional.empty","\android\view\SurfaceView.java"
"mHaveFrame","false","false","false","false","false","boolean","false","[]","Optional.empty","\android\view\SurfaceView.java"
"mReportDrawNeeded","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\view\SurfaceView.java"
"localLOGV","false","false","true","true","true","boolean","DEBUG ? true : Config.LOGV","[]","Optional.empty","\android\view\SurfaceView.java"
"mConfiguration","false","false","false","false","true","Configuration","new Configuration()","[]","Optional.empty","\android\view\SurfaceView.java"
"mDrawingStopped","false","false","false","false","false","boolean","true","[]","Optional.empty","\android\view\SurfaceView.java"
"mRequestedVisible","false","false","false","false","false","boolean","false","[]","Optional.empty","\android\view\SurfaceView.java"
"mTranslator","false","false","true","false","false","Translator","null","[]","Optional.empty","\android\view\SurfaceView.java"
"mUpdateWindowNeeded","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\view\SurfaceView.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\view\SurfaceView.java"
"mViewVisibility","false","false","false","false","false","boolean","false","[]","Optional.empty","\android\view\SurfaceView.java"
"sCache","false","false","true","true","false","Object","new Object[CACHE_SIZE]","[]","Optional.empty","\com\android\internal\util\ArrayUtils.java"
"CACHE_SIZE","false","false","true","true","true","int","73","[]","Optional.empty","\com\android\internal\util\ArrayUtils.java"
"EMPTY","false","false","true","true","false","Object","new Object[0]","[]","Optional.empty","\com\android\internal\util\ArrayUtils.java"
"mCurrentCallerInfo","false","false","true","false","false","CallerInfo","null","[]","Optional[// State of the image on the imageview.
]","\android\pim\ContactsAsyncHelper.java"
"result","true","false","false","false","false","Object","null","[]","Optional.empty","\android\pim\ContactsAsyncHelper.java"
"listener","true","false","false","false","false","OnImageLoadCompleteListener","null","[]","Optional.empty","\android\pim\ContactsAsyncHelper.java"
"view","true","false","false","false","false","ImageView","null","[]","Optional.empty","\android\pim\ContactsAsyncHelper.java"
"info","true","false","false","false","false","CallerInfo","null","[]","Optional.empty","\android\pim\ContactsAsyncHelper.java"
"LOG_TAG","false","false","true","true","true","String","""ContactsAsyncHelper""","[]","Optional.empty","\android\pim\ContactsAsyncHelper.java"
"DEFAULT_TOKEN","false","false","true","true","true","int","-1","[]","Optional.empty","\android\pim\ContactsAsyncHelper.java"
"DISPLAY_UNDEFINED","true","false","false","true","true","int","0","[]","Optional[// Image display states
]","\android\pim\ContactsAsyncHelper.java"
"DISPLAY_IMAGE","true","false","false","true","true","int","-1","[]","Optional.empty","\android\pim\ContactsAsyncHelper.java"
"context","true","false","false","false","false","Context","null","[]","Optional.empty","\android\pim\ContactsAsyncHelper.java"
"cookie","true","false","false","false","false","Object","null","[]","Optional.empty","\android\pim\ContactsAsyncHelper.java"
"sThreadHandler","false","false","true","true","false","Handler","null","[]","Optional[// static objects
]","\android\pim\ContactsAsyncHelper.java"
"uri","true","false","false","false","false","Uri","null","[]","Optional.empty","\android\pim\ContactsAsyncHelper.java"
"sInstance","false","false","true","true","false","ContactsAsyncHelper","null","[]","Optional.empty","\android\pim\ContactsAsyncHelper.java"
"DBG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\pim\ContactsAsyncHelper.java"
"defaultResource","true","false","false","false","false","int","null","[]","Optional.empty","\android\pim\ContactsAsyncHelper.java"
"displayMode","false","false","true","false","false","int","null","[]","Optional.empty","\android\pim\ContactsAsyncHelper.java"
"DISPLAY_DEFAULT","true","false","false","true","true","int","-2","[]","Optional.empty","\android\pim\ContactsAsyncHelper.java"
"EVENT_LOAD_IMAGE","false","false","true","true","true","int","1","[]","Optional[// constants
]","\android\pim\ContactsAsyncHelper.java"
"mKey","false","false","true","false","true","String","null","[]","Optional.empty","\android\text\Annotation.java"
"mValue","false","false","true","false","true","String","null","[]","Optional.empty","\android\text\Annotation.java"
"mCacheResult","false","false","false","false","false","CacheManager.CacheResult","null","[]","Optional[// Content source
]","\android\webkit\CacheLoader.java"
"SQLITE_EXCEPTION_DETAIL_MESSAGE","false","false","true","true","true","String","""unable to open database file""","[]","Optional.empty","\android\database\sqlite\SqliteWrapper.java"
"TAG","false","false","true","true","true","String","""SqliteWrapper""","[]","Optional.empty","\android\database\sqlite\SqliteWrapper.java"
"isClosed","false","false","true","false","true","boolean","false","[]","Optional[/**
 * Flag set when the object is closed and thus not usable any more.
 */
]","\com\android\internal\nfc\P2pTarget.java"
"isConnected","false","false","true","false","false","boolean","false","[]","Optional[/**
 * Flag set when the tag is connected.
 */
]","\com\android\internal\nfc\P2pTarget.java"
"TAG","false","false","true","true","true","String","""P2pTarget""","[]","Optional.empty","\com\android\internal\nfc\P2pTarget.java"
"mService","false","false","true","false","true","IP2pTarget","null","[]","Optional[/**
 * The entry point for P2P tag operations.
 */
]","\com\android\internal\nfc\P2pTarget.java"
"SERVICE_INTERFACE","true","false","false","true","true","String","""android.accessibilityservice.AccessibilityService""","[]","Optional[/**
 * The {@link Intent} that must be declared as handled by the service.
 */
]","\android\accessibilityservice\AccessibilityService.java"
"DO_ON_INTERRUPT","false","false","true","true","true","int","20","[]","Optional.empty","\android\accessibilityservice\AccessibilityService.java"
"mInfo","false","false","true","false","false","AccessibilityServiceInfo","null","[]","Optional.empty","\android\accessibilityservice\AccessibilityService.java"
"mTarget","false","false","true","false","true","AccessibilityService","null","[]","Optional.empty","\android\accessibilityservice\AccessibilityService.java"
"mConnection","false","false","false","false","false","IAccessibilityServiceConnection","null","[]","Optional.empty","\android\accessibilityservice\AccessibilityService.java"
"LOG_TAG","false","false","true","true","true","String","""AccessibilityService""","[]","Optional.empty","\android\accessibilityservice\AccessibilityService.java"
"DO_ON_ACCESSIBILITY_EVENT","false","false","true","true","true","int","30","[]","Optional.empty","\android\accessibilityservice\AccessibilityService.java"
"mCaller","false","false","true","false","true","HandlerCaller","null","[]","Optional.empty","\android\accessibilityservice\AccessibilityService.java"
"DO_SET_SET_CONNECTION","false","false","true","true","true","int","10","[]","Optional.empty","\android\accessibilityservice\AccessibilityService.java"
"mTension","false","false","true","false","true","float","null","[]","Optional.empty","\android\view\animation\AnticipateInterpolator.java"
"CLEAR_ALL","false","false","false","true","true","int","4","[]","Optional.empty","\android\webkit\GeolocationPermissions.java"
"CALLBACK","false","false","true","true","true","String","""callback""","[]","Optional.empty","\android\webkit\GeolocationPermissions.java"
"ORIGIN","false","false","true","true","true","String","""origin""","[]","Optional.empty","\android\webkit\GeolocationPermissions.java"
"RETURN_ALLOWED","false","false","false","true","true","int","1","[]","Optional.empty","\android\webkit\GeolocationPermissions.java"
"ALLOW","false","false","false","true","true","int","3","[]","Optional.empty","\android\webkit\GeolocationPermissions.java"
"mQueuedMessages","false","false","true","false","false","Vector<Message>","null","[]","Optional[// A queue to store messages until the handler is ready.
]","\android\webkit\GeolocationPermissions.java"
"GET_ORIGINS","false","false","false","true","true","int","0","[]","Optional[// Message ids
]","\android\webkit\GeolocationPermissions.java"
"ORIGINS","false","false","true","true","true","String","""origins""","[]","Optional.empty","\android\webkit\GeolocationPermissions.java"
"mHandler","false","false","true","false","false","Handler","null","[]","Optional.empty","\android\webkit\GeolocationPermissions.java"
"RETURN_ORIGINS","false","false","false","true","true","int","0","[]","Optional[// Message ids on the UI thread
]","\android\webkit\GeolocationPermissions.java"
"TAG","false","false","true","true","true","String","""geolocationPermissions""","[]","Optional[// Log tag
]","\android\webkit\GeolocationPermissions.java"
"sInstance","false","false","true","true","false","GeolocationPermissions","null","[]","Optional[// Global instance
]","\android\webkit\GeolocationPermissions.java"
"GET_ALLOWED","false","false","false","true","true","int","1","[]","Optional.empty","\android\webkit\GeolocationPermissions.java"
"ALLOWED","false","false","true","true","true","String","""allowed""","[]","Optional.empty","\android\webkit\GeolocationPermissions.java"
"mUIHandler","false","false","true","false","false","Handler","null","[]","Optional.empty","\android\webkit\GeolocationPermissions.java"
"CLEAR","false","false","false","true","true","int","2","[]","Optional.empty","\android\webkit\GeolocationPermissions.java"
"mDisplay","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\Display.java"
"mPixelFormat","false","false","true","false","false","int","null","[]","Optional[// Following fields are initialized from native code
]","\android\view\Display.java"
"mMetrics","false","false","true","false","true","DisplayMetrics","null","[]","Optional.empty","\android\view\Display.java"
"mDpiX","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\Display.java"
"mDpiY","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\Display.java"
"DEFAULT_DISPLAY","true","false","false","true","true","int","0","[]","Optional[/**
 * Specify the default Display
 */
]","\android\view\Display.java"
"mRefreshRate","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\Display.java"
"mDensity","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\Display.java"
"mStaticInit","false","false","true","true","true","Object","new Object()","[]","Optional.empty","\android\view\Display.java"
"mInitialized","false","false","true","true","false","boolean","false","[]","Optional.empty","\android\view\Display.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<InputMethodInfo>","new Parcelable.Creator<InputMethodInfo>() {

    public InputMethodInfo createFromParcel(Parcel source) {
        return new InputMethodInfo(source);
    }

    public InputMethodInfo[] newArray(int size) {
        return new InputMethodInfo[size];
    }
}","[]","Optional[/**
 * Used to make this class parcelable.
 */
]","\android\view\inputmethod\InputMethodInfo.java"
"mId","false","false","false","false","true","String","null","[]","Optional[/**
 * The unique string Id to identify the input method.  This is generated
 * from the input method component.
 */
]","\android\view\inputmethod\InputMethodInfo.java"
"mSettingsActivityName","false","false","false","false","true","String","null","[]","Optional[/**
 * The input method setting activity's name, used by the system settings to
 * launch the setting activity of this input method.
 */
]","\android\view\inputmethod\InputMethodInfo.java"
"TAG","false","false","false","true","true","String","""InputMethodInfo""","[]","Optional.empty","\android\view\inputmethod\InputMethodInfo.java"
"mService","false","false","false","false","true","ResolveInfo","null","[]","Optional[/**
 * The Service that implements this input method component.
 */
]","\android\view\inputmethod\InputMethodInfo.java"
"mIsDefaultResId","false","false","false","false","true","int","null","[]","Optional[/**
 * The resource in the input method's .apk that holds a boolean indicating
 * whether it should be considered the default input method for this
 * system.  This is a resource ID instead of the final value so that it
 * can change based on the configuration (in particular locale).
 */
]","\android\view\inputmethod\InputMethodInfo.java"
"mLoaderQueue","false","false","true","false","false","LinkedList<LoadListener>","null","[]","Optional[/**
 * Loader queue.
 */
]","\android\webkit\HttpAuthHandler.java"
"mRequestInFlightLock","false","false","false","false","false","Object","new Object()","[]","Optional[// both the lock and the state, because Boolean is immutable.
]","\android\webkit\HttpAuthHandler.java"
"mRequestInFlight","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\webkit\HttpAuthHandler.java"
"AUTH_PROCEED","false","false","true","true","true","int","100","[]","Optional[// Message id for handling the user response
]","\android\webkit\HttpAuthHandler.java"
"mNetwork","false","false","true","false","false","Network","null","[]","Optional[/**
 * Network.
 */
]","\android\webkit\HttpAuthHandler.java"
"mUsername","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\HttpAuthHandler.java"
"AUTH_CANCEL","false","false","true","true","true","int","200","[]","Optional.empty","\android\webkit\HttpAuthHandler.java"
"mPassword","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\HttpAuthHandler.java"
"LOGTAG","false","false","true","true","true","String","""network""","[]","Optional.empty","\android\webkit\HttpAuthHandler.java"
"mSyncThread","false","false","true","false","false","Thread","null","[]","Optional[// thread for syncing
]","\android\webkit\WebSyncManager.java"
"SYNC_NOW_INTERVAL","false","false","true","true","false","int","100","[]","Optional[// 100 millisec
]","\android\webkit\WebSyncManager.java"
"mDataBase","false","true","false","false","false","WebViewDatabase","null","[]","Optional[// database for the persistent storage
]","\android\webkit\WebSyncManager.java"
"SYNC_MESSAGE","false","false","true","true","true","int","101","[]","Optional[// message code for sync message
]","\android\webkit\WebSyncManager.java"
"mHandler","false","true","false","false","false","Handler","null","[]","Optional[// handler of the sync thread
]","\android\webkit\WebSyncManager.java"
"mThreadName","false","false","true","false","false","String","null","[]","Optional[// Name of thread
]","\android\webkit\WebSyncManager.java"
"mStartSyncRefCount","false","false","true","false","false","int","null","[]","Optional[// Ref count for calls to start/stop sync
]","\android\webkit\WebSyncManager.java"
"SYNC_LATER_INTERVAL","false","false","true","true","false","int","5 * 60 * 1000","[]","Optional[// 5 minutes
]","\android\webkit\WebSyncManager.java"
"LOGTAG","false","true","false","true","true","String","""websync""","[]","Optional[// log tag
]","\android\webkit\WebSyncManager.java"
"mTension","false","false","true","false","true","float","null","[]","Optional.empty","\android\view\animation\OvershootInterpolator.java"
"mWindow","false","true","false","false","false","CursorWindow","null","[]","Optional[/**
 * This needs be updated in {@link #onMove} by subclasses, and
 * needs to be set to NULL when the contents of the cursor change.
 */
]","\android\database\AbstractWindowedCursor.java"
"SSL_EXPIRED","true","false","false","true","true","int","1","[]","Optional[/**
 * The certificate has expired
 */
]","\android\net\http\SslError.java"
"SSL_UNTRUSTED","true","false","false","true","true","int","3","[]","Optional[/**
 * The certificate authority is not trusted
 */
]","\android\net\http\SslError.java"
"SSL_IDMISMATCH","true","false","false","true","true","int","2","[]","Optional[/**
 * Hostname mismatch
 */
]","\android\net\http\SslError.java"
"mErrors","false","false","false","false","false","int","null","[]","Optional[/**
 * The SSL error set bitfield (each individual error is an bit index;
 * multiple individual errors can be OR-ed)
 */
]","\android\net\http\SslError.java"
"mCertificate","false","false","false","false","false","SslCertificate","null","[]","Optional[/**
 * The SSL certificate associated with the error set
 */
]","\android\net\http\SslError.java"
"SSL_MAX_ERROR","true","false","false","true","true","int","4","[]","Optional[/**
 * The number of different SSL errors (update if you add a new SSL error!!!)
 */
]","\android\net\http\SslError.java"
"SSL_NOTYETVALID","true","false","false","true","true","int","0","[]","Optional[/**
 * The certificate is not yet valid
 */
]","\android\net\http\SslError.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<InputBinding>","new Parcelable.Creator<InputBinding>() {

    public InputBinding createFromParcel(Parcel source) {
        return new InputBinding(source);
    }

    public InputBinding[] newArray(int size) {
        return new InputBinding[size];
    }
}","[]","Optional[/**
 * Used to make this class parcelable.
 */
]","\android\view\inputmethod\InputBinding.java"
"mUid","false","false","false","false","true","int","null","[]","Optional[/**
 * The UID where this binding came from.
 */
]","\android\view\inputmethod\InputBinding.java"
"mConnection","false","false","false","false","true","InputConnection","null","[]","Optional[/**
 * The connection back to the client.
 */
]","\android\view\inputmethod\InputBinding.java"
"mConnectionToken","false","false","false","false","true","IBinder","null","[]","Optional[/**
 * A remotable token for the connection back to the client.
 */
]","\android\view\inputmethod\InputBinding.java"
"TAG","false","false","false","true","true","String","""InputBinding""","[]","Optional.empty","\android\view\inputmethod\InputBinding.java"
"mPid","false","false","false","false","true","int","null","[]","Optional[/**
 * The PID where this binding came from.
 */
]","\android\view\inputmethod\InputBinding.java"
"mRequest","false","false","true","false","false","Request","null","[]","Optional.empty","\android\net\http\RequestHandle.java"
"mBodyProvider","false","false","true","false","false","InputStream","null","[]","Optional.empty","\android\net\http\RequestHandle.java"
"mRedirectCount","false","false","true","false","false","int","0","[]","Optional.empty","\android\net\http\RequestHandle.java"
"PROXY_AUTHORIZATION_HEADER","false","false","true","true","true","String","""Proxy-Authorization""","[]","Optional.empty","\android\net\http\RequestHandle.java"
"MAX_REDIRECT_COUNT","true","false","false","true","true","int","16","[]","Optional.empty","\android\net\http\RequestHandle.java"
"mMethod","false","false","true","false","false","String","null","[]","Optional.empty","\android\net\http\RequestHandle.java"
"mRequestQueue","false","false","true","false","false","RequestQueue","null","[]","Optional.empty","\android\net\http\RequestHandle.java"
"AUTHORIZATION_HEADER","false","false","true","true","true","String","""Authorization""","[]","Optional.empty","\android\net\http\RequestHandle.java"
"mConnection","false","false","true","false","false","Connection","null","[]","Optional[// Used only with synchronous requests.
]","\android\net\http\RequestHandle.java"
"mBodyLength","false","false","true","false","false","int","null","[]","Optional.empty","\android\net\http\RequestHandle.java"
"mUri","false","false","true","false","false","WebAddress","null","[]","Optional.empty","\android\net\http\RequestHandle.java"
"mHeaders","false","false","true","false","false","Map<String,String>","null","[]","Optional.empty","\android\net\http\RequestHandle.java"
"mUrl","false","false","true","false","false","String","null","[]","Optional.empty","\android\net\http\RequestHandle.java"
"mUseHomeTZ","false","false","true","true","false","boolean","false","[]","Optional.empty","\android\util\CalendarUtils.java"
"mFirstTZRequest","false","false","true","true","false","boolean","true","[]","Optional.empty","\android\util\CalendarUtils.java"
"TIMEZONE_TYPE_ARGS","false","false","true","true","true","String","{ CalendarCache.TIMEZONE_KEY_TYPE }","[]","Optional.empty","\android\util\CalendarUtils.java"
"mTZQueryInProgress","false","false","true","true","false","boolean","false","[]","Optional.empty","\android\util\CalendarUtils.java"
"mTZCallbacks","false","false","true","true","false","HashSet<Runnable>","new HashSet<Runnable>()","[]","Optional.empty","\android\util\CalendarUtils.java"
"KEY_HOME_TZ","true","false","false","true","true","String","""preferences_home_tz""","[]","Optional[/**
 * This is the key used for writing the time zone that should be used if
 * home time zones are enabled for the Calendar app.
 */
]","\android\util\CalendarUtils.java"
"mPrefsName","false","false","true","false","true","String","null","[]","Optional[// reasons, as it's what PreferenceManager assigned the first time the file was created.
]","\android\util\CalendarUtils.java"
"mHomeTZ","false","false","true","true","false","String","Time.getCurrentTimezone()","[]","Optional.empty","\android\util\CalendarUtils.java"
"mToken","false","false","true","true","false","int","1","[]","Optional.empty","\android\util\CalendarUtils.java"
"mF","false","false","true","true","false","Formatter","new Formatter(mSB, Locale.getDefault())","[]","Optional.empty","\android\util\CalendarUtils.java"
"mHandler","false","false","true","true","false","AsyncTZHandler","null","[]","Optional.empty","\android\util\CalendarUtils.java"
"TAG","false","false","true","true","true","String","""CalendarUtils""","[]","Optional.empty","\android\util\CalendarUtils.java"
"mSB","false","false","true","true","false","StringBuilder","new StringBuilder(50)","[]","Optional.empty","\android\util\CalendarUtils.java"
"KEY_HOME_TZ_ENABLED","true","false","false","true","true","String","""preferences_home_tz_enabled""","[]","Optional[/**
 * This is the key used for writing whether or not a home time zone should
 * be used in the Calendar app to the Calendar Preferences.
 */
]","\android\util\CalendarUtils.java"
"TIMEZONE_INSTANCES_ARGS","false","false","true","true","true","String","{ CalendarCache.TIMEZONE_KEY_INSTANCES }","[]","Optional.empty","\android\util\CalendarUtils.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\util\CalendarUtils.java"
"CHARACTERS","true","false","false","true","true","char","new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '/', '-', '.' }","[]","Optional[/**
 * The characters that are used.
 *
 * @see KeyEvent#getMatch
 * @see #getAcceptedChars
 */
]","\android\text\method\DateKeyListener.java"
"sInstance","false","false","true","true","false","DateKeyListener","null","[]","Optional.empty","\android\text\method\DateKeyListener.java"
"sHalfWidthMap","false","false","true","true","true","Map<Character,String>","new HashMap<Character, String>()","[]","Optional.empty","\android\pim\vcard\JapaneseUtils.java"
"x","true","false","false","false","false","int","null","[]","Optional[/**
 * The horizontal, or X, location of the child within the view group.
 */
]","\android\widget\AbsoluteLayout.java"
"y","true","false","false","false","false","int","null","[]","Optional[/**
 * The vertical, or Y, location of the child within the view group.
 */
]","\android\widget\AbsoluteLayout.java"
"mRoot","false","false","true","false","false","T","null","[]","Optional[/**
 * Next object to acquire
 */
]","\android\util\FinitePool.java"
"mInfinite","false","false","true","false","true","boolean","null","[]","Optional[/**
 * If true, mLimit is ignored
 */
]","\android\util\FinitePool.java"
"mPoolCount","false","false","true","false","false","int","null","[]","Optional[/**
 * Number of objects in the pool
 */
]","\android\util\FinitePool.java"
"mLimit","false","false","true","false","true","int","null","[]","Optional[/**
 * Maximum number of objects in the pool
 */
]","\android\util\FinitePool.java"
"mManager","false","false","true","false","true","PoolableManager<T>","null","[]","Optional[/**
 * Factory used to create new pool objects
 */
]","\android\util\FinitePool.java"
"mIsDefaultOrHipri","false","false","true","false","false","boolean","false","[]","Optional[// the other is also disconnected before we reset sockets
]","\android\net\MobileDataStateTracker.java"
"mEnabled","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\net\MobileDataStateTracker.java"
"mApnType","false","false","true","false","false","String","null","[]","Optional.empty","\android\net\MobileDataStateTracker.java"
"mConnectivityManager","false","false","false","false","false","ConnectivityManager","null","[]","Optional.empty","\android\net\MobileDataStateTracker.java"
"mApnName","false","false","true","false","false","String","null","[]","Optional.empty","\android\net\MobileDataStateTracker.java"
"mPhoneService","false","false","true","false","false","ITelephony","null","[]","Optional.empty","\android\net\MobileDataStateTracker.java"
"mStateReceiver","false","false","true","false","false","BroadcastReceiver","null","[]","Optional.empty","\android\net\MobileDataStateTracker.java"
"mApnTypeToWatchFor","false","false","true","false","false","String","null","[]","Optional.empty","\android\net\MobileDataStateTracker.java"
"TAG","false","false","true","true","true","String","""MobileDataStateTracker""","[]","Optional.empty","\android\net\MobileDataStateTracker.java"
"mMobileDataState","false","false","true","false","false","Phone.DataState","null","[]","Optional.empty","\android\net\MobileDataStateTracker.java"
"DBG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\net\MobileDataStateTracker.java"
"mPartData","false","false","true","false","false","byte","null","[]","Optional[/**
 * Part data.
 */
]","\com\google\android\mms\pdu\PduPart.java"
"P_DISPOSITION_INLINE","true","false","false","true","true","int","0x82","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_DEP_FILENAME","true","false","false","true","true","int","0x86","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_Q","true","false","false","true","true","int","0x80","[]","Optional[/**
 * Well-Known Parameters.
 */
]","\com\google\android\mms\pdu\PduPart.java"
"P_FILENAME","true","false","false","true","true","int","0x98","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_TYPE","true","false","false","true","true","int","0x83","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_COMMENT","true","false","false","true","true","int","0x9B","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_BASE64","true","false","false","true","true","String","""base64""","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_CT_MR_TYPE","true","false","false","true","true","int","0x89","[]","Optional[// This value of ""TYPE"" s used with Content-Type: multipart/related
]","\com\google\android\mms\pdu\PduPart.java"
"P_7BIT","true","false","false","true","true","String","""7bit""","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_BINARY","true","false","false","true","true","String","""binary""","[]","Optional[/**
 * Value of Content-Transfer-Encoding.
 */
]","\com\google\android\mms\pdu\PduPart.java"
"P_MAC","true","false","false","true","true","int","0x92","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_MODIFICATION_DATE","true","false","false","true","true","int","0x94","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_DIFFERENCES","true","false","false","true","true","int","0x87","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_START_INFO","true","false","false","true","true","int","0x9A","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_QUOTED_PRINTABLE","true","false","false","true","true","String","""quoted-printable""","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_DEP_DOMAIN","true","false","false","true","true","int","0x8D","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"DISPOSITION_ATTACHMENT","false","false","false","true","true","byte","""attachment"".getBytes()","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_LEVEL","true","false","false","true","true","int","0x82","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_CHARSET","true","false","false","true","true","int","0x81","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_NAME","true","false","false","true","true","int","0x97","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_CONTENT_ID","true","false","false","true","true","int","0xC0","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_SECURE","true","false","false","true","true","int","0x90","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"DISPOSITION_FROM_DATA","false","false","false","true","true","byte","""from-data"".getBytes()","[]","Optional[/**
 * Value of disposition can be set to PduPart when the value is octet in
 * the PDU.
 * ""from-data"" instead of Form-data<Octet 128>.
 * ""attachment"" instead of Attachment<Octet 129>.
 * ""inline"" instead of Inline<Octet 130>.
 */
]","\com\google\android\mms\pdu\PduPart.java"
"P_DEP_START_INFO","true","false","false","true","true","int","0x8B","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_CONTENT_TRANSFER_ENCODING","true","false","false","true","true","int","0xC8","[]","Optional[// The next header is unassigned header, use reserved header(0x48) value.
]","\com\google\android\mms\pdu\PduPart.java"
"P_DISPOSITION_FROM_DATA","true","false","false","true","true","int","0x80","[]","Optional[/**
 * Content-Disposition value.
 */
]","\com\google\android\mms\pdu\PduPart.java"
"P_DEP_COMMENT","true","false","false","true","true","int","0x8C","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_SEC","true","false","false","true","true","int","0x91","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_MAX_AGE","true","false","false","true","true","int","0x8E","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_START","true","false","false","true","true","int","0x99","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_PATH","true","false","false","true","true","int","0x9D","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_DISPOSITION_ATTACHMENT","true","false","false","true","true","int","0x81","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_SIZE","true","false","false","true","true","int","0x96","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"CONTENT_TRANSFER_ENCODING","true","false","false","true","true","String","""Content-Transfer-Encoding""","[]","Optional[/**
 * Content=Transfer-Encoding string.
 */
]","\com\google\android\mms\pdu\PduPart.java"
"TAG","false","false","true","true","true","String","""PduPart""","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"DISPOSITION_INLINE","false","false","false","true","true","byte","""inline"".getBytes()","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_CONTENT_TYPE","true","false","false","true","true","int","0x91","[]","Optional[/**
 * Header field names.
 */
]","\com\google\android\mms\pdu\PduPart.java"
"mUri","false","false","true","false","false","Uri","null","[]","Optional[/**
 * Data uri.
 */
]","\com\google\android\mms\pdu\PduPart.java"
"P_CONTENT_DISPOSITION","true","false","false","true","true","int","0xC5","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_DEP_START","true","false","false","true","true","int","0x8A","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_8BIT","true","false","false","true","true","String","""8bit""","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_DEP_PATH","true","false","false","true","true","int","0x8F","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_READ_DATE","true","false","false","true","true","int","0x95","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_PADDING","true","false","false","true","true","int","0x88","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_DOMAIN","true","false","false","true","true","int","0x9C","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_DEP_CONTENT_DISPOSITION","true","false","false","true","true","int","0xAE","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"mPartHeader","false","false","true","false","false","Map<Integer,Object>","null","[]","Optional[/**
 * Header of part.
 */
]","\com\google\android\mms\pdu\PduPart.java"
"P_CREATION_DATE","true","false","false","true","true","int","0x93","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_CONTENT_LOCATION","true","false","false","true","true","int","0x8E","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"P_DEP_NAME","true","false","false","true","true","int","0x85","[]","Optional.empty","\com\google\android\mms\pdu\PduPart.java"
"mCharacterSet","false","false","true","false","false","int","null","[]","Optional[/**
 * The Char-set value.
 */
]","\com\google\android\mms\pdu\EncodedStringValue.java"
"LOCAL_LOGV","false","false","true","true","true","boolean","DEBUG ? Config.LOGD : Config.LOGV","[]","Optional.empty","\com\google\android\mms\pdu\EncodedStringValue.java"
"TAG","false","false","true","true","true","String","""EncodedStringValue""","[]","Optional.empty","\com\google\android\mms\pdu\EncodedStringValue.java"
"mData","false","false","true","false","false","byte","null","[]","Optional[/**
 * The Text-string value.
 */
]","\com\google\android\mms\pdu\EncodedStringValue.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\com\google\android\mms\pdu\EncodedStringValue.java"
"mDivider","false","false","false","false","false","Drawable","null","[]","Optional.empty","\android\widget\ListView.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<SavedState>","new Parcelable.Creator<SavedState>() {

    public SavedState createFromParcel(Parcel in) {
        return new SavedState(in);
    }

    public SavedState[] newArray(int size) {
        return new SavedState[size];
    }
}","[]","Optional.empty","\android\widget\ListView.java"
"checkState","false","false","false","false","false","SparseBooleanArray","null","[]","Optional.empty","\android\widget\ListView.java"
"checkIdState","false","false","false","false","false","LongSparseArray<Boolean>","null","[]","Optional.empty","\android\widget\ListView.java"
"mCheckedIdStates","false","false","true","false","false","LongSparseArray<Boolean>","null","[]","Optional.empty","\android\widget\ListView.java"
"mFooterDividersEnabled","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\ListView.java"
"CHOICE_MODE_NONE","true","false","false","true","true","int","0","[]","Optional[/**
 * Normal list that does not indicate choices
 */
]","\android\widget\ListView.java"
"mHeaderViewInfos","false","false","true","false","false","ArrayList<FixedViewInfo>","Lists.newArrayList()","[]","Optional.empty","\android\widget\ListView.java"
"view","true","false","false","false","false","View","null","[]","Optional[/**
 * The view to add to the list
 */
]","\android\widget\ListView.java"
"mHeaderDividersEnabled","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\ListView.java"
"mFooterViewInfos","false","false","true","false","false","ArrayList<FixedViewInfo>","Lists.newArrayList()","[]","Optional.empty","\android\widget\ListView.java"
"mArrowScrollFocusResult","false","false","true","false","true","ArrowScrollFocusResult","new ArrowScrollFocusResult()","[]","Optional[// allocating these thingies too often.
]","\android\widget\ListView.java"
"MAX_SCROLL_FACTOR","false","false","true","true","true","float","0.33f","[]","Optional[/**
 * When arrow scrolling, ListView will never scroll more than this factor
 * times the height of the list.
 */
]","\android\widget\ListView.java"
"mAreAllItemsSelectable","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\widget\ListView.java"
"mAmountToScroll","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ListView.java"
"MIN_SCROLL_PREVIEW_PIXELS","false","false","true","true","true","int","2","[]","Optional[/**
 * When arrow scrolling, need a certain amount of pixels to preview next
 * items.  This is usually the fading edge, but if that is small enough,
 * we want to make sure we preview at least this many pixels.
 */
]","\android\widget\ListView.java"
"NO_POSITION","false","false","false","true","true","int","-1","[]","Optional[/**
 * Used to indicate a no preference for a position type.
 */
]","\android\widget\ListView.java"
"mPosition","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ListView.java"
"mChoiceMode","false","false","true","false","false","int","CHOICE_MODE_NONE","[]","Optional.empty","\android\widget\ListView.java"
"CHOICE_MODE_MULTIPLE","true","false","false","true","true","int","2","[]","Optional[/**
 * The list allows multiple choices
 */
]","\android\widget\ListView.java"
"mItemsCanFocus","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\ListView.java"
"mTempRect","false","false","true","false","true","Rect","new Rect()","[]","Optional[// used for temporary calculations.
]","\android\widget\ListView.java"
"mDividerPaint","false","false","true","false","false","Paint","null","[]","Optional.empty","\android\widget\ListView.java"
"mOverScrollHeader","false","false","false","false","false","Drawable","null","[]","Optional.empty","\android\widget\ListView.java"
"mPositionTop","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ListView.java"
"mDividerHeight","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\ListView.java"
"mFocusSelector","false","false","true","false","false","FocusSelector","null","[]","Optional[// Keeps focused children visible through resizes
]","\android\widget\ListView.java"
"data","true","false","false","false","false","Object","null","[]","Optional[/**
 * The data backing the view. This is returned from {@link ListAdapter#getItem(int)}.
 */
]","\android\widget\ListView.java"
"mSelectedPosition","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ListView.java"
"CHOICE_MODE_SINGLE","true","false","false","true","true","int","1","[]","Optional[/**
 * The list allows up to one choice
 */
]","\android\widget\ListView.java"
"isSelectable","true","false","false","false","false","boolean","null","[]","Optional[/**
 * <code>true</code> if the fixed view should be selectable in the list
 */
]","\android\widget\ListView.java"
"mIsCacheColorOpaque","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\ListView.java"
"mCheckStates","false","false","true","false","false","SparseBooleanArray","null","[]","Optional.empty","\android\widget\ListView.java"
"mDividerIsOpaque","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\ListView.java"
"mOverScrollFooter","false","false","false","false","false","Drawable","null","[]","Optional.empty","\android\widget\ListView.java"
"mClipDivider","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\ListView.java"
"LOCATION","false","false","true","true","true","int","0","[]","Optional.empty","\android\widget\TableRow.java"
"column","true","false","false","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""layout"")]","Optional[/**
 * <p>The column index of the cell represented by the widget.</p>
 */
]","\android\widget\TableRow.java"
"mColumnToChildIndex","false","false","true","false","false","SparseIntArray","null","[]","Optional.empty","\android\widget\TableRow.java"
"mNumColumns","false","false","true","false","false","int","0","[]","Optional.empty","\android\widget\TableRow.java"
"listener","false","false","true","false","false","OnHierarchyChangeListener","null","[]","Optional.empty","\android\widget\TableRow.java"
"mConstrainedColumnWidths","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\TableRow.java"
"LOCATION_NEXT","false","false","true","true","true","int","1","[]","Optional.empty","\android\widget\TableRow.java"
"span","true","false","false","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""layout"")]","Optional[/**
 * <p>The number of columns the widgets spans over.</p>
 */
]","\android\widget\TableRow.java"
"mColumnWidths","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\TableRow.java"
"mChildrenTracker","false","false","true","false","false","ChildrenTracker","null","[]","Optional.empty","\android\widget\TableRow.java"
"mOffset","false","false","true","false","false","int","new int[2]","[]","Optional.empty","\android\widget\TableRow.java"
"EXTRA_LEVEL","true","false","false","true","true","String","""level""","[]","Optional[/**
 * Extra for {@link android.content.Intent#ACTION_BATTERY_CHANGED}:
 * integer field containing the current battery level, from 0 to
 * {@link #EXTRA_SCALE}.
 */
]","\android\os\BatteryManager.java"
"BATTERY_STATUS_FULL","true","false","false","true","true","int","5","[]","Optional.empty","\android\os\BatteryManager.java"
"BATTERY_HEALTH_UNKNOWN","true","false","false","true","true","int","1","[]","Optional[// values for ""health"" field in the ACTION_BATTERY_CHANGED Intent
]","\android\os\BatteryManager.java"
"EXTRA_HEALTH","true","false","false","true","true","String","""health""","[]","Optional[/**
 * Extra for {@link android.content.Intent#ACTION_BATTERY_CHANGED}:
 * integer containing the current health constant.
 */
]","\android\os\BatteryManager.java"
"BATTERY_STATUS_CHARGING","true","false","false","true","true","int","2","[]","Optional.empty","\android\os\BatteryManager.java"
"BATTERY_PLUGGED_AC","true","false","false","true","true","int","1","[]","Optional[/**
 * Power source is an AC charger.
 */
]","\android\os\BatteryManager.java"
"EXTRA_ICON_SMALL","true","false","false","true","true","String","""icon-small""","[]","Optional[/**
 * Extra for {@link android.content.Intent#ACTION_BATTERY_CHANGED}:
 * integer containing the resource ID of a small status bar icon
 * indicating the current battery state.
 */
]","\android\os\BatteryManager.java"
"BATTERY_STATUS_NOT_CHARGING","true","false","false","true","true","int","4","[]","Optional.empty","\android\os\BatteryManager.java"
"EXTRA_STATUS","true","false","false","true","true","String","""status""","[]","Optional[/**
 * Extra for {@link android.content.Intent#ACTION_BATTERY_CHANGED}:
 * integer containing the current status constant.
 */
]","\android\os\BatteryManager.java"
"EXTRA_SCALE","true","false","false","true","true","String","""scale""","[]","Optional[/**
 * Extra for {@link android.content.Intent#ACTION_BATTERY_CHANGED}:
 * integer containing the maximum battery level.
 */
]","\android\os\BatteryManager.java"
"EXTRA_VOLTAGE","true","false","false","true","true","String","""voltage""","[]","Optional[/**
 * Extra for {@link android.content.Intent#ACTION_BATTERY_CHANGED}:
 * integer containing the current battery voltage level.
 */
]","\android\os\BatteryManager.java"
"EXTRA_PLUGGED","true","false","false","true","true","String","""plugged""","[]","Optional[/**
 * Extra for {@link android.content.Intent#ACTION_BATTERY_CHANGED}:
 * integer indicating whether the device is plugged in to a power
 * source; 0 means it is on battery, other constants are different
 * types of power sources.
 */
]","\android\os\BatteryManager.java"
"EXTRA_TECHNOLOGY","true","false","false","true","true","String","""technology""","[]","Optional[/**
 * Extra for {@link android.content.Intent#ACTION_BATTERY_CHANGED}:
 * String describing the technology of the current battery.
 */
]","\android\os\BatteryManager.java"
"BATTERY_PLUGGED_USB","true","false","false","true","true","int","2","[]","Optional[/**
 * Power source is a USB port.
 */
]","\android\os\BatteryManager.java"
"EXTRA_TEMPERATURE","true","false","false","true","true","String","""temperature""","[]","Optional[/**
 * Extra for {@link android.content.Intent#ACTION_BATTERY_CHANGED}:
 * integer containing the current battery temperature.
 */
]","\android\os\BatteryManager.java"
"BATTERY_HEALTH_GOOD","true","false","false","true","true","int","2","[]","Optional.empty","\android\os\BatteryManager.java"
"BATTERY_HEALTH_DEAD","true","false","false","true","true","int","4","[]","Optional.empty","\android\os\BatteryManager.java"
"BATTERY_HEALTH_OVERHEAT","true","false","false","true","true","int","3","[]","Optional.empty","\android\os\BatteryManager.java"
"BATTERY_STATUS_UNKNOWN","true","false","false","true","true","int","1","[]","Optional[// values for ""status"" field in the ACTION_BATTERY_CHANGED Intent
]","\android\os\BatteryManager.java"
"BATTERY_HEALTH_OVER_VOLTAGE","true","false","false","true","true","int","5","[]","Optional.empty","\android\os\BatteryManager.java"
"BATTERY_STATUS_DISCHARGING","true","false","false","true","true","int","3","[]","Optional.empty","\android\os\BatteryManager.java"
"BATTERY_HEALTH_UNSPECIFIED_FAILURE","true","false","false","true","true","int","6","[]","Optional.empty","\android\os\BatteryManager.java"
"EXTRA_PRESENT","true","false","false","true","true","String","""present""","[]","Optional[/**
 * Extra for {@link android.content.Intent#ACTION_BATTERY_CHANGED}:
 * boolean indicating whether a battery is present.
 */
]","\android\os\BatteryManager.java"
"mNumberPicker","false","false","true","false","false","NumberPicker","null","[]","Optional.empty","\android\widget\NumberPickerButton.java"
"STATE_GROUP_OR_PROPERTY_NAME","false","false","true","true","true","int","0","[]","Optional[// For performance reason, the states for group and property name are merged into one.
]","\android\pim\vcard\VCardParserImpl_V21.java"
"mTimeStartProperty","false","false","true","false","false","long","null","[]","Optional.empty","\android\pim\vcard\VCardParserImpl_V21.java"
"mTimeEndProperty","false","false","true","false","false","long","null","[]","Optional.empty","\android\pim\vcard\VCardParserImpl_V21.java"
"mReader","false","true","false","false","false","CustomBufferedReader","null","[]","Optional[/**
 * <p>
 * The reader object to be used internally.
 * </p>
 * <p>
 * Developers should not directly read a line from this object. Use
 * getLine() unless there some reason.
 * </p>
 */
]","\android\pim\vcard\VCardParserImpl_V21.java"
"mCurrentEncoding","false","true","false","false","false","String","null","[]","Optional[/**
 * <p>
 * The encoding type for deconding byte streams. This member variable is
 * reset to a default encoding every time when a new item comes.
 * </p>
 * <p>
 * ""Encoding"" in vCard is different from ""Charset"". It is mainly used for
 * addresses, notes, images. ""7BIT"", ""8BIT"", ""BASE64"", and
 * ""QUOTED-PRINTABLE"" are known examples.
 * </p>
 */
]","\android\pim\vcard\VCardParserImpl_V21.java"
"mTimeParseAdrOrgN","false","false","true","false","false","long","null","[]","Optional.empty","\android\pim\vcard\VCardParserImpl_V21.java"
"mTimeReadStartRecord","false","false","true","false","false","long","null","[]","Optional.empty","\android\pim\vcard\VCardParserImpl_V21.java"
"mPreviousLine","false","false","true","false","false","String","null","[]","Optional[// Used only for parsing END:VCARD.
]","\android\pim\vcard\VCardParserImpl_V21.java"
"mNestCount","false","false","true","false","false","int","null","[]","Optional[// TODO: Don't ignore by using count, but read all of information outside vCard.
]","\android\pim\vcard\VCardParserImpl_V21.java"
"mTimeHandleBase64","false","false","true","false","false","long","null","[]","Optional.empty","\android\pim\vcard\VCardParserImpl_V21.java"
"mUnknownValueSet","false","true","false","false","true","Set<String>","new HashSet<String>()","[]","Optional[/**
 * <p>
 * Set for storing unkonwn VALUE attributes, which is not acceptable in
 * vCard specification, but happens to be seen in real world vCard.
 * </p>
 */
]","\android\pim\vcard\VCardParserImpl_V21.java"
"mTimeTotal","false","false","true","false","false","long","null","[]","Optional[// For measuring performance.
]","\android\pim\vcard\VCardParserImpl_V21.java"
"LOG_TAG","false","false","true","true","true","String","""VCardParserImpl_V21""","[]","Optional.empty","\android\pim\vcard\VCardParserImpl_V21.java"
"mNextLine","false","false","true","false","false","String","null","[]","Optional.empty","\android\pim\vcard\VCardParserImpl_V21.java"
"mTime","false","false","true","false","false","long","null","[]","Optional.empty","\android\pim\vcard\VCardParserImpl_V21.java"
"STATE_PARAMS","false","false","true","true","true","int","1","[]","Optional.empty","\android\pim\vcard\VCardParserImpl_V21.java"
"STATE_PARAMS_IN_DQUOTE","false","false","true","true","true","int","2","[]","Optional[// vCard 3.0 specification allows double-quoted parameters, while vCard 2.1 does not.
]","\android\pim\vcard\VCardParserImpl_V21.java"
"mTimeHandleMiscPropertyValue","false","false","true","false","false","long","null","[]","Optional.empty","\android\pim\vcard\VCardParserImpl_V21.java"
"mUnknownTypeSet","false","true","false","false","true","Set<String>","new HashSet<String>()","[]","Optional[/**
 * <p>
 * Set for storing unkonwn TYPE attributes, which is not acceptable in vCard
 * specification, but happens to be seen in real world vCard.
 * </p>
 */
]","\android\pim\vcard\VCardParserImpl_V21.java"
"mNextLineIsValid","false","false","true","false","false","boolean","null","[]","Optional[/**
 * Needed since ""next line"" may be null due to end of line.
 */
]","\android\pim\vcard\VCardParserImpl_V21.java"
"DEFAULT_ENCODING","false","false","true","true","true","String","""8BIT""","[]","Optional.empty","\android\pim\vcard\VCardParserImpl_V21.java"
"mCanceled","false","true","false","false","false","boolean","null","[]","Optional.empty","\android\pim\vcard\VCardParserImpl_V21.java"
"mInterpreter","false","true","false","false","false","VCardInterpreter","null","[]","Optional.empty","\android\pim\vcard\VCardParserImpl_V21.java"
"mTimeReadEndRecord","false","false","true","false","false","long","null","[]","Optional.empty","\android\pim\vcard\VCardParserImpl_V21.java"
"mTimeParseItems","false","false","true","false","false","long","null","[]","Optional.empty","\android\pim\vcard\VCardParserImpl_V21.java"
"mTimeParseLineAndHandleGroup","false","false","true","false","false","long","null","[]","Optional.empty","\android\pim\vcard\VCardParserImpl_V21.java"
"mIntermediateCharset","false","true","false","false","true","String","null","[]","Optional.empty","\android\pim\vcard\VCardParserImpl_V21.java"
"mTimeParsePropertyValues","false","false","true","false","false","long","null","[]","Optional.empty","\android\pim\vcard\VCardParserImpl_V21.java"
"mTimeHandleQuotedPrintable","false","false","true","false","false","long","null","[]","Optional.empty","\android\pim\vcard\VCardParserImpl_V21.java"
"mSearchManager","false","false","true","false","false","SearchManager","null","[]","Optional.empty","\android\app\SuggestionsAdapter.java"
"DELETE_KEY_POST_DELAY","false","false","true","true","true","long","500L","[]","Optional[/**
 * The amount of time we delay in the filter when the user presses the delete key.
 * @see Filter#setDelayer(android.widget.Filter.Delayer).
 */
]","\android\app\SuggestionsAdapter.java"
"mIcon1","true","false","false","false","true","ImageView","null","[]","Optional.empty","\android\app\SuggestionsAdapter.java"
"mIcon2","true","false","false","false","true","ImageView","null","[]","Optional.empty","\android\app\SuggestionsAdapter.java"
"mOutsideDrawablesCache","false","false","true","false","false","WeakHashMap<String,Drawable.ConstantState>","null","[]","Optional.empty","\android\app\SuggestionsAdapter.java"
"mProviderContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\app\SuggestionsAdapter.java"
"QUERY_LIMIT","false","false","true","true","true","int","50","[]","Optional.empty","\android\app\SuggestionsAdapter.java"
"mSearchable","false","false","true","false","false","SearchableInfo","null","[]","Optional.empty","\android\app\SuggestionsAdapter.java"
"mSearchDialog","false","false","true","false","false","SearchDialog","null","[]","Optional.empty","\android\app\SuggestionsAdapter.java"
"mText2UrlCol","false","false","true","false","false","int","null","[]","Optional.empty","\android\app\SuggestionsAdapter.java"
"mStartSpinnerRunnable","false","false","true","false","true","Runnable","null","[]","Optional.empty","\android\app\SuggestionsAdapter.java"
"mClosed","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\app\SuggestionsAdapter.java"
"mText1Col","false","false","true","false","false","int","null","[]","Optional[// Cached column indexes, updated when the cursor changes.
]","\android\app\SuggestionsAdapter.java"
"mBackgroundColorCol","false","false","true","false","false","int","null","[]","Optional.empty","\android\app\SuggestionsAdapter.java"
"LOG_TAG","false","false","true","true","true","String","""SuggestionsAdapter""","[]","Optional.empty","\android\app\SuggestionsAdapter.java"
"mText2","true","false","false","false","true","TextView","null","[]","Optional.empty","\android\app\SuggestionsAdapter.java"
"mText1","true","false","false","false","true","TextView","null","[]","Optional.empty","\android\app\SuggestionsAdapter.java"
"NONE","false","false","false","true","true","int","-1","[]","Optional.empty","\android\app\SuggestionsAdapter.java"
"mText2Col","false","false","true","false","false","int","null","[]","Optional.empty","\android\app\SuggestionsAdapter.java"
"mIconName2Col","false","false","true","false","false","int","null","[]","Optional.empty","\android\app\SuggestionsAdapter.java"
"mUrlColor","false","false","true","false","false","ColorStateList","null","[]","Optional[// URL color
]","\android\app\SuggestionsAdapter.java"
"DBG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\app\SuggestionsAdapter.java"
"mPreviousLength","false","false","true","false","false","int","0","[]","Optional.empty","\android\app\SuggestionsAdapter.java"
"mStopSpinnerRunnable","false","false","true","false","true","Runnable","null","[]","Optional.empty","\android\app\SuggestionsAdapter.java"
"mBackgroundsCache","false","false","true","false","false","SparseArray<Drawable.ConstantState>","null","[]","Optional.empty","\android\app\SuggestionsAdapter.java"
"mIconName1Col","false","false","true","false","false","int","null","[]","Optional.empty","\android\app\SuggestionsAdapter.java"
"mOnDismissListener","false","false","true","false","false","OnDismissListener","null","[]","Optional.empty","\android\widget\PopupWindow.java"
"ABOVE_ANCHOR_STATE_SET","false","false","true","true","true","int","new int[] { com.android.internal.R.attr.state_above_anchor }","[]","Optional.empty","\android\widget\PopupWindow.java"
"mIgnoreCheekPress","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\PopupWindow.java"
"INPUT_METHOD_NOT_NEEDED","true","false","false","true","true","int","2","[]","Optional[/**
 * Mode for {@link #setInputMethodMode(int)}: this popup never needs to
 * work with an input method, regardless of whether it is focusable.  This
 * means that it will always be displayed to use as much space on the
 * screen as needed, regardless of whether this covers the input method.
 */
]","\android\widget\PopupWindow.java"
"mIsShowing","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\PopupWindow.java"
"mAboveAnchorBackgroundDrawable","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\PopupWindow.java"
"mAboveAnchor","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\PopupWindow.java"
"mBelowAnchorBackgroundDrawable","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\PopupWindow.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\widget\PopupWindow.java"
"mOnScrollChangedListener","false","false","true","false","false","OnScrollChangedListener","new OnScrollChangedListener() {

    public void onScrollChanged() {
        View anchor = mAnchor.get();
        if (anchor != null && mPopupView != null) {
            WindowManager.LayoutParams p = (WindowManager.LayoutParams) mPopupView.getLayoutParams();
            updateAboveAnchor(findDropDownPosition(anchor, p, mAnchorXoff, mAnchorYoff));
            update(p.x, p.y, -1, -1, true);
        }
    }
}","[]","Optional.empty","\android\widget\PopupWindow.java"
"mPopupView","false","false","true","false","false","View","null","[]","Optional.empty","\android\widget\PopupWindow.java"
"mAnchorXoff","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\PopupWindow.java"
"mIsDropdown","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\PopupWindow.java"
"mLastWidth","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\PopupWindow.java"
"mDrawingLocation","false","false","true","false","false","int","new int[2]","[]","Optional.empty","\android\widget\PopupWindow.java"
"INPUT_METHOD_FROM_FOCUSABLE","true","false","false","true","true","int","0","[]","Optional[/**
 * Mode for {@link #setInputMethodMode(int)}: the requirements for the
 * input method should be based on the focusability of the popup.  That is
 * if it is focusable than it needs to work with the input method, else
 * it doesn't.
 */
]","\android\widget\PopupWindow.java"
"mAnchor","false","false","true","false","false","WeakReference<View>","null","[]","Optional.empty","\android\widget\PopupWindow.java"
"mHeightMode","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\PopupWindow.java"
"mContentView","false","false","true","false","false","View","null","[]","Optional.empty","\android\widget\PopupWindow.java"
"mScreenLocation","false","false","true","false","false","int","new int[2]","[]","Optional.empty","\android\widget\PopupWindow.java"
"mClippingEnabled","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\widget\PopupWindow.java"
"mLayoutInScreen","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\PopupWindow.java"
"mWindowManager","false","false","true","false","false","WindowManager","null","[]","Optional.empty","\android\widget\PopupWindow.java"
"mPopupWidth","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\PopupWindow.java"
"mWidthMode","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\PopupWindow.java"
"mTouchable","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\widget\PopupWindow.java"
"mTempRect","false","false","true","false","false","Rect","new Rect()","[]","Optional.empty","\android\widget\PopupWindow.java"
"mHeight","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\PopupWindow.java"
"mPopupHeight","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\PopupWindow.java"
"mSplitTouchEnabled","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\PopupWindow.java"
"mSoftInputMode","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\PopupWindow.java"
"mAnimationStyle","false","false","true","false","false","int","-1","[]","Optional.empty","\android\widget\PopupWindow.java"
"mFocusable","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\PopupWindow.java"
"mLastHeight","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\PopupWindow.java"
"mWidth","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\PopupWindow.java"
"mTouchInterceptor","false","false","true","false","false","OnTouchListener","null","[]","Optional.empty","\android\widget\PopupWindow.java"
"mBackground","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\PopupWindow.java"
"mInputMethodMode","false","false","true","false","false","int","INPUT_METHOD_FROM_FOCUSABLE","[]","Optional.empty","\android\widget\PopupWindow.java"
"INPUT_METHOD_NEEDED","true","false","false","true","true","int","1","[]","Optional[/**
 * Mode for {@link #setInputMethodMode(int)}: this popup always needs to
 * work with an input method, regardless of whether it is focusable.  This
 * means that it will always be displayed so that the user can also operate
 * the input method while it is shown.
 */
]","\android\widget\PopupWindow.java"
"mWindowLayoutType","false","false","true","false","false","int","WindowManager.LayoutParams.TYPE_APPLICATION_PANEL","[]","Optional.empty","\android\widget\PopupWindow.java"
"mOutsideTouchable","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\PopupWindow.java"
"mFactor","false","false","true","false","true","float","null","[]","Optional.empty","\android\view\animation\AccelerateInterpolator.java"
"mDoubleFactor","false","false","true","false","true","double","null","[]","Optional.empty","\android\view\animation\AccelerateInterpolator.java"
"mColumns","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\StaticLayout.java"
"ELLIPSIS_START","false","false","true","true","true","int","3","[]","Optional.empty","\android\text\StaticLayout.java"
"START_MASK","false","false","true","true","true","int","0x1FFFFFFF","[]","Optional.empty","\android\text\StaticLayout.java"
"FIRST_RIGHT_TO_LEFT","false","false","true","true","true","char","'\u0590'","[]","Optional.empty","\android\text\StaticLayout.java"
"mWidths","false","false","true","false","false","float","null","[]","Optional.empty","\android\text\StaticLayout.java"
"DIR","false","false","true","true","true","int","START","[]","Optional.empty","\android\text\StaticLayout.java"
"mChdirs","false","false","true","false","false","byte","null","[]","Optional[/*
     * These are reused across calls to generate()
     */
]","\android\text\StaticLayout.java"
"FIRST_CJK","false","false","true","true","true","char","'\u2E80'","[]","Optional.empty","\android\text\StaticLayout.java"
"ELLIPSIS_COUNT","false","false","true","true","true","int","4","[]","Optional.empty","\android\text\StaticLayout.java"
"mEllipsizedWidth","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\StaticLayout.java"
"mLines","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\StaticLayout.java"
"START","false","false","true","true","true","int","0","[]","Optional.empty","\android\text\StaticLayout.java"
"DESCENT","false","false","true","true","true","int","2","[]","Optional.empty","\android\text\StaticLayout.java"
"TAB_MASK","false","false","true","true","true","int","0x20000000","[]","Optional.empty","\android\text\StaticLayout.java"
"mChs","false","false","true","false","false","char","null","[]","Optional.empty","\android\text\StaticLayout.java"
"TOP","false","false","true","true","true","int","1","[]","Optional.empty","\android\text\StaticLayout.java"
"mLineDirections","false","false","true","false","false","Directions","null","[]","Optional.empty","\android\text\StaticLayout.java"
"TAB","false","false","true","true","true","int","START","[]","Optional.empty","\android\text\StaticLayout.java"
"COLUMNS_NORMAL","false","false","true","true","true","int","3","[]","Optional.empty","\android\text\StaticLayout.java"
"mLineCount","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\StaticLayout.java"
"mTopPadding","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\StaticLayout.java"
"COLUMNS_ELLIPSIZE","false","false","true","true","true","int","5","[]","Optional.empty","\android\text\StaticLayout.java"
"DIR_MASK","false","false","true","true","true","int","0xC0000000","[]","Optional.empty","\android\text\StaticLayout.java"
"DIR_SHIFT","false","false","true","true","true","int","30","[]","Optional.empty","\android\text\StaticLayout.java"
"mFontMetricsInt","false","false","true","false","false","Paint.FontMetricsInt","new Paint.FontMetricsInt()","[]","Optional.empty","\android\text\StaticLayout.java"
"key","false","false","false","false","false","String","null","[]","Optional.empty","\android\app\backup\BackupDataInput.java"
"dataSize","false","false","false","false","false","int","null","[]","Optional.empty","\android\app\backup\BackupDataInput.java"
"mHeaderReady","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\app\backup\BackupDataInput.java"
"mBackupReader","false","false","false","false","false","int","null","[]","Optional.empty","\android\app\backup\BackupDataInput.java"
"mHeader","false","false","true","false","false","EntityHeader","new EntityHeader()","[]","Optional.empty","\android\app\backup\BackupDataInput.java"
"data","true","false","false","false","false","char","null","[]","Optional[// In and out parameter
]","\android\database\CharArrayBuffer.java"
"sizeCopied","true","false","false","false","false","int","null","[]","Optional[// Out parameter
]","\android\database\CharArrayBuffer.java"
"observer","true","false","false","false","true","IContentObserver","null","[]","Optional.empty","\android\content\ContentService.java"
"mSyncManager","false","false","true","false","false","SyncManager","null","[]","Optional.empty","\android\content\ContentService.java"
"mNode","false","false","false","false","true","ObserverNode","null","[]","Optional.empty","\android\content\ContentService.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\content\ContentService.java"
"mSelfNotify","false","false","false","false","true","boolean","null","[]","Optional.empty","\android\content\ContentService.java"
"mSyncManagerLock","false","false","true","false","true","Object","new Object()","[]","Optional.empty","\android\content\ContentService.java"
"mChildren","false","false","true","false","false","ArrayList<ObserverNode>","new ArrayList<ObserverNode>()","[]","Optional.empty","\android\content\ContentService.java"
"DELETE_TYPE","true","false","false","true","true","int","2","[]","Optional.empty","\android\content\ContentService.java"
"mRootNode","false","false","true","false","true","ObserverNode","new ObserverNode("""")","[]","Optional.empty","\android\content\ContentService.java"
"mFactoryTest","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\content\ContentService.java"
"mObservers","false","false","true","false","false","ArrayList<ObserverEntry>","new ArrayList<ObserverEntry>()","[]","Optional.empty","\android\content\ContentService.java"
"mName","false","false","true","false","false","String","null","[]","Optional.empty","\android\content\ContentService.java"
"INSERT_TYPE","true","false","false","true","true","int","0","[]","Optional.empty","\android\content\ContentService.java"
"UPDATE_TYPE","true","false","false","true","true","int","1","[]","Optional.empty","\android\content\ContentService.java"
"TAG","false","false","true","true","true","String","""ContentService""","[]","Optional.empty","\android\content\ContentService.java"
"observersLock","false","false","true","false","true","Object","null","[]","Optional.empty","\android\content\ContentService.java"
"mObserver","false","false","false","false","true","IContentObserver","null","[]","Optional.empty","\android\content\ContentService.java"
"notifyForDescendents","true","false","false","false","true","boolean","null","[]","Optional.empty","\android\content\ContentService.java"
"FIRST_CALL_TRANSACTION","false","false","false","false","false","int","0x00000001","[]","Optional[/**
 * The first transaction code available for user commands.
 */
]","\android\os\IBinder.java"
"PING_TRANSACTION","false","false","false","false","false","int","('_' << 24) | ('P' << 16) | ('N' << 8) | 'G'","[]","Optional[/**
 * IBinder protocol transaction code: pingBinder().
 */
]","\android\os\IBinder.java"
"LAST_CALL_TRANSACTION","false","false","false","false","false","int","0x00ffffff","[]","Optional[/**
 * The last transaction code available for user commands.
 */
]","\android\os\IBinder.java"
"DUMP_TRANSACTION","false","false","false","false","false","int","('_' << 24) | ('D' << 16) | ('M' << 8) | 'P'","[]","Optional[/**
 * IBinder protocol transaction code: dump internal state.
 */
]","\android\os\IBinder.java"
"INTERFACE_TRANSACTION","false","false","false","false","false","int","('_' << 24) | ('N' << 16) | ('T' << 8) | 'F'","[]","Optional[/**
 * IBinder protocol transaction code: interrogate the recipient side
 * of the transaction for its canonical interface descriptor.
 */
]","\android\os\IBinder.java"
"FLAG_ONEWAY","false","false","false","false","false","int","0x00000001","[]","Optional[/**
 * Flag to {@link #transact}: this is a one-way call, meaning that the
 * caller returns immediately, without waiting for a result from the
 * callee. Applies only if the caller and callee are in different
 * processes.
 */
]","\android\os\IBinder.java"
"FX_SURFACE_BLUR","true","false","false","true","true","int","0x00010000","[]","Optional[/**
 * Creates a Blur surface. Everything behind this surface is blurred
 * by some amount. The quality and refresh speed of the blur effect
 * is not settable or guaranteed.
 * It is an error to lock a Blur surface, since it doesn't have
 * a backing store.
 */
]","\android\view\Surface.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<Surface>","new Parcelable.Creator<Surface>() {

    public Surface createFromParcel(Parcel source) {
        try {
            return new Surface(source);
        } catch (Exception e) {
            Log.e(LOG_TAG, ""Exception creating surface from parcel"", e);
        }
        return null;
    }

    public Surface[] newArray(int size) {
        return new Surface[size];
    }
}","[]","Optional.empty","\android\view\Surface.java"
"mSurfaceControl","false","false","true","false","false","int","null","[@SuppressWarnings(""unused"")]","Optional.empty","\android\view\Surface.java"
"ROTATION_90","true","false","false","true","true","int","1","[]","Optional.empty","\android\view\Surface.java"
"FLAGS_ORIENTATION_ANIMATION_DISABLE","true","false","false","true","true","int","0x000000001","[]","Optional[/**
 * Disable the orientation animation
 * {@hide}
 */
]","\android\view\Surface.java"
"HARDWARE","true","false","false","true","true","int","0x00000010","[@Deprecated]","Optional[/**
 * The surface is to be used by hardware accelerators or DMA engines
 * @deprecated this is ignored, this value is set automatically when needed.
 */
]","\android\view\Surface.java"
"FX_SURFACE_MASK","true","false","false","true","true","int","0x000F0000","[]","Optional[/**
 * Mask used for FX values above
 */
]","\android\view\Surface.java"
"GPU","true","false","false","true","true","int","0x00000028","[@Deprecated]","Optional[/**
 * Implies ""HARDWARE"", the surface is to be used by the GPU
 * additionally the backbuffer is never preserved for these
 * surfaces.
 * @deprecated this is ignored, this value is set automatically when needed.
 */
]","\android\view\Surface.java"
"PUSH_BUFFERS","true","false","false","true","true","int","0x00000200","[]","Optional[/**
 * Creates a surface without a rendering buffer. Instead, the content
 * of the surface must be pushed by an external entity. This is type
 * of surface can be used for efficient camera preview or movie
 * play back.
 */
]","\android\view\Surface.java"
"SURFACE_BLUR_FREEZE","true","false","false","true","true","int","0x10","[]","Optional.empty","\android\view\Surface.java"
"mNativeSurface","false","false","true","false","false","int","null","[@SuppressWarnings(""unused"")]","Optional.empty","\android\view\Surface.java"
"HIDDEN","true","false","false","true","true","int","0x00000004","[]","Optional[/**
 * Surface is created hidden
 */
]","\android\view\Surface.java"
"FX_SURFACE_DIM","true","false","false","true","true","int","0x00020000","[]","Optional[/**
 * Creates a Dim surface. Everything behind this surface is dimmed
 * by the amount specified in setAlpha().
 * It is an error to lock a Dim surface, since it doesn't have
 * a backing store.
 */
]","\android\view\Surface.java"
"mName","false","false","true","false","false","String","null","[]","Optional.empty","\android\view\Surface.java"
"mCompatibleDisplayMetrics","false","false","true","false","false","DisplayMetrics","null","[]","Optional[// running in compatibility mode. This is set to null for non compatibility mode.
]","\android\view\Surface.java"
"mOrigMatrix","false","false","true","false","false","Matrix","null","[]","Optional[// A temp matrix to remember what an application obtained via {@link getMatrix}
]","\android\view\Surface.java"
"LOG_TAG","false","false","true","true","true","String","""Surface""","[]","Optional.empty","\android\view\Surface.java"
"mCreationStack","false","false","true","false","false","Exception","null","[@SuppressWarnings(""unused"")]","Optional.empty","\android\view\Surface.java"
"SECURE","true","false","false","true","true","int","0x00000080","[]","Optional[/**
 * The surface contains secure content, special measures will
 * be taken to disallow the surface's content to be copied from
 * another process. In particular, screenshots and VNC servers will
 * be disabled, but other measures can take place, for instance the
 * surface might not be hardware accelerated.
 */
]","\android\view\Surface.java"
"SURFACE_HIDDEN","true","false","false","true","true","int","0x01","[]","Optional[/**
 * Hide the surface. Equivalent to calling hide()
 */
]","\android\view\Surface.java"
"mCompatibleMatrix","false","false","true","false","false","Matrix","null","[]","Optional[// non compatibility mode.
]","\android\view\Surface.java"
"SURFACE_FROZEN","true","false","false","true","true","int","0x02","[]","Optional[/**
 * Freeze the surface. Equivalent to calling freeze()
 */
]","\android\view\Surface.java"
"ROTATION_180","true","false","false","true","true","int","2","[]","Optional.empty","\android\view\Surface.java"
"mSaveCount","false","false","true","false","false","int","null","[@SuppressWarnings(""unused"")]","Optional.empty","\android\view\Surface.java"
"DEBUG_RELEASE","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\view\Surface.java"
"ROTATION_270","true","false","false","true","true","int","3","[]","Optional.empty","\android\view\Surface.java"
"SURFACE_DITHER","true","false","false","true","true","int","0x04","[]","Optional[/**
 * Enable dithering when compositing this surface
 */
]","\android\view\Surface.java"
"SURACE_FROZEN","true","false","false","true","true","int","0x02","[@Deprecated]","Optional[/**
 * @deprecated use {@link #SURFACE_FROZEN} instead.
 */
]","\android\view\Surface.java"
"FX_SURFACE_NORMAL","true","false","false","true","true","int","0x00000000","[]","Optional[/**
 * Creates a normal surface. This is the default
 */
]","\android\view\Surface.java"
"mCanvas","false","false","true","false","false","Canvas","null","[@SuppressWarnings(""unused"")]","Optional.empty","\android\view\Surface.java"
"ROTATION_0","true","false","false","true","true","int","0","[]","Optional[/* orientations for setOrientation() */
]","\android\view\Surface.java"
"NON_PREMULTIPLIED","true","false","false","true","true","int","0x00000100","[]","Optional[/**
 * Creates a surface where color components are interpreted as
 * ""non pre-multiplied"" by their alpha channel. Of course this flag is
 * meaningless for surfaces without an alpha channel. By default
 * surfaces are pre-multiplied, which means that each color component is
 * already multiplied by its alpha value. In this case the blending
 * equation used is:
 *
 * DEST = SRC + DEST * (1-SRC_ALPHA)
 *
 * By contrast, non pre-multiplied surfaces use the following equation:
 *
 * DEST = SRC * SRC_ALPHA * DEST * (1-SRC_ALPHA)
 *
 * pre-multiplied surfaces must always be used if transparent pixels are
 * composited on top of each-other into the surface. A pre-multiplied
 * surface can never lower the value of the alpha component of a given
 * pixel.
 *
 * In some rare situations, a non pre-multiplied surface is preferable.
 */
]","\android\view\Surface.java"
"META_ALT_ON","true","false","false","true","true","int","KeyEvent.META_ALT_ON","[]","Optional.empty","\android\text\method\MetaKeyKeyListener.java"
"META_CAP_RELEASED","false","false","true","true","true","long","((long) KeyEvent.META_SHIFT_ON) << RELEASED_SHIFT","[]","Optional.empty","\android\text\method\MetaKeyKeyListener.java"
"META_ALT_MASK","false","false","true","true","true","long","META_ALT_ON | META_ALT_LOCKED | META_ALT_USED | META_ALT_PRESSED | META_ALT_RELEASED","[]","Optional.empty","\android\text\method\MetaKeyKeyListener.java"
"META_SYM_MASK","false","false","true","true","true","long","META_SYM_ON | META_SYM_LOCKED | META_SYM_USED | META_SYM_PRESSED | META_SYM_RELEASED","[]","Optional.empty","\android\text\method\MetaKeyKeyListener.java"
"META_CAP_USED","false","false","true","true","true","long","((long) KeyEvent.META_SHIFT_ON) << USED_SHIFT","[]","Optional.empty","\android\text\method\MetaKeyKeyListener.java"
"META_SHIFT_MASK","false","false","true","true","true","long","META_SHIFT_ON | META_CAP_LOCKED | META_CAP_USED | META_CAP_PRESSED | META_CAP_RELEASED","[]","Optional.empty","\android\text\method\MetaKeyKeyListener.java"
"SELECTING","false","false","true","true","true","Object","new NoCopySpan.Concrete()","[]","Optional.empty","\android\text\method\MetaKeyKeyListener.java"
"META_ALT_PRESSED","false","false","true","true","true","long","((long) KeyEvent.META_ALT_ON) << PRESSED_SHIFT","[]","Optional.empty","\android\text\method\MetaKeyKeyListener.java"
"META_SYM_ON","true","false","false","true","true","int","KeyEvent.META_SYM_ON","[]","Optional.empty","\android\text\method\MetaKeyKeyListener.java"
"SYM","false","false","true","true","true","Object","new NoCopySpan.Concrete()","[]","Optional.empty","\android\text\method\MetaKeyKeyListener.java"
"PRESSED_SHIFT","false","false","true","true","true","int","32","[]","Optional.empty","\android\text\method\MetaKeyKeyListener.java"
"META_ALT_LOCKED","true","false","false","true","true","int","KeyEvent.META_ALT_ON << LOCKED_SHIFT","[]","Optional.empty","\android\text\method\MetaKeyKeyListener.java"
"LOCKED_SHIFT","false","false","true","true","true","int","8","[]","Optional.empty","\android\text\method\MetaKeyKeyListener.java"
"RELEASED","false","false","true","true","true","int","Spannable.SPAN_MARK_MARK | (2 << Spannable.SPAN_USER_SHIFT)","[]","Optional[/**
 * The meta key has been pressed and released but has still
 * not yet been used.
 */
]","\android\text\method\MetaKeyKeyListener.java"
"META_CAP_LOCKED","true","false","false","true","true","int","KeyEvent.META_SHIFT_ON << LOCKED_SHIFT","[]","Optional.empty","\android\text\method\MetaKeyKeyListener.java"
"LOCKED","false","false","true","true","true","int","Spannable.SPAN_MARK_MARK | (4 << Spannable.SPAN_USER_SHIFT)","[]","Optional[/**
 * The meta key has been pressed and released without use, and then
 * pressed again; it may also have been released again.
 */
]","\android\text\method\MetaKeyKeyListener.java"
"META_ALT_USED","false","false","true","true","true","long","((long) KeyEvent.META_ALT_ON) << USED_SHIFT","[]","Optional.empty","\android\text\method\MetaKeyKeyListener.java"
"USED_SHIFT","false","false","true","true","true","int","24","[]","Optional.empty","\android\text\method\MetaKeyKeyListener.java"
"META_SHIFT_ON","true","false","false","true","true","int","KeyEvent.META_SHIFT_ON","[]","Optional.empty","\android\text\method\MetaKeyKeyListener.java"
"META_SYM_RELEASED","false","false","true","true","true","long","((long) KeyEvent.META_SYM_ON) << RELEASED_SHIFT","[]","Optional.empty","\android\text\method\MetaKeyKeyListener.java"
"META_SYM_USED","false","false","true","true","true","long","((long) KeyEvent.META_SYM_ON) << USED_SHIFT","[]","Optional.empty","\android\text\method\MetaKeyKeyListener.java"
"META_CAP_PRESSED","false","false","true","true","true","long","((long) KeyEvent.META_SHIFT_ON) << PRESSED_SHIFT","[]","Optional.empty","\android\text\method\MetaKeyKeyListener.java"
"ALT","false","false","true","true","true","Object","new NoCopySpan.Concrete()","[]","Optional.empty","\android\text\method\MetaKeyKeyListener.java"
"META_SYM_PRESSED","false","false","true","true","true","long","((long) KeyEvent.META_SYM_ON) << PRESSED_SHIFT","[]","Optional.empty","\android\text\method\MetaKeyKeyListener.java"
"USED","false","false","true","true","true","int","Spannable.SPAN_MARK_MARK | (3 << Spannable.SPAN_USER_SHIFT)","[]","Optional[/**
 * The meta key has been pressed and used but has not yet been released.
 */
]","\android\text\method\MetaKeyKeyListener.java"
"META_ALT_RELEASED","false","false","true","true","true","long","((long) KeyEvent.META_ALT_ON) << RELEASED_SHIFT","[]","Optional.empty","\android\text\method\MetaKeyKeyListener.java"
"CAP","false","false","true","true","true","Object","new NoCopySpan.Concrete()","[]","Optional.empty","\android\text\method\MetaKeyKeyListener.java"
"META_SYM_LOCKED","true","false","false","true","true","int","KeyEvent.META_SYM_ON << LOCKED_SHIFT","[]","Optional.empty","\android\text\method\MetaKeyKeyListener.java"
"PRESSED","false","false","true","true","true","int","Spannable.SPAN_MARK_MARK | (1 << Spannable.SPAN_USER_SHIFT)","[]","Optional[/**
 * The meta key has been pressed but has not yet been used.
 */
]","\android\text\method\MetaKeyKeyListener.java"
"RELEASED_SHIFT","false","false","true","true","true","int","40","[]","Optional.empty","\android\text\method\MetaKeyKeyListener.java"
"META_SELECTING","true","false","false","true","true","int","1 << 16","[]","Optional[/**
 * @hide pending API review
 */
]","\android\text\method\MetaKeyKeyListener.java"
"mNoPhotoResource","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"mPhotoView","false","false","true","false","false","QuickContactBadge","null","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"DISPLAY_NAME","false","false","false","false","false","int","3","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"TOKEN_CONTACT_INFO","false","false","true","true","true","int","0","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"PHONETIC_NAME","false","false","false","false","false","int","4","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"mQueryHandler","false","false","true","false","false","QueryHandler","null","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"PHOTO","false","false","false","false","false","int","0","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"mDisplayNameView","false","false","true","false","false","TextView","null","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"PHONE_LOOKUP_CONTACT_LOOKUP_KEY_COLUMN_INDEX","false","true","false","true","true","int","1","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"CONTACT_LOOKUP_ID_COLUMN_INDEX","false","true","false","true","true","int","0","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"CONTACT_STATUS_LABEL","false","false","false","false","false","int","10","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"PHONE_LOOKUP_PROJECTION","false","true","false","true","true","String","new String[] { PhoneLookup._ID, PhoneLookup.LOOKUP_KEY }","[]","Optional[// Projection used for looking up contact id from phone number
]","\com\android\internal\widget\ContactHeaderWidget.java"
"mContentResolver","false","true","false","false","false","ContentResolver","null","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"COLUMNS","false","false","false","false","false","String","new String[] { Photo.PHOTO }","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"PHOTO_ID","false","false","false","false","false","int","2","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"mAggregateBadge","false","false","true","false","false","View","null","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"TOKEN_EMAIL_LOOKUP","false","false","true","true","true","int","2","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"mStatusView","false","false","true","false","false","TextView","null","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"EMAIL_LOOKUP_PROJECTION","false","true","false","true","true","String","new String[] { RawContacts.CONTACT_ID, Contacts.LOOKUP_KEY }","[]","Optional[// Projection used for looking up contact id from email address
]","\com\android\internal\widget\ContactHeaderWidget.java"
"mPresenceView","false","false","true","false","false","ImageView","null","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"TOKEN_PHONE_LOOKUP","false","false","true","true","true","int","1","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"CONTACT_STATUS_RES_PACKAGE","false","false","false","false","false","int","9","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"CONTACT_PRESENCE_STATUS","false","false","false","false","false","int","6","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"mStarredView","false","false","true","false","false","CheckBox","null","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"TOKEN_PHOTO_QUERY","false","false","true","true","true","int","3","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"STARRED","false","false","false","false","false","int","5","[]","Optional[// static final int HEADER_PHONETIC_NAME_COLUMN_INDEX
]","\com\android\internal\widget\ContactHeaderWidget.java"
"CONTACT_LOOKUP_PROJECTION","false","true","false","true","true","String","new String[] { Contacts._ID }","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"TAG","false","false","true","true","true","String","""ContactHeaderWidget""","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"mListener","false","false","true","false","false","ContactHeaderListener","null","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"LOOKUP_KEY","false","false","false","false","false","int","1","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"mStatusAttributionView","false","false","true","false","false","TextView","null","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"EMAIL_LOOKUP_CONTACT_LOOKUP_KEY_COLUMN_INDEX","false","true","false","true","true","int","1","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"_ID","false","false","false","false","false","int","0","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"mPhoneticNameView","false","false","true","false","false","TextView","null","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"CONTACT_STATUS_TIMESTAMP","false","false","false","false","false","int","8","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"mExcludeMimes","false","true","false","false","false","String","null","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"EMAIL_LOOKUP_CONTACT_ID_COLUMN_INDEX","false","true","false","true","true","int","0","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"mContactUri","false","true","false","false","false","Uri","null","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"CONTACT_STATUS","false","false","false","false","false","int","7","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"PHONE_LOOKUP_CONTACT_ID_COLUMN_INDEX","false","true","false","true","true","int","0","[]","Optional.empty","\com\android\internal\widget\ContactHeaderWidget.java"
"RESPONSE_STATUS","true","false","false","true","true","String","""resp_st""","[]","Optional[/**
 * The response-status of the message.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"REPORT_ALLOWED","true","false","false","true","true","String","""rpt_a""","[]","Optional[/**
 * Whether the report is allowed.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"TABLE_ID","true","false","false","true","true","String","""table_to_use""","[]","Optional.empty","\android\provider\Telephony.java"
"DELIVERY_TIME","true","false","false","true","true","String","""d_tm""","[]","Optional[/**
 * The delivery-time of the message.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"MESSAGE_CLASS","true","false","false","true","true","String","""m_cls""","[]","Optional[/**
 * The class of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"MESSAGE_BOX_INBOX","true","false","false","true","true","int","1","[]","Optional.empty","\android\provider\Telephony.java"
"PREVIOUSLY_SENT_DATE","true","false","false","true","true","String","""p_s_d""","[]","Optional[/**
 * The previously-sent-date of the message.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"CONTENT_TYPE","true","false","false","true","true","String","""ct""","[]","Optional[/**
 * The content type of the part.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"RETRIEVE_TEXT_CHARSET","true","false","false","true","true","String","""retr_txt_cs""","[]","Optional[/**
 * The character set of the retrieve-text.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"ERROR","true","false","false","true","true","String","""error""","[]","Optional[/**
 * Indicates whether there is a transmission error in the thread.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"ERR_TYPE_GENERIC_PERMANENT","true","false","false","true","true","int","10","[]","Optional.empty","\android\provider\Telephony.java"
"ERR_TYPE_SMS_PROTO_TRANSIENT","true","false","false","true","true","int","2","[]","Optional.empty","\android\provider\Telephony.java"
"BCC","true","false","false","true","true","String","""bcc""","[]","Optional[/**
 * The address of the bcc. recipients.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"RECOMMENDED_RETRIEVAL_MODE_TEXT","true","false","false","true","true","String","""r_r_mod_txt""","[]","Optional[/**
 * The recommended-retrieval-mode-text of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"BROADCAST_THREAD","true","false","false","true","true","int","1","[]","Optional.empty","\android\provider\Telephony.java"
"MESSAGE_BOX_OUTBOX","true","false","false","true","true","int","4","[]","Optional.empty","\android\provider\Telephony.java"
"ERR_TYPE_TRANSPORT_FAILURE","true","false","false","true","true","int","4","[]","Optional.empty","\android\provider\Telephony.java"
"MESSAGE_TYPE_FAILED","true","false","false","true","true","int","5","[]","Optional[// for failed outgoing messages
]","\android\provider\Telephony.java"
"RESULT_SMS_UNSUPPORTED","true","false","false","true","true","int","4","[]","Optional[/**
 * Set by BroadcastReceiver. Indicates the message, while
 * possibly valid, is of a format or encoding that is not
 * supported.
 */
]","\android\provider\Telephony.java"
"PREVIOUSLY_SENT_BY","true","false","false","true","true","String","""p_s_by""","[]","Optional[/**
 * The previously-sent-by of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"SEQ","true","false","false","true","true","String","""seq""","[]","Optional[/**
 * The order of the part.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"EXTRA_BCC","true","false","false","true","true","String","""bcc""","[]","Optional[/**
 * The extra field to store the 'Bcc' addresses;
 */
]","\android\provider\Telephony.java"
"DISTRIBUTION_INDICATOR","true","false","false","true","true","String","""d_ind""","[]","Optional[/**
 * The distribution-indicator of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"CONTENT_DISPOSITION","true","false","false","true","true","String","""cd""","[]","Optional[/**
 * The content disposition of the part.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"REPORT_REQUEST_URI","true","false","false","true","true","Uri","Uri.withAppendedPath(CONTENT_URI, ""report-request"")","[]","Optional.empty","\android\provider\Telephony.java"
"RETRIEVE_TEXT","true","false","false","true","true","String","""retr_txt""","[]","Optional[/**
 * The retrieve-text of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"PROTO_TYPE","true","false","false","true","true","String","""proto_type""","[]","Optional[/**
 * The type of transport protocol(MMS or SMS).
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"MMS_VERSION","true","false","false","true","true","String","""v""","[]","Optional[/**
 * The version of specification that this message conform.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"CONTENT_CONVERSATIONS_URI","true","false","false","true","true","Uri","Uri.parse(""content://mms-sms/conversations"")","[]","Optional.empty","\android\provider\Telephony.java"
"MESSAGE_BOX_DRAFTS","true","false","false","true","true","int","3","[]","Optional.empty","\android\provider\Telephony.java"
"SPN_STRINGS_UPDATED_ACTION","true","false","false","true","true","String","""android.provider.Telephony.SPN_STRINGS_UPDATED""","[]","Optional[/**
 * Broadcast Action: The Service Provider string(s) have been updated.  Activities or
 * services that use these strings should update their display.
 * The intent will have the following extra values:</p>
 * <ul>
 * <li><em>showPlmn</em> - Boolean that indicates whether the PLMN should be shown.</li>
 * <li><em>plmn</em> - The operator name of the registered network, as a string.</li>
 * <li><em>showSpn</em> - Boolean that indicates whether the SPN should be shown.</li>
 * <li><em>spn</em> - The service provider name, as a string.</li>
 * </ul>
 * Note that <em>showPlmn</em> may indicate that <em>plmn</em> should be displayed, even
 * though the value for <em>plmn</em> is null.  This can happen, for example, if the phone
 * has not registered to a network yet.  In this case the receiver may substitute an
 * appropriate placeholder string (eg, ""No service"").
 *
 * It is recommended to display <em>plmn</em> before / above <em>spn</em> if
 * both are displayed.
 *
 * <p>Note this is a protected intent that can only be sent
 * by the system.
 */
]","\android\provider\Telephony.java"
"MESSAGE_ID","true","false","false","true","true","String","""m_id""","[]","Optional[/**
 * The Message-ID of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"MESSAGE_TYPE_DRAFT","true","false","false","true","true","int","3","[]","Optional.empty","\android\provider\Telephony.java"
"SUBJECT_CHARSET","true","false","false","true","true","String","""sub_cs""","[]","Optional[/**
 * The character set of the subject, if present.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"SEEN","true","false","false","true","true","String","""seen""","[]","Optional[/**
 * Indicates whether this message has been seen by the user. The ""seen"" flag will be
 * used to figure out whether we need to throw up a statusbar notification or not.
 */
]","\android\provider\Telephony.java"
"SNIPPET_CHARSET","true","false","false","true","true","String","""snippet_cs""","[]","Optional[/**
 * The charset of the snippet.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"NO_ERROR","true","false","false","true","true","int","0","[]","Optional[// Constants for error types of pending messages.
]","\android\provider\Telephony.java"
"AUX_APPLIC_ID","true","false","false","true","true","String","""aux_apl_id""","[]","Optional[/**
 * The aux-applic-id of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"STATUS_PENDING","true","false","false","true","true","int","32","[]","Optional.empty","\android\provider\Telephony.java"
"CC","true","false","false","true","true","String","""cc""","[]","Optional[/**
 * The address of the cc. recipients.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"MESSAGE_SIZE","true","false","false","true","true","String","""m_size""","[]","Optional[/**
 * The size of the message.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"STATUS_COMPLETE","true","false","false","true","true","int","0","[]","Optional.empty","\android\provider\Telephony.java"
"ERR_TYPE_GENERIC","true","false","false","true","true","int","1","[]","Optional.empty","\android\provider\Telephony.java"
"OBSOLETE_THREADS_URI","true","false","false","true","true","Uri","Uri.withAppendedPath(CONTENT_URI, ""obsolete"")","[]","Optional.empty","\android\provider\Telephony.java"
"SECRET_CODE_ACTION","true","false","false","true","true","String","""android.provider.Telephony.SECRET_CODE""","[]","Optional[/**
 * Broadcast Action: A ""secret code"" has been entered in the dialer. Secret codes are
 * of the form *#*#<code>#*#*. The intent will have the data URI:</p>
 *
 * <p><code>android_secret_code://&lt;code&gt;</code></p>
 */
]","\android\provider\Telephony.java"
"MESSAGE_TYPE_INBOX","true","false","false","true","true","int","1","[]","Optional.empty","\android\provider\Telephony.java"
"CONTENT_ID","true","false","false","true","true","String","""cid""","[]","Optional[/**
 * The content ID of the part.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"TYPE_DISCRIMINATOR_COLUMN","true","false","false","true","true","String","""transport_type""","[]","Optional[/**
 * The column to distinguish SMS &amp; MMS messages in query results.
 */
]","\android\provider\Telephony.java"
"READ_REPORT","true","false","false","true","true","String","""rr""","[]","Optional[/**
 * The read-report of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"LOCAL_LOGV","false","false","true","true","true","boolean","DEBUG ? Config.LOGD : Config.LOGV","[]","Optional.empty","\android\provider\Telephony.java"
"STORE","true","false","false","true","true","String","""store""","[]","Optional[/**
 * The store of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"TOTALS","true","false","false","true","true","String","""totals""","[]","Optional[/**
 * The totals of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"SUBJECT","true","false","false","true","true","String","""sub""","[]","Optional[/**
 * The subject of the message, if present.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"STANDARD_ENCODING","false","false","true","true","true","String","""UTF-8""","[]","Optional.empty","\android\provider\Telephony.java"
"TO","true","false","false","true","true","String","""to""","[]","Optional[/**
 * The address of the recipients.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"TRANSACTION_ID","true","false","false","true","true","String","""tr_id""","[]","Optional[/**
 * The transaction-id of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"ADAPTATION_ALLOWED","true","false","false","true","true","String","""adp_a""","[]","Optional[/**
 * The adaptation-allowed of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"PRIORITY","true","false","false","true","true","String","""pri""","[]","Optional[/**
 * The priority of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"STORE_STATUS","true","false","false","true","true","String","""store_st""","[]","Optional[/**
 * The store-status of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"REPLY_PATH_PRESENT","true","false","false","true","true","String","""reply_path_present""","[]","Optional[/**
 * Whether the <code>TP-Reply-Path</code> bit was set on this message
 * <P>Type: BOOLEAN</P>
 */
]","\android\provider\Telephony.java"
"SEARCH_URI","true","false","false","true","true","Uri","Uri.parse(""content://mms-sms/search"")","[]","Optional[/**
 * Pass in a query parameter called ""pattern"" which is the text
 * to search for.
 * The sort order is fixed to be thread_id ASC,date DESC.
 */
]","\android\provider\Telephony.java"
"DATA_SMS_RECEIVED_ACTION","true","false","false","true","true","String","""android.intent.action.DATA_SMS_RECEIVED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: A new data based SMS message has been received
 * by the device. The intent will have the following extra
 * values:</p>
 *
 * <ul>
 * <li><em>pdus</em> - An Object[] od byte[]s containing the PDUs
 * that make up the message.</li>
 * </ul>
 *
 * <p>The extra values can be extracted using
 * {@link #getMessagesFromIntent(Intent)}.</p>
 *
 * <p>If a BroadcastReceiver encounters an error while processing
 * this intent it should set the result code appropriately.</p>
 */
]","\android\provider\Telephony.java"
"MESSAGE_TYPE_SENT","true","false","false","true","true","int","2","[]","Optional.empty","\android\provider\Telephony.java"
"RESULT_SMS_GENERIC_ERROR","true","false","false","true","true","int","2","[]","Optional[/**
 * Set by BroadcastReceiver. Indicates a generic error while
 * processing the message.
 */
]","\android\provider\Telephony.java"
"ERR_TYPE_MMS_PROTO_PERMANENT","true","false","false","true","true","int","12","[]","Optional.empty","\android\provider\Telephony.java"
"SMS_REJECTED_ACTION","true","false","false","true","true","String","""android.provider.Telephony.SMS_REJECTED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: An incoming SMS has been rejected by the
 * telephony framework.  This intent is sent in lieu of any
 * of the RECEIVED_ACTION intents.  The intent will have the
 * following extra value:</p>
 *
 * <ul>
 * <li><em>result</em> - An int result code, eg,
 * <code>{@link #RESULT_SMS_OUT_OF_MEMORY}</code>,
 * indicating the error returned to the network.</li>
 * </ul>
 */
]","\android\provider\Telephony.java"
"SIM_FULL_ACTION","true","false","false","true","true","String","""android.provider.Telephony.SIM_FULL""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: The SIM storage for SMS messages is full.  If
 * space is not freed, messages targeted for the SIM (class 2) may
 * not be saved.
 */
]","\android\provider\Telephony.java"
"MSG_ID","true","false","false","true","true","String","""msg_id""","[]","Optional[/**
 * The ID of the message to be sent or downloaded.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"CONTENT_LOCATION","true","false","false","true","true","String","""cl""","[]","Optional[/**
 * The content location of the part.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"PORT","true","false","false","true","true","String","""port""","[]","Optional.empty","\android\provider\Telephony.java"
"SCRAP_FILE_PATH","true","false","false","true","true","String","""/sdcard/mms/scrapSpace/.temp.jpg""","[]","Optional[/**
 * This is the scrap file we use to store the media attachment when the user
 * chooses to capture a photo to be attached . We pass {#link@Uri} to the Camera app,
 * which streams the captured image to the uri. Internally we write the media content
 * to this file. It's named '.temp.jpg' so Gallery won't pick it up.
 */
]","\android\provider\Telephony.java"
"MBOX_QUOTAS","true","false","false","true","true","String","""mb_qt""","[]","Optional[/**
 * The mbox-quotas of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"REPLY_APPLIC_ID","true","false","false","true","true","String","""r_apl_id""","[]","Optional[/**
 * The reply-applic-id of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"CURRENT","true","false","false","true","true","String","""current""","[]","Optional.empty","\android\provider\Telephony.java"
"NAME","true","false","false","true","true","String","""name""","[]","Optional.empty","\android\provider\Telephony.java"
"CT_TYPE","true","false","false","true","true","String","""ctt_t""","[]","Optional[/**
 * The type of content-type of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"MSG_TYPE","true","false","false","true","true","String","""msg_type""","[]","Optional[/**
 * The type of the message to be sent or downloaded.
 * This field is only valid for MM. For SM, its value is always
 * set to 0.
 */
]","\android\provider\Telephony.java"
"EXTRA_PLMN","true","false","false","true","true","String","""plmn""","[]","Optional.empty","\android\provider\Telephony.java"
"EXTRA_CONTENTS","true","false","false","true","true","String","""contents""","[]","Optional[/**
 * The extra field to store the contents of the Intent,
 * which should be an array of Uri.
 */
]","\android\provider\Telephony.java"
"PERSON_ID","true","false","false","true","true","String","""person""","[]","Optional[/**
 * The person ID of the sender
 * <P>Type: INTEGER (long)</P>
 */
]","\android\provider\Telephony.java"
"READ_STATUS","true","false","false","true","true","String","""read_status""","[]","Optional[/**
 * The read-status of the message.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"REPLY_CHARGING","true","false","false","true","true","String","""r_chg""","[]","Optional[/**
 * The reply-charging of the message.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"CT_START","true","false","false","true","true","String","""ctt_s""","[]","Optional[/**
 * The start of content-type of the message.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"MESSAGE_BOX_SENT","true","false","false","true","true","int","2","[]","Optional.empty","\android\provider\Telephony.java"
"PROXY","true","false","false","true","true","String","""proxy""","[]","Optional.empty","\android\provider\Telephony.java"
"MNC","true","false","false","true","true","String","""mnc""","[]","Optional.empty","\android\provider\Telephony.java"
"REPORT_STATUS_URI","true","false","false","true","true","Uri","Uri.withAppendedPath(CONTENT_URI, ""report-status"")","[]","Optional.empty","\android\provider\Telephony.java"
"SERVER","true","false","false","true","true","String","""server""","[]","Optional.empty","\android\provider\Telephony.java"
"FILENAME","true","false","false","true","true","String","""fn""","[]","Optional[/**
 * The file name of the part.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"CONTENT_LOCKED_URI","true","false","false","true","true","Uri","Uri.parse(""content://mms-sms/locked"")","[]","Optional.empty","\android\provider\Telephony.java"
"MMSPORT","true","false","false","true","true","String","""mmsport""","[]","Optional.empty","\android\provider\Telephony.java"
"EXTRA_SHOW_PLMN","true","false","false","true","true","String","""showPlmn""","[]","Optional.empty","\android\provider\Telephony.java"
"HAS_ATTACHMENT","true","false","false","true","true","String","""has_attachment""","[]","Optional[/**
 * Indicates whether this thread contains any attachments.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"START","true","false","false","true","true","String","""start""","[]","Optional[/**
 * The start of the message.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"CONTACT_ID","true","false","false","true","true","String","""contact_id""","[]","Optional[/**
 * The ID of contact entry in Phone Book.
 */
]","\android\provider\Telephony.java"
"ERROR_TYPE","true","false","false","true","true","String","""err_type""","[]","Optional[/**
 * The type of the error code.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"THREAD_ID_CONTENT_URI","false","false","true","true","true","Uri","Uri.parse(""content://mms-sms/threadID"")","[]","Optional.empty","\android\provider\Telephony.java"
"SERVICE_CENTER","true","false","false","true","true","String","""service_center""","[]","Optional[/**
 * The service center (SC) through which to send the message, if present
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"TEXT","true","false","false","true","true","String","""text""","[]","Optional.empty","\android\provider\Telephony.java"
"MESSAGE_BOX","true","false","false","true","true","String","""msg_box""","[]","Optional[/**
 * The box which the message belong to, for example, MESSAGE_BOX_INBOX.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"SNIPPET","true","false","false","true","true","String","""snippet""","[]","Optional[/**
 * The snippet of the latest message in the thread.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"MESSAGE_TYPE_OUTBOX","true","false","false","true","true","int","4","[]","Optional.empty","\android\provider\Telephony.java"
"DELETED_CONTENTS","true","false","false","true","true","String","""deleted_contents""","[]","Optional[/**
 * An extra field which stores the URI of deleted contents.
 */
]","\android\provider\Telephony.java"
"RESPONSE_TEXT","true","false","false","true","true","String","""resp_txt""","[]","Optional[/**
 * The response-text of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"ID_PROJECTION","false","false","true","true","true","String","{ BaseColumns._ID }","[]","Optional.empty","\android\provider\Telephony.java"
"ID","true","false","false","true","true","String","""_id""","[]","Optional.empty","\android\provider\Telephony.java"
"MM_FLAGS","true","false","false","true","true","String","""mm_flg""","[]","Optional[/**
 * The mm-flags of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"TYPE","true","false","false","true","true","String","""type""","[]","Optional.empty","\android\provider\Telephony.java"
"ERR_TYPE_SMS_PROTO_PERMANENT","true","false","false","true","true","int","11","[]","Optional.empty","\android\provider\Telephony.java"
"DELIVERY_REPORT","true","false","false","true","true","String","""d_rpt""","[]","Optional[/**
 * The delivery-report of the message.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"DEFAULT_SORT_ORDER","true","false","false","true","true","String","""name ASC""","[]","Optional[/**
 * The default sort order for this table
 */
]","\android\provider\Telephony.java"
"PERSON","true","false","false","true","true","String","""person""","[]","Optional[/**
 * The id of the sender of the conversation, if present
 * <P>Type: INTEGER (reference to item in content://contacts/people)</P>
 */
]","\android\provider\Telephony.java"
"LOCKED","true","false","false","true","true","String","""locked""","[]","Optional[/**
 * Has the message been locked?
 * <P>Type: INTEGER (boolean)</P>
 */
]","\android\provider\Telephony.java"
"RETRIEVE_STATUS","true","false","false","true","true","String","""retr_st""","[]","Optional[/**
 * The retrieve-status of the message.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"PROTOCOL","true","false","false","true","true","String","""protocol""","[]","Optional[/**
 * The protocol identifier code
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"CONTENT_UNDELIVERED_URI","true","false","false","true","true","Uri","Uri.parse(""content://mms-sms/undelivered"")","[]","Optional.empty","\android\provider\Telephony.java"
"RECOMMENDED_RETRIEVAL_MODE","true","false","false","true","true","String","""r_r_mod""","[]","Optional[/**
 * The recommended-retrieval-mode of the message.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"STORE_STATUS_TEXT","true","false","false","true","true","String","""store_st_txt""","[]","Optional[/**
 * The store-status-text of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"DUE_TIME","true","false","false","true","true","String","""due_time""","[]","Optional[/**
 * The time to do next retry.
 */
]","\android\provider\Telephony.java"
"CANCEL_STATUS","true","false","false","true","true","String","""cl_st""","[]","Optional[/**
 * The cancel-status of the message.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"MESSAGE_TYPE_QUEUED","true","false","false","true","true","int","6","[]","Optional[// for messages to send later
]","\android\provider\Telephony.java"
"COMMON_THREAD","true","false","false","true","true","int","0","[]","Optional.empty","\android\provider\Telephony.java"
"REPLY_CHARGING_DEADLINE","true","false","false","true","true","String","""r_chg_dl""","[]","Optional[/**
 * The reply-charging-deadline of the message.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"APPLIC_ID","true","false","false","true","true","String","""apl_id""","[]","Optional[/**
 * The applic-id of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"MBOX_TOTALS_TOKEN","true","false","false","true","true","String","""mb_t_tok""","[]","Optional[/**
 * The mbox-totals-token of the message.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"MMSPROXY","true","false","false","true","true","String","""mmsproxy""","[]","Optional.empty","\android\provider\Telephony.java"
"EXTRA_SHOW_SPN","true","false","false","true","true","String","""showSpn""","[]","Optional.empty","\android\provider\Telephony.java"
"CONTENT_URI","true","false","false","true","true","Uri","Uri.parse(""content://telephony/carriers"")","[]","Optional[/**
 * The content:// style URL for this table
 */
]","\android\provider\Telephony.java"
"MBOX_TOTALS","true","false","false","true","true","String","""mb_t""","[]","Optional[/**
 * The mbox-totals of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"SOURCE_ROW_ID","true","false","false","true","true","String","""source_id""","[]","Optional.empty","\android\provider\Telephony.java"
"MM_FLAGS_TOKEN","true","false","false","true","true","String","""mm_flg_tok""","[]","Optional[/**
 * The mm-flags-token of the message.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"ERR_TYPE_MMS_PROTO_TRANSIENT","true","false","false","true","true","int","3","[]","Optional.empty","\android\provider\Telephony.java"
"RECIPIENT_IDS","true","false","false","true","true","String","""recipient_ids""","[]","Optional[/**
 * A string encoding of the recipient IDs of the recipients of
 * the message, in numerical order and separated by spaces.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"NUMERIC","true","false","false","true","true","String","""numeric""","[]","Optional.empty","\android\provider\Telephony.java"
"STATUS_FAILED","true","false","false","true","true","int","64","[]","Optional.empty","\android\provider\Telephony.java"
"MCC","true","false","false","true","true","String","""mcc""","[]","Optional.empty","\android\provider\Telephony.java"
"DRM_CONTENT","true","false","false","true","true","String","""drm_c""","[]","Optional[/**
 * The drm-content of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"TAG","false","false","true","true","true","String","""Telephony""","[]","Optional.empty","\android\provider\Telephony.java"
"SMS_PROTO","true","false","false","true","true","int","0","[]","Optional[// Constants for message protocol types.
]","\android\provider\Telephony.java"
"CANCEL_ID","true","false","false","true","true","String","""cl_id""","[]","Optional[/**
 * The cancel-id of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"SENDER_VISIBILITY","true","false","false","true","true","String","""s_vis""","[]","Optional[/**
 * The sender-visibility of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"MESSAGE_COUNT","true","false","false","true","true","String","""message_count""","[]","Optional[/**
 * The message count of the thread.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"EXPIRY","true","false","false","true","true","String","""exp""","[]","Optional[/**
 * The expiry time of the message.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"ELEMENT_DESCRIPTOR","true","false","false","true","true","String","""e_des""","[]","Optional[/**
 * The element-descriptor of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"THREAD_ID","true","false","false","true","true","String","""thread_id""","[]","Optional[/**
 * The thread ID of the message
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"RESULT_SMS_HANDLED","true","false","false","true","true","int","1","[]","Optional[/**
 * Set by BroadcastReceiver. Indicates the message was handled
 * successfully.
 */
]","\android\provider\Telephony.java"
"FROM","true","false","false","true","true","String","""from""","[]","Optional[/**
 * The address of the sender.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"STATUS_NONE","true","false","false","true","true","int","-1","[]","Optional.empty","\android\provider\Telephony.java"
"WAP_PUSH_RECEIVED_ACTION","true","false","false","true","true","String","""android.provider.Telephony.WAP_PUSH_RECEIVED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: A new WAP PUSH message has been received by the
 * device. The intent will have the following extra
 * values:</p>
 *
 * <ul>
 * <li><em>transactionId (Integer)</em> - The WAP transaction
 * ID</li>
 * <li><em>pduType (Integer)</em> - The WAP PDU type</li>
 * <li><em>header (byte[])</em> - The header of the message</li>
 * <li><em>data (byte[])</em> - The data payload of the message</li>
 * </ul>
 *
 * <p>If a BroadcastReceiver encounters an error while processing
 * this intent it should set the result code appropriately.</p>
 */
]","\android\provider\Telephony.java"
"STATUS","true","false","false","true","true","String","""st""","[]","Optional[/**
 * The status of the message.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"REPLY_CHARGING_DEADLINE_TOKEN","true","false","false","true","true","String","""r_chg_dl_tok""","[]","Optional[/**
 * The reply-charging-deadline-token of the message.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"EXTRA_TYPES","true","false","false","true","true","String","""types""","[]","Optional[/**
 * The extra field to store the type of the contents,
 * which should be an array of String.
 */
]","\android\provider\Telephony.java"
"CONTENT_CLASS","true","false","false","true","true","String","""ct_cls""","[]","Optional[/**
 * The content-class of the message.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"AUTH_TYPE","true","false","false","true","true","String","""authtype""","[]","Optional.empty","\android\provider\Telephony.java"
"NAME_ADDR_EMAIL_PATTERN","true","false","false","true","true","Pattern","Pattern.compile(""\\s*(\""[^\""]*\""|[^<>\""]+)\\s*<([^<>]+)>\\s*"")","[]","Optional[/**
 * mailbox         =       name-addr
 * name-addr       =       [display-name] angle-addr
 * angle-addr      =       [CFWS] ""<"" addr-spec "">"" [CFWS]
 */
]","\android\provider\Telephony.java"
"MMS_PROTO","true","false","false","true","true","int","1","[]","Optional.empty","\android\provider\Telephony.java"
"MESSAGE_TYPE","true","false","false","true","true","String","""m_type""","[]","Optional[/**
 * The type of the message defined by MMS spec.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"SMS_RECEIVED_ACTION","true","false","false","true","true","String","""android.provider.Telephony.SMS_RECEIVED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: A new text based SMS message has been received
 * by the device. The intent will have the following extra
 * values:</p>
 *
 * <ul>
 * <li><em>pdus</em> - An Object[] od byte[]s containing the PDUs
 * that make up the message.</li>
 * </ul>
 *
 * <p>The extra values can be extracted using
 * {@link #getMessagesFromIntent(Intent)}.</p>
 *
 * <p>If a BroadcastReceiver encounters an error while processing
 * this intent it should set the result code appropriately.</p>
 */
]","\android\provider\Telephony.java"
"STATUS_TEXT","true","false","false","true","true","String","""st_txt""","[]","Optional[/**
 * The status-text of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"CONTENT_CHANGED_ACTION","true","false","false","true","true","String","""android.intent.action.CONTENT_CHANGED""","[]","Optional[/**
 * Indicates that the contents of specified URIs were changed.
 * The application which is showing or caching these contents
 * should be updated.
 */
]","\android\provider\Telephony.java"
"READ","true","false","false","true","true","String","""read""","[]","Optional[/**
 * Indicates whether all messages of the thread have been read.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"DATE","true","false","false","true","true","String","""date""","[]","Optional[/**
 * The date at which the thread was created.
 *
 * <P>Type: INTEGER (long)</P>
 */
]","\android\provider\Telephony.java"
"META_DATA","true","false","false","true","true","String","""meta_data""","[]","Optional[/**
 * Meta data used externally.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"PASSWORD","true","false","false","true","true","String","""password""","[]","Optional.empty","\android\provider\Telephony.java"
"ADDRESS","true","false","false","true","true","String","""address""","[]","Optional[/**
 * The address text.
 */
]","\android\provider\Telephony.java"
"BODY","true","false","false","true","true","String","""body""","[]","Optional[/**
 * The body of the message
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"EXTRA_CC","true","false","false","true","true","String","""cc""","[]","Optional[/**
 * The extra field to store the 'Cc' addresses.
 */
]","\android\provider\Telephony.java"
"STORED","true","false","false","true","true","String","""stored""","[]","Optional[/**
 * The stored of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"LIMIT","true","false","false","true","true","String","""limit""","[]","Optional[/**
 * The limit of the message.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"RETRY_INDEX","true","false","false","true","true","String","""retry_index""","[]","Optional[/**
 * How many times we tried to send or download the message.
 * <P>Type:  INTEGER</P>
 */
]","\android\provider\Telephony.java"
"REPLY_CHARGING_ID","true","false","false","true","true","String","""r_chg_id""","[]","Optional[/**
 * The reply-charging-id of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"REPLY_CHARGING_SIZE","true","false","false","true","true","String","""r_chg_sz""","[]","Optional[/**
 * The reply-charging-size of the message.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"MBOX_QUOTAS_TOKEN","true","false","false","true","true","String","""mb_qt_tok""","[]","Optional[/**
 * The mbox-quotas-token of the message.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"REPLACE_ID","true","false","false","true","true","String","""repl_id""","[]","Optional[/**
 * The replace-id of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"LAST_TRY","true","false","false","true","true","String","""last_try""","[]","Optional[/**
 * The time we last tried to send or download the message.
 */
]","\android\provider\Telephony.java"
"ERROR_CODE","true","false","false","true","true","String","""err_code""","[]","Optional[/**
 * The error code of sending/retrieving process.
 * <P>Type:  INTEGER</P>
 */
]","\android\provider\Telephony.java"
"EXTRA_SPN","true","false","false","true","true","String","""spn""","[]","Optional.empty","\android\provider\Telephony.java"
"_DATA","true","false","false","true","true","String","""_data""","[]","Optional[/**
 * The location(on filesystem) of the binary data of the part.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"SENT_TIME","true","false","false","true","true","String","""sent_time""","[]","Optional[/**
 * When a message was successfully sent.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"MMSC","true","false","false","true","true","String","""mmsc""","[]","Optional.empty","\android\provider\Telephony.java"
"RESULT_SMS_OUT_OF_MEMORY","true","false","false","true","true","int","3","[]","Optional[/**
 * Set by BroadcastReceiver. Indicates insufficient memory to store
 * the message.
 */
]","\android\provider\Telephony.java"
"MESSAGE_TYPE_ALL","true","false","false","true","true","int","0","[]","Optional.empty","\android\provider\Telephony.java"
"MM_STATE","true","false","false","true","true","String","""mm_st""","[]","Optional[/**
 * The mm-state of the message.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"DELIVERY_TIME_TOKEN","true","false","false","true","true","String","""d_tm_tok""","[]","Optional[/**
 * The delivery-time-token of the message.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Telephony.java"
"QUOTED_STRING_PATTERN","true","false","false","true","true","Pattern","Pattern.compile(""\\s*\""([^\""]*)\""\\s*"")","[]","Optional[/**
 * quoted-string   =       [CFWS]
 * DQUOTE *([FWS] qcontent) [FWS] DQUOTE
 * [CFWS]
 */
]","\android\provider\Telephony.java"
"EXTRA_SUBJECT","true","false","false","true","true","String","""subject""","[]","Optional[/**
 * The extra field to store the 'Subject'.
 */
]","\android\provider\Telephony.java"
"CONTENT_FILTER_BYPHONE_URI","true","false","false","true","true","Uri","Uri.parse(""content://mms-sms/messages/byphone"")","[]","Optional.empty","\android\provider\Telephony.java"
"MESSAGE_BOX_ALL","true","false","false","true","true","int","0","[]","Optional.empty","\android\provider\Telephony.java"
"USER","true","false","false","true","true","String","""user""","[]","Optional.empty","\android\provider\Telephony.java"
"DEBUG","false","false","true","true","true","boolean","true","[]","Optional.empty","\android\provider\Telephony.java"
"QUOTAS","true","false","false","true","true","String","""qt""","[]","Optional[/**
 * The quotas of the message.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"CONTENT_DRAFT_URI","true","false","false","true","true","Uri","Uri.parse(""content://mms-sms/draft"")","[]","Optional.empty","\android\provider\Telephony.java"
"INDEXED_TEXT","true","false","false","true","true","String","""index_text""","[]","Optional.empty","\android\provider\Telephony.java"
"CHARSET","true","false","false","true","true","String","""chset""","[]","Optional[/**
 * The charset of the part.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Telephony.java"
"APN","true","false","false","true","true","String","""apn""","[]","Optional.empty","\android\provider\Telephony.java"
"FAILURE_REASON_UNSUPPORTED_URI","true","false","false","true","true","String","""The Uri vCard composer received is not supported by the composer.""","[]","Optional[/**
 * Should be visible only from developers... (no need to translate, hopefully)
 */
]","\android\pim\vcard\VCardComposer.java"
"CONTACTS_TEST_CONTENT_URI","true","false","false","true","true","Uri","Uri.withAppendedPath(VCARD_TEST_AUTHORITY_URI, ""contacts"")","[]","Optional.empty","\android\pim\vcard\VCardComposer.java"
"mCharset","false","false","true","false","true","String","null","[]","Optional.empty","\android\pim\vcard\VCardComposer.java"
"FAILURE_REASON_NO_ENTRY","true","false","false","true","true","String","""There's no exportable in the database""","[]","Optional.empty","\android\pim\vcard\VCardComposer.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\android\pim\vcard\VCardComposer.java"
"mHandlerList","false","false","true","false","true","List<OneEntryHandler>","null","[]","Optional.empty","\android\pim\vcard\VCardComposer.java"
"NO_ERROR","true","false","false","true","true","String","""No error""","[]","Optional.empty","\android\pim\vcard\VCardComposer.java"
"mCareHandlerErrors","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\pim\vcard\VCardComposer.java"
"mVCardType","false","false","true","false","true","int","null","[]","Optional.empty","\android\pim\vcard\VCardComposer.java"
"VCARD_TEST_AUTHORITY_URI","true","false","false","true","true","Uri","Uri.parse(""content://"" + VCARD_TEST_AUTHORITY)","[]","Optional.empty","\android\pim\vcard\VCardComposer.java"
"sImMap","false","false","true","true","true","Map<Integer,String>","null","[]","Optional.empty","\android\pim\vcard\VCardComposer.java"
"mContentResolver","false","false","true","false","true","ContentResolver","null","[]","Optional.empty","\android\pim\vcard\VCardComposer.java"
"mTerminateIsCalled","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\pim\vcard\VCardComposer.java"
"LOG_TAG","false","false","true","true","true","String","""VCardComposer.HandlerForOutputStream""","[@SuppressWarnings(""hiding"")]","Optional.empty","\android\pim\vcard\VCardComposer.java"
"VCARD_TYPE_STRING_DOCOMO","true","false","false","true","true","String","""docomo""","[]","Optional.empty","\android\pim\vcard\VCardComposer.java"
"SHIFT_JIS","false","false","true","true","true","String","""SHIFT_JIS""","[]","Optional[// since usual vCard devices for Japanese devices already use it.
]","\android\pim\vcard\VCardComposer.java"
"sContactsProjection","false","false","true","true","true","String","new String[] { Contacts._ID }","[]","Optional.empty","\android\pim\vcard\VCardComposer.java"
"mOutputStream","false","false","true","false","true","OutputStream","null","[]","Optional[// mWriter will close this.
]","\android\pim\vcard\VCardComposer.java"
"mCursor","false","false","true","false","false","Cursor","null","[]","Optional.empty","\android\pim\vcard\VCardComposer.java"
"FAILURE_REASON_FAILED_TO_GET_DATABASE_INFO","true","false","false","true","true","String","""Failed to get database information""","[]","Optional.empty","\android\pim\vcard\VCardComposer.java"
"VCARD_TEST_AUTHORITY","true","false","false","true","true","String","""com.android.unit_tests.vcard""","[]","Optional[/**
 * Special URI for testing.
 */
]","\android\pim\vcard\VCardComposer.java"
"mIdColumn","false","false","true","false","false","int","null","[]","Optional.empty","\android\pim\vcard\VCardComposer.java"
"UTF_8","false","false","true","true","true","String","""UTF-8""","[]","Optional.empty","\android\pim\vcard\VCardComposer.java"
"FAILURE_REASON_NOT_INITIALIZED","true","false","false","true","true","String","""The vCard composer object is not correctly initialized""","[]","Optional.empty","\android\pim\vcard\VCardComposer.java"
"mWriter","false","false","true","false","false","Writer","null","[]","Optional.empty","\android\pim\vcard\VCardComposer.java"
"mIsDoCoMo","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\pim\vcard\VCardComposer.java"
"mOnTerminateIsCalled","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\pim\vcard\VCardComposer.java"
"mErrorReason","false","false","true","false","false","String","NO_ERROR","[]","Optional.empty","\android\pim\vcard\VCardComposer.java"
"CREATOR","true","false","false","true","true","Creator<AccountManagerResponse>","new Creator<AccountManagerResponse>() {

    public AccountManagerResponse createFromParcel(Parcel source) {
        return new AccountManagerResponse(source);
    }

    public AccountManagerResponse[] newArray(int size) {
        return new AccountManagerResponse[size];
    }
}","[]","Optional[/**
 * @hide
 */
]","\android\accounts\AccountManagerResponse.java"
"mResponse","false","false","true","false","false","IAccountManagerResponse","null","[]","Optional.empty","\android\accounts\AccountManagerResponse.java"
"mSocket","false","false","true","false","false","BluetoothSocket","null","[]","Optional.empty","\android\bluetooth\BluetoothInputStream.java"
"MAILTO_SCHEME","true","false","false","true","true","String","""mailto:""","[]","Optional.empty","\android\net\MailTo.java"
"CC","false","false","true","true","true","String","""cc""","[]","Optional.empty","\android\net\MailTo.java"
"SUBJECT","false","false","true","true","true","String","""subject""","[]","Optional.empty","\android\net\MailTo.java"
"TO","false","false","true","true","true","String","""to""","[]","Optional[// Well known headers
]","\android\net\MailTo.java"
"BODY","false","false","true","true","true","String","""body""","[]","Optional.empty","\android\net\MailTo.java"
"mHeaders","false","false","true","false","false","HashMap<String,String>","null","[]","Optional[// All the parsed content is added to the headers.
]","\android\net\MailTo.java"
"DAY_COUNT","true","false","false","true","true","int","5","[]","Optional[/**
 * must be >= 3
 */
]","\android\webkit\DateSorter.java"
"mBins","false","false","true","false","false","long","new long[DAY_COUNT - 1]","[]","Optional.empty","\android\webkit\DateSorter.java"
"NUM_DAYS_AGO","false","false","true","true","true","int","7","[]","Optional.empty","\android\webkit\DateSorter.java"
"mLabels","false","false","true","false","false","String","new String[DAY_COUNT]","[]","Optional.empty","\android\webkit\DateSorter.java"
"LOGTAG","false","false","true","true","true","String","""webkit""","[]","Optional.empty","\android\webkit\DateSorter.java"
"mQwertyKeyboard","false","false","true","false","false","PasswordEntryKeyboard","null","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboardHelper.java"
"mKeyboardView","false","false","true","false","false","KeyboardView","null","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboardHelper.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboardHelper.java"
"mNumericKeyboard","false","false","true","false","false","PasswordEntryKeyboard","null","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboardHelper.java"
"mKeyboardState","false","false","true","false","false","int","KEYBOARD_STATE_NORMAL","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboardHelper.java"
"mSymbolsKeyboardShifted","false","false","true","false","false","PasswordEntryKeyboard","null","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboardHelper.java"
"KEYBOARD_STATE_NORMAL","false","false","true","true","true","int","0","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboardHelper.java"
"mQwertyKeyboardShifted","false","false","true","false","false","PasswordEntryKeyboard","null","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboardHelper.java"
"KEYBOARD_MODE_NUMERIC","true","false","false","true","true","int","1","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboardHelper.java"
"mTargetView","false","false","true","false","false","View","null","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboardHelper.java"
"mSymbolsKeyboard","false","false","true","false","false","PasswordEntryKeyboard","null","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboardHelper.java"
"KEYBOARD_MODE_ALPHA","true","false","false","true","true","int","0","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboardHelper.java"
"mKeyboardMode","false","false","true","false","false","int","KEYBOARD_MODE_ALPHA","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboardHelper.java"
"mVibrator","false","false","true","false","false","Vibrator","null","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboardHelper.java"
"KEYBOARD_STATE_CAPSLOCK","false","false","true","true","true","int","2","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboardHelper.java"
"TAG","false","false","true","true","true","String","""PasswordEntryKeyboardHelper""","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboardHelper.java"
"mVibratePattern","false","false","true","false","false","long","null","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboardHelper.java"
"KEYBOARD_STATE_SHIFTED","false","false","true","true","true","int","1","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboardHelper.java"
"mFactor","false","false","true","false","false","float","1.0f","[]","Optional.empty","\android\view\animation\DecelerateInterpolator.java"
"mRes","false","false","true","false","false","SmileyResources","null","[]","Optional.empty","\com\google\android\util\SmileyParser.java"
"CONTENT_AUTHORED_BY_URI","true","false","false","true","true","Uri","Uri.withAppendedPath(CONTENT_URI, ""authored_by"")","[]","Optional[/**
 * The content:// URI for this table filtered to the set of social activities
 * authored by a specific {@link android.provider.ContactsContract.Contacts#_ID}.
 */
]","\android\provider\SocialContract.java"
"CONTENT_TYPE","true","false","false","true","true","String","""vnd.android.cursor.dir/activity""","[]","Optional[/**
 * The MIME type of {@link #CONTENT_URI} providing a directory of social
 * activities.
 */
]","\android\provider\SocialContract.java"
"AUTHORITY_URI","true","false","false","true","true","Uri","Uri.parse(""content://"" + AUTHORITY)","[]","Optional[/**
 * A content:// style uri to the authority for the contacts provider
 */
]","\android\provider\SocialContract.java"
"AUTHOR_CONTACT_ID","true","false","false","true","true","String","""author_contact_id""","[]","Optional[/**
 * Reference to the {@link android.provider.ContactsContract.Contacts#_ID} that authored
 * this social activity. This field is analogous to the <code>atom:author</code>
 * element defined in RFC 4287.
 * <p>
 * Type: INTEGER
 */
]","\android\provider\SocialContract.java"
"CONTENT_ITEM_TYPE","true","false","false","true","true","String","""vnd.android.cursor.item/activity""","[]","Optional[/**
 * The MIME type of a {@link #CONTENT_URI} subdirectory of a single
 * social activity.
 */
]","\android\provider\SocialContract.java"
"MIMETYPE","true","false","false","true","true","String","""mimetype""","[]","Optional[/**
 * The mime-type of this social activity.
 * <p>
 * Type: TEXT
 */
]","\android\provider\SocialContract.java"
"TITLE","true","false","false","true","true","String","""title""","[]","Optional[/**
 * Title of this social activity. This field is analogous to the
 * <code>atom:title</code> element defined in RFC 4287.
 * <p>
 * Type: TEXT
 */
]","\android\provider\SocialContract.java"
"RAW_ID","true","false","false","true","true","String","""raw_id""","[]","Optional[/**
 * Internal raw identifier for this social activity. This field is
 * analogous to the <code>atom:id</code> element defined in RFC 4287.
 * <p>
 * Type: TEXT
 */
]","\android\provider\SocialContract.java"
"RES_PACKAGE","true","false","false","true","true","String","""res_package""","[]","Optional[/**
 * The package name to use when creating {@link Resources} objects for
 * this data row. This value is only designed for use when building user
 * interfaces, and should not be used to infer the owner.
 * <p>
 * Type: TEXT
 */
]","\android\provider\SocialContract.java"
"AUTHORITY","true","false","false","true","true","String","""com.android.social""","[]","Optional[/**
 * The authority for the social provider
 */
]","\android\provider\SocialContract.java"
"CONTENT_URI","true","false","false","true","true","Uri","Uri.withAppendedPath(AUTHORITY_URI, ""activities"")","[]","Optional[/**
 * The content:// style URI for this table
 */
]","\android\provider\SocialContract.java"
"TARGET_CONTACT_ID","true","false","false","true","true","String","""target_contact_id""","[]","Optional[/**
 * Optional reference to the {@link android.provider.ContactsContract.Contacts#_ID} this
 * social activity is targeted towards. If more than one direct target, this field may
 * be left undefined. This field is analogous to the
 * <code>activity:target</code> element defined in the Atom Activity
 * Extensions Internet-Draft.
 * <p>
 * Type: INTEGER
 */
]","\android\provider\SocialContract.java"
"PUBLISHED","true","false","false","true","true","String","""published""","[]","Optional[/**
 * Timestamp when this social activity was published, in a
 * {@link System#currentTimeMillis()} time base. This field is analogous
 * to the <code>atom:published</code> element defined in RFC 4287.
 * <p>
 * Type: INTEGER
 */
]","\android\provider\SocialContract.java"
"SUMMARY","true","false","false","true","true","String","""summary""","[]","Optional[/**
 * Summary of this social activity. This field is analogous to the
 * <code>atom:summary</code> element defined in RFC 4287.
 * <p>
 * Type: TEXT
 */
]","\android\provider\SocialContract.java"
"THUMBNAIL","true","false","false","true","true","String","""thumbnail""","[]","Optional[/**
 * Optional thumbnail specific to this social activity. This is the raw
 * bytes of an image that could be inflated using {@link BitmapFactory}.
 * <p>
 * Type: BLOB
 */
]","\android\provider\SocialContract.java"
"THREAD_PUBLISHED","true","false","false","true","true","String","""thread_published""","[]","Optional[/**
 * Timestamp when the original social activity in a thread was
 * published. For activities that have an in-reply-to field specified, the
 * content provider will automatically populate this field with the
 * timestamp of the original activity.
 * <p>
 * This field is useful for sorting order of activities that keeps together all
 * messages in each thread.
 * <p>
 * Type: INTEGER
 */
]","\android\provider\SocialContract.java"
"CONTENT_CONTACT_STATUS_URI","true","false","false","true","true","Uri","Uri.withAppendedPath(AUTHORITY_URI, ""contact_status"")","[]","Optional[/**
 * The {@link Uri} for the latest social activity performed by any
 * raw contact aggregated under the specified {@link Contacts#_ID}. Will
 * also join with most-present {@link Presence} for this aggregate.
 */
]","\android\provider\SocialContract.java"
"LINK","true","false","false","true","true","String","""link""","[]","Optional[/**
 * A URI associated this social activity. This field is analogous to the
 * <code>atom:link rel=""alternate""</code> element defined in RFC 4287.
 * <p>
 * Type: TEXT
 */
]","\android\provider\SocialContract.java"
"IN_REPLY_TO","true","false","false","true","true","String","""in_reply_to""","[]","Optional[/**
 * Reference to another {@link Activities#RAW_ID} that this social activity
 * is replying to. This field is analogous to the
 * <code>thr:in-reply-to</code> element defined in RFC 4685.
 * <p>
 * Type: TEXT
 */
]","\android\provider\SocialContract.java"
"mRow","false","false","true","false","false","int","null","[]","Optional.empty","\android\util\DayOfMonthCursor.java"
"mColumn","false","false","true","false","false","int","null","[]","Optional.empty","\android\util\DayOfMonthCursor.java"
"labelRes","true","false","false","false","false","int","null","[]","Optional[/**
 * A string resource identifier (in the package's resources) of this
 * component's label.  From the ""label"" attribute or, if not set, 0.
 */
]","\android\content\pm\PackageItemInfo.java"
"icon","true","false","false","false","false","int","null","[]","Optional[/**
 * A drawable resource identifier (in the package's resources) of this
 * component's icon.  From the ""icon"" attribute or, if not set, 0.
 */
]","\android\content\pm\PackageItemInfo.java"
"metaData","true","false","false","false","false","Bundle","null","[]","Optional[/**
 * Additional meta-data associated with this component.  This field
 * will only be filled in if you set the
 * {@link PackageManager#GET_META_DATA} flag when requesting the info.
 */
]","\android\content\pm\PackageItemInfo.java"
"name","true","false","false","false","false","String","null","[]","Optional[/**
 * Public name of this item. From the ""android:name"" attribute.
 */
]","\android\content\pm\PackageItemInfo.java"
"nonLocalizedLabel","true","false","false","false","false","CharSequence","null","[]","Optional[/**
 * The string provided in the AndroidManifest file, if any.  You
 * probably don't want to use this.  You probably want
 * {@link PackageManager#getApplicationLabel}
 */
]","\android\content\pm\PackageItemInfo.java"
"mPM","false","false","true","false","false","PackageManager","null","[]","Optional.empty","\android\content\pm\PackageItemInfo.java"
"sCollator","false","false","true","false","true","Collator","Collator.getInstance()","[]","Optional.empty","\android\content\pm\PackageItemInfo.java"
"logo","true","false","false","false","false","int","null","[]","Optional[/**
 * A drawable resource identifier (in the package's resources) of this
 * component's logo. Logos may be larger/wider than icons and are
 * displayed by certain UI elements in place of a name or name/icon
 * combination. From the ""logo"" attribute or, if not set, 0.
 */
]","\android\content\pm\PackageItemInfo.java"
"packageName","true","false","false","false","false","String","null","[]","Optional[/**
 * Name of the package that this item is in.
 */
]","\android\content\pm\PackageItemInfo.java"
"sInReportException","false","false","true","true","true","AtomicInteger","new AtomicInteger()","[]","Optional[/**
 * Counter used to prevent reentrancy in {@link #reportException}.
 */
]","\com\android\internal\os\RuntimeInit.java"
"initialized","false","false","true","true","false","boolean","null","[]","Optional[/**
 * true if commonInit() has been called
 */
]","\com\android\internal\os\RuntimeInit.java"
"TAG","false","false","true","true","true","String","""AndroidRuntime""","[]","Optional.empty","\com\android\internal\os\RuntimeInit.java"
"mApplicationObject","false","false","true","true","false","IBinder","null","[]","Optional.empty","\com\android\internal\os\RuntimeInit.java"
"mCrashing","false","false","true","true","false","boolean","false","[]","Optional.empty","\com\android\internal\os\RuntimeInit.java"
"mColor","false","false","true","false","true","int","null","[]","Optional.empty","\android\text\style\BackgroundColorSpan.java"
"mWM","false","false","false","false","false","WindowManagerImpl","null","[]","Optional.empty","\android\widget\Toast.java"
"mNextView","false","false","false","false","false","View","null","[]","Optional.empty","\android\widget\Toast.java"
"mParams","false","false","true","false","true","WindowManager.LayoutParams","new WindowManager.LayoutParams()","[]","Optional.empty","\android\widget\Toast.java"
"mContext","false","false","false","false","true","Context","null","[]","Optional.empty","\android\widget\Toast.java"
"mView","false","false","false","false","false","View","null","[]","Optional.empty","\android\widget\Toast.java"
"mVerticalMargin","false","false","false","false","false","float","null","[]","Optional.empty","\android\widget\Toast.java"
"LENGTH_SHORT","true","false","false","true","true","int","0","[]","Optional[/**
 * Show the view or text notification for a short period of time.  This time
 * could be user-definable.  This is the default.
 * @see #setDuration
 */
]","\android\widget\Toast.java"
"mShow","false","false","false","false","true","Runnable","new Runnable() {

    public void run() {
        handleShow();
    }
}","[]","Optional.empty","\android\widget\Toast.java"
"mDuration","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\Toast.java"
"sService","false","false","true","true","false","INotificationManager","null","[]","Optional.empty","\android\widget\Toast.java"
"mHide","false","false","false","false","true","Runnable","new Runnable() {

    public void run() {
        handleHide();
    }
}","[]","Optional.empty","\android\widget\Toast.java"
"mHandler","false","false","false","false","true","Handler","new Handler()","[]","Optional.empty","\android\widget\Toast.java"
"TAG","false","false","false","true","true","String","""Toast""","[]","Optional.empty","\android\widget\Toast.java"
"mX","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\Toast.java"
"mTN","false","false","false","false","true","TN","null","[]","Optional.empty","\android\widget\Toast.java"
"localLOGV","false","false","false","true","true","boolean","false","[]","Optional.empty","\android\widget\Toast.java"
"mHorizontalMargin","false","false","false","false","false","float","null","[]","Optional.empty","\android\widget\Toast.java"
"mGravity","false","false","false","false","false","int","Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM","[]","Optional.empty","\android\widget\Toast.java"
"LENGTH_LONG","true","false","false","true","true","int","1","[]","Optional[/**
 * Show the view or text notification for a long period of time.  This time
 * could be user-definable.
 * @see #setDuration
 */
]","\android\widget\Toast.java"
"mNativeContentView","false","false","true","false","false","NativeContentView","null","[]","Optional.empty","\android\app\NativeActivity.java"
"mIMM","false","false","true","false","false","InputMethodManager","null","[]","Optional.empty","\android\app\NativeActivity.java"
"mCurInputQueue","false","false","true","false","false","InputQueue","null","[]","Optional.empty","\android\app\NativeActivity.java"
"mDispatchingUnhandledKey","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\app\NativeActivity.java"
"META_DATA_LIB_NAME","true","false","false","true","true","String","""android.app.lib_name""","[]","Optional[/**
 * Optional meta-that can be in the manifest for this component, specifying
 * the name of the native shared library to load.  If not specified,
 * ""main"" is used.
 */
]","\android\app\NativeActivity.java"
"mLastContentHeight","false","false","false","false","false","int","null","[]","Optional.empty","\android\app\NativeActivity.java"
"mActivity","false","false","false","false","false","NativeActivity","null","[]","Optional.empty","\android\app\NativeActivity.java"
"mNativeHandle","false","false","true","false","false","int","null","[]","Optional.empty","\android\app\NativeActivity.java"
"mNa","false","false","false","false","false","WeakReference<NativeActivity>","null","[]","Optional.empty","\android\app\NativeActivity.java"
"mDestroyed","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\app\NativeActivity.java"
"mLocation","false","false","false","false","true","int","new int[2]","[]","Optional.empty","\android\app\NativeActivity.java"
"KEY_NATIVE_SAVED_STATE","false","false","true","true","true","String","""android:native_state""","[]","Optional.empty","\android\app\NativeActivity.java"
"mInputMethodCallback","false","false","true","false","false","InputMethodCallback","null","[]","Optional.empty","\android\app\NativeActivity.java"
"META_DATA_FUNC_NAME","true","false","false","true","true","String","""android.app.func_name""","[]","Optional[/**
 * Optional meta-that can be in the manifest for this component, specifying
 * the name of the main entry point for this native activity in the
 * {@link #META_DATA_LIB_NAME} native code.  If not specified,
 * ""ANativeActivity_onCreate"" is used.
 */
]","\android\app\NativeActivity.java"
"mCurSurfaceHolder","false","false","true","false","false","SurfaceHolder","null","[]","Optional.empty","\android\app\NativeActivity.java"
"mLastContentWidth","false","false","false","false","false","int","null","[]","Optional.empty","\android\app\NativeActivity.java"
"mLastContentX","false","false","false","false","false","int","null","[]","Optional.empty","\android\app\NativeActivity.java"
"mLastContentY","false","false","false","false","false","int","null","[]","Optional.empty","\android\app\NativeActivity.java"
"mContext","false","true","false","false","true","Context","null","[]","Optional.empty","\android\preference\GenericInflater.java"
"mConstructorArgs","false","false","true","false","true","Object","new Object[2]","[]","Optional.empty","\android\preference\GenericInflater.java"
"mDefaultPackage","false","false","true","false","false","String","null","[]","Optional.empty","\android\preference\GenericInflater.java"
"mFactory","false","false","true","false","false","Factory<T>","null","[]","Optional.empty","\android\preference\GenericInflater.java"
"mFactorySet","false","false","true","false","false","boolean","null","[]","Optional[// these are optional, set by the caller
]","\android\preference\GenericInflater.java"
"mConstructorSignature","false","false","true","true","true","Class","new Class[] { Context.class, AttributeSet.class }","[]","Optional.empty","\android\preference\GenericInflater.java"
"sConstructorMap","false","false","true","true","true","HashMap","new HashMap()","[]","Optional.empty","\android\preference\GenericInflater.java"
"mF1","false","false","true","false","true","Factory<T>","null","[]","Optional.empty","\android\preference\GenericInflater.java"
"DEBUG","false","false","true","false","true","boolean","false","[]","Optional.empty","\android\preference\GenericInflater.java"
"mPlugins","false","false","true","false","false","ArrayList<Plugin>","null","[]","Optional.empty","\android\webkit\PluginList.java"
"mStartParam","false","false","true","true","false","byte","null","[]","Optional[/**
 * Store the ""start"" parameter in ""Content-Type"" header field.
 */
]","\com\google\android\mms\pdu\PduParser.java"
"END_STRING_FLAG","false","false","true","true","true","int","0x00","[]","Optional.empty","\com\google\android\mms\pdu\PduParser.java"
"THE_LAST_PART","false","false","true","true","true","int","1","[]","Optional.empty","\com\google\android\mms\pdu\PduParser.java"
"LOCAL_LOGV","false","false","true","true","true","boolean","DEBUG ? Config.LOGD : Config.LOGV","[]","Optional.empty","\com\google\android\mms\pdu\PduParser.java"
"THE_FIRST_PART","false","false","true","true","true","int","0","[]","Optional[/**
 * Specify the part position.
 */
]","\com\google\android\mms\pdu\PduParser.java"
"SHORT_INTEGER_MAX","false","false","true","true","true","int","127","[]","Optional.empty","\com\google\android\mms\pdu\PduParser.java"
"TYPE_QUOTED_STRING","false","false","true","true","true","int","1","[]","Optional.empty","\com\google\android\mms\pdu\PduParser.java"
"TYPE_TOKEN_STRING","false","false","true","true","true","int","2","[]","Optional.empty","\com\google\android\mms\pdu\PduParser.java"
"QUOTE","false","false","true","true","true","int","127","[]","Optional[/**
 * The next are WAP values defined in WSP specification.
 */
]","\com\google\android\mms\pdu\PduParser.java"
"TEXT_MIN","false","false","true","true","true","int","32","[]","Optional.empty","\com\google\android\mms\pdu\PduParser.java"
"LENGTH_QUOTE","false","false","true","true","true","int","31","[]","Optional.empty","\com\google\android\mms\pdu\PduParser.java"
"LOG_TAG","false","false","true","true","true","String","""PduParser""","[]","Optional[/**
 * The log tag.
 */
]","\com\google\android\mms\pdu\PduParser.java"
"SHORT_LENGTH_MAX","false","false","true","true","true","int","30","[]","Optional.empty","\com\google\android\mms\pdu\PduParser.java"
"mPduDataStream","false","false","true","false","false","ByteArrayInputStream","null","[]","Optional[/**
 * The pdu data.
 */
]","\com\google\android\mms\pdu\PduParser.java"
"LONG_INTEGER_LENGTH_MAX","false","false","true","true","true","int","8","[]","Optional.empty","\com\google\android\mms\pdu\PduParser.java"
"TYPE_TEXT_STRING","false","false","true","true","true","int","0","[]","Optional[// distinguish Text-String and Quoted-String.
]","\com\google\android\mms\pdu\PduParser.java"
"mTypeParam","false","false","true","true","false","byte","null","[]","Optional[/**
 * Store the ""type"" parameter in ""Content-Type"" header field.
 */
]","\com\google\android\mms\pdu\PduParser.java"
"QUOTED_STRING_FLAG","false","false","true","true","true","int","34","[]","Optional.empty","\com\google\android\mms\pdu\PduParser.java"
"mBody","false","false","true","false","false","PduBody","null","[]","Optional[/**
 * Store pdu parts.
 */
]","\com\google\android\mms\pdu\PduParser.java"
"TEXT_MAX","false","false","true","true","true","int","127","[]","Optional.empty","\com\google\android\mms\pdu\PduParser.java"
"mHeaders","false","false","true","false","false","PduHeaders","null","[]","Optional[/**
 * Store pdu headers
 */
]","\com\google\android\mms\pdu\PduParser.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\com\google\android\mms\pdu\PduParser.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<ProviderInfo>","new Parcelable.Creator<ProviderInfo>() {

    public ProviderInfo createFromParcel(Parcel in) {
        return new ProviderInfo(in);
    }

    public ProviderInfo[] newArray(int size) {
        return new ProviderInfo[size];
    }
}","[]","Optional.empty","\android\content\pm\ProviderInfo.java"
"readPermission","true","false","false","false","false","String","null","[]","Optional[/**
 * Optional permission required for read-only access this content
 * provider.
 */
]","\android\content\pm\ProviderInfo.java"
"pathPermissions","true","false","false","false","false","PathPermission","null","[]","Optional[/**
 * If non-null, these are path-specific permissions that are allowed for
 * accessing the provider.  Any permissions listed here will allow a
 * holding client to access the provider, and the provider will check
 * the URI it provides when making calls against the patterns here.
 */
]","\android\content\pm\ProviderInfo.java"
"authority","true","false","false","false","false","String","null","[]","Optional[/**
 * The name provider is published under content://
 */
]","\android\content\pm\ProviderInfo.java"
"isSyncable","true","false","false","false","false","boolean","false","[@Deprecated]","Optional[/**
 * Whether or not this provider is syncable.
 * @deprecated This flag is now being ignored. The current way to make a provider
 * syncable is to provide a SyncAdapter service for a given provider/account type.
 */
]","\android\content\pm\ProviderInfo.java"
"multiprocess","true","false","false","false","false","boolean","false","[]","Optional[/**
 * If true, this content provider allows multiple instances of itself
 * to run in different process.  If false, a single instances is always
 * run in {@link #processName}.
 */
]","\android\content\pm\ProviderInfo.java"
"writePermission","true","false","false","false","false","String","null","[]","Optional[/**
 * Optional permission required for read/write access this content
 * provider.
 */
]","\android\content\pm\ProviderInfo.java"
"grantUriPermissions","true","false","false","false","false","boolean","false","[]","Optional[/**
 * If true, additional permissions to specific Uris in this content
 * provider can be granted, as per the
 * {@link android.R.styleable#AndroidManifestProvider_grantUriPermissions
 * grantUriPermissions} attribute.
 */
]","\android\content\pm\ProviderInfo.java"
"initOrder","true","false","false","false","false","int","0","[]","Optional[/**
 * Used to control initialization order of single-process providers
 * running in the same process.  Higher goes first.
 */
]","\android\content\pm\ProviderInfo.java"
"uriPermissionPatterns","true","false","false","false","false","PatternMatcher","null","[]","Optional[/**
 * If non-null, these are the patterns that are allowed for granting URI
 * permissions.  Any URI that does not match one of these patterns will not
 * allowed to be granted.  If null, all URIs are allowed.  The
 * {@link PackageManager#GET_URI_PERMISSION_PATTERNS
 * PackageManager.GET_URI_PERMISSION_PATTERNS} flag must be specified for
 * this field to be filled in.
 */
]","\android\content\pm\ProviderInfo.java"
"mInstance","false","false","true","true","false","DdmHandleHeap","new DdmHandleHeap()","[]","Optional.empty","\android\ddm\DdmHandleHeap.java"
"CHUNK_HPGC","true","false","false","true","true","int","type(""HPGC"")","[]","Optional.empty","\android\ddm\DdmHandleHeap.java"
"CHUNK_HPIF","true","false","false","true","true","int","type(""HPIF"")","[]","Optional.empty","\android\ddm\DdmHandleHeap.java"
"CHUNK_HPSG","true","false","false","true","true","int","type(""HPSG"")","[]","Optional.empty","\android\ddm\DdmHandleHeap.java"
"CHUNK_REAQ","true","false","false","true","true","int","type(""REAQ"")","[]","Optional.empty","\android\ddm\DdmHandleHeap.java"
"CHUNK_REAL","true","false","false","true","true","int","type(""REAL"")","[]","Optional.empty","\android\ddm\DdmHandleHeap.java"
"CHUNK_HPDS","true","false","false","true","true","int","type(""HPDS"")","[]","Optional.empty","\android\ddm\DdmHandleHeap.java"
"CHUNK_HPDU","true","false","false","true","true","int","type(""HPDU"")","[]","Optional.empty","\android\ddm\DdmHandleHeap.java"
"CHUNK_REAE","true","false","false","true","true","int","type(""REAE"")","[]","Optional.empty","\android\ddm\DdmHandleHeap.java"
"CHUNK_NHSG","true","false","false","true","true","int","type(""NHSG"")","[]","Optional.empty","\android\ddm\DdmHandleHeap.java"
"THREAD_PRIORITY_AUDIO","true","false","false","true","true","int","-16","[]","Optional[/**
 * Standard priority of audio threads.  Applications can not normally
 * change to this priority.
 * Use with {@link #setThreadPriority(int)} and
 * {@link #setThreadPriority(int, int)}, <b>not</b> with the normal
 * {@link java.lang.Thread} class.
 */
]","\android\os\Process.java"
"NFC_UID","true","false","false","true","true","int","1022","[]","Optional[/**
 * Defines the UID/GID for the NFC service process.
 * @hide
 */
]","\android\os\Process.java"
"PROC_PARENS","true","false","false","true","true","int","0x200","[]","Optional[/**
 * @hide
 */
]","\android\os\Process.java"
"PROC_ZERO_TERM","true","false","false","true","true","int","0","[]","Optional[/**
 * @hide
 */
]","\android\os\Process.java"
"SHELL_UID","true","false","false","true","true","int","2000","[]","Optional[/**
 * Defines the UID/GID for the user shell.
 * @hide
 */
]","\android\os\Process.java"
"THREAD_PRIORITY_FOREGROUND","true","false","false","true","true","int","-2","[]","Optional[/**
 * Standard priority of threads that are currently running a user interface
 * that the user is interacting with.  Applications can not normally
 * change to this priority; the system will automatically adjust your
 * application threads as the user moves through the UI.
 * Use with {@link #setThreadPriority(int)} and
 * {@link #setThreadPriority(int, int)}, <b>not</b> with the normal
 * {@link java.lang.Thread} class.
 */
]","\android\os\Process.java"
"LAST_APPLICATION_UID","true","false","false","true","true","int","99999","[]","Optional[/**
 * Last of application-specific UIDs starting at
 * {@link #FIRST_APPLICATION_UID}.
 */
]","\android\os\Process.java"
"sZygoteInputStream","false","false","false","true","false","DataInputStream","null","[]","Optional.empty","\android\os\Process.java"
"SIGNAL_USR1","true","false","false","true","true","int","10","[]","Optional.empty","\android\os\Process.java"
"THREAD_PRIORITY_URGENT_AUDIO","true","false","false","true","true","int","-19","[]","Optional[/**
 * Standard priority of the most important audio threads.
 * Applications can not normally change to this priority.
 * Use with {@link #setThreadPriority(int)} and
 * {@link #setThreadPriority(int, int)}, <b>not</b> with the normal
 * {@link java.lang.Thread} class.
 */
]","\android\os\Process.java"
"ANDROID_SHARED_MEDIA","true","false","false","true","true","String","""com.android.process.media""","[]","Optional[/**
 * Name of a process for running the platform's media services.
 * {@hide}
 */
]","\android\os\Process.java"
"THREAD_PRIORITY_LESS_FAVORABLE","true","false","false","true","true","int","+1","[]","Optional[/**
 * Minimum increment to make a priority less favorable.
 */
]","\android\os\Process.java"
"ZYGOTE_RETRY_MILLIS","false","false","false","true","true","int","500","[]","Optional[/**
 * retry interval for opening a zygote socket
 */
]","\android\os\Process.java"
"THREAD_GROUP_BG_NONINTERACTIVE","true","false","false","true","true","int","1","[]","Optional[/**
 * Background non-interactive thread group - All threads in
 * this group are scheduled with a reduced share of the CPU.
 * @hide
 */
]","\android\os\Process.java"
"PROC_COMBINE","true","false","false","true","true","int","0x100","[]","Optional[/**
 * @hide
 */
]","\android\os\Process.java"
"SIGNAL_KILL","true","false","false","true","true","int","9","[]","Optional.empty","\android\os\Process.java"
"WIFI_UID","true","false","false","true","true","int","1010","[]","Optional[/**
 * Defines the UID/GID for the WIFI supplicant process.
 * @hide
 */
]","\android\os\Process.java"
"PROC_TAB_TERM","true","false","false","true","true","int","(int) '\t'","[]","Optional[/**
 * @hide
 */
]","\android\os\Process.java"
"ZYGOTE_SOCKET","false","false","true","true","true","String","""zygote""","[]","Optional.empty","\android\os\Process.java"
"THREAD_GROUP_DEFAULT","true","false","false","true","true","int","0","[]","Optional[/**
 * Default thread group - gets a 'normal' share of the CPU
 * @hide
 */
]","\android\os\Process.java"
"LOG_TAG","false","false","true","true","true","String","""Process""","[]","Optional.empty","\android\os\Process.java"
"THREAD_GROUP_FG_BOOST","true","false","false","true","true","int","2","[]","Optional[/**
 * Foreground 'boost' thread group - All threads in
 * this group are scheduled with an increased share of the CPU
 * @hide
 */
]","\android\os\Process.java"
"FIRST_APPLICATION_UID","true","false","false","true","true","int","10000","[]","Optional[/**
 * Defines the start of a range of UIDs (and GIDs), going from this
 * number to {@link #LAST_APPLICATION_UID} that are reserved for assigning
 * to applications.
 */
]","\android\os\Process.java"
"PROC_OUT_FLOAT","true","false","false","true","true","int","0x4000","[]","Optional[/**
 * @hide
 */
]","\android\os\Process.java"
"PROC_OUT_LONG","true","false","false","true","true","int","0x2000","[]","Optional[/**
 * @hide
 */
]","\android\os\Process.java"
"THREAD_PRIORITY_LOWEST","true","false","false","true","true","int","19","[]","Optional[/**
 * Lowest available thread priority.  Only for those who really, really
 * don't want to run if anything else is happening.
 * Use with {@link #setThreadPriority(int)} and
 * {@link #setThreadPriority(int, int)}, <b>not</b> with the normal
 * {@link java.lang.Thread} class.
 */
]","\android\os\Process.java"
"PROC_OUT_STRING","true","false","false","true","true","int","0x1000","[]","Optional[/**
 * @hide
 */
]","\android\os\Process.java"
"PHONE_UID","true","false","false","true","true","int","1001","[]","Optional[/**
 * Defines the UID/GID under which the telephony code runs.
 */
]","\android\os\Process.java"
"SYSTEM_UID","true","false","false","true","true","int","1000","[]","Optional[/**
 * Defines the UID/GID under which system code runs.
 */
]","\android\os\Process.java"
"THREAD_PRIORITY_DISPLAY","true","false","false","true","true","int","-4","[]","Optional[/**
 * Standard priority of system display threads, involved in updating
 * the user interface.  Applications can not
 * normally change to this priority.
 * Use with {@link #setThreadPriority(int)} and
 * {@link #setThreadPriority(int, int)}, <b>not</b> with the normal
 * {@link java.lang.Thread} class.
 */
]","\android\os\Process.java"
"PROC_SPACE_TERM","true","false","false","true","true","int","(int) ' '","[]","Optional[/**
 * @hide
 */
]","\android\os\Process.java"
"THREAD_PRIORITY_BACKGROUND","true","false","false","true","true","int","10","[]","Optional[/**
 * Standard priority background threads.  This gives your thread a slightly
 * lower than normal priority, so that it will have less chance of impacting
 * the responsiveness of the user interface.
 * Use with {@link #setThreadPriority(int)} and
 * {@link #setThreadPriority(int, int)}, <b>not</b> with the normal
 * {@link java.lang.Thread} class.
 */
]","\android\os\Process.java"
"THREAD_PRIORITY_DEFAULT","true","false","false","true","true","int","0","[]","Optional[/**
 * Standard priority of application threads.
 * Use with {@link #setThreadPriority(int)} and
 * {@link #setThreadPriority(int, int)}, <b>not</b> with the normal
 * {@link java.lang.Thread} class.
 */
]","\android\os\Process.java"
"LOG_UID","true","false","false","true","true","int","1007","[]","Optional[/**
 * Defines the UID/GID for the log group.
 * @hide
 */
]","\android\os\Process.java"
"SIGNAL_QUIT","true","false","false","true","true","int","3","[]","Optional.empty","\android\os\Process.java"
"THREAD_PRIORITY_URGENT_DISPLAY","true","false","false","true","true","int","-8","[]","Optional[/**
 * Standard priority of the most important display threads, for compositing
 * the screen and retrieving input events.  Applications can not normally
 * change to this priority.
 * Use with {@link #setThreadPriority(int)} and
 * {@link #setThreadPriority(int, int)}, <b>not</b> with the normal
 * {@link java.lang.Thread} class.
 */
]","\android\os\Process.java"
"BLUETOOTH_GID","true","false","false","true","true","int","2000","[]","Optional[/**
 * Defines a secondary group id for access to the bluetooth hardware.
 */
]","\android\os\Process.java"
"THREAD_PRIORITY_MORE_FAVORABLE","true","false","false","true","true","int","-1","[]","Optional[/**
 * Minimum increment to make a priority more favorable.
 */
]","\android\os\Process.java"
"sZygoteWriter","false","false","false","true","false","BufferedWriter","null","[]","Optional.empty","\android\os\Process.java"
"sZygoteSocket","false","false","false","true","false","LocalSocket","null","[]","Optional.empty","\android\os\Process.java"
"GOOGLE_SHARED_APP_CONTENT","true","false","false","true","true","String","""com.google.process.content""","[]","Optional[/**
 * Name of the process that Google content providers can share.
 * {@hide}
 */
]","\android\os\Process.java"
"sPreviousZygoteOpenFailed","false","false","false","true","false","boolean","null","[]","Optional[/**
 * true if previous zygote open failed
 */
]","\android\os\Process.java"
"PROC_TERM_MASK","true","false","false","true","true","int","0xff","[]","Optional[/**
 * @hide
 */
]","\android\os\Process.java"
"mMainLooper","false","false","false","false","true","Looper","null","[]","Optional.empty","\com\android\internal\os\HandlerCaller.java"
"argi1","true","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\os\HandlerCaller.java"
"argi2","true","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\os\HandlerCaller.java"
"mArgsPool","false","false","false","false","false","SomeArgs","null","[]","Optional.empty","\com\android\internal\os\HandlerCaller.java"
"argi3","true","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\os\HandlerCaller.java"
"mContext","true","false","false","false","true","Context","null","[]","Optional.empty","\com\android\internal\os\HandlerCaller.java"
"argi4","true","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\os\HandlerCaller.java"
"argi5","true","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\os\HandlerCaller.java"
"argi6","true","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\os\HandlerCaller.java"
"arg3","true","false","false","false","false","Object","null","[]","Optional.empty","\com\android\internal\os\HandlerCaller.java"
"arg2","true","false","false","false","false","Object","null","[]","Optional.empty","\com\android\internal\os\HandlerCaller.java"
"arg4","true","false","false","false","false","Object","null","[]","Optional.empty","\com\android\internal\os\HandlerCaller.java"
"arg1","true","false","false","false","false","Object","null","[]","Optional.empty","\com\android\internal\os\HandlerCaller.java"
"next","false","false","false","false","false","SomeArgs","null","[]","Optional.empty","\com\android\internal\os\HandlerCaller.java"
"mArgsPoolSize","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\os\HandlerCaller.java"
"ARGS_POOL_MAX_SIZE","false","false","false","true","true","int","10","[]","Optional.empty","\com\android\internal\os\HandlerCaller.java"
"mCallback","false","false","false","false","true","Callback","null","[]","Optional.empty","\com\android\internal\os\HandlerCaller.java"
"TAG","false","false","true","true","true","String","""HandlerCaller""","[]","Optional.empty","\com\android\internal\os\HandlerCaller.java"
"mH","false","false","false","false","true","Handler","null","[]","Optional.empty","\com\android\internal\os\HandlerCaller.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\com\android\internal\os\HandlerCaller.java"
"mOverlayBounds","false","false","true","false","true","Rect","new Rect()","[]","Optional.empty","\android\widget\FrameLayout.java"
"mForegroundInPadding","false","true","false","false","false","boolean","true","[@ViewDebug.ExportedProperty(category = ""drawing"")]","Optional[/**
 * {@hide}
 */
]","\android\widget\FrameLayout.java"
"mForegroundPaddingBottom","false","false","true","false","false","int","0","[@ViewDebug.ExportedProperty(category = ""padding"")]","Optional.empty","\android\widget\FrameLayout.java"
"mForegroundGravity","false","false","true","false","false","int","Gravity.FILL","[@ViewDebug.ExportedProperty(category = ""drawing"")]","Optional.empty","\android\widget\FrameLayout.java"
"mSelfBounds","false","false","true","false","true","Rect","new Rect()","[]","Optional.empty","\android\widget\FrameLayout.java"
"mForegroundPaddingLeft","false","false","true","false","false","int","0","[@ViewDebug.ExportedProperty(category = ""padding"")]","Optional.empty","\android\widget\FrameLayout.java"
"mForegroundPaddingRight","false","false","true","false","false","int","0","[@ViewDebug.ExportedProperty(category = ""padding"")]","Optional.empty","\android\widget\FrameLayout.java"
"gravity","true","false","false","false","false","int","-1","[]","Optional[/**
 * The gravity to apply with the View to which these layout parameters
 * are associated.
 *
 * @see android.view.Gravity
 */
]","\android\widget\FrameLayout.java"
"mMeasureAllChildren","false","false","false","false","false","boolean","false","[@ViewDebug.ExportedProperty(category = ""measurement"")]","Optional.empty","\android\widget\FrameLayout.java"
"mForegroundBoundsChanged","false","false","false","false","false","boolean","false","[]","Optional.empty","\android\widget\FrameLayout.java"
"mForegroundPaddingTop","false","false","true","false","false","int","0","[@ViewDebug.ExportedProperty(category = ""padding"")]","Optional.empty","\android\widget\FrameLayout.java"
"mForeground","false","false","true","false","false","Drawable","null","[@ViewDebug.ExportedProperty(category = ""drawing"")]","Optional.empty","\android\widget\FrameLayout.java"
"CREATOR","true","false","false","true","true","Creator<ContentProviderResult>","new Creator<ContentProviderResult>() {

    public ContentProviderResult createFromParcel(Parcel source) {
        return new ContentProviderResult(source);
    }

    public ContentProviderResult[] newArray(int size) {
        return new ContentProviderResult[size];
    }
}","[]","Optional.empty","\android\content\ContentProviderResult.java"
"count","true","false","false","false","true","Integer","null","[]","Optional.empty","\android\content\ContentProviderResult.java"
"uri","true","false","false","false","true","Uri","null","[]","Optional.empty","\android\content\ContentProviderResult.java"
"INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES","true","false","false","true","true","int","-104","[]","Optional[/**
 * Installation parse return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)}
 * if the parser found inconsistent certificates on the files in the .apk.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_AUDIO_LOW_LATENCY","true","false","false","true","true","String","""android.hardware.audio.low_latency""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device's audio pipeline is low-latency,
 * more suitable for audio applications sensitive to delays or lag in
 * sound input or output.
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_LOCATION_GPS","true","false","false","true","true","String","""android.hardware.location.gps""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device has a Global Positioning System
 * receiver and can report precise location.
 */
]","\android\content\pm\PackageManager.java"
"MOVE_FAILED_FORWARD_LOCKED","true","false","false","true","true","int","-4","[]","Optional[/**
 * Error code that is passed to the {@link IPackageMoveObserver} by
 * {@link #movePackage(android.net.Uri, IPackageMoveObserver)}
 * if the specified package cannot be moved since its forward locked.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"MATCH_DEFAULT_ONLY","true","false","false","true","true","int","0x00010000","[]","Optional[/**
 * Resolution and querying flag: if set, only filters that support the
 * {@link android.content.Intent#CATEGORY_DEFAULT} will be considered for
 * matching.  This is a synonym for including the CATEGORY_DEFAULT in your
 * supplied Intent.
 */
]","\android\content\pm\PackageManager.java"
"MOVE_FAILED_DOESNT_EXIST","true","false","false","true","true","int","-2","[]","Optional[/**
 * Error code that is passed to the {@link IPackageMoveObserver} by
 * {@link #movePackage(android.net.Uri, IPackageMoveObserver)}
 * if the specified package doesn't exist.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"MOVE_FAILED_SYSTEM_PACKAGE","true","false","false","true","true","int","-3","[]","Optional[/**
 * Error code that is passed to the {@link IPackageMoveObserver} by
 * {@link #movePackage(android.net.Uri, IPackageMoveObserver)}
 * if the specified package cannot be moved since its a system package.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_CAMERA_AUTOFOCUS","true","false","false","true","true","String","""android.hardware.camera.autofocus""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device's camera supports auto-focus.
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_SENSOR_ACCELEROMETER","true","false","false","true","true","String","""android.hardware.sensor.accelerometer""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device includes an accelerometer.
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_INTERNAL","true","false","false","true","true","int","0x00000010","[]","Optional[/**
 * Flag parameter for {@link #installPackage} to indicate that this
 * package has to be installed on the sdcard.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"DONT_DELETE_DATA","true","false","false","true","true","int","0x00000001","[]","Optional[/**
 * Flag parameter for {@link #deletePackage} to indicate that you don't want to delete the
 * package's data directory.
 *
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_FORWARD_LOCK","true","false","false","true","true","int","0x00000001","[]","Optional[/**
 * Flag parameter for {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)} to
 * indicate that this package should be installed as forward locked, i.e. only the app itself
 * should have access to its code and non-resource assets.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_CAMERA","true","false","false","true","true","String","""android.hardware.camera""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device has a camera facing away
 * from the screen.
 */
]","\android\content\pm\PackageManager.java"
"SIGNATURE_UNKNOWN_PACKAGE","true","false","false","true","true","int","-4","[]","Optional[/**
 * Signature check result: this is returned by {@link #checkSignatures}
 * if either of the packages are not valid.
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_SIP","true","false","false","true","true","String","""android.software.sip""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The SIP API is enabled on the device.
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_FAILED_NEWER_SDK","true","false","false","true","true","int","-14","[]","Optional[/**
 * Installation return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)} if
 * the new package failed because the current SDK version is newer than
 * that required by the package.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"GET_META_DATA","true","false","false","true","true","int","0x00000080","[]","Optional[/**
 * {@link ComponentInfo} flag: return the {@link ComponentInfo#metaData}
 * data {@link android.os.Bundle}s that are associated with a component.
 * This applies for any API returning a ComponentInfo subclass.
 */
]","\android\content\pm\PackageManager.java"
"GET_PROVIDERS","true","false","false","true","true","int","0x00000008","[]","Optional[/**
 * {@link PackageInfo} flag: return information about
 * content providers in the package in
 * {@link PackageInfo#providers}.
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_LOCATION","true","false","false","true","true","String","""android.hardware.location""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device supports one or more methods of
 * reporting current location.
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_FAILED_INVALID_INSTALL_LOCATION","true","false","false","true","true","int","-19","[]","Optional[/**
 * Installation return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)} if
 * the new package couldn't be installed in the specified install
 * location.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING","true","false","false","true","true","int","-105","[]","Optional[/**
 * Installation parse return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)}
 * if the parser encountered a CertificateEncodingException in one of the
 * files in the .apk.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"MOVE_EXTERNAL_MEDIA","true","false","false","true","true","int","0x00000002","[]","Optional[/**
 * Flag parameter for {@link #movePackage} to indicate that
 * the package should be moved to external media.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"GET_UNINSTALLED_PACKAGES","true","false","false","true","true","int","0x00002000","[]","Optional[/**
 * Flag parameter to retrieve all applications(even uninstalled ones) with data directories.
 * This state could have resulted if applications have been deleted with flag
 * DONT_DELETE_DATA
 * with a possibility of being replaced or reinstalled in future
 */
]","\android\content\pm\PackageManager.java"
"GET_GIDS","true","false","false","true","true","int","0x00000100","[]","Optional[/**
 * {@link PackageInfo} flag: return the
 * {@link PackageInfo#gids group ids} that are associated with an
 * application.
 * This applies for any API returning an PackageInfo class, either
 * directly or nested inside of another.
 */
]","\android\content\pm\PackageManager.java"
"COMPONENT_ENABLED_STATE_DEFAULT","true","false","false","true","true","int","0","[]","Optional.empty","\android\content\pm\PackageManager.java"
"FEATURE_SENSOR_LIGHT","true","false","false","true","true","String","""android.hardware.sensor.light""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device includes a light sensor.
 */
]","\android\content\pm\PackageManager.java"
"MOVE_FAILED_INSUFFICIENT_STORAGE","true","false","false","true","true","int","-1","[]","Optional[/**
 * Error code that is passed to the {@link IPackageMoveObserver} by
 * {@link #movePackage(android.net.Uri, IPackageMoveObserver)}
 * when the package hasn't been successfully moved by the system
 * because of insufficient memory on specified media.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"MOVE_SUCCEEDED","true","false","false","true","true","int","1","[]","Optional[/**
 * Return code that is passed to the {@link IPackageMoveObserver} by
 * {@link #movePackage(android.net.Uri, IPackageMoveObserver)}
 * when the package has been successfully moved by the system.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"GET_INTENT_FILTERS","true","false","false","true","true","int","0x00000020","[]","Optional[/**
 * {@link PackageInfo} flag: return information about the
 * intent filters supported by the activity.
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_MICROPHONE","true","false","false","true","true","String","""android.hardware.microphone""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device can record audio via a
 * microphone.
 */
]","\android\content\pm\PackageManager.java"
"MOVE_INTERNAL","true","false","false","true","true","int","0x00000001","[]","Optional[/**
 * Flag parameter for {@link #movePackage} to indicate that
 * the package should be moved to internal storage if its
 * been installed on external media.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"GET_ACTIVITIES","true","false","false","true","true","int","0x00000001","[]","Optional[/**
 * {@link PackageInfo} flag: return information about
 * activities in the package in {@link PackageInfo#activities}.
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_BLUETOOTH","true","false","false","true","true","String","""android.hardware.bluetooth""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device is capable of communicating with
 * other devices via Bluetooth.
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_FAILED_INSUFFICIENT_STORAGE","true","false","false","true","true","int","-4","[]","Optional[/**
 * Installation return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)} if the package manager
 * service found that the device didn't have enough storage space to install the app.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_EXTERNAL","true","false","false","true","true","int","0x00000008","[]","Optional[/**
 * Flag parameter for {@link #installPackage} to indicate that this
 * package has to be installed on the sdcard.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"GET_PERMISSIONS","true","false","false","true","true","int","0x00001000","[]","Optional[/**
 * {@link PackageInfo} flag: return information about
 * permissions in the package in
 * {@link PackageInfo#permissions}.
 */
]","\android\content\pm\PackageManager.java"
"SIGNATURE_FIRST_NOT_SIGNED","true","false","false","true","true","int","-1","[]","Optional[/**
 * Signature check result: this is returned by {@link #checkSignatures}
 * if the first package is not signed but the second is.
 */
]","\android\content\pm\PackageManager.java"
"COMPONENT_ENABLED_STATE_DISABLED","true","false","false","true","true","int","2","[]","Optional.empty","\android\content\pm\PackageManager.java"
"INSTALL_FAILED_CONTAINER_ERROR","true","false","false","true","true","int","-18","[]","Optional[/**
 * Installation return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)} if
 * a secure container mount point couldn't be accessed on external media.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_TELEPHONY_GSM","true","false","false","true","true","String","""android.hardware.telephony.gsm""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device has a GSM telephony stack.
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_TOUCHSCREEN_MULTITOUCH","true","false","false","true","true","String","""android.hardware.touchscreen.multitouch""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device's touch screen supports
 * multitouch sufficient for basic two-finger gesture detection.
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_CAMERA_FRONT","true","false","false","true","true","String","""android.hardware.camera.front""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device has a front facing camera.
 */
]","\android\content\pm\PackageManager.java"
"GET_URI_PERMISSION_PATTERNS","true","false","false","true","true","int","0x00000800","[]","Optional[/**
 * {@link ProviderInfo} flag: return the
 * {@link ProviderInfo#uriPermissionPatterns URI permission patterns}
 * that are associated with a content provider.
 * This applies for any API returning an ProviderInfo class, either
 * directly or nested inside of another.
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT","true","false","false","true","true","String","""android.hardware.touchscreen.multitouch.distinct""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device's touch screen is capable of
 * tracking two or more fingers fully independently.
 */
]","\android\content\pm\PackageManager.java"
"SIGNATURE_SECOND_NOT_SIGNED","true","false","false","true","true","int","-2","[]","Optional[/**
 * Signature check result: this is returned by {@link #checkSignatures}
 * if the second package is not signed but the first is.
 */
]","\android\content\pm\PackageManager.java"
"DONT_KILL_APP","true","false","false","true","true","int","0x00000001","[]","Optional[/**
 * Flag parameter for
 * {@link #setComponentEnabledSetting(android.content.ComponentName, int, int)} to indicate
 * that you don't want to kill the app containing the component.  Be careful when you set this
 * since changing component states can make the containing application's behavior unpredictable.
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_TOUCHSCREEN","true","false","false","true","true","String","""android.hardware.touchscreen""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device's display has a touch screen.
 */
]","\android\content\pm\PackageManager.java"
"GET_SIGNATURES","true","false","false","true","true","int","0x00000040","[]","Optional[/**
 * {@link PackageInfo} flag: return information about the
 * signatures included in the package.
 */
]","\android\content\pm\PackageManager.java"
"GET_SERVICES","true","false","false","true","true","int","0x00000004","[]","Optional[/**
 * {@link PackageInfo} flag: return information about
 * services in the package in {@link PackageInfo#services}.
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_ALLOW_TEST","true","false","false","true","true","int","0x00000004","[]","Optional[/**
 * Flag parameter for {@link #installPackage} to indicate that you want to
 * allow test packages (those that have set android:testOnly in their
 * manifest) to be installed.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_SENSOR_GYROSCOPE","true","false","false","true","true","String","""android.hardware.sensor.gyroscope""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device includes a gyroscope.
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_PARSE_FAILED_MANIFEST_MALFORMED","true","false","false","true","true","int","-108","[]","Optional[/**
 * Installation parse return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)}
 * if the parser encountered some structural problem in the manifest.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_SUCCEEDED","true","false","false","true","true","int","1","[]","Optional[/**
 * Installation return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)} on success.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_SENSOR_BAROMETER","true","false","false","true","true","String","""android.hardware.sensor.barometer""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device includes a barometer (air
 * pressure sensor.)
 */
]","\android\content\pm\PackageManager.java"
"MOVE_FAILED_INVALID_LOCATION","true","false","false","true","true","int","-5","[]","Optional[/**
 * Error code that is passed to the {@link IPackageMoveObserver} by
 * {@link #movePackage(android.net.Uri, IPackageMoveObserver)}
 * if the specified package cannot be moved to the specified location.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"GET_SHARED_LIBRARY_FILES","true","false","false","true","true","int","0x00000400","[]","Optional[/**
 * {@link ApplicationInfo} flag: return the
 * {@link ApplicationInfo#sharedLibraryFiles paths to the shared libraries}
 * that are associated with an application.
 * This applies for any API returning an ApplicationInfo class, either
 * directly or nested inside of another.
 */
]","\android\content\pm\PackageManager.java"
"PERMISSION_GRANTED","true","false","false","true","true","int","0","[]","Optional[/**
 * Permission check result: this is returned by {@link #checkPermission}
 * if the permission has been granted to the given package.
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_SIP_VOIP","true","false","false","true","true","String","""android.software.sip.voip""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device supports SIP-based VOIP.
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_FAILED_INVALID_APK","true","false","false","true","true","int","-2","[]","Optional[/**
 * Installation return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)} if the package archive
 * file is invalid.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_FAILED_MEDIA_UNAVAILABLE","true","false","false","true","true","int","-20","[]","Optional[/**
 * Installation return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)} if
 * the new package couldn't be installed in the specified install
 * location because the media is not available.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_CAMERA_FLASH","true","false","false","true","true","String","""android.hardware.camera.flash""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device's camera supports flash.
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_WIFI","true","false","false","true","true","String","""android.hardware.wifi""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device supports WiFi (802.11) networking.
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_FAILED_ALREADY_EXISTS","true","false","false","true","true","int","-1","[]","Optional[/**
 * Installation return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)} if the package is
 * already installed.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_SENSOR_PROXIMITY","true","false","false","true","true","String","""android.hardware.sensor.proximity""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device includes a proximity sensor.
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_FAILED_DUPLICATE_PACKAGE","true","false","false","true","true","int","-5","[]","Optional[/**
 * Installation return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)} if a
 * package is already installed with the same name.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_FAILED_DEXOPT","true","false","false","true","true","int","-11","[]","Optional[/**
 * Installation return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)} if
 * the new package failed while optimizing and validating its dex files,
 * either because there was not enough storage or the validation failed.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"GET_RECEIVERS","true","false","false","true","true","int","0x00000002","[]","Optional[/**
 * {@link PackageInfo} flag: return information about
 * intent receivers in the package in
 * {@link PackageInfo#receivers}.
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_PARSE_FAILED_BAD_MANIFEST","true","false","false","true","true","int","-101","[]","Optional[/**
 * Installation parse return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)}
 * if the parser was unable to retrieve the AndroidManifest.xml file.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"SIGNATURE_NEITHER_SIGNED","true","false","false","true","true","int","1","[]","Optional[/**
 * Signature check result: this is returned by {@link #checkSignatures}
 * if neither of the two packages is signed.
 */
]","\android\content\pm\PackageManager.java"
"GET_RESOLVED_FILTER","true","false","false","true","true","int","0x00000040","[]","Optional[/**
 * {@link ResolveInfo} flag: return the IntentFilter that
 * was matched for a particular ResolveInfo in
 * {@link ResolveInfo#filter}.
 */
]","\android\content\pm\PackageManager.java"
"GET_DISABLED_COMPONENTS","true","false","false","true","true","int","0x00000200","[]","Optional[/**
 * {@link PackageInfo} flag: include disabled components in the returned info.
 */
]","\android\content\pm\PackageManager.java"
"GET_INSTRUMENTATION","true","false","false","true","true","int","0x00000010","[]","Optional[/**
 * {@link PackageInfo} flag: return information about
 * instrumentation in the package in
 * {@link PackageInfo#instrumentation}.
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_NFC","true","false","false","true","true","String","""android.hardware.nfc""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device can communicate using Near-Field
 * Communications (NFC).
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID","true","false","false","true","true","int","-107","[]","Optional[/**
 * Installation parse return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)}
 * if the parser encountered a bad shared user id name in the manifest.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_FAILED_CONFLICTING_PROVIDER","true","false","false","true","true","int","-13","[]","Optional[/**
 * Installation return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)} if
 * the new package failed because it contains a content provider with the
 * same authority as a provider already installed in the system.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"MOVE_FAILED_OPERATION_PENDING","true","false","false","true","true","int","-7","[]","Optional[/**
 * Error code that is passed to the {@link IPackageMoveObserver} by
 * {@link #movePackage(android.net.Uri, IPackageMoveObserver)} if the
 * specified package already has an operation pending in the
 * {@link PackageHandler} queue.
 *
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_PARSE_FAILED_NO_CERTIFICATES","true","false","false","true","true","int","-103","[]","Optional[/**
 * Installation parse return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)}
 * if the parser did not find any certificates in the .apk.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"SIGNATURE_MATCH","true","false","false","true","true","int","0","[]","Optional[/**
 * Signature check result: this is returned by {@link #checkSignatures}
 * if all signatures on the two packages match.
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_FAILED_OLDER_SDK","true","false","false","true","true","int","-12","[]","Optional[/**
 * Installation return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)} if
 * the new package failed because the current SDK version is older than
 * that required by the package.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_FAILED_UPDATE_INCOMPATIBLE","true","false","false","true","true","int","-7","[]","Optional[/**
 * Installation return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)} if
 * a previously installed package of the same name has a different signature
 * than the new package (and the old package's data was not removed).
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"COMPONENT_ENABLED_STATE_ENABLED","true","false","false","true","true","int","1","[]","Optional.empty","\android\content\pm\PackageManager.java"
"INSTALL_REPLACE_EXISTING","true","false","false","true","true","int","0x00000002","[]","Optional[/**
 * Flag parameter for {@link #installPackage} to indicate that you want to replace an already
 * installed package, if one exists.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_PARSE_FAILED_MANIFEST_EMPTY","true","false","false","true","true","int","-109","[]","Optional[/**
 * Installation parse return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)}
 * if the parser did not find any actionable tags (instrumentation or application)
 * in the manifest.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"SIGNATURE_NO_MATCH","true","false","false","true","true","int","-3","[]","Optional[/**
 * Signature check result: this is returned by {@link #checkSignatures}
 * if not all signatures on both packages match.
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_PARSE_FAILED_NOT_APK","true","false","false","true","true","int","-100","[]","Optional[/**
 * Installation parse return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)}
 * if the parser was given a path that is not a file, or does not end with the expected
 * '.apk' extension.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND","true","false","false","true","true","String","""android.hardware.touchscreen.multitouch.jazzhand""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device's touch screen is capable of
 * tracking a full hand of fingers fully independently -- that is, 5 or
 * more simultaneous independent pointers.
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_SENSOR_COMPASS","true","false","false","true","true","String","""android.hardware.sensor.compass""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device includes a magnetometer (compass).
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_FAILED_INTERNAL_ERROR","true","false","false","true","true","int","-110","[]","Optional[/**
 * Installation failed return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)}
 * if the system failed to install the package because of system issues.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME","true","false","false","true","true","int","-106","[]","Optional[/**
 * Installation parse return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)}
 * if the parser encountered a bad or missing package name in the manifest.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_FAILED_SHARED_USER_INCOMPATIBLE","true","false","false","true","true","int","-8","[]","Optional[/**
 * Installation return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)} if
 * the new package is requested a shared user which is already installed on the
 * device and does not have matching signature.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_FAILED_CPU_ABI_INCOMPATIBLE","true","false","false","true","true","int","-16","[]","Optional[/**
 * Installation return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)} if
 * the package being installed contains native code, but none that is
 * compatible with the the device's CPU_ABI.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_TELEPHONY","true","false","false","true","true","String","""android.hardware.telephony""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device has a telephony radio with data
 * communication support.
 */
]","\android\content\pm\PackageManager.java"
"PERMISSION_DENIED","true","false","false","true","true","int","-1","[]","Optional[/**
 * Permission check result: this is returned by {@link #checkPermission}
 * if the permission has not been granted to the given package.
 */
]","\android\content\pm\PackageManager.java"
"GET_CONFIGURATIONS","true","false","false","true","true","int","0x00004000","[]","Optional[/**
 * {@link PackageInfo} flag: return information about
 * hardware preferences in
 * {@link PackageInfo#configPreferences PackageInfo.configPreferences} and
 * requested features in {@link PackageInfo#reqFeatures
 * PackageInfo.reqFeatures}.
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION","true","false","false","true","true","int","-102","[]","Optional[/**
 * Installation parse return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)}
 * if the parser encountered an unexpected exception.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"MOVE_FAILED_INTERNAL_ERROR","true","false","false","true","true","int","-6","[]","Optional[/**
 * Error code that is passed to the {@link IPackageMoveObserver} by
 * {@link #movePackage(android.net.Uri, IPackageMoveObserver)}
 * if the specified package cannot be moved to the specified location.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_FAILED_REPLACE_COULDNT_DELETE","true","false","false","true","true","int","-10","[]","Optional[/**
 * Installation return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)} if
 * the new package uses a shared library that is not available.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_FAILED_TEST_ONLY","true","false","false","true","true","int","-15","[]","Optional[/**
 * Installation return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)} if
 * the new package failed because it has specified that it is a test-only
 * package and the caller has not supplied the {@link #INSTALL_ALLOW_TEST}
 * flag.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_TELEPHONY_CDMA","true","false","false","true","true","String","""android.hardware.telephony.cdma""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device has a CDMA telephony stack.
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_FAILED_INVALID_URI","true","false","false","true","true","int","-3","[]","Optional[/**
 * Installation return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)} if the URI passed in
 * is invalid.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"ACTION_CLEAN_EXTERNAL_STORAGE","true","false","false","true","true","String","""android.content.pm.CLEAN_EXTERNAL_STORAGE""","[]","Optional[/**
 * Action to external storage service to clean out removed apps.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_FAILED_MISSING_FEATURE","true","false","false","true","true","int","-17","[]","Optional[/**
 * Installation return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)} if
 * the new package uses a feature that is not available.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_FAILED_MISSING_SHARED_LIBRARY","true","false","false","true","true","int","-9","[]","Optional[/**
 * Installation return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)} if
 * the new package uses a shared library that is not available.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"INSTALL_FAILED_NO_SHARED_USER","true","false","false","true","true","int","-6","[]","Optional[/**
 * Installation return code: this is passed to the {@link IPackageInstallObserver} by
 * {@link #installPackage(android.net.Uri, IPackageInstallObserver, int)} if
 * the requested shared user does not exist.
 * @hide
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_LOCATION_NETWORK","true","false","false","true","true","String","""android.hardware.location.network""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device can report location with coarse
 * accuracy using a network-based geolocation system.
 */
]","\android\content\pm\PackageManager.java"
"FEATURE_LIVE_WALLPAPER","true","false","false","true","true","String","""android.software.live_wallpaper""","[@SdkConstant(SdkConstantType.FEATURE)]","Optional[/**
 * Feature for {@link #getSystemAvailableFeatures} and
 * {@link #hasSystemFeature}: The device supports live wallpapers.
 */
]","\android\content\pm\PackageManager.java"
"mPool","false","false","true","false","true","Pool<T>","null","[]","Optional.empty","\android\util\SynchronizedPool.java"
"mLock","false","false","true","false","true","Object","null","[]","Optional.empty","\android\util\SynchronizedPool.java"
"mRemote","false","false","true","false","true","IBinder","null","[]","Optional.empty","\android\app\ApplicationThreadNative.java"
"mLoaderQueue","false","false","true","false","false","LinkedList<LoadListener>","null","[]","Optional[/**
 * Queue of loaders that experience SSL-related problems.
 */
]","\android\webkit\SslErrorHandler.java"
"mOriginHandler","false","false","true","false","true","SslErrorHandler","null","[]","Optional[// These are only used in the client facing SslErrorHandler.
]","\android\webkit\SslErrorHandler.java"
"mLoadListener","false","false","true","false","true","LoadListener","null","[]","Optional.empty","\android\webkit\SslErrorHandler.java"
"mSslPrefTable","false","false","true","false","false","Bundle","null","[]","Optional[/**
 * SSL error preference table.
 */
]","\android\webkit\SslErrorHandler.java"
"HANDLE_RESPONSE","false","false","true","true","true","int","100","[]","Optional[// Message id for handling the response
]","\android\webkit\SslErrorHandler.java"
"LOGTAG","false","false","true","true","true","String","""network""","[]","Optional.empty","\android\webkit\SslErrorHandler.java"
"mPreloaded","false","false","true","true","false","boolean","null","[]","Optional.empty","\android\content\res\Resources.java"
"EMPTY_ARRAY","false","false","true","true","true","LongSparseArray<Object>","new LongSparseArray<Object>() {

    @Override
    public void put(long k, Object o) {
        throw new UnsupportedOperationException();
    }

    @Override
    public void append(long k, Object o) {
        throw new UnsupportedOperationException();
    }
}","[]","Optional.empty","\android\content\res\Resources.java"
"mCachedXmlBlockIds","false","false","true","false","true","int","{ 0, 0, 0, 0 }","[]","Optional.empty","\android\content\res\Resources.java"
"mPreloadedColorStateLists","false","false","true","true","true","SparseArray<ColorStateList>","new SparseArray<ColorStateList>()","[]","Optional.empty","\android\content\res\Resources.java"
"mSystem","false","false","true","true","false","Resources","null","[]","Optional.empty","\android\content\res\Resources.java"
"sSdkVersion","false","false","true","true","true","int","Build.VERSION.SDK_INT + (""REL"".equals(Build.VERSION.CODENAME) ? 0 : 1)","[]","Optional[// also allow the previous SDK version + 1.
]","\android\content\res\Resources.java"
"mLastCachedXmlBlockIndex","false","false","true","false","false","int","-1","[]","Optional.empty","\android\content\res\Resources.java"
"mMetrics","false","false","false","false","true","DisplayMetrics","new DisplayMetrics()","[]","Optional[/*package*/
]","\android\content\res\Resources.java"
"mSync","false","false","true","true","true","Object","new Object()","[]","Optional.empty","\android\content\res\Resources.java"
"sPreloadedDrawables","false","false","true","true","true","LongSparseArray<Drawable.ConstantState>","new LongSparseArray<Drawable.ConstantState>()","[]","Optional[// single-threaded, and after that these are immutable.
]","\android\content\res\Resources.java"
"mDefaultDisplay","false","false","true","false","false","Display","null","[]","Optional.empty","\android\content\res\Resources.java"
"mColorStateListCache","false","false","true","false","true","SparseArray<WeakReference<ColorStateList>>","new SparseArray<WeakReference<ColorStateList>>()","[]","Optional.empty","\android\content\res\Resources.java"
"DEBUG_CONFIG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\content\res\Resources.java"
"mAssets","false","false","true","false","true","AssetManager","null","[]","Optional.empty","\android\content\res\Resources.java"
"mTmpValue","false","false","false","false","true","TypedValue","new TypedValue()","[]","Optional[/*package*/
]","\android\content\res\Resources.java"
"mPreloading","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\content\res\Resources.java"
"TAG","false","false","false","true","true","String","""Resources""","[]","Optional.empty","\android\content\res\Resources.java"
"DEBUG_LOAD","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\content\res\Resources.java"
"mDrawableCache","false","false","true","false","true","LongSparseArray<WeakReference<Drawable.ConstantState>>","new LongSparseArray<WeakReference<Drawable.ConstantState>>()","[]","Optional[// These are protected by the mTmpValue lock.
]","\android\content\res\Resources.java"
"mTheme","false","false","true","false","true","int","null","[]","Optional.empty","\android\content\res\Resources.java"
"mCachedStyledAttributes","false","false","false","false","false","TypedArray","null","[]","Optional[/*package*/
]","\android\content\res\Resources.java"
"mPluralRule","false","false","false","false","false","PluralRules","null","[]","Optional.empty","\android\content\res\Resources.java"
"mCompatibilityInfo","false","false","true","false","false","CompatibilityInfo","null","[]","Optional.empty","\android\content\res\Resources.java"
"mConfiguration","false","false","true","false","true","Configuration","new Configuration()","[]","Optional.empty","\android\content\res\Resources.java"
"TRACE_FOR_PRELOAD","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\content\res\Resources.java"
"mCachedXmlBlocks","false","false","true","false","true","XmlBlock","new XmlBlock[4]","[]","Optional.empty","\android\content\res\Resources.java"
"mWebSearchActivity","false","false","true","false","false","ComponentName","null","[]","Optional.empty","\android\server\search\Searchables.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\server\search\Searchables.java"
"mSearchablesMap","false","false","true","false","false","HashMap<ComponentName,SearchableInfo>","null","[]","Optional.empty","\android\server\search\Searchables.java"
"ENHANCED_GOOGLE_SEARCH_COMPONENT_NAME","true","false","false","true","false","String","""com.google.android.providers.enhancedgooglesearch/.Launcher""","[]","Optional.empty","\android\server\search\Searchables.java"
"MD_LABEL_DEFAULT_SEARCHABLE","false","false","true","true","true","String","""android.app.default_searchable""","[]","Optional[// the current long wordy javadoc in SearchManager.java ?
]","\android\server\search\Searchables.java"
"MD_SEARCHABLE_SYSTEM_SEARCH","false","false","true","true","true","String","""*""","[]","Optional.empty","\android\server\search\Searchables.java"
"LOG_TAG","false","false","true","true","true","String","""Searchables""","[]","Optional.empty","\android\server\search\Searchables.java"
"mSearchablesInGlobalSearchList","false","false","true","false","false","ArrayList<SearchableInfo>","null","[]","Optional.empty","\android\server\search\Searchables.java"
"mSearchablesList","false","false","true","false","false","ArrayList<SearchableInfo>","null","[]","Optional.empty","\android\server\search\Searchables.java"
"mGlobalSearchActivity","false","false","true","false","false","ComponentName","null","[]","Optional.empty","\android\server\search\Searchables.java"
"GOOGLE_SEARCH_COMPONENT_NAME","true","false","false","true","false","String","""com.android.googlesearch/.GoogleSearch""","[]","Optional.empty","\android\server\search\Searchables.java"
"mLayoutResource","false","false","true","false","false","int","0","[]","Optional.empty","\android\view\ViewStub.java"
"mInflatedId","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\ViewStub.java"
"mInflateListener","false","false","true","false","false","OnInflateListener","null","[]","Optional.empty","\android\view\ViewStub.java"
"mInflatedViewRef","false","false","true","false","false","WeakReference<View>","null","[]","Optional.empty","\android\view\ViewStub.java"
"s","false","false","true","true","true","String","""Application did not close the cursor or database object "" + ""that was opened here""","[]","Optional.empty","\android\database\sqlite\DatabaseObjectNotClosedException.java"
"mColor","false","false","true","false","true","int","null","[]","Optional.empty","\android\text\style\ForegroundColorSpan.java"
"mQueue","false","false","false","false","true","MessageQueue","null","[]","Optional.empty","\android\os\Handler.java"
"mMessenger","false","false","false","false","false","IMessenger","null","[]","Optional.empty","\android\os\Handler.java"
"mLooper","false","false","false","false","true","Looper","null","[]","Optional.empty","\android\os\Handler.java"
"mCallback","false","false","false","false","true","Callback","null","[]","Optional.empty","\android\os\Handler.java"
"TAG","false","false","true","true","true","String","""Handler""","[]","Optional.empty","\android\os\Handler.java"
"FIND_POTENTIAL_LEAKS","false","false","true","true","true","boolean","false","[]","Optional[/*
     * Set this flag to true to detect anonymous, local or member classes
     * that extend this Handler class and that are not static. These kind
     * of classes can potentially create leaks.
     */
]","\android\os\Handler.java"
"TRANSPORT_OK","true","false","false","true","true","int","0","[]","Optional.empty","\com\android\internal\backup\BackupConstants.java"
"TRANSPORT_NOT_INITIALIZED","true","false","false","true","true","int","2","[]","Optional.empty","\com\android\internal\backup\BackupConstants.java"
"TRANSPORT_ERROR","true","false","false","true","true","int","1","[]","Optional.empty","\com\android\internal\backup\BackupConstants.java"
"mTarget","false","false","true","false","false","InputConnection","null","[]","Optional.empty","\android\view\inputmethod\InputConnectionWrapper.java"
"mMutable","false","false","false","false","true","boolean","null","[]","Optional.empty","\android\view\inputmethod\InputConnectionWrapper.java"
"HANDLE_PROVIDER_CHANGED","false","false","false","true","true","int","2","[]","Optional.empty","\android\appwidget\AppWidgetHost.java"
"mContext","false","false","false","false","false","Context","null","[]","Optional.empty","\android\appwidget\AppWidgetHost.java"
"sServiceLock","false","false","false","true","true","Object","new Object()","[]","Optional.empty","\android\appwidget\AppWidgetHost.java"
"mHostId","false","false","false","false","false","int","null","[]","Optional.empty","\android\appwidget\AppWidgetHost.java"
"mCallbacks","false","false","false","false","false","Callbacks","new Callbacks()","[]","Optional.empty","\android\appwidget\AppWidgetHost.java"
"mViews","false","false","false","false","true","HashMap<Integer,AppWidgetHostView>","new HashMap<Integer, AppWidgetHostView>()","[]","Optional.empty","\android\appwidget\AppWidgetHost.java"
"sService","false","false","false","true","false","IAppWidgetService","null","[]","Optional.empty","\android\appwidget\AppWidgetHost.java"
"mPackageName","false","false","false","false","false","String","null","[]","Optional.empty","\android\appwidget\AppWidgetHost.java"
"mHandler","false","false","false","false","false","Handler","null","[]","Optional.empty","\android\appwidget\AppWidgetHost.java"
"HANDLE_UPDATE","false","false","false","true","true","int","1","[]","Optional.empty","\android\appwidget\AppWidgetHost.java"
"mPrefGroups","false","false","true","false","false","String","null","[]","Optional.empty","\android\app\backup\SharedPreferencesBackupHelper.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\app\backup\SharedPreferencesBackupHelper.java"
"TAG","false","false","true","true","true","String","""SharedPreferencesBackupHelper""","[]","Optional.empty","\android\app\backup\SharedPreferencesBackupHelper.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\app\backup\SharedPreferencesBackupHelper.java"
"profileLayout","true","false","false","true","false","boolean","false","[@Debug.DebugProperty]","Optional[/**
 * Profiles layout times in the events log.
 *
 * @hide
 */
]","\android\view\ViewDebug.java"
"REMOTE_PROFILE","false","false","true","true","true","String","""PROFILE""","[]","Optional.empty","\android\view\ViewDebug.java"
"sRecyclerTracePrefix","false","false","true","true","false","String","null","[]","Optional.empty","\android\view\ViewDebug.java"
"sAnnotations","false","false","true","true","false","HashMap<AccessibleObject,ExportedProperty>","null","[]","Optional.empty","\android\view\ViewDebug.java"
"sFieldsForClasses","false","false","true","true","false","HashMap<Class<?>,Field[]>","null","[]","Optional.empty","\android\view\ViewDebug.java"
"view","true","false","false","false","false","int","null","[]","Optional.empty","\android\view\ViewDebug.java"
"REMOTE_COMMAND_CAPTURE","false","false","true","true","true","String","""CAPTURE""","[]","Optional.empty","\android\view\ViewDebug.java"
"profileDrawing","true","false","false","true","false","boolean","false","[@Debug.DebugProperty]","Optional[/**
 * Profiles drawing times in the events log.
 *
 * @hide
 */
]","\android\view\ViewDebug.java"
"CAPTURE_TIMEOUT","false","false","true","true","true","int","4000","[]","Optional[// Maximum delay in ms after which we stop trying to capture a View's drawing
]","\android\view\ViewDebug.java"
"REMOTE_COMMAND_REQUEST_LAYOUT","false","false","true","true","true","String","""REQUEST_LAYOUT""","[]","Optional.empty","\android\view\ViewDebug.java"
"SYSTEM_PROPERTY_CAPTURE_VIEW","false","false","false","true","true","String","""debug.captureview""","[]","Optional[/**
 * The system property of dynamic switch for capturing view information
 * when it is set, we dump interested fields and methods for the view on focus
 */
]","\android\view\ViewDebug.java"
"consistencyCheckEnabled","true","false","false","true","false","boolean","false","[@Debug.DebugProperty]","Optional[/**
 * <p>Enables or disables views consistency check. Even when this property is enabled,
 * view consistency checks happen only if {@link android.util.Config#DEBUG} is set
 * to true. The value of this property can be configured externally in one of the
 * following files:</p>
 * <ul>
 * <li>/system/debug.prop</li>
 * <li>/debug.prop</li>
 * <li>/data/debug.prop</li>
 * </ul>
 * @hide
 */
]","\android\view\ViewDebug.java"
"sMotionEventTracePrefix","false","false","true","true","false","String","null","[]","Optional.empty","\android\view\ViewDebug.java"
"sHierarchyTracePrefix","false","false","true","true","false","String","null","[]","Optional.empty","\android\view\ViewDebug.java"
"type","true","false","false","false","false","RecyclerTraceType","null","[]","Optional.empty","\android\view\ViewDebug.java"
"CONSISTENCY_LAYOUT","true","false","false","true","true","int","0x1","[]","Optional[/**
 * Flag indicating the consistency check should check layout-related properties.
 *
 * @hide
 */
]","\android\view\ViewDebug.java"
"CONSISTENCY_LOG_TAG","true","false","false","true","true","String","""ViewConsistency""","[]","Optional[/**
 * Log tag used to log errors related to the consistency of the view hierarchy.
 *
 * @hide
 */
]","\android\view\ViewDebug.java"
"sRecyclerViews","false","false","true","true","false","List<View>","null","[]","Optional.empty","\android\view\ViewDebug.java"
"indexOnScreen","true","false","false","false","false","int","null","[]","Optional.empty","\android\view\ViewDebug.java"
"REMOTE_COMMAND_DUMP","false","false","true","true","true","String","""DUMP""","[]","Optional.empty","\android\view\ViewDebug.java"
"SYSTEM_PROPERTY_CAPTURE_EVENT","false","false","false","true","true","String","""debug.captureevent""","[]","Optional[/**
 * The system property of dynamic switch for capturing event information
 * when it is set, we log key events, touch/motion and trackball events
 */
]","\android\view\ViewDebug.java"
"sMotionEventRoot","false","false","true","true","false","ViewRoot","null","[]","Optional.empty","\android\view\ViewDebug.java"
"TRACE_RECYCLER","true","false","false","true","true","boolean","false","[]","Optional[/**
 * Enables or disables view recycler tracing. Any invoker of
 * {@link #trace(View, android.view.ViewDebug.RecyclerTraceType, int[])} should first
 * check that this value is set to true as not to affect performance.
 */
]","\android\view\ViewDebug.java"
"TRACE_MOTION_EVENTS","true","false","false","true","true","boolean","false","[]","Optional[/**
 * Enables or disables motion events tracing. Any invoker of
 * {@link #trace(View, MotionEvent, MotionEventTraceType)} should first check
 * that this value is set to true as not to affect performance.
 *
 * @hide
 */
]","\android\view\ViewDebug.java"
"sRecyclerOwnerView","false","false","true","true","false","View","null","[]","Optional.empty","\android\view\ViewDebug.java"
"showFps","true","false","false","true","false","boolean","false","[@Debug.DebugProperty]","Optional[/**
 * Profiles real fps (times between draws) and displays the result.
 *
 * @hide
 */
]","\android\view\ViewDebug.java"
"sHierarchyTraces","false","false","true","true","false","BufferedWriter","null","[]","Optional.empty","\android\view\ViewDebug.java"
"CONSISTENCY_DRAWING","true","false","false","true","true","int","0x2","[]","Optional[/**
 * Flag indicating the consistency check should check drawing-related properties.
 *
 * @hide
 */
]","\android\view\ViewDebug.java"
"TRACE_HIERARCHY","true","false","false","true","true","boolean","false","[]","Optional[/**
 * Enables or disables view hierarchy tracing. Any invoker of
 * {@link #trace(View, android.view.ViewDebug.HierarchyTraceType)} should first
 * check that this value is set to true as not to affect performance.
 */
]","\android\view\ViewDebug.java"
"mCapturedViewMethodsForClasses","false","false","true","true","false","HashMap<Class<?>,Method[]>","null","[]","Optional.empty","\android\view\ViewDebug.java"
"position","true","false","false","false","false","int","null","[]","Optional.empty","\android\view\ViewDebug.java"
"sRecyclerTraces","false","false","true","true","false","List<RecyclerTrace>","null","[]","Optional.empty","\android\view\ViewDebug.java"
"REMOTE_COMMAND_CAPTURE_LAYERS","false","false","true","true","true","String","""CAPTURE_LAYERS""","[]","Optional.empty","\android\view\ViewDebug.java"
"mCapturedViewFieldsForClasses","false","false","true","true","false","HashMap<Class<?>,Field[]>","null","[]","Optional.empty","\android\view\ViewDebug.java"
"sHierarhcyRoot","false","false","true","true","false","ViewRoot","null","[]","Optional.empty","\android\view\ViewDebug.java"
"REMOTE_COMMAND_INVALIDATE","false","false","true","true","true","String","""INVALIDATE""","[]","Optional.empty","\android\view\ViewDebug.java"
"sMethodsForClasses","false","false","true","true","false","HashMap<Class<?>,Method[]>","null","[]","Optional.empty","\android\view\ViewDebug.java"
"sMotionEventTraces","false","false","true","true","false","BufferedWriter","null","[]","Optional.empty","\android\view\ViewDebug.java"
"mBuffer","false","false","true","false","true","int","null","[]","Optional.empty","\android\util\LogPrinter.java"
"mPriority","false","false","true","false","true","int","null","[]","Optional.empty","\android\util\LogPrinter.java"
"mTag","false","false","true","false","true","String","null","[]","Optional.empty","\android\util\LogPrinter.java"
"mLineNumber","false","false","true","false","false","int","null","[]","Optional.empty","\android\webkit\ConsoleMessage.java"
"mSourceId","false","false","true","false","false","String","null","[]","Optional.empty","\android\webkit\ConsoleMessage.java"
"mLevel","false","false","true","false","false","MessageLevel","null","[]","Optional.empty","\android\webkit\ConsoleMessage.java"
"mMessage","false","false","true","false","false","String","null","[]","Optional.empty","\android\webkit\ConsoleMessage.java"
"mAppObserver","false","false","false","false","true","RestoreObserver","null","[]","Optional.empty","\android\app\backup\RestoreSession.java"
"mContext","false","false","false","false","true","Context","null","[]","Optional.empty","\android\app\backup\RestoreSession.java"
"MSG_RESTORE_SETS_AVAILABLE","false","false","false","true","true","int","4","[]","Optional.empty","\android\app\backup\RestoreSession.java"
"MSG_RESTORE_FINISHED","false","false","false","true","true","int","3","[]","Optional.empty","\android\app\backup\RestoreSession.java"
"mBinder","false","false","false","false","false","IRestoreSession","null","[]","Optional.empty","\android\app\backup\RestoreSession.java"
"mHandler","false","false","false","false","true","Handler","null","[]","Optional.empty","\android\app\backup\RestoreSession.java"
"TAG","false","false","false","true","true","String","""RestoreSession""","[]","Optional.empty","\android\app\backup\RestoreSession.java"
"MSG_RESTORE_STARTING","false","false","false","true","true","int","1","[]","Optional.empty","\android\app\backup\RestoreSession.java"
"mObserver","false","false","false","false","false","RestoreObserverWrapper","null","[]","Optional.empty","\android\app\backup\RestoreSession.java"
"MSG_UPDATE","false","false","false","true","true","int","2","[]","Optional.empty","\android\app\backup\RestoreSession.java"
"CREATOR","true","false","false","true","true","Creator<ContentProviderOperation>","new Creator<ContentProviderOperation>() {

    public ContentProviderOperation createFromParcel(Parcel source) {
        return new ContentProviderOperation(source);
    }

    public ContentProviderOperation[] newArray(int size) {
        return new ContentProviderOperation[size];
    }
}","[]","Optional.empty","\android\content\ContentProviderOperation.java"
"mExpectedCount","false","false","true","false","false","Integer","null","[]","Optional.empty","\android\content\ContentProviderOperation.java"
"TYPE_DELETE","true","false","false","true","true","int","3","[]","Optional[/**
 * @hide exposed for unit tests
 */
]","\android\content\ContentProviderOperation.java"
"TYPE_INSERT","true","false","false","true","true","int","1","[]","Optional[/**
 * @hide exposed for unit tests
 */
]","\android\content\ContentProviderOperation.java"
"mValuesBackReferences","false","false","true","false","false","ContentValues","null","[]","Optional.empty","\android\content\ContentProviderOperation.java"
"TYPE_ASSERT","true","false","false","true","true","int","4","[]","Optional[/**
 * @hide exposed for unit tests
 */
]","\android\content\ContentProviderOperation.java"
"mSelectionArgsBackReferences","false","false","true","false","false","Map<Integer,Integer>","null","[]","Optional.empty","\android\content\ContentProviderOperation.java"
"mYieldAllowed","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\content\ContentProviderOperation.java"
"mType","false","false","true","false","true","int","null","[]","Optional.empty","\android\content\ContentProviderOperation.java"
"TAG","false","false","true","true","true","String","""ContentProviderOperation""","[]","Optional.empty","\android\content\ContentProviderOperation.java"
"mUri","false","false","true","false","true","Uri","null","[]","Optional.empty","\android\content\ContentProviderOperation.java"
"mValues","false","false","true","false","false","ContentValues","null","[]","Optional.empty","\android\content\ContentProviderOperation.java"
"TYPE_UPDATE","true","false","false","true","true","int","2","[]","Optional[/**
 * @hide exposed for unit tests
 */
]","\android\content\ContentProviderOperation.java"
"mSelectionArgs","false","false","true","false","false","String","null","[]","Optional.empty","\android\content\ContentProviderOperation.java"
"mSelection","false","false","true","false","false","String","null","[]","Optional.empty","\android\content\ContentProviderOperation.java"
"uppercaseAddon","false","false","false","true","true","char","'a' - 'A'","[]","Optional.empty","\android\net\http\CharArrayBuffers.java"
"mDecimal","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\text\method\DigitsKeyListener.java"
"mAccepted","false","false","true","false","false","char","null","[]","Optional.empty","\android\text\method\DigitsKeyListener.java"
"CHARACTERS","false","false","true","true","true","char","new char[][] { new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' }, new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-' }, new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.' }, new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '.' } }","[]","Optional[/**
 * The characters that are used.
 *
 * @see KeyEvent#getMatch
 * @see #getAcceptedChars
 */
]","\android\text\method\DigitsKeyListener.java"
"sInstance","false","false","true","true","false","DigitsKeyListener","new DigitsKeyListener[4]","[]","Optional.empty","\android\text\method\DigitsKeyListener.java"
"DECIMAL","false","false","true","true","true","int","2","[]","Optional.empty","\android\text\method\DigitsKeyListener.java"
"SIGN","false","false","true","true","true","int","1","[]","Optional.empty","\android\text\method\DigitsKeyListener.java"
"mSign","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\text\method\DigitsKeyListener.java"
"mInstance","false","false","true","true","false","DdmHandleNativeHeap","new DdmHandleNativeHeap()","[]","Optional.empty","\android\ddm\DdmHandleNativeHeap.java"
"CHUNK_NHGT","true","false","false","true","true","int","type(""NHGT"")","[]","Optional.empty","\android\ddm\DdmHandleNativeHeap.java"
"mQueue","false","false","false","false","true","MessageQueue","null","[]","Optional.empty","\android\os\Looper.java"
"mMainLooper","false","false","true","true","false","Looper","null","[]","Optional.empty","\android\os\Looper.java"
"mLogging","false","false","true","false","false","Printer","null","[]","Optional.empty","\android\os\Looper.java"
"mRun","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\os\Looper.java"
"sThreadLocal","false","false","true","true","true","ThreadLocal","new ThreadLocal()","[]","Optional[// sThreadLocal.get() will return null unless you've called prepare().
]","\android\os\Looper.java"
"mThread","false","false","false","false","false","Thread","null","[]","Optional.empty","\android\os\Looper.java"
"localLOGV","false","false","true","true","true","boolean","DEBUG ? Config.LOGD : Config.LOGV","[]","Optional.empty","\android\os\Looper.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\os\Looper.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<PackageInfoLite>","new Parcelable.Creator<PackageInfoLite>() {

    public PackageInfoLite createFromParcel(Parcel source) {
        return new PackageInfoLite(source);
    }

    public PackageInfoLite[] newArray(int size) {
        return new PackageInfoLite[size];
    }
}","[]","Optional.empty","\android\content\pm\PackageInfoLite.java"
"recommendedInstallLocation","true","false","false","false","false","int","null","[]","Optional[/**
 * Specifies the recommended install location. Can be one of
 * {@link #PackageHelper.RECOMMEND_INSTALL_INTERNAL} to install on internal storage
 * {@link #PackageHelper.RECOMMEND_INSTALL_EXTERNAL} to install on external media
 * {@link PackageHelper.RECOMMEND_FAILED_INSUFFICIENT_STORAGE} for storage errors
 * {@link PackageHelper.RECOMMEND_FAILED_INVALID_APK} for parse errors.
 */
]","\android\content\pm\PackageInfoLite.java"
"installLocation","true","false","false","false","false","int","null","[]","Optional.empty","\android\content\pm\PackageInfoLite.java"
"packageName","true","false","false","false","false","String","null","[]","Optional[/**
 * The name of this package.  From the &lt;manifest&gt; tag's ""name""
 * attribute.
 */
]","\android\content\pm\PackageInfoLite.java"
"CREATOR","true","false","false","true","true","Creator<SyncAdapterType>","new Creator<SyncAdapterType>() {

    public SyncAdapterType createFromParcel(Parcel source) {
        return new SyncAdapterType(source);
    }

    public SyncAdapterType[] newArray(int size) {
        return new SyncAdapterType[size];
    }
}","[]","Optional.empty","\android\content\SyncAdapterType.java"
"accountType","true","false","false","false","true","String","null","[]","Optional.empty","\android\content\SyncAdapterType.java"
"authority","true","false","false","false","true","String","null","[]","Optional.empty","\android\content\SyncAdapterType.java"
"supportsUploading","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\content\SyncAdapterType.java"
"isKey","true","false","false","false","true","boolean","null","[]","Optional.empty","\android\content\SyncAdapterType.java"
"userVisible","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\content\SyncAdapterType.java"
"mRequest","false","false","true","false","false","Request","null","[]","Optional[// requeued into the RequestFeeder.
]","\android\net\http\RequestQueue.java"
"mTotalConnection","false","false","true","false","false","int","null","[]","Optional.empty","\android\net\http\RequestQueue.java"
"CONNECTION_COUNT","false","false","true","true","true","int","4","[]","Optional[/* default simultaneous connection count */
]","\android\net\http\RequestQueue.java"
"mThreads","false","false","false","false","false","ConnectionThread","null","[]","Optional[/**
 * Threads used to process requests
 */
]","\android\net\http\RequestQueue.java"
"mIdleCache","false","false","false","false","false","IdleCache","null","[]","Optional.empty","\android\net\http\RequestQueue.java"
"mTotalRequest","false","false","true","false","false","int","null","[]","Optional.empty","\android\net\http\RequestQueue.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\android\net\http\RequestQueue.java"
"mActivePool","false","false","true","false","true","ActivePool","null","[]","Optional.empty","\android\net\http\RequestQueue.java"
"mConnectivityManager","false","false","true","false","true","ConnectivityManager","null","[]","Optional.empty","\android\net\http\RequestQueue.java"
"mPending","false","false","true","false","true","LinkedHashMap<HttpHost,LinkedList<Request>>","null","[]","Optional[/**
 * Requests, indexed by HttpHost (scheme, host, port)
 */
]","\android\net\http\RequestQueue.java"
"mProxyHost","false","false","true","false","false","HttpHost","null","[]","Optional.empty","\android\net\http\RequestQueue.java"
"mConnectionCount","false","false","true","false","false","int","null","[]","Optional.empty","\android\net\http\RequestQueue.java"
"mProxyChangeReceiver","false","false","true","false","false","BroadcastReceiver","null","[]","Optional.empty","\android\net\http\RequestQueue.java"
"mStyle","false","false","true","false","false","MetricAffectingSpan","null","[]","Optional.empty","\android\text\style\MetricAffectingSpan.java"
"WILD_CARD","true","false","false","true","true","int","new int[0]","[]","Optional.empty","\android\util\StateSet.java"
"SIGNATURES","false","false","true","true","true","Signature","new Signature[] { new Signature(SIGNATURE_1) }","[]","Optional.empty","\android\webkit\PluginManager.java"
"mInstance","false","false","true","true","false","PluginManager","null","[]","Optional.empty","\android\webkit\PluginManager.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\android\webkit\PluginManager.java"
"mPackageInfoCache","false","false","true","false","false","ArrayList<PackageInfo>","null","[]","Optional.empty","\android\webkit\PluginManager.java"
"PLUGIN_SYSTEM_LIB","false","false","true","true","true","String","""/system/lib/plugins/""","[]","Optional.empty","\android\webkit\PluginManager.java"
"PLUGIN_ACTION","true","false","false","true","true","String","""android.webkit.PLUGIN""","[@SdkConstant(SdkConstantType.SERVICE_ACTION)]","Optional[/**
 * Service Action: A plugin wishes to be loaded in the WebView must provide
 * {@link android.content.IntentFilter IntentFilter} that accepts this
 * action in their AndroidManifest.xml.
 * <p>
 * TODO: we may change this to a new PLUGIN_ACTION if this is going to be
 * public.
 */
]","\android\webkit\PluginManager.java"
"SIGNATURE_1","false","false","true","true","true","String","""308204c5308203ada003020102020900d7cb412f75f4887e300d06092a864886f70d010105050030819d310b3009060355040613025553311330110603550408130a43616c69666f726e69613111300f0603550407130853616e204a6f736531233021060355040a131a41646f62652053797374656d7320496e636f72706f7261746564311c301a060355040b1313496e666f726d6174696f6e2053797374656d73312330210603550403131a41646f62652053797374656d7320496e636f72706f7261746564301e170d3039313030313030323331345a170d3337303231363030323331345a30819d310b3009060355040613025553311330110603550408130a43616c69666f726e69613111300f0603550407130853616e204a6f736531233021060355040a131a41646f62652053797374656d7320496e636f72706f7261746564311c301a060355040b1313496e666f726d6174696f6e2053797374656d73312330210603550403131a41646f62652053797374656d7320496e636f72706f726174656430820120300d06092a864886f70d01010105000382010d0030820108028201010099724f3e05bbd78843794f357776e04b340e13cb1c9ccb3044865180d7d8fec8166c5bbd876da8b80aa71eb6ba3d4d3455c9a8de162d24a25c4c1cd04c9523affd06a279fc8f0d018f242486bdbb2dbfbf6fcb21ed567879091928b876f7ccebc7bccef157366ebe74e33ae1d7e9373091adab8327482154afc0693a549522f8c796dd84d16e24bb221f5dbb809ca56dd2b6e799c5fa06b6d9c5c09ada54ea4c5db1523a9794ed22a3889e5e05b29f8ee0a8d61efe07ae28f65dece2ff7edc5b1416d7c7aad7f0d35e8f4a4b964dbf50ae9aa6d620157770d974131b3e7e3abd6d163d65758e2f0822db9c88598b9db6263d963d13942c91fc5efe34fc1e06e3020103a382010630820102301d0603551d0e041604145af418e419a639e1657db960996364a37ef20d403081d20603551d230481ca3081c780145af418e419a639e1657db960996364a37ef20d40a181a3a481a030819d310b3009060355040613025553311330110603550408130a43616c69666f726e69613111300f0603550407130853616e204a6f736531233021060355040a131a41646f62652053797374656d7320496e636f72706f7261746564311c301a060355040b1313496e666f726d6174696f6e2053797374656d73312330210603550403131a41646f62652053797374656d7320496e636f72706f7261746564820900d7cb412f75f4887e300c0603551d13040530030101ff300d06092a864886f70d0101050500038201010076c2a11fe303359689c2ebc7b2c398eff8c3f9ad545cdbac75df63bf7b5395b6988d1842d6aa1556d595b5692e08224d667a4c9c438f05e74906c53dd8016dde7004068866f01846365efd146e9bfaa48c9ecf657f87b97c757da11f225c4a24177bf2d7188e6cce2a70a1e8a841a14471eb51457398b8a0addd8b6c8c1538ca8f1e40b4d8b960009ea22c188d28924813d2c0b4a4d334b7cf05507e1fcf0a06fe946c7ffc435e173af6fc3e3400643710acc806f830a14788291d46f2feed9fb5c70423ca747ed1572d752894ac1f19f93989766308579393fabb43649aa8806a313b1ab9a50922a44c2467b9062037f2da0d484d9ffd8fe628eeea629ba637""","[]","Optional[// inside the WebView process
]","\android\webkit\PluginManager.java"
"TYPE_NATIVE","false","false","true","true","true","String","""native""","[]","Optional.empty","\android\webkit\PluginManager.java"
"PLUGIN_TYPE","false","false","true","true","true","String","""type""","[]","Optional.empty","\android\webkit\PluginManager.java"
"PLUGIN_PERMISSION","true","false","false","true","true","String","""android.webkit.permission.PLUGIN""","[]","Optional[/**
 * A plugin wishes to be loaded in the WebView must provide this permission
 * in their AndroidManifest.xml.
 */
]","\android\webkit\PluginManager.java"
"LOGTAG","false","false","true","true","true","String","""PluginManager""","[]","Optional.empty","\android\webkit\PluginManager.java"
"HEX_DIGITS","false","false","true","true","true","char","{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' }","[]","Optional.empty","\com\android\internal\util\HexDump.java"
"BITMAP_RENDERING_WIDTH","false","false","true","true","true","int","2","[]","Optional.empty","\android\gesture\Gesture.java"
"mBoundingBox","false","false","true","false","true","RectF","new RectF()","[]","Optional.empty","\android\gesture\Gesture.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<Gesture>","new Parcelable.Creator<Gesture>() {

    public Gesture createFromParcel(Parcel in) {
        Gesture gesture = null;
        final long gestureID = in.readLong();
        final DataInputStream inStream = new DataInputStream(new ByteArrayInputStream(in.createByteArray()));
        try {
            gesture = deserialize(inStream);
        } catch (IOException e) {
            Log.e(GestureConstants.LOG_TAG, ""Error reading Gesture from parcel:"", e);
        } finally {
            GestureUtils.closeStream(inStream);
        }
        if (gesture != null) {
            gesture.mGestureID = gestureID;
        }
        return gesture;
    }

    public Gesture[] newArray(int size) {
        return new Gesture[size];
    }
}","[]","Optional.empty","\android\gesture\Gesture.java"
"mGestureID","false","false","true","false","false","long","null","[]","Optional[// the same as its instance ID
]","\android\gesture\Gesture.java"
"GESTURE_ID_BASE","false","false","true","true","true","long","System.currentTimeMillis()","[]","Optional.empty","\android\gesture\Gesture.java"
"sGestureCount","false","false","true","true","true","AtomicInteger","new AtomicInteger(0)","[]","Optional.empty","\android\gesture\Gesture.java"
"BITMAP_RENDERING_ANTIALIAS","false","false","true","true","true","boolean","true","[]","Optional.empty","\android\gesture\Gesture.java"
"BITMAP_RENDERING_DITHER","false","false","true","true","true","boolean","true","[]","Optional.empty","\android\gesture\Gesture.java"
"mStrokes","false","false","true","false","true","ArrayList<GestureStroke>","new ArrayList<GestureStroke>()","[]","Optional.empty","\android\gesture\Gesture.java"
"mSuspended","false","false","true","false","false","boolean","false","[]","Optional[/**
 * True if the connection is suspended pending the result of asking the
 * user about an error.
 */
]","\android\net\http\HttpsConnection.java"
"mAborted","false","false","true","false","false","boolean","false","[]","Optional[/**
 * True if the connection attempt should be aborted due to an ssl
 * error.
 */
]","\android\net\http\HttpsConnection.java"
"mSuspendLock","false","false","true","false","false","Object","new Object()","[]","Optional[/**
 * Object to wait on when suspending the SSL connection
 */
]","\android\net\http\HttpsConnection.java"
"mProxyHost","false","false","true","false","false","HttpHost","null","[]","Optional[// Used when connecting through a proxy.
]","\android\net\http\HttpsConnection.java"
"mSslSocketFactory","false","false","true","true","false","SSLSocketFactory","null","[]","Optional[/**
 * SSL socket factory
 */
]","\android\net\http\HttpsConnection.java"
"mIsVisibleInDownloadsUi","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\app\DownloadManager.java"
"ORDER_DESCENDING","true","false","false","true","true","int","2","[]","Optional[/**
 * Constant for use with {@link #orderBy}
 * @hide
 */
]","\android\app\DownloadManager.java"
"mShowNotification","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\app\DownloadManager.java"
"mDescription","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\app\DownloadManager.java"
"NETWORK_WIFI","true","false","false","true","true","int","1 << 1","[]","Optional[/**
 * Bit flag for {@link #setAllowedNetworkTypes} corresponding to
 * {@link ConnectivityManager#TYPE_WIFI}.
 */
]","\android\app\DownloadManager.java"
"ACTION_NOTIFICATION_CLICKED","true","false","false","true","true","String","""android.intent.action.DOWNLOAD_NOTIFICATION_CLICKED""","[]","Optional[/**
 * Broadcast intent action sent by the download manager when the user clicks on a running
 * download, either from a system notification or from the downloads UI.
 */
]","\android\app\DownloadManager.java"
"NETWORK_MOBILE","true","false","false","true","true","int","1 << 0","[]","Optional[/**
 * Bit flag for {@link #setAllowedNetworkTypes} corresponding to
 * {@link ConnectivityManager#TYPE_MOBILE}.
 */
]","\android\app\DownloadManager.java"
"COLUMN_LOCAL_URI","true","false","false","true","true","String","""local_uri""","[]","Optional[/**
 * Uri where downloaded file will be stored.  If a destination is supplied by client, that URI
 * will be used here.  Otherwise, the value will initially be null and will be filled in with a
 * generated URI once the download has started.
 */
]","\android\app\DownloadManager.java"
"LONG_COLUMNS","false","false","true","true","true","Set<String>","new HashSet<String>(Arrays.asList(COLUMN_ID, COLUMN_TOTAL_SIZE_BYTES, COLUMN_STATUS, COLUMN_REASON, COLUMN_BYTES_DOWNLOADED_SO_FAR, COLUMN_LAST_MODIFIED_TIMESTAMP))","[]","Optional.empty","\android\app\DownloadManager.java"
"COLUMN_TITLE","true","false","false","true","true","String","""title""","[]","Optional[/**
 * The client-supplied title for this download.  This will be displayed in system notifications.
 * Defaults to the empty string.
 */
]","\android\app\DownloadManager.java"
"STATUS_PENDING","true","false","false","true","true","int","1 << 0","[]","Optional[/**
 * Value of {@link #COLUMN_STATUS} when the download is waiting to start.
 */
]","\android\app\DownloadManager.java"
"ERROR_FILE_ERROR","true","false","false","true","true","int","1001","[]","Optional[/**
 * Value of {@link #COLUMN_REASON} when a storage issue arises which doesn't fit under any
 * other error code. Use the more specific {@link #ERROR_INSUFFICIENT_SPACE} and
 * {@link #ERROR_DEVICE_NOT_FOUND} when appropriate.
 */
]","\android\app\DownloadManager.java"
"mStatusFlags","false","false","true","false","false","Integer","null","[]","Optional.empty","\android\app\DownloadManager.java"
"COLUMN_ID","true","false","false","true","true","String","BaseColumns._ID","[]","Optional[/**
 * An identifier for a particular download, unique across the system.  Clients use this ID to
 * make subsequent calls related to the download.
 */
]","\android\app\DownloadManager.java"
"UNDERLYING_COLUMNS","false","false","true","true","true","String","new String[] { Downloads.Impl._ID, Downloads.Impl.COLUMN_MEDIAPROVIDER_URI, Downloads.COLUMN_TITLE, Downloads.COLUMN_DESCRIPTION, Downloads.COLUMN_URI, Downloads.COLUMN_MIME_TYPE, Downloads.COLUMN_TOTAL_BYTES, Downloads.COLUMN_STATUS, Downloads.COLUMN_CURRENT_BYTES, Downloads.COLUMN_LAST_MODIFICATION, Downloads.COLUMN_DESTINATION, Downloads.Impl.COLUMN_FILE_NAME_HINT, Downloads.Impl._DATA }","[]","Optional[// columns to request from DownloadProvider
]","\android\app\DownloadManager.java"
"COLUMN_BYTES_DOWNLOADED_SO_FAR","true","false","false","true","true","String","""bytes_so_far""","[]","Optional[/**
 * Number of bytes download so far.
 */
]","\android\app\DownloadManager.java"
"COLUMN_TOTAL_SIZE_BYTES","true","false","false","true","true","String","""total_size""","[]","Optional[/**
 * Total size of the download in bytes.  This will initially be -1 and will be filled in once
 * the download starts.
 */
]","\android\app\DownloadManager.java"
"mRequestHeaders","false","false","true","false","false","List<Pair<String,String>>","new ArrayList<Pair<String, String>>()","[]","Optional.empty","\android\app\DownloadManager.java"
"ERROR_UNKNOWN","true","false","false","true","true","int","1000","[]","Optional[/**
 * Value of COLUMN_ERROR_CODE when the download has completed with an error that doesn't fit
 * under any other error code.
 */
]","\android\app\DownloadManager.java"
"ERROR_CANNOT_RESUME","true","false","false","true","true","int","1008","[]","Optional[/**
 * Value of {@link #COLUMN_REASON} when some possibly transient error occurred but we can't
 * resume the download.
 */
]","\android\app\DownloadManager.java"
"ERROR_TOO_MANY_REDIRECTS","true","false","false","true","true","int","1005","[]","Optional[/**
 * Value of {@link #COLUMN_REASON} when there were too many redirects.
 */
]","\android\app\DownloadManager.java"
"COLUMNS","false","false","true","true","true","String","new String[] { COLUMN_ID, COLUMN_MEDIAPROVIDER_URI, COLUMN_TITLE, COLUMN_DESCRIPTION, COLUMN_URI, COLUMN_MEDIA_TYPE, COLUMN_TOTAL_SIZE_BYTES, COLUMN_LOCAL_URI, COLUMN_STATUS, COLUMN_REASON, COLUMN_BYTES_DOWNLOADED_SO_FAR, COLUMN_LAST_MODIFIED_TIMESTAMP }","[]","Optional[// this array must contain all public columns
]","\android\app\DownloadManager.java"
"mRoamingAllowed","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\app\DownloadManager.java"
"mOrderDirection","false","false","true","false","false","int","ORDER_DESCENDING","[]","Optional.empty","\android\app\DownloadManager.java"
"mOnlyIncludeVisibleInDownloadsUi","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\app\DownloadManager.java"
"PAUSED_UNKNOWN","true","false","false","true","true","int","4","[]","Optional[/**
 * Value of {@link #COLUMN_REASON} when the download is paused for some other reason.
 */
]","\android\app\DownloadManager.java"
"mMimeType","false","false","true","false","false","String","null","[]","Optional.empty","\android\app\DownloadManager.java"
"PAUSED_QUEUED_FOR_WIFI","true","false","false","true","true","int","3","[]","Optional[/**
 * Value of {@link #COLUMN_REASON} when the download exceeds a size limit for downloads over
 * the mobile network and the download manager is waiting for a Wi-Fi connection to proceed.
 */
]","\android\app\DownloadManager.java"
"ERROR_INSUFFICIENT_SPACE","true","false","false","true","true","int","1006","[]","Optional[/**
 * Value of {@link #COLUMN_REASON} when there was insufficient storage space. Typically,
 * this is because the SD card is full.
 */
]","\android\app\DownloadManager.java"
"EXTRA_DOWNLOAD_ID","true","false","false","true","true","String","""extra_download_id""","[]","Optional[/**
 * Intent extra included with {@link #ACTION_DOWNLOAD_COMPLETE} intents, indicating the ID (as a
 * long) of the download that just completed.
 */
]","\android\app\DownloadManager.java"
"ERROR_UNHANDLED_HTTP_CODE","true","false","false","true","true","int","1002","[]","Optional[/**
 * Value of {@link #COLUMN_REASON} when an HTTP code was received that download manager
 * can't handle.
 */
]","\android\app\DownloadManager.java"
"mResolver","false","false","true","false","false","ContentResolver","null","[]","Optional.empty","\android\app\DownloadManager.java"
"mIds","false","false","true","false","false","long","null","[]","Optional.empty","\android\app\DownloadManager.java"
"STATUS_RUNNING","true","false","false","true","true","int","1 << 1","[]","Optional[/**
 * Value of {@link #COLUMN_STATUS} when the download is currently running.
 */
]","\android\app\DownloadManager.java"
"mTitle","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\app\DownloadManager.java"
"PAUSED_WAITING_TO_RETRY","true","false","false","true","true","int","1","[]","Optional[/**
 * Value of {@link #COLUMN_REASON} when the download is paused because some network error
 * occurred and the download manager is waiting before retrying the request.
 */
]","\android\app\DownloadManager.java"
"COLUMN_MEDIAPROVIDER_URI","true","false","false","true","true","String","""mediaprovider_uri""","[]","Optional[/**
 * The URI to the corresponding entry in MediaProvider for this downloaded entry. It is
 * used to delete the entries from MediaProvider database when it is deleted from the
 * downloaded list.
 */
]","\android\app\DownloadManager.java"
"STATUS_PAUSED","true","false","false","true","true","int","1 << 2","[]","Optional[/**
 * Value of {@link #COLUMN_STATUS} when the download is waiting to retry or resume.
 */
]","\android\app\DownloadManager.java"
"mAllowedNetworkTypes","false","false","true","false","false","int","~0","[]","Optional[// default to all network types allowed
]","\android\app\DownloadManager.java"
"PAUSED_WAITING_FOR_NETWORK","true","false","false","true","true","int","2","[]","Optional[/**
 * Value of {@link #COLUMN_REASON} when the download is waiting for network connectivity to
 * proceed.
 */
]","\android\app\DownloadManager.java"
"mDestinationUri","false","false","true","false","false","Uri","null","[]","Optional.empty","\android\app\DownloadManager.java"
"ORDER_ASCENDING","true","false","false","true","true","int","1","[]","Optional[/**
 * Constant for use with {@link #orderBy}
 * @hide
 */
]","\android\app\DownloadManager.java"
"STATUS_FAILED","true","false","false","true","true","int","1 << 4","[]","Optional[/**
 * Value of {@link #COLUMN_STATUS} when the download has failed (and will not be retried).
 */
]","\android\app\DownloadManager.java"
"mPackageName","false","false","true","false","false","String","null","[]","Optional.empty","\android\app\DownloadManager.java"
"TAG","false","false","true","true","true","String","""DownloadManager""","[]","Optional.empty","\android\app\DownloadManager.java"
"ACTION_DOWNLOAD_COMPLETE","true","false","false","true","true","String","""android.intent.action.DOWNLOAD_COMPLETE""","[]","Optional[/**
 * Broadcast intent action sent by the download manager when a download completes.
 */
]","\android\app\DownloadManager.java"
"ERROR_HTTP_DATA_ERROR","true","false","false","true","true","int","1004","[]","Optional[/**
 * Value of {@link #COLUMN_REASON} when an error receiving or processing data occurred at
 * the HTTP level.
 */
]","\android\app\DownloadManager.java"
"mUri","false","false","true","false","false","Uri","null","[]","Optional.empty","\android\app\DownloadManager.java"
"COLUMN_REASON","true","false","false","true","true","String","""reason""","[]","Optional[/**
 * Provides more detail on the status of the download.  Its meaning depends on the value of
 * {@link #COLUMN_STATUS}.
 *
 * When {@link #COLUMN_STATUS} is {@link #STATUS_FAILED}, this indicates the type of error that
 * occurred.  If an HTTP error occurred, this will hold the HTTP status code as defined in RFC
 * 2616.  Otherwise, it will hold one of the ERROR_* constants.
 *
 * When {@link #COLUMN_STATUS} is {@link #STATUS_PAUSED}, this indicates why the download is
 * paused.  It will hold one of the PAUSED_* constants.
 *
 * If {@link #COLUMN_STATUS} is neither {@link #STATUS_FAILED} nor {@link #STATUS_PAUSED}, this
 * column's value is undefined.
 *
 * @see <a href=""http://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html#sec6.1.1"">RFC 2616
 * status codes</a>
 */
]","\android\app\DownloadManager.java"
"STATUS_SUCCESSFUL","true","false","false","true","true","int","1 << 3","[]","Optional[/**
 * Value of {@link #COLUMN_STATUS} when the download has successfully completed.
 */
]","\android\app\DownloadManager.java"
"ERROR_FILE_ALREADY_EXISTS","true","false","false","true","true","int","1009","[]","Optional[/**
 * Value of {@link #COLUMN_REASON} when the requested destination file already exists (the
 * download manager will not overwrite an existing file).
 */
]","\android\app\DownloadManager.java"
"COLUMN_LAST_MODIFIED_TIMESTAMP","true","false","false","true","true","String","""last_modified_timestamp""","[]","Optional[/**
 * Timestamp when the download was last modified, in {@link System#currentTimeMillis
 * System.currentTimeMillis()} (wall clock time in UTC).
 */
]","\android\app\DownloadManager.java"
"COLUMN_URI","true","false","false","true","true","String","""uri""","[]","Optional[/**
 * URI to be downloaded.
 */
]","\android\app\DownloadManager.java"
"COLUMN_STATUS","true","false","false","true","true","String","""status""","[]","Optional[/**
 * Current status of the download, as one of the STATUS_* constants.
 */
]","\android\app\DownloadManager.java"
"COLUMN_MEDIA_TYPE","true","false","false","true","true","String","""media_type""","[]","Optional[/**
 * Internet Media Type of the downloaded file.  If no value is provided upon creation, this will
 * initially be null and will be filled in based on the server's response once the download has
 * started.
 *
 * @see <a href=""http://www.ietf.org/rfc/rfc1590.txt"">RFC 1590, defining Media Types</a>
 */
]","\android\app\DownloadManager.java"
"COLUMN_DESCRIPTION","true","false","false","true","true","String","""description""","[]","Optional[/**
 * The client-supplied description of this download.  This will be displayed in system
 * notifications.  Defaults to the empty string.
 */
]","\android\app\DownloadManager.java"
"mOrderByColumn","false","false","true","false","false","String","Downloads.COLUMN_LAST_MODIFICATION","[]","Optional.empty","\android\app\DownloadManager.java"
"ACTION_VIEW_DOWNLOADS","true","false","false","true","true","String","""android.intent.action.VIEW_DOWNLOADS""","[]","Optional[/**
 * Intent action to launch an activity to display all downloads.
 */
]","\android\app\DownloadManager.java"
"mBaseUri","false","false","true","false","false","Uri","null","[]","Optional.empty","\android\app\DownloadManager.java"
"ERROR_DEVICE_NOT_FOUND","true","false","false","true","true","int","1007","[]","Optional[/**
 * Value of {@link #COLUMN_REASON} when no external storage device was found. Typically,
 * this is because the SD card is not mounted.
 */
]","\android\app\DownloadManager.java"
"mContentType","false","false","true","false","false","String","null","[]","Optional.empty","\android\webkit\ContentLoader.java"
"mUrl","false","false","true","false","false","String","null","[]","Optional.empty","\android\webkit\ContentLoader.java"
"PROT_READ","false","false","true","true","true","int","0x1","[]","Optional[// mmap(2) protection flags from <sys/mman.h>
]","\android\os\MemoryFile.java"
"mLength","false","false","true","false","false","int","null","[]","Optional[// total length of our ashmem region
]","\android\os\MemoryFile.java"
"mAllowPurging","false","false","true","false","false","boolean","false","[]","Optional[// true if our ashmem region is unpinned
]","\android\os\MemoryFile.java"
"mOwnsRegion","false","false","true","false","true","boolean","null","[]","Optional[// false if this is a ref to an existing ashmem region
]","\android\os\MemoryFile.java"
"mMark","false","false","true","false","false","int","0","[]","Optional.empty","\android\os\MemoryFile.java"
"PROT_WRITE","false","false","true","true","true","int","0x2","[]","Optional.empty","\android\os\MemoryFile.java"
"mSingleByte","false","false","true","false","false","byte","null","[]","Optional.empty","\android\os\MemoryFile.java"
"mAddress","false","false","true","false","false","int","null","[]","Optional[// address of ashmem memory
]","\android\os\MemoryFile.java"
"TAG","false","false","true","true","false","String","""MemoryFile""","[]","Optional.empty","\android\os\MemoryFile.java"
"mOffset","false","false","true","false","false","int","0","[]","Optional.empty","\android\os\MemoryFile.java"
"mFD","false","false","true","false","false","FileDescriptor","null","[]","Optional[// ashmem file descriptor
]","\android\os\MemoryFile.java"
"score","true","false","false","false","false","double","null","[]","Optional.empty","\android\gesture\Prediction.java"
"name","true","false","false","false","true","String","null","[]","Optional.empty","\android\gesture\Prediction.java"
"STATE_VISIBLE","false","false","true","true","true","int","2","[]","Optional[// Scroll thumb visible and moving along with the scrollbar
]","\android\widget\FastScroller.java"
"mOverlaySize","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\FastScroller.java"
"ALPHA_MAX","false","false","false","true","true","int","208","[]","Optional.empty","\android\widget\FastScroller.java"
"mThumbDrawable","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\FastScroller.java"
"mVisibleItem","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\FastScroller.java"
"mListAdapter","false","false","true","false","false","BaseAdapter","null","[]","Optional.empty","\android\widget\FastScroller.java"
"FADE_DURATION","false","false","false","true","true","long","200","[]","Optional.empty","\android\widget\FastScroller.java"
"mItemCount","false","false","true","false","false","int","-1","[]","Optional.empty","\android\widget\FastScroller.java"
"mDrawOverlay","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\FastScroller.java"
"mScrollCompleted","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\FastScroller.java"
"mList","false","false","true","false","false","AbsListView","null","[]","Optional.empty","\android\widget\FastScroller.java"
"mThumbH","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\FastScroller.java"
"mSections","false","false","true","false","false","Object","null","[]","Optional.empty","\android\widget\FastScroller.java"
"mState","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\FastScroller.java"
"mFadeDuration","false","false","false","false","false","long","null","[]","Optional.empty","\android\widget\FastScroller.java"
"STATE_ENTER","false","false","true","true","true","int","1","[]","Optional[// Not implemented yet - fade-in transition
]","\android\widget\FastScroller.java"
"mOverlayDrawable","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\FastScroller.java"
"mScrollFade","false","false","true","false","false","ScrollFade","null","[]","Optional.empty","\android\widget\FastScroller.java"
"STATE_EXIT","false","false","true","true","true","int","4","[]","Optional[// Scroll thumb fading out due to inactivity timeout
]","\android\widget\FastScroller.java"
"mThumbW","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\FastScroller.java"
"mChangedBounds","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\FastScroller.java"
"mListOffset","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\FastScroller.java"
"mSectionText","false","false","true","false","false","String","null","[]","Optional.empty","\android\widget\FastScroller.java"
"mThumbY","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\FastScroller.java"
"STATE_NONE","false","false","true","true","true","int","0","[]","Optional[// Scroll thumb not showing
]","\android\widget\FastScroller.java"
"mPaint","false","false","true","false","false","Paint","null","[]","Optional.empty","\android\widget\FastScroller.java"
"mHandler","false","false","true","false","false","Handler","new Handler()","[]","Optional.empty","\android\widget\FastScroller.java"
"mLongList","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\FastScroller.java"
"STATE_DRAGGING","false","false","true","true","true","int","3","[]","Optional[// Scroll thumb being dragged by user
]","\android\widget\FastScroller.java"
"mStartTime","false","false","false","false","false","long","null","[]","Optional.empty","\android\widget\FastScroller.java"
"MIN_PAGES","false","false","true","true","false","int","4","[]","Optional[// Minimum number of pages to justify showing a fast scroll thumb
]","\android\widget\FastScroller.java"
"mSectionIndexer","false","false","true","false","false","SectionIndexer","null","[]","Optional.empty","\android\widget\FastScroller.java"
"mOverlayPos","false","false","true","false","false","RectF","null","[]","Optional.empty","\android\widget\FastScroller.java"
"CERT","false","false","false","true","true","String","Credentials.CERTIFICATE","[]","Optional.empty","\android\webkit\CertTool.java"
"MD5_WITH_RSA","false","false","true","true","true","AlgorithmIdentifier","new AlgorithmIdentifier(PKCSObjectIdentifiers.md5WithRSAEncryption)","[]","Optional.empty","\android\webkit\CertTool.java"
"PKCS12","false","false","false","true","true","String","Credentials.PKCS12","[]","Optional.empty","\android\webkit\CertTool.java"
"LOGTAG","false","false","true","true","true","String","""CertTool""","[]","Optional.empty","\android\webkit\CertTool.java"
"mTextAppearanceContext","false","false","true","false","false","Context","null","[]","Optional.empty","\com\android\internal\view\menu\IconMenuItemView.java"
"NO_ALPHA","false","false","true","true","true","int","0xFF","[]","Optional.empty","\com\android\internal\view\menu\IconMenuItemView.java"
"mIconMenuView","false","false","true","false","false","IconMenuView","null","[]","Optional.empty","\com\android\internal\view\menu\IconMenuItemView.java"
"mShortcutCaption","false","false","true","false","false","String","null","[]","Optional.empty","\com\android\internal\view\menu\IconMenuItemView.java"
"mTextAppearance","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\view\menu\IconMenuItemView.java"
"mShortcutCaptionMode","false","false","true","false","false","boolean","null","[]","Optional.empty","\com\android\internal\view\menu\IconMenuItemView.java"
"mIcon","false","false","true","false","false","Drawable","null","[]","Optional.empty","\com\android\internal\view\menu\IconMenuItemView.java"
"mItemInvoker","false","false","true","false","false","ItemInvoker","null","[]","Optional.empty","\com\android\internal\view\menu\IconMenuItemView.java"
"mPositionIconAvailable","false","false","true","false","false","Rect","new Rect()","[]","Optional.empty","\com\android\internal\view\menu\IconMenuItemView.java"
"mPositionIconOutput","false","false","true","false","false","Rect","new Rect()","[]","Optional.empty","\com\android\internal\view\menu\IconMenuItemView.java"
"mDisabledAlpha","false","false","true","false","false","float","null","[]","Optional.empty","\com\android\internal\view\menu\IconMenuItemView.java"
"mItemData","false","false","true","false","false","MenuItemImpl","null","[]","Optional.empty","\com\android\internal\view\menu\IconMenuItemView.java"
"sPrependShortcutLabel","false","false","true","true","false","String","null","[]","Optional.empty","\com\android\internal\view\menu\IconMenuItemView.java"
"mCurrentIndex","false","false","true","false","false","int","null","[]","Optional[// Current position in the list.
]","\android\webkit\WebBackForwardList.java"
"mArray","false","false","true","false","false","ArrayList<WebHistoryItem>","null","[]","Optional[// ArrayList of WebHistoryItems for maintaining our copy.
]","\android\webkit\WebBackForwardList.java"
"mClearPending","false","false","true","false","false","boolean","null","[]","Optional[// Flag to indicate that the list is invalid
]","\android\webkit\WebBackForwardList.java"
"mCallbackProxy","false","false","true","false","true","CallbackProxy","null","[]","Optional[// CallbackProxy to issue client callbacks.
]","\android\webkit\WebBackForwardList.java"
"mDispatcher","false","false","false","false","false","BackupHelperDispatcher","new BackupHelperDispatcher()","[]","Optional.empty","\android\app\backup\BackupAgentHelper.java"
"TAG","false","false","false","true","true","String","""BackupAgentHelper""","[]","Optional.empty","\android\app\backup\BackupAgentHelper.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<IntentSender>","new Parcelable.Creator<IntentSender>() {

    public IntentSender createFromParcel(Parcel in) {
        IBinder target = in.readStrongBinder();
        return target != null ? new IntentSender(target) : null;
    }

    public IntentSender[] newArray(int size) {
        return new IntentSender[size];
    }
}","[]","Optional.empty","\android\content\IntentSender.java"
"mWho","false","false","true","false","true","OnFinished","null","[]","Optional.empty","\android\content\IntentSender.java"
"mIntentSender","false","false","true","false","true","IntentSender","null","[]","Optional.empty","\android\content\IntentSender.java"
"mTarget","false","false","true","false","true","IIntentSender","null","[]","Optional.empty","\android\content\IntentSender.java"
"mResultExtras","false","false","true","false","false","Bundle","null","[]","Optional.empty","\android\content\IntentSender.java"
"mHandler","false","false","true","false","true","Handler","null","[]","Optional.empty","\android\content\IntentSender.java"
"mResultData","false","false","true","false","false","String","null","[]","Optional.empty","\android\content\IntentSender.java"
"mIntent","false","false","true","false","false","Intent","null","[]","Optional.empty","\android\content\IntentSender.java"
"mResultCode","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\IntentSender.java"
"sComparator","false","false","true","true","true","Comparator<Prediction>","new Comparator<Prediction>() {

    public int compare(Prediction object1, Prediction object2) {
        double score1 = object1.score;
        double score2 = object2.score;
        if (score1 > score2) {
            return -1;
        } else if (score1 < score2) {
            return 1;
        } else {
            return 0;
        }
    }
}","[]","Optional.empty","\android\gesture\InstanceLearner.java"
"BUCKET_DISPLAY_NAME","true","false","false","true","true","String","""bucket_display_name""","[]","Optional[/**
 * The bucket display name of the video. This is a read-only property that
 * is automatically computed from the DATA column.
 * <P>Type: TEXT</P>
 */
]","\android\provider\MediaStore.java"
"EXTRA_MEDIA_ARTIST","true","false","false","true","true","String","""android.intent.extra.artist""","[]","Optional[/**
 * The name of the Intent-extra used to define the artist
 */
]","\android\provider\MediaStore.java"
"BUCKET_ID","true","false","false","true","true","String","""bucket_id""","[]","Optional[/**
 * The bucket id of the video. This is a read-only property that
 * is automatically computed from the DATA column.
 * <P>Type: TEXT</P>
 */
]","\android\provider\MediaStore.java"
"YEAR","true","false","false","true","true","String","""year""","[]","Optional[/**
 * The year the audio file was recorded, if any
 * <P>Type: INTEGER</P>
 */
]","\android\provider\MediaStore.java"
"CONTENT_TYPE","true","false","false","true","true","String","""vnd.android.cursor.dir/video""","[]","Optional[/**
 * The MIME type for this table.
 */
]","\android\provider\MediaStore.java"
"sThumbBufLock","false","false","true","true","true","Object","new Object()","[]","Optional.empty","\android\provider\MediaStore.java"
"SIZE","true","false","false","true","true","String","""_size""","[]","Optional[/**
 * The size of the file in bytes
 * <P>Type: INTEGER (long)</P>
 */
]","\android\provider\MediaStore.java"
"NUMBER_OF_SONGS","true","false","false","true","true","String","""numsongs""","[]","Optional[/**
 * The number of songs on this album
 * <P>Type: INTEGER</P>
 */
]","\android\provider\MediaStore.java"
"RECORD_SOUND_ACTION","true","false","false","true","true","String","""android.provider.MediaStore.RECORD_SOUND""","[]","Optional[/**
 * Activity Action: Start SoundRecorder application.
 * <p>Input: nothing.
 * <p>Output: An uri to the recorded sound stored in the Media Library
 * if the recording was successful.
 * May also contain the extra EXTRA_MAX_BYTES.
 * @see #EXTRA_MAX_BYTES
 */
]","\android\provider\MediaStore.java"
"DISPLAY_NAME","true","false","false","true","true","String","""_display_name""","[]","Optional[/**
 * The display name of the file
 * <P>Type: TEXT</P>
 */
]","\android\provider\MediaStore.java"
"VIDEO_ID","true","false","false","true","true","String","""video_id""","[]","Optional[/**
 * The original image for the thumbnal
 * <P>Type: INTEGER (ID from Video table)</P>
 */
]","\android\provider\MediaStore.java"
"TAGS","true","false","false","true","true","String","""tags""","[]","Optional[/**
 * The user-added tags associated with a video
 * <P>Type: TEXT</P>
 */
]","\android\provider\MediaStore.java"
"GENRE_ID","true","false","false","true","true","String","""genre_id""","[]","Optional[/**
 * The ID of the genre
 * <P>Type: INTEGER (long)</P>
 */
]","\android\provider\MediaStore.java"
"INTENT_ACTION_MEDIA_SEARCH","true","false","false","true","true","String","""android.intent.action.MEDIA_SEARCH""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Perform a search for media.
 * Contains at least the {@link android.app.SearchManager#QUERY} extra.
 * May also contain any combination of the following extras:
 * EXTRA_MEDIA_ARTIST, EXTRA_MEDIA_ALBUM, EXTRA_MEDIA_TITLE, EXTRA_MEDIA_FOCUS
 *
 * @see android.provider.MediaStore#EXTRA_MEDIA_ARTIST
 * @see android.provider.MediaStore#EXTRA_MEDIA_ALBUM
 * @see android.provider.MediaStore#EXTRA_MEDIA_TITLE
 * @see android.provider.MediaStore#EXTRA_MEDIA_FOCUS
 */
]","\android\provider\MediaStore.java"
"IS_RINGTONE","true","false","false","true","true","String","""is_ringtone""","[]","Optional[/**
 * Non-zero id the audio file may be a ringtone
 * <P>Type: INTEGER (boolean)</P>
 */
]","\android\provider\MediaStore.java"
"MIME_TYPE","true","false","false","true","true","String","""mime_type""","[]","Optional[/**
 * The MIME type of the file
 * <P>Type: TEXT</P>
 */
]","\android\provider\MediaStore.java"
"DESCRIPTION","true","false","false","true","true","String","""description""","[]","Optional[/**
 * The description of the video recording
 * <P>Type: TEXT</P>
 */
]","\android\provider\MediaStore.java"
"DEFAULT_GROUP_ID","false","false","false","true","true","int","0","[]","Optional.empty","\android\provider\MediaStore.java"
"EXTRA_MEDIA_TITLE","true","false","false","true","true","String","""android.intent.extra.title""","[]","Optional[/**
 * The name of the Intent-extra used to define the song title
 */
]","\android\provider\MediaStore.java"
"ALBUM_ARTIST","true","false","false","true","true","String","""album_artist""","[]","Optional[/**
 * The artist credited for the album that contains the audio file
 * <P>Type: TEXT</P>
 * @hide
 */
]","\android\provider\MediaStore.java"
"EXTRA_SCREEN_ORIENTATION","true","false","false","true","true","String","""android.intent.extra.screenOrientation""","[]","Optional[/**
 * The name of the Intent-extra used to control the orientation of a ViewImage or a MovieView.
 * This is an int property that overrides the activity's requestedOrientation.
 * @see android.content.pm.ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED
 */
]","\android\provider\MediaStore.java"
"EXTRA_FULL_SCREEN","true","false","false","true","true","String","""android.intent.extra.fullScreen""","[]","Optional[/**
 * The name of an Intent-extra used to control the UI of a ViewImage.
 * This is a boolean property that overrides the activity's default fullscreen state.
 */
]","\android\provider\MediaStore.java"
"UNKNOWN_STRING","true","false","false","true","true","String","""<unknown>""","[]","Optional[/**
 * The string that is used when a media attribute is not known. For example,
 * if an audio file does not have any meta data, the artist and album columns
 * will be set to this value.
 */
]","\android\provider\MediaStore.java"
"PLAY_ORDER","true","false","false","true","true","String","""play_order""","[]","Optional[/**
 * The order of the songs in the playlist
 * <P>Type: INTEGER (long)></P>
 */
]","\android\provider\MediaStore.java"
"DURATION","true","false","false","true","true","String","""duration""","[]","Optional[/**
 * The duration of the video file, in ms
 * <P>Type: INTEGER (long)</P>
 */
]","\android\provider\MediaStore.java"
"PICASA_ID","true","false","false","true","true","String","""picasa_id""","[]","Optional[/**
 * The picasa id of the image
 * <P>Type: TEXT</P>
 */
]","\android\provider\MediaStore.java"
"IS_PODCAST","true","false","false","true","true","String","""is_podcast""","[]","Optional[/**
 * Non-zero if the audio file is a podcast
 * <P>Type: INTEGER (boolean)</P>
 */
]","\android\provider\MediaStore.java"
"AUDIO_ID","true","false","false","true","true","String","""audio_id""","[]","Optional[/**
 * The ID of the audio file
 * <P>Type: INTEGER (long)</P>
 */
]","\android\provider\MediaStore.java"
"MINI_THUMB_MAGIC","true","false","false","true","true","String","""mini_thumb_magic""","[]","Optional[/**
 * The mini thumb id.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\MediaStore.java"
"EXTRA_DURATION_LIMIT","true","false","false","true","true","String","""android.intent.extra.durationLimit""","[]","Optional[/**
 * Specify the maximum allowed recording duration in seconds.
 */
]","\android\provider\MediaStore.java"
"MEDIA_SCANNER_VOLUME","true","false","false","true","true","String","""volume""","[]","Optional[/**
 * Name of current volume being scanned by the media scanner.
 */
]","\android\provider\MediaStore.java"
"NAME","true","false","false","true","true","String","""name""","[]","Optional[/**
 * The name of the playlist
 * <P>Type: TEXT</P>
 */
]","\android\provider\MediaStore.java"
"LATITUDE","true","false","false","true","true","String","""latitude""","[]","Optional[/**
 * The latitude where the image was captured.
 * <P>Type: DOUBLE</P>
 */
]","\android\provider\MediaStore.java"
"INTENT_ACTION_MUSIC_PLAYER","true","false","false","true","true","String","""android.intent.action.MUSIC_PLAYER""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Launch a music player.
 * The activity should be able to play, browse, or manipulate music files stored on the device.
 */
]","\android\provider\MediaStore.java"
"THUMB_DATA","true","false","false","true","true","String","""thumb_data""","[]","Optional[/**
 * The blob raw data of thumbnail
 * <P>Type: DATA STREAM</P>
 */
]","\android\provider\MediaStore.java"
"NUMBER_OF_SONGS_FOR_ARTIST","true","false","false","true","true","String","""numsongs_by_artist""","[]","Optional[/**
 * This column is available when getting album info via artist,
 * and indicates the number of songs on the album by the given
 * artist.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\MediaStore.java"
"ARTIST","true","false","false","true","true","String","""artist""","[]","Optional[/**
 * The artist who created the video file, if any
 * <P>Type: TEXT</P>
 */
]","\android\provider\MediaStore.java"
"INTENT_ACTION_STILL_IMAGE_CAMERA","true","false","false","true","true","String","""android.media.action.STILL_IMAGE_CAMERA""","[]","Optional[/**
 * The name of the Intent action used to launch a camera in still image mode.
 */
]","\android\provider\MediaStore.java"
"INTENT_ACTION_VIDEO_CAMERA","true","false","false","true","true","String","""android.media.action.VIDEO_CAMERA""","[]","Optional[/**
 * The name of the Intent action used to launch a camera in video mode.
 */
]","\android\provider\MediaStore.java"
"IS_MUSIC","true","false","false","true","true","String","""is_music""","[]","Optional[/**
 * Non-zero if the audio file is music
 * <P>Type: INTEGER (boolean)</P>
 */
]","\android\provider\MediaStore.java"
"IS_PRIVATE","true","false","false","true","true","String","""isprivate""","[]","Optional[/**
 * Whether the video should be published as public or private
 * <P>Type: INTEGER</P>
 */
]","\android\provider\MediaStore.java"
"ALBUM_ID","true","false","false","true","true","String","""album_id""","[]","Optional[/**
 * The id for the album
 * <P>Type: INTEGER</P>
 */
]","\android\provider\MediaStore.java"
"EXTRA_OUTPUT","true","false","false","true","true","String","""output""","[]","Optional[/**
 * The name of the Intent-extra used to indicate a content resolver Uri to be used to
 * store the requested image or video.
 */
]","\android\provider\MediaStore.java"
"ACTION_IMAGE_CAPTURE","true","false","false","true","true","String","""android.media.action.IMAGE_CAPTURE""","[]","Optional[/**
 * Standard Intent action that can be sent to have the camera application
 * capture an image and return it.
 * <p>
 * The caller may pass an extra EXTRA_OUTPUT to control where this image will be written.
 * If the EXTRA_OUTPUT is not present, then a small sized image is returned as a Bitmap
 * object in the extra field. This is useful for applications that only need a small image.
 * If the EXTRA_OUTPUT is present, then the full-sized image will be written to the Uri
 * value of EXTRA_OUTPUT.
 * @see #EXTRA_OUTPUT
 * @see #EXTRA_VIDEO_QUALITY
 */
]","\android\provider\MediaStore.java"
"TITLE","true","false","false","true","true","String","""title""","[]","Optional[/**
 * The title of the content
 * <P>Type: TEXT</P>
 */
]","\android\provider\MediaStore.java"
"EXTRA_FINISH_ON_COMPLETION","true","false","false","true","true","String","""android.intent.extra.finishOnCompletion""","[]","Optional[/**
 * The name of the Intent-extra used to control the onCompletion behavior of a MovieView.
 * This is a boolean property that specifies whether or not to finish the MovieView activity
 * when the movie completes playing. The default value is true, which means to automatically
 * exit the movie player activity when the movie completes playing.
 */
]","\android\provider\MediaStore.java"
"BOOKMARK","true","false","false","true","true","String","""bookmark""","[]","Optional[/**
 * The bookmark for the video. Time in ms. Represents the location in the video that the
 * video should start playing at the next time it is opened. If the value is null or
 * out of the range 0..DURATION-1 then the video should start playing from the
 * beginning.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\MediaStore.java"
"EXTRA_MEDIA_FOCUS","true","false","false","true","true","String","""android.intent.extra.focus""","[]","Optional[/**
 * The name of the Intent-extra used to define the search focus. The search focus
 * indicates whether the search should be for things related to the artist, album
 * or song that is identified by the other extras.
 */
]","\android\provider\MediaStore.java"
"DATE_MODIFIED","true","false","false","true","true","String","""date_modified""","[]","Optional[/**
 * The time the file was last modified
 * Units are seconds since 1970.
 * NOTE: This is for internal use by the media scanner.  Do not modify this field.
 * <P>Type: INTEGER (long)</P>
 */
]","\android\provider\MediaStore.java"
"LANGUAGE","true","false","false","true","true","String","""language""","[]","Optional[/**
 * The language of the video
 * <P>Type: TEXT</P>
 */
]","\android\provider\MediaStore.java"
"DEFAULT_SORT_ORDER","true","false","false","true","true","String","""video_id ASC""","[]","Optional[/**
 * The default sort order for this table
 */
]","\android\provider\MediaStore.java"
"EXTRA_SHOW_ACTION_ICONS","true","false","false","true","true","String","""android.intent.extra.showActionIcons""","[]","Optional[/**
 * The name of an Intent-extra used to control the UI of a ViewImage.
 * This is a boolean property that specifies whether or not to show action icons.
 */
]","\android\provider\MediaStore.java"
"RESOLUTION","true","false","false","true","true","String","""resolution""","[]","Optional[/**
 * The resolution of the video file, formatted as ""XxY""
 * <P>Type: TEXT</P>
 */
]","\android\provider\MediaStore.java"
"COMPILATION","true","false","false","true","true","String","""compilation""","[]","Optional[/**
 * Whether the song is part of a compilation
 * <P>Type: TEXT</P>
 * @hide
 */
]","\android\provider\MediaStore.java"
"EXTRA_MEDIA_ALBUM","true","false","false","true","true","String","""android.intent.extra.album""","[]","Optional[/**
 * The name of the Intent-extra used to define the album
 */
]","\android\provider\MediaStore.java"
"AUTHORITY","true","false","false","true","true","String","""media""","[]","Optional.empty","\android\provider\MediaStore.java"
"ACTION_VIDEO_CAPTURE","true","false","false","true","true","String","""android.media.action.VIDEO_CAPTURE""","[]","Optional[/**
 * Standard Intent action that can be sent to have the camera application
 * capture an video and return it.
 * <p>
 * The caller may pass in an extra EXTRA_VIDEO_QUALITY to control the video quality.
 * <p>
 * The caller may pass in an extra EXTRA_OUTPUT to control
 * where the video is written. If EXTRA_OUTPUT is not present the video will be
 * written to the standard location for videos, and the Uri of that location will be
 * returned in the data field of the Uri.
 * @see #EXTRA_OUTPUT
 */
]","\android\provider\MediaStore.java"
"EXTERNAL_CONTENT_URI","true","false","false","true","true","Uri","getContentUri(""external"")","[]","Optional[/**
 * The content:// style URI for the ""primary"" external storage
 * volume.
 */
]","\android\provider\MediaStore.java"
"PROJECTION","false","false","true","true","true","String","new String[] { _ID, MediaColumns.DATA }","[]","Optional.empty","\android\provider\MediaStore.java"
"ORIENTATION","true","false","false","true","true","String","""orientation""","[]","Optional[/**
 * The orientation for the image expressed as degrees.
 * Only degrees 0, 90, 180, 270 will work.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\MediaStore.java"
"MICRO_KIND","true","false","false","true","true","int","3","[]","Optional.empty","\android\provider\MediaStore.java"
"PLAYLIST_ID","true","false","false","true","true","String","""playlist_id""","[]","Optional[/**
 * The ID of the playlist
 * <P>Type: INTEGER (long)</P>
 */
]","\android\provider\MediaStore.java"
"NUMBER_OF_TRACKS","true","false","false","true","true","String","""number_of_tracks""","[]","Optional[/**
 * The number of albums in the database for this artist
 */
]","\android\provider\MediaStore.java"
"FULL_SCREEN_KIND","true","false","false","true","true","int","2","[]","Optional.empty","\android\provider\MediaStore.java"
"ARTIST_ID","true","false","false","true","true","String","""artist_id""","[]","Optional[/**
 * The id of the artist who created the audio file, if any
 * <P>Type: INTEGER (long)</P>
 */
]","\android\provider\MediaStore.java"
"ENTRY_CONTENT_TYPE","true","false","false","true","true","String","""vnd.android.cursor.item/album""","[]","Optional[/**
 * The MIME type for entries in this table.
 */
]","\android\provider\MediaStore.java"
"ALBUM_KEY","true","false","false","true","true","String","""album_key""","[]","Optional[/**
 * A non human readable key calculated from the ALBUM, used for
 * searching, sorting and grouping
 * <P>Type: TEXT</P>
 */
]","\android\provider\MediaStore.java"
"INTERNAL_CONTENT_URI","true","false","false","true","true","Uri","getContentUri(""internal"")","[]","Optional[/**
 * The content:// style URI for the internal storage.
 */
]","\android\provider\MediaStore.java"
"WIDTH","true","false","false","true","true","String","""width""","[]","Optional[/**
 * The width of the thumbnal
 * <P>Type: INTEGER (long)</P>
 */
]","\android\provider\MediaStore.java"
"NUMBER_OF_ALBUMS","true","false","false","true","true","String","""number_of_albums""","[]","Optional[/**
 * The number of albums in the database for this artist
 */
]","\android\provider\MediaStore.java"
"IS_NOTIFICATION","true","false","false","true","true","String","""is_notification""","[]","Optional[/**
 * Non-zero id the audio file may be a notification sound
 * <P>Type: INTEGER (boolean)</P>
 */
]","\android\provider\MediaStore.java"
"CATEGORY","true","false","false","true","true","String","""category""","[]","Optional[/**
 * The YouTube category of the video
 * <P>Type: TEXT</P>
 */
]","\android\provider\MediaStore.java"
"ALBUM_ART","true","false","false","true","true","String","""album_art""","[]","Optional[/**
 * Cached album art.
 * <P>Type: TEXT</P>
 */
]","\android\provider\MediaStore.java"
"TITLE_KEY","true","false","false","true","true","String","""title_key""","[]","Optional[/**
 * A non human readable key calculated from the TITLE, used for
 * searching, sorting and grouping
 * <P>Type: TEXT</P>
 */
]","\android\provider\MediaStore.java"
"EXTRA_MAX_BYTES","true","false","false","true","true","String","""android.provider.MediaStore.extra.MAX_BYTES""","[]","Optional[/**
 * The name of the Intent-extra used to define a maximum file size for
 * a recording made by the SoundRecorder application.
 *
 * @see #RECORD_SOUND_ACTION
 */
]","\android\provider\MediaStore.java"
"CONTENT_DIRECTORY","true","false","false","true","true","String","""members""","[]","Optional[/**
 * A subdirectory of each playlist containing all member audio
 * files.
 */
]","\android\provider\MediaStore.java"
"IS_ALARM","true","false","false","true","true","String","""is_alarm""","[]","Optional[/**
 * Non-zero id the audio file may be an alarm
 * <P>Type: INTEGER (boolean)</P>
 */
]","\android\provider\MediaStore.java"
"TAG","false","false","true","true","true","String","""MediaStore""","[]","Optional.empty","\android\provider\MediaStore.java"
"DATE_TAKEN","true","false","false","true","true","String","""datetaken""","[]","Optional[/**
 * The date & time that the image was taken in units
 * of milliseconds since jan 1, 1970.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\MediaStore.java"
"MEDIA_IGNORE_FILENAME","true","false","false","true","true","String",""".nomedia""","[]","Optional[/**
 * Name of the file signaling the media scanner to ignore media in the containing directory
 * and its subdirectories. Developers should use this to avoid application graphics showing
 * up in the Gallery and likewise prevent application sounds and music from showing up in
 * the Music app.
 */
]","\android\provider\MediaStore.java"
"CONTENT_AUTHORITY_SLASH","false","false","true","true","true","String","""content://"" + AUTHORITY + ""/""","[]","Optional.empty","\android\provider\MediaStore.java"
"INTENT_ACTION_MEDIA_PLAY_FROM_SEARCH","true","false","false","true","true","String","""android.media.action.MEDIA_PLAY_FROM_SEARCH""","[]","Optional[/**
 * An intent to perform a search for music media and automatically play content from the
 * result when possible. This can be fired, for example, by the result of a voice recognition
 * command to listen to music.
 * <p>
 * Contains the {@link android.app.SearchManager#QUERY} extra, which is a string
 * that can contain any type of unstructured music search, like the name of an artist,
 * an album, a song, a genre, or any combination of these.
 * <p>
 * Because this intent includes an open-ended unstructured search string, it makes the most
 * sense for apps that can support large-scale search of music, such as services connected
 * to an online database of music which can be streamed and played on the device.
 */
]","\android\provider\MediaStore.java"
"FIRST_YEAR","true","false","false","true","true","String","""minyear""","[]","Optional[/**
 * The year in which the earliest songs
 * on this album were released. This will often
 * be the same as {@link #LAST_YEAR}, but for compilation albums
 * they might differ.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\MediaStore.java"
"LAST_YEAR","true","false","false","true","true","String","""maxyear""","[]","Optional[/**
 * The year in which the latest songs
 * on this album were released. This will often
 * be the same as {@link #FIRST_YEAR}, but for compilation albums
 * they might differ.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\MediaStore.java"
"MINI_KIND","true","false","false","true","true","int","1","[]","Optional.empty","\android\provider\MediaStore.java"
"DATE_ADDED","true","false","false","true","true","String","""date_added""","[]","Optional[/**
 * The time the file was added to the media provider
 * Units are seconds since 1970.
 * <P>Type: INTEGER (long)</P>
 */
]","\android\provider\MediaStore.java"
"sThumbBuf","false","false","true","true","false","byte","null","[]","Optional.empty","\android\provider\MediaStore.java"
"DATA","true","false","false","true","true","String","""_data""","[]","Optional[/**
 * The data stream for the thumbnail
 * <P>Type: DATA STREAM</P>
 */
]","\android\provider\MediaStore.java"
"KIND","true","false","false","true","true","String","""kind""","[]","Optional[/**
 * The kind of the thumbnail
 * <P>Type: INTEGER (One of the values below)</P>
 */
]","\android\provider\MediaStore.java"
"_ID","true","false","false","true","true","String","""_id""","[]","Optional[/**
 * The ID within the playlist.
 */
]","\android\provider\MediaStore.java"
"LONGITUDE","true","false","false","true","true","String","""longitude""","[]","Optional[/**
 * The longitude where the image was captured.
 * <P>Type: DOUBLE</P>
 */
]","\android\provider\MediaStore.java"
"COMPOSER","true","false","false","true","true","String","""composer""","[]","Optional[/**
 * The composer of the audio file, if any
 * <P>Type: TEXT</P>
 */
]","\android\provider\MediaStore.java"
"ARTIST_KEY","true","false","false","true","true","String","""artist_key""","[]","Optional[/**
 * A non human readable key calculated from the ARTIST, used for
 * searching, sorting and grouping
 * <P>Type: TEXT</P>
 */
]","\android\provider\MediaStore.java"
"EXTRA_VIDEO_QUALITY","true","false","false","true","true","String","""android.intent.extra.videoQuality""","[]","Optional[/**
 * The name of the Intent-extra used to control the quality of a recorded video. This is an
 * integer property. Currently value 0 means low quality, suitable for MMS messages, and
 * value 1 means high quality. In the future other quality levels may be added.
 */
]","\android\provider\MediaStore.java"
"EXTRA_SIZE_LIMIT","true","false","false","true","true","String","""android.intent.extra.sizeLimit""","[]","Optional[/**
 * Specify the maximum allowed size.
 */
]","\android\provider\MediaStore.java"
"HEIGHT","true","false","false","true","true","String","""height""","[]","Optional[/**
 * The height of the thumbnail
 * <P>Type: INTEGER (long)</P>
 */
]","\android\provider\MediaStore.java"
"TRACK","true","false","false","true","true","String","""track""","[]","Optional[/**
 * The track number of this song on the album, if any.
 * This number encodes both the track number and the
 * disc number. For multi-disc sets, this number will
 * be 1xxx for tracks on the first disc, 2xxx for tracks
 * on the second disc, etc.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\MediaStore.java"
"IMAGE_ID","true","false","false","true","true","String","""image_id""","[]","Optional[/**
 * The original image for the thumbnal
 * <P>Type: INTEGER (ID from Images table)</P>
 */
]","\android\provider\MediaStore.java"
"ALBUM","true","false","false","true","true","String","""album""","[]","Optional[/**
 * The album the video file is from, if any
 * <P>Type: TEXT</P>
 */
]","\android\provider\MediaStore.java"
"JS_UNLOAD","false","false","true","true","true","int","115","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"PAGE_FINISHED","false","false","true","true","true","int","121","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"PAGE_STARTED","false","false","true","true","true","int","100","[]","Optional[// Message Ids
]","\android\webkit\CallbackProxy.java"
"mWebCoreIdleTime","false","false","true","false","false","long","null","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"RECEIVED_CERTIFICATE","false","false","true","true","true","int","124","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"ADD_HISTORY_ITEM","false","false","true","true","true","int","135","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"JS_TIMEOUT","false","false","true","true","true","int","128","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"RECEIVED_TOUCH_ICON_URL","false","false","true","true","true","int","132","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"GEOLOCATION_PERMISSIONS_SHOW_PROMPT","false","false","true","true","true","int","130","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional[// Used to call startActivity during url override.
]","\android\webkit\CallbackProxy.java"
"mWebChromeClient","false","false","true","false","false","WebChromeClient","null","[]","Optional[// Instance of WebChromeClient for handling all chrome functions.
]","\android\webkit\CallbackProxy.java"
"GEOLOCATION_PERMISSIONS_HIDE_PROMPT","false","false","true","true","true","int","131","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"mLatestProgress","false","false","true","false","false","int","100","[]","Optional[// Start with 100 to indicate it is not in load for the empty page.
]","\android\webkit\CallbackProxy.java"
"OVERRIDE_URL","false","false","true","true","true","int","103","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"mProgressUpdatePending","false","false","true","false","false","boolean","null","[]","Optional[// Keep track of multiple progress updates.
]","\android\webkit\CallbackProxy.java"
"RESEND_POST_DATA","false","false","true","true","true","int","120","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"NOTIFY","false","false","true","true","true","int","200","[]","Optional[// Message triggered by the client to resume execution
]","\android\webkit\CallbackProxy.java"
"AUTH_REQUEST","false","false","true","true","true","int","104","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"PROGRESS","false","false","true","true","true","int","106","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"SAVE_PASSWORD","false","false","true","true","true","int","111","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"JS_CONFIRM","false","false","true","true","true","int","113","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"RECEIVED_ICON","false","false","true","true","true","int","101","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"GET_VISITED_HISTORY","false","false","true","true","true","int","133","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"UPDATE_VISITED","false","false","true","true","true","int","107","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"AUTH_CREDENTIALS","false","false","true","true","true","int","137","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"CREATE_WINDOW","false","false","true","true","true","int","109","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"ASYNC_KEYEVENTS","false","false","true","true","true","int","116","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"EXCEEDED_DATABASE_QUOTA","false","false","true","true","true","int","126","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"LOAD_RESOURCE","false","false","true","true","true","int","108","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"REPORT_ERROR","false","false","true","true","true","int","119","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"SSL_ERROR","false","false","true","true","true","int","105","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"mResult","false","false","true","false","false","E","null","[]","Optional[// Private result object
]","\android\webkit\CallbackProxy.java"
"JS_ALERT","false","false","true","true","true","int","112","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"REQUEST_FOCUS","false","false","true","true","true","int","122","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"REACHED_APPCACHE_MAXSIZE","false","false","true","true","true","int","127","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"RECEIVED_TITLE","false","false","true","true","true","int","102","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"mWebViewClient","false","false","true","false","false","WebViewClient","null","[]","Optional[// Instance of WebViewClient that is the client callback.
]","\android\webkit\CallbackProxy.java"
"JS_PROMPT","false","false","true","true","true","int","114","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"HISTORY_INDEX_CHANGED","false","false","true","true","true","int","136","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"PERF_PROBE","false","false","true","true","true","boolean","false","[]","Optional[// Performance probe
]","\android\webkit\CallbackProxy.java"
"OPEN_FILE_CHOOSER","false","false","true","true","true","int","134","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"SWITCH_OUT_HISTORY","false","false","true","true","true","int","125","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"DOWNLOAD_FILE","false","false","true","true","true","int","118","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"mDownloadListener","false","false","true","false","false","DownloadListener","null","[]","Optional[// Client registered callback listener for download events
]","\android\webkit\CallbackProxy.java"
"mWebCoreThreadTime","false","false","true","false","false","long","null","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"mWebBackForwardListClient","false","false","true","false","false","WebBackForwardListClient","null","[]","Optional[// Back/Forward list client
]","\android\webkit\CallbackProxy.java"
"CLOSE_WINDOW","false","false","true","true","true","int","110","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"SCALE_CHANGED","false","false","true","true","true","int","123","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"ADD_MESSAGE_TO_CONSOLE","false","false","true","true","true","int","129","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"mWebView","false","false","true","false","true","WebView","null","[]","Optional[// Instance of WebView for handling UI requests.
]","\android\webkit\CallbackProxy.java"
"mValue","false","false","true","false","false","Uri","null","[]","Optional.empty","\android\webkit\CallbackProxy.java"
"LOGTAG","false","false","true","true","true","String","""CallbackProxy""","[]","Optional[// Logging tag
]","\android\webkit\CallbackProxy.java"
"mBackForwardList","false","false","true","false","true","WebBackForwardList","null","[]","Optional[// Back/Forward list
]","\android\webkit\CallbackProxy.java"
"BUFFER_SIZE","false","false","true","true","true","int","2048","[]","Optional.empty","\android\util\Base64InputStream.java"
"inputBuffer","false","false","true","false","false","byte","null","[]","Optional.empty","\android\util\Base64InputStream.java"
"EMPTY","false","false","true","true","false","byte","new byte[0]","[]","Optional.empty","\android\util\Base64InputStream.java"
"eof","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\util\Base64InputStream.java"
"coder","false","false","true","false","true","Base64.Coder","null","[]","Optional.empty","\android\util\Base64InputStream.java"
"outputEnd","false","false","true","false","false","int","null","[]","Optional.empty","\android\util\Base64InputStream.java"
"outputStart","false","false","true","false","false","int","null","[]","Optional.empty","\android\util\Base64InputStream.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<PatternMatcher>","new Parcelable.Creator<PatternMatcher>() {

    public PatternMatcher createFromParcel(Parcel source) {
        return new PatternMatcher(source);
    }

    public PatternMatcher[] newArray(int size) {
        return new PatternMatcher[size];
    }
}","[]","Optional.empty","\android\os\PatternMatcher.java"
"mPattern","false","false","true","false","true","String","null","[]","Optional.empty","\android\os\PatternMatcher.java"
"PATTERN_PREFIX","true","false","false","true","true","int","1","[]","Optional[/**
 * Pattern type: the given pattern must match the
 * beginning of the string it is tested against.
 */
]","\android\os\PatternMatcher.java"
"PATTERN_SIMPLE_GLOB","true","false","false","true","true","int","2","[]","Optional[/**
 * Pattern type: the given pattern is interpreted with a
 * simple glob syntax for matching against the string it is tested against.
 * In this syntax, you can use the '*' character to match against zero or
 * more occurrences of the character immediately before.  If the
 * character before it is '.' it will match any character.  The character
 * '\' can be used as an escape.  This essentially provides only the '*'
 * wildcard part of a normal regexp.
 */
]","\android\os\PatternMatcher.java"
"mType","false","false","true","false","true","int","null","[]","Optional.empty","\android\os\PatternMatcher.java"
"PATTERN_LITERAL","true","false","false","true","true","int","0","[]","Optional[/**
 * Pattern type: the given pattern must exactly match the string it is
 * tested against.
 */
]","\android\os\PatternMatcher.java"
"mApplication","false","false","true","false","false","Application","null","[]","Optional.empty","\android\app\Activity.java"
"mDialog","false","false","false","false","false","Dialog","null","[]","Optional.empty","\android\app\Activity.java"
"mSearchManager","false","false","true","false","false","SearchManager","null","[]","Optional.empty","\android\app\Activity.java"
"FOCUSED_STATE_SET","false","true","false","true","true","int","{ com.android.internal.R.attr.state_focused }","[]","Optional.empty","\android\app\Activity.java"
"mConfigChangeFlags","false","false","false","false","false","int","null","[]","Optional[/*package*/
]","\android\app\Activity.java"
"RESULT_CANCELED","true","false","false","true","true","int","0","[]","Optional[/**
 * Standard activity result: operation canceled.
 */
]","\android\app\Activity.java"
"mComponent","false","false","true","false","false","ComponentName","null","[]","Optional.empty","\android\app\Activity.java"
"DEFAULT_KEYS_SEARCH_GLOBAL","true","false","false","true","true","int","4","[]","Optional[/**
 * Use with {@link #setDefaultKeyMode} to specify that unhandled keystrokes
 * will start a global search (typically web search, but some platforms may define alternate
 * methods for global search)
 *
 * <p>See {@link android.app.SearchManager android.app.SearchManager} for more details.
 *
 * @see #setDefaultKeyMode
 */
]","\android\app\Activity.java"
"SAVED_DIALOG_IDS_KEY","false","false","true","true","true","String","""android:savedDialogIds""","[]","Optional.empty","\android\app\Activity.java"
"mLastNonConfigurationInstance","false","false","false","false","false","Object","null","[]","Optional[/*package*/
]","\android\app\Activity.java"
"mStartedActivity","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\app\Activity.java"
"mManagedDialogs","false","false","true","false","false","SparseArray<ManagedDialog>","null","[]","Optional.empty","\android\app\Activity.java"
"DEFAULT_KEYS_SHORTCUT","true","false","false","true","true","int","2","[]","Optional[/**
 * Use with {@link #setDefaultKeyMode} to execute a menu shortcut in
 * default key handling.
 *
 * <p>That is, the user does not need to hold down the menu key to execute menu shortcuts.
 *
 * @see #setDefaultKeyMode
 */
]","\android\app\Activity.java"
"RESULT_OK","true","false","false","true","true","int","-1","[]","Optional[/**
 * Standard activity result: operation succeeded.
 */
]","\android\app\Activity.java"
"DEFAULT_KEYS_DISABLE","true","false","false","true","true","int","0","[]","Optional[/**
 * Use with {@link #setDefaultKeyMode} to turn off default handling of
 * keys.
 *
 * @see #setDefaultKeyMode
 */
]","\android\app\Activity.java"
"mManagedCursors","false","false","true","false","true","ArrayList<ManagedCursor>","new ArrayList<ManagedCursor>()","[]","Optional.empty","\android\app\Activity.java"
"mWindowAdded","false","false","false","false","false","boolean","false","[]","Optional[/*package*/
]","\android\app\Activity.java"
"mWindow","false","false","true","false","false","Window","null","[]","Optional.empty","\android\app\Activity.java"
"mTitleColor","false","false","true","false","false","int","0","[]","Optional.empty","\android\app\Activity.java"
"mEmbeddedID","false","false","false","false","false","String","null","[]","Optional[/*package*/
]","\android\app\Activity.java"
"mReleased","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\app\Activity.java"
"mArgs","false","false","false","false","false","Bundle","null","[]","Optional.empty","\android\app\Activity.java"
"SAVED_DIALOG_KEY_PREFIX","false","false","true","true","true","String","""android:dialog_""","[]","Optional.empty","\android\app\Activity.java"
"mWindowManager","false","false","true","false","false","WindowManager","null","[]","Optional.empty","\android\app\Activity.java"
"mDecor","false","false","false","false","false","View","null","[]","Optional[/*package*/
]","\android\app\Activity.java"
"mCursor","false","false","true","false","true","Cursor","null","[]","Optional.empty","\android\app\Activity.java"
"WINDOW_HIERARCHY_TAG","false","false","true","true","true","String","""android:viewHierarchyState""","[]","Optional.empty","\android\app\Activity.java"
"mResumed","false","false","false","false","false","boolean","null","[]","Optional[/*package*/
]","\android\app\Activity.java"
"mFinished","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\app\Activity.java"
"mLastNonConfigurationChildInstances","false","false","false","false","false","HashMap<String,Object>","null","[]","Optional[/*package*/
]","\android\app\Activity.java"
"mTitle","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\app\Activity.java"
"DEFAULT_KEYS_DIALER","true","false","false","true","true","int","1","[]","Optional[/**
 * Use with {@link #setDefaultKeyMode} to launch the dialer during default
 * key handling.
 *
 * @see #setDefaultKeyMode
 */
]","\android\app\Activity.java"
"mToken","false","false","true","false","false","IBinder","null","[]","Optional.empty","\android\app\Activity.java"
"SAVED_DIALOGS_TAG","false","false","true","true","true","String","""android:savedDialogs""","[]","Optional.empty","\android\app\Activity.java"
"mParent","false","false","false","false","false","Activity","null","[]","Optional.empty","\android\app\Activity.java"
"mInstrumentation","false","false","true","false","false","Instrumentation","null","[]","Optional[// set by the thread after the constructor and before onCreate(Bundle savedInstanceState) is called.
]","\android\app\Activity.java"
"mDefaultKeyMode","false","false","true","false","false","int","DEFAULT_KEYS_DISABLE","[]","Optional.empty","\android\app\Activity.java"
"mStopped","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\app\Activity.java"
"mHandler","false","false","true","false","true","Handler","new Handler()","[]","Optional.empty","\android\app\Activity.java"
"TAG","false","false","true","true","true","String","""Activity""","[]","Optional.empty","\android\app\Activity.java"
"mCurrentConfig","false","false","false","false","false","Configuration","null","[]","Optional[/*package*/
]","\android\app\Activity.java"
"mMainThread","false","false","false","false","false","ActivityThread","null","[]","Optional[/*package*/
]","\android\app\Activity.java"
"sInstanceCount","false","false","true","true","false","long","0","[]","Optional.empty","\android\app\Activity.java"
"mUpdated","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\app\Activity.java"
"mResultData","false","false","false","false","false","Intent","null","[]","Optional.empty","\android\app\Activity.java"
"mCalled","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\app\Activity.java"
"mIdent","false","false","true","false","false","int","null","[]","Optional.empty","\android\app\Activity.java"
"mIntent","false","false","false","false","false","Intent","null","[]","Optional[/*package*/
]","\android\app\Activity.java"
"mVisibleFromClient","false","false","false","false","false","boolean","true","[]","Optional[/*package*/
]","\android\app\Activity.java"
"DEFAULT_KEYS_SEARCH_LOCAL","true","false","false","true","true","int","3","[]","Optional[/**
 * Use with {@link #setDefaultKeyMode} to specify that unhandled keystrokes
 * will start an application-defined search.  (If the application or activity does not
 * actually define a search, the the keys will be ignored.)
 *
 * <p>See {@link android.app.SearchManager android.app.SearchManager} for more details.
 *
 * @see #setDefaultKeyMode
 */
]","\android\app\Activity.java"
"mTitleReady","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\app\Activity.java"
"SAVED_DIALOG_ARGS_KEY_PREFIX","false","false","true","true","true","String","""android:dialog_args_""","[]","Optional.empty","\android\app\Activity.java"
"mVisibleFromServer","false","false","false","false","false","boolean","false","[]","Optional[/*package*/
]","\android\app\Activity.java"
"mActivityInfo","false","false","false","false","false","ActivityInfo","null","[]","Optional[/*package*/
]","\android\app\Activity.java"
"mUiThread","false","false","true","false","false","Thread","null","[]","Optional.empty","\android\app\Activity.java"
"RESULT_FIRST_USER","true","false","false","true","true","int","1","[]","Optional[/**
 * Start of user-defined activity results.
 */
]","\android\app\Activity.java"
"mResultCode","false","false","false","false","false","int","RESULT_CANCELED","[]","Optional[// protected by synchronized (this)
]","\android\app\Activity.java"
"mDefaultKeySsb","false","false","true","false","false","SpannableStringBuilder","null","[]","Optional.empty","\android\app\Activity.java"
"FLAG_REFRAIN_IMAGE_EXPORT","true","false","false","true","true","int","0x00800000","[]","Optional.empty","\android\pim\vcard\VCardConfig.java"
"FLAG_USE_ANDROID_PROPERTY","false","false","true","true","true","int","0x80000000","[]","Optional[/**
 * <p>
 * The flag indicating the vCard composer will add some ""X-"" properties used only in Android
 * when the formal vCard specification does not have appropriate fields for that data.
 * </p>
 * <p>
 * For example, Android accepts nickname information while vCard 2.1 does not.
 * When this flag is on, vCard composer emits alternative ""X-"" property (like ""X-NICKNAME"")
 * instead of just dropping it.
 * </p>
 * <p>
 * vCard parser code automatically parses the field emitted even when this flag is off.
 * </p>
 */
]","\android\pim\vcard\VCardConfig.java"
"FLAG_TORELATE_NEST","true","false","false","true","true","int","0x01000000","[]","Optional[/**
 * <p>
 * For importer only. Ignored in exporter.
 * </p>
 * <p>
 * The flag indicating the parser should handle a nested vCard, in which vCard clause starts
 * in another vCard clause. Here's a typical example.
 * </p>
 * <pre class=""prettyprint"">BEGIN:VCARD
 * BEGIN:VCARD
 * VERSION:2.1
 * ...
 * END:VCARD
 * END:VCARD</pre>
 * <p>
 * The vCard 2.1 specification allows the nest, but also let parsers ignore nested entries,
 * while some mobile devices emit nested ones as primary data to be imported.
 * </p>
 * <p>
 * This flag forces a vCard parser to torelate such a nest and understand its content.
 * </p>
 */
]","\android\pim\vcard\VCardConfig.java"
"FLAG_REFRAIN_QP_TO_NAME_PROPERTIES","true","false","false","true","true","int","0x10000000","[]","Optional[/**
 * <p>
 * The flag indicating the vCard composer does ""NOT"" use Quoted-Printable toward ""primary""
 * properties even though it is required by vCard 2.1 (QP is prohibited in vCard 3.0).
 * </p>
 * <p>
 * We actually cannot define what is the ""primary"" property. Note that this is NOT defined
 * in vCard specification either. Also be aware that it is NOT related to ""primary"" notion
 * used in {@link android.provider.ContactsContract}.
 * This notion is just for vCard composition in Android.
 * </p>
 * <p>
 * We added this Android-specific notion since some (incomplete) vCard exporters for vCard 2.1
 * do NOT use Quoted-Printable encoding toward some properties related names like ""N"", ""FN"", etc.
 * even when their values contain non-ascii or/and CR/LF, while they use the encoding in the
 * other properties like ""ADR"", ""ORG"", etc.
 * <p>
 * We are afraid of the case where some vCard importer also forget handling QP presuming QP is
 * not used in such fields.
 * </p>
 * <p>
 * This flag is useful when some target importer you are going to focus on does not accept
 * such properties with Quoted-Printable encoding.
 * </p>
 * <p>
 * Again, we should not use this flag at all for complying vCard 2.1 spec.
 * </p>
 * <p>
 * In vCard 3.0, Quoted-Printable is explicitly ""prohibitted"", so we don't need to care this
 * kind of problem (hopefully).
 * </p>
 * @hide
 */
]","\android\pim\vcard\VCardConfig.java"
"FLAG_APPEND_TYPE_PARAM","true","false","false","true","true","int","0x04000000","[]","Optional[/**
 * <p>
 * The flag indicating the vCard composer ""for 2.1"" emits ""TYPE="" string toward TYPE params
 * every time possible. The default behavior does not emit it and is valid in the spec.
 * In vCrad 3.0, this flag is unnecessary, since ""TYPE="" is MUST in vCard 3.0 specification.
 * </p>
 * <p>
 * Detail:
 * How more than one TYPE fields are expressed is different between vCard 2.1 and vCard 3.0.
 * </p>
 * <p>
 * e.g.
 * </p>
 * <ol>
 * <li>Probably valid in both vCard 2.1 and vCard 3.0: ""ADR;TYPE=DOM;TYPE=HOME:...""</li>
 * <li>Valid in vCard 2.1 but not in vCard 3.0: ""ADR;DOM;HOME:...""</li>
 * <li>Valid in vCard 3.0 but not in vCard 2.1: ""ADR;TYPE=DOM,HOME:...""</li>
 * </ol>
 * <p>
 * If you are targeting to the importer which cannot accept TYPE params without ""TYPE=""
 * strings (which should be rare though), please use this flag.
 * </p>
 * <p>
 * Example usage:
 * <pre class=""prettyprint"">int type = (VCARD_TYPE_V21_GENERIC | FLAG_APPEND_TYPE_PARAM);</pre>
 * </p>
 */
]","\android\pim\vcard\VCardConfig.java"
"FLAG_REFRAIN_PHONE_NUMBER_FORMATTING","true","false","false","true","true","int","0x02000000","[]","Optional[/**
 * <p>
 * The flag indicating the vCard composer does touch nothing toward phone number Strings
 * but leave it as is.
 * </p>
 * <p>
 * The vCard specifications mention nothing toward phone numbers, while some devices
 * do (wrongly, but with innevitable reasons).
 * For example, there's a possibility Japanese mobile phones are expected to have
 * just numbers, hypens, plus, etc. but not usual alphabets, while US mobile phones
 * should get such characters. To make exported vCard simple for external parsers,
 * we have used {@link PhoneNumberUtils#formatNumber(String)} during export, and
 * removed unnecessary characters inside the number (e.g. ""111-222-3333 (Miami)""
 * becomes ""111-222-3333"").
 * Unfortunate side effect of that use was some control characters used in the other
 * areas may be badly affected by the formatting.
 * </p>
 * <p>
 * This flag disables that formatting, affecting both importer and exporter.
 * If the user is aware of some side effects due to the implicit formatting, use this flag.
 * </p>
 */
]","\android\pim\vcard\VCardConfig.java"
"NAME_ORDER_EUROPE","true","false","false","true","true","int","0x4","[]","Optional.empty","\android\pim\vcard\VCardConfig.java"
"VCARD_TYPE_V21_JAPANESE","true","false","false","true","true","int","(VERSION_21 | NAME_ORDER_JAPANESE | FLAG_USE_DEFACT_PROPERTY | FLAG_USE_ANDROID_PROPERTY)","[]","Optional[/**
 * <p>
 * The vCard 2.1 format for miscellaneous Japanese devices, using UTF-8 as default charset.
 * </p>
 * <p>
 * Not ready yet. Use with caution when you use this.
 * </p>
 */
]","\android\pim\vcard\VCardConfig.java"
"NAME_ORDER_JAPANESE","true","false","false","true","true","int","0x8","[]","Optional.empty","\android\pim\vcard\VCardConfig.java"
"NAME_ORDER_DEFAULT","true","false","false","true","true","int","0","[]","Optional.empty","\android\pim\vcard\VCardConfig.java"
"NAME_ORDER_MASK","false","false","true","true","true","int","0xC","[]","Optional.empty","\android\pim\vcard\VCardConfig.java"
"VCARD_TYPE_DEFAULT","true","false","false","true","false","int","VCARD_TYPE_V21_GENERIC","[]","Optional.empty","\android\pim\vcard\VCardConfig.java"
"VCARD_TYPE_V21_EUROPE","true","false","false","true","true","int","(VERSION_21 | NAME_ORDER_EUROPE | FLAG_USE_DEFACT_PROPERTY | FLAG_USE_ANDROID_PROPERTY)","[]","Optional[/**
 * <p>
 * General vCard format for the vCard 2.1 with some Europe convension. Uses Utf-8.
 * Currently, only name order is considered (""Prefix Middle Given Family Suffix"")
 * </p>
 */
]","\android\pim\vcard\VCardConfig.java"
"VCARD_TYPE_V21_JAPANESE_MOBILE","true","false","false","true","true","int","(VERSION_21 | NAME_ORDER_JAPANESE | FLAG_CONVERT_PHONETIC_NAME_STRINGS | FLAG_REFRAIN_QP_TO_NAME_PROPERTIES)","[]","Optional[/**
 * <p>
 * The vCard 2.1 based format which (partially) considers the convention in Japanese
 * mobile phones, where phonetic names are translated to half-width katakana if
 * possible, etc. It would be better to use Shift_JIS as a charset for maximum
 * compatibility.
 * </p>
 * @hide Should not be available world wide.
 */
]","\android\pim\vcard\VCardConfig.java"
"DEFAULT_EXPORT_CHARSET","true","false","false","true","true","String","""UTF-8""","[]","Optional.empty","\android\pim\vcard\VCardConfig.java"
"sJapaneseMobileTypeSet","false","false","true","true","true","Set<Integer>","null","[]","Optional.empty","\android\pim\vcard\VCardConfig.java"
"LOG_LEVEL_SHOW_WARNING","false","false","false","true","true","int","0x2","[]","Optional[/* package */
]","\android\pim\vcard\VCardConfig.java"
"LOG_TAG","false","false","true","true","true","String","""VCardConfig""","[]","Optional.empty","\android\pim\vcard\VCardConfig.java"
"DEFAULT_INTERMEDIATE_CHARSET","true","false","false","true","true","String","""ISO-8859-1""","[]","Optional[/**
 * <p>
 * The charset used during import.
 * </p>
 * <p>
 * We cannot determine which charset should be used to interpret lines in vCard,
 * while Java requires us to specify it when InputStream is used.
 * We need to rely on the mechanism due to some performance reason.
 * </p>
 * <p>
 * In order to avoid ""misinterpretation"" of charset and lose any data in vCard,
 * ""ISO-8859-1"" is first used for reading the stream.
 * When a charset is specified in a property (with ""CHARSET=..."" parameter),
 * the string is decoded to raw bytes and encoded into the specific charset,
 * </p>
 * <p>
 * Unicode specification there's a one to one mapping between each byte in ISO-8859-1
 * and a codepoint, and Java specification requires runtime must have the charset.
 * Thus, ISO-8859-1 is one effective mapping for intermediate mapping.
 * </p>
 */
]","\android\pim\vcard\VCardConfig.java"
"VCARD_TYPE_V30_JAPANESE_STR","false","false","false","true","true","String","""v30_japanese_utf8""","[]","Optional[/* package */
]","\android\pim\vcard\VCardConfig.java"
"VCARD_TYPE_V21_JAPANESE_MOBILE_STR","false","false","false","true","true","String","""v21_japanese_mobile""","[]","Optional[/* package */
]","\android\pim\vcard\VCardConfig.java"
"FLAG_USE_DEFACT_PROPERTY","false","false","true","true","true","int","0x40000000","[]","Optional[/**
 * <p>
 * The flag indicating the vCard composer will add some ""X-"" properties seen in the
 * vCard data emitted by the other softwares/devices when the formal vCard specification
 * does not have appropriate field(s) for that data.
 * </p>
 * <p>
 * One example is X-PHONETIC-FIRST-NAME/X-PHONETIC-MIDDLE-NAME/X-PHONETIC-LAST-NAME, which are
 * for phonetic name (how the name is pronounced), seen in the vCard emitted by some other
 * non-Android devices/softwares. We chose to enable the vCard composer to use those
 * defact properties since they are also useful for Android devices.
 * </p>
 * <p>
 * Note for developers: only ""X-"" properties should be added with this flag. vCard 2.1/3.0
 * allows any kind of ""X-"" properties but does not allow non-""X-"" properties (except IANA tokens
 * in vCard 3.0). Some external parsers may get confused with non-valid, non-""X-"" properties.
 * </p>
 */
]","\android\pim\vcard\VCardConfig.java"
"VCARD_TYPE_V21_JAPANESE_STR","false","false","false","true","true","String","""v21_japanese_utf8""","[]","Optional[/* package */
]","\android\pim\vcard\VCardConfig.java"
"VCARD_TYPE_V30_GENERIC","true","false","false","true","true","int","(VERSION_30 | NAME_ORDER_DEFAULT | FLAG_USE_DEFACT_PROPERTY | FLAG_USE_ANDROID_PROPERTY)","[]","Optional[/**
 * <p>
 * General vCard format with the version 3.0. Uses UTF-8 for the charset.
 * </p>
 * <p>
 * Not fully ready yet. Use with caution when you use this.
 * </p>
 */
]","\android\pim\vcard\VCardConfig.java"
"VCARD_TYPE_V30_EUROPE","true","false","false","true","true","int","(VERSION_30 | NAME_ORDER_EUROPE | FLAG_USE_DEFACT_PROPERTY | FLAG_USE_ANDROID_PROPERTY)","[]","Optional[/**
 * <p>
 * General vCard format with the version 3.0 with some Europe convension. Uses UTF-8.
 * </p>
 * <p>
 * Not ready yet. Use with caution when you use this.
 * </p>
 */
]","\android\pim\vcard\VCardConfig.java"
"VCARD_TYPE_V21_GENERIC","true","false","false","true","true","int","(VERSION_21 | NAME_ORDER_DEFAULT | FLAG_USE_DEFACT_PROPERTY | FLAG_USE_ANDROID_PROPERTY)","[]","Optional[/**
 * <p>
 * Generic vCard format with the vCard 2.1. When composing a vCard entry,
 * the US convension will be used toward formatting some values.
 * </p>
 * <p>
 * e.g. The order of the display name would be ""Prefix Given Middle Family Suffix"",
 * while it should be ""Prefix Family Middle Given Suffix"" in Japan for example.
 * </p>
 * <p>
 * Uses UTF-8 for the charset as a charset for exporting. Note that old vCard importer
 * outside Android cannot accept it since vCard 2.1 specifically does not allow
 * that charset, while we need to use it to support various languages around the world.
 * </p>
 * <p>
 * If you want to use alternative charset, you should notify the charset to the other
 * compontent to be used.
 * </p>
 */
]","\android\pim\vcard\VCardConfig.java"
"VCARD_TYPE_DOCOMO","true","false","false","true","true","int","(VCARD_TYPE_V21_JAPANESE_MOBILE | FLAG_DOCOMO)","[]","Optional[/**
 * <p>
 * The vCard format used in DoCoMo, which is one of Japanese mobile phone careers.
 * </p>
 * <p>
 * Base version is vCard 2.1, but the data has several DoCoMo-specific convensions.
 * No Android-specific property nor defact property is included. The ""Primary"" properties
 * are NOT encoded to Quoted-Printable.
 * </p>
 * @hide Should not be available world wide.
 */
]","\android\pim\vcard\VCardConfig.java"
"LOG_LEVEL_VERBOSE","false","false","false","true","true","int","LOG_LEVEL_PERFORMANCE_MEASUREMENT | LOG_LEVEL_SHOW_WARNING","[]","Optional[/* package */
]","\android\pim\vcard\VCardConfig.java"
"LOG_LEVEL_NONE","false","false","false","true","true","int","0","[]","Optional[/* package */
]","\android\pim\vcard\VCardConfig.java"
"sVCardTypeMap","false","false","true","true","true","Map<String,Integer>","null","[]","Optional.empty","\android\pim\vcard\VCardConfig.java"
"FLAG_DOCOMO","false","false","true","true","true","int","0x20000000","[]","Optional[/**
 * <p>
 * The flag indicating some specific dialect seen in vCard of DoCoMo (one of Japanese
 * mobile careers) should be used. This flag does not include any other information like
 * that ""the vCard is for Japanese"". So it is ""possible"" that ""the vCard should have DoCoMo's
 * dialect but the name order should be European"", but it is not recommended.
 * </p>
 */
]","\android\pim\vcard\VCardConfig.java"
"VCARD_TYPE_V40_GENERIC_STR","false","false","false","true","true","String","""v40_generic""","[]","Optional[/* package */
]","\android\pim\vcard\VCardConfig.java"
"VCARD_TYPE_DOCOMO_STR","false","false","false","true","true","String","""docomo""","[]","Optional[/* package */
]","\android\pim\vcard\VCardConfig.java"
"VERSION_40","true","false","false","true","true","int","2","[]","Optional.empty","\android\pim\vcard\VCardConfig.java"
"VCARD_TYPE_V21_GENERIC_STR","false","false","false","true","false","String","""v21_generic""","[]","Optional[/* package */
]","\android\pim\vcard\VCardConfig.java"
"LOG_LEVEL","false","false","false","true","true","int","LOG_LEVEL_NONE","[]","Optional[/* package */
]","\android\pim\vcard\VCardConfig.java"
"FLAG_CONVERT_PHONETIC_NAME_STRINGS","true","false","false","true","true","int","0x08000000","[]","Optional[/**
 * <p>
 * The flag indicating that phonetic name related fields must be converted to
 * appropriate form. Note that ""appropriate"" is not defined in any vCard specification.
 * This is Android-specific.
 * </p>
 * <p>
 * One typical (and currently sole) example where we need this flag is the time when
 * we need to emit Japanese phonetic names into vCard entries. The property values
 * should be encoded into half-width katakana when the target importer is Japanese mobile
 * phones', which are probably not able to parse full-width hiragana/katakana for
 * historical reasons, while the vCard importers embedded to softwares for PC should be
 * able to parse them as we expect.
 * </p>
 */
]","\android\pim\vcard\VCardConfig.java"
"VERSION_30","true","false","false","true","true","int","1","[]","Optional.empty","\android\pim\vcard\VCardConfig.java"
"VCARD_TYPE_V40_GENERIC","true","false","false","true","true","int","(VERSION_40 | NAME_ORDER_DEFAULT | FLAG_USE_DEFACT_PROPERTY | FLAG_USE_ANDROID_PROPERTY)","[]","Optional[/**
 * General vCard format with the version 4.0.
 * @hide vCard 4.0 is not published yet.
 */
]","\android\pim\vcard\VCardConfig.java"
"VCARD_TYPE_UNKNOWN","true","false","false","true","true","int","0","[]","Optional[/**
 * <p>
 * The type indicating nothing. Used by {@link VCardSourceDetector} when it
 * was not able to guess the exact vCard type.
 * </p>
 */
]","\android\pim\vcard\VCardConfig.java"
"LOG_LEVEL_PERFORMANCE_MEASUREMENT","false","false","false","true","true","int","0x1","[]","Optional[/* package */
]","\android\pim\vcard\VCardConfig.java"
"VERSION_MASK","true","false","false","true","true","int","3","[]","Optional.empty","\android\pim\vcard\VCardConfig.java"
"VCARD_TYPE_V30_GENERIC_STR","false","false","false","true","true","String","""v30_generic""","[]","Optional[/* package */
]","\android\pim\vcard\VCardConfig.java"
"VERSION_21","true","false","false","true","true","int","0","[]","Optional[/**
 * Do not use statically like ""version == VERSION_V21""
 */
]","\android\pim\vcard\VCardConfig.java"
"VCARD_TYPE_V30_JAPANESE","true","false","false","true","true","int","(VERSION_30 | NAME_ORDER_JAPANESE | FLAG_USE_DEFACT_PROPERTY | FLAG_USE_ANDROID_PROPERTY)","[]","Optional[/**
 * <p>
 * The vCard 3.0 format for miscellaneous Japanese devices, using UTF-8 as default charset.
 * </p>
 * <p>
 * Not ready yet. Use with caution when you use this.
 * </p>
 */
]","\android\pim\vcard\VCardConfig.java"
"VCARD_TYPE_V30_EUROPE_STR","false","false","false","true","true","String","""v30_europe""","[]","Optional[/* package */
]","\android\pim\vcard\VCardConfig.java"
"DEFAULT_IMPORT_CHARSET","true","false","false","true","true","String","""UTF-8""","[]","Optional[/**
 * The charset used when there's no information affbout what charset should be used to
 * encode the binary given from vCard.
 */
]","\android\pim\vcard\VCardConfig.java"
"VCARD_TYPE_V21_EUROPE_STR","false","false","false","true","true","String","""v21_europe""","[]","Optional[/* package */
]","\android\pim\vcard\VCardConfig.java"
"mProgressNumberFormat","false","false","true","false","false","String","null","[]","Optional.empty","\android\app\ProgressDialog.java"
"mProgressVal","false","false","true","false","false","int","null","[]","Optional.empty","\android\app\ProgressDialog.java"
"mIndeterminateDrawable","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\app\ProgressDialog.java"
"mProgressNumber","false","false","true","false","false","TextView","null","[]","Optional.empty","\android\app\ProgressDialog.java"
"mHasStarted","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\app\ProgressDialog.java"
"mMessageView","false","false","true","false","false","TextView","null","[]","Optional.empty","\android\app\ProgressDialog.java"
"mProgressStyle","false","false","true","false","false","int","STYLE_SPINNER","[]","Optional.empty","\android\app\ProgressDialog.java"
"mProgress","false","false","true","false","false","ProgressBar","null","[]","Optional.empty","\android\app\ProgressDialog.java"
"mProgressPercent","false","false","true","false","false","TextView","null","[]","Optional.empty","\android\app\ProgressDialog.java"
"mIncrementSecondaryBy","false","false","true","false","false","int","null","[]","Optional.empty","\android\app\ProgressDialog.java"
"STYLE_SPINNER","true","false","false","true","true","int","0","[]","Optional[/**
 * Creates a ProgressDialog with a ciruclar, spinning progress
 * bar. This is the default.
 */
]","\android\app\ProgressDialog.java"
"STYLE_HORIZONTAL","true","false","false","true","true","int","1","[]","Optional[/**
 * Creates a ProgressDialog with a horizontal progress bar.
 */
]","\android\app\ProgressDialog.java"
"mProgressDrawable","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\app\ProgressDialog.java"
"mIndeterminate","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\app\ProgressDialog.java"
"mMax","false","false","true","false","false","int","null","[]","Optional.empty","\android\app\ProgressDialog.java"
"mViewUpdateHandler","false","false","true","false","false","Handler","null","[]","Optional.empty","\android\app\ProgressDialog.java"
"mIncrementBy","false","false","true","false","false","int","null","[]","Optional.empty","\android\app\ProgressDialog.java"
"mSecondaryProgressVal","false","false","true","false","false","int","null","[]","Optional.empty","\android\app\ProgressDialog.java"
"mMessage","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\app\ProgressDialog.java"
"mProgressPercentFormat","false","false","true","false","false","NumberFormat","null","[]","Optional.empty","\android\app\ProgressDialog.java"
"mSplitPictureIsScheduled","false","false","true","false","false","boolean","null","[]","Optional[// Used to avoid posting more than one split picture message.
]","\android\webkit\WebViewCore.java"
"PASS_TO_JS","false","false","false","true","true","int","115","[]","Optional.empty","\android\webkit\WebViewCore.java"
"REQUEST_EXT_REPRESENTATION","false","false","false","true","true","int","160","[]","Optional[// Test harness messages
]","\android\webkit\WebViewCore.java"
"ADD_JS_INTERFACE","false","false","false","true","true","int","138","[]","Optional.empty","\android\webkit\WebViewCore.java"
"SET_MOVE_MOUSE_IF_LATEST","false","false","false","true","true","int","136","[]","Optional.empty","\android\webkit\WebViewCore.java"
"SCROLL_BITS","false","false","false","true","true","int","Paint.FILTER_BITMAP_FLAG | Paint.DITHER_FLAG","[]","Optional.empty","\android\webkit\WebViewCore.java"
"WEBKIT_DRAW","false","false","false","true","true","int","130","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mEventHub","false","false","true","false","true","EventHub","null","[]","Optional[// EventHub for processing messages
]","\android\webkit\WebViewCore.java"
"mEncoding","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mViewportMinimumScale","false","false","true","false","false","int","0","[]","Optional[/*
     * scale in percent, range is from 1 to 1000. 0 means undefined.
     */
]","\android\webkit\WebViewCore.java"
"sWebCoreHandler","false","false","true","true","false","Handler","null","[]","Optional[// WebCore thread handler
]","\android\webkit\WebViewCore.java"
"mNativeClass","false","false","true","false","false","int","null","[]","Optional[// The pointer to a native view object.
]","\android\webkit\WebViewCore.java"
"mNode","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mViewportHeight","false","false","true","false","false","int","-1","[]","Optional[/*
     * range is from 200 to 10,000. 0 is a special value means device-height. -1
     * means undefined.
     */
]","\android\webkit\WebViewCore.java"
"mEvent","false","false","false","false","false","KeyEvent","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"SAVE_DOCUMENT_STATE","false","false","false","true","true","int","128","[]","Optional.empty","\android\webkit\WebViewCore.java"
"REQUEST_CURSOR_HREF","false","false","false","true","true","int","137","[]","Optional.empty","\android\webkit\WebViewCore.java"
"ACTION_DOUBLETAP","false","false","false","true","true","int","0x200","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mLeft","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"ON_PAUSE","false","false","false","true","true","int","143","[]","Optional[// is global)
]","\android\webkit\WebViewCore.java"
"mInterfaceName","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mDrawIsPaused","false","false","true","false","false","boolean","null","[]","Optional[// Used to suspend drawing.
]","\android\webkit\WebViewCore.java"
"mNewStart","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"RELOAD","false","false","false","true","true","int","102","[]","Optional.empty","\android\webkit\WebViewCore.java"
"DESTROY","false","false","true","true","true","int","200","[]","Optional[// private message ids
]","\android\webkit\WebViewCore.java"
"REQUEST_DOC_AS_TEXT","false","false","false","true","true","int","161","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mYPercentInView","false","false","false","false","false","float","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional[// Context for initializing the BrowserFrame with the proper assets.
]","\android\webkit\WebViewCore.java"
"REDUCE_PRIORITY","false","false","true","true","true","int","1","[]","Optional.empty","\android\webkit\WebViewCore.java"
"ACTION_LONGPRESS","false","false","false","true","true","int","0x100","[]","Optional[// last two bytes or one of the following values
]","\android\webkit\WebViewCore.java"
"RESTORE_STATE","false","false","false","true","true","int","108","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mObject","false","false","false","false","false","Object","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mSavedPriority","false","false","true","false","false","int","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"HandlerDebugString","false","false","false","true","true","String","{ // 97
""REQUEST_LABEL"", // = 98
""UPDATE_FRAME_CACHE_IF_LOADING"", // = 99
""SCROLL_TEXT_INPUT"", // = 100;
""LOAD_URL"", // = 101;
""STOP_LOADING"", // = 102;
""RELOAD"", // = 103;
""KEY_DOWN"", // = 104;
""KEY_UP"", // = 105;
""VIEW_SIZE_CHANGED"", // = 106;
""GO_BACK_FORWARD"", // = 107;
""SET_SCROLL_OFFSET"", // = 108;
""RESTORE_STATE"", // = 109;
""PAUSE_TIMERS"", // = 110;
""RESUME_TIMERS"", // = 111;
""CLEAR_CACHE"", // = 112;
""CLEAR_HISTORY"", // = 113;
""SET_SELECTION"", // = 114;
""REPLACE_TEXT"", // = 115;
""PASS_TO_JS"", // = 116;
""SET_GLOBAL_BOUNDS"", // = 117;
""UPDATE_CACHE_AND_TEXT_ENTRY"", // = 118;
""CLICK"", // = 119;
""SET_NETWORK_STATE"", // = 120;
""DOC_HAS_IMAGES"", // = 121;
""121"", // = 122;
""DELETE_SELECTION"", // = 123;
""LISTBOX_CHOICES"", // = 124;
""SINGLE_LISTBOX_CHOICE"", // = 125;
""MESSAGE_RELAY"", // = 126;
""SET_BACKGROUND_COLOR"", // = 127
""SET_MOVE_FOCUS"", // = 128;
""SAVE_DOCUMENT_STATE"", // = 129;
""129"", // = 130;
""WEBKIT_DRAW"", // = 131;
""SYNC_SCROLL"", // = 132;
""POST_URL"", // = 133;
""SPLIT_PICTURE_SET"", // = 134;
""CLEAR_CONTENT"", // = 135;
""SET_MOVE_MOUSE"", // = 136;
""SET_MOVE_MOUSE_IF_LATEST"", // = 137;
""REQUEST_CURSOR_HREF"", // = 138;
""ADD_JS_INTERFACE"", // = 139;
""LOAD_DATA"", // = 140;
""TOUCH_UP"", // = 141;
""TOUCH_EVENT"", // = 142;
""SET_ACTIVE"", // = 143
""ON_PAUSE"", // = 144
""ON_RESUME"", // = 145
""FREE_MEMORY"", // = 146
""VALID_NODE_BOUNDS"" }","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mContentHeight","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"TOUCH_UP","false","false","false","true","true","int","140","[]","Optional[// motion
]","\android\webkit\WebViewCore.java"
"TOUCH_EVENT","false","false","false","true","true","int","141","[]","Optional[// message used to pass UI touch events to WebCore
]","\android\webkit\WebViewCore.java"
"mCurrentText","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mReprocess","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"SET_MOVE_MOUSE","false","false","false","true","true","int","135","[]","Optional[// UI nav messages
]","\android\webkit\WebViewCore.java"
"SET_MOVE_FOCUS","false","false","false","true","true","int","127","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mWidthHeight","false","false","false","false","false","Point","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mRestoreState","false","false","false","false","false","RestoreState","null","[]","Optional[// only non-null if it is for the first
]","\android\webkit\WebViewCore.java"
"THREAD_NAME","false","false","false","true","true","String","""WebViewCoreThread""","[]","Optional[/* package */
]","\android\webkit\WebViewCore.java"
"mMobileSite","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mBrowserFrame","false","false","true","false","false","BrowserFrame","null","[]","Optional[// The BrowserFrame is an interface to the native Frame component.
]","\android\webkit\WebViewCore.java"
"PAUSE_TIMERS","false","false","false","true","true","int","109","[]","Optional.empty","\android\webkit\WebViewCore.java"
"REPLACE_TEXT","false","false","false","true","true","int","114","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mDefaultScale","false","false","false","false","false","float","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"RESUME_TIMERS","false","false","false","true","true","int","110","[]","Optional.empty","\android\webkit\WebViewCore.java"
"CLICK","false","false","false","true","true","int","118","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mOrigin","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"FREE_MEMORY","false","false","false","true","true","int","145","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mViewportUserScalable","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\webkit\WebViewCore.java"
"STOP_LOADING","false","false","false","true","true","int","101","[]","Optional.empty","\android\webkit\WebViewCore.java"
"REMOVE_PACKAGE_NAME","false","false","false","true","true","int","186","[]","Optional.empty","\android\webkit\WebViewCore.java"
"SET_NETWORK_STATE","false","false","false","true","true","int","119","[]","Optional.empty","\android\webkit\WebViewCore.java"
"DUMP_NAVTREE","false","false","false","true","true","int","172","[]","Optional.empty","\android\webkit\WebViewCore.java"
"LOAD_URL","false","false","false","true","true","int","100","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mTid","false","false","true","false","false","int","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mReplace","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"DELETE_SELECTION","false","false","false","true","true","int","122","[]","Optional.empty","\android\webkit\WebViewCore.java"
"GEOLOCATION_PERMISSIONS_PROVIDE","false","false","false","true","true","int","180","[]","Optional[// Geolocation
]","\android\webkit\WebViewCore.java"
"SET_SELECTION","false","false","false","true","true","int","113","[]","Optional.empty","\android\webkit\WebViewCore.java"
"SINGLE_LISTBOX_CHOICE","false","false","false","true","true","int","124","[]","Optional.empty","\android\webkit\WebViewCore.java"
"SET_JS_FLAGS","false","false","false","true","true","int","174","[]","Optional.empty","\android\webkit\WebViewCore.java"
"KEY_DOWN","false","false","false","true","true","int","103","[]","Optional.empty","\android\webkit\WebViewCore.java"
"SET_BACKGROUND_COLOR","false","false","false","true","true","int","126","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mViewportWidth","false","false","true","false","false","int","-1","[]","Optional[/*
     * range is from 200 to 10,000. 0 is a special value means device-width. -1
     * means undefined.
     */
]","\android\webkit\WebViewCore.java"
"POST_URL","false","false","false","true","true","int","132","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mYPercentInDoc","false","false","false","false","false","float","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"POPULATE_VISITED_LINKS","false","false","false","true","true","int","181","[]","Optional.empty","\android\webkit\WebViewCore.java"
"SET_SCROLL_OFFSET","false","false","false","true","true","int","107","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mExtraHeaders","false","false","false","false","false","Map<String,String>","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mHistoryUrl","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"SCROLL_TEXT_INPUT","false","false","false","true","true","int","99","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mCurrentViewWidth","false","false","true","false","false","int","0","[]","Optional[// These values are used to avoid requesting a layout based on old values
]","\android\webkit\WebViewCore.java"
"REQUEST_LABEL","false","false","false","true","true","int","97","[]","Optional[// Message Ids
]","\android\webkit\WebViewCore.java"
"CLEAR_CONTENT","false","false","false","true","true","int","134","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mViewY","false","false","false","false","false","float","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mViewX","false","false","false","false","false","float","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mCurrentViewHeight","false","false","true","false","false","int","0","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mFrame","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mNewEnd","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"DUMP_V8COUNTERS","false","false","false","true","true","int","173","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mScrollY","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mScrollX","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mMimeType","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mAllow","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mEnd","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"SPLIT_PICTURE_SET","false","false","false","true","true","int","133","[]","Optional.empty","\android\webkit\WebViewCore.java"
"CLEAR_CACHE","false","false","false","true","true","int","111","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mRestoredY","false","false","true","false","false","int","0","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mRestoredX","false","false","true","false","false","int","0","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mMinPrefWidth","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"HIDE_FULLSCREEN","false","false","false","true","true","int","182","[]","Optional.empty","\android\webkit\WebViewCore.java"
"SET_NETWORK_TYPE","false","false","false","true","true","int","183","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mTextGeneration","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mWebkitScrollX","false","false","true","false","false","int","0","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mWebkitScrollY","false","false","true","false","false","int","0","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mBlockMessages","false","false","true","false","false","boolean","null","[]","Optional[// posting more messages to the EventHub or to WebView's event handler.
]","\android\webkit\WebViewCore.java"
"mSettings","false","false","true","false","true","WebSettings","null","[]","Optional[// Settings object for maintaining all settings
]","\android\webkit\WebViewCore.java"
"UPDATE_CACHE_AND_TEXT_ENTRY","false","false","false","true","true","int","117","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mViewportDensityDpi","false","false","true","false","false","int","-1","[]","Optional[/*
     * range is from 70 to 400.
     * 0 is a special value means device-dpi. The default scale factor will be
     * always 100.
     * -1 means undefined. The default scale factor will be
     * WebView.DEFAULT_SCALE_PERCENT.
     */
]","\android\webkit\WebViewCore.java"
"mStart","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mCurrentViewScale","false","false","true","false","false","float","1.0f","[]","Optional.empty","\android\webkit\WebViewCore.java"
"INITIALIZE","false","false","true","true","true","int","0","[]","Optional[// Message id for initializing a new WebViewCore.
]","\android\webkit\WebViewCore.java"
"GO_BACK_FORWARD","false","false","false","true","true","int","106","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mRestoredScale","false","false","true","false","false","int","0","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mMaxScale","false","false","false","false","false","float","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mHeight","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"VALID_NODE_BOUNDS","false","false","false","true","true","int","146","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mInvalRegion","false","false","false","false","false","Region","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mMinScale","false","false","false","false","false","float","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"KEY_UP","false","false","false","true","true","int","104","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mJavascriptInterfaces","false","false","true","false","false","Map<String,Object>","null","[]","Optional[// Custom JS interfaces to add during the initialization.
]","\android\webkit\WebViewCore.java"
"mContentWidth","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mScrollFilter","false","false","false","false","true","DrawFilter","new PaintFlagsDrawFilter(SCROLL_BITS, 0)","[]","Optional[// If we need to trade better quality for speed, set mScrollFilter to null
]","\android\webkit\WebViewCore.java"
"mBounds","false","false","false","false","false","Rect","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"DOC_HAS_IMAGES","false","false","false","true","true","int","120","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mHandler","false","false","true","false","false","Handler","null","[]","Optional[// Private handler for WebCore messages.
]","\android\webkit\WebViewCore.java"
"DUMP_RENDERTREE","false","false","false","true","true","int","171","[]","Optional.empty","\android\webkit\WebViewCore.java"
"SET_GLOBAL_BOUNDS","false","false","false","true","true","int","116","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mRestoredScreenWidthScale","false","false","true","false","false","int","0","[]","Optional.empty","\android\webkit\WebViewCore.java"
"ON_RESUME","false","false","false","true","true","int","144","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mXPercentInView","false","false","false","false","false","float","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mX","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mY","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mZoomFilter","false","false","false","false","true","DrawFilter","new PaintFlagsDrawFilter(ZOOM_BITS, Paint.LINEAR_TEXT_FLAG)","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mMoveGeneration","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mViewportInitialScale","false","false","true","false","false","int","0","[]","Optional[/*
     * scale in percent, range is from 1 to 1000. 0 means undefined.
     */
]","\android\webkit\WebViewCore.java"
"mData","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"LISTBOX_CHOICES","false","false","false","true","true","int","123","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mAction","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mTop","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mWidth","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"ZOOM_BITS","false","false","false","true","true","int","Paint.FILTER_BITMAP_FLAG | Paint.DITHER_FLAG | Paint.SUBPIXEL_TEXT_FLAG","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mTextWrapScale","false","false","false","false","false","float","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mMessages","false","false","true","false","false","ArrayList<Message>","new ArrayList<Message>()","[]","Optional[// ready.
]","\android\webkit\WebViewCore.java"
"SYNC_SCROLL","false","false","false","true","true","int","131","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mViewportMaximumScale","false","false","true","false","false","int","0","[]","Optional[/*
     * scale in percent, range is from 1 to 1000. 0 means undefined.
     */
]","\android\webkit\WebViewCore.java"
"CLEAR_HISTORY","false","false","false","true","true","int","112","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mRemember","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mFocusSizeChanged","false","false","false","false","false","boolean","null","[]","Optional[// picture set after the first layout
]","\android\webkit\WebViewCore.java"
"LOAD_DATA","false","false","false","true","true","int","139","[]","Optional.empty","\android\webkit\WebViewCore.java"
"UPDATE_FRAME_CACHE_IF_LOADING","false","false","false","true","true","int","98","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mMetaState","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"RESUME_PRIORITY","false","false","true","true","true","int","2","[]","Optional.empty","\android\webkit\WebViewCore.java"
"ADD_PACKAGE_NAMES","false","false","false","true","true","int","184","[]","Optional[// navigator.isApplicationInstalled()
]","\android\webkit\WebViewCore.java"
"ADD_PACKAGE_NAME","false","false","false","true","true","int","185","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mDrawIsScheduled","false","false","true","false","false","boolean","null","[]","Optional[// Used to avoid posting more than one draw message.
]","\android\webkit\WebViewCore.java"
"mViewPoint","false","false","false","false","false","Point","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mPostData","false","false","false","false","false","byte","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mWebView","false","false","true","false","false","WebView","null","[]","Optional[// The WebView that corresponds to this WebViewCore.
]","\android\webkit\WebViewCore.java"
"mXPercentInDoc","false","false","false","false","false","float","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mUrl","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"CLEAR_SSL_PREF_TABLE","false","false","false","true","true","int","150","[]","Optional[// Network-based messaging
]","\android\webkit\WebViewCore.java"
"mBaseUrl","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"VIEW_SIZE_CHANGED","false","false","false","true","true","int","105","[]","Optional.empty","\android\webkit\WebViewCore.java"
"SET_ACTIVE","false","false","false","true","true","int","142","[]","Optional[// cursor matches the webpage's focus.
]","\android\webkit\WebViewCore.java"
"DUMP_DOMTREE","false","false","false","true","true","int","170","[]","Optional[// debugging
]","\android\webkit\WebViewCore.java"
"MESSAGE_RELAY","false","false","false","true","true","int","125","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mViewScale","false","false","false","false","false","float","null","[]","Optional.empty","\android\webkit\WebViewCore.java"
"LOGTAG","false","false","true","true","true","String","""webcore""","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mCallbackProxy","false","false","true","false","true","CallbackProxy","null","[]","Optional[// Proxy for handling callbacks from native code
]","\android\webkit\WebViewCore.java"
"mRepaintScheduled","false","false","true","true","false","boolean","false","[]","Optional.empty","\android\webkit\WebViewCore.java"
"mIsUserSeekable","false","false","false","false","false","boolean","true","[]","Optional[/**
 * Whether this is user seekable.
 */
]","\android\widget\AbsSeekBar.java"
"NO_ALPHA","false","false","true","true","true","int","0xFF","[]","Optional.empty","\android\widget\AbsSeekBar.java"
"mTouchProgressOffset","false","false","false","false","false","float","null","[]","Optional[/**
 * On touch, this offset plus the scaled value from the position of the
 * touch will form the progress value. Usually 0.
 */
]","\android\widget\AbsSeekBar.java"
"mKeyProgressIncrement","false","false","true","false","false","int","1","[]","Optional[/**
 * On key presses (right or left), the amount to increment/decrement the
 * progress.
 */
]","\android\widget\AbsSeekBar.java"
"mThumbOffset","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\AbsSeekBar.java"
"mThumb","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\AbsSeekBar.java"
"mDisabledAlpha","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\AbsSeekBar.java"
"mSequenceType","false","false","true","false","false","int","SEQUENCE_SENSITIVE","[]","Optional.empty","\android\gesture\GestureStore.java"
"FILE_FORMAT_VERSION","false","false","true","true","true","short","1","[]","Optional.empty","\android\gesture\GestureStore.java"
"ORIENTATION_SENSITIVE_8","false","false","false","true","true","int","8","[]","Optional[// at most 8 directions can be recognized
]","\android\gesture\GestureStore.java"
"mOrientationStyle","false","false","true","false","false","int","ORIENTATION_SENSITIVE","[]","Optional.empty","\android\gesture\GestureStore.java"
"ORIENTATION_SENSITIVE_4","false","false","false","true","true","int","4","[]","Optional[// at most 4 directions can be recognized
]","\android\gesture\GestureStore.java"
"SEQUENCE_SENSITIVE","true","false","false","true","true","int","2","[]","Optional[// when SEQUENCE_SENSITIVE is used, only single stroke gestures are currently allowed
]","\android\gesture\GestureStore.java"
"SEQUENCE_INVARIANT","true","false","false","true","true","int","1","[]","Optional.empty","\android\gesture\GestureStore.java"
"PROFILE_LOADING_SAVING","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\gesture\GestureStore.java"
"mNamedGestures","false","false","true","false","true","HashMap<String,ArrayList<Gesture>>","new HashMap<String, ArrayList<Gesture>>()","[]","Optional.empty","\android\gesture\GestureStore.java"
"mClassifier","false","false","true","false","false","Learner","null","[]","Optional.empty","\android\gesture\GestureStore.java"
"mChanged","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\gesture\GestureStore.java"
"ORIENTATION_SENSITIVE","true","false","false","true","true","int","2","[]","Optional[// at most 2 directions can be recognized
]","\android\gesture\GestureStore.java"
"ORIENTATION_INVARIANT","true","false","false","true","true","int","1","[]","Optional[// ORIENTATION_SENSITIVE and ORIENTATION_INVARIANT are only for SEQUENCE_SENSITIVE gestures
]","\android\gesture\GestureStore.java"
"AvrcpTarget","true","false","false","true","true","ParcelUuid","ParcelUuid.fromString(""0000110C-0000-1000-8000-00805F9B34FB"")","[]","Optional.empty","\android\bluetooth\BluetoothUuid.java"
"AdvAudioDist","true","false","false","true","true","ParcelUuid","ParcelUuid.fromString(""0000110D-0000-1000-8000-00805F9B34FB"")","[]","Optional.empty","\android\bluetooth\BluetoothUuid.java"
"HSP","true","false","false","true","true","ParcelUuid","ParcelUuid.fromString(""00001108-0000-1000-8000-00805F9B34FB"")","[]","Optional.empty","\android\bluetooth\BluetoothUuid.java"
"RESERVED_UUIDS","true","false","false","true","true","ParcelUuid","{ AudioSink, AudioSource, AdvAudioDist, HSP, Handsfree, AvrcpController, AvrcpTarget, ObexObjectPush }","[]","Optional.empty","\android\bluetooth\BluetoothUuid.java"
"AudioSource","true","false","false","true","true","ParcelUuid","ParcelUuid.fromString(""0000110A-0000-1000-8000-00805F9B34FB"")","[]","Optional.empty","\android\bluetooth\BluetoothUuid.java"
"AvrcpController","true","false","false","true","true","ParcelUuid","ParcelUuid.fromString(""0000110E-0000-1000-8000-00805F9B34FB"")","[]","Optional.empty","\android\bluetooth\BluetoothUuid.java"
"ObexObjectPush","true","false","false","true","true","ParcelUuid","ParcelUuid.fromString(""00001105-0000-1000-8000-00805f9b34fb"")","[]","Optional.empty","\android\bluetooth\BluetoothUuid.java"
"Handsfree","true","false","false","true","true","ParcelUuid","ParcelUuid.fromString(""0000111E-0000-1000-8000-00805F9B34FB"")","[]","Optional.empty","\android\bluetooth\BluetoothUuid.java"
"AudioSink","true","false","false","true","true","ParcelUuid","ParcelUuid.fromString(""0000110B-0000-1000-8000-00805F9B34FB"")","[]","Optional[/* See Bluetooth Assigned Numbers document - SDP section, to get the values of UUIDs
     * for the various services.
     *
     * The following 128 bit values are calculated as:
     *  uuid * 2^96 + BASE_UUID
     */
]","\android\bluetooth\BluetoothUuid.java"
"mGlowAlpha","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\EdgeGlow.java"
"EPSILON","false","false","true","true","true","float","0.001f","[]","Optional.empty","\android\widget\EdgeGlow.java"
"PULL_TIME","false","false","true","true","true","int","167","[]","Optional[// Time it will take before a pulled glow begins receding
]","\android\widget\EdgeGlow.java"
"STATE_ABSORB","false","false","true","true","true","int","2","[]","Optional.empty","\android\widget\EdgeGlow.java"
"STATE_PULL","false","false","true","true","true","int","1","[]","Optional.empty","\android\widget\EdgeGlow.java"
"PULL_DISTANCE_EDGE_FACTOR","false","false","true","true","true","int","5","[]","Optional[// Number determined by user testing.
]","\android\widget\EdgeGlow.java"
"HELD_GLOW_SCALE_Y","false","false","true","true","true","float","0.5f","[]","Optional.empty","\android\widget\EdgeGlow.java"
"STATE_PULL_DECAY","false","false","true","true","true","int","4","[]","Optional.empty","\android\widget\EdgeGlow.java"
"VELOCITY_GLOW_FACTOR","false","false","true","true","true","int","16","[]","Optional.empty","\android\widget\EdgeGlow.java"
"mGlowAlphaStart","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\EdgeGlow.java"
"RECEDE_TIME","false","false","true","true","true","int","1000","[]","Optional[// Time it will take the effect to fully recede in ms
]","\android\widget\EdgeGlow.java"
"mGlowScaleYStart","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\EdgeGlow.java"
"HELD_EDGE_SCALE_Y","false","false","true","true","true","float","0.5f","[]","Optional.empty","\android\widget\EdgeGlow.java"
"VELOCITY_EDGE_FACTOR","false","false","true","true","true","int","8","[]","Optional.empty","\android\widget\EdgeGlow.java"
"PULL_EDGE_BEGIN","false","false","true","true","true","float","0.6f","[]","Optional.empty","\android\widget\EdgeGlow.java"
"mPullDistance","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\EdgeGlow.java"
"mState","false","false","true","false","false","int","STATE_IDLE","[]","Optional.empty","\android\widget\EdgeGlow.java"
"mGlowScaleY","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\EdgeGlow.java"
"PULL_DISTANCE_ALPHA_GLOW_FACTOR","false","false","true","true","true","float","0.8f","[]","Optional.empty","\android\widget\EdgeGlow.java"
"mGlowScaleYFinish","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\EdgeGlow.java"
"MIN_VELOCITY","false","false","true","true","true","int","100","[]","Optional[// Minimum velocity that will be absorbed
]","\android\widget\EdgeGlow.java"
"STATE_RECEDE","false","false","true","true","true","int","3","[]","Optional.empty","\android\widget\EdgeGlow.java"
"mEdgeScaleY","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\EdgeGlow.java"
"MAX_ALPHA","false","false","true","true","true","float","0.8f","[]","Optional.empty","\android\widget\EdgeGlow.java"
"HELD_EDGE_ALPHA","false","false","true","true","true","float","0.7f","[]","Optional.empty","\android\widget\EdgeGlow.java"
"mHeight","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\EdgeGlow.java"
"mInterpolator","false","false","true","false","true","Interpolator","null","[]","Optional.empty","\android\widget\EdgeGlow.java"
"mDuration","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\EdgeGlow.java"
"PULL_GLOW_BEGIN","false","false","true","true","true","float","1.f","[]","Optional.empty","\android\widget\EdgeGlow.java"
"TAG","false","false","true","true","true","String","""EdgeGlow""","[]","Optional.empty","\android\widget\EdgeGlow.java"
"mEdgeScaleYStart","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\EdgeGlow.java"
"mGlowAlphaFinish","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\EdgeGlow.java"
"mWidth","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\EdgeGlow.java"
"mStartTime","false","false","true","false","false","long","null","[]","Optional.empty","\android\widget\EdgeGlow.java"
"mEdgeAlphaFinish","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\EdgeGlow.java"
"PULL_DISTANCE_GLOW_FACTOR","false","false","true","true","true","int","5","[]","Optional[// Number determined by user testing.
]","\android\widget\EdgeGlow.java"
"mGlow","false","false","true","false","true","Drawable","null","[]","Optional.empty","\android\widget\EdgeGlow.java"
"PULL_DECAY_TIME","false","false","true","true","true","int","1000","[]","Optional[// Time it will take for a pulled glow to decay to partial strength before release
]","\android\widget\EdgeGlow.java"
"mEdgeAlpha","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\EdgeGlow.java"
"mEdge","false","false","true","false","true","Drawable","null","[]","Optional.empty","\android\widget\EdgeGlow.java"
"STATE_IDLE","false","false","true","true","true","int","0","[]","Optional.empty","\android\widget\EdgeGlow.java"
"HELD_GLOW_ALPHA","false","false","true","true","true","float","0.5f","[]","Optional.empty","\android\widget\EdgeGlow.java"
"mEdgeAlphaStart","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\EdgeGlow.java"
"MAX_GLOW_HEIGHT","false","false","true","true","true","float","3.f","[]","Optional.empty","\android\widget\EdgeGlow.java"
"mEdgeScaleYFinish","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\EdgeGlow.java"
"STATE_ACCEPT","true","false","false","true","true","int","2","[]","Optional[// accept() thread running
]","\android\bluetooth\ScoSocket.java"
"STATE_CONNECTING","true","false","false","true","true","int","3","[]","Optional[// connect() thread running
]","\android\bluetooth\ScoSocket.java"
"mClosedCode","false","false","true","false","false","int","null","[]","Optional.empty","\android\bluetooth\ScoSocket.java"
"mWakeLock","false","false","true","false","false","WakeLock","null","[]","Optional[// held while in STATE_CONNECTING
]","\android\bluetooth\ScoSocket.java"
"STATE_READY","true","false","false","true","true","int","1","[]","Optional[// Ready for use. No threads or sockets
]","\android\bluetooth\ScoSocket.java"
"STATE_CONNECTED","true","false","false","true","true","int","4","[]","Optional[// connected, waiting for close()
]","\android\bluetooth\ScoSocket.java"
"STATE_CLOSED","true","false","false","true","true","int","5","[]","Optional[// was connected, now closed.
]","\android\bluetooth\ScoSocket.java"
"mState","false","false","true","false","false","int","null","[]","Optional.empty","\android\bluetooth\ScoSocket.java"
"VDBG","false","false","true","true","true","boolean","false","[]","Optional[// even more logging
]","\android\bluetooth\ScoSocket.java"
"mHandler","false","false","true","false","false","Handler","null","[]","Optional.empty","\android\bluetooth\ScoSocket.java"
"TAG","false","false","true","true","true","String","""ScoSocket""","[]","Optional.empty","\android\bluetooth\ScoSocket.java"
"DBG","false","false","true","true","true","boolean","true","[]","Optional.empty","\android\bluetooth\ScoSocket.java"
"mNativeData","false","false","true","false","false","int","null","[]","Optional.empty","\android\bluetooth\ScoSocket.java"
"mAcceptedCode","false","false","true","false","false","int","null","[]","Optional.empty","\android\bluetooth\ScoSocket.java"
"mConnectedCode","false","false","true","false","false","int","null","[]","Optional.empty","\android\bluetooth\ScoSocket.java"
"mAcquired","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\os\TokenWatcher.java"
"token","false","false","false","false","false","IBinder","null","[]","Optional.empty","\android\os\TokenWatcher.java"
"mHandler","false","false","true","false","false","Handler","null","[]","Optional.empty","\android\os\TokenWatcher.java"
"mNotificationQueue","false","false","true","false","false","int","-1","[]","Optional.empty","\android\os\TokenWatcher.java"
"tag","false","false","false","false","false","String","null","[]","Optional.empty","\android\os\TokenWatcher.java"
"mNotificationTask","false","false","true","false","false","Runnable","new Runnable() {

    public void run() {
        int value;
        synchronized (mTokens) {
            value = mNotificationQueue;
            mNotificationQueue = -1;
        }
        if (value == 1) {
            acquired();
        } else if (value == 0) {
            released();
        }
    }
}","[]","Optional.empty","\android\os\TokenWatcher.java"
"mTokens","false","false","true","false","false","WeakHashMap<IBinder,Death>","new WeakHashMap<IBinder, Death>()","[]","Optional.empty","\android\os\TokenWatcher.java"
"mTag","false","false","true","false","false","String","null","[]","Optional.empty","\android\os\TokenWatcher.java"
"mPower","false","false","true","false","false","float","null","[]","Optional.empty","\android\hardware\Sensor.java"
"TYPE_PROXIMITY","true","false","false","true","true","int","8","[]","Optional[/**
 * A constant describing an proximity sensor type. See
 * {@link android.hardware.SensorEvent#values SensorEvent.values} for more
 * details.
 */
]","\android\hardware\Sensor.java"
"TYPE_GYROSCOPE","true","false","false","true","true","int","4","[]","Optional[/**
 * A constant describing a gyroscope sensor type
 */
]","\android\hardware\Sensor.java"
"mResolution","false","false","true","false","false","float","null","[]","Optional.empty","\android\hardware\Sensor.java"
"mMinDelay","false","false","true","false","false","int","null","[]","Optional.empty","\android\hardware\Sensor.java"
"mLegacyType","false","false","true","false","false","int","null","[]","Optional.empty","\android\hardware\Sensor.java"
"TYPE_ROTATION_VECTOR","true","false","false","true","true","int","11","[]","Optional[/**
 * A constant describing a rotation vector sensor type.
 * See {@link android.hardware.SensorEvent SensorEvent}
 * for more details.
 */
]","\android\hardware\Sensor.java"
"TYPE_LINEAR_ACCELERATION","true","false","false","true","true","int","10","[]","Optional[/**
 * A constant describing a linear acceleration sensor type.
 * See {@link android.hardware.SensorEvent SensorEvent}
 * for more details.
 */
]","\android\hardware\Sensor.java"
"TYPE_ALL","true","false","false","true","true","int","-1","[]","Optional[/**
 * A constant describing all sensor types.
 */
]","\android\hardware\Sensor.java"
"mHandle","false","false","true","false","false","int","null","[]","Optional.empty","\android\hardware\Sensor.java"
"mVendor","false","false","true","false","false","String","null","[]","Optional.empty","\android\hardware\Sensor.java"
"TYPE_ACCELEROMETER","true","false","false","true","true","int","1","[]","Optional[/**
 * A constant describing an accelerometer sensor type. See
 * {@link android.hardware.SensorEvent#values SensorEvent.values} for more
 * details.
 */
]","\android\hardware\Sensor.java"
"mVersion","false","false","true","false","false","int","null","[]","Optional.empty","\android\hardware\Sensor.java"
"mName","false","false","true","false","false","String","null","[]","Optional[/* Some of these fields are set only by the native bindings in
     * SensorManager.
     */
]","\android\hardware\Sensor.java"
"TYPE_LIGHT","true","false","false","true","true","int","5","[]","Optional[/**
 * A constant describing an light sensor type. See
 * {@link android.hardware.SensorEvent#values SensorEvent.values} for more
 * details.
 */
]","\android\hardware\Sensor.java"
"TYPE_ORIENTATION","true","false","false","true","true","int","3","[@Deprecated]","Optional[/**
 * A constant describing an orientation sensor type. See
 * {@link android.hardware.SensorEvent#values SensorEvent.values} for more
 * details.
 *
 * @deprecated use {@link android.hardware.SensorManager#getOrientation
 * SensorManager.getOrientation()} instead.
 */
]","\android\hardware\Sensor.java"
"TYPE_PRESSURE","true","false","false","true","true","int","6","[]","Optional[/**
 * A constant describing a pressure sensor type
 */
]","\android\hardware\Sensor.java"
"mMaxRange","false","false","true","false","false","float","null","[]","Optional.empty","\android\hardware\Sensor.java"
"TYPE_GRAVITY","true","false","false","true","true","int","9","[]","Optional[/**
 * A constant describing a gravity sensor type.
 * See {@link android.hardware.SensorEvent SensorEvent}
 * for more details.
 */
]","\android\hardware\Sensor.java"
"mType","false","false","true","false","false","int","null","[]","Optional.empty","\android\hardware\Sensor.java"
"TYPE_MAGNETIC_FIELD","true","false","false","true","true","int","2","[]","Optional[/**
 * A constant describing a magnetic field sensor type. See
 * {@link android.hardware.SensorEvent#values SensorEvent.values} for more
 * details.
 */
]","\android\hardware\Sensor.java"
"TYPE_TEMPERATURE","true","false","false","true","true","int","7","[]","Optional[/**
 * A constant describing a temperature sensor type
 */
]","\android\hardware\Sensor.java"
"mIsClosed","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\content\CursorEntityIterator.java"
"mCursor","false","false","true","false","true","Cursor","null","[]","Optional.empty","\android\content\CursorEntityIterator.java"
"mRemote","false","false","true","false","false","IBinder","null","[]","Optional.empty","\android\database\BulkCursorNative.java"
"mExtras","false","false","true","false","false","Bundle","null","[]","Optional.empty","\android\database\BulkCursorNative.java"
"DEG_TO_RAD","false","false","true","true","true","float","3.1415926f / 180.0f","[]","Optional.empty","\android\util\MathUtils.java"
"RAD_TO_DEG","false","false","true","true","true","float","180.0f / 3.1415926f","[]","Optional.empty","\android\util\MathUtils.java"
"sRandom","false","false","true","true","true","Random","new Random()","[]","Optional.empty","\android\util\MathUtils.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<LlcpPacket>","new Parcelable.Creator<LlcpPacket>() {

    public LlcpPacket createFromParcel(Parcel in) {
        // Remote SAP
        short sap = (short) in.readInt();
        // Data Buffer
        int dataLength = in.readInt();
        byte[] data = new byte[dataLength];
        in.readByteArray(data);
        return new LlcpPacket(sap, data);
    }

    public LlcpPacket[] newArray(int size) {
        return new LlcpPacket[size];
    }
}","[]","Optional.empty","\android\nfc\LlcpPacket.java"
"mRemoteSap","false","false","true","false","true","int","null","[]","Optional.empty","\android\nfc\LlcpPacket.java"
"mDataBuffer","false","false","true","false","true","byte","null","[]","Optional.empty","\android\nfc\LlcpPacket.java"
"EXTRA_DSFID","true","false","false","true","true","String","""dsfid""","[]","Optional[/**
 * @hide
 */
]","\android\nfc\tech\NfcV.java"
"mDsfId","false","false","true","false","false","byte","null","[]","Optional.empty","\android\nfc\tech\NfcV.java"
"mRespFlags","false","false","true","false","false","byte","null","[]","Optional.empty","\android\nfc\tech\NfcV.java"
"EXTRA_RESP_FLAGS","true","false","false","true","true","String","""respflags""","[]","Optional[/**
 * @hide
 */
]","\android\nfc\tech\NfcV.java"
"mWhereClause","false","false","true","false","false","StringBuilder","null","[]","Optional[// lazily created
]","\android\database\sqlite\SQLiteQueryBuilder.java"
"mDistinct","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\database\sqlite\SQLiteQueryBuilder.java"
"mProjectionMap","false","false","true","false","false","Map<String,String>","null","[]","Optional.empty","\android\database\sqlite\SQLiteQueryBuilder.java"
"mFactory","false","false","true","false","false","SQLiteDatabase.CursorFactory","null","[]","Optional.empty","\android\database\sqlite\SQLiteQueryBuilder.java"
"mStrictProjectionMap","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\database\sqlite\SQLiteQueryBuilder.java"
"TAG","false","false","true","true","true","String","""SQLiteQueryBuilder""","[]","Optional.empty","\android\database\sqlite\SQLiteQueryBuilder.java"
"sLimitPattern","false","false","true","true","true","Pattern","Pattern.compile(""\\s*\\d+\\s*(,\\s*\\d+\\s*)?"")","[]","Optional.empty","\android\database\sqlite\SQLiteQueryBuilder.java"
"mTables","false","false","true","false","false","String","""""","[]","Optional.empty","\android\database\sqlite\SQLiteQueryBuilder.java"
"decodedChars","false","false","true","false","false","CharBuffer","null","[]","Optional[/**
 * A buffer that is initialized when raw bytes are first written to this
 * stream. Between writes this buffer is always clear; ie. the position is
 * zero and the limit is the capacity.
 */
]","\com\android\internal\os\LoggingPrintStream.java"
"builder","false","false","true","false","true","StringBuilder","new StringBuilder()","[]","Optional.empty","\com\android\internal\os\LoggingPrintStream.java"
"formatter","false","false","true","false","true","Formatter","new Formatter(builder, null)","[]","Optional.empty","\com\android\internal\os\LoggingPrintStream.java"
"encodedBytes","false","false","true","false","false","ByteBuffer","null","[]","Optional[/**
 * A buffer that is initialized when raw bytes are first written to this
 * stream. It may contain the leading bytes of multi-byte characters.
 * Between writes this buffer is always ready to receive data; ie. the
 * position is at the first unassigned byte and the limit is the capacity.
 */
]","\com\android\internal\os\LoggingPrintStream.java"
"decoder","false","false","true","false","false","CharsetDecoder","null","[]","Optional[/**
 * Decodes bytes to characters using the system default charset. Initialized
 * when raw bytes are first written to this stream.
 */
]","\com\android\internal\os\LoggingPrintStream.java"
"gApplicationLoaders","false","false","true","true","true","ApplicationLoaders","new ApplicationLoaders()","[]","Optional.empty","\android\app\ApplicationLoaders.java"
"mLoaders","false","false","true","false","true","Map<String,ClassLoader>","new HashMap<String, ClassLoader>()","[]","Optional.empty","\android\app\ApplicationLoaders.java"
"FLAG_SELECTING","true","false","false","true","true","int","0x0002","[]","Optional[/**
 * Bit for {@link #flags}: set if the editor is currently in selection mode.
 */
]","\android\view\inputmethod\ExtractedText.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<ExtractedText>","new Parcelable.Creator<ExtractedText>() {

    public ExtractedText createFromParcel(Parcel source) {
        ExtractedText res = new ExtractedText();
        res.text = TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(source);
        res.startOffset = source.readInt();
        res.partialStartOffset = source.readInt();
        res.partialEndOffset = source.readInt();
        res.selectionStart = source.readInt();
        res.selectionEnd = source.readInt();
        res.flags = source.readInt();
        return res;
    }

    public ExtractedText[] newArray(int size) {
        return new ExtractedText[size];
    }
}","[]","Optional[/**
 * Used to make this class parcelable.
 */
]","\android\view\inputmethod\ExtractedText.java"
"selectionStart","true","false","false","false","false","int","null","[]","Optional[/**
 * The offset where the selection currently starts within the extracted
 * text.  The real selection start position is at
 * <var>startOffset</var>+<var>selectionStart</var>.
 */
]","\android\view\inputmethod\ExtractedText.java"
"startOffset","true","false","false","false","false","int","null","[]","Optional[/**
 * The offset in the overall text at which the extracted text starts.
 */
]","\android\view\inputmethod\ExtractedText.java"
"partialStartOffset","true","false","false","false","false","int","null","[]","Optional[/**
 * If the content is a report of a partial text change, this is the
 * offset where the change starts and it runs until
 * {@link #partialEndOffset}.  If the content is the full text, this
 * field is -1.
 */
]","\android\view\inputmethod\ExtractedText.java"
"text","true","false","false","false","false","CharSequence","null","[]","Optional[/**
 * The text that has been extracted.
 */
]","\android\view\inputmethod\ExtractedText.java"
"flags","true","false","false","false","false","int","null","[]","Optional[/**
 * Additional bit flags of information about the edited text.
 */
]","\android\view\inputmethod\ExtractedText.java"
"selectionEnd","true","false","false","false","false","int","null","[]","Optional[/**
 * The offset where the selection currently ends within the extracted
 * text.  The real selection end position is at
 * <var>startOffset</var>+<var>selectionEnd</var>.
 */
]","\android\view\inputmethod\ExtractedText.java"
"FLAG_SINGLE_LINE","true","false","false","true","true","int","0x0001","[]","Optional[/**
 * Bit for {@link #flags}: set if the text being edited can only be on
 * a single line.
 */
]","\android\view\inputmethod\ExtractedText.java"
"partialEndOffset","true","false","false","false","false","int","null","[]","Optional[/**
 * If the content is a report of a partial text change, this is the offset
 * where the change ends.  Note that the actual text may be larger or
 * smaller than the difference between this and {@link #partialEndOffset},
 * meaning a reduction or increase, respectively, in the total text.
 */
]","\android\view\inputmethod\ExtractedText.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<AbsSavedState>","new Parcelable.Creator<AbsSavedState>() {

    public AbsSavedState createFromParcel(Parcel in) {
        Parcelable superState = in.readParcelable(null);
        if (superState != null) {
            throw new IllegalStateException(""superState must be null"");
        }
        return EMPTY_STATE;
    }

    public AbsSavedState[] newArray(int size) {
        return new AbsSavedState[size];
    }
}","[]","Optional.empty","\android\view\AbsSavedState.java"
"mSuperState","false","false","true","false","true","Parcelable","null","[]","Optional.empty","\android\view\AbsSavedState.java"
"EMPTY_STATE","true","false","false","true","true","AbsSavedState","new AbsSavedState() {
}","[]","Optional.empty","\android\view\AbsSavedState.java"
"mIcon","false","false","false","false","false","ImageView","null","[]","Optional.empty","\android\widget\DialerFilter.java"
"mInputFilters","false","false","false","false","false","InputFilter","null","[]","Optional.empty","\android\widget\DialerFilter.java"
"mHint","false","false","false","false","false","EditText","null","[]","Optional.empty","\android\widget\DialerFilter.java"
"mIsQwerty","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\DialerFilter.java"
"LETTERS_ONLY","true","false","false","true","true","int","5","[]","Optional[/**
 * This mode has only the letters line
 */
]","\android\widget\DialerFilter.java"
"DIGITS_AND_LETTERS","true","false","false","true","true","int","1","[]","Optional[/**
 * This mode has both lines
 */
]","\android\widget\DialerFilter.java"
"DIGITS_ONLY","true","false","false","true","true","int","4","[]","Optional[/**
 * This mode has only the digits line
 */
]","\android\widget\DialerFilter.java"
"mPrimary","false","false","false","false","false","EditText","null","[]","Optional.empty","\android\widget\DialerFilter.java"
"mMode","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\DialerFilter.java"
"DIGITS_AND_LETTERS_NO_DIGITS","true","false","false","true","true","int","2","[]","Optional[/**
 * This mode is when after starting in {@link #DIGITS_AND_LETTERS} mode the filter
 * has removed all possibility of the digits matching, leaving only the letters line
 */
]","\android\widget\DialerFilter.java"
"mDigits","false","false","false","false","false","EditText","null","[]","Optional.empty","\android\widget\DialerFilter.java"
"mLetters","false","false","false","false","false","EditText","null","[]","Optional.empty","\android\widget\DialerFilter.java"
"DIGITS_AND_LETTERS_NO_LETTERS","true","false","false","true","true","int","3","[]","Optional[/**
 * This mode is when after starting in {@link #DIGITS_AND_LETTERS} mode the filter
 * has removed all possibility of the letters matching, leaving only the digits line
 */
]","\android\widget\DialerFilter.java"
"mHandle","false","true","false","false","false","int","null","[]","Optional[/**
 * The handle returned by the NFC service and used to identify the LLCP
 * socket in every call of this class.
 */
]","\com\android\internal\nfc\LlcpSocket.java"
"TAG","false","false","true","true","true","String","""LlcpSocket""","[]","Optional.empty","\com\android\internal\nfc\LlcpSocket.java"
"mService","false","true","false","false","false","ILlcpSocket","null","[]","Optional[/**
 * The entry point for LLCP socket operations.
 */
]","\com\android\internal\nfc\LlcpSocket.java"
"mObservers","false","true","false","false","true","ArrayList<T>","new ArrayList<T>()","[]","Optional[/**
 * The list of observers.  An observer can be in the list at most
 * once and will never be null.
 */
]","\android\database\Observable.java"
"nextChar","false","false","true","false","false","int","null","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"TAGS","false","false","true","true","true","String","""tags""","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"ch","false","false","true","false","false","char","null","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"photo","false","false","true","false","false","String","null","[]","Optional[// null for user album
]","\com\google\android\util\AbstractMessageParser.java"
"SETS","false","false","true","true","true","String","""sets""","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"stringRep","false","false","true","false","false","String","null","[]","Optional[// For the other types, code depends on their stringreps
]","\com\google\android\util\AbstractMessageParser.java"
"musicNote","true","false","false","true","true","String","""\u266B ""","[]","Optional[/**
 * Music note that indicates user is listening to a music track.
 */
]","\com\google\android\util\AbstractMessageParser.java"
"parseUrls","false","false","true","false","false","boolean","null","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"parts","false","false","true","false","false","ArrayList<Part>","null","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"nextClass","false","false","true","false","false","int","null","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"GROUPING_PATTERN","false","false","true","true","true","Pattern","Pattern.compile(""http://(?:www.)?flickr.com/photos/([^/?#&]+)/(tags|sets)/"" + ""([^/?#&]+)/?"")","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"parseSmilies","false","false","true","false","false","boolean","null","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"start","false","false","true","false","false","boolean","null","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"formatStart","false","false","true","false","false","HashMap<Character,Format>","null","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"parseFormatting","false","false","true","false","false","boolean","null","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"parseMeText","false","false","true","false","false","boolean","null","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"type","false","true","false","false","false","Type","null","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"children","false","false","true","false","true","HashMap<Character,TrieNode>","new HashMap<Character, TrieNode>()","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"text","false","false","true","false","false","String","null","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"grouping","false","false","true","false","false","String","null","[]","Optional[// either ""tags"" or ""sets""
]","\com\google\android\util\AbstractMessageParser.java"
"matched","false","false","true","false","false","boolean","null","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"meText","false","false","true","false","false","String","null","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"parseAcronyms","false","false","true","false","false","boolean","null","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"url","false","false","true","false","false","String","null","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"URL_PATTERN","false","false","true","true","true","Pattern","Pattern.compile(""http://(?:www.)?flickr.com/photos/([^/?#&]+)/?([^/?#&]+)?/?.*"")","[]","Optional[/**
 * Pattern for a user album or photo URL.
 */
]","\com\google\android\util\AbstractMessageParser.java"
"groupingId","false","false","true","false","false","String","null","[]","Optional[// sets or tags identifier
]","\com\google\android\util\AbstractMessageParser.java"
"html","false","false","true","false","false","String","null","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"parseMusic","false","false","true","false","false","boolean","null","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"tokens","false","false","true","false","false","ArrayList<Token>","null","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"track","false","false","true","false","false","String","null","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"value","false","false","true","false","false","String","null","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"docid","false","false","true","false","false","String","null","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"album","false","false","true","false","false","String","null","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"user","false","false","true","false","false","String","null","[]","Optional.empty","\com\google\android\util\AbstractMessageParser.java"
"rowCount","false","false","true","false","false","int","0","[]","Optional.empty","\android\database\MatrixCursor.java"
"columnNames","false","false","true","false","true","String","null","[]","Optional.empty","\android\database\MatrixCursor.java"
"endIndex","false","false","true","false","true","int","null","[]","Optional.empty","\android\database\MatrixCursor.java"
"index","false","false","true","false","false","int","null","[]","Optional.empty","\android\database\MatrixCursor.java"
"data","false","false","true","false","false","Object","null","[]","Optional.empty","\android\database\MatrixCursor.java"
"columnCount","false","false","true","false","true","int","null","[]","Optional.empty","\android\database\MatrixCursor.java"
"WEB_URL","true","false","false","true","true","Pattern","Pattern.compile(""((?:(http|https|Http|Https|rtsp|Rtsp):\\/\\/(?:(?:[a-zA-Z0-9\\$\\-\\_\\.\\+\\!\\*\\'\\(\\)"" + ""\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,64}(?:\\:(?:[a-zA-Z0-9\\$\\-\\_"" + ""\\.\\+\\!\\*\\'\\(\\)\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,25})?\\@)?)?"" + ""((?:(?:["" + GOOD_IRI_CHAR + ""]["" + GOOD_IRI_CHAR + // named host
""\\-]{0,64}\\.)+"" + TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL + // or ip address
""|(?:(?:25[0-5]|2[0-4]"" + ""[0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9])\\.(?:25[0-5]|2[0-4][0-9]"" + ""|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(?:25[0-5]|2[0-4][0-9]|[0-1]"" + ""[0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}"" + ""|[1-9][0-9]|[0-9])))"" + // plus option port number
""(?:\\:\\d{1,5})?)"" + ""(\\/(?:(?:["" + GOOD_IRI_CHAR + // plus option query params
""\\;\\/\\?\\:\\@\\&\\=\\#\\~"" + ""\\-\\.\\+\\!\\*\\'\\(\\)\\,\\_])|(?:\\%[a-fA-F0-9]{2}))*)?"" + // and finally, a word boundary or end of
""(?:\\b|$)"")","[]","Optional[/**
 * Regular expression pattern to match most part of RFC 3987
 * Internationalized URLs, aka IRIs.  Commonly used Unicode characters are
 * added.
 */
]","\android\util\Patterns.java"
"EMAIL_ADDRESS","true","false","false","true","true","Pattern","Pattern.compile(""[a-zA-Z0-9\\+\\.\\_\\%\\-\\+]{1,256}"" + ""\\@"" + ""[a-zA-Z0-9][a-zA-Z0-9\\-]{0,64}"" + ""("" + ""\\."" + ""[a-zA-Z0-9][a-zA-Z0-9\\-]{0,25}"" + "")+"")","[]","Optional.empty","\android\util\Patterns.java"
"TOP_LEVEL_DOMAIN","true","false","false","true","true","Pattern","Pattern.compile(TOP_LEVEL_DOMAIN_STR)","[]","Optional[/**
 * Regular expression pattern to match all IANA top-level domains.
 */
]","\android\util\Patterns.java"
"TOP_LEVEL_DOMAIN_STR","true","false","false","true","true","String","""((aero|arpa|asia|a[cdefgilmnoqrstuwxz])"" + ""|(biz|b[abdefghijmnorstvwyz])"" + ""|(cat|com|coop|c[acdfghiklmnoruvxyz])"" + ""|d[ejkmoz]"" + ""|(edu|e[cegrstu])"" + ""|f[ijkmor]"" + ""|(gov|g[abdefghilmnpqrstuwy])"" + ""|h[kmnrtu]"" + ""|(info|int|i[delmnoqrst])"" + ""|(jobs|j[emop])"" + ""|k[eghimnprwyz]"" + ""|l[abcikrstuvy]"" + ""|(mil|mobi|museum|m[acdeghklmnopqrstuvwxyz])"" + ""|(name|net|n[acefgilopruz])"" + ""|(org|om)"" + ""|(pro|p[aefghklmnrstwy])"" + ""|qa"" + ""|r[eosuw]"" + ""|s[abcdeghijklmnortuvyz]"" + ""|(tel|travel|t[cdfghjklmnoprtvwz])"" + ""|u[agksyz]"" + ""|v[aceginu]"" + ""|w[fs]"" + ""|(xn\\-\\-0zwm56d|xn\\-\\-11b5bs3a9aj6g|xn\\-\\-80akhbyknj4f|xn\\-\\-9t4b11yi5a|xn\\-\\-deba0ad|xn\\-\\-g6w251d|xn\\-\\-hgbk6aj7f53bba|xn\\-\\-hlcj6aya9esc7a|xn\\-\\-jxalpdlp|xn\\-\\-kgbechtv|xn\\-\\-zckzah)"" + ""|y[etu]"" + ""|z[amw])""","[]","Optional[/**
 * Regular expression to match all IANA top-level domains.
 * List accurate as of 2010/02/05.  List taken from:
 * http://data.iana.org/TLD/tlds-alpha-by-domain.txt
 * This pattern is auto-generated by frameworks/base/common/tools/make-iana-tld-pattern.py
 */
]","\android\util\Patterns.java"
"TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL","true","false","false","true","true","String","""(?:"" + ""(?:aero|arpa|asia|a[cdefgilmnoqrstuwxz])"" + ""|(?:biz|b[abdefghijmnorstvwyz])"" + ""|(?:cat|com|coop|c[acdfghiklmnoruvxyz])"" + ""|d[ejkmoz]"" + ""|(?:edu|e[cegrstu])"" + ""|f[ijkmor]"" + ""|(?:gov|g[abdefghilmnpqrstuwy])"" + ""|h[kmnrtu]"" + ""|(?:info|int|i[delmnoqrst])"" + ""|(?:jobs|j[emop])"" + ""|k[eghimnprwyz]"" + ""|l[abcikrstuvy]"" + ""|(?:mil|mobi|museum|m[acdeghklmnopqrstuvwxyz])"" + ""|(?:name|net|n[acefgilopruz])"" + ""|(?:org|om)"" + ""|(?:pro|p[aefghklmnrstwy])"" + ""|qa"" + ""|r[eosuw]"" + ""|s[abcdeghijklmnortuvyz]"" + ""|(?:tel|travel|t[cdfghjklmnoprtvwz])"" + ""|u[agksyz]"" + ""|v[aceginu]"" + ""|w[fs]"" + ""|(?:xn\\-\\-0zwm56d|xn\\-\\-11b5bs3a9aj6g|xn\\-\\-80akhbyknj4f|xn\\-\\-9t4b11yi5a|xn\\-\\-deba0ad|xn\\-\\-g6w251d|xn\\-\\-hgbk6aj7f53bba|xn\\-\\-hlcj6aya9esc7a|xn\\-\\-jxalpdlp|xn\\-\\-kgbechtv|xn\\-\\-zckzah)"" + ""|y[etu]"" + ""|z[amw]))""","[]","Optional[/**
 * Regular expression to match all IANA top-level domains for WEB_URL.
 * List accurate as of 2010/02/05.  List taken from:
 * http://data.iana.org/TLD/tlds-alpha-by-domain.txt
 * This pattern is auto-generated by frameworks/base/common/tools/make-iana-tld-pattern.py
 */
]","\android\util\Patterns.java"
"DOMAIN_NAME","true","false","false","true","true","Pattern","Pattern.compile(""((((["" + GOOD_IRI_CHAR + ""]["" + GOOD_IRI_CHAR + ""\\-]*)*["" + GOOD_IRI_CHAR + ""]\\.)+"" + TOP_LEVEL_DOMAIN + "")|"" + IP_ADDRESS + "")"")","[]","Optional.empty","\android\util\Patterns.java"
"GOOD_IRI_CHAR","true","false","false","true","true","String","""a-zA-Z0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF""","[]","Optional[/**
 * Good characters for Internationalized Resource Identifiers (IRI).
 * This comprises most common used Unicode characters allowed in IRI
 * as detailed in RFC 3987.
 * Specifically, those two byte Unicode characters are not included.
 */
]","\android\util\Patterns.java"
"PHONE","true","false","false","true","true","Pattern","// sdd = space, dot, or dash
Pattern.compile(// +<digits><sdd>*
""(\\+[0-9]+[\\- \\.]*)?"" + // (<digits>)<sdd>*
""(\\([0-9]+\\)[\\- \\.]*)?"" + // <digit><digit|sdd>+<digit>
""([0-9][0-9\\- \\.][0-9\\- \\.]+[0-9])"")","[]","Optional[/**
 * This pattern is intended for searching for things that look like they
 * might be phone numbers in arbitrary text, not for validating whether
 * something is in fact a phone number.  It will miss many things that
 * are legitimate phone numbers.
 *
 * <p> The pattern matches the following:
 * <ul>
 * <li>Optionally, a + sign followed immediately by one or more digits. Spaces, dots, or dashes
 * may follow.
 * <li>Optionally, sets of digits in parentheses, separated by spaces, dots, or dashes.
 * <li>A string starting and ending with a digit, containing digits, spaces, dots, and/or dashes.
 * </ul>
 */
]","\android\util\Patterns.java"
"IP_ADDRESS","true","false","false","true","true","Pattern","Pattern.compile(""((25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9])\\.(25[0-5]|2[0-4]"" + ""[0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]"" + ""[0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}"" + ""|[1-9][0-9]|[0-9]))"")","[]","Optional.empty","\android\util\Patterns.java"
"mProxyPassword","false","false","true","false","false","String","null","[]","Optional[/**
 * Proxy password if known (used for pre-emptive proxy authentication).
 */
]","\android\webkit\Network.java"
"mProxyUsername","false","false","true","false","false","String","null","[]","Optional[/**
 * Proxy username if known (used for pre-emptive proxy authentication).
 */
]","\android\webkit\Network.java"
"mRequestQueue","false","false","true","false","false","RequestQueue","null","[]","Optional[/**
 * Network request queue (requests are added from the browser thread).
 */
]","\android\webkit\Network.java"
"sPlatformNotifications","false","false","true","true","false","boolean","null","[]","Optional[/**
 * Flag to store the state of platform notifications, for the case
 * when the Network object has not been constructed yet
 */
]","\android\webkit\Network.java"
"mSslErrorHandler","false","false","true","false","false","SslErrorHandler","null","[]","Optional[/**
 * SSL error handler: takes care of synchronization of multiple async
 * loaders with SSL-related problems.
 */
]","\android\webkit\Network.java"
"sNetwork","false","false","true","true","false","Network","null","[]","Optional[/**
 * Static instance of a Network object.
 */
]","\android\webkit\Network.java"
"mHttpAuthHandler","false","false","true","false","false","HttpAuthHandler","null","[]","Optional[/**
 * HTTP authentication handler: takes care of synchronization of HTTP
 * authentication requests.
 */
]","\android\webkit\Network.java"
"sPlatformNotificationEnableRefCount","false","false","true","true","false","int","null","[]","Optional[/**
 * Reference count for platform notifications as the network class is a
 * static and can exist over multiple activities, thus over multiple
 * onPause/onResume pairs.
 */
]","\android\webkit\Network.java"
"LOGTAG","false","false","true","true","true","String","""network""","[]","Optional.empty","\android\webkit\Network.java"
"mPivotXType","false","false","true","false","false","int","ABSOLUTE","[]","Optional.empty","\android\view\animation\RotateAnimation.java"
"mFromDegrees","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\animation\RotateAnimation.java"
"mPivotYValue","false","false","true","false","false","float","0.0f","[]","Optional.empty","\android\view\animation\RotateAnimation.java"
"mPivotYType","false","false","true","false","false","int","ABSOLUTE","[]","Optional.empty","\android\view\animation\RotateAnimation.java"
"mToDegrees","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\animation\RotateAnimation.java"
"mPivotX","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\animation\RotateAnimation.java"
"mPivotY","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\animation\RotateAnimation.java"
"mPivotXValue","false","false","true","false","false","float","0.0f","[]","Optional.empty","\android\view\animation\RotateAnimation.java"
"mMenu","false","false","true","false","false","MenuBuilder","null","[]","Optional.empty","\com\android\internal\view\menu\ExpandedMenuView.java"
"mAnimations","false","false","true","false","false","int","null","[]","Optional[/**
 * Default animations for this menu
 */
]","\com\android\internal\view\menu\ExpandedMenuView.java"
"mSql","false","false","false","false","true","String","null","[]","Optional[/* package */
]","\android\database\sqlite\SQLiteProgram.java"
"nStatement","false","true","false","false","false","int","0","[@Deprecated]","Optional[/**
 * SQLiteCompiledSql statement id is populated with the corresponding object from the above
 * member. This member is used by the native_bind_* methods
 * @deprecated do not use this
 */
]","\android\database\sqlite\SQLiteProgram.java"
"mCompiledSql","false","false","true","false","false","SQLiteCompiledSql","null","[]","Optional[/**
 * the SQLiteCompiledSql object for the given sql statement.
 */
]","\android\database\sqlite\SQLiteProgram.java"
"mDatabase","false","true","false","false","false","SQLiteDatabase","null","[@Deprecated]","Optional[/**
 * The database this program is compiled against.
 * @deprecated do not use this
 */
]","\android\database\sqlite\SQLiteProgram.java"
"nHandle","false","true","false","false","false","int","0","[@Deprecated]","Optional[/**
 * Native linkage, do not modify. This comes from the database and should not be modified
 * in here or in the native code.
 * @deprecated do not use this
 */
]","\android\database\sqlite\SQLiteProgram.java"
"TAG","false","false","true","true","true","String","""SQLiteProgram""","[]","Optional.empty","\android\database\sqlite\SQLiteProgram.java"
"response","true","false","false","false","false","String","null","[]","Optional.empty","\android\net\ParseException.java"
"mFromAlpha","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\animation\AlphaAnimation.java"
"mToAlpha","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\animation\AlphaAnimation.java"
"CREATOR","true","false","false","true","true","Creator<AccountAuthenticatorResponse>","new Creator<AccountAuthenticatorResponse>() {

    public AccountAuthenticatorResponse createFromParcel(Parcel source) {
        return new AccountAuthenticatorResponse(source);
    }

    public AccountAuthenticatorResponse[] newArray(int size) {
        return new AccountAuthenticatorResponse[size];
    }
}","[]","Optional.empty","\android\accounts\AccountAuthenticatorResponse.java"
"mAccountAuthenticatorResponse","false","false","true","false","false","IAccountAuthenticatorResponse","null","[]","Optional.empty","\android\accounts\AccountAuthenticatorResponse.java"
"TAG","false","false","true","true","true","String","""AccountAuthenticator""","[]","Optional.empty","\android\accounts\AccountAuthenticatorResponse.java"
"TRANSACTION_getMountedObbPath","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 24","[]","Optional.empty","\android\os\storage\IMountService.java"
"TRANSACTION_isObbMounted","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 23","[]","Optional.empty","\android\os\storage\IMountService.java"
"TRANSACTION_getStorageUsers","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 8","[]","Optional.empty","\android\os\storage\IMountService.java"
"TRANSACTION_formatVolume","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 7","[]","Optional.empty","\android\os\storage\IMountService.java"
"TRANSACTION_getSecureContainerList","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 18","[]","Optional.empty","\android\os\storage\IMountService.java"
"TRANSACTION_mountObb","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 21","[]","Optional.empty","\android\os\storage\IMountService.java"
"TRANSACTION_isSecureContainerMounted","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 15","[]","Optional.empty","\android\os\storage\IMountService.java"
"TRANSACTION_unmountObb","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 22","[]","Optional.empty","\android\os\storage\IMountService.java"
"TRANSACTION_setUsbMassStorageEnabled","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 3","[]","Optional.empty","\android\os\storage\IMountService.java"
"TRANSACTION_finalizeSecureContainer","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 11","[]","Optional.empty","\android\os\storage\IMountService.java"
"TRANSACTION_createSecureContainer","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 10","[]","Optional.empty","\android\os\storage\IMountService.java"
"TRANSACTION_unmountSecureContainer","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 14","[]","Optional.empty","\android\os\storage\IMountService.java"
"mRemote","false","false","true","false","false","IBinder","null","[]","Optional.empty","\android\os\storage\IMountService.java"
"TRANSACTION_getSecureContainerPath","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 17","[]","Optional.empty","\android\os\storage\IMountService.java"
"TRANSACTION_unmountVolume","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 6","[]","Optional.empty","\android\os\storage\IMountService.java"
"TRANSACTION_renameSecureContainer","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 16","[]","Optional.empty","\android\os\storage\IMountService.java"
"TRANSACTION_mountSecureContainer","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 13","[]","Optional.empty","\android\os\storage\IMountService.java"
"DESCRIPTOR","false","false","true","true","true","String","""IMountService""","[]","Optional.empty","\android\os\storage\IMountService.java"
"TRANSACTION_isUsbMassStorageConnected","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 2","[]","Optional.empty","\android\os\storage\IMountService.java"
"TRANSACTION_finishMediaUpdate","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 20","[]","Optional.empty","\android\os\storage\IMountService.java"
"TRANSACTION_destroySecureContainer","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 12","[]","Optional.empty","\android\os\storage\IMountService.java"
"TRANSACTION_isUsbMassStorageEnabled","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 4","[]","Optional.empty","\android\os\storage\IMountService.java"
"TRANSACTION_unregisterListener","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 1","[]","Optional.empty","\android\os\storage\IMountService.java"
"TRANSACTION_getVolumeState","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 9","[]","Optional.empty","\android\os\storage\IMountService.java"
"TRANSACTION_registerListener","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 0","[]","Optional.empty","\android\os\storage\IMountService.java"
"TRANSACTION_mountVolume","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 5","[]","Optional.empty","\android\os\storage\IMountService.java"
"TRANSACTION_shutdown","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 19","[]","Optional.empty","\android\os\storage\IMountService.java"
"PATH","false","false","true","true","true","String","""path""","[]","Optional.empty","\android\webkit\CookieManager.java"
"path","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\CookieManager.java"
"MAX_DOMAIN_COUNT","false","false","true","true","true","int","200","[]","Optional[// domain, we set 200 as max base domain count
]","\android\webkit\CookieManager.java"
"domain","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\CookieManager.java"
"DOMAIN","false","false","true","true","true","String","""domain""","[]","Optional.empty","\android\webkit\CookieManager.java"
"COMPARATOR","false","false","true","true","true","CookieComparator","new CookieComparator()","[]","Optional.empty","\android\webkit\CookieManager.java"
"MAX_AGE","false","false","true","true","true","String","""max-age""","[]","Optional.empty","\android\webkit\CookieManager.java"
"BAD_COUNTRY_2LDS","false","false","true","true","true","String","{ ""ac"", ""co"", ""com"", ""ed"", ""edu"", ""go"", ""gouv"", ""gov"", ""info"", ""lg"", ""ne"", ""net"", ""or"", ""org"" }","[]","Optional[/**
 * This contains a list of 2nd-level domains that aren't allowed to have
 * wildcards when combined with country-codes. For example: [.co.uk].
 */
]","\android\webkit\CookieManager.java"
"mCookieMap","false","false","true","false","false","Map<String,ArrayList<Cookie>>","new LinkedHashMap<String, ArrayList<Cookie>>(MAX_DOMAIN_COUNT, 0.75f, true)","[]","Optional.empty","\android\webkit\CookieManager.java"
"MAX_COOKIE_COUNT_PER_BASE_DOMAIN","false","false","true","true","true","int","50","[]","Optional[// domain, we allow 50 per base domain
]","\android\webkit\CookieManager.java"
"secure","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\webkit\CookieManager.java"
"MAX_RAM_DOMAIN_COUNT","false","false","true","true","true","int","15","[]","Optional[// max domain count to limit RAM cookie takes less than 100k,
]","\android\webkit\CookieManager.java"
"name","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\CookieManager.java"
"lastUpdateTime","false","false","false","false","false","long","null","[]","Optional.empty","\android\webkit\CookieManager.java"
"expires","false","false","false","false","false","long","null","[]","Optional.empty","\android\webkit\CookieManager.java"
"HTTPS","false","false","true","true","true","String","""https""","[]","Optional.empty","\android\webkit\CookieManager.java"
"QUOTATION","false","false","true","true","true","char","'\""'","[]","Optional.empty","\android\webkit\CookieManager.java"
"EQUAL","false","false","true","true","true","char","'='","[]","Optional.empty","\android\webkit\CookieManager.java"
"SECURE_LENGTH","false","false","true","true","true","int","SECURE.length()","[]","Optional.empty","\android\webkit\CookieManager.java"
"HTTP_ONLY_LENGTH","false","false","true","true","true","int","HTTP_ONLY.length()","[]","Optional.empty","\android\webkit\CookieManager.java"
"SECURE","false","false","true","true","true","String","""secure""","[]","Optional.empty","\android\webkit\CookieManager.java"
"lastAcessTime","false","false","false","false","false","long","null","[]","Optional.empty","\android\webkit\CookieManager.java"
"sRef","false","false","true","true","false","CookieManager","null","[]","Optional.empty","\android\webkit\CookieManager.java"
"SEMICOLON","false","false","true","true","true","char","';'","[]","Optional.empty","\android\webkit\CookieManager.java"
"MODE_NEW","false","false","false","true","true","byte","0","[]","Optional.empty","\android\webkit\CookieManager.java"
"MAX_COOKIE_LENGTH","false","false","true","true","true","int","4 * 1024","[]","Optional[// RFC2109 defines 4k as maximum size of a cookie
]","\android\webkit\CookieManager.java"
"PATH_DELIM","false","false","true","true","true","char","'/'","[]","Optional.empty","\android\webkit\CookieManager.java"
"MODE_NORMAL","false","false","false","true","true","byte","1","[]","Optional.empty","\android\webkit\CookieManager.java"
"COMMA","false","false","true","true","true","char","','","[]","Optional.empty","\android\webkit\CookieManager.java"
"MODE_REPLACED","false","false","false","true","true","byte","3","[]","Optional.empty","\android\webkit\CookieManager.java"
"mode","false","false","false","false","false","byte","null","[]","Optional.empty","\android\webkit\CookieManager.java"
"QUESTION_MARK","false","false","true","true","true","char","'?'","[]","Optional.empty","\android\webkit\CookieManager.java"
"HTTP_ONLY","false","false","true","true","true","String","""httponly""","[]","Optional.empty","\android\webkit\CookieManager.java"
"WHITE_SPACE","false","false","true","true","true","char","' '","[]","Optional.empty","\android\webkit\CookieManager.java"
"mAcceptCookie","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\webkit\CookieManager.java"
"PERIOD","false","false","true","true","true","char","'.'","[]","Optional.empty","\android\webkit\CookieManager.java"
"EXPIRES","false","false","true","true","true","String","""expires""","[]","Optional.empty","\android\webkit\CookieManager.java"
"value","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\CookieManager.java"
"MODE_DELETED","false","false","false","true","true","byte","2","[]","Optional.empty","\android\webkit\CookieManager.java"
"MAX_RAM_COOKIES_COUNT","false","false","true","true","true","int","1000","[]","Optional[// average cookie entry size is less than 100 bytes
]","\android\webkit\CookieManager.java"
"LOGTAG","false","false","true","true","true","String","""webkit""","[]","Optional.empty","\android\webkit\CookieManager.java"
"MAX_WAIT_TIME_MILLIS","false","false","true","true","true","int","2000","[]","Optional.empty","\com\android\internal\view\InputConnectionWrapper.java"
"mTextBeforeCursor","true","false","false","false","false","CharSequence","null","[]","Optional.empty","\com\android\internal\view\InputConnectionWrapper.java"
"mIInputContext","false","false","true","false","true","IInputContext","null","[]","Optional.empty","\com\android\internal\view\InputConnectionWrapper.java"
"mExtractedText","true","false","false","false","false","ExtractedText","null","[]","Optional.empty","\com\android\internal\view\InputConnectionWrapper.java"
"mSelectedText","true","false","false","false","false","CharSequence","null","[]","Optional.empty","\com\android\internal\view\InputConnectionWrapper.java"
"mSeq","true","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\view\InputConnectionWrapper.java"
"sSequenceNumber","false","false","true","true","false","int","1","[]","Optional.empty","\com\android\internal\view\InputConnectionWrapper.java"
"mHaveValue","true","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\view\InputConnectionWrapper.java"
"mCursorCapsMode","true","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\view\InputConnectionWrapper.java"
"TAG","false","false","true","true","true","String","""InputConnectionWrapper.ICC""","[]","Optional.empty","\com\android\internal\view\InputConnectionWrapper.java"
"sInstance","false","false","true","true","false","InputContextCallback","new InputContextCallback()","[]","Optional[// exclusive access to this object.
]","\com\android\internal\view\InputConnectionWrapper.java"
"mTextAfterCursor","true","false","false","false","false","CharSequence","null","[]","Optional.empty","\com\android\internal\view\InputConnectionWrapper.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<ParcelableSparseArray>","new Parcelable.Creator<ParcelableSparseArray>() {

    public ParcelableSparseArray createFromParcel(Parcel source) {
        final ParcelableSparseArray array = new ParcelableSparseArray();
        final ClassLoader loader = array.getClass().getClassLoader();
        final int count = source.readInt();
        for (int i = 0; i < count; i++) {
            array.put(source.readInt(), source.readParcelable(loader));
        }
        return array;
    }

    public ParcelableSparseArray[] newArray(int size) {
        return new ParcelableSparseArray[size];
    }
}","[]","Optional.empty","\android\appwidget\AppWidgetHostView.java"
"mAppWidgetId","false","false","false","false","false","int","null","[]","Optional.empty","\android\appwidget\AppWidgetHostView.java"
"FADE_DURATION","false","false","false","true","true","int","1000","[]","Optional.empty","\android\appwidget\AppWidgetHostView.java"
"mOld","false","false","false","false","false","Bitmap","null","[]","Optional.empty","\android\appwidget\AppWidgetHostView.java"
"mContext","false","false","false","false","false","Context","null","[]","Optional.empty","\android\appwidget\AppWidgetHostView.java"
"VIEW_MODE_ERROR","false","false","false","true","true","int","2","[]","Optional.empty","\android\appwidget\AppWidgetHostView.java"
"mInfo","false","false","false","false","false","AppWidgetProviderInfo","null","[]","Optional.empty","\android\appwidget\AppWidgetHostView.java"
"mView","false","false","false","false","false","View","null","[]","Optional.empty","\android\appwidget\AppWidgetHostView.java"
"VIEW_MODE_CONTENT","false","false","false","true","true","int","1","[]","Optional.empty","\android\appwidget\AppWidgetHostView.java"
"VIEW_MODE_NOINIT","false","false","false","true","true","int","0","[]","Optional.empty","\android\appwidget\AppWidgetHostView.java"
"mViewMode","false","false","false","false","false","int","VIEW_MODE_NOINIT","[]","Optional.empty","\android\appwidget\AppWidgetHostView.java"
"mRemoteContext","false","false","false","false","false","Context","null","[]","Optional.empty","\android\appwidget\AppWidgetHostView.java"
"mLayoutId","false","false","false","false","false","int","-1","[]","Optional.empty","\android\appwidget\AppWidgetHostView.java"
"TAG","false","false","false","true","true","String","""AppWidgetHostView""","[]","Optional.empty","\android\appwidget\AppWidgetHostView.java"
"LOGD","false","false","false","true","true","boolean","false","[]","Optional.empty","\android\appwidget\AppWidgetHostView.java"
"mFadeStartTime","false","false","false","false","false","long","-1","[]","Optional.empty","\android\appwidget\AppWidgetHostView.java"
"VIEW_MODE_DEFAULT","false","false","false","true","true","int","3","[]","Optional.empty","\android\appwidget\AppWidgetHostView.java"
"CROSSFADE","false","false","false","true","true","boolean","false","[]","Optional.empty","\android\appwidget\AppWidgetHostView.java"
"sInflaterFilter","false","false","false","true","true","LayoutInflater.Filter","new LayoutInflater.Filter() {

    public boolean onLoadClass(Class clazz) {
        return clazz.isAnnotationPresent(RemoteViews.RemoteView.class);
    }
}","[]","Optional[// views that are allowed in RemoteViews.
]","\android\appwidget\AppWidgetHostView.java"
"mOldPaint","false","false","false","false","false","Paint","new Paint()","[]","Optional.empty","\android\appwidget\AppWidgetHostView.java"
"mFirst","false","false","true","false","true","int","null","[]","Optional.empty","\android\text\style\LeadingMarginSpan.java"
"mDebugUnregister","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\content\BroadcastReceiver.java"
"mInitialStickyHint","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\content\BroadcastReceiver.java"
"mAbortBroadcast","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\content\BroadcastReceiver.java"
"mOrderedHint","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\content\BroadcastReceiver.java"
"mResultExtras","false","false","true","false","false","Bundle","null","[]","Optional.empty","\android\content\BroadcastReceiver.java"
"mResultData","false","false","true","false","false","String","null","[]","Optional.empty","\android\content\BroadcastReceiver.java"
"mResultCode","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\BroadcastReceiver.java"
"mLooper","false","false","false","true","false","Looper","null","[]","Optional.empty","\com\android\internal\view\WindowManagerPolicyThread.java"
"mThread","false","false","false","true","false","Thread","null","[]","Optional.empty","\com\android\internal\view\WindowManagerPolicyThread.java"
"TYPE_NUMBER_FLAG_DECIMAL","true","false","false","true","true","int","0x00002000","[]","Optional[/**
 * Flag of {@link #TYPE_CLASS_NUMBER}: the number is decimal, allowing
 * a decimal point to provide fractional values.
 */
]","\android\text\InputType.java"
"TYPE_TEXT_VARIATION_FILTER","true","false","false","true","true","int","0x000000b0","[]","Optional[/**
 * Variation of {@link #TYPE_CLASS_TEXT}: entering text to filter contents
 * of a list etc.
 */
]","\android\text\InputType.java"
"TYPE_TEXT_FLAG_CAP_CHARACTERS","true","false","false","true","true","int","0x00001000","[]","Optional[/**
 * Flag for {@link #TYPE_CLASS_TEXT}: capitalize all characters.  Overrides
 * {@link #TYPE_TEXT_FLAG_CAP_WORDS} and
 * {@link #TYPE_TEXT_FLAG_CAP_SENTENCES}.  This value is explicitly defined
 * to be the same as {@link TextUtils#CAP_MODE_CHARACTERS}.
 */
]","\android\text\InputType.java"
"TYPE_TEXT_VARIATION_VISIBLE_PASSWORD","true","false","false","true","true","int","0x00000090","[]","Optional[/**
 * Variation of {@link #TYPE_CLASS_TEXT}: entering a password, which should
 * be visible to the user.
 */
]","\android\text\InputType.java"
"TYPE_TEXT_FLAG_CAP_WORDS","true","false","false","true","true","int","0x00002000","[]","Optional[/**
 * Flag for {@link #TYPE_CLASS_TEXT}: capitalize first character of
 * all words.  Overrides {@link #TYPE_TEXT_FLAG_CAP_SENTENCES}.  This
 * value is explicitly defined
 * to be the same as {@link TextUtils#CAP_MODE_WORDS}.
 */
]","\android\text\InputType.java"
"TYPE_DATETIME_VARIATION_TIME","true","false","false","true","true","int","0x00000020","[]","Optional[/**
 * Default variation of {@link #TYPE_CLASS_DATETIME}: allows entering
 * only a time.
 */
]","\android\text\InputType.java"
"TYPE_TEXT_VARIATION_NORMAL","true","false","false","true","true","int","0x00000000","[]","Optional[/**
 * Default variation of {@link #TYPE_CLASS_TEXT}: plain old normal text.
 */
]","\android\text\InputType.java"
"TYPE_MASK_FLAGS","true","false","false","true","true","int","0x00fff000","[]","Optional[/**
 * Mask of bits that provide addition bit flags
 * of options.
 */
]","\android\text\InputType.java"
"TYPE_TEXT_VARIATION_WEB_EDIT_TEXT","true","false","false","true","true","int","0x000000a0","[]","Optional[/**
 * Variation of {@link #TYPE_CLASS_TEXT}: entering text inside of a web form.
 */
]","\android\text\InputType.java"
"TYPE_TEXT_FLAG_AUTO_COMPLETE","true","false","false","true","true","int","0x00010000","[]","Optional[/**
 * Flag for {@link #TYPE_CLASS_TEXT}: the text editor is performing
 * auto-completion of the text being entered based on its own semantics,
 * which it will present to the user as they type.  This generally means
 * that the input method should not be showing candidates itself, but can
 * expect for the editor to supply its own completions/candidates from
 * {@link android.view.inputmethod.InputMethodSession#displayCompletions
 * InputMethodSession.displayCompletions()} as a result of the editor calling
 * {@link android.view.inputmethod.InputMethodManager#displayCompletions
 * InputMethodManager.displayCompletions()}.
 */
]","\android\text\InputType.java"
"TYPE_TEXT_VARIATION_PASSWORD","true","false","false","true","true","int","0x00000080","[]","Optional[/**
 * Variation of {@link #TYPE_CLASS_TEXT}: entering a password.
 */
]","\android\text\InputType.java"
"TYPE_TEXT_VARIATION_POSTAL_ADDRESS","true","false","false","true","true","int","0x00000070","[]","Optional[/**
 * Variation of {@link #TYPE_CLASS_TEXT}: entering a postal mailing address.
 */
]","\android\text\InputType.java"
"TYPE_TEXT_VARIATION_EMAIL_ADDRESS","true","false","false","true","true","int","0x00000020","[]","Optional[/**
 * Variation of {@link #TYPE_CLASS_TEXT}: entering an e-mail address.
 */
]","\android\text\InputType.java"
"TYPE_CLASS_PHONE","true","false","false","true","true","int","0x00000003","[]","Optional[/**
 * Class for a phone number.  This class currently supports no variations
 * or flags.
 */
]","\android\text\InputType.java"
"TYPE_TEXT_FLAG_AUTO_CORRECT","true","false","false","true","true","int","0x00008000","[]","Optional[/**
 * Flag for {@link #TYPE_CLASS_TEXT}: the user is entering free-form
 * text that should have auto-correction applied to it.
 */
]","\android\text\InputType.java"
"TYPE_CLASS_DATETIME","true","false","false","true","true","int","0x00000004","[]","Optional[/**
 * Class for dates and times.  It supports the
 * following variations:
 * {@link #TYPE_DATETIME_VARIATION_NORMAL}
 * {@link #TYPE_DATETIME_VARIATION_DATE}, and
 * {@link #TYPE_DATETIME_VARIATION_TIME},.
 */
]","\android\text\InputType.java"
"TYPE_TEXT_VARIATION_LONG_MESSAGE","true","false","false","true","true","int","0x00000050","[]","Optional[/**
 * Variation of {@link #TYPE_CLASS_TEXT}: entering the content of a long, possibly
 * formal message such as the body of an e-mail.
 */
]","\android\text\InputType.java"
"TYPE_TEXT_VARIATION_SHORT_MESSAGE","true","false","false","true","true","int","0x00000040","[]","Optional[/**
 * Variation of {@link #TYPE_CLASS_TEXT}: entering a short, possibly informal
 * message such as an instant message or a text message.
 */
]","\android\text\InputType.java"
"TYPE_TEXT_VARIATION_EMAIL_SUBJECT","true","false","false","true","true","int","0x00000030","[]","Optional[/**
 * Variation of {@link #TYPE_CLASS_TEXT}: entering the subject line of
 * an e-mail.
 */
]","\android\text\InputType.java"
"TYPE_MASK_VARIATION","true","false","false","true","true","int","0x00000ff0","[]","Optional[/**
 * Mask of bits that determine the variation of
 * the base content class.
 */
]","\android\text\InputType.java"
"TYPE_TEXT_FLAG_IME_MULTI_LINE","true","false","false","true","true","int","0x00040000","[]","Optional[/**
 * Flag for {@link #TYPE_CLASS_TEXT}: the regular text view associated
 * with this should not be multi-line, but when a fullscreen input method
 * is providing text it should use multiple lines if it can.
 */
]","\android\text\InputType.java"
"TYPE_DATETIME_VARIATION_NORMAL","true","false","false","true","true","int","0x00000000","[]","Optional[/**
 * Default variation of {@link #TYPE_CLASS_DATETIME}: allows entering
 * both a date and time.
 */
]","\android\text\InputType.java"
"TYPE_TEXT_VARIATION_URI","true","false","false","true","true","int","0x00000010","[]","Optional[/**
 * Variation of {@link #TYPE_CLASS_TEXT}: entering a URI.
 */
]","\android\text\InputType.java"
"TYPE_NULL","true","false","false","true","true","int","0x00000000","[]","Optional[/**
 * Special content type for when no explicit type has been specified.
 * This should be interpreted to mean that the target input connection
 * is not rich, it can not process and show things like candidate text nor
 * retrieve the current text, so the input method will need to run in a
 * limited ""generate key events"" mode.
 */
]","\android\text\InputType.java"
"TYPE_TEXT_VARIATION_PERSON_NAME","true","false","false","true","true","int","0x00000060","[]","Optional[/**
 * Variation of {@link #TYPE_CLASS_TEXT}: entering the name of a person.
 */
]","\android\text\InputType.java"
"TYPE_NUMBER_FLAG_SIGNED","true","false","false","true","true","int","0x00001000","[]","Optional[/**
 * Flag of {@link #TYPE_CLASS_NUMBER}: the number is signed, allowing
 * a positive or negative sign at the start.
 */
]","\android\text\InputType.java"
"TYPE_TEXT_FLAG_MULTI_LINE","true","false","false","true","true","int","0x00020000","[]","Optional[/**
 * Flag for {@link #TYPE_CLASS_TEXT}: multiple lines of text can be
 * entered into the field.  If this flag is not set, the text field
 * will be constrained to a single line.
 */
]","\android\text\InputType.java"
"TYPE_MASK_CLASS","true","false","false","true","true","int","0x0000000f","[]","Optional[/**
 * Mask of bits that determine the overall class
 * of text being given.  Currently supported classes are:
 * {@link #TYPE_CLASS_TEXT}, {@link #TYPE_CLASS_NUMBER},
 * {@link #TYPE_CLASS_PHONE}, {@link #TYPE_CLASS_DATETIME}.
 * If the class is not one you
 * understand, assume {@link #TYPE_CLASS_TEXT} with NO variation
 * or flags.
 */
]","\android\text\InputType.java"
"TYPE_TEXT_FLAG_NO_SUGGESTIONS","true","false","false","true","true","int","0x00080000","[]","Optional[/**
 * Flag for {@link #TYPE_CLASS_TEXT}: the input method does not need to
 * display any dictionary-based candidates. This is useful for text views that
 * do not contain words from the language and do not benefit from any
 * dictionary-based completions or corrections. It overrides the
 * {@link #TYPE_TEXT_FLAG_AUTO_CORRECT} value when set.
 */
]","\android\text\InputType.java"
"TYPE_TEXT_FLAG_CAP_SENTENCES","true","false","false","true","true","int","0x00004000","[]","Optional[/**
 * Flag for {@link #TYPE_CLASS_TEXT}: capitalize first character of
 * each sentence.  This value is explicitly defined
 * to be the same as {@link TextUtils#CAP_MODE_SENTENCES}.
 */
]","\android\text\InputType.java"
"TYPE_TEXT_VARIATION_PHONETIC","true","false","false","true","true","int","0x000000c0","[]","Optional[/**
 * Variation of {@link #TYPE_CLASS_TEXT}: entering text for phonetic
 * pronunciation, such as a phonetic name field in contacts.
 */
]","\android\text\InputType.java"
"TYPE_CLASS_TEXT","true","false","false","true","true","int","0x00000001","[]","Optional[/**
 * Class for normal text.  This class supports the following flags (only
 * one of which should be set):
 * {@link #TYPE_TEXT_FLAG_CAP_CHARACTERS},
 * {@link #TYPE_TEXT_FLAG_CAP_WORDS}, and.
 * {@link #TYPE_TEXT_FLAG_CAP_SENTENCES}.  It also supports the
 * following variations:
 * {@link #TYPE_TEXT_VARIATION_NORMAL}, and
 * {@link #TYPE_TEXT_VARIATION_URI}.  If you do not recognize the
 * variation, normal should be assumed.
 */
]","\android\text\InputType.java"
"TYPE_CLASS_NUMBER","true","false","false","true","true","int","0x00000002","[]","Optional[/**
 * Class for numeric text.  This class supports the following flag:
 * {@link #TYPE_NUMBER_FLAG_SIGNED} and
 * {@link #TYPE_NUMBER_FLAG_DECIMAL}.
 */
]","\android\text\InputType.java"
"TYPE_DATETIME_VARIATION_DATE","true","false","false","true","true","int","0x00000010","[]","Optional[/**
 * Default variation of {@link #TYPE_CLASS_DATETIME}: allows entering
 * only a date.
 */
]","\android\text\InputType.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<ContentValues>","new Parcelable.Creator<ContentValues>() {

    @SuppressWarnings({ ""deprecation"", ""unchecked"" })
    public ContentValues createFromParcel(Parcel in) {
        // TODO - what ClassLoader should be passed to readHashMap?
        HashMap<String, Object> values = in.readHashMap(null);
        return new ContentValues(values);
    }

    public ContentValues[] newArray(int size) {
        return new ContentValues[size];
    }
}","[]","Optional.empty","\android\content\ContentValues.java"
"TAG","true","false","false","true","true","String","""ContentValues""","[]","Optional.empty","\android\content\ContentValues.java"
"mValues","false","false","true","false","false","HashMap<String,Object>","null","[]","Optional[/**
 * Holds the actual values
 */
]","\android\content\ContentValues.java"
"mShowDefault","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\preference\RingtonePreference.java"
"mRequestCode","false","false","true","false","false","int","null","[]","Optional.empty","\android\preference\RingtonePreference.java"
"TAG","false","false","true","true","true","String","""RingtonePreference""","[]","Optional.empty","\android\preference\RingtonePreference.java"
"mShowSilent","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\preference\RingtonePreference.java"
"mRingtoneType","false","false","true","false","false","int","null","[]","Optional.empty","\android\preference\RingtonePreference.java"
"OLD_SEL_START","false","false","false","true","true","Object","new NoCopySpan.Concrete()","[]","Optional[/* package */
]","\android\text\method\BaseKeyListener.java"
"mOnPreDrawListeners","false","false","true","false","false","CopyOnWriteArrayList<OnPreDrawListener>","null","[]","Optional.empty","\android\view\ViewTreeObserver.java"
"mTouchableInsets","false","false","false","false","false","int","null","[]","Optional.empty","\android\view\ViewTreeObserver.java"
"mOnGlobalFocusListeners","false","false","true","false","false","CopyOnWriteArrayList<OnGlobalFocusChangeListener>","null","[]","Optional.empty","\android\view\ViewTreeObserver.java"
"TOUCHABLE_INSETS_VISIBLE","true","false","false","true","true","int","2","[]","Optional[/**
 * Option for {@link #setTouchableInsets(int)}: the area inside of
 * the visible insets can be touched.
 */
]","\android\view\ViewTreeObserver.java"
"mOnTouchModeChangeListeners","false","false","true","false","false","CopyOnWriteArrayList<OnTouchModeChangeListener>","null","[]","Optional.empty","\android\view\ViewTreeObserver.java"
"mOnGlobalLayoutListeners","false","false","true","false","false","CopyOnWriteArrayList<OnGlobalLayoutListener>","null","[]","Optional.empty","\android\view\ViewTreeObserver.java"
"TOUCHABLE_INSETS_CONTENT","true","false","false","true","true","int","1","[]","Optional[/**
 * Option for {@link #setTouchableInsets(int)}: the area inside of
 * the content insets can be touched.
 */
]","\android\view\ViewTreeObserver.java"
"mAlive","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\view\ViewTreeObserver.java"
"TOUCHABLE_INSETS_FRAME","true","false","false","true","true","int","0","[]","Optional[/**
 * Option for {@link #setTouchableInsets(int)}: the entire window frame
 * can be touched.
 */
]","\android\view\ViewTreeObserver.java"
"mOnComputeInternalInsetsListeners","false","false","true","false","false","CopyOnWriteArrayList<OnComputeInternalInsetsListener>","null","[]","Optional.empty","\android\view\ViewTreeObserver.java"
"contentInsets","true","false","false","false","true","Rect","new Rect()","[]","Optional[/**
 * Offsets from the frame of the window at which the content of
 * windows behind it should be placed.
 */
]","\android\view\ViewTreeObserver.java"
"visibleInsets","true","false","false","false","true","Rect","new Rect()","[]","Optional[/**
 * Offsets from the fram of the window at which windows behind it
 * are visible.
 */
]","\android\view\ViewTreeObserver.java"
"mOnScrollChangedListeners","false","false","true","false","false","CopyOnWriteArrayList<OnScrollChangedListener>","null","[]","Optional.empty","\android\view\ViewTreeObserver.java"
"USB_FUNCTION_MASS_STORAGE","true","false","false","true","true","String","""mass_storage""","[]","Optional[/**
 * Name of the USB mass storage USB function.
 * Used in extras for the {@link #ACTION_USB_CONNECTED} broadcast
 */
]","\android\hardware\Usb.java"
"USB_CONNECTED","true","false","false","true","true","String","""connected""","[]","Optional[/**
 * Boolean extra indicating whether USB is connected or disconnected.
 * Used in extras for the {@link #ACTION_USB_STATE} broadcast.
 */
]","\android\hardware\Usb.java"
"USB_FUNCTION_ADB","true","false","false","true","true","String","""adb""","[]","Optional[/**
 * Name of the adb USB function.
 * Used in extras for the {@link #ACTION_USB_CONNECTED} broadcast
 */
]","\android\hardware\Usb.java"
"USB_FUNCTION_ENABLED","true","false","false","true","true","String","""enabled""","[]","Optional[/**
 * Value indicating that a USB function is enabled.
 * Used in extras for the {@link #ACTION_USB_CONNECTED} broadcast
 */
]","\android\hardware\Usb.java"
"USB_FUNCTION_DISABLED","true","false","false","true","true","String","""disabled""","[]","Optional[/**
 * Value indicating that a USB function is disabled.
 * Used in extras for the {@link #ACTION_USB_CONNECTED} broadcast
 */
]","\android\hardware\Usb.java"
"ACTION_USB_DISCONNECTED","true","false","false","true","true","String","""android.hardware.action.USB_DISCONNECTED""","[]","Optional[/**
 * Broadcast Action:  A broadcast for USB disconnected events.
 */
]","\android\hardware\Usb.java"
"ACTION_USB_STATE","true","false","false","true","true","String","""android.hardware.action.USB_STATE""","[]","Optional[/**
 * Broadcast Action:  A sticky broadcast for USB state change events.
 *
 * This is a sticky broadcast for clients that are interested in both USB connect and
 * disconnect events.  If you are only concerned with one or the other, you can use
 * {@link #ACTION_USB_CONNECTED} or {@link #ACTION_USB_DISCONNECTED} to avoid receiving
 * unnecessary broadcasts.  The boolean {@link #USB_CONNECTED} extra indicates whether
 * USB is connected or disconnected.
 * The extras bundle will also contain name/value pairs with the name of the function
 * and a value of either {@link #USB_FUNCTION_ENABLED} or {@link #USB_FUNCTION_DISABLED}.
 * Possible USB function names include {@link #USB_FUNCTION_MASS_STORAGE},
 * {@link #USB_FUNCTION_ADB}, {@link #USB_FUNCTION_RNDIS} and {@link #USB_FUNCTION_MTP}.
 */
]","\android\hardware\Usb.java"
"USB_FUNCTION_MTP","true","false","false","true","true","String","""mtp""","[]","Optional[/**
 * Name of the MTP USB function.
 * Used in extras for the {@link #ACTION_USB_CONNECTED} broadcast
 */
]","\android\hardware\Usb.java"
"USB_FUNCTION_RNDIS","true","false","false","true","true","String","""rndis""","[]","Optional[/**
 * Name of the RNDIS ethernet USB function.
 * Used in extras for the {@link #ACTION_USB_CONNECTED} broadcast
 */
]","\android\hardware\Usb.java"
"ACTION_USB_CONNECTED","true","false","false","true","true","String","""android.hardware.action.USB_CONNECTED""","[]","Optional[/**
 * Broadcast Action:  A broadcast for USB connected events.
 *
 * The extras bundle will name/value pairs with the name of the function
 * and a value of either {@link #USB_FUNCTION_ENABLED} or {@link #USB_FUNCTION_DISABLED}.
 * Possible USB function names include {@link #USB_FUNCTION_MASS_STORAGE},
 * {@link #USB_FUNCTION_ADB}, {@link #USB_FUNCTION_RNDIS} and {@link #USB_FUNCTION_MTP}.
 */
]","\android\hardware\Usb.java"
"WEB_VIEW_CORE","true","false","false","true","true","boolean","false","[]","Optional.empty","\android\webkit\DebugFlags.java"
"DRAG_TRACKER_LOGTAG","true","false","false","true","true","String","""skia""","[]","Optional.empty","\android\webkit\DebugFlags.java"
"STREAM_LOADER","true","false","false","true","true","boolean","false","[]","Optional.empty","\android\webkit\DebugFlags.java"
"SSL_ERROR_HANDLER","true","false","false","true","true","boolean","false","[]","Optional.empty","\android\webkit\DebugFlags.java"
"COOKIE_MANAGER","true","false","false","true","true","boolean","false","[]","Optional.empty","\android\webkit\DebugFlags.java"
"URL_UTIL","true","false","false","true","true","boolean","false","[]","Optional.empty","\android\webkit\DebugFlags.java"
"WEB_TEXT_VIEW","true","false","false","true","true","boolean","false","[]","Optional.empty","\android\webkit\DebugFlags.java"
"CALLBACK_PROXY","true","false","false","true","true","boolean","false","[]","Optional.empty","\android\webkit\DebugFlags.java"
"COOKIE_SYNC_MANAGER","true","false","false","true","true","boolean","false","[]","Optional.empty","\android\webkit\DebugFlags.java"
"BROWSER_FRAME","true","false","false","true","true","boolean","false","[]","Optional.empty","\android\webkit\DebugFlags.java"
"NETWORK","true","false","false","true","true","boolean","false","[]","Optional.empty","\android\webkit\DebugFlags.java"
"DRAG_TRACKER","true","false","false","true","true","boolean","false","[]","Optional.empty","\android\webkit\DebugFlags.java"
"WEB_BACK_FORWARD_LIST","true","false","false","true","true","boolean","false","[]","Optional.empty","\android\webkit\DebugFlags.java"
"J_WEB_CORE_JAVA_BRIDGE","true","false","false","true","true","boolean","false","[]","Optional[// HIGHLY VERBOSE
]","\android\webkit\DebugFlags.java"
"FRAME_LOADER","true","false","false","true","true","boolean","false","[]","Optional.empty","\android\webkit\DebugFlags.java"
"WEB_SYNC_MANAGER","true","false","false","true","true","boolean","false","[]","Optional.empty","\android\webkit\DebugFlags.java"
"WEB_VIEW","true","false","false","true","true","boolean","false","[]","Optional.empty","\android\webkit\DebugFlags.java"
"WEB_SETTINGS","true","false","false","true","true","boolean","false","[]","Optional.empty","\android\webkit\DebugFlags.java"
"LOAD_LISTENER","true","false","false","true","true","boolean","false","[]","Optional.empty","\android\webkit\DebugFlags.java"
"CACHE_MANAGER","true","false","false","true","true","boolean","false","[]","Optional.empty","\android\webkit\DebugFlags.java"
"mTransport","false","false","true","false","false","Transport","new Transport()","[]","Optional.empty","\android\content\ContentProvider.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\content\ContentProvider.java"
"mExported","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\content\ContentProvider.java"
"mMyUid","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\ContentProvider.java"
"mReadPermission","false","false","true","false","false","String","null","[]","Optional.empty","\android\content\ContentProvider.java"
"mWritePermission","false","false","true","false","false","String","null","[]","Optional.empty","\android\content\ContentProvider.java"
"mPathPermissions","false","false","true","false","false","PathPermission","null","[]","Optional.empty","\android\content\ContentProvider.java"
"mCompareResult","false","false","true","false","false","Result","null","[]","Optional.empty","\android\database\CursorJoiner.java"
"mColumnsRight","false","false","true","false","false","int","null","[]","Optional.empty","\android\database\CursorJoiner.java"
"mCompareResultIsValid","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\database\CursorJoiner.java"
"mCursorRight","false","false","true","false","false","Cursor","null","[]","Optional.empty","\android\database\CursorJoiner.java"
"mColumnsLeft","false","false","true","false","false","int","null","[]","Optional.empty","\android\database\CursorJoiner.java"
"mCursorLeft","false","false","true","false","false","Cursor","null","[]","Optional.empty","\android\database\CursorJoiner.java"
"mValues","false","false","true","false","false","String","null","[]","Optional.empty","\android\database\CursorJoiner.java"
"CALLBACK","false","false","true","true","true","String","""callback""","[]","Optional.empty","\android\webkit\WebStorage.java"
"DELETE_ORIGIN","false","false","false","true","true","int","2","[]","Optional.empty","\android\webkit\WebStorage.java"
"ORIGIN","false","false","true","true","true","String","""origin""","[]","Optional.empty","\android\webkit\WebStorage.java"
"mOrigins","false","false","true","false","false","Map<String,Origin>","null","[]","Optional.empty","\android\webkit\WebStorage.java"
"sWebStorage","false","false","true","true","false","WebStorage","null","[]","Optional[// Global instance of a WebStorage
]","\android\webkit\WebStorage.java"
"mQuota","false","false","false","false","false","long","0","[]","Optional.empty","\android\webkit\WebStorage.java"
"GET_ORIGINS","false","false","false","true","true","int","4","[]","Optional.empty","\android\webkit\WebStorage.java"
"mOrigin","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\WebStorage.java"
"QUOTA","false","false","true","true","true","String","""quota""","[]","Optional.empty","\android\webkit\WebStorage.java"
"DELETE_ALL","false","false","false","true","true","int","3","[]","Optional.empty","\android\webkit\WebStorage.java"
"SET_QUOTA_ORIGIN","false","false","false","true","true","int","1","[]","Optional.empty","\android\webkit\WebStorage.java"
"ORIGINS","false","false","true","true","true","String","""origins""","[]","Optional.empty","\android\webkit\WebStorage.java"
"GET_QUOTA_ORIGIN","false","false","false","true","true","int","6","[]","Optional.empty","\android\webkit\WebStorage.java"
"RETURN_QUOTA_ORIGIN","false","false","false","true","true","int","2","[]","Optional.empty","\android\webkit\WebStorage.java"
"USAGE","false","false","true","true","true","String","""usage""","[]","Optional.empty","\android\webkit\WebStorage.java"
"GET_USAGE_ORIGIN","false","false","false","true","true","int","5","[]","Optional.empty","\android\webkit\WebStorage.java"
"UPDATE","false","false","false","true","true","int","0","[]","Optional[// Message ids
]","\android\webkit\WebStorage.java"
"mHandler","false","false","true","false","false","Handler","null","[]","Optional.empty","\android\webkit\WebStorage.java"
"RETURN_ORIGINS","false","false","false","true","true","int","0","[]","Optional[// Message ids on the UI thread
]","\android\webkit\WebStorage.java"
"TAG","false","false","true","true","true","String","""webstorage""","[]","Optional[// Log tag
]","\android\webkit\WebStorage.java"
"RETURN_USAGE_ORIGIN","false","false","false","true","true","int","1","[]","Optional.empty","\android\webkit\WebStorage.java"
"mUsage","false","false","false","false","false","long","0","[]","Optional.empty","\android\webkit\WebStorage.java"
"mUIHandler","false","false","true","false","false","Handler","null","[]","Optional.empty","\android\webkit\WebStorage.java"
"mBuffer","false","false","true","false","false","Editable","null","[]","Optional.empty","\android\text\method\MultiTapKeyListener.java"
"sRecs","false","false","true","true","true","SparseArray<String>","new SparseArray<String>()","[]","Optional.empty","\android\text\method\MultiTapKeyListener.java"
"sInstance","false","false","true","true","false","MultiTapKeyListener","new MultiTapKeyListener[Capitalize.values().length * 2]","[]","Optional.empty","\android\text\method\MultiTapKeyListener.java"
"mAutoText","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\text\method\MultiTapKeyListener.java"
"mCapitalize","false","false","true","false","false","Capitalize","null","[]","Optional.empty","\android\text\method\MultiTapKeyListener.java"
"COMPLEX_UNIT_SP","true","false","false","true","true","int","2","[]","Optional[/**
 * {@link #TYPE_DIMENSION} complex unit: Value is a scaled pixel.
 */
]","\android\util\TypedValue.java"
"resourceId","true","false","false","false","false","int","null","[]","Optional[/**
 * If Value came from a resource, this holds the corresponding resource id.
 */
]","\android\util\TypedValue.java"
"TYPE_FIRST_INT","true","false","false","true","true","int","0x10","[]","Optional[/**
 * Identifies the start of plain integer values.  Any type value
 * from this to {@link #TYPE_LAST_INT} means the
 * <var>data</var> field holds a generic integer value.
 */
]","\android\util\TypedValue.java"
"COMPLEX_UNIT_FRACTION_PARENT","true","false","false","true","true","int","1","[]","Optional[/**
 * {@link #TYPE_FRACTION} complex unit: A fraction of the parent size.
 */
]","\android\util\TypedValue.java"
"TYPE_INT_DEC","true","false","false","true","true","int","0x10","[]","Optional[/**
 * The <var>data</var> field holds a number that was
 * originally specified in decimal.
 */
]","\android\util\TypedValue.java"
"TYPE_ATTRIBUTE","true","false","false","true","true","int","0x02","[]","Optional[/**
 * The <var>data</var> field holds an attribute resource
 * identifier (referencing an attribute in the current theme
 * style, not a resource entry).
 */
]","\android\util\TypedValue.java"
"TYPE_LAST_INT","true","false","false","true","true","int","0x1f","[]","Optional[/**
 * Identifies the end of plain integer values.
 */
]","\android\util\TypedValue.java"
"assetCookie","true","false","false","false","false","int","null","[]","Optional[/**
 * Additional information about where the value came from; only
 * set for strings.
 */
]","\android\util\TypedValue.java"
"COMPLEX_UNIT_FRACTION","true","false","false","true","true","int","0","[]","Optional[/**
 * {@link #TYPE_FRACTION} complex unit: A basic fraction of the overall
 * size.
 */
]","\android\util\TypedValue.java"
"density","true","false","false","false","false","int","null","[]","Optional[/**
 * If the Value came from a resource, this holds the corresponding pixel density.
 */
]","\android\util\TypedValue.java"
"COMPLEX_RADIX_MASK","true","false","false","true","true","int","0x3","[]","Optional[/**
 * Complex data: mask to extract radix information (after shifting by
 * {@link #COMPLEX_RADIX_SHIFT}). This give us 4 possible fixed point
 * representations as defined below.
 */
]","\android\util\TypedValue.java"
"COMPLEX_MANTISSA_SHIFT","true","false","false","true","true","int","8","[]","Optional[/**
 * Complex data: bit location of mantissa information.
 */
]","\android\util\TypedValue.java"
"TYPE_FLOAT","true","false","false","true","true","int","0x04","[]","Optional[/**
 * The <var>data</var> field holds an IEEE 754 floating point number.
 */
]","\android\util\TypedValue.java"
"TYPE_INT_COLOR_ARGB8","true","false","false","true","true","int","0x1c","[]","Optional[/**
 * The <var>data</var> field holds a color that was originally
 * specified as #aarrggbb.
 */
]","\android\util\TypedValue.java"
"COMPLEX_RADIX_23p0","true","false","false","true","true","int","0","[]","Optional[/**
 * Complex data: the mantissa is an integral number -- i.e., 0xnnnnnn.0
 */
]","\android\util\TypedValue.java"
"TYPE_INT_COLOR_ARGB4","true","false","false","true","true","int","0x1e","[]","Optional[/**
 * The <var>data</var> field holds a color that was originally
 * specified as #argb.
 */
]","\android\util\TypedValue.java"
"TYPE_LAST_COLOR_INT","true","false","false","true","true","int","0x1f","[]","Optional[/**
 * Identifies the end of integer values that were specified as color
 * constants.
 */
]","\android\util\TypedValue.java"
"string","true","false","false","false","false","CharSequence","null","[]","Optional[/**
 * If the value holds a string, this is it.
 */
]","\android\util\TypedValue.java"
"type","true","false","false","false","false","int","null","[]","Optional[/**
 * The type held by this value, as defined by the constants here.
 * This tells you how to interpret the other fields in the object.
 */
]","\android\util\TypedValue.java"
"TYPE_DIMENSION","true","false","false","true","true","int","0x05","[]","Optional[/**
 * The <var>data</var> field holds a complex number encoding a
 * dimension value.
 */
]","\android\util\TypedValue.java"
"COMPLEX_UNIT_SHIFT","true","false","false","true","true","int","0","[]","Optional[/**
 * Complex data: bit location of unit information.
 */
]","\android\util\TypedValue.java"
"COMPLEX_RADIX_8p15","true","false","false","true","true","int","2","[]","Optional[/**
 * Complex data: the mantissa magnitude is 8 bits -- i.e, 0xnn.nnnn
 */
]","\android\util\TypedValue.java"
"TYPE_FRACTION","true","false","false","true","true","int","0x06","[]","Optional[/**
 * The <var>data</var> field holds a complex number encoding a fraction
 * of a container.
 */
]","\android\util\TypedValue.java"
"FRACTION_UNIT_STRS","false","false","true","true","true","String","new String[] { ""%"", ""%p"" }","[]","Optional.empty","\android\util\TypedValue.java"
"COMPLEX_UNIT_DIP","true","false","false","true","true","int","1","[]","Optional[/**
 * {@link #TYPE_DIMENSION} complex unit: Value is Device Independent
 * Pixels.
 */
]","\android\util\TypedValue.java"
"DENSITY_NONE","true","false","false","true","true","int","0xffff","[]","Optional[/**
 * If {@link #density} is equal to this value, then there is no density
 * associated with the resource and it should not be scaled.
 */
]","\android\util\TypedValue.java"
"changingConfigurations","true","false","false","false","false","int","-1","[]","Optional[/**
 * If Value came from a resource, these are the configurations for which
 * its contents can change.
 */
]","\android\util\TypedValue.java"
"COMPLEX_MANTISSA_MASK","true","false","false","true","true","int","0xffffff","[]","Optional[/**
 * Complex data: mask to extract mantissa information (after shifting by
 * {@link #COMPLEX_MANTISSA_SHIFT}). This gives us 23 bits of precision;
 * the top bit is the sign.
 */
]","\android\util\TypedValue.java"
"MANTISSA_MULT","false","false","true","true","true","float","1.0f / (1 << TypedValue.COMPLEX_MANTISSA_SHIFT)","[]","Optional.empty","\android\util\TypedValue.java"
"COMPLEX_UNIT_IN","true","false","false","true","true","int","4","[]","Optional[/**
 * {@link #TYPE_DIMENSION} complex unit: Value is in inches.
 */
]","\android\util\TypedValue.java"
"DIMENSION_UNIT_STRS","false","false","true","true","true","String","new String[] { ""px"", ""dip"", ""sp"", ""pt"", ""in"", ""mm"" }","[]","Optional.empty","\android\util\TypedValue.java"
"COMPLEX_RADIX_SHIFT","true","false","false","true","true","int","4","[]","Optional[/**
 * Complex data: where the radix information is, telling where the decimal
 * place appears in the mantissa.
 */
]","\android\util\TypedValue.java"
"data","true","false","false","false","false","int","null","[]","Optional[/**
 * Basic data in the value, interpreted according to {@link #type}
 */
]","\android\util\TypedValue.java"
"TYPE_NULL","true","false","false","true","true","int","0x00","[]","Optional[/**
 * The value contains no data.
 */
]","\android\util\TypedValue.java"
"DENSITY_DEFAULT","true","false","false","true","true","int","0","[]","Optional[/**
 * If {@link #density} is equal to this value, then the density should be
 * treated as the system's default density value: {@link DisplayMetrics#DENSITY_DEFAULT}.
 */
]","\android\util\TypedValue.java"
"COMPLEX_UNIT_PT","true","false","false","true","true","int","3","[]","Optional[/**
 * {@link #TYPE_DIMENSION} complex unit: Value is in points.
 */
]","\android\util\TypedValue.java"
"COMPLEX_UNIT_PX","true","false","false","true","true","int","0","[]","Optional[/**
 * {@link #TYPE_DIMENSION} complex unit: Value is raw pixels.
 */
]","\android\util\TypedValue.java"
"COMPLEX_UNIT_MASK","true","false","false","true","true","int","0xf","[]","Optional[/**
 * Complex data: mask to extract unit information (after shifting by
 * {@link #COMPLEX_UNIT_SHIFT}). This gives us 16 possible types, as
 * defined below.
 */
]","\android\util\TypedValue.java"
"COMPLEX_UNIT_MM","true","false","false","true","true","int","5","[]","Optional[/**
 * {@link #TYPE_DIMENSION} complex unit: Value is in millimeters.
 */
]","\android\util\TypedValue.java"
"TYPE_INT_HEX","true","false","false","true","true","int","0x11","[]","Optional[/**
 * The <var>data</var> field holds a number that was
 * originally specified in hexadecimal (0xn).
 */
]","\android\util\TypedValue.java"
"TYPE_REFERENCE","true","false","false","true","true","int","0x01","[]","Optional[/**
 * The <var>data</var> field holds a resource identifier.
 */
]","\android\util\TypedValue.java"
"TYPE_STRING","true","false","false","true","true","int","0x03","[]","Optional[/**
 * The <var>string</var> field holds string data.  In addition, if
 * <var>data</var> is non-zero then it is the string block
 * index of the string and <var>assetCookie</var> is the set of
 * assets the string came from.
 */
]","\android\util\TypedValue.java"
"COMPLEX_RADIX_16p7","true","false","false","true","true","int","1","[]","Optional[/**
 * Complex data: the mantissa magnitude is 16 bits -- i.e, 0xnnnn.nn
 */
]","\android\util\TypedValue.java"
"TYPE_INT_BOOLEAN","true","false","false","true","true","int","0x12","[]","Optional[/**
 * The <var>data</var> field holds 0 or 1 that was originally
 * specified as ""false"" or ""true"".
 */
]","\android\util\TypedValue.java"
"RADIX_MULTS","false","false","true","true","true","float","new float[] { 1.0f * MANTISSA_MULT, 1.0f / (1 << 7) * MANTISSA_MULT, 1.0f / (1 << 15) * MANTISSA_MULT, 1.0f / (1 << 23) * MANTISSA_MULT }","[]","Optional.empty","\android\util\TypedValue.java"
"TYPE_INT_COLOR_RGB4","true","false","false","true","true","int","0x1f","[]","Optional[/**
 * The <var>data</var> field holds a color that was originally
 * specified as #rgb.
 */
]","\android\util\TypedValue.java"
"TYPE_INT_COLOR_RGB8","true","false","false","true","true","int","0x1d","[]","Optional[/**
 * The <var>data</var> field holds a color that was originally
 * specified as #rrggbb.
 */
]","\android\util\TypedValue.java"
"TYPE_FIRST_COLOR_INT","true","false","false","true","true","int","0x1c","[]","Optional[/**
 * Identifies the start of integer values that were specified as
 * color constants (starting with '#').
 */
]","\android\util\TypedValue.java"
"COMPLEX_RADIX_0p23","true","false","false","true","true","int","3","[]","Optional[/**
 * Complex data: the mantissa magnitude is 0 bits -- i.e, 0x0.nnnnnn
 */
]","\android\util\TypedValue.java"
"impl","false","false","true","false","true","LocalSocketImpl","null","[]","Optional.empty","\android\net\LocalServerSocket.java"
"localAddress","false","false","true","false","true","LocalSocketAddress","null","[]","Optional.empty","\android\net\LocalServerSocket.java"
"LISTEN_BACKLOG","false","false","true","true","true","int","50","[]","Optional[/**
 * 50 seems a bit much, but it's what was here
 */
]","\android\net\LocalServerSocket.java"
"mSensorManager","false","false","true","false","false","SensorManager","null","[]","Optional.empty","\android\view\OrientationEventListener.java"
"mSensorEventListener","false","false","true","false","false","SensorEventListener","null","[]","Optional.empty","\android\view\OrientationEventListener.java"
"mEnabled","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\view\OrientationEventListener.java"
"mOldListener","false","false","true","false","false","OrientationListener","null","[]","Optional.empty","\android\view\OrientationEventListener.java"
"mRate","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\OrientationEventListener.java"
"_DATA_Z","false","false","true","true","true","int","2","[]","Optional.empty","\android\view\OrientationEventListener.java"
"_DATA_X","false","false","true","true","true","int","0","[]","Optional.empty","\android\view\OrientationEventListener.java"
"_DATA_Y","false","false","true","true","true","int","1","[]","Optional.empty","\android\view\OrientationEventListener.java"
"mOrientation","false","false","true","false","false","int","ORIENTATION_UNKNOWN","[]","Optional.empty","\android\view\OrientationEventListener.java"
"TAG","false","false","true","true","true","String","""OrientationEventListener""","[]","Optional.empty","\android\view\OrientationEventListener.java"
"localLOGV","false","false","true","true","true","boolean","DEBUG ? Config.LOGD : Config.LOGV","[]","Optional.empty","\android\view\OrientationEventListener.java"
"ORIENTATION_UNKNOWN","true","false","false","true","true","int","-1","[]","Optional[/**
 * Returned from onOrientationChanged when the device orientation cannot be determined
 * (typically when the device is in a close to flat position).
 *
 * @see #onOrientationChanged
 */
]","\android\view\OrientationEventListener.java"
"mSensor","false","false","true","false","false","Sensor","null","[]","Optional.empty","\android\view\OrientationEventListener.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\view\OrientationEventListener.java"
"ACTION_RECOGNIZE_SPEECH","true","false","false","true","true","String","""android.speech.action.RECOGNIZE_SPEECH""","[]","Optional[/**
 * Starts an activity that will prompt the user for speech and sends it through a
 * speech recognizer.  The results will be returned via activity results (in
 * {@link Activity#onActivityResult}, if you start the intent using
 * {@link Activity#startActivityForResult(Intent, int)}), or forwarded via a PendingIntent
 * if one is provided.
 *
 * <p>Starting this intent with just {@link Activity#startActivity(Intent)} is not supported.
 * You must either use {@link Activity#startActivityForResult(Intent, int)}, or provide a
 * PendingIntent, to receive recognition results.
 *
 * <p>Required extras:
 * <ul>
 * <li>{@link #EXTRA_LANGUAGE_MODEL}
 * </ul>
 *
 * <p>Optional extras:
 * <ul>
 * <li>{@link #EXTRA_PROMPT}
 * <li>{@link #EXTRA_LANGUAGE}
 * <li>{@link #EXTRA_MAX_RESULTS}
 * <li>{@link #EXTRA_RESULTS_PENDINGINTENT}
 * <li>{@link #EXTRA_RESULTS_PENDINGINTENT_BUNDLE}
 * </ul>
 *
 * <p> Result extras (returned in the result, not to be specified in the request):
 * <ul>
 * <li>{@link #EXTRA_RESULTS}
 * </ul>
 *
 * <p>NOTE: There may not be any applications installed to handle this action, so you should
 * make sure to catch {@link ActivityNotFoundException}.
 */
]","\android\speech\RecognizerIntent.java"
"EXTRA_ONLY_RETURN_LANGUAGE_PREFERENCE","true","false","false","true","true","String","""android.speech.extra.ONLY_RETURN_LANGUAGE_PREFERENCE""","[]","Optional[/**
 * Specify this boolean extra in a broadcast of {@link #ACTION_GET_LANGUAGE_DETAILS} to
 * indicate that only the current language preference is needed in the response. This
 * avoids any additional computation if all you need is {@link #EXTRA_LANGUAGE_PREFERENCE}
 * in the response.
 */
]","\android\speech\RecognizerIntent.java"
"LANGUAGE_MODEL_WEB_SEARCH","true","false","false","true","true","String","""web_search""","[]","Optional[/**
 * Use a language model based on web search terms.  This is a value to use for
 * {@link #EXTRA_LANGUAGE_MODEL}.
 * @see #EXTRA_LANGUAGE_MODEL
 */
]","\android\speech\RecognizerIntent.java"
"EXTRA_PARTIAL_RESULTS","true","false","false","true","true","String","""android.speech.extra.PARTIAL_RESULTS""","[]","Optional[/**
 * Optional boolean to indicate whether partial results should be returned by the recognizer
 * as the user speaks (default is false).  The server may ignore a request for partial
 * results in some or all cases.
 */
]","\android\speech\RecognizerIntent.java"
"RESULT_NO_MATCH","true","false","false","true","true","int","Activity.RESULT_FIRST_USER","[]","Optional[/**
 * Result code returned when no matches are found for the given speech
 */
]","\android\speech\RecognizerIntent.java"
"EXTRA_SUPPORTED_LANGUAGES","true","false","false","true","true","String","""android.speech.extra.SUPPORTED_LANGUAGES""","[]","Optional[/**
 * The key to the extra in the {@link Bundle} returned by {@link #ACTION_GET_LANGUAGE_DETAILS}
 * which is an {@link ArrayList} of {@link String}s that represents the languages supported by
 * this implementation of voice recognition - a list of strings like ""en-US"", ""cmn-Hans-CN"",
 * etc.
 */
]","\android\speech\RecognizerIntent.java"
"RESULT_CLIENT_ERROR","true","false","false","true","true","int","Activity.RESULT_FIRST_USER + 1","[]","Optional[/**
 * Result code returned when there is a generic client error
 */
]","\android\speech\RecognizerIntent.java"
"ACTION_WEB_SEARCH","true","false","false","true","true","String","""android.speech.action.WEB_SEARCH""","[]","Optional[/**
 * Starts an activity that will prompt the user for speech, sends it through a
 * speech recognizer, and invokes and displays a web search result.
 *
 * <p>Required extras:
 * <ul>
 * <li>{@link #EXTRA_LANGUAGE_MODEL}
 * </ul>
 *
 * <p>Optional extras:
 * <ul>
 * <li>{@link #EXTRA_PROMPT}
 * <li>{@link #EXTRA_LANGUAGE}
 * <li>{@link #EXTRA_MAX_RESULTS}
 * <li>{@link #EXTRA_PARTIAL_RESULTS}
 * </ul>
 *
 * <p> Result extras (returned in the result, not to be specified in the request):
 * <ul>
 * <li>{@link #EXTRA_RESULTS}
 * </ul>
 *
 * <p>NOTE: There may not be any applications installed to handle this action, so you should
 * make sure to catch {@link ActivityNotFoundException}.
 */
]","\android\speech\RecognizerIntent.java"
"EXTRA_PROMPT","true","false","false","true","true","String","""android.speech.extra.PROMPT""","[]","Optional[/**
 * Optional text prompt to show to the user when asking them to speak.
 */
]","\android\speech\RecognizerIntent.java"
"EXTRA_MAX_RESULTS","true","false","false","true","true","String","""android.speech.extra.MAX_RESULTS""","[]","Optional[/**
 * Optional limit on the maximum number of results to return. If omitted the recognizer
 * will choose how many results to return. Must be an integer.
 */
]","\android\speech\RecognizerIntent.java"
"EXTRA_LANGUAGE","true","false","false","true","true","String","""android.speech.extra.LANGUAGE""","[]","Optional[/**
 * Optional IETF language tag (as defined by BCP 47), for example ""en-US"". This tag informs the
 * recognizer to perform speech recognition in a language different than the one set in the
 * {@link java.util.Locale#getDefault()}.
 */
]","\android\speech\RecognizerIntent.java"
"EXTRA_RESULTS_PENDINGINTENT","true","false","false","true","true","String","""android.speech.extra.RESULTS_PENDINGINTENT""","[]","Optional[/**
 * When the intent is {@link #ACTION_RECOGNIZE_SPEECH}, the speech input activity will
 * return results to you via the activity results mechanism.  Alternatively, if you use this
 * extra to supply a PendingIntent, the results will be added to its bundle and the
 * PendingIntent will be sent to its target.
 */
]","\android\speech\RecognizerIntent.java"
"EXTRA_SPEECH_INPUT_MINIMUM_LENGTH_MILLIS","true","false","false","true","true","String","""android.speech.extras.SPEECH_INPUT_MINIMUM_LENGTH_MILLIS""","[]","Optional[/**
 * The minimum length of an utterance. We will not stop recording before this amount of time.
 *
 * Note that it is extremely rare you'd want to specify this value in an intent. If you don't
 * have a very good reason to change these, you should leave them as they are. Note also that
 * certain values may cause undesired or unexpected results - use judiciously! Additionally,
 * depending on the recognizer implementation, these values may have no effect.
 */
]","\android\speech\RecognizerIntent.java"
"RESULT_NETWORK_ERROR","true","false","false","true","true","int","Activity.RESULT_FIRST_USER + 3","[]","Optional[/**
 * Result code returned when a network error was encountered
 */
]","\android\speech\RecognizerIntent.java"
"EXTRA_SPEECH_INPUT_POSSIBLY_COMPLETE_SILENCE_LENGTH_MILLIS","true","false","false","true","true","String","""android.speech.extras.SPEECH_INPUT_POSSIBLY_COMPLETE_SILENCE_LENGTH_MILLIS""","[]","Optional[/**
 * The amount of time that it should take after we stop hearing speech to consider the input
 * possibly complete. This is used to prevent the endpointer cutting off during very short
 * mid-speech pauses.
 *
 * Note that it is extremely rare you'd want to specify this value in an intent. If
 * you don't have a very good reason to change these, you should leave them as they are. Note
 * also that certain values may cause undesired or unexpected results - use judiciously!
 * Additionally, depending on the recognizer implementation, these values may have no effect.
 */
]","\android\speech\RecognizerIntent.java"
"EXTRA_SPEECH_INPUT_COMPLETE_SILENCE_LENGTH_MILLIS","true","false","false","true","true","String","""android.speech.extras.SPEECH_INPUT_COMPLETE_SILENCE_LENGTH_MILLIS""","[]","Optional[/**
 * The amount of time that it should take after we stop hearing speech to consider the input
 * complete.
 *
 * Note that it is extremely rare you'd want to specify this value in an intent. If
 * you don't have a very good reason to change these, you should leave them as they are. Note
 * also that certain values may cause undesired or unexpected results - use judiciously!
 * Additionally, depending on the recognizer implementation, these values may have no effect.
 */
]","\android\speech\RecognizerIntent.java"
"DETAILS_META_DATA","true","false","false","true","true","String","""android.speech.DETAILS""","[]","Optional[/**
 * Meta-data name under which an {@link Activity} implementing {@link #ACTION_WEB_SEARCH} can
 * use to expose the class name of a {@link BroadcastReceiver} which can respond to request for
 * more information, from any of the broadcast intents specified in this class.
 * <p>
 * Broadcast intents can be directed to the class name specified in the meta-data by creating
 * an {@link Intent}, setting the component with
 * {@link Intent#setComponent(android.content.ComponentName)}, and using
 * {@link Context#sendOrderedBroadcast(Intent, String, BroadcastReceiver, android.os.Handler, int, String, android.os.Bundle)}
 * with another {@link BroadcastReceiver} which can receive the results.
 * <p>
 * The {@link #getVoiceDetailsIntent(Context)} method is provided as a convenience to create
 * a broadcast intent based on the value of this meta-data, if available.
 * <p>
 * This is optional and not all {@link Activity}s which implement {@link #ACTION_WEB_SEARCH}
 * are required to implement this. Thus retrieving this meta-data may be null.
 */
]","\android\speech\RecognizerIntent.java"
"EXTRA_RESULTS_PENDINGINTENT_BUNDLE","true","false","false","true","true","String","""android.speech.extra.RESULTS_PENDINGINTENT_BUNDLE""","[]","Optional[/**
 * If you use {@link #EXTRA_RESULTS_PENDINGINTENT} to supply a forwarding intent, you can
 * also use this extra to supply additional extras for the final intent.  The search results
 * will be added to this bundle, and the combined bundle will be sent to the target.
 */
]","\android\speech\RecognizerIntent.java"
"EXTRA_RESULTS","true","false","false","true","true","String","""android.speech.extra.RESULTS""","[]","Optional[/**
 * An ArrayList&lt;String&gt; of the recognition results when performing
 * {@link #ACTION_RECOGNIZE_SPEECH}. Returned in the results; not to be specified in the
 * recognition request. Only present when {@link Activity#RESULT_OK} is returned in
 * an activity result. In a PendingIntent, the lack of this extra indicates failure.
 */
]","\android\speech\RecognizerIntent.java"
"RESULT_AUDIO_ERROR","true","false","false","true","true","int","Activity.RESULT_FIRST_USER + 4","[]","Optional[/**
 * Result code returned when an audio error was encountered
 */
]","\android\speech\RecognizerIntent.java"
"LANGUAGE_MODEL_FREE_FORM","true","false","false","true","true","String","""free_form""","[]","Optional[/**
 * Use a language model based on free-form speech recognition.  This is a value to use for
 * {@link #EXTRA_LANGUAGE_MODEL}.
 * @see #EXTRA_LANGUAGE_MODEL
 */
]","\android\speech\RecognizerIntent.java"
"ACTION_GET_LANGUAGE_DETAILS","true","false","false","true","true","String","""android.speech.action.GET_LANGUAGE_DETAILS""","[]","Optional[/**
 * A broadcast intent which can be fired to the {@link BroadcastReceiver} component specified
 * in the meta-data defined in the {@link #DETAILS_META_DATA} meta-data of an
 * {@link Activity} satisfying {@link #ACTION_WEB_SEARCH}.
 * <p>
 * When fired with
 * {@link Context#sendOrderedBroadcast(Intent, String, BroadcastReceiver, android.os.Handler, int, String, android.os.Bundle)},
 * a {@link Bundle} of extras will be returned to the provided result receiver, and should
 * ideally contain values for {@link #EXTRA_LANGUAGE_PREFERENCE} and
 * {@link #EXTRA_SUPPORTED_LANGUAGES}.
 * <p>
 * (Whether these are actually provided is up to the particular implementation. It is
 * recommended that {@link Activity}s implementing {@link #ACTION_WEB_SEARCH} provide this
 * information, but it is not required.)
 */
]","\android\speech\RecognizerIntent.java"
"EXTRA_LANGUAGE_MODEL","true","false","false","true","true","String","""android.speech.extra.LANGUAGE_MODEL""","[]","Optional[/**
 * Informs the recognizer which speech model to prefer when performing
 * {@link #ACTION_RECOGNIZE_SPEECH}. The recognizer uses this
 * information to fine tune the results. This extra is required. Activities implementing
 * {@link #ACTION_RECOGNIZE_SPEECH} may interpret the values as they see fit.
 *
 * @see #LANGUAGE_MODEL_FREE_FORM
 * @see #LANGUAGE_MODEL_WEB_SEARCH
 */
]","\android\speech\RecognizerIntent.java"
"EXTRA_CALLING_PACKAGE","true","false","false","true","true","String","""calling_package""","[]","Optional[/**
 * The extra key used in an intent to the speech recognizer for voice search. Not
 * generally to be used by developers. The system search dialog uses this, for example,
 * to set a calling package for identification by a voice search API. If this extra
 * is set by anyone but the system process, it should be overridden by the voice search
 * implementation.
 */
]","\android\speech\RecognizerIntent.java"
"EXTRA_LANGUAGE_PREFERENCE","true","false","false","true","true","String","""android.speech.extra.LANGUAGE_PREFERENCE""","[]","Optional[/**
 * The key to the extra in the {@link Bundle} returned by {@link #ACTION_GET_LANGUAGE_DETAILS}
 * which is a {@link String} that represents the current language preference this user has
 * specified - a locale string like ""en-US"".
 */
]","\android\speech\RecognizerIntent.java"
"RESULT_SERVER_ERROR","true","false","false","true","true","int","Activity.RESULT_FIRST_USER + 2","[]","Optional[/**
 * Result code returned when the recognition server returns an error
 */
]","\android\speech\RecognizerIntent.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\android\database\sqlite\SQLiteOpenHelper.java"
"mDatabase","false","false","true","false","false","SQLiteDatabase","null","[]","Optional.empty","\android\database\sqlite\SQLiteOpenHelper.java"
"mName","false","false","true","false","true","String","null","[]","Optional.empty","\android\database\sqlite\SQLiteOpenHelper.java"
"mFactory","false","false","true","false","true","CursorFactory","null","[]","Optional.empty","\android\database\sqlite\SQLiteOpenHelper.java"
"mIsInitializing","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\database\sqlite\SQLiteOpenHelper.java"
"TAG","false","false","true","true","true","String","SQLiteOpenHelper.class.getSimpleName()","[]","Optional.empty","\android\database\sqlite\SQLiteOpenHelper.java"
"mNewVersion","false","false","true","false","true","int","null","[]","Optional.empty","\android\database\sqlite\SQLiteOpenHelper.java"
"PATH","true","false","false","true","true","String","""syncstate""","[]","Optional.empty","\com\android\internal\content\SyncStateContentProviderHelper.java"
"SYNC_STATE_META_VERSION_COLUMN","false","false","true","true","true","String","""version""","[]","Optional.empty","\com\android\internal\content\SyncStateContentProviderHelper.java"
"SYNC_STATE_TABLE","false","false","true","true","true","String","""_sync_state""","[]","Optional.empty","\com\android\internal\content\SyncStateContentProviderHelper.java"
"DB_VERSION","false","false","true","true","false","long","1","[]","Optional.empty","\com\android\internal\content\SyncStateContentProviderHelper.java"
"SYNC_STATE_META_TABLE","false","false","true","true","true","String","""_sync_state_metadata""","[]","Optional.empty","\com\android\internal\content\SyncStateContentProviderHelper.java"
"QUERY_COUNT_SYNC_STATE_ROWS","false","false","true","true","true","String","""SELECT count(*)"" + "" FROM "" + SYNC_STATE_TABLE + "" WHERE "" + SyncStateContract.Columns._ID + ""=?""","[]","Optional.empty","\com\android\internal\content\SyncStateContentProviderHelper.java"
"ACCOUNT_PROJECTION","false","false","true","true","true","String","new String[] { SyncStateContract.Columns.ACCOUNT_NAME, SyncStateContract.Columns.ACCOUNT_TYPE }","[]","Optional.empty","\com\android\internal\content\SyncStateContentProviderHelper.java"
"SELECT_BY_ACCOUNT","false","false","true","true","true","String","SyncStateContract.Columns.ACCOUNT_NAME + ""=? AND "" + SyncStateContract.Columns.ACCOUNT_TYPE + ""=?""","[]","Optional.empty","\com\android\internal\content\SyncStateContentProviderHelper.java"
"mTransport","false","false","true","false","false","Transport","new Transport()","[]","Optional.empty","\android\accounts\AbstractAccountAuthenticator.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\android\accounts\AbstractAccountAuthenticator.java"
"TAG","false","false","true","true","true","String","""AccountAuthenticator""","[]","Optional.empty","\android\accounts\AbstractAccountAuthenticator.java"
"ident","false","false","false","false","true","int","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"mNumPendingFinished","false","false","true","false","false","int","0","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"failureTime","true","false","false","false","false","long","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"MESG_CANCELED","true","false","false","true","true","String","""canceled""","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"DEFAULT_POLL_FREQUENCY_SECONDS","false","false","true","true","true","long","60 * 60 * 24","[]","Optional[// One day
]","\android\content\SyncStorageEngine.java"
"mCal","false","false","true","false","true","Calendar","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"historyId","false","false","false","false","false","int","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"mPendingOperations","false","false","true","false","true","ArrayList<PendingOperation>","new ArrayList<PendingOperation>()","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"mStatusFile","false","false","true","false","true","AtomicFile","null","[]","Optional[/**
 * This file contains the current sync status.  We would like to retain
 * it across boots, but its loss is not the end of the world, so we store
 * this information as binary data.
 */
]","\android\content\SyncStorageEngine.java"
"authorities","false","false","false","false","true","HashMap<String,AuthorityInfo>","new HashMap<String, AuthorityInfo>()","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"syncable","false","false","false","false","false","int","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"MSG_WRITE_STATISTICS","false","false","true","true","true","int","2","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"mNextAuthorityId","false","false","true","false","false","int","0","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"mMasterSyncAutomatically","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"WRITE_STATUS_DELAY","false","false","true","true","true","long","1000 * 60 * 10","[]","Optional[// 10 minutes
]","\android\content\SyncStorageEngine.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"mStatisticsFile","false","false","true","false","true","AtomicFile","null","[]","Optional[/**
 * This file contains sync statistics.  This is purely debugging information
 * so is written infrequently and can be thrown away at any time.
 */
]","\android\content\SyncStorageEngine.java"
"mYear","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"SOURCE_USER","true","false","false","true","true","int","3","[]","Optional[/**
 * Enum value for a user-initiated sync.
 */
]","\android\content\SyncStorageEngine.java"
"SOURCE_POLL","true","false","false","true","true","int","2","[]","Optional[/**
 * Enum value for a poll-based sync (e.g., upon connection to
 * network)
 */
]","\android\content\SyncStorageEngine.java"
"flatExtras","false","false","false","false","false","byte","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"MESG_SUCCESS","true","false","false","true","true","String","""success""","[]","Optional[// The MESG column will contain one of these or one of the Error types.
]","\android\content\SyncStorageEngine.java"
"mDayStats","false","false","true","false","true","DayStats","new DayStats[7 * 4]","[]","Optional[// We keep 4 weeks of stats.
]","\android\content\SyncStorageEngine.java"
"backoffTime","false","false","false","false","false","long","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"source","false","false","false","false","false","int","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"SYNC_ENABLED_DEFAULT","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"STATISTICS_FILE_ITEM_OLD","true","false","false","true","true","int","100","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"STATISTICS_FILE_ITEM","true","false","false","true","true","int","101","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"mNextHistoryId","false","false","true","false","false","int","0","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"mAccountInfoFile","false","false","true","false","true","AtomicFile","null","[]","Optional[/**
 * This file contains the core engine state: all accounts and the
 * settings for them.  It must never be lost, and should be changed
 * infrequently, so it is stored as an XML file.
 */
]","\android\content\SyncStorageEngine.java"
"authorityId","false","false","false","false","false","int","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"STATUS_FILE_ITEM","true","false","false","true","true","int","100","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"authority","false","false","false","false","true","String","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"failureCount","true","false","false","false","false","int","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"sAuthorityRenames","false","false","true","true","false","HashMap<String,String>","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"delayUntil","false","false","false","false","false","long","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"mCurrentSync","false","false","true","false","false","SyncInfo","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"mAccounts","false","false","true","false","true","HashMap<Account,AccountInfo>","new HashMap<Account, AccountInfo>()","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"downstreamActivity","false","false","false","false","false","long","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"DEBUG_FILE","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"upstreamActivity","false","false","false","false","false","long","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"successTime","true","false","false","false","false","long","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"mChangeListeners","false","false","true","false","true","RemoteCallbackList<ISyncStatusObserver>","new RemoteCallbackList<ISyncStatusObserver>()","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"PENDING_FINISH_TO_WRITE","false","false","true","true","true","int","4","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"MSG_WRITE_STATUS","false","false","true","true","true","int","1","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"NOT_IN_BACKOFF_MODE","true","false","false","true","true","long","-1","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"backoffDelay","false","false","false","false","false","long","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"mSyncStatus","false","false","true","false","true","SparseArray<SyncStatusInfo>","new SparseArray<SyncStatusInfo>()","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"STATISTICS_FILE_END","true","false","false","true","true","int","0","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"sSyncStorageEngine","false","false","true","true","false","SyncStorageEngine","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"extras","false","false","false","false","true","Bundle","null","[]","Optional[// note: read-only.
]","\android\content\SyncStorageEngine.java"
"enabled","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"eventTime","false","false","false","false","false","long","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"successCount","true","false","false","false","false","int","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"STATUS_FILE_END","true","false","false","true","true","int","0","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"event","false","false","false","false","false","int","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"mPendingFile","false","false","true","false","true","AtomicFile","null","[]","Optional[/**
 * This file contains the pending sync operations.  It is a binary file,
 * which must be updated every time an operation is added or removed,
 * so we have special handling of it.
 */
]","\android\content\SyncStorageEngine.java"
"mAuthorities","false","false","true","false","true","SparseArray<AuthorityInfo>","new SparseArray<AuthorityInfo>()","[]","Optional[// Primary list of all syncable authorities.  Also our global lock.
]","\android\content\SyncStorageEngine.java"
"ACCOUNTS_VERSION","false","false","true","true","true","int","2","[]","Optional[// the version of the accounts xml file format
]","\android\content\SyncStorageEngine.java"
"periodicSyncs","false","false","false","false","true","ArrayList<Pair<Bundle,Long>>","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"TAG","false","false","true","true","true","String","""SyncManager""","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"elapsedTime","false","false","false","false","false","long","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"EVENT_START","true","false","false","true","true","int","0","[]","Optional[/**
 * Enum value for a sync start event.
 */
]","\android\content\SyncStorageEngine.java"
"EVENTS","true","false","false","true","true","String","{ ""START"", ""STOP"" }","[]","Optional[/**
 * String names for the sync event types.
 */
]","\android\content\SyncStorageEngine.java"
"syncSource","false","false","false","false","true","int","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"SOURCE_SERVER","true","false","false","true","true","int","0","[]","Optional[/**
 * Enum value for a server-initiated sync.
 */
]","\android\content\SyncStorageEngine.java"
"mYearInDays","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"SYNC_CONNECTION_SETTING_CHANGED_INTENT","true","false","false","true","true","Intent","new Intent(""com.android.sync.SYNC_CONN_STATUS_CHANGED"")","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"day","true","false","false","false","true","int","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"WRITE_STATISTICS_DELAY","false","false","true","true","true","long","1000 * 60 * 30","[]","Optional[// 1/2 hour
]","\android\content\SyncStorageEngine.java"
"SOURCE_PERIODIC","true","false","false","true","true","int","4","[]","Optional[/**
 * Enum value for a periodic sync.
 */
]","\android\content\SyncStorageEngine.java"
"mSyncHistory","false","false","true","false","true","ArrayList<SyncHistoryItem>","new ArrayList<SyncHistoryItem>()","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"PENDING_OPERATION_VERSION","true","false","false","true","true","int","2","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"MILLIS_IN_4WEEKS","false","false","false","true","true","long","1000L * 60 * 60 * 24 * 7 * 4","[]","Optional[// @VisibleForTesting
]","\android\content\SyncStorageEngine.java"
"SOURCE_LOCAL","true","false","false","true","true","int","1","[]","Optional[/**
 * Enum value for a local-initiated sync.
 */
]","\android\content\SyncStorageEngine.java"
"SOURCES","true","false","false","true","true","String","{ ""SERVER"", ""LOCAL"", ""POLL"", ""USER"", ""PERIODIC"" }","[]","Optional[/**
 * String names for the sync source types.
 */
]","\android\content\SyncStorageEngine.java"
"expedited","false","false","false","false","true","boolean","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"mesg","false","false","false","false","false","String","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"MAX_HISTORY","true","false","false","true","true","int","100","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"account","false","false","false","false","true","Account","null","[]","Optional.empty","\android\content\SyncStorageEngine.java"
"EVENT_STOP","true","false","false","true","true","int","1","[]","Optional[/**
 * Enum value for a sync stop event.
 */
]","\android\content\SyncStorageEngine.java"
"mOriginalFrom","false","false","true","false","false","String","null","[]","Optional.empty","\android\widget\SimpleCursorAdapter.java"
"mCursorToStringConverter","false","false","true","false","false","CursorToStringConverter","null","[]","Optional.empty","\android\widget\SimpleCursorAdapter.java"
"mViewBinder","false","false","true","false","false","ViewBinder","null","[]","Optional.empty","\android\widget\SimpleCursorAdapter.java"
"mFrom","false","true","false","false","false","int","null","[]","Optional[/**
 * A list of columns containing the data to bind to the UI.
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\widget\SimpleCursorAdapter.java"
"mTo","false","true","false","false","false","int","null","[]","Optional[/**
 * A list of View ids representing the views to which the data must be bound.
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\widget\SimpleCursorAdapter.java"
"mStringConversionColumn","false","false","true","false","false","int","-1","[]","Optional.empty","\android\widget\SimpleCursorAdapter.java"
"sLock","false","false","true","true","true","Object","new Object()","[]","Optional.empty","\android\view\InputQueue.java"
"sRecycleCount","false","false","true","true","false","int","null","[]","Optional.empty","\android\view\InputQueue.java"
"RECYCLE_MAX_COUNT","false","false","true","true","true","int","4","[]","Optional.empty","\android\view\InputQueue.java"
"DEBUG_RECYCLING","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\view\InputQueue.java"
"mRecycleNext","false","false","true","false","false","FinishedCallback","null","[]","Optional.empty","\android\view\InputQueue.java"
"mFinishedToken","false","false","true","false","false","long","null","[]","Optional.empty","\android\view\InputQueue.java"
"sRecycleHead","false","false","true","true","false","FinishedCallback","null","[]","Optional.empty","\android\view\InputQueue.java"
"TAG","false","false","true","true","true","String","""InputQueue""","[]","Optional.empty","\android\view\InputQueue.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\view\InputQueue.java"
"mChannel","false","false","false","false","true","InputChannel","null","[]","Optional.empty","\android\view\InputQueue.java"
"snapshotWriter","false","false","true","true","true","Executor","null","[]","Optional.empty","\com\android\internal\os\SamplingProfilerIntegration.java"
"dirMade","false","false","false","true","false","boolean","false","[]","Optional[/**
 * Whether or not we've created the snapshots dir.
 */
]","\com\android\internal\os\SamplingProfilerIntegration.java"
"pending","false","false","false","true","false","boolean","null","[]","Optional[/**
 * Whether or not a snapshot is being persisted.
 */
]","\com\android\internal\os\SamplingProfilerIntegration.java"
"INSTANCE","false","false","true","true","false","SamplingProfiler","null","[]","Optional.empty","\com\android\internal\os\SamplingProfilerIntegration.java"
"enabled","false","false","true","true","true","boolean","null","[]","Optional.empty","\com\android\internal\os\SamplingProfilerIntegration.java"
"TAG","false","false","true","true","true","String","""SamplingProfilerIntegration""","[]","Optional.empty","\com\android\internal\os\SamplingProfilerIntegration.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<SavedState>","new Creator<SavedState>() {

    public SavedState createFromParcel(Parcel in) {
        return new SavedState(in);
    }

    public SavedState[] newArray(int size) {
        return new SavedState[size];
    }
}","[]","Optional.empty","\android\widget\DatePicker.java"
"mMonthPicker","false","false","true","false","true","NumberPicker","null","[]","Optional.empty","\android\widget\DatePicker.java"
"mYearPicker","false","false","true","false","true","NumberPicker","null","[]","Optional.empty","\android\widget\DatePicker.java"
"DEFAULT_START_YEAR","false","false","true","true","true","int","1900","[]","Optional.empty","\android\widget\DatePicker.java"
"mDayPicker","false","false","true","false","true","NumberPicker","null","[]","Optional[/* UI Components */
]","\android\widget\DatePicker.java"
"mMonth","false","false","true","false","true","int","null","[]","Optional.empty","\android\widget\DatePicker.java"
"mYear","false","false","true","false","true","int","null","[]","Optional.empty","\android\widget\DatePicker.java"
"DEFAULT_END_YEAR","false","false","true","true","true","int","2100","[]","Optional.empty","\android\widget\DatePicker.java"
"mOnDateChangedListener","false","false","true","false","false","OnDateChangedListener","null","[]","Optional[/**
 * How we notify users the date has changed.
 */
]","\android\widget\DatePicker.java"
"mDay","false","false","true","false","true","int","null","[]","Optional.empty","\android\widget\DatePicker.java"
"G_COEFF","false","false","true","true","true","float","new float[][] { { 0.0f }, { -29496.6f, -1586.3f }, { -2396.6f, 3026.1f, 1668.6f }, { 1340.1f, -2326.2f, 1231.9f, 634.0f }, { 912.6f, 808.9f, 166.7f, -357.1f, 89.4f }, { -230.9f, 357.2f, 200.3f, -141.1f, -163.0f, -7.8f }, { 72.8f, 68.6f, 76.0f, -141.4f, -22.8f, 13.2f, -77.9f }, { 80.5f, -75.1f, -4.7f, 45.3f, 13.9f, 10.4f, 1.7f, 4.9f }, { 24.4f, 8.1f, -14.5f, -5.6f, -19.3f, 11.5f, 10.9f, -14.1f, -3.7f }, { 5.4f, 9.4f, 3.4f, -5.2f, 3.1f, -12.4f, -0.7f, 8.4f, -8.5f, -10.1f }, { -2.0f, -6.3f, 0.9f, -1.1f, -0.2f, 2.5f, -0.3f, 2.2f, 3.1f, -1.0f, -2.8f }, { 3.0f, -1.5f, -2.1f, 1.7f, -0.5f, 0.5f, -0.8f, 0.4f, 1.8f, 0.1f, 0.7f, 3.8f }, { -2.2f, -0.2f, 0.3f, 1.0f, -0.6f, 0.9f, -0.1f, 0.5f, -0.4f, -0.4f, 0.2f, -0.8f, 0.0f } }","[]","Optional[// NOAA Technical Report: The US/UK World Magnetic Model for 2010-2015
]","\android\hardware\GeomagneticField.java"
"DELTA_G","false","false","true","true","true","float","new float[][] { { 0.0f }, { 11.6f, 16.5f }, { -12.1f, -4.4f, 1.9f }, { 0.4f, -4.1f, -2.9f, -7.7f }, { -1.8f, 2.3f, -8.7f, 4.6f, -2.1f }, { -1.0f, 0.6f, -1.8f, -1.0f, 0.9f, 1.0f }, { -0.2f, -0.2f, -0.1f, 2.0f, -1.7f, -0.3f, 1.7f }, { 0.1f, -0.1f, -0.6f, 1.3f, 0.4f, 0.3f, -0.7f, 0.6f }, { -0.1f, 0.1f, -0.6f, 0.2f, -0.2f, 0.3f, 0.3f, -0.6f, 0.2f }, { 0.0f, -0.1f, 0.0f, 0.3f, -0.4f, -0.3f, 0.1f, -0.1f, -0.4f, -0.2f }, { 0.0f, 0.0f, -0.1f, 0.2f, 0.0f, -0.1f, -0.2f, 0.0f, -0.1f, -0.2f, -0.2f }, { 0.0f, 0.0f, 0.0f, 0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -0.1f, 0.0f }, { 0.0f, 0.0f, 0.1f, 0.1f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -0.1f, 0.1f } }","[]","Optional.empty","\android\hardware\GeomagneticField.java"
"DELTA_H","false","false","true","true","true","float","new float[][] { { 0.0f }, { 0.0f, -25.9f }, { 0.0f, -22.5f, -11.8f }, { 0.0f, 7.3f, -3.9f, -2.6f }, { 0.0f, 1.1f, 2.7f, 3.9f, -0.8f }, { 0.0f, 0.4f, 1.8f, 1.2f, 4.0f, -0.6f }, { 0.0f, -0.2f, -2.1f, -0.4f, -0.6f, 0.5f, 0.9f }, { 0.0f, 0.7f, 0.3f, -0.1f, -0.1f, -0.8f, -0.3f, 0.3f }, { 0.0f, -0.1f, 0.2f, 0.4f, 0.4f, 0.1f, -0.1f, 0.4f, 0.3f }, { 0.0f, 0.0f, -0.2f, 0.0f, -0.1f, 0.1f, 0.0f, -0.2f, 0.3f, 0.2f }, { 0.0f, 0.1f, -0.1f, 0.0f, -0.1f, -0.1f, 0.0f, -0.1f, -0.2f, 0.0f, -0.1f }, { 0.0f, 0.0f, 0.1f, 0.0f, 0.1f, 0.0f, 0.1f, 0.0f, -0.1f, -0.1f, 0.0f, -0.1f }, { 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f } }","[]","Optional.empty","\android\hardware\GeomagneticField.java"
"EARTH_SEMI_MINOR_AXIS_KM","false","false","true","true","true","float","6356.7523142f","[]","Optional.empty","\android\hardware\GeomagneticField.java"
"mGcRadiusKm","false","false","true","false","false","float","null","[]","Optional.empty","\android\hardware\GeomagneticField.java"
"BASE_TIME","false","false","true","true","true","long","new GregorianCalendar(2010, 1, 1).getTimeInMillis()","[]","Optional.empty","\android\hardware\GeomagneticField.java"
"EARTH_SEMI_MAJOR_AXIS_KM","false","false","true","true","true","float","6378.137f","[]","Optional[// Constants from WGS84 (the coordinate system used by GPS)
]","\android\hardware\GeomagneticField.java"
"mGcLatitudeRad","false","false","true","false","false","float","null","[]","Optional[// Geocentric coordinates -- set by computeGeocentricCoordinates.
]","\android\hardware\GeomagneticField.java"
"mGcLongitudeRad","false","false","true","false","false","float","null","[]","Optional.empty","\android\hardware\GeomagneticField.java"
"mPDeriv","true","false","false","false","true","float","null","[]","Optional[// Derivative of mP, with respect to theta.
]","\android\hardware\GeomagneticField.java"
"SCHMIDT_QUASI_NORM_FACTORS","false","false","true","true","true","float","computeSchmidtQuasiNormFactors(G_COEFF.length)","[]","Optional[// don't depend on input variables at all.
]","\android\hardware\GeomagneticField.java"
"EARTH_REFERENCE_RADIUS_KM","false","false","true","true","true","float","6371.2f","[]","Optional.empty","\android\hardware\GeomagneticField.java"
"mP","true","false","false","false","true","float","null","[]","Optional[// (n-m)!/(2n-1)!! (where (2n-1)!! = 1*3*5*...*2n-1)
]","\android\hardware\GeomagneticField.java"
"mX","false","false","true","false","false","float","null","[]","Optional[// coordinates.
]","\android\hardware\GeomagneticField.java"
"mY","false","false","true","false","false","float","null","[]","Optional.empty","\android\hardware\GeomagneticField.java"
"mZ","false","false","true","false","false","float","null","[]","Optional.empty","\android\hardware\GeomagneticField.java"
"H_COEFF","false","false","true","true","true","float","new float[][] { { 0.0f }, { 0.0f, 4944.4f }, { 0.0f, -2707.7f, -576.1f }, { 0.0f, -160.2f, 251.9f, -536.6f }, { 0.0f, 286.4f, -211.2f, 164.3f, -309.1f }, { 0.0f, 44.6f, 188.9f, -118.2f, 0.0f, 100.9f }, { 0.0f, -20.8f, 44.1f, 61.5f, -66.3f, 3.1f, 55.0f }, { 0.0f, -57.9f, -21.1f, 6.5f, 24.9f, 7.0f, -27.7f, -3.3f }, { 0.0f, 11.0f, -20.0f, 11.9f, -17.4f, 16.7f, 7.0f, -10.8f, 1.7f }, { 0.0f, -20.5f, 11.5f, 12.8f, -7.2f, -7.4f, 8.0f, 2.1f, -6.1f, 7.0f }, { 0.0f, 2.8f, -0.1f, 4.7f, 4.4f, -7.2f, -1.0f, -3.9f, -2.0f, -2.0f, -8.3f }, { 0.0f, 0.2f, 1.7f, -0.6f, -1.8f, 0.9f, -0.4f, -2.5f, -1.3f, -2.1f, -1.9f, -1.8f }, { 0.0f, -0.9f, 0.3f, 2.1f, -2.5f, 0.5f, 0.6f, 0.0f, 0.1f, 0.3f, -0.9f, -0.2f, 0.9f } }","[]","Optional.empty","\android\hardware\GeomagneticField.java"
"mLastGcTime","false","false","false","true","false","long","null","[]","Optional.empty","\com\android\internal\os\BinderInternal.java"
"mGcWatcher","false","false","false","true","false","WeakReference<GcWatcher>","new WeakReference<GcWatcher>(new GcWatcher())","[]","Optional.empty","\com\android\internal\os\BinderInternal.java"
"mSelfObserver","false","false","true","false","false","ContentObserver","null","[]","Optional.empty","\android\database\AbstractCursor.java"
"mUpdatedRows","false","true","false","false","false","HashMap<Long,Map<String,Object>>","null","[]","Optional[/**
 * This HashMap contains a mapping from Long rowIDs to another Map
 * that maps from String column names to new values. A NULL value means to
 * remove an existing value, and all numeric values are in their class
 * forms, i.e. Integer, Long, Float, etc.
 */
]","\android\database\AbstractCursor.java"
"mPos","false","true","false","false","false","int","null","[]","Optional.empty","\android\database\AbstractCursor.java"
"mContentResolver","false","true","false","false","false","ContentResolver","null","[]","Optional.empty","\android\database\AbstractCursor.java"
"mClosed","false","true","false","false","false","boolean","false","[]","Optional.empty","\android\database\AbstractCursor.java"
"mDataSetObservable","false","false","false","false","false","DataSetObservable","new DataSetObservable()","[]","Optional.empty","\android\database\AbstractCursor.java"
"mCursor","false","false","false","false","false","WeakReference<AbstractCursor>","null","[]","Optional.empty","\android\database\AbstractCursor.java"
"mNotifyUri","false","false","true","false","false","Uri","null","[]","Optional.empty","\android\database\AbstractCursor.java"
"mSelfObserverLock","false","false","true","false","true","Object","new Object()","[]","Optional.empty","\android\database\AbstractCursor.java"
"TAG","false","false","true","true","true","String","""Cursor""","[]","Optional.empty","\android\database\AbstractCursor.java"
"mSelfObserverRegistered","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\database\AbstractCursor.java"
"mRowIdColumnIndex","false","true","false","false","false","int","null","[]","Optional[/**
 * This must be set to the index of the row ID column by any
 * subclass that wishes to support updates.
 */
]","\android\database\AbstractCursor.java"
"mCurrentRowID","false","true","false","false","false","Long","null","[]","Optional.empty","\android\database\AbstractCursor.java"
"mContentObservable","false","false","false","false","false","ContentObservable","new ContentObservable()","[]","Optional.empty","\android\database\AbstractCursor.java"
"mRasterizer","false","false","true","false","false","Rasterizer","null","[]","Optional.empty","\android\text\style\RasterizerSpan.java"
"EXTRA","false","true","false","true","true","String","""--""","[]","Optional[/**
 * Extra characters
 */
]","\com\android\internal\http\multipart\Part.java"
"CONTENT_TYPE","false","true","false","true","true","String","""Content-Type: ""","[]","Optional[/**
 * Content type header
 */
]","\com\android\internal\http\multipart\Part.java"
"CRLF","false","true","false","true","true","String","""\r\n""","[]","Optional[/**
 * Carriage return/linefeed
 */
]","\com\android\internal\http\multipart\Part.java"
"CONTENT_DISPOSITION","false","true","false","true","true","String","""Content-Disposition: form-data; name=""","[]","Optional[/**
 * Content dispostion characters
 */
]","\com\android\internal\http\multipart\Part.java"
"boundaryBytes","false","false","true","false","false","byte","null","[]","Optional[/**
 * The ASCII bytes to use as the multipart boundary.
 */
]","\com\android\internal\http\multipart\Part.java"
"CHARSET_BYTES","false","true","false","true","true","byte","EncodingUtils.getAsciiBytes(CHARSET)","[]","Optional[/**
 * Content charset as a byte array
 */
]","\com\android\internal\http\multipart\Part.java"
"CONTENT_TRANSFER_ENCODING_BYTES","false","true","false","true","true","byte","EncodingUtils.getAsciiBytes(CONTENT_TRANSFER_ENCODING)","[]","Optional[/**
 * Content type header as a byte array
 */
]","\com\android\internal\http\multipart\Part.java"
"CRLF_BYTES","false","true","false","true","true","byte","EncodingUtils.getAsciiBytes(CRLF)","[]","Optional[/**
 * Carriage return/linefeed as a byte array
 */
]","\com\android\internal\http\multipart\Part.java"
"BOUNDARY","false","true","false","true","true","String","""----------------314159265358979323846""","[]","Optional[/**
 * The boundary
 * @deprecated use {@link org.apache.http.client.methods.multipart#MULTIPART_BOUNDARY}
 */
]","\com\android\internal\http\multipart\Part.java"
"QUOTE","false","true","false","true","true","String","""\""""","[]","Optional[/**
 * Content dispostion characters
 */
]","\com\android\internal\http\multipart\Part.java"
"EXTRA_BYTES","false","true","false","true","true","byte","EncodingUtils.getAsciiBytes(EXTRA)","[]","Optional[/**
 * Extra characters as a byte array
 */
]","\com\android\internal\http\multipart\Part.java"
"QUOTE_BYTES","false","true","false","true","true","byte","EncodingUtils.getAsciiBytes(QUOTE)","[]","Optional[/**
 * Content dispostion as a byte array
 */
]","\com\android\internal\http\multipart\Part.java"
"LOG","false","false","true","true","true","Log","LogFactory.getLog(Part.class)","[]","Optional[/**
 * Log object for this class.
 */
]","\com\android\internal\http\multipart\Part.java"
"DEFAULT_BOUNDARY_BYTES","false","false","true","true","true","byte","BOUNDARY_BYTES","[]","Optional[/**
 * The default boundary to be used if {@link #setPartBoundary(byte[])} has not
 * been called.
 */
]","\com\android\internal\http\multipart\Part.java"
"CONTENT_TRANSFER_ENCODING","false","true","false","true","true","String","""Content-Transfer-Encoding: ""","[]","Optional[/**
 * Content type header
 */
]","\com\android\internal\http\multipart\Part.java"
"CONTENT_DISPOSITION_BYTES","false","true","false","true","true","byte","EncodingUtils.getAsciiBytes(CONTENT_DISPOSITION)","[]","Optional[/**
 * Content dispostion as a byte array
 */
]","\com\android\internal\http\multipart\Part.java"
"CONTENT_TYPE_BYTES","false","true","false","true","true","byte","EncodingUtils.getAsciiBytes(CONTENT_TYPE)","[]","Optional[/**
 * Content type header as a byte array
 */
]","\com\android\internal\http\multipart\Part.java"
"BOUNDARY_BYTES","false","true","false","true","true","byte","EncodingUtils.getAsciiBytes(BOUNDARY)","[]","Optional[/**
 * The boundary as a byte array.
 * @deprecated
 */
]","\com\android\internal\http\multipart\Part.java"
"CHARSET","false","true","false","true","true","String","""; charset=""","[]","Optional[/**
 * Content charset
 */
]","\com\android\internal\http\multipart\Part.java"
"mSpanStarts","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\SpannableStringBuilder.java"
"START_MASK","false","false","true","true","true","int","0xF0","[]","Optional.empty","\android\text\SpannableStringBuilder.java"
"START_SHIFT","false","false","true","true","true","int","4","[]","Optional.empty","\android\text\SpannableStringBuilder.java"
"NO_FILTERS","false","false","true","true","true","InputFilter","new InputFilter[0]","[]","Optional.empty","\android\text\SpannableStringBuilder.java"
"END_MASK","false","false","true","true","true","int","0x0F","[]","Optional.empty","\android\text\SpannableStringBuilder.java"
"MARK","false","false","true","true","true","int","1","[]","Optional.empty","\android\text\SpannableStringBuilder.java"
"mGapStart","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\SpannableStringBuilder.java"
"PARAGRAPH","false","false","true","true","true","int","3","[]","Optional.empty","\android\text\SpannableStringBuilder.java"
"mText","false","false","true","false","false","char","null","[]","Optional.empty","\android\text\SpannableStringBuilder.java"
"mSpanCount","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\SpannableStringBuilder.java"
"mSpans","false","false","true","false","false","Object","null","[]","Optional.empty","\android\text\SpannableStringBuilder.java"
"mSpanEnds","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\SpannableStringBuilder.java"
"mSpanFlags","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\SpannableStringBuilder.java"
"mGapLength","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\SpannableStringBuilder.java"
"mFilters","false","false","true","false","false","InputFilter","NO_FILTERS","[]","Optional.empty","\android\text\SpannableStringBuilder.java"
"POINT","false","false","true","true","true","int","2","[]","Optional.empty","\android\text\SpannableStringBuilder.java"
"mToast","false","false","false","false","false","Toast","null","[]","Optional.empty","\com\android\internal\app\PlatLogoActivity.java"
"mInstance","false","false","true","true","false","DdmHandleThread","new DdmHandleThread()","[]","Optional.empty","\android\ddm\DdmHandleThread.java"
"CHUNK_THDE","true","false","false","true","true","int","type(""THDE"")","[]","Optional.empty","\android\ddm\DdmHandleThread.java"
"CHUNK_THCR","true","false","false","true","true","int","type(""THCR"")","[]","Optional.empty","\android\ddm\DdmHandleThread.java"
"CHUNK_THST","true","false","false","true","true","int","type(""THST"")","[]","Optional.empty","\android\ddm\DdmHandleThread.java"
"CHUNK_THEN","true","false","false","true","true","int","type(""THEN"")","[]","Optional.empty","\android\ddm\DdmHandleThread.java"
"CHUNK_STKL","true","false","false","true","true","int","type(""STKL"")","[]","Optional.empty","\android\ddm\DdmHandleThread.java"
"OperationFailedMediaCorrupt","true","false","false","true","true","int","-4","[]","Optional[/**
 * Operation failed: Media is corrupt.
 * @see android.os.storage.StorageManager
 */
]","\android\os\storage\StorageResultCode.java"
"OperationFailedStorageNotMounted","true","false","false","true","true","int","-5","[]","Optional[/**
 * Operation failed: Storage not mounted.
 * @see android.os.storage.StorageManager
 */
]","\android\os\storage\StorageResultCode.java"
"OperationSucceeded","true","false","false","true","true","int","0","[]","Optional[/**
 * Operation succeeded.
 * @see android.os.storage.StorageManager
 */
]","\android\os\storage\StorageResultCode.java"
"OperationFailedNoMedia","true","false","false","true","true","int","-2","[]","Optional[/**
 * Operation failed: Missing media.
 * @see android.os.storage.StorageManager
 */
]","\android\os\storage\StorageResultCode.java"
"OperationFailedMediaBlank","true","false","false","true","true","int","-3","[]","Optional[/**
 * Operation failed: Media is blank.
 * @see android.os.storage.StorageManager
 */
]","\android\os\storage\StorageResultCode.java"
"OperationFailedInternalError","true","false","false","true","true","int","-1","[]","Optional[/**
 * Operation failed: Internal error.
 * @see android.os.storage.StorageManager
 */
]","\android\os\storage\StorageResultCode.java"
"OperationFailedStorageMounted","true","false","false","true","true","int","-6","[]","Optional[/**
 * Operation failed: Storage is mounted.
 * @see android.os.storage.StorageManager
 */
]","\android\os\storage\StorageResultCode.java"
"OperationFailedStorageBusy","true","false","false","true","true","int","-7","[]","Optional[/**
 * Operation failed: Storage is busy.
 * @see android.os.storage.StorageManager
 */
]","\android\os\storage\StorageResultCode.java"
"mFlags","false","false","false","false","false","int","null","[]","Optional.empty","\android\os\PowerManager.java"
"ACQUIRE_CAUSES_WAKEUP","true","false","false","true","true","int","0x10000000","[]","Optional[/**
 * Normally wake locks don't actually wake the device, they just cause
 * it to remain on once it's already on.  Think of the video player
 * app as the normal behavior.  Notifications that pop up and want
 * the device to be on are the exception; use this flag to be like them.
 * <p>
 * Does not work with PARTIAL_WAKE_LOCKs.
 */
]","\android\os\PowerManager.java"
"SCREEN_BRIGHT_WAKE_LOCK","true","false","false","true","true","int","WAKE_BIT_CPU_WEAK | WAKE_BIT_SCREEN_BRIGHT","[]","Optional[/**
 * Wake lock that ensures that the screen is on at full brightness;
 * the keyboard backlight will be allowed to go off.
 */
]","\android\os\PowerManager.java"
"mWorkSource","false","false","false","false","false","WorkSource","null","[]","Optional.empty","\android\os\PowerManager.java"
"WAKE_BIT_SCREEN_BRIGHT","false","false","true","true","true","int","8","[]","Optional.empty","\android\os\PowerManager.java"
"WAKE_BIT_CPU_WEAK","false","false","true","true","true","int","2","[]","Optional.empty","\android\os\PowerManager.java"
"WAKE_BIT_SCREEN_DIM","false","false","true","true","true","int","4","[]","Optional.empty","\android\os\PowerManager.java"
"WAKE_BIT_PROXIMITY_SCREEN_OFF","false","false","true","true","true","int","32","[]","Optional.empty","\android\os\PowerManager.java"
"WAIT_FOR_PROXIMITY_NEGATIVE","true","false","false","true","true","int","1","[]","Optional[/**
 * Flag for {@link WakeLock#release release(int)} to defer releasing a
 * {@link #WAKE_BIT_PROXIMITY_SCREEN_OFF} wakelock until the proximity sensor returns
 * a negative value.
 *
 * {@hide}
 */
]","\android\os\PowerManager.java"
"mReleaser","false","false","false","false","false","Runnable","new Runnable() {

    public void run() {
        release();
    }
}","[]","Optional.empty","\android\os\PowerManager.java"
"ON_AFTER_RELEASE","true","false","false","true","true","int","0x20000000","[]","Optional[/**
 * When this wake lock is released, poke the user activity timer
 * so the screen stays on for a little longer.
 * <p>
 * Will not turn the screen on if it is not already on.  See {@link #ACQUIRE_CAUSES_WAKEUP}
 * if you want that.
 * <p>
 * Does not work with PARTIAL_WAKE_LOCKs.
 */
]","\android\os\PowerManager.java"
"FULL_WAKE_LOCK","true","false","false","true","true","int","WAKE_BIT_CPU_WEAK | WAKE_BIT_SCREEN_BRIGHT | WAKE_BIT_KEYBOARD_BRIGHT","[]","Optional[/**
 * Wake lock that ensures that the screen and keyboard are on at
 * full brightness.
 */
]","\android\os\PowerManager.java"
"PARTIAL_WAKE_LOCK","true","false","false","true","true","int","WAKE_BIT_CPU_STRONG","[]","Optional[/**
 * Wake lock that ensures that the CPU is running.  The screen might
 * not be on.
 */
]","\android\os\PowerManager.java"
"mCount","false","false","false","false","false","int","0","[]","Optional.empty","\android\os\PowerManager.java"
"mToken","false","false","false","false","false","IBinder","null","[]","Optional.empty","\android\os\PowerManager.java"
"mHeld","false","false","false","false","false","boolean","false","[]","Optional.empty","\android\os\PowerManager.java"
"PROXIMITY_SCREEN_OFF_WAKE_LOCK","true","false","false","true","true","int","WAKE_BIT_PROXIMITY_SCREEN_OFF","[]","Optional[/**
 * Wake lock that turns the screen off when the proximity sensor activates.
 * Since not all devices have proximity sensors, use
 * {@link #getSupportedWakeLockFlags() getSupportedWakeLockFlags()} to determine if
 * this wake lock mode is supported.
 *
 * {@hide}
 */
]","\android\os\PowerManager.java"
"mHandler","false","false","false","false","false","Handler","null","[]","Optional.empty","\android\os\PowerManager.java"
"TAG","false","false","true","true","true","String","""PowerManager""","[]","Optional.empty","\android\os\PowerManager.java"
"SCREEN_DIM_WAKE_LOCK","true","false","false","true","true","int","WAKE_BIT_CPU_WEAK | WAKE_BIT_SCREEN_DIM","[]","Optional[/**
 * Wake lock that ensures that the screen is on (but may be dimmed);
 * the keyboard backlight will be allowed to go off.
 */
]","\android\os\PowerManager.java"
"mRefCounted","false","false","false","false","false","boolean","true","[]","Optional.empty","\android\os\PowerManager.java"
"mService","false","false","false","false","false","IPowerManager","null","[]","Optional.empty","\android\os\PowerManager.java"
"mTag","false","false","false","false","false","String","null","[]","Optional.empty","\android\os\PowerManager.java"
"WAKE_BIT_CPU_STRONG","false","false","true","true","true","int","1","[]","Optional[/**
 * These internal values define the underlying power elements that we might
 * want to control individually.  Eventually we'd like to expose them.
 */
]","\android\os\PowerManager.java"
"LOCK_MASK","false","false","true","true","true","int","WAKE_BIT_CPU_STRONG | WAKE_BIT_CPU_WEAK | WAKE_BIT_SCREEN_DIM | WAKE_BIT_SCREEN_BRIGHT | WAKE_BIT_KEYBOARD_BRIGHT | WAKE_BIT_PROXIMITY_SCREEN_OFF","[]","Optional.empty","\android\os\PowerManager.java"
"WAKE_BIT_KEYBOARD_BRIGHT","false","false","true","true","true","int","16","[]","Optional.empty","\android\os\PowerManager.java"
"RELEASE_WAKE_LOCK","false","false","false","true","true","int","1","[]","Optional.empty","\android\os\PowerManager.java"
"mDefaultTabIndex","false","false","true","false","false","int","-1","[]","Optional.empty","\android\app\TabActivity.java"
"mTabHost","false","false","true","false","false","TabHost","null","[]","Optional.empty","\android\app\TabActivity.java"
"mDefaultTab","false","false","true","false","false","String","null","[]","Optional.empty","\android\app\TabActivity.java"
"HTTP_DATE_ANSIC_REGEXP","false","false","true","true","true","String","""[ ]([A-Za-z]{3,9})[ ]+([0-9]{1,2})[ ]"" + ""([0-9]{1,2}:[0-9][0-9]:[0-9][0-9])[ ]([0-9]{2,4})""","[]","Optional.empty","\com\android\internal\http\HttpDateTime.java"
"HTTP_DATE_RFC_PATTERN","false","false","true","true","true","Pattern","Pattern.compile(HTTP_DATE_RFC_REGEXP)","[]","Optional[/**
 * The compiled version of the HTTP-date regular expressions.
 */
]","\com\android\internal\http\HttpDateTime.java"
"HTTP_DATE_ANSIC_PATTERN","false","false","true","true","true","Pattern","Pattern.compile(HTTP_DATE_ANSIC_REGEXP)","[]","Optional.empty","\com\android\internal\http\HttpDateTime.java"
"HTTP_DATE_RFC_REGEXP","false","false","true","true","true","String","""([0-9]{1,2})[- ]([A-Za-z]{3,9})[- ]([0-9]{2,4})[ ]"" + ""([0-9]{1,2}:[0-9][0-9]:[0-9][0-9])""","[]","Optional[/*
     * Regular expression for parsing HTTP-date.
     *
     * Wdy, DD Mon YYYY HH:MM:SS GMT
     * RFC 822, updated by RFC 1123
     *
     * Weekday, DD-Mon-YY HH:MM:SS GMT
     * RFC 850, obsoleted by RFC 1036
     *
     * Wdy Mon DD HH:MM:SS YYYY
     * ANSI C's asctime() format
     *
     * with following variations
     *
     * Wdy, DD-Mon-YYYY HH:MM:SS GMT
     * Wdy, (SP)D Mon YYYY HH:MM:SS GMT
     * Wdy,DD Mon YYYY HH:MM:SS GMT
     * Wdy, DD-Mon-YY HH:MM:SS GMT
     * Wdy, DD Mon YYYY HH:MM:SS -HHMM
     * Wdy, DD Mon YYYY HH:MM:SS
     * Wdy Mon (SP)D HH:MM:SS YYYY
     * Wdy Mon DD HH:MM:SS YYYY GMT
     * 
     * HH can be H if the first digit is zero.
     * 
     * Mon can be the full name of the month.
     */
]","\com\android\internal\http\HttpDateTime.java"
"second","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\http\HttpDateTime.java"
"hour","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\http\HttpDateTime.java"
"minute","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\http\HttpDateTime.java"
"mStyle","false","false","true","false","false","CharacterStyle","null","[]","Optional.empty","\android\text\style\CharacterStyle.java"
"sRef","false","false","true","true","false","CookieSyncManager","null","[]","Optional.empty","\android\webkit\CookieSyncManager.java"
"mLastUpdate","false","false","true","false","false","long","null","[]","Optional[// time when last update happened
]","\android\webkit\CookieSyncManager.java"
"sInstance","false","false","true","true","false","Editable.Factory","new Editable.Factory()","[]","Optional.empty","\android\text\Editable.java"
"mScrollY","true","false","false","false","false","int","null","[]","Optional.empty","\android\text\method\Touch.java"
"mScrollX","true","false","false","false","false","int","null","[]","Optional.empty","\android\text\method\Touch.java"
"mX","true","false","false","false","false","float","null","[]","Optional.empty","\android\text\method\Touch.java"
"mY","true","false","false","false","false","float","null","[]","Optional.empty","\android\text\method\Touch.java"
"mFarEnough","true","false","false","false","false","boolean","null","[]","Optional.empty","\android\text\method\Touch.java"
"mUsed","true","false","false","false","false","boolean","null","[]","Optional.empty","\android\text\method\Touch.java"
"SERVICE_INTERFACE","false","false","true","true","true","String","""android.content.SyncAdapter""","[]","Optional.empty","\android\content\SyncAdaptersCache.java"
"SERVICE_META_DATA","false","false","true","true","true","String","""android.content.SyncAdapter""","[]","Optional.empty","\android\content\SyncAdaptersCache.java"
"ATTRIBUTES_NAME","false","false","true","true","true","String","""sync-adapter""","[]","Optional.empty","\android\content\SyncAdaptersCache.java"
"TAG","false","false","true","true","true","String","""Account""","[]","Optional.empty","\android\content\SyncAdaptersCache.java"
"sSerializer","false","false","true","true","true","MySerializer","new MySerializer()","[]","Optional.empty","\android\content\SyncAdaptersCache.java"
"mDialHeight","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\AnalogClock.java"
"mMinutes","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\AnalogClock.java"
"mAttached","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\AnalogClock.java"
"mHourHand","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\AnalogClock.java"
"mCalendar","false","false","true","false","false","Time","null","[]","Optional.empty","\android\widget\AnalogClock.java"
"mDialWidth","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\AnalogClock.java"
"mDial","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\AnalogClock.java"
"mHandler","false","false","true","false","true","Handler","new Handler()","[]","Optional.empty","\android\widget\AnalogClock.java"
"mIntentReceiver","false","false","true","false","true","BroadcastReceiver","new BroadcastReceiver() {

    @Override
    public void onReceive(Context context, Intent intent) {
        if (intent.getAction().equals(Intent.ACTION_TIMEZONE_CHANGED)) {
            String tz = intent.getStringExtra(""time-zone"");
            mCalendar = new Time(TimeZone.getTimeZone(tz).getID());
        }
        onTimeChanged();
        invalidate();
    }
}","[]","Optional.empty","\android\widget\AnalogClock.java"
"mChanged","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\AnalogClock.java"
"mHour","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\AnalogClock.java"
"mMinuteHand","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\AnalogClock.java"
"ACTION_ENTER_CAR_MODE","true","false","false","true","false","String","""android.app.action.ENTER_CAR_MODE""","[]","Optional[/**
 * Broadcast sent when the device's UI has switched to car mode, either
 * by being placed in a car dock or explicit action of the user.  After
 * sending the broadcast, the system will start the intent
 * {@link android.content.Intent#ACTION_MAIN} with category
 * {@link android.content.Intent#CATEGORY_CAR_DOCK}
 * to display the car UI, which typically what an application would
 * implement to provide their own interface.  However, applications can
 * also monitor this Intent in order to be informed of mode changes or
 * prevent the normal car UI from being displayed by setting the result
 * of the broadcast to {@link Activity#RESULT_CANCELED}.
 */
]","\android\app\UiModeManager.java"
"MODE_NIGHT_NO","true","false","false","true","true","int","Configuration.UI_MODE_NIGHT_NO >> 4","[]","Optional[/**
 * Constant for {@link #setNightMode(int)} and {@link #getNightMode()}:
 * never run in night mode.
 */
]","\android\app\UiModeManager.java"
"ACTION_ENTER_DESK_MODE","true","false","false","true","false","String","""android.app.action.ENTER_DESK_MODE""","[]","Optional[/**
 * Broadcast sent when the device's UI has switched to desk mode,
 * by being placed in a desk dock.  After
 * sending the broadcast, the system will start the intent
 * {@link android.content.Intent#ACTION_MAIN} with category
 * {@link android.content.Intent#CATEGORY_DESK_DOCK}
 * to display the desk UI, which typically what an application would
 * implement to provide their own interface.  However, applications can
 * also monitor this Intent in order to be informed of mode changes or
 * prevent the normal desk UI from being displayed by setting the result
 * of the broadcast to {@link Activity#RESULT_CANCELED}.
 */
]","\android\app\UiModeManager.java"
"ACTION_EXIT_DESK_MODE","true","false","false","true","false","String","""android.app.action.EXIT_DESK_MODE""","[]","Optional[/**
 * Broadcast sent when the device's UI has switched away from desk mode back
 * to normal mode.  Typically used by a desk mode app, to dismiss itself
 * when the user exits desk mode.
 */
]","\android\app\UiModeManager.java"
"MODE_NIGHT_AUTO","true","false","false","true","true","int","Configuration.UI_MODE_NIGHT_UNDEFINED >> 4","[]","Optional[/**
 * Constant for {@link #setNightMode(int)} and {@link #getNightMode()}:
 * automatically switch night mode on and off based on the time.
 */
]","\android\app\UiModeManager.java"
"DISABLE_CAR_MODE_GO_HOME","true","false","false","true","true","int","0x0001","[]","Optional[/**
 * Flag for use with {@link #disableCarMode(int)}: go to the normal
 * home activity as part of the disable.  Disabling this way ensures
 * a clean transition between the current activity (in car mode) and
 * the original home activity (which was typically last running without
 * being in car mode).
 */
]","\android\app\UiModeManager.java"
"ENABLE_CAR_MODE_GO_CAR_HOME","true","false","false","true","true","int","0x0001","[]","Optional[/**
 * Flag for use with {@link #enableCarMode(int)}: go to the car
 * home activity as part of the enable.  Enabling this way ensures
 * a clean transition between the current activity (in non-car-mode) and
 * the car home activity that will serve as home while in car mode.  This
 * will switch to the car home activity even if we are already in car mode.
 */
]","\android\app\UiModeManager.java"
"TAG","false","false","true","true","true","String","""UiModeManager""","[]","Optional.empty","\android\app\UiModeManager.java"
"MODE_NIGHT_YES","true","false","false","true","true","int","Configuration.UI_MODE_NIGHT_YES >> 4","[]","Optional[/**
 * Constant for {@link #setNightMode(int)} and {@link #getNightMode()}:
 * always run in night mode.
 */
]","\android\app\UiModeManager.java"
"mService","false","false","true","false","false","IUiModeManager","null","[]","Optional.empty","\android\app\UiModeManager.java"
"ACTION_EXIT_CAR_MODE","true","false","false","true","false","String","""android.app.action.EXIT_CAR_MODE""","[]","Optional[/**
 * Broadcast sent when the device's UI has switch away from car mode back
 * to normal mode.  Typically used by a car mode app, to dismiss itself
 * when the user exits car mode.
 */
]","\android\app\UiModeManager.java"
"mCursor","false","false","true","false","false","Cursor","null","[]","Optional[// updated in onMove
]","\android\database\MergeCursor.java"
"mObserver","false","false","true","false","false","DataSetObserver","new DataSetObserver() {

    @Override
    public void onChanged() {
        // Reset our position so the optimizations in move-related code
        // don't screw us over
        mPos = -1;
    }

    @Override
    public void onInvalidated() {
        mPos = -1;
    }
}","[]","Optional.empty","\android\database\MergeCursor.java"
"mCursors","false","false","true","false","false","Cursor","null","[]","Optional.empty","\android\database\MergeCursor.java"
"mTrie","false","false","true","false","false","char","null","[]","Optional.empty","\android\text\AutoText.java"
"mSize","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\AutoText.java"
"sLock","false","false","true","true","false","Object","new Object()","[]","Optional.empty","\android\text\AutoText.java"
"TRIE_SIZEOF","false","false","true","true","true","int","4","[]","Optional.empty","\android\text\AutoText.java"
"TRIE_NEXT","false","false","true","true","true","int","3","[]","Optional.empty","\android\text\AutoText.java"
"TRIE_C","false","false","true","true","true","int","0","[]","Optional.empty","\android\text\AutoText.java"
"TRIE_ROOT","false","false","true","true","true","int","0","[]","Optional.empty","\android\text\AutoText.java"
"mTrieUsed","false","false","true","false","false","char","null","[]","Optional.empty","\android\text\AutoText.java"
"DEFAULT","false","false","true","true","true","int","14337","[]","Optional[// Size of the Trie 13 Aug 2007
]","\android\text\AutoText.java"
"mText","false","false","true","false","false","String","null","[]","Optional.empty","\android\text\AutoText.java"
"mLocale","false","false","true","false","false","Locale","null","[]","Optional.empty","\android\text\AutoText.java"
"RIGHT","false","false","true","true","true","int","9300","[]","Optional[// Size of 'right' 13 Aug 2007
]","\android\text\AutoText.java"
"INCREMENT","false","false","true","true","true","int","1024","[]","Optional.empty","\android\text\AutoText.java"
"TRIE_OFF","false","false","true","true","true","int","1","[]","Optional.empty","\android\text\AutoText.java"
"sInstance","false","false","true","true","false","AutoText","new AutoText(Resources.getSystem())","[]","Optional.empty","\android\text\AutoText.java"
"TRIE_CHILD","false","false","true","true","true","int","2","[]","Optional.empty","\android\text\AutoText.java"
"TRIE_NULL","false","false","true","true","true","char","(char) -1","[]","Optional.empty","\android\text\AutoText.java"
"mCallbacks","false","false","false","false","false","HashMap<IBinder,Callback>","new HashMap<IBinder, Callback>()","[]","Optional[/*package*/
]","\android\os\RemoteCallbackList.java"
"mKilled","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\os\RemoteCallbackList.java"
"mActiveBroadcast","false","false","true","false","false","Object","null","[]","Optional.empty","\android\os\RemoteCallbackList.java"
"mCallback","false","false","false","false","true","E","null","[]","Optional.empty","\android\os\RemoteCallbackList.java"
"mCookie","false","false","false","false","true","Object","null","[]","Optional.empty","\android\os\RemoteCallbackList.java"
"mBroadcastCount","false","false","true","false","false","int","-1","[]","Optional.empty","\android\os\RemoteCallbackList.java"
"mSavePassword","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\webkit\WebSettings.java"
"mLoadsImagesAutomatically","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\webkit\WebSettings.java"
"mLightTouchEnabled","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\webkit\WebSettings.java"
"mDefaultFixedFontSize","false","false","true","false","false","int","13","[]","Optional.empty","\android\webkit\WebSettings.java"
"mSupportZoom","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\webkit\WebSettings.java"
"mNeedInitialFocus","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\webkit\WebSettings.java"
"mAppCachePath","false","false","true","false","false","String","""""","[]","Optional.empty","\android\webkit\WebSettings.java"
"mFixedFontFamily","false","false","true","false","false","String","""monospace""","[]","Optional.empty","\android\webkit\WebSettings.java"
"mDatabaseEnabled","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\webkit\WebSettings.java"
"PREF_FILE","false","false","true","true","true","String","""WebViewSettings""","[]","Optional.empty","\android\webkit\WebSettings.java"
"mSyncPending","false","false","true","false","false","boolean","false","[]","Optional[// Flag to prevent multiple SYNC messages at one time.
]","\android\webkit\WebSettings.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\webkit\WebSettings.java"
"mBlockNetworkLoads","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\webkit\WebSettings.java"
"mGeolocationDatabasePath","false","false","true","false","false","String","""""","[]","Optional.empty","\android\webkit\WebSettings.java"
"mAppCacheEnabled","false","false","true","false","false","boolean","false","[]","Optional[// HTML5 API flags
]","\android\webkit\WebSettings.java"
"LOAD_DEFAULT","true","false","false","true","true","int","-1","[]","Optional[/**
 * Default cache usage pattern  Use with {@link #setCacheMode}.
 */
]","\android\webkit\WebSettings.java"
"mDefaultTextEncoding","false","false","true","false","false","String","null","[]","Optional.empty","\android\webkit\WebSettings.java"
"sLockForLocaleSettings","false","false","true","true","false","Object","null","[]","Optional.empty","\android\webkit\WebSettings.java"
"mAllowFileAccess","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\webkit\WebSettings.java"
"mDoubleTapToastCount","false","false","true","true","false","int","3","[]","Optional[// private WebSettings, not accessible by the host activity
]","\android\webkit\WebSettings.java"
"mShrinksStandaloneImagesToFit","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\webkit\WebSettings.java"
"PRIORITY","false","false","false","true","true","int","1","[]","Optional[// Message id for setting priority
]","\android\webkit\WebSettings.java"
"mBlockNetworkImage","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\webkit\WebSettings.java"
"mPluginState","false","false","true","false","false","PluginState","PluginState.OFF","[]","Optional.empty","\android\webkit\WebSettings.java"
"mStandardFontFamily","false","false","true","false","false","String","""sans-serif""","[]","Optional.empty","\android\webkit\WebSettings.java"
"mFantasyFontFamily","false","false","true","false","false","String","""fantasy""","[]","Optional.empty","\android\webkit\WebSettings.java"
"mBrowserFrame","false","false","true","false","false","BrowserFrame","null","[]","Optional[// BrowserFrame used to access the native frame pointer.
]","\android\webkit\WebSettings.java"
"mJavaScriptCanOpenWindowsAutomatically","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\webkit\WebSettings.java"
"LOAD_NORMAL","true","false","false","true","true","int","0","[]","Optional[/**
 * Normal cache usage pattern  Use with {@link #setCacheMode}.
 */
]","\android\webkit\WebSettings.java"
"mDefaultFontSize","false","false","true","false","false","int","16","[]","Optional.empty","\android\webkit\WebSettings.java"
"SYNC","false","false","false","true","true","int","0","[]","Optional[// Message id for syncing
]","\android\webkit\WebSettings.java"
"mUseWideViewport","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\webkit\WebSettings.java"
"DOUBLE_TAP_TOAST_COUNT","false","false","true","true","true","String","""double_tap_toast_count""","[]","Optional.empty","\android\webkit\WebSettings.java"
"mGeolocationEnabled","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\webkit\WebSettings.java"
"mUseDefaultUserAgent","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\webkit\WebSettings.java"
"SET_DOUBLE_TAP_TOAST_COUNT","false","false","false","true","true","int","2","[]","Optional[// Message id for writing double-tap toast count
]","\android\webkit\WebSettings.java"
"DESKTOP_USERAGENT","false","false","true","true","true","String","""Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_7; en-us)"" + "" AppleWebKit/530.17 (KHTML, like Gecko) Version/4.0"" + "" Safari/530.17""","[]","Optional[// User agent strings.
]","\android\webkit\WebSettings.java"
"mDefaultZoom","false","false","true","false","false","ZoomDensity","ZoomDensity.MEDIUM","[]","Optional[// native WebCore code.
]","\android\webkit\WebSettings.java"
"mMinimumFontSize","false","false","true","false","false","int","8","[]","Optional.empty","\android\webkit\WebSettings.java"
"mJavaScriptEnabled","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\webkit\WebSettings.java"
"mCursiveFontFamily","false","false","true","false","false","String","""cursive""","[]","Optional.empty","\android\webkit\WebSettings.java"
"mSerifFontFamily","false","false","true","false","false","String","""serif""","[]","Optional.empty","\android\webkit\WebSettings.java"
"LOAD_CACHE_ONLY","true","false","false","true","true","int","3","[]","Optional[/**
 * Don't use the network, load from cache only.
 * Use with {@link #setCacheMode}.
 */
]","\android\webkit\WebSettings.java"
"mUseWebViewBackgroundOverscrollBackground","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\webkit\WebSettings.java"
"mUserAgent","false","false","true","false","false","String","null","[]","Optional.empty","\android\webkit\WebSettings.java"
"LOAD_CACHE_ELSE_NETWORK","true","false","false","true","true","int","1","[]","Optional[/**
 * Use cache if content is there, even if expired (eg, history nav)
 * If it is not in the cache, load from network.
 * Use with {@link #setCacheMode}.
 */
]","\android\webkit\WebSettings.java"
"mLoadWithOverviewMode","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\webkit\WebSettings.java"
"mEventHandler","false","false","true","false","true","EventHandler","null","[]","Optional[// Custom handler that queues messages until the WebCore thread is active.
]","\android\webkit\WebSettings.java"
"mAcceptLanguage","false","false","true","false","false","String","null","[]","Optional.empty","\android\webkit\WebSettings.java"
"mTextSize","false","false","true","false","false","TextSize","TextSize.NORMAL","[]","Optional.empty","\android\webkit\WebSettings.java"
"mDatabasePath","false","false","true","false","false","String","""""","[]","Optional.empty","\android\webkit\WebSettings.java"
"mSupportMultipleWindows","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\webkit\WebSettings.java"
"mHandler","false","false","true","false","false","Handler","null","[]","Optional[// Actual WebCore thread handler
]","\android\webkit\WebSettings.java"
"mBuiltInZoomControls","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\webkit\WebSettings.java"
"IPHONE_USERAGENT","false","false","true","true","true","String","""Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us)"" + "" AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0"" + "" Mobile/7A341 Safari/528.16""","[]","Optional.empty","\android\webkit\WebSettings.java"
"mSansSerifFontFamily","false","false","true","false","false","String","""sans-serif""","[]","Optional.empty","\android\webkit\WebSettings.java"
"mRenderPriority","false","false","true","false","false","RenderPriority","RenderPriority.NORMAL","[]","Optional.empty","\android\webkit\WebSettings.java"
"mDatabasePathHasBeenSet","false","false","true","false","false","boolean","false","[]","Optional[// once. Keep track of when the path has been set.
]","\android\webkit\WebSettings.java"
"mNavDump","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\webkit\WebSettings.java"
"mWorkersEnabled","false","false","true","false","false","boolean","false","[]","Optional[// only affects V8.
]","\android\webkit\WebSettings.java"
"mDomStorageEnabled","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\webkit\WebSettings.java"
"mUseDoubleTree","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\webkit\WebSettings.java"
"mSaveFormData","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\webkit\WebSettings.java"
"sLocale","false","false","true","true","false","Locale","null","[]","Optional.empty","\android\webkit\WebSettings.java"
"mPageCacheCapacity","false","false","true","false","false","int","0","[]","Optional.empty","\android\webkit\WebSettings.java"
"mAppCacheMaxSize","false","false","true","false","false","long","Long.MAX_VALUE","[]","Optional[// HTML5 configuration parameters
]","\android\webkit\WebSettings.java"
"mLayoutAlgorithm","false","false","true","false","false","LayoutAlgorithm","LayoutAlgorithm.NARROW_COLUMNS","[]","Optional[// know what they are.
]","\android\webkit\WebSettings.java"
"value","false","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\WebSettings.java"
"LOAD_NO_CACHE","true","false","false","true","true","int","2","[]","Optional[/**
 * Don't use the cache, load from network
 * Use with {@link #setCacheMode}.
 */
]","\android\webkit\WebSettings.java"
"mOverrideCacheMode","false","false","true","false","false","int","LOAD_DEFAULT","[]","Optional.empty","\android\webkit\WebSettings.java"
"mWebView","false","false","true","false","false","WebView","null","[]","Optional[// WebView associated with this WebSettings.
]","\android\webkit\WebSettings.java"
"mMinimumLogicalFontSize","false","false","true","false","false","int","8","[]","Optional.empty","\android\webkit\WebSettings.java"
"ssp","false","false","true","false","false","Part","null","[]","Optional.empty","\android\net\Uri.java"
"path","false","false","true","false","false","PathPart","null","[]","Optional.empty","\android\net\Uri.java"
"ENCODED","false","false","false","true","true","int","1","[]","Optional.empty","\android\net\Uri.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<Uri>","new Parcelable.Creator<Uri>() {

    public Uri createFromParcel(Parcel in) {
        int type = in.readInt();
        switch(type) {
            case NULL_TYPE_ID:
                return null;
            case StringUri.TYPE_ID:
                return StringUri.readFrom(in);
            case OpaqueUri.TYPE_ID:
                return OpaqueUri.readFrom(in);
            case HierarchicalUri.TYPE_ID:
                return HierarchicalUri.readFrom(in);
        }
        throw new AssertionError(""Unknown URI type: "" + type);
    }

    public Uri[] newArray(int size) {
        return new Uri[size];
    }
}","[]","Optional[/**
 * Reads Uris from Parcels.
 */
]","\android\net\Uri.java"
"NOT_FOUND","false","false","true","true","true","int","-1","[]","Optional[/**
 * Index of a component which was not found.
 */
]","\android\net\Uri.java"
"size","false","false","false","false","false","int","0","[]","Optional.empty","\android\net\Uri.java"
"scheme","false","false","true","false","false","String","null","[]","Optional.empty","\android\net\Uri.java"
"NOT_HIERARCHICAL","false","false","true","true","true","String","""This isn't a hierarchical URI.""","[]","Optional[/**
 * Error message presented when a user tries to treat an opaque URI as
 * hierarchical.
 */
]","\android\net\Uri.java"
"cachedSsi","false","false","true","false","false","int","NOT_CALCULATED","[]","Optional[/**
 * Cached scheme separator index.
 */
]","\android\net\Uri.java"
"HEX_DIGITS","false","false","true","true","true","char","""0123456789ABCDEF"".toCharArray()","[]","Optional.empty","\android\net\Uri.java"
"opaquePart","false","false","true","false","false","Part","null","[]","Optional.empty","\android\net\Uri.java"
"query","false","false","true","false","false","Part","null","[]","Optional.empty","\android\net\Uri.java"
"uriString","false","false","true","false","false","String","NOT_CACHED","[]","Optional.empty","\android\net\Uri.java"
"DECODED","false","false","false","true","true","int","2","[]","Optional.empty","\android\net\Uri.java"
"port","false","false","true","false","false","int","NOT_CALCULATED","[]","Optional.empty","\android\net\Uri.java"
"authority","false","false","true","false","false","Part","null","[]","Optional.empty","\android\net\Uri.java"
"pathSegments","false","false","true","false","false","PathSegments","null","[]","Optional[/**
 * Cached path segments. This doesn't need to be volatile--we don't
 * care if other threads see the result.
 */
]","\android\net\Uri.java"
"EMPTY","false","false","false","true","true","PathPart","new PathPart("""", """")","[]","Optional[/**
 * A part with empty strings for values.
 */
]","\android\net\Uri.java"
"NOT_CALCULATED","false","false","true","true","true","int","-2","[]","Optional[/**
 * Placeholder value for an index which hasn't been calculated yet.
 */
]","\android\net\Uri.java"
"NOT_CACHED","false","false","true","true","true","String","new String(""NOT CACHED"")","[@SuppressWarnings(""RedundantStringConstructorCall"")]","Optional[/**
 * NOTE: EMPTY accesses this field during its own initialization, so this
 * field *must* be initialized first, or else EMPTY will see a null value!
 *
 * Placeholder for strings which haven't been cached. This enables us
 * to cache null. We intentionally create a new String instance so we can
 * compare its identity and there is no chance we will confuse it with
 * user data.
 */
]","\android\net\Uri.java"
"userInfo","false","false","true","false","false","Part","null","[]","Optional.empty","\android\net\Uri.java"
"LOG","false","false","true","true","true","String","Uri.class.getSimpleName()","[]","Optional[/**
 * Log tag.
 */
]","\android\net\Uri.java"
"NULL_TYPE_ID","false","false","true","true","true","int","0","[]","Optional[/**
 * Identifies a null parcelled Uri.
 */
]","\android\net\Uri.java"
"encoded","false","false","false","false","false","String","null","[]","Optional.empty","\android\net\Uri.java"
"segments","false","false","false","false","false","String","null","[]","Optional.empty","\android\net\Uri.java"
"cachedString","false","false","true","false","false","String","NOT_CACHED","[]","Optional.empty","\android\net\Uri.java"
"DEFAULT_ENCODING","false","false","true","true","true","String","""UTF-8""","[]","Optional[/**
 * Default encoding.
 */
]","\android\net\Uri.java"
"host","false","false","true","false","false","String","NOT_CACHED","[]","Optional.empty","\android\net\Uri.java"
"BOTH","false","false","false","true","true","int","0","[]","Optional.empty","\android\net\Uri.java"
"NULL","false","false","false","true","true","PathPart","new PathPart(null, null)","[]","Optional[/**
 * A part with null values.
 */
]","\android\net\Uri.java"
"TYPE_ID","false","false","false","true","true","int","3","[]","Optional[/**
 * Used in parcelling.
 */
]","\android\net\Uri.java"
"cachedFsi","false","false","true","false","false","int","NOT_CALCULATED","[]","Optional[/**
 * Cached fragment separator index.
 */
]","\android\net\Uri.java"
"decoded","false","false","false","false","false","String","null","[]","Optional.empty","\android\net\Uri.java"
"REPLACEMENT","false","false","true","true","true","byte","{ (byte) 0xFF, (byte) 0xFD }","[]","Optional[/**
 * Unicode replacement character: \\uFFFD.
 */
]","\android\net\Uri.java"
"fragment","false","false","true","false","false","Part","null","[]","Optional.empty","\android\net\Uri.java"
"mPos","false","false","true","false","false","int","null","[]","Optional[// The current position offset, in bits, from the msb in byte 0.
]","\com\android\internal\util\BitwiseInputStream.java"
"mBuf","false","false","true","false","false","byte","null","[]","Optional[// The byte array being read from.
]","\com\android\internal\util\BitwiseInputStream.java"
"mEnd","false","false","true","false","false","int","null","[]","Optional[// The last valid bit offset.
]","\com\android\internal\util\BitwiseInputStream.java"
"PAD","false","false","false","true","true","byte","(byte) '='","[]","Optional[/**
 * Byte used to pad output.
 */
]","\com\google\android\mms\pdu\Base64.java"
"BASELENGTH","false","false","false","true","true","int","255","[]","Optional[/**
 * The base length.
 */
]","\com\google\android\mms\pdu\Base64.java"
"FOURBYTE","false","false","false","true","true","int","4","[]","Optional[/**
 * Used to get the number of Quadruples.
 */
]","\com\google\android\mms\pdu\Base64.java"
"base64Alphabet","false","false","true","true","false","byte","new byte[BASELENGTH]","[]","Optional[// Create arrays to hold the base64 characters
]","\com\google\android\mms\pdu\Base64.java"
"mBigScrew","false","false","true","false","false","int","null","[]","Optional[/**
 * Random salt
 */
]","\android\net\http\CertificateValidatorCache.java"
"CACHE_ENTRY_LIFETIME","false","false","true","true","true","long","10 * 60 * 1000","[]","Optional[/**
 * The cache-entry lifetime in milliseconds (here, 10 minutes)
 */
]","\android\net\http\CertificateValidatorCache.java"
"mTime","false","false","true","false","false","long","null","[]","Optional[/**
 * The time associated with this cache entry
 */
]","\android\net\http\CertificateValidatorCache.java"
"mCacheMap","false","false","true","false","false","HashMap<Integer,CacheEntry>","null","[]","Optional[/**
 * The certificate validator cache map (domain to a cache entry)
 */
]","\android\net\http\CertificateValidatorCache.java"
"sCertificateFactory","false","false","true","true","false","CertificateFactory","null","[]","Optional[/**
 * The certificate factory
 */
]","\android\net\http\CertificateValidatorCache.java"
"mHash","false","false","true","false","false","byte","null","[]","Optional[/**
 * The hash associated with this cache entry
 */
]","\android\net\http\CertificateValidatorCache.java"
"mSave","true","false","false","false","false","long","null","[]","Optional[// TODO: debug only!
]","\android\net\http\CertificateValidatorCache.java"
"mDomain","false","false","true","false","false","String","null","[]","Optional[/**
 * The host associated with this cache entry
 */
]","\android\net\http\CertificateValidatorCache.java"
"mCost","true","false","false","true","false","long","0","[]","Optional.empty","\android\net\http\CertificateValidatorCache.java"
"mReader","false","false","true","false","false","XMLReader","null","[]","Optional.empty","\android\text\Html.java"
"mSpannableStringBuilder","false","false","true","false","false","SpannableStringBuilder","null","[]","Optional.empty","\android\text\Html.java"
"schema","false","false","true","true","true","HTMLSchema","new HTMLSchema()","[]","Optional.empty","\android\text\Html.java"
"mFace","true","false","false","false","false","String","null","[]","Optional.empty","\android\text\Html.java"
"HEADER_SIZES","false","false","true","true","true","float","{ 1.5f, 1.4f, 1.3f, 1.2f, 1.1f, 1f }","[]","Optional.empty","\android\text\Html.java"
"mColor","true","false","false","false","false","String","null","[]","Optional.empty","\android\text\Html.java"
"mSource","false","false","true","false","false","String","null","[]","Optional.empty","\android\text\Html.java"
"mTagHandler","false","false","true","false","false","Html.TagHandler","null","[]","Optional.empty","\android\text\Html.java"
"mHref","true","false","false","false","false","String","null","[]","Optional.empty","\android\text\Html.java"
"mLevel","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\Html.java"
"COLORS","false","false","true","true","false","HashMap<String,Integer>","buildColorMap()","[]","Optional.empty","\android\text\Html.java"
"mImageGetter","false","false","true","false","false","Html.ImageGetter","null","[]","Optional.empty","\android\text\Html.java"
"MONTH","false","false","true","true","true","String","""month""","[]","Optional.empty","\android\app\DatePickerDialog.java"
"mDatePicker","false","false","true","false","true","DatePicker","null","[]","Optional.empty","\android\app\DatePickerDialog.java"
"YEAR","false","false","true","true","true","String","""year""","[]","Optional.empty","\android\app\DatePickerDialog.java"
"mInitialDay","false","false","true","false","false","int","null","[]","Optional.empty","\android\app\DatePickerDialog.java"
"mWeekDays","false","false","true","false","true","String","null","[]","Optional.empty","\android\app\DatePickerDialog.java"
"mTitleDateFormat","false","false","true","false","true","java.text.DateFormat","null","[]","Optional.empty","\android\app\DatePickerDialog.java"
"mInitialMonth","false","false","true","false","false","int","null","[]","Optional.empty","\android\app\DatePickerDialog.java"
"mCalendar","false","false","true","false","true","Calendar","null","[]","Optional.empty","\android\app\DatePickerDialog.java"
"mCallBack","false","false","true","false","true","OnDateSetListener","null","[]","Optional.empty","\android\app\DatePickerDialog.java"
"mInitialYear","false","false","true","false","false","int","null","[]","Optional.empty","\android\app\DatePickerDialog.java"
"DAY","false","false","true","true","true","String","""day""","[]","Optional.empty","\android\app\DatePickerDialog.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<InputBindResult>","new Parcelable.Creator<InputBindResult>() {

    public InputBindResult createFromParcel(Parcel source) {
        return new InputBindResult(source);
    }

    public InputBindResult[] newArray(int size) {
        return new InputBindResult[size];
    }
}","[]","Optional[/**
 * Used to make this class parcelable.
 */
]","\com\android\internal\view\InputBindResult.java"
"id","true","false","false","false","true","String","null","[]","Optional[/**
 * The ID for this input method, as found in InputMethodInfo; null if
 * no input method will be bound.
 */
]","\com\android\internal\view\InputBindResult.java"
"method","true","false","false","false","true","IInputMethodSession","null","[]","Optional[/**
 * The input method service.
 */
]","\com\android\internal\view\InputBindResult.java"
"TAG","false","false","false","true","true","String","""InputBindResult""","[]","Optional.empty","\com\android\internal\view\InputBindResult.java"
"sequence","true","false","false","false","true","int","null","[]","Optional[/**
 * Sequence number of this binding.
 */
]","\com\android\internal\view\InputBindResult.java"
"FILE_BASE","false","false","false","true","true","String","""file://""","[]","Optional.empty","\android\webkit\URLUtil.java"
"CONTENT_DISPOSITION_PATTERN","false","false","true","true","true","Pattern","Pattern.compile(""attachment;\\s*filename\\s*=\\s*(\""?)([^\""]*)\\1\\s*$"", Pattern.CASE_INSENSITIVE)","[]","Optional[/**
 * Regex used to parse content-disposition headers
 */
]","\android\webkit\URLUtil.java"
"ASSET_BASE","false","false","false","true","true","String","""file:///android_asset/""","[]","Optional[// ""file:///android_asset/foo/bar.png"".
]","\android\webkit\URLUtil.java"
"PROXY_BASE","false","false","false","true","true","String","""file:///cookieless_proxy/""","[]","Optional.empty","\android\webkit\URLUtil.java"
"RESOURCE_BASE","false","false","false","true","true","String","""file:///android_res/""","[]","Optional[// ""drawable-hdpi"" directory as well.
]","\android\webkit\URLUtil.java"
"LOGTAG","false","false","true","true","true","String","""webkit""","[]","Optional.empty","\android\webkit\URLUtil.java"
"mGoButtonClickListener","false","false","false","false","false","View.OnClickListener","new View.OnClickListener() {

    public void onClick(View v) {
        // guard against possible race conditions
        if (mSearchable == null) {
            return;
        }
        launchQuerySearch();
    }
}","[]","Optional[/**
 * React to a click in the GO button by launching a search.
 */
]","\android\app\SearchDialog.java"
"INSTANCE_KEY_STORED_APPDATA","false","false","true","true","true","String","""sData""","[]","Optional.empty","\android\app\SearchDialog.java"
"mSearchManager","false","false","true","false","false","SearchManager","null","[]","Optional.empty","\android\app\SearchDialog.java"
"mTextWatcher","false","false","true","false","false","TextWatcher","new TextWatcher() {

    public void beforeTextChanged(CharSequence s, int start, int before, int after) {
    }

    public void onTextChanged(CharSequence s, int start, int before, int after) {
        if (DBG_LOG_TIMING) {
            dbgLogTiming(""onTextChanged()"");
        }
        if (mSearchable == null) {
            return;
        }
        if (!mSearchAutoComplete.isPerformingCompletion()) {
            // The user changed the query, remember it.
            mUserQuery = s == null ? """" : s.toString();
        }
        updateWidgetState();
        // Always want to show the microphone if the context is voice.
        // Also show the microphone if this is a browser search and the
        // query matches the initial query.
        updateVoiceButton(mSearchAutoComplete.isEmpty() || (isBrowserSearch() && mInitialQuery.equals(mUserQuery)) || (mAppSearchData != null && mAppSearchData.getBoolean(SearchManager.CONTEXT_IS_VOICE)));
    }

    public void afterTextChanged(Editable s) {
        if (mSearchable == null) {
            return;
        }
        if (mSearchable.autoUrlDetect() && !mSearchAutoComplete.isPerformingCompletion()) {
            // The user changed the query, check if it is a URL and if so change the search
            // button in the soft keyboard to the 'Go' button.
            int options = (mSearchAutoComplete.getImeOptions() & (~EditorInfo.IME_MASK_ACTION)) | EditorInfo.IME_ACTION_GO;
            if (options != mSearchAutoCompleteImeOptions) {
                mSearchAutoCompleteImeOptions = options;
                mSearchAutoComplete.setImeOptions(options);
                // This call is required to update the soft keyboard UI with latest IME flags.
                mSearchAutoComplete.setInputType(mSearchAutoComplete.getInputType());
            }
        }
    }
}","[]","Optional[/**
 * Callback to watch the textedit field for empty/non-empty
 */
]","\android\app\SearchDialog.java"
"mWorkingSpinner","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\app\SearchDialog.java"
"mOutsideDrawablesCache","false","false","true","false","true","WeakHashMap<String,Drawable.ConstantState>","new WeakHashMap<String, Drawable.ConstantState>()","[]","Optional[// more than once.
]","\android\app\SearchDialog.java"
"INSTANCE_KEY_APPDATA","false","false","true","true","true","String","""data""","[]","Optional.empty","\android\app\SearchDialog.java"
"mVoiceWebSearchIntent","false","false","true","false","true","Intent","null","[]","Optional[// For voice searching
]","\android\app\SearchDialog.java"
"mGoButton","false","false","true","false","false","Button","null","[]","Optional.empty","\android\app\SearchDialog.java"
"INSTANCE_KEY_COMPONENT","false","false","true","true","true","String","""comp""","[]","Optional.empty","\android\app\SearchDialog.java"
"mSearchable","false","false","true","false","false","SearchableInfo","null","[]","Optional[// interaction with searchable application
]","\android\app\SearchDialog.java"
"mInitialQuery","false","false","true","false","false","String","null","[]","Optional[// case to determine whether the user has edited the query.
]","\android\app\SearchDialog.java"
"mSearchAutoComplete","false","false","true","false","false","SearchAutoComplete","null","[]","Optional.empty","\android\app\SearchDialog.java"
"mSearchDialog","false","false","true","false","false","SearchDialog","null","[]","Optional.empty","\android\app\SearchDialog.java"
"mSearchPlate","false","false","true","false","false","View","null","[]","Optional.empty","\android\app\SearchDialog.java"
"mVoiceAppSearchIntent","false","false","true","false","true","Intent","null","[]","Optional.empty","\android\app\SearchDialog.java"
"mLastLogTime","false","false","true","false","false","AtomicLong","new AtomicLong(SystemClock.uptimeMillis())","[]","Optional[/**
 * For debugging only, sample the millisecond clock and log it.
 * Uses AtomicLong so we can use in multiple threads
 */
]","\android\app\SearchDialog.java"
"mActivityContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\app\SearchDialog.java"
"SEARCH_PLATE_LEFT_PADDING_GLOBAL","false","false","true","true","true","int","12","[]","Optional.empty","\android\app\SearchDialog.java"
"mBadgeLabel","false","false","true","false","false","TextView","null","[]","Optional[// views & widgets
]","\android\app\SearchDialog.java"
"LOG_TAG","false","false","true","true","true","String","""SearchDialog""","[]","Optional.empty","\android\app\SearchDialog.java"
"mThreshold","false","false","true","false","false","int","null","[]","Optional.empty","\android\app\SearchDialog.java"
"mConfChangeListener","false","false","true","false","false","BroadcastReceiver","new BroadcastReceiver() {

    @Override
    public void onReceive(Context context, Intent intent) {
        if (intent.getAction().equals(Intent.ACTION_CONFIGURATION_CHANGED)) {
            onConfigurationChanged();
        }
    }
}","[]","Optional.empty","\android\app\SearchDialog.java"
"DBG_LOG_TIMING","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\app\SearchDialog.java"
"INSTANCE_KEY_USER_QUERY","false","false","true","true","true","String","""uQry""","[]","Optional.empty","\android\app\SearchDialog.java"
"mTextKeyListener","false","false","false","false","false","View.OnKeyListener","new View.OnKeyListener() {

    public boolean onKey(View v, int keyCode, KeyEvent event) {
        // guard against possible race conditions
        if (mSearchable == null) {
            return false;
        }
        if (DBG_LOG_TIMING)
            dbgLogTiming(""doTextKey()"");
        if (DBG) {
            Log.d(LOG_TAG, ""mTextListener.onKey("" + keyCode + "","" + event + ""), selection: "" + mSearchAutoComplete.getListSelection());
        }
        // as presses on the selected suggestion
        if (mSearchAutoComplete.isPopupShowing() && mSearchAutoComplete.getListSelection() != ListView.INVALID_POSITION) {
            return onSuggestionsKey(v, keyCode, event);
        }
        // The search key is handled by the dialog's onKeyDown().
        if (!mSearchAutoComplete.isEmpty()) {
            if (keyCode == KeyEvent.KEYCODE_ENTER && event.getAction() == KeyEvent.ACTION_UP) {
                v.cancelLongPress();
                // the user clicked, launch the url instead of using it as a search query.
                if (mSearchable.autoUrlDetect() && (mSearchAutoCompleteImeOptions & EditorInfo.IME_MASK_ACTION) == EditorInfo.IME_ACTION_GO) {
                    Uri uri = Uri.parse(fixUrl(mSearchAutoComplete.getText().toString()));
                    Intent intent = new Intent(Intent.ACTION_VIEW, uri);
                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                    launchIntent(intent);
                } else {
                    // Launch as a regular search.
                    launchQuerySearch();
                }
                return true;
            }
            if (event.getAction() == KeyEvent.ACTION_DOWN) {
                SearchableInfo.ActionKeyInfo actionKey = mSearchable.findActionKey(keyCode);
                if ((actionKey != null) && (actionKey.getQueryActionMsg() != null)) {
                    launchQuerySearch(keyCode, actionKey.getQueryActionMsg());
                    return true;
                }
            }
        }
        return false;
    }
}","[]","Optional[/**
 * React to the user typing ""enter"" or other hardwired keys while typing in the search box.
 * This handles these special keys while the edit box has focus.
 */
]","\android\app\SearchDialog.java"
"DBG","false","false","true","true","true","boolean","false","[]","Optional[// Debugging support
]","\android\app\SearchDialog.java"
"mSuggestionsAdapter","false","false","true","false","false","SuggestionsAdapter","null","[]","Optional[// support for AutoCompleteTextView suggestions display
]","\android\app\SearchDialog.java"
"mSearchAutoCompleteImeOptions","false","false","true","false","false","int","null","[]","Optional[// Last known IME options value for the search edit text.
]","\android\app\SearchDialog.java"
"mLaunchComponent","false","false","true","false","false","ComponentName","null","[]","Optional.empty","\android\app\SearchDialog.java"
"mButtonsKeyListener","false","false","false","false","false","View.OnKeyListener","new View.OnKeyListener() {

    public boolean onKey(View v, int keyCode, KeyEvent event) {
        // guard against possible race conditions
        if (mSearchable == null) {
            return false;
        }
        if (!event.isSystem() && (keyCode != KeyEvent.KEYCODE_DPAD_UP) && (keyCode != KeyEvent.KEYCODE_DPAD_LEFT) && (keyCode != KeyEvent.KEYCODE_DPAD_RIGHT) && (keyCode != KeyEvent.KEYCODE_DPAD_CENTER)) {
            // restore focus and give key to EditText ...
            if (mSearchAutoComplete.requestFocus()) {
                return mSearchAutoComplete.dispatchKeyEvent(event);
            }
        }
        return false;
    }
}","[]","Optional[/**
 * React to typing in the GO search button by refocusing to EditText.
 * Continue typing the query.
 */
]","\android\app\SearchDialog.java"
"mVoiceButton","false","false","true","false","false","ImageButton","null","[]","Optional.empty","\android\app\SearchDialog.java"
"mAppIcon","false","false","true","false","false","ImageView","null","[]","Optional.empty","\android\app\SearchDialog.java"
"REWRITE_QUERIES","false","false","true","true","true","boolean","true","[]","Optional[// Whether to rewrite queries when selecting suggestions
]","\android\app\SearchDialog.java"
"SEARCH_PLATE_LEFT_PADDING_NON_GLOBAL","false","false","true","true","true","int","7","[]","Optional.empty","\android\app\SearchDialog.java"
"mVoiceButtonClickListener","false","false","false","false","false","View.OnClickListener","new View.OnClickListener() {

    public void onClick(View v) {
        // guard against possible race conditions
        if (mSearchable == null) {
            return;
        }
        SearchableInfo searchable = mSearchable;
        try {
            if (searchable.getVoiceSearchLaunchWebSearch()) {
                Intent webSearchIntent = createVoiceWebSearchIntent(mVoiceWebSearchIntent, searchable);
                getContext().startActivity(webSearchIntent);
            } else if (searchable.getVoiceSearchLaunchRecognizer()) {
                Intent appSearchIntent = createVoiceAppSearchIntent(mVoiceAppSearchIntent, searchable);
                getContext().startActivity(appSearchIntent);
            }
        } catch (ActivityNotFoundException e) {
            // Should not happen, since we check the availability of
            // voice search before showing the button. But just in case...
            Log.w(LOG_TAG, ""Could not find voice search activity"");
        }
        dismiss();
    }
}","[]","Optional[/**
 * React to a click in the voice search button.
 */
]","\android\app\SearchDialog.java"
"IME_OPTION_NO_MICROPHONE","false","false","true","true","true","String","""nm""","[]","Optional[// a microphone button since one already exists in the search dialog.
]","\android\app\SearchDialog.java"
"mAppSearchData","false","false","true","false","false","Bundle","null","[]","Optional.empty","\android\app\SearchDialog.java"
"mUserQuery","false","false","true","false","false","String","null","[]","Optional[// the suggestion, the resulting string is saved.
]","\android\app\SearchDialog.java"
"mBindArgs","false","false","true","false","false","String","null","[]","Optional[/**
 * Args to bind on requery
 */
]","\android\database\sqlite\SQLiteQuery.java"
"mClosed","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\database\sqlite\SQLiteQuery.java"
"TAG","false","false","true","true","true","String","""Cursor""","[]","Optional.empty","\android\database\sqlite\SQLiteQuery.java"
"mOffsetIndex","false","false","true","false","false","int","null","[]","Optional[/**
 * The index of the unbound OFFSET parameter
 */
]","\android\database\sqlite\SQLiteQuery.java"
"mZoomOut","false","false","true","false","true","ZoomButton","null","[]","Optional.empty","\android\widget\ZoomControls.java"
"mZoomIn","false","false","true","false","true","ZoomButton","null","[]","Optional.empty","\android\widget\ZoomControls.java"
"ERROR_PARSE_ERROR","false","false","true","true","true","String","""Failed to parse DN""","[]","Optional[/**
 * Exception message thrown when we failed to parse DN, which shouldn't happen because we
 * only handle DNs that {@link X500Principal#getName} returns, which shouldn't be malformed.
 */
]","\com\android\internal\net\DNParser.java"
"cur","false","false","true","false","false","int","null","[]","Optional[// tmp vars to store positions of the currently parsed item
]","\com\android\internal\net\DNParser.java"
"pos","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\net\DNParser.java"
"chars","false","false","true","false","false","char","null","[]","Optional[// distinguished name chars
]","\com\android\internal\net\DNParser.java"
"dn","false","false","true","false","true","String","null","[]","Optional[/**
 * DN to be parsed.
 */
]","\com\android\internal\net\DNParser.java"
"length","false","false","true","false","true","int","null","[]","Optional[// length of distinguished name string
]","\com\android\internal\net\DNParser.java"
"TAG","false","false","true","true","true","String","""DNParser""","[]","Optional.empty","\com\android\internal\net\DNParser.java"
"mUnfilteredData","false","false","true","false","false","ArrayList<Map<String,?>>","null","[]","Optional.empty","\android\widget\SimpleAdapter.java"
"mFilter","false","false","true","false","false","SimpleFilter","null","[]","Optional.empty","\android\widget\SimpleAdapter.java"
"mResource","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\SimpleAdapter.java"
"mDropDownResource","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\SimpleAdapter.java"
"mViewBinder","false","false","true","false","false","ViewBinder","null","[]","Optional.empty","\android\widget\SimpleAdapter.java"
"mFrom","false","false","true","false","false","String","null","[]","Optional.empty","\android\widget\SimpleAdapter.java"
"mData","false","false","true","false","false","List<? extends Map<String,?>>","null","[]","Optional.empty","\android\widget\SimpleAdapter.java"
"mInflater","false","false","true","false","false","LayoutInflater","null","[]","Optional.empty","\android\widget\SimpleAdapter.java"
"mTo","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\SimpleAdapter.java"
"mSlop","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\TouchDelegate.java"
"TO_RIGHT","true","false","false","true","true","int","8","[]","Optional[/**
 * The touchable region of the View extends to the right of its
 * actual extent.
 */
]","\android\view\TouchDelegate.java"
"ABOVE","true","false","false","true","true","int","1","[]","Optional[/**
 * The touchable region of the View extends above its actual extent.
 */
]","\android\view\TouchDelegate.java"
"TO_LEFT","true","false","false","true","true","int","4","[]","Optional[/**
 * The touchable region of the View extends to the left of its
 * actual extent.
 */
]","\android\view\TouchDelegate.java"
"mDelegateView","false","false","true","false","false","View","null","[]","Optional[/**
 * View that should receive forwarded touch events
 */
]","\android\view\TouchDelegate.java"
"mBounds","false","false","true","false","false","Rect","null","[]","Optional[/**
 * Bounds in local coordinates of the containing view that should be mapped to the delegate
 * view. This rect is used for initial hit testing.
 */
]","\android\view\TouchDelegate.java"
"mSlopBounds","false","false","true","false","false","Rect","null","[]","Optional[/**
 * mBounds inflated to include some slop. This rect is to track whether the motion events
 * should be considered to be be within the delegate view.
 */
]","\android\view\TouchDelegate.java"
"BELOW","true","false","false","true","true","int","2","[]","Optional[/**
 * The touchable region of the View extends below its actual extent.
 */
]","\android\view\TouchDelegate.java"
"mDelegateTargeted","false","false","true","false","false","boolean","null","[]","Optional[/**
 * True if the delegate had been targeted on a down event (intersected mBounds).
 */
]","\android\view\TouchDelegate.java"
"DEFAULT_TRACE_BODY","false","false","true","true","true","String","""dmtrace""","[]","Optional.empty","\android\os\Debug.java"
"TRACE_COUNT_ALLOCS","true","false","false","true","true","int","VMDebug.TRACE_COUNT_ALLOCS","[]","Optional[/**
 * Flags for startMethodTracing().  These can be ORed together.
 *
 * TRACE_COUNT_ALLOCS adds the results from startAllocCounting to the
 * trace key file.
 */
]","\android\os\Debug.java"
"CREATOR","true","false","false","true","true","Creator<MemoryInfo>","new Creator<MemoryInfo>() {

    public MemoryInfo createFromParcel(Parcel source) {
        return new MemoryInfo(source);
    }

    public MemoryInfo[] newArray(int size) {
        return new MemoryInfo[size];
    }
}","[]","Optional.empty","\android\os\Debug.java"
"SYSFS_QEMU_TRACE_STATE","false","false","true","true","true","String","""/sys/qemu_trace/state""","[]","Optional[/**
 * This is the pathname to the sysfs file that enables and disables
 * tracing on the qemu emulator.
 */
]","\android\os\Debug.java"
"DEFAULT_TRACE_EXTENSION","false","false","true","true","true","String",""".trace""","[]","Optional.empty","\android\os\Debug.java"
"dalvikPss","true","false","false","false","false","int","null","[]","Optional[/**
 * The proportional set size for dalvik.
 */
]","\android\os\Debug.java"
"dalvikPrivateDirty","true","false","false","false","false","int","null","[]","Optional[/**
 * The private dirty pages used by dalvik.
 */
]","\android\os\Debug.java"
"nativeSharedDirty","true","false","false","false","false","int","null","[]","Optional[/**
 * The shared dirty pages used by the native heap.
 */
]","\android\os\Debug.java"
"dalvikSharedDirty","true","false","false","false","false","int","null","[]","Optional[/**
 * The shared dirty pages used by dalvik.
 */
]","\android\os\Debug.java"
"otherPrivateDirty","true","false","false","false","false","int","null","[]","Optional[/**
 * The private dirty pages used by everything else.
 */
]","\android\os\Debug.java"
"NUM_INSTR","false","false","true","true","true","int","256","[]","Optional.empty","\android\os\Debug.java"
"DEFAULT_TRACE_FILE_PATH","false","false","true","true","true","String","DEFAULT_TRACE_PATH_PREFIX + DEFAULT_TRACE_BODY + DEFAULT_TRACE_EXTENSION","[]","Optional.empty","\android\os\Debug.java"
"SHOW_INITIALIZED","true","false","false","true","true","int","(1 << 2)","[]","Optional.empty","\android\os\Debug.java"
"mCounts","false","false","true","false","false","int","null","[]","Optional.empty","\android\os\Debug.java"
"nativePss","true","false","false","false","false","int","null","[]","Optional[/**
 * The proportional set size for the native heap.
 */
]","\android\os\Debug.java"
"otherSharedDirty","true","false","false","false","false","int","null","[]","Optional[/**
 * The shared dirty pages used by everything else.
 */
]","\android\os\Debug.java"
"MIN_DEBUGGER_IDLE","false","false","true","true","true","int","1300","[]","Optional[// msec
]","\android\os\Debug.java"
"TAG","false","false","true","true","true","String","""Debug""","[]","Optional.empty","\android\os\Debug.java"
"mWaiting","false","false","true","true","false","boolean","false","[]","Optional[// set/cleared by waitForDebugger()
]","\android\os\Debug.java"
"otherPss","true","false","false","false","false","int","null","[]","Optional[/**
 * The proportional set size for everything else.
 */
]","\android\os\Debug.java"
"SHOW_CLASSLOADER","true","false","false","true","true","int","(1 << 1)","[]","Optional.empty","\android\os\Debug.java"
"DEFAULT_TRACE_PATH_PREFIX","false","false","true","true","true","String","""/sdcard/""","[]","Optional[/**
 * Default trace file path and file
 */
]","\android\os\Debug.java"
"SPIN_DELAY","false","false","true","true","true","int","200","[]","Optional[// msec
]","\android\os\Debug.java"
"nativePrivateDirty","true","false","false","false","false","int","null","[]","Optional[/**
 * The private dirty pages used by the native heap.
 */
]","\android\os\Debug.java"
"debugProperties","false","false","true","true","true","TypedProperties","null","[]","Optional[/**
 * A Map of typed debug properties.
 */
]","\android\os\Debug.java"
"SHOW_FULL_DETAIL","true","false","false","true","true","int","1","[]","Optional[/**
 * Flags for printLoadedClasses().  Default behavior is to only show
 * the class name.
 */
]","\android\os\Debug.java"
"descriptor","false","false","false","true","true","String","""android.content.IBulkCursor""","[]","Optional[/* IPC constants */
]","\android\database\IBulkCursor.java"
"DEACTIVATE_TRANSACTION","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 5","[]","Optional.empty","\android\database\IBulkCursor.java"
"UPDATE_ROWS_TRANSACTION","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 3","[]","Optional.empty","\android\database\IBulkCursor.java"
"WANTS_ON_MOVE_TRANSACTION","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 8","[]","Optional.empty","\android\database\IBulkCursor.java"
"DELETE_ROW_TRANSACTION","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 4","[]","Optional.empty","\android\database\IBulkCursor.java"
"GET_COLUMN_NAMES_TRANSACTION","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 2","[]","Optional.empty","\android\database\IBulkCursor.java"
"GET_EXTRAS_TRANSACTION","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 9","[]","Optional.empty","\android\database\IBulkCursor.java"
"COUNT_TRANSACTION","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 1","[]","Optional.empty","\android\database\IBulkCursor.java"
"ON_MOVE_TRANSACTION","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 7","[]","Optional.empty","\android\database\IBulkCursor.java"
"CLOSE_TRANSACTION","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 11","[]","Optional.empty","\android\database\IBulkCursor.java"
"RESPOND_TRANSACTION","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 10","[]","Optional.empty","\android\database\IBulkCursor.java"
"REQUERY_TRANSACTION","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION + 6","[]","Optional.empty","\android\database\IBulkCursor.java"
"GET_CURSOR_WINDOW_TRANSACTION","false","false","false","true","true","int","IBinder.FIRST_CALL_TRANSACTION","[]","Optional.empty","\android\database\IBulkCursor.java"
"mDataValid","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\CursorTreeAdapter.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\widget\CursorTreeAdapter.java"
"mContentObserver","false","false","true","false","false","MyContentObserver","null","[]","Optional.empty","\android\widget\CursorTreeAdapter.java"
"mCursorFilter","false","false","false","false","false","CursorFilter","null","[]","Optional[// Filter related
]","\android\widget\CursorTreeAdapter.java"
"mFilterQueryProvider","false","false","false","false","false","FilterQueryProvider","null","[]","Optional.empty","\android\widget\CursorTreeAdapter.java"
"mGroupCursorHelper","false","false","false","false","false","MyCursorHelper","null","[]","Optional[/**
 * The cursor helper that is used to get the groups
 */
]","\android\widget\CursorTreeAdapter.java"
"mCursor","false","false","true","false","false","Cursor","null","[]","Optional.empty","\android\widget\CursorTreeAdapter.java"
"mAutoRequery","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\CursorTreeAdapter.java"
"mHandler","false","false","true","false","false","Handler","null","[]","Optional.empty","\android\widget\CursorTreeAdapter.java"
"mRowIDColumn","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\CursorTreeAdapter.java"
"mChildrenCursorHelpers","false","false","false","false","false","SparseArray<MyCursorHelper>","null","[]","Optional[/**
 * The map of a group position to the group's children cursor helper (the
 * cursor helper that is used to get the children for that group)
 */
]","\android\widget\CursorTreeAdapter.java"
"mDataSetObserver","false","false","true","false","false","MyDataSetObserver","null","[]","Optional.empty","\android\widget\CursorTreeAdapter.java"
"CREATE_DEVICE_ALREADY_EXISTS","false","false","true","true","true","int","1","[]","Optional.empty","\android\server\BluetoothEventLoop.java"
"EVENT_AGENT_CANCEL","false","false","true","true","true","int","3","[]","Optional.empty","\android\server\BluetoothEventLoop.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\android\server\BluetoothEventLoop.java"
"mStarted","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\server\BluetoothEventLoop.java"
"BLUETOOTH_ADMIN_PERM","false","false","true","true","true","String","android.Manifest.permission.BLUETOOTH_ADMIN","[]","Optional.empty","\android\server\BluetoothEventLoop.java"
"mInterrupted","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\server\BluetoothEventLoop.java"
"mBluetoothService","false","false","true","false","true","BluetoothService","null","[]","Optional.empty","\android\server\BluetoothEventLoop.java"
"CREATE_DEVICE_FAILED","false","false","true","true","true","int","-1","[]","Optional.empty","\android\server\BluetoothEventLoop.java"
"BLUETOOTH_PERM","false","false","true","true","true","String","android.Manifest.permission.BLUETOOTH","[]","Optional.empty","\android\server\BluetoothEventLoop.java"
"mHandler","false","false","true","false","true","Handler","new Handler() {

    @Override
    public void handleMessage(Message msg) {
        String address = null;
        switch(msg.what) {
            case EVENT_RESTART_BLUETOOTH:
                mBluetoothService.restart();
                break;
            case EVENT_PAIRING_CONSENT_DELAYED_ACCEPT:
                address = (String) msg.obj;
                if (address != null) {
                    mBluetoothService.setPairingConfirmation(address, true);
                }
                break;
            case EVENT_AGENT_CANCEL:
                // Set the Bond State to BOND_NONE.
                // We always have only 1 device in BONDING state.
                String[] devices = mBluetoothService.listInState(BluetoothDevice.BOND_BONDING);
                if (devices.length == 0) {
                    break;
                } else if (devices.length > 1) {
                    Log.e(TAG, "" There is more than one device in the Bonding State"");
                    break;
                }
                address = devices[0];
                mBluetoothService.setBondState(address, BluetoothDevice.BOND_NONE, BluetoothDevice.UNBOND_REASON_REMOTE_AUTH_CANCELED);
                break;
        }
    }
}","[]","Optional.empty","\android\server\BluetoothEventLoop.java"
"TAG","false","false","true","true","true","String","""BluetoothEventLoop""","[]","Optional.empty","\android\server\BluetoothEventLoop.java"
"DBG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\server\BluetoothEventLoop.java"
"mThread","false","false","true","false","false","Thread","null","[]","Optional.empty","\android\server\BluetoothEventLoop.java"
"mNativeData","false","false","true","false","false","int","null","[]","Optional.empty","\android\server\BluetoothEventLoop.java"
"mAdapter","false","false","true","false","true","BluetoothAdapter","null","[]","Optional.empty","\android\server\BluetoothEventLoop.java"
"EVENT_PAIRING_CONSENT_DELAYED_ACCEPT","false","false","true","true","true","int","2","[]","Optional.empty","\android\server\BluetoothEventLoop.java"
"CREATE_DEVICE_SUCCESS","false","false","true","true","true","int","0","[]","Optional.empty","\android\server\BluetoothEventLoop.java"
"EVENT_RESTART_BLUETOOTH","false","false","true","true","true","int","1","[]","Optional.empty","\android\server\BluetoothEventLoop.java"
"mPasskeyAgentRequestData","false","false","true","false","true","HashMap<String,Integer>","null","[]","Optional.empty","\android\server\BluetoothEventLoop.java"
"DIRS_ALL_LEFT_TO_RIGHT","false","false","false","true","true","Directions","new Directions(new short[] { 32767 })","[]","Optional[/* package */
]","\android\text\Layout.java"
"DIR_RIGHT_TO_LEFT","true","false","false","true","true","int","-1","[]","Optional.empty","\android\text\Layout.java"
"MIN_EMOJI","false","false","false","true","true","int","null","[]","Optional[/* package */
]","\android\text\Layout.java"
"NO_PARA_SPANS","false","false","true","true","true","ParagraphStyle","ArrayUtils.emptyArray(ParagraphStyle.class)","[]","Optional.empty","\android\text\Layout.java"
"mSpacingAdd","false","false","true","false","false","float","null","[]","Optional.empty","\android\text\Layout.java"
"mEmojiRect","false","false","true","false","false","RectF","null","[]","Optional.empty","\android\text\Layout.java"
"EMOJI_FACTORY","false","false","false","true","true","EmojiFactory","EmojiFactory.newAvailableInstance()","[]","Optional[/* package */
]","\android\text\Layout.java"
"TAB_INCREMENT","false","false","true","true","true","int","20","[]","Optional.empty","\android\text\Layout.java"
"mMethod","false","false","false","false","false","TextUtils.TruncateAt","null","[]","Optional[/* package */
]","\android\text\Layout.java"
"sTempRect","false","false","true","true","false","Rect","new Rect()","[]","Optional.empty","\android\text\Layout.java"
"mLayout","false","false","false","false","false","Layout","null","[]","Optional[/* package */
]","\android\text\Layout.java"
"mDirections","false","false","true","false","false","short","null","[]","Optional.empty","\android\text\Layout.java"
"DIR_LEFT_TO_RIGHT","true","false","false","true","true","int","1","[]","Optional.empty","\android\text\Layout.java"
"mSpanned","false","false","true","false","false","Spanned","null","[]","Optional.empty","\android\text\Layout.java"
"mText","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\text\Layout.java"
"mWorkPaint","false","false","false","false","false","TextPaint","null","[]","Optional[/* package */
]","\android\text\Layout.java"
"DIR_REQUEST_DEFAULT_RTL","false","false","false","true","true","int","-2","[]","Optional[/* package */
]","\android\text\Layout.java"
"mPaint","false","false","true","false","false","TextPaint","null","[]","Optional.empty","\android\text\Layout.java"
"DIR_REQUEST_LTR","false","false","false","true","true","int","1","[]","Optional[/* package */
]","\android\text\Layout.java"
"mSpacingMult","false","false","true","false","false","float","null","[]","Optional.empty","\android\text\Layout.java"
"mWidth","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\Layout.java"
"mSpannedText","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\text\Layout.java"
"DIR_REQUEST_DEFAULT_LTR","false","false","false","true","true","int","2","[]","Optional[/* package */
]","\android\text\Layout.java"
"mAlignment","false","false","true","false","false","Alignment","Alignment.ALIGN_NORMAL","[]","Optional.empty","\android\text\Layout.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\text\Layout.java"
"DIR_REQUEST_RTL","false","false","false","true","true","int","-1","[]","Optional[/* package */
]","\android\text\Layout.java"
"DIRS_ALL_RIGHT_TO_LEFT","false","false","false","true","true","Directions","new Directions(new short[] { 0, 32767 })","[]","Optional[/* package */
]","\android\text\Layout.java"
"BULLET_RADIUS","false","false","true","true","true","int","3","[]","Optional.empty","\android\text\style\BulletSpan.java"
"mWantColor","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\text\style\BulletSpan.java"
"STANDARD_GAP_WIDTH","true","false","false","true","true","int","2","[]","Optional.empty","\android\text\style\BulletSpan.java"
"mColor","false","false","true","false","true","int","null","[]","Optional.empty","\android\text\style\BulletSpan.java"
"mGapWidth","false","false","true","false","true","int","null","[]","Optional.empty","\android\text\style\BulletSpan.java"
"mAlwaysDrawVerticalTrack","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\ScrollBarDrawable.java"
"mVerticalTrack","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\ScrollBarDrawable.java"
"mRangeChanged","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\ScrollBarDrawable.java"
"mRange","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ScrollBarDrawable.java"
"mAlwaysDrawHorizontalTrack","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\ScrollBarDrawable.java"
"mVerticalThumb","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\ScrollBarDrawable.java"
"mTempBounds","false","false","true","false","true","Rect","new Rect()","[]","Optional.empty","\android\widget\ScrollBarDrawable.java"
"mHorizontalThumb","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\ScrollBarDrawable.java"
"mExtent","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ScrollBarDrawable.java"
"mHorizontalTrack","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\ScrollBarDrawable.java"
"mChanged","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\ScrollBarDrawable.java"
"mVertical","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\ScrollBarDrawable.java"
"mOffset","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ScrollBarDrawable.java"
"mClassLoader","false","false","true","false","false","ClassLoader","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mCurCode","false","false","true","false","false","int","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mApplication","false","false","true","false","false","Application","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mFlags","false","false","true","false","true","int","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mReceivers","false","false","true","false","true","HashMap<Context,HashMap<BroadcastReceiver,LoadedApk.ReceiverDispatcher>>","new HashMap<Context, HashMap<BroadcastReceiver, LoadedApk.ReceiverDispatcher>>()","[]","Optional.empty","\android\app\LoadedApk.java"
"mAppDir","false","false","true","false","true","String","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mActiveConnections","false","false","true","false","true","HashMap<ComponentName,ServiceDispatcher.ConnectionInfo>","new HashMap<ComponentName, ServiceDispatcher.ConnectionInfo>()","[]","Optional.empty","\android\app\LoadedApk.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mSecurityViolation","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mIncludeCode","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mRegistered","false","false","false","false","true","boolean","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mUnboundServices","false","false","true","false","true","HashMap<Context,HashMap<ServiceConnection,LoadedApk.ServiceDispatcher>>","new HashMap<Context, HashMap<ServiceConnection, LoadedApk.ServiceDispatcher>>()","[]","Optional.empty","\android\app\LoadedApk.java"
"mUnregisteredReceivers","false","false","true","false","true","HashMap<Context,HashMap<BroadcastReceiver,LoadedApk.ReceiverDispatcher>>","new HashMap<Context, HashMap<BroadcastReceiver, LoadedApk.ReceiverDispatcher>>()","[]","Optional.empty","\android\app\LoadedApk.java"
"binder","false","false","false","false","false","IBinder","null","[]","Optional.empty","\android\app\LoadedApk.java"
"deathMonitor","false","false","false","false","false","IBinder.DeathRecipient","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mApplicationInfo","false","false","true","false","true","ApplicationInfo","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mCommand","false","false","false","false","true","int","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mDataDirFile","false","false","true","false","true","File","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mResources","false","false","false","false","false","Resources","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mName","false","false","false","false","true","ComponentName","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mCurMap","false","false","true","false","false","Bundle","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mServices","false","false","true","false","true","HashMap<Context,HashMap<ServiceConnection,LoadedApk.ServiceDispatcher>>","new HashMap<Context, HashMap<ServiceConnection, LoadedApk.ServiceDispatcher>>()","[]","Optional.empty","\android\app\LoadedApk.java"
"mConnection","false","false","true","false","true","ServiceConnection","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mActivityThread","false","false","true","false","true","Handler","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mLocation","false","false","true","false","true","ServiceConnectionLeaked","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mBaseClassLoader","false","false","true","false","true","ClassLoader","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mDispatcher","false","false","false","false","true","WeakReference<LoadedApk.ServiceDispatcher>","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mResDir","false","false","true","false","true","String","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mStrongRef","false","false","false","false","true","LoadedApk.ReceiverDispatcher","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mCurOrdered","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\app\LoadedApk.java"
"warned","false","false","true","true","false","boolean","false","[]","Optional.empty","\android\app\LoadedApk.java"
"mLibDir","false","false","true","false","true","String","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mDataDir","false","false","true","false","true","String","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mInstrumentation","false","false","false","false","true","Instrumentation","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mUnbindLocation","false","false","true","false","false","RuntimeException","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mSharedLibraries","false","false","true","false","true","String","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mIIntentReceiver","false","false","false","false","true","IIntentReceiver.Stub","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mClientCount","false","false","false","false","false","int","0","[]","Optional.empty","\android\app\LoadedApk.java"
"mPackageName","false","false","false","false","true","String","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mCurIntent","false","false","true","false","false","Intent","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mCurSticky","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mIServiceConnection","false","false","true","false","true","ServiceDispatcher.InnerConnection","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mReceiver","false","false","false","false","true","BroadcastReceiver","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mCompatibilityInfo","false","false","false","false","false","CompatibilityInfo","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mDied","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mService","false","false","false","false","true","IBinder","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mUnregisterLocation","false","false","false","false","false","RuntimeException","null","[]","Optional.empty","\android\app\LoadedApk.java"
"mCurData","false","false","true","false","false","String","null","[]","Optional.empty","\android\app\LoadedApk.java"
"ERROR_PROXY_AUTHENTICATION","true","false","false","true","true","int","-5","[]","Optional[/**
 * User authentication failed on proxy
 */
]","\android\webkit\WebViewClient.java"
"ERROR_BAD_URL","true","false","false","true","true","int","-12","[]","Optional[/**
 * Malformed URL
 */
]","\android\webkit\WebViewClient.java"
"ERROR_AUTHENTICATION","true","false","false","true","true","int","-4","[]","Optional[/**
 * User authentication failed on server
 */
]","\android\webkit\WebViewClient.java"
"ERROR_TOO_MANY_REQUESTS","true","false","false","true","true","int","-15","[]","Optional[/**
 * Too many requests during this load
 */
]","\android\webkit\WebViewClient.java"
"ERROR_UNKNOWN","true","false","false","true","true","int","-1","[]","Optional[/**
 * Generic error
 */
]","\android\webkit\WebViewClient.java"
"ERROR_TIMEOUT","true","false","false","true","true","int","-8","[]","Optional[/**
 * Connection timed out
 */
]","\android\webkit\WebViewClient.java"
"ERROR_IO","true","false","false","true","true","int","-7","[]","Optional[/**
 * Failed to read or write to the server
 */
]","\android\webkit\WebViewClient.java"
"ERROR_FILE_NOT_FOUND","true","false","false","true","true","int","-14","[]","Optional[/**
 * File not found
 */
]","\android\webkit\WebViewClient.java"
"ERROR_UNSUPPORTED_AUTH_SCHEME","true","false","false","true","true","int","-3","[]","Optional[/**
 * Unsupported authentication scheme (not basic or digest)
 */
]","\android\webkit\WebViewClient.java"
"ERROR_FILE","true","false","false","true","true","int","-13","[]","Optional[/**
 * Generic file error
 */
]","\android\webkit\WebViewClient.java"
"ERROR_CONNECT","true","false","false","true","true","int","-6","[]","Optional[/**
 * Failed to connect to the server
 */
]","\android\webkit\WebViewClient.java"
"ERROR_UNSUPPORTED_SCHEME","true","false","false","true","true","int","-10","[]","Optional[/**
 * Unsupported URI scheme
 */
]","\android\webkit\WebViewClient.java"
"ERROR_FAILED_SSL_HANDSHAKE","true","false","false","true","true","int","-11","[]","Optional[/**
 * Failed to perform SSL handshake
 */
]","\android\webkit\WebViewClient.java"
"ERROR_HOST_LOOKUP","true","false","false","true","true","int","-2","[]","Optional[/**
 * Server or proxy hostname lookup failed
 */
]","\android\webkit\WebViewClient.java"
"ERROR_REDIRECT_LOOP","true","false","false","true","true","int","-9","[]","Optional[/**
 * Too many redirects
 */
]","\android\webkit\WebViewClient.java"
"DEFAULT_STREAM","true","false","false","true","true","int","AudioManager.STREAM_MUSIC","[]","Optional[/**
 * Default audio stream used when playing synthesized speech.
 */
]","\android\speech\tts\TextToSpeech.java"
"ERROR","true","false","false","true","true","int","-1","[]","Optional[/**
 * Denotes a generic operation failure.
 */
]","\android\speech\tts\TextToSpeech.java"
"mInitListener","false","false","true","false","false","OnInitListener","null","[]","Optional.empty","\android\speech\tts\TextToSpeech.java"
"mITtscallback","false","false","true","false","false","ITtsCallback","null","[]","Optional.empty","\android\speech\tts\TextToSpeech.java"
"KEY_PARAM_UTTERANCE_ID","true","false","false","true","true","String","""utteranceId""","[]","Optional[/**
 * Parameter key to identify an utterance in the
 * {@link TextToSpeech.OnUtteranceCompletedListener} after text has been
 * spoken, a file has been played back or a silence duration has elapsed.
 * @see TextToSpeech#speak(String, int, HashMap)
 * @see TextToSpeech#playEarcon(String, int, HashMap)
 * @see TextToSpeech#synthesizeToFile(String, HashMap, String)
 */
]","\android\speech\tts\TextToSpeech.java"
"LANG_COUNTRY_AVAILABLE","true","false","false","true","true","int","1","[]","Optional[/**
 * Denotes the language is available for the language and country specified
 * by the locale, but not the variant.
 */
]","\android\speech\tts\TextToSpeech.java"
"KEY_PARAM_STREAM","true","false","false","true","true","String","""streamType""","[]","Optional[/**
 * Parameter key to specify the audio stream type to be used when speaking text
 * or playing back a file.
 * @see TextToSpeech#speak(String, int, HashMap)
 * @see TextToSpeech#playEarcon(String, int, HashMap)
 */
]","\android\speech\tts\TextToSpeech.java"
"LANG_MISSING_DATA","true","false","false","true","true","int","-1","[]","Optional[/**
 * Denotes the language data is missing.
 */
]","\android\speech\tts\TextToSpeech.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\speech\tts\TextToSpeech.java"
"QUEUE_ADD","true","false","false","true","true","int","1","[]","Optional[/**
 * Queue mode where the new entry is added at the end of the playback queue.
 */
]","\android\speech\tts\TextToSpeech.java"
"PARAM_POSITION_VARIANT","false","true","false","true","true","int","6","[]","Optional[/**
 * {@hide}
 */
]","\android\speech\tts\TextToSpeech.java"
"mStarted","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\speech\tts\TextToSpeech.java"
"ACTION_TTS_DATA_INSTALLED","true","false","false","true","true","String","""android.speech.tts.engine.TTS_DATA_INSTALLED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: broadcast to signal the completion of the installation of
 * the data files used by the synthesis engine. Success or failure is indicated in the
 * {@link #EXTRA_TTS_DATA_INSTALLED} extra.
 */
]","\android\speech\tts\TextToSpeech.java"
"PARAM_POSITION_COUNTRY","false","true","false","true","true","int","4","[]","Optional[/**
 * {@hide}
 */
]","\android\speech\tts\TextToSpeech.java"
"SUCCESS","true","false","false","true","true","int","0","[]","Optional[/**
 * Denotes a successful operation.
 */
]","\android\speech\tts\TextToSpeech.java"
"KEY_PARAM_PITCH","true","false","false","true","true","String","""pitch""","[]","Optional[/**
 * {@hide}
 */
]","\android\speech\tts\TextToSpeech.java"
"USE_DEFAULTS","true","false","false","true","true","int","0","[]","Optional[// false
]","\android\speech\tts\TextToSpeech.java"
"ACTION_TTS_QUEUE_PROCESSING_COMPLETED","true","false","false","true","true","String","""android.speech.tts.TTS_QUEUE_PROCESSING_COMPLETED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: The TextToSpeech synthesizer has completed processing
 * of all the text in the speech queue.
 */
]","\android\speech\tts\TextToSpeech.java"
"EXTRA_VOICE_DATA_FILES","true","false","false","true","true","String","""dataFiles""","[]","Optional[/**
 * Extra information received with the {@link #ACTION_CHECK_TTS_DATA} intent where
 * the TextToSpeech engine specifies the file names of its resources under the
 * resource path.
 */
]","\android\speech\tts\TextToSpeech.java"
"EXTRA_UNAVAILABLE_VOICES","true","false","false","true","true","String","""unavailableVoices""","[]","Optional[/**
 * Extra information received with the {@link #ACTION_CHECK_TTS_DATA} intent where
 * the TextToSpeech engine returns an ArrayList<String> of all the unavailable voices.
 * The format of each voice is: lang-COUNTRY-variant where COUNTRY and variant are
 * optional (ie, ""eng"" or ""eng-USA"" or ""eng-USA-FEMALE"").
 */
]","\android\speech\tts\TextToSpeech.java"
"KEY_PARAM_LANGUAGE","true","false","false","true","true","String","""language""","[]","Optional[/**
 * {@hide}
 */
]","\android\speech\tts\TextToSpeech.java"
"CHECK_VOICE_DATA_FAIL","true","false","false","true","true","int","0","[]","Optional[/**
 * Indicates failure when checking the installation status of the resources used by the
 * TextToSpeech engine with the {@link #ACTION_CHECK_TTS_DATA} intent.
 */
]","\android\speech\tts\TextToSpeech.java"
"NB_CACHED_PARAMS","false","true","false","true","true","int","8","[]","Optional[/**
 * {@hide}
 */
]","\android\speech\tts\TextToSpeech.java"
"PARAM_POSITION_STREAM","false","true","false","true","true","int","8","[]","Optional[/**
 * {@hide}
 */
]","\android\speech\tts\TextToSpeech.java"
"PARAM_POSITION_PITCH","false","true","false","true","true","int","14","[]","Optional[/**
 * {@hide}
 */
]","\android\speech\tts\TextToSpeech.java"
"CHECK_VOICE_DATA_BAD_DATA","true","false","false","true","true","int","-1","[]","Optional[/**
 * Indicates erroneous data when checking the installation status of the resources used by
 * the TextToSpeech engine with the {@link #ACTION_CHECK_TTS_DATA} intent.
 */
]","\android\speech\tts\TextToSpeech.java"
"mITts","false","false","true","false","false","ITts","null","[]","Optional.empty","\android\speech\tts\TextToSpeech.java"
"KEY_PARAM_COUNTRY","true","false","false","true","true","String","""country""","[]","Optional[/**
 * {@hide}
 */
]","\android\speech\tts\TextToSpeech.java"
"mStartLock","false","false","true","false","true","Object","new Object()","[]","Optional.empty","\android\speech\tts\TextToSpeech.java"
"QUEUE_FLUSH","true","false","false","true","true","int","0","[]","Optional[/**
 * Queue mode where all entries in the playback queue (media to be played
 * and text to be synthesized) are dropped and replaced by the new entry.
 */
]","\android\speech\tts\TextToSpeech.java"
"PARAM_POSITION_UTTERANCE_ID","false","true","false","true","true","int","10","[]","Optional[/**
 * {@hide}
 */
]","\android\speech\tts\TextToSpeech.java"
"DEFAULT_RATE","true","false","false","true","true","int","100","[]","Optional[// 1x
]","\android\speech\tts\TextToSpeech.java"
"DEFAULT_PITCH","true","false","false","true","true","int","100","[]","Optional[// 1x
]","\android\speech\tts\TextToSpeech.java"
"ACTION_INSTALL_TTS_DATA","true","false","false","true","true","String","""android.speech.tts.engine.INSTALL_TTS_DATA""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Triggers the platform TextToSpeech engine to
 * start the activity that installs the resource files on the device
 * that are required for TTS to be operational. Since the installation
 * of the data can be interrupted or declined by the user, the application
 * shouldn't expect successful installation upon return from that intent,
 * and if need be, should check installation status with
 * {@link #ACTION_CHECK_TTS_DATA}.
 */
]","\android\speech\tts\TextToSpeech.java"
"EXTRA_TTS_DATA_INSTALLED","true","false","false","true","true","String","""dataInstalled""","[]","Optional[/**
 * Extra information received with the {@link #ACTION_TTS_DATA_INSTALLED} intent.
 * It indicates whether the data files for the synthesis engine were successfully
 * installed. The installation was initiated with the  {@link #ACTION_INSTALL_TTS_DATA}
 * intent. The possible values for this extra are
 * {@link TextToSpeech#SUCCESS} and {@link TextToSpeech#ERROR}.
 */
]","\android\speech\tts\TextToSpeech.java"
"EXTRA_VOICE_DATA_FILES_INFO","true","false","false","true","true","String","""dataFilesInfo""","[]","Optional[/**
 * Extra information received with the {@link #ACTION_CHECK_TTS_DATA} intent where
 * the TextToSpeech engine specifies the locale associated with each resource file.
 */
]","\android\speech\tts\TextToSpeech.java"
"KEY_PARAM_VARIANT","true","false","false","true","true","String","""variant""","[]","Optional[/**
 * {@hide}
 */
]","\android\speech\tts\TextToSpeech.java"
"KEY_PARAM_ENGINE","true","false","false","true","true","String","""engine""","[]","Optional[/**
 * {@hide}
 */
]","\android\speech\tts\TextToSpeech.java"
"EXTRA_VOICE_DATA_ROOT_DIRECTORY","true","false","false","true","true","String","""dataRoot""","[]","Optional[/**
 * Extra information received with the {@link #ACTION_CHECK_TTS_DATA} intent where
 * the TextToSpeech engine specifies the path to its resources.
 */
]","\android\speech\tts\TextToSpeech.java"
"CHECK_VOICE_DATA_MISSING_VOLUME","true","false","false","true","true","int","-3","[]","Optional[/**
 * Indicates missing storage volume when checking the installation status of the resources
 * used by the TextToSpeech engine with the {@link #ACTION_CHECK_TTS_DATA} intent.
 */
]","\android\speech\tts\TextToSpeech.java"
"mServiceConnection","false","false","true","false","false","ServiceConnection","null","[]","Optional[/**
 * Connection needed for the TTS.
 */
]","\android\speech\tts\TextToSpeech.java"
"mPackageName","false","false","true","false","false","String","""""","[]","Optional.empty","\android\speech\tts\TextToSpeech.java"
"PARAM_POSITION_ENGINE","false","true","false","true","true","int","12","[]","Optional[/**
 * {@hide}
 */
]","\android\speech\tts\TextToSpeech.java"
"LANG_COUNTRY_VAR_AVAILABLE","true","false","false","true","true","int","2","[]","Optional[/**
 * Denotes the language is available exactly as specified by the locale.
 */
]","\android\speech\tts\TextToSpeech.java"
"EXTRA_AVAILABLE_VOICES","true","false","false","true","true","String","""availableVoices""","[]","Optional[/**
 * Extra information received with the {@link #ACTION_CHECK_TTS_DATA} intent where
 * the TextToSpeech engine returns an ArrayList<String> of all the available voices.
 * The format of each voice is: lang-COUNTRY-variant where COUNTRY and variant are
 * optional (ie, ""eng"" or ""eng-USA"" or ""eng-USA-FEMALE"").
 */
]","\android\speech\tts\TextToSpeech.java"
"PARAM_POSITION_LANGUAGE","false","true","false","true","true","int","2","[]","Optional[/**
 * {@hide}
 */
]","\android\speech\tts\TextToSpeech.java"
"LANG_NOT_SUPPORTED","true","false","false","true","true","int","-2","[]","Optional[/**
 * Denotes the language is not supported.
 */
]","\android\speech\tts\TextToSpeech.java"
"CHECK_VOICE_DATA_MISSING_DATA","true","false","false","true","true","int","-2","[]","Optional[/**
 * Indicates missing resources when checking the installation status of the resources used
 * by the TextToSpeech engine with the {@link #ACTION_CHECK_TTS_DATA} intent.
 */
]","\android\speech\tts\TextToSpeech.java"
"mCachedParams","false","false","true","false","false","String","null","[]","Optional[/**
 * Used to store the cached parameters sent along with each synthesis request to the
 * TTS service.
 */
]","\android\speech\tts\TextToSpeech.java"
"DEFAULT_SYNTH","true","false","false","true","true","String","""com.svox.pico""","[]","Optional[/**
 * {@hide}
 */
]","\android\speech\tts\TextToSpeech.java"
"ACTION_CHECK_TTS_DATA","true","false","false","true","true","String","""android.speech.tts.engine.CHECK_TTS_DATA""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Starts the activity from the platform TextToSpeech
 * engine to verify the proper installation and availability of the
 * resource files on the system. Upon completion, the activity will
 * return one of the following codes:
 * {@link #CHECK_VOICE_DATA_PASS},
 * {@link #CHECK_VOICE_DATA_FAIL},
 * {@link #CHECK_VOICE_DATA_BAD_DATA},
 * {@link #CHECK_VOICE_DATA_MISSING_DATA}, or
 * {@link #CHECK_VOICE_DATA_MISSING_VOLUME}.
 * <p> Moreover, the data received in the activity result will contain the following
 * fields:
 * <ul>
 * <li>{@link #EXTRA_VOICE_DATA_ROOT_DIRECTORY} which
 * indicates the path to the location of the resource files,</li>
 * <li>{@link #EXTRA_VOICE_DATA_FILES} which contains
 * the list of all the resource files,</li>
 * <li>and {@link #EXTRA_VOICE_DATA_FILES_INFO} which
 * contains, for each resource file, the description of the language covered by
 * the file in the xxx-YYY format, where xxx is the 3-letter ISO language code,
 * and YYY is the 3-letter ISO country code.</li>
 * </ul>
 */
]","\android\speech\tts\TextToSpeech.java"
"EXTRA_CHECK_VOICE_DATA_FOR","true","false","false","true","true","String","""checkVoiceDataFor""","[]","Optional[/**
 * Extra information sent with the {@link #ACTION_CHECK_TTS_DATA} intent where the
 * caller indicates to the TextToSpeech engine which specific sets of voice data to
 * check for by sending an ArrayList<String> of the voices that are of interest.
 * The format of each voice is: lang-COUNTRY-variant where COUNTRY and variant are
 * optional (ie, ""eng"" or ""eng-USA"" or ""eng-USA-FEMALE"").
 */
]","\android\speech\tts\TextToSpeech.java"
"LANG_AVAILABLE","true","false","false","true","true","int","0","[]","Optional[/**
 * Denotes the language is available for the language by the locale,
 * but not the country and variant.
 */
]","\android\speech\tts\TextToSpeech.java"
"CHECK_VOICE_DATA_PASS","true","false","false","true","true","int","1","[]","Optional[/**
 * Indicates success when checking the installation status of the resources used by the
 * TextToSpeech engine with the {@link #ACTION_CHECK_TTS_DATA} intent.
 */
]","\android\speech\tts\TextToSpeech.java"
"KEY_PARAM_RATE","true","false","false","true","true","String","""rate""","[]","Optional[/**
 * {@hide}
 */
]","\android\speech\tts\TextToSpeech.java"
"PARAM_POSITION_RATE","false","true","false","true","true","int","0","[]","Optional[/**
 * {@hide}
 */
]","\android\speech\tts\TextToSpeech.java"
"mPath","false","false","true","false","true","File","null","[]","Optional.empty","\android\gesture\GestureLibraries.java"
"mContext","false","false","true","false","true","WeakReference<Context>","null","[]","Optional.empty","\android\gesture\GestureLibraries.java"
"mResourceId","false","false","true","false","true","int","null","[]","Optional.empty","\android\gesture\GestureLibraries.java"
"mDropDownAnchorView","false","false","true","false","false","View","null","[]","Optional[// view is retrieved lazily from id once needed
]","\android\widget\AutoCompleteTextView.java"
"mItemSelectedListener","false","false","true","false","false","AdapterView.OnItemSelectedListener","null","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mHideSelector","false","false","true","false","false","ListSelectorHider","null","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mPassThroughClickListener","false","false","true","false","false","PassThroughClickListener","null","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mWrapped","false","false","true","false","false","View.OnClickListener","null","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mDropDownItemClickListener","false","false","true","false","true","DropDownItemClickListener","new DropDownItemClickListener()","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mForceIgnoreOutsideTouch","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mDropDownVerticalOffset","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mPopup","false","false","true","false","false","PopupWindow","null","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mDropDownHeight","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mHintText","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mItemClickListener","false","false","true","false","false","AdapterView.OnItemClickListener","null","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mThreshold","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mDropDownList","false","false","true","false","false","DropDownListView","null","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mDropDownListHighlight","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mFilter","false","false","true","false","false","Filter","null","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mTempRect","false","false","true","false","true","Rect","new Rect()","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"HINT_VIEW_ID","false","false","true","true","true","int","0x17","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mHintResource","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mLastKeyCode","false","false","true","false","false","int","KeyEvent.KEYCODE_UNKNOWN","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mDropDownHorizontalOffset","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"TAG","false","false","false","true","true","String","""AutoCompleteTextView""","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mDropDownWidth","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mDropDownDismissedOnCompletion","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mDropDownAlwaysVisible","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mAdapter","false","false","true","false","false","ListAdapter","null","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mObserver","false","false","true","false","false","PopupDataSetObserver","null","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mOpenBefore","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mDropDownAnchorId","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mShowDropDownRunnable","false","false","true","false","false","Runnable","null","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mListSelectionHidden","false","false","true","false","false","boolean","null","[]","Optional[/*
         * WARNING: This is a workaround for a touch mode issue.
         *
         * Touch mode is propagated lazily to windows. This causes problems in
         * the following scenario:
         * - Type something in the AutoCompleteTextView and get some results
         * - Move down with the d-pad to select an item in the list
         * - Move up with the d-pad until the selection disappears
         * - Type more text in the AutoCompleteTextView *using the soft keyboard*
         *   and get new results; you are now in touch mode
         * - The selection comes back on the first item in the list, even though
         *   the list is supposed to be in touch mode
         *
         * Using the soft keyboard triggers the touch mode change but that change
         * is propagated to our window only after the first list layout, therefore
         * after the list attempts to resurrect the selection.
         *
         * The trick to work around this issue is to pretend the list is in touch
         * mode when we know that the selection should not appear, that is when
         * we know the user moved the selection away from the list.
         *
         * This boolean is set to true whenever we explicitely hide the list's
         * selection and reset to false whenver we know the user moved the
         * selection back to the list.
         *
         * When this boolean is true, isInTouchMode() returns true, otherwise it
         * returns super.isInTouchMode().
         */
]","\android\widget\AutoCompleteTextView.java"
"DEBUG","false","false","false","true","true","boolean","false","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"EXPAND_LIST_TIMEOUT","false","false","true","true","true","int","250","[]","Optional[/**
 * This value controls the length of time that the user
 * must leave a pointer down without scrolling to expand
 * the autocomplete dropdown list to cover the IME.
 */
]","\android\widget\AutoCompleteTextView.java"
"mValidator","false","false","true","false","false","Validator","null","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mResizePopupRunnable","false","false","true","false","false","Runnable","new ResizePopupRunnable()","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mBlockCompletion","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\AutoCompleteTextView.java"
"mSnapshotExecTime","false","false","true","false","false","long","null","[]","Optional.empty","\android\os\PerformanceCollector.java"
"mSnapshotCpuTime","false","false","true","false","false","long","null","[]","Optional.empty","\android\os\PerformanceCollector.java"
"mExecTime","false","false","true","false","false","long","null","[]","Optional.empty","\android\os\PerformanceCollector.java"
"METRIC_KEY_NATIVE_SHARED_DIRTY","true","false","false","true","true","String","""native_shared_dirty""","[]","Optional[/**
 * In a snapshot Bundle, this key reports the number of shared dirty pages
 * used by the native heap.
 */
]","\android\os\PerformanceCollector.java"
"mPerfMeasurement","false","false","true","false","false","Bundle","null","[]","Optional.empty","\android\os\PerformanceCollector.java"
"METRIC_KEY_OTHER_SHARED_DIRTY","true","false","false","true","true","String","""other_shared_dirty""","[]","Optional[/**
 * In a snapshot Bundle, this key reports the number of shared dirty pages
 * used by everything else.
 */
]","\android\os\PerformanceCollector.java"
"METRIC_KEY_NATIVE_FREE","true","false","false","true","true","String","""native_free""","[]","Optional[/**
 * In a snapshot Bundle, this key reports the amount of free memory in the
 * native heap.
 */
]","\android\os\PerformanceCollector.java"
"METRIC_KEY_GC_INVOCATION_COUNT","true","false","false","true","true","String","""gc_invocation_count""","[]","Optional[/**
 * In a snapshot Bundle, this key reports the number of garbage collection
 * invocations.
 */
]","\android\os\PerformanceCollector.java"
"METRIC_KEY_CPU_TIME","true","false","false","true","true","String","""cpu_time""","[]","Optional[/**
 * In a results Bundle, this key reports the cpu time of the code block
 * under measurement.
 */
]","\android\os\PerformanceCollector.java"
"METRIC_KEY_JAVA_PRIVATE_DIRTY","true","false","false","true","true","String","""java_private_dirty""","[]","Optional[/**
 * In a snapshot Bundle, this key reports the number of private dirty pages
 * used by dalvik.
 */
]","\android\os\PerformanceCollector.java"
"mPerfSnapshot","false","false","true","false","false","Bundle","null","[]","Optional.empty","\android\os\PerformanceCollector.java"
"METRIC_KEY_GLOBAL_ALLOC_SIZE","true","false","false","true","true","String","""global_alloc_size""","[]","Optional[/**
 * In a snapshot Bundle, this key reports the size of all objects allocated
 * globally.
 */
]","\android\os\PerformanceCollector.java"
"METRIC_KEY_EXECUTION_TIME","true","false","false","true","true","String","""execution_time""","[]","Optional[/**
 * In a results Bundle, this key reports the execution time of the code
 * block under measurement.
 */
]","\android\os\PerformanceCollector.java"
"METRIC_KEY_JAVA_ALLOCATED","true","false","false","true","true","String","""java_allocated""","[]","Optional[/**
 * In a snapshot Bundle, this key reports the amount of allocated memory
 * used by the running program.
 */
]","\android\os\PerformanceCollector.java"
"METRIC_KEY_NATIVE_PSS","true","false","false","true","true","String","""native_pss""","[]","Optional[/**
 * In a snapshot Bundle, this key reports the proportional set size for the
 * native heap.
 */
]","\android\os\PerformanceCollector.java"
"METRIC_KEY_JAVA_FREE","true","false","false","true","true","String","""java_free""","[]","Optional[/**
 * In a snapshot Bundle, this key reports the amount of free memory
 * available to the running program.
 */
]","\android\os\PerformanceCollector.java"
"METRIC_KEY_SENT_TRANSACTIONS","true","false","false","true","true","String","""sent_transactions""","[]","Optional[/**
 * In a snapshot Bundle, this key reports the number of transactions sent by
 * the running program.
 */
]","\android\os\PerformanceCollector.java"
"METRIC_KEY_GLOBAL_FREED_SIZE","true","false","false","true","true","String","""global_freed_size""","[]","Optional[/**
 * In a snapshot Bundle, this key reports the size of all objects freed
 * globally.
 */
]","\android\os\PerformanceCollector.java"
"METRIC_KEY_NATIVE_ALLOCATED","true","false","false","true","true","String","""native_allocated""","[]","Optional[/**
 * In a snapshot Bundle, this key reports the amount of allocated memory in
 * the native heap.
 */
]","\android\os\PerformanceCollector.java"
"METRIC_KEY_OTHER_PRIVATE_DIRTY","true","false","false","true","true","String","""other_private_dirty""","[]","Optional[/**
 * In a snapshot Bundle, this key reports the number of private dirty pages
 * used by everything else.
 */
]","\android\os\PerformanceCollector.java"
"METRIC_KEY_ITERATIONS","true","false","false","true","true","String","""iterations""","[]","Optional[/**
 * In a results Bundle, this key references a List of iteration Bundles.
 */
]","\android\os\PerformanceCollector.java"
"METRIC_KEY_NATIVE_PRIVATE_DIRTY","true","false","false","true","true","String","""native_private_dirty""","[]","Optional[/**
 * In a snapshot Bundle, this key reports the number of private dirty pages
 * used by the native heap.
 */
]","\android\os\PerformanceCollector.java"
"METRIC_KEY_PRE_SENT_TRANSACTIONS","true","false","false","true","true","String","""pre_sent_transactions""","[]","Optional[/**
 * In a snapshot Bundle, this key reports the number of transactions sent by
 * the running program before collection started.
 */
]","\android\os\PerformanceCollector.java"
"mPerfWriter","false","false","true","false","false","PerformanceResultsWriter","null","[]","Optional.empty","\android\os\PerformanceCollector.java"
"METRIC_KEY_JAVA_SHARED_DIRTY","true","false","false","true","true","String","""java_shared_dirty""","[]","Optional[/**
 * In a snapshot Bundle, this key reports the number of shared dirty pages
 * used by dalvik.
 */
]","\android\os\PerformanceCollector.java"
"METRIC_KEY_JAVA_SIZE","true","false","false","true","true","String","""java_size""","[]","Optional[/**
 * In a snapshot Bundle, this key reports the total amount of memory
 * available to the running program.
 */
]","\android\os\PerformanceCollector.java"
"METRIC_KEY_RECEIVED_TRANSACTIONS","true","false","false","true","true","String","""received_transactions""","[]","Optional[/**
 * In a snapshot Bundle, this key reports the number of received
 * transactions from the binder driver.
 */
]","\android\os\PerformanceCollector.java"
"METRIC_KEY_GLOBAL_ALLOC_COUNT","true","false","false","true","true","String","""global_alloc_count""","[]","Optional[/**
 * In a snapshot Bundle, this key reports the number of objects allocated
 * globally.
 */
]","\android\os\PerformanceCollector.java"
"METRIC_KEY_JAVA_PSS","true","false","false","true","true","String","""java_pss""","[]","Optional[/**
 * In a snapshot Bundle, this key reports the proportional set size for
 * dalvik.
 */
]","\android\os\PerformanceCollector.java"
"mCpuTime","false","false","true","false","false","long","null","[]","Optional.empty","\android\os\PerformanceCollector.java"
"METRIC_KEY_LABEL","true","false","false","true","true","String","""label""","[]","Optional[/**
 * In an iteration Bundle, this key describes the iteration.
 */
]","\android\os\PerformanceCollector.java"
"METRIC_KEY_NATIVE_SIZE","true","false","false","true","true","String","""native_size""","[]","Optional[/**
 * In a snapshot Bundle, this key reports the size of the native heap.
 */
]","\android\os\PerformanceCollector.java"
"METRIC_KEY_GLOBAL_FREED_COUNT","true","false","false","true","true","String","""global_freed_count""","[]","Optional[/**
 * In a snapshot Bundle, this key reports the number of objects freed
 * globally.
 */
]","\android\os\PerformanceCollector.java"
"METRIC_KEY_PRE_RECEIVED_TRANSACTIONS","true","false","false","true","true","String","""pre_received_transactions""","[]","Optional[/**
 * In a snapshot Bundle, this key reports the number of received
 * transactions from the binder driver before collection started.
 */
]","\android\os\PerformanceCollector.java"
"METRIC_KEY_OTHER_PSS","true","false","false","true","true","String","""other_pss""","[]","Optional[/**
 * In a snapshot Bundle, this key reports the proportional set size for
 * everything else.
 */
]","\android\os\PerformanceCollector.java"
"mSession","false","false","true","false","false","IWindowSession","null","[]","Optional.empty","\com\android\internal\view\BaseIWindow.java"
"mStretchMode","false","false","true","false","false","int","STRETCH_COLUMN_WIDTH","[]","Optional.empty","\android\widget\GridView.java"
"STRETCH_SPACING","true","false","false","true","true","int","1","[]","Optional.empty","\android\widget\GridView.java"
"mReferenceViewInSelectedRow","false","false","true","false","false","View","null","[]","Optional.empty","\android\widget\GridView.java"
"mNumColumns","false","false","true","false","false","int","AUTO_FIT","[]","Optional.empty","\android\widget\GridView.java"
"mRequestedHorizontalSpacing","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\GridView.java"
"mHorizontalSpacing","false","false","true","false","false","int","0","[]","Optional.empty","\android\widget\GridView.java"
"mColumnWidth","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\GridView.java"
"NO_STRETCH","true","false","false","true","true","int","0","[]","Optional.empty","\android\widget\GridView.java"
"mRequestedNumColumns","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\GridView.java"
"AUTO_FIT","true","false","false","true","true","int","-1","[]","Optional.empty","\android\widget\GridView.java"
"STRETCH_COLUMN_WIDTH","true","false","false","true","true","int","2","[]","Optional.empty","\android\widget\GridView.java"
"mTempRect","false","false","true","false","true","Rect","new Rect()","[]","Optional.empty","\android\widget\GridView.java"
"mVerticalSpacing","false","false","true","false","false","int","0","[]","Optional.empty","\android\widget\GridView.java"
"mReferenceView","false","false","true","false","false","View","null","[]","Optional.empty","\android\widget\GridView.java"
"STRETCH_SPACING_UNIFORM","true","false","false","true","true","int","3","[]","Optional.empty","\android\widget\GridView.java"
"mRequestedColumnWidth","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\GridView.java"
"mGravity","false","false","true","false","false","int","Gravity.LEFT","[]","Optional.empty","\android\widget\GridView.java"
"mParser","false","false","true","false","false","XmlPullParser","null","[]","Optional.empty","\android\util\XmlPullAttributes.java"
"mRunning","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\ViewFlipper.java"
"mStarted","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\ViewFlipper.java"
"mVisible","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\ViewFlipper.java"
"mUserPresent","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\widget\ViewFlipper.java"
"mAutoStart","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\ViewFlipper.java"
"mHandler","false","false","true","false","true","Handler","new Handler() {

    @Override
    public void handleMessage(Message msg) {
        if (msg.what == FLIP_MSG) {
            if (mRunning) {
                showNext();
                msg = obtainMessage(FLIP_MSG);
                sendMessageDelayed(msg, mFlipInterval);
            }
        }
    }
}","[]","Optional.empty","\android\widget\ViewFlipper.java"
"TAG","false","false","true","true","true","String","""ViewFlipper""","[]","Optional.empty","\android\widget\ViewFlipper.java"
"LOGD","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\widget\ViewFlipper.java"
"mFlipInterval","false","false","true","false","false","int","DEFAULT_INTERVAL","[]","Optional.empty","\android\widget\ViewFlipper.java"
"FLIP_MSG","false","false","true","false","true","int","1","[]","Optional.empty","\android\widget\ViewFlipper.java"
"mReceiver","false","false","true","false","true","BroadcastReceiver","new BroadcastReceiver() {

    @Override
    public void onReceive(Context context, Intent intent) {
        final String action = intent.getAction();
        if (Intent.ACTION_SCREEN_OFF.equals(action)) {
            mUserPresent = false;
            updateRunning();
        } else if (Intent.ACTION_USER_PRESENT.equals(action)) {
            mUserPresent = true;
            updateRunning();
        }
    }
}","[]","Optional.empty","\android\widget\ViewFlipper.java"
"DEFAULT_INTERVAL","false","false","true","true","true","int","3000","[]","Optional.empty","\android\widget\ViewFlipper.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<ComponentName>","new Parcelable.Creator<ComponentName>() {

    public ComponentName createFromParcel(Parcel in) {
        return new ComponentName(in);
    }

    public ComponentName[] newArray(int size) {
        return new ComponentName[size];
    }
}","[]","Optional.empty","\android\content\ComponentName.java"
"mPackage","false","false","true","false","true","String","null","[]","Optional.empty","\android\content\ComponentName.java"
"mClass","false","false","true","false","true","String","null","[]","Optional.empty","\android\content\ComponentName.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<InputChannel>","new Parcelable.Creator<InputChannel>() {

    public InputChannel createFromParcel(Parcel source) {
        InputChannel result = new InputChannel();
        result.readFromParcel(source);
        return result;
    }

    public InputChannel[] newArray(int size) {
        return new InputChannel[size];
    }
}","[]","Optional.empty","\android\view\InputChannel.java"
"mPtr","false","false","true","false","false","int","null","[@SuppressWarnings(""unused"")]","Optional.empty","\android\view\InputChannel.java"
"TAG","false","false","true","true","true","String","""InputChannel""","[]","Optional.empty","\android\view\InputChannel.java"
"mDisposeAfterWriteToParcel","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\view\InputChannel.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\view\InputChannel.java"
"serviceInfo","true","false","false","false","false","ServiceInfo","null","[]","Optional[/**
 * The service that corresponds to this resolution match, if this
 * resolution is for a service. One and only one of this and
 * activityInfo must be non-null.
 */
]","\android\content\pm\ResolveInfo.java"
"preferredOrder","true","false","false","false","false","int","null","[]","Optional[/**
 * Order of result according to the user's preference.  If the user
 * has not set a preference for this result, the value is 0; higher
 * values are a higher priority.
 */
]","\android\content\pm\ResolveInfo.java"
"CREATOR","true","false","false","true","true","Creator<ResolveInfo>","new Creator<ResolveInfo>() {

    public ResolveInfo createFromParcel(Parcel source) {
        return new ResolveInfo(source);
    }

    public ResolveInfo[] newArray(int size) {
        return new ResolveInfo[size];
    }
}","[]","Optional.empty","\android\content\pm\ResolveInfo.java"
"isDefault","true","false","false","false","false","boolean","null","[]","Optional[/**
 * This filter has specified the Intent.CATEGORY_DEFAULT, meaning it
 * would like to be considered a default action that the user can
 * perform on this data.
 */
]","\android\content\pm\ResolveInfo.java"
"labelRes","true","false","false","false","false","int","null","[]","Optional[/**
 * A string resource identifier (in the package's resources) of this
 * match's label.  From the ""label"" attribute or, if not set, 0.
 */
]","\android\content\pm\ResolveInfo.java"
"icon","true","false","false","false","false","int","null","[]","Optional[/**
 * A drawable resource identifier (in the package's resources) of this
 * match's icon.  From the ""icon"" attribute or, if not set, 0.
 */
]","\android\content\pm\ResolveInfo.java"
"specificIndex","true","false","false","false","false","int","-1","[]","Optional[/**
 * Only set when returned by
 * {@link PackageManager#queryIntentActivityOptions}, this tells you
 * which of the given specific intents this result came from.  0 is the
 * first in the list, < 0 means it came from the generic Intent query.
 */
]","\android\content\pm\ResolveInfo.java"
"nonLocalizedLabel","true","false","false","false","false","CharSequence","null","[]","Optional[/**
 * The actual string retrieve from <var>labelRes</var> or null if none
 * was provided.
 */
]","\android\content\pm\ResolveInfo.java"
"resolvePackageName","true","false","false","false","false","String","null","[]","Optional[/**
 * Optional -- if non-null, the {@link #labelRes} and {@link #icon}
 * resources will be loaded from this package, rather than the one
 * containing the resolved component.
 */
]","\android\content\pm\ResolveInfo.java"
"mPM","false","false","true","false","false","PackageManager","null","[]","Optional.empty","\android\content\pm\ResolveInfo.java"
"priority","true","false","false","false","false","int","null","[]","Optional[/**
 * The declared priority of this match.  Comes from the ""priority""
 * attribute or, if not set, defaults to 0.  Higher values are a higher
 * priority.
 */
]","\android\content\pm\ResolveInfo.java"
"sCollator","false","false","true","false","true","Collator","Collator.getInstance()","[]","Optional.empty","\android\content\pm\ResolveInfo.java"
"activityInfo","true","false","false","false","false","ActivityInfo","null","[]","Optional[/**
 * The activity that corresponds to this resolution match, if this
 * resolution is for an activity.  One and only one of this and
 * serviceInfo must be non-null.
 */
]","\android\content\pm\ResolveInfo.java"
"filter","true","false","false","false","false","IntentFilter","null","[]","Optional[/**
 * The IntentFilter that was matched for this ResolveInfo.
 */
]","\android\content\pm\ResolveInfo.java"
"match","true","false","false","false","false","int","null","[]","Optional[/**
 * The system's evaluation of how well the activity matches the
 * IntentFilter.  This is a match constant, a combination of
 * {@link IntentFilter#MATCH_CATEGORY_MASK IntentFilter.MATCH_CATEGORY_MASK}
 * and {@link IntentFilter#MATCH_ADJUSTMENT_MASK IntentFiler.MATCH_ADJUSTMENT_MASK}.
 */
]","\android\content\pm\ResolveInfo.java"
"TNF_MIME_MEDIA","true","false","false","true","true","short","0x02","[]","Optional[/**
 * Indicates the type field contains a value that follows the media-type BNF
 * construct defined by RFC 2046.
 */
]","\android\nfc\NdefRecord.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<NdefRecord>","new Parcelable.Creator<NdefRecord>() {

    public NdefRecord createFromParcel(Parcel in) {
        short tnf = (short) in.readInt();
        int typeLength = in.readInt();
        byte[] type = new byte[typeLength];
        in.readByteArray(type);
        int idLength = in.readInt();
        byte[] id = new byte[idLength];
        in.readByteArray(id);
        int payloadLength = in.readInt();
        byte[] payload = new byte[payloadLength];
        in.readByteArray(payload);
        return new NdefRecord(tnf, type, id, payload);
    }

    public NdefRecord[] newArray(int size) {
        return new NdefRecord[size];
    }
}","[]","Optional.empty","\android\nfc\NdefRecord.java"
"mFlags","false","false","true","false","true","byte","null","[]","Optional.empty","\android\nfc\NdefRecord.java"
"RTD_TEXT","true","false","false","true","true","byte","{ 0x54 }","[]","Optional[// ""T""
]","\android\nfc\NdefRecord.java"
"TNF_EMPTY","true","false","false","true","true","short","0x00","[]","Optional[/**
 * Indicates no type, id, or payload is associated with this NDEF Record.
 * <p>
 * Type, id and payload fields must all be empty to be a valid TNF_EMPTY
 * record.
 */
]","\android\nfc\NdefRecord.java"
"TNF_ABSOLUTE_URI","true","false","false","true","true","short","0x03","[]","Optional[/**
 * Indicates the type field contains a value that follows the absolute-URI
 * BNF construct defined by RFC 3986.
 */
]","\android\nfc\NdefRecord.java"
"FLAG_SR","false","false","true","true","true","byte","(byte) 0x10","[]","Optional.empty","\android\nfc\NdefRecord.java"
"FLAG_CF","false","false","true","true","true","byte","(byte) 0x20","[]","Optional.empty","\android\nfc\NdefRecord.java"
"mId","false","false","true","false","true","byte","null","[]","Optional.empty","\android\nfc\NdefRecord.java"
"FLAG_IL","false","false","true","true","true","byte","(byte) 0x08","[]","Optional.empty","\android\nfc\NdefRecord.java"
"TNF_WELL_KNOWN","true","false","false","true","true","short","0x01","[]","Optional[/**
 * Indicates the type field uses the RTD type name format.
 * <p>
 * Use this TNF with RTD types such as RTD_TEXT, RTD_URI.
 */
]","\android\nfc\NdefRecord.java"
"RTD_URI","true","false","false","true","true","byte","{ 0x55 }","[]","Optional[// ""U""
]","\android\nfc\NdefRecord.java"
"RTD_HANDOVER_CARRIER","true","false","false","true","true","byte","{ 0x48, 0x63 }","[]","Optional[// ""Hc""
]","\android\nfc\NdefRecord.java"
"RTD_HANDOVER_REQUEST","true","false","false","true","true","byte","{ 0x48, 0x72 }","[]","Optional[// ""Hr""
]","\android\nfc\NdefRecord.java"
"RTD_SMART_POSTER","true","false","false","true","true","byte","{ 0x53, 0x70 }","[]","Optional[// ""Sp""
]","\android\nfc\NdefRecord.java"
"FLAG_ME","false","false","true","true","true","byte","(byte) 0x40","[]","Optional.empty","\android\nfc\NdefRecord.java"
"FLAG_MB","false","false","true","true","true","byte","(byte) 0x80","[]","Optional.empty","\android\nfc\NdefRecord.java"
"mTnf","false","false","true","false","true","short","null","[]","Optional.empty","\android\nfc\NdefRecord.java"
"mPayload","false","false","true","false","true","byte","null","[]","Optional.empty","\android\nfc\NdefRecord.java"
"RTD_HANDOVER_SELECT","true","false","false","true","true","byte","{ 0x48, 0x73 }","[]","Optional[// ""Hs""
]","\android\nfc\NdefRecord.java"
"mType","false","false","true","false","true","byte","null","[]","Optional.empty","\android\nfc\NdefRecord.java"
"TNF_UNKNOWN","true","false","false","true","true","short","0x05","[]","Optional[/**
 * Indicates the payload type is unknown.
 * <p>
 * This is similar to the ""application/octet-stream"" MIME type. The payload
 * type is not explicitly encoded within the NDEF Message.
 * <p>
 * The type field must be empty to be a valid TNF_UNKNOWN record.
 */
]","\android\nfc\NdefRecord.java"
"TNF_UNCHANGED","true","false","false","true","true","short","0x06","[]","Optional[/**
 * Indicates the payload is an intermediate or final chunk of a chunked
 * NDEF Record.
 * <p>
 * The payload type is specified in the first chunk, and subsequent chunks
 * must use TNF_UNCHANGED with an empty type field. TNF_UNCHANGED must not
 * be used in any other situation.
 */
]","\android\nfc\NdefRecord.java"
"RTD_ALTERNATIVE_CARRIER","true","false","false","true","true","byte","{ 0x61, 0x63 }","[]","Optional[// ""ac""
]","\android\nfc\NdefRecord.java"
"TNF_RESERVED","true","false","false","true","true","short","0x07","[]","Optional[/**
 * Reserved TNF type.
 * <p>
 * The NFC Forum NDEF Specification v1.0 suggests for NDEF parsers to treat this
 * value like TNF_UNKNOWN.
 * @hide
 */
]","\android\nfc\NdefRecord.java"
"TNF_EXTERNAL_TYPE","true","false","false","true","true","short","0x04","[]","Optional[/**
 * Indicates the type field contains a value that follows the RTD external
 * name specification.
 * <p>
 * Note this TNF should not be used with RTD_TEXT or RTD_URI constants.
 * Those are well known RTD constants, not external RTD constants.
 */
]","\android\nfc\NdefRecord.java"
"UI_MODE_TYPE_CAR","true","false","false","true","true","int","0x03","[]","Optional.empty","\android\content\res\Configuration.java"
"ORIENTATION_UNDEFINED","true","false","false","true","true","int","0","[]","Optional.empty","\android\content\res\Configuration.java"
"HARDKEYBOARDHIDDEN_YES","true","false","false","true","true","int","2","[]","Optional.empty","\android\content\res\Configuration.java"
"NAVIGATIONHIDDEN_UNDEFINED","true","false","false","true","true","int","0","[]","Optional.empty","\android\content\res\Configuration.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<Configuration>","new Parcelable.Creator<Configuration>() {

    public Configuration createFromParcel(Parcel source) {
        return new Configuration(source);
    }

    public Configuration[] newArray(int size) {
        return new Configuration[size];
    }
}","[]","Optional.empty","\android\content\res\Configuration.java"
"NAVIGATIONHIDDEN_NO","true","false","false","true","true","int","1","[]","Optional.empty","\android\content\res\Configuration.java"
"SCREENLAYOUT_LONG_UNDEFINED","true","false","false","true","true","int","0x00","[]","Optional.empty","\android\content\res\Configuration.java"
"userSetLocale","true","false","false","false","false","boolean","null","[]","Optional[/**
 * Locale should persist on setting.  This is hidden because it is really
 * questionable whether this is the right way to expose the functionality.
 * @hide
 */
]","\android\content\res\Configuration.java"
"touchscreen","true","false","false","false","false","int","null","[]","Optional[/**
 * The kind of touch screen attached to the device.
 * One of: {@link #TOUCHSCREEN_NOTOUCH}, {@link #TOUCHSCREEN_STYLUS},
 * {@link #TOUCHSCREEN_FINGER}.
 */
]","\android\content\res\Configuration.java"
"UI_MODE_TYPE_MASK","true","false","false","true","true","int","0x0f","[]","Optional.empty","\android\content\res\Configuration.java"
"screenLayout","true","false","false","false","false","int","null","[]","Optional[/**
 * Bit mask of overall layout of the screen.  Currently there are two
 * fields:
 * <p>The {@link #SCREENLAYOUT_SIZE_MASK} bits define the overall size
 * of the screen.  They may be one of
 * {@link #SCREENLAYOUT_SIZE_SMALL}, {@link #SCREENLAYOUT_SIZE_NORMAL},
 * {@link #SCREENLAYOUT_SIZE_LARGE}.
 *
 * <p>The {@link #SCREENLAYOUT_LONG_MASK} defines whether the screen
 * is wider/taller than normal.  They may be one of
 * {@link #SCREENLAYOUT_LONG_NO} or {@link #SCREENLAYOUT_LONG_YES}.
 */
]","\android\content\res\Configuration.java"
"ORIENTATION_LANDSCAPE","true","false","false","true","true","int","2","[]","Optional.empty","\android\content\res\Configuration.java"
"SCREENLAYOUT_SIZE_LARGE","true","false","false","true","true","int","0x03","[]","Optional.empty","\android\content\res\Configuration.java"
"UI_MODE_NIGHT_YES","true","false","false","true","true","int","0x20","[]","Optional.empty","\android\content\res\Configuration.java"
"seq","true","false","false","false","false","int","null","[]","Optional[/**
 * @hide Internal book-keeping.
 */
]","\android\content\res\Configuration.java"
"KEYBOARD_UNDEFINED","true","false","false","true","true","int","0","[]","Optional.empty","\android\content\res\Configuration.java"
"TOUCHSCREEN_FINGER","true","false","false","true","true","int","3","[]","Optional.empty","\android\content\res\Configuration.java"
"KEYBOARD_QWERTY","true","false","false","true","true","int","2","[]","Optional.empty","\android\content\res\Configuration.java"
"KEYBOARDHIDDEN_SOFT","true","false","false","true","true","int","3","[]","Optional[/**
 * Constant matching actual resource implementation. {@hide}
 */
]","\android\content\res\Configuration.java"
"UI_MODE_NIGHT_MASK","true","false","false","true","true","int","0x30","[]","Optional.empty","\android\content\res\Configuration.java"
"NAVIGATION_TRACKBALL","true","false","false","true","true","int","3","[]","Optional.empty","\android\content\res\Configuration.java"
"ORIENTATION_PORTRAIT","true","false","false","true","true","int","1","[]","Optional.empty","\android\content\res\Configuration.java"
"NAVIGATION_UNDEFINED","true","false","false","true","true","int","0","[]","Optional.empty","\android\content\res\Configuration.java"
"UI_MODE_TYPE_NORMAL","true","false","false","true","true","int","0x01","[]","Optional.empty","\android\content\res\Configuration.java"
"ORIENTATION_SQUARE","true","false","false","true","true","int","3","[]","Optional.empty","\android\content\res\Configuration.java"
"keyboardHidden","true","false","false","false","false","int","null","[]","Optional[/**
 * A flag indicating whether any keyboard is available.  Unlike
 * {@link #hardKeyboardHidden}, this also takes into account a soft
 * keyboard, so if the hard keyboard is hidden but there is soft
 * keyboard available, it will be set to NO.  Value is one of:
 * {@link #KEYBOARDHIDDEN_NO}, {@link #KEYBOARDHIDDEN_YES}.
 */
]","\android\content\res\Configuration.java"
"locale","true","false","false","false","false","Locale","null","[]","Optional[/**
 * Current user preference for the locale.
 */
]","\android\content\res\Configuration.java"
"mnc","true","false","false","false","false","int","null","[]","Optional[/**
 * IMSI MNC (Mobile Network Code).  0 if undefined.
 */
]","\android\content\res\Configuration.java"
"TOUCHSCREEN_NOTOUCH","true","false","false","true","true","int","1","[]","Optional.empty","\android\content\res\Configuration.java"
"KEYBOARDHIDDEN_NO","true","false","false","true","true","int","1","[]","Optional.empty","\android\content\res\Configuration.java"
"navigation","true","false","false","false","false","int","null","[]","Optional[/**
 * The kind of navigation method available on the device.
 * One of: {@link #NAVIGATION_NONAV}, {@link #NAVIGATION_DPAD},
 * {@link #NAVIGATION_TRACKBALL}, {@link #NAVIGATION_WHEEL}.
 */
]","\android\content\res\Configuration.java"
"UI_MODE_NIGHT_NO","true","false","false","true","true","int","0x10","[]","Optional.empty","\android\content\res\Configuration.java"
"KEYBOARD_12KEY","true","false","false","true","true","int","3","[]","Optional.empty","\android\content\res\Configuration.java"
"TOUCHSCREEN_STYLUS","true","false","false","true","true","int","2","[]","Optional.empty","\android\content\res\Configuration.java"
"SCREENLAYOUT_SIZE_SMALL","true","false","false","true","true","int","0x01","[]","Optional.empty","\android\content\res\Configuration.java"
"HARDKEYBOARDHIDDEN_NO","true","false","false","true","true","int","1","[]","Optional.empty","\android\content\res\Configuration.java"
"SCREENLAYOUT_SIZE_UNDEFINED","true","false","false","true","true","int","0x00","[]","Optional.empty","\android\content\res\Configuration.java"
"HARDKEYBOARDHIDDEN_UNDEFINED","true","false","false","true","true","int","0","[]","Optional.empty","\android\content\res\Configuration.java"
"KEYBOARDHIDDEN_YES","true","false","false","true","true","int","2","[]","Optional.empty","\android\content\res\Configuration.java"
"SCREENLAYOUT_LONG_YES","true","false","false","true","true","int","0x20","[]","Optional.empty","\android\content\res\Configuration.java"
"hardKeyboardHidden","true","false","false","false","false","int","null","[]","Optional[/**
 * A flag indicating whether the hard keyboard has been hidden.  This will
 * be set on a device with a mechanism to hide the keyboard from the
 * user, when that mechanism is closed.  One of:
 * {@link #HARDKEYBOARDHIDDEN_NO}, {@link #HARDKEYBOARDHIDDEN_YES}.
 */
]","\android\content\res\Configuration.java"
"SCREENLAYOUT_COMPAT_NEEDED","true","false","false","true","true","int","0x10000000","[]","Optional[/**
 * Special flag we generate to indicate that the screen layout requires
 * us to use a compatibility mode for apps that are not modern layout
 * aware.
 * @hide
 */
]","\android\content\res\Configuration.java"
"navigationHidden","true","false","false","false","false","int","null","[]","Optional[/**
 * A flag indicating whether any 5-way or DPAD navigation available.
 * This will be set on a device with a mechanism to hide the navigation
 * controls from the user, when that mechanism is closed.  One of:
 * {@link #NAVIGATIONHIDDEN_NO}, {@link #NAVIGATIONHIDDEN_YES}.
 */
]","\android\content\res\Configuration.java"
"UI_MODE_TYPE_UNDEFINED","true","false","false","true","true","int","0x00","[]","Optional.empty","\android\content\res\Configuration.java"
"UI_MODE_TYPE_DESK","true","false","false","true","true","int","0x02","[]","Optional.empty","\android\content\res\Configuration.java"
"SCREENLAYOUT_SIZE_MASK","true","false","false","true","true","int","0x0f","[]","Optional.empty","\android\content\res\Configuration.java"
"mcc","true","false","false","false","false","int","null","[]","Optional[/**
 * IMSI MCC (Mobile Country Code).  0 if undefined.
 */
]","\android\content\res\Configuration.java"
"SCREENLAYOUT_LONG_NO","true","false","false","true","true","int","0x10","[]","Optional.empty","\android\content\res\Configuration.java"
"NAVIGATION_NONAV","true","false","false","true","true","int","1","[]","Optional.empty","\android\content\res\Configuration.java"
"SCREENLAYOUT_SIZE_XLARGE","true","false","false","true","true","int","0x04","[]","Optional.empty","\android\content\res\Configuration.java"
"fontScale","true","false","false","false","false","float","null","[]","Optional[/**
 * Current user preference for the scaling factor for fonts, relative
 * to the base density scaling.
 */
]","\android\content\res\Configuration.java"
"uiMode","true","false","false","false","false","int","null","[]","Optional[/**
 * Bit mask of the ui mode.  Currently there are two fields:
 * <p>The {@link #UI_MODE_TYPE_MASK} bits define the overall ui mode of the
 * device. They may be one of {@link #UI_MODE_TYPE_UNDEFINED},
 * {@link #UI_MODE_TYPE_NORMAL}, {@link #UI_MODE_TYPE_DESK},
 * or {@link #UI_MODE_TYPE_CAR}.
 *
 * <p>The {@link #UI_MODE_NIGHT_MASK} defines whether the screen
 * is in a special mode. They may be one of {@link #UI_MODE_NIGHT_UNDEFINED},
 * {@link #UI_MODE_NIGHT_NO} or {@link #UI_MODE_NIGHT_YES}.
 */
]","\android\content\res\Configuration.java"
"SCREENLAYOUT_SIZE_NORMAL","true","false","false","true","true","int","0x02","[]","Optional.empty","\android\content\res\Configuration.java"
"keyboard","true","false","false","false","false","int","null","[]","Optional[/**
 * The kind of keyboard attached to the device.
 * One of: {@link #KEYBOARD_NOKEYS}, {@link #KEYBOARD_QWERTY},
 * {@link #KEYBOARD_12KEY}.
 */
]","\android\content\res\Configuration.java"
"orientation","true","false","false","false","false","int","null","[]","Optional[/**
 * Overall orientation of the screen.  May be one of
 * {@link #ORIENTATION_LANDSCAPE}, {@link #ORIENTATION_PORTRAIT},
 * or {@link #ORIENTATION_SQUARE}.
 */
]","\android\content\res\Configuration.java"
"KEYBOARDHIDDEN_UNDEFINED","true","false","false","true","true","int","0","[]","Optional.empty","\android\content\res\Configuration.java"
"KEYBOARD_NOKEYS","true","false","false","true","true","int","1","[]","Optional.empty","\android\content\res\Configuration.java"
"UI_MODE_NIGHT_UNDEFINED","true","false","false","true","true","int","0x00","[]","Optional.empty","\android\content\res\Configuration.java"
"SCREENLAYOUT_LONG_MASK","true","false","false","true","true","int","0x30","[]","Optional.empty","\android\content\res\Configuration.java"
"NAVIGATIONHIDDEN_YES","true","false","false","true","true","int","2","[]","Optional.empty","\android\content\res\Configuration.java"
"NAVIGATION_DPAD","true","false","false","true","true","int","2","[]","Optional.empty","\android\content\res\Configuration.java"
"NAVIGATION_WHEEL","true","false","false","true","true","int","4","[]","Optional.empty","\android\content\res\Configuration.java"
"TOUCHSCREEN_UNDEFINED","true","false","false","true","true","int","0","[]","Optional.empty","\android\content\res\Configuration.java"
"SERVICE_INTERFACE","true","false","false","true","true","String","""android.speech.RecognitionService""","[@SdkConstant(SdkConstantType.SERVICE_ACTION)]","Optional[/**
 * The {@link Intent} that must be declared as handled by the service.
 */
]","\android\speech\RecognitionService.java"
"MSG_CANCEL","false","false","true","true","true","int","3","[]","Optional.empty","\android\speech\RecognitionService.java"
"SERVICE_META_DATA","true","false","false","true","true","String","""android.speech""","[]","Optional[/**
 * Name under which a RecognitionService component publishes information about itself.
 * This meta-data should reference an XML resource containing a
 * <code>&lt;{@link android.R.styleable#RecognitionService recognition-service}&gt;</code> tag.
 */
]","\android\speech\RecognitionService.java"
"MSG_START_LISTENING","false","false","true","true","true","int","1","[]","Optional.empty","\android\speech\RecognitionService.java"
"mBinder","false","false","true","false","false","RecognitionServiceBinder","new RecognitionServiceBinder(this)","[]","Optional[/**
 * Binder of the recognition service
 */
]","\android\speech\RecognitionService.java"
"mCurrentCallback","false","false","true","false","false","Callback","null","[]","Optional[/**
 * The current callback of an application that invoked the
 * {@link RecognitionService#onStartListening(Intent, Callback)} method
 */
]","\android\speech\RecognitionService.java"
"mInternalService","false","false","true","false","false","RecognitionService","null","[]","Optional.empty","\android\speech\RecognitionService.java"
"mHandler","false","false","true","false","true","Handler","new Handler() {

    @Override
    public void handleMessage(Message msg) {
        switch(msg.what) {
            case MSG_START_LISTENING:
                StartListeningArgs args = (StartListeningArgs) msg.obj;
                dispatchStartListening(args.mIntent, args.mListener);
                break;
            case MSG_STOP_LISTENING:
                dispatchStopListening((IRecognitionListener) msg.obj);
                break;
            case MSG_CANCEL:
                dispatchCancel((IRecognitionListener) msg.obj);
        }
    }
}","[]","Optional.empty","\android\speech\RecognitionService.java"
"TAG","false","false","true","true","true","String","""RecognitionService""","[]","Optional[/**
 * Log messages identifier
 */
]","\android\speech\RecognitionService.java"
"mListener","false","false","true","false","true","IRecognitionListener","null","[]","Optional.empty","\android\speech\RecognitionService.java"
"MSG_STOP_LISTENING","false","false","true","true","true","int","2","[]","Optional.empty","\android\speech\RecognitionService.java"
"DBG","false","false","true","true","true","boolean","false","[]","Optional[/**
 * Debugging flag
 */
]","\android\speech\RecognitionService.java"
"mIntent","true","false","false","false","true","Intent","null","[]","Optional.empty","\android\speech\RecognitionService.java"
"DIGEST_TOKEN","true","false","false","true","true","String","""Digest""","[]","Optional.empty","\android\net\http\HttpAuthHeader.java"
"BASIC_TOKEN","true","false","false","true","true","String","""Basic""","[]","Optional[/**
 * Possible HTTP-authentication header tokens to search for:
 */
]","\android\net\http\HttpAuthHeader.java"
"mQop","false","false","true","false","false","String","null","[]","Optional[/**
 * This directive is optional, but is made so only for backward
 * compatibility with RFC 2069 [6]; it SHOULD be used by all
 * implementations compliant with this version of the Digest scheme.
 * If present, it is a quoted string of one or more tokens indicating
 * the ""quality of protection"" values supported by the server.  The
 * value ""auth"" indicates authentication; the value ""auth-int""
 * indicates authentication with integrity protection.
 */
]","\android\net\http\HttpAuthHeader.java"
"OPAQUE_TOKEN","false","false","true","true","true","String","""opaque""","[]","Optional.empty","\android\net\http\HttpAuthHeader.java"
"mRealm","false","false","true","false","false","String","null","[]","Optional[/**
 * A string to be displayed to users so they know which username and
 * password to use.
 */
]","\android\net\http\HttpAuthHeader.java"
"mAlgorithm","false","false","true","false","false","String","null","[]","Optional[/**
 * A string indicating a pair of algorithms used to produce the digest
 * and a checksum. If this is not present it is assumed to be ""MD5"".
 */
]","\android\net\http\HttpAuthHeader.java"
"STALE_TOKEN","false","false","true","true","true","String","""stale""","[]","Optional.empty","\android\net\http\HttpAuthHeader.java"
"ALGORITHM_TOKEN","false","false","true","true","true","String","""algorithm""","[]","Optional.empty","\android\net\http\HttpAuthHeader.java"
"mScheme","false","false","true","false","false","int","null","[]","Optional[/**
 * An authentication scheme. We currently support two different schemes:
 * HttpAuthHeader.BASIC  - basic, and
 * HttpAuthHeader.DIGEST - digest (algorithm=MD5, QOP=""auth"").
 */
]","\android\net\http\HttpAuthHeader.java"
"mUsername","false","false","true","false","false","String","null","[]","Optional[/**
 * Username string we get from the user.
 */
]","\android\net\http\HttpAuthHeader.java"
"mIsProxy","false","false","true","false","false","boolean","null","[]","Optional[/**
 * Is this authentication request a proxy authentication request?
 */
]","\android\net\http\HttpAuthHeader.java"
"REALM_TOKEN","false","false","true","true","true","String","""realm""","[]","Optional.empty","\android\net\http\HttpAuthHeader.java"
"NONCE_TOKEN","false","false","true","true","true","String","""nonce""","[]","Optional.empty","\android\net\http\HttpAuthHeader.java"
"mPassword","false","false","true","false","false","String","null","[]","Optional[/**
 * Password string we get from the user.
 */
]","\android\net\http\HttpAuthHeader.java"
"QOP_TOKEN","false","false","true","true","true","String","""qop""","[]","Optional.empty","\android\net\http\HttpAuthHeader.java"
"mOpaque","false","false","true","false","false","String","null","[]","Optional[/**
 * A string of data, specified by the server, which should be returned
 * by the client unchanged in the Authorization header of subsequent
 * requests with URIs in the same protection space.
 */
]","\android\net\http\HttpAuthHeader.java"
"BASIC","true","false","false","true","true","int","1","[]","Optional.empty","\android\net\http\HttpAuthHeader.java"
"mStale","false","false","true","false","false","boolean","null","[]","Optional[/**
 * A flag, indicating that the previous request from the client was
 * rejected because the nonce value was stale. If stale is TRUE
 * (case-insensitive), the client may wish to simply retry the request
 * with a new encrypted response, without reprompting the user for a
 * new username and password.
 */
]","\android\net\http\HttpAuthHeader.java"
"DIGEST","true","false","false","true","true","int","2","[]","Optional.empty","\android\net\http\HttpAuthHeader.java"
"UNKNOWN","true","false","false","true","true","int","0","[]","Optional.empty","\android\net\http\HttpAuthHeader.java"
"mNonce","false","false","true","false","false","String","null","[]","Optional[/**
 * A server-specified data string which should be uniquely generated
 * each time a 401 response is made.
 */
]","\android\net\http\HttpAuthHeader.java"
"mURL","false","false","true","false","true","String","null","[]","Optional.empty","\android\text\style\URLSpan.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<SavedState>","new Parcelable.Creator<SavedState>() {

    public SavedState createFromParcel(Parcel in) {
        return new SavedState(in);
    }

    public SavedState[] newArray(int size) {
        return new SavedState[size];
    }
}","[]","Optional.empty","\android\preference\VolumePreference.java"
"mSeekBarVolumizer","false","false","true","false","false","SeekBarVolumizer","null","[]","Optional[/**
 * May be null if the dialog isn't visible.
 */
]","\android\preference\VolumePreference.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\preference\VolumePreference.java"
"mRingtone","false","false","true","false","false","Ringtone","null","[]","Optional.empty","\android\preference\VolumePreference.java"
"mVolumeStore","false","false","false","false","false","VolumeStore","new VolumeStore()","[]","Optional.empty","\android\preference\VolumePreference.java"
"mLastProgress","false","false","true","false","false","int","-1","[]","Optional.empty","\android\preference\VolumePreference.java"
"volume","true","false","false","false","false","int","-1","[]","Optional.empty","\android\preference\VolumePreference.java"
"mSeekBar","false","false","true","false","false","SeekBar","null","[]","Optional.empty","\android\preference\VolumePreference.java"
"mAudioManager","false","false","true","false","false","AudioManager","null","[]","Optional.empty","\android\preference\VolumePreference.java"
"originalVolume","true","false","false","false","false","int","-1","[]","Optional.empty","\android\preference\VolumePreference.java"
"mHandler","false","false","true","false","false","Handler","new Handler()","[]","Optional.empty","\android\preference\VolumePreference.java"
"TAG","false","false","true","true","true","String","""VolumePreference""","[]","Optional.empty","\android\preference\VolumePreference.java"
"mVolumeObserver","false","false","true","false","false","ContentObserver","new ContentObserver(mHandler) {

    @Override
    public void onChange(boolean selfChange) {
        super.onChange(selfChange);
        if (mSeekBar != null) {
            int volume = System.getInt(mContext.getContentResolver(), System.VOLUME_SETTINGS[mStreamType], -1);
            // TODO: Fix the actual issue, probably in AudioService
            if (volume >= 0) {
                mSeekBar.setProgress(volume);
            }
        }
    }
}","[]","Optional.empty","\android\preference\VolumePreference.java"
"mOriginalStreamVolume","false","false","true","false","false","int","null","[]","Optional.empty","\android\preference\VolumePreference.java"
"mStreamType","false","false","true","false","false","int","null","[]","Optional.empty","\android\preference\VolumePreference.java"
"sServiceManager","false","false","true","true","false","IServiceManager","null","[]","Optional.empty","\android\os\ServiceManager.java"
"sCache","false","false","true","true","false","HashMap<String,IBinder>","new HashMap<String, IBinder>()","[]","Optional.empty","\android\os\ServiceManager.java"
"TAG","false","false","true","true","true","String","""ServiceManager""","[]","Optional.empty","\android\os\ServiceManager.java"
"columnsCount","true","false","false","false","false","int","null","[]","Optional[/**
 * The number of columns in the view's enclosing grid layout.
 */
]","\android\view\animation\GridLayoutAnimationController.java"
"DIRECTION_RIGHT_TO_LEFT","true","false","false","true","true","int","0x1","[]","Optional[/**
 * Animates the children starting from the right of the grid to the left.
 */
]","\android\view\animation\GridLayoutAnimationController.java"
"column","true","false","false","false","false","int","null","[]","Optional[/**
 * The view group's column to which the view belongs.
 */
]","\android\view\animation\GridLayoutAnimationController.java"
"DIRECTION_HORIZONTAL_MASK","true","false","false","true","true","int","0x1","[]","Optional[/**
 * Bitmask used to retrieve the horizontal component of the direction.
 */
]","\android\view\animation\GridLayoutAnimationController.java"
"PRIORITY_COLUMN","true","false","false","true","true","int","1","[]","Optional[/**
 * Columns are animated first.
 */
]","\android\view\animation\GridLayoutAnimationController.java"
"mDirection","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\animation\GridLayoutAnimationController.java"
"rowsCount","true","false","false","false","false","int","null","[]","Optional[/**
 * The number of rows in the view's enclosing grid layout.
 */
]","\android\view\animation\GridLayoutAnimationController.java"
"DIRECTION_VERTICAL_MASK","true","false","false","true","true","int","0x2","[]","Optional[/**
 * Bitmask used to retrieve the vertical component of the direction.
 */
]","\android\view\animation\GridLayoutAnimationController.java"
"DIRECTION_TOP_TO_BOTTOM","true","false","false","true","true","int","0x0","[]","Optional[/**
 * Animates the children starting from the top of the grid to the bottom.
 */
]","\android\view\animation\GridLayoutAnimationController.java"
"mRowDelay","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\animation\GridLayoutAnimationController.java"
"PRIORITY_NONE","true","false","false","true","true","int","0","[]","Optional[/**
 * Rows and columns are animated at the same time.
 */
]","\android\view\animation\GridLayoutAnimationController.java"
"PRIORITY_ROW","true","false","false","true","true","int","2","[]","Optional[/**
 * Rows are animated first.
 */
]","\android\view\animation\GridLayoutAnimationController.java"
"mDirectionPriority","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\animation\GridLayoutAnimationController.java"
"DIRECTION_BOTTOM_TO_TOP","true","false","false","true","true","int","0x2","[]","Optional[/**
 * Animates the children starting from the bottom of the grid to the top.
 */
]","\android\view\animation\GridLayoutAnimationController.java"
"row","true","false","false","false","false","int","null","[]","Optional[/**
 * The view group's row to which the view belongs.
 */
]","\android\view\animation\GridLayoutAnimationController.java"
"mColumnDelay","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\animation\GridLayoutAnimationController.java"
"DIRECTION_LEFT_TO_RIGHT","true","false","false","true","true","int","0x0","[]","Optional[/**
 * Animates the children starting from the left of the grid to the right.
 */
]","\android\view\animation\GridLayoutAnimationController.java"
"mClient","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\SurfaceSession.java"
"LIGHT_SHADE","true","false","false","true","true","float","20000.0f","[]","Optional[/**
 * luminance in shade in lux
 */
]","\android\hardware\SensorManager.java"
"mTempMatrix","false","false","true","true","true","float","new float[16]","[]","Optional.empty","\android\hardware\SensorManager.java"
"mSensorEventListener","false","false","false","false","true","SensorEventListener","null","[]","Optional.empty","\android\hardware\SensorManager.java"
"GRAVITY_NEPTUNE","true","false","false","true","true","float","11.0f","[]","Optional[/**
 * Neptune's gravity in SI units (m/s^2)
 */
]","\android\hardware\SensorManager.java"
"GRAVITY_SATURN","true","false","false","true","true","float","8.96f","[]","Optional[/**
 * Saturn's gravity in SI units (m/s^2)
 */
]","\android\hardware\SensorManager.java"
"mMainLooper","false","false","false","false","false","Looper","null","[]","Optional.empty","\android\hardware\SensorManager.java"
"SENSOR_STATUS_ACCURACY_MEDIUM","true","false","false","true","true","int","2","[]","Optional[/**
 * This sensor is reporting data with an average level of accuracy,
 * calibration with the environment may improve the readings
 */
]","\android\hardware\SensorManager.java"
"PRESSURE_STANDARD_ATMOSPHERE","true","false","false","true","true","float","1013.25f","[]","Optional[/**
 * Standard atmosphere, or average sea-level pressure in hPa (millibar)
 */
]","\android\hardware\SensorManager.java"
"sSensorThread","false","false","true","true","false","SensorThread","null","[]","Optional[/* The thread and the sensor list are global to the process
     * but the actual thread is spawned on demand */
]","\android\hardware\SensorManager.java"
"STANDARD_GRAVITY","true","false","false","true","true","float","9.80665f","[]","Optional[/**
 * Standard gravity (g) on Earth. This value is equivalent to 1G
 */
]","\android\hardware\SensorManager.java"
"SENSOR_ORIENTATION","true","false","false","true","true","int","1 << 0","[@Deprecated]","Optional[/**
 * A constant describing an orientation sensor. See
 * {@link android.hardware.SensorListener SensorListener} for more details.
 *
 * @deprecated use {@link android.hardware.Sensor Sensor} instead.
 */
]","\android\hardware\SensorManager.java"
"SENSOR_TRICORDER","true","false","false","true","true","int","1 << 6","[@Deprecated]","Optional[/**
 * A constant describing a Tricorder See
 * {@link android.hardware.SensorListener SensorListener} for more details.
 *
 * @deprecated use {@link android.hardware.Sensor Sensor} instead.
 */
]","\android\hardware\SensorManager.java"
"LIGHT_SUNLIGHT_MAX","true","false","false","true","true","float","120000.0f","[]","Optional[/**
 * Maximum luminance of sunlight in lux
 */
]","\android\hardware\SensorManager.java"
"SENSOR_MAX","true","false","false","true","true","int","((SENSOR_ALL + 1) >> 1)","[@Deprecated]","Optional[/**
 * Largest sensor ID
 *
 * @deprecated use {@link android.hardware.Sensor Sensor} instead.
 */
]","\android\hardware\SensorManager.java"
"GRAVITY_JUPITER","true","false","false","true","true","float","23.12f","[]","Optional[/**
 * Jupiter's gravity in SI units (m/s^2)
 */
]","\android\hardware\SensorManager.java"
"SENSOR_DELAY_FASTEST","true","false","false","true","true","int","0","[]","Optional[/**
 * get sensor data as fast as possible
 */
]","\android\hardware\SensorManager.java"
"LIGHT_SUNLIGHT","true","false","false","true","true","float","110000.0f","[]","Optional[/**
 * luminance of sunlight in lux
 */
]","\android\hardware\SensorManager.java"
"mIndex","false","false","true","false","false","int","null","[]","Optional.empty","\android\hardware\SensorManager.java"
"LIGHT_FULLMOON","true","false","false","true","true","float","0.25f","[]","Optional[/**
 * luminance at night with full moon in lux
 */
]","\android\hardware\SensorManager.java"
"RAW_DATA_INDEX","true","false","false","true","true","int","3","[@Deprecated]","Optional[/**
 * Offset to the untransformed values in the array returned by
 * {@link android.hardware.SensorListener#onSensorChanged}
 *
 * @deprecated use {@link android.hardware.Sensor Sensor} instead.
 */
]","\android\hardware\SensorManager.java"
"SENSOR_ALL","true","false","false","true","true","int","0x7F","[@Deprecated]","Optional[/**
 * A constant that includes all sensors
 *
 * @deprecated use {@link android.hardware.Sensor Sensor} instead.
 */
]","\android\hardware\SensorManager.java"
"GRAVITY_SUN","true","false","false","true","true","float","275.0f","[]","Optional[/**
 * Sun's gravity in SI units (m/s^2)
 */
]","\android\hardware\SensorManager.java"
"SENSOR_STATUS_ACCURACY_LOW","true","false","false","true","true","int","1","[]","Optional[/**
 * This sensor is reporting data with low accuracy, calibration with the
 * environment is needed
 */
]","\android\hardware\SensorManager.java"
"GRAVITY_DEATH_STAR_I","true","false","false","true","true","float","0.000000353036145f","[]","Optional[/**
 * Gravity (estimate) on the first Death Star in Empire units (m/s^2)
 */
]","\android\hardware\SensorManager.java"
"SENSOR_ACCELEROMETER","true","false","false","true","true","int","1 << 1","[@Deprecated]","Optional[/**
 * A constant describing an accelerometer. See
 * {@link android.hardware.SensorListener SensorListener} for more details.
 *
 * @deprecated use {@link android.hardware.Sensor Sensor} instead.
 */
]","\android\hardware\SensorManager.java"
"mTarget","false","false","true","false","false","SensorListener","null","[@SuppressWarnings(""deprecation"")]","Optional.empty","\android\hardware\SensorManager.java"
"sQueue","false","false","true","true","false","int","null","[]","Optional.empty","\android\hardware\SensorManager.java"
"RAW_DATA_Y","true","false","false","true","true","int","4","[@Deprecated]","Optional[/**
 * Index of the untransformed Y value in the array returned by
 * {@link android.hardware.SensorListener#onSensorChanged}
 *
 * @deprecated use {@link android.hardware.Sensor Sensor} instead.
 */
]","\android\hardware\SensorManager.java"
"RAW_DATA_X","true","false","false","true","true","int","3","[@Deprecated]","Optional[/**
 * Index of the untransformed X value in the array returned by
 * {@link android.hardware.SensorListener#onSensorChanged}
 *
 * @deprecated use {@link android.hardware.Sensor Sensor} instead.
 */
]","\android\hardware\SensorManager.java"
"LIGHT_OVERCAST","true","false","false","true","true","float","10000.0f","[]","Optional[/**
 * luminance under an overcast sky in lux
 */
]","\android\hardware\SensorManager.java"
"RAW_DATA_Z","true","false","false","true","true","int","5","[@Deprecated]","Optional[/**
 * Index of the untransformed Z value in the array returned by
 * {@link android.hardware.SensorListener#onSensorChanged}
 *
 * @deprecated use {@link android.hardware.Sensor Sensor} instead.
 */
]","\android\hardware\SensorManager.java"
"DATA_Y","true","false","false","true","true","int","1","[@Deprecated]","Optional[/**
 * Index of the Y value in the array returned by
 * {@link android.hardware.SensorListener#onSensorChanged}
 *
 * @deprecated use {@link android.hardware.Sensor Sensor} instead.
 */
]","\android\hardware\SensorManager.java"
"DATA_Z","true","false","false","true","true","int","2","[@Deprecated]","Optional[/**
 * Index of the Z value in the array returned by
 * {@link android.hardware.SensorListener#onSensorChanged}
 *
 * @deprecated use {@link android.hardware.Sensor Sensor} instead.
 */
]","\android\hardware\SensorManager.java"
"GRAVITY_MERCURY","true","false","false","true","true","float","3.70f","[]","Optional[/**
 * Mercury's gravity in SI units (m/s^2)
 */
]","\android\hardware\SensorManager.java"
"DATA_X","true","false","false","true","true","int","0","[@Deprecated]","Optional[/**
 * Index of the X value in the array returned by
 * {@link android.hardware.SensorListener#onSensorChanged}
 *
 * @deprecated use {@link android.hardware.Sensor Sensor} instead.
 */
]","\android\hardware\SensorManager.java"
"sListeners","false","false","false","true","true","ArrayList<ListenerDelegate>","new ArrayList<ListenerDelegate>()","[]","Optional.empty","\android\hardware\SensorManager.java"
"mYawfilter","false","false","true","false","true","LmsFilter","new LmsFilter()","[]","Optional.empty","\android\hardware\SensorManager.java"
"GRAVITY_PLUTO","true","false","false","true","true","float","0.6f","[]","Optional[/**
 * Pluto's gravity in SI units (m/s^2)
 */
]","\android\hardware\SensorManager.java"
"MAGNETIC_FIELD_EARTH_MAX","true","false","false","true","true","float","60.0f","[]","Optional[/**
 * Maximum magnetic field on Earth's surface
 */
]","\android\hardware\SensorManager.java"
"AXIS_Z","true","false","false","true","true","int","3","[]","Optional[/**
 * see {@link #remapCoordinateSystem}
 */
]","\android\hardware\SensorManager.java"
"mLegacyListenersMap","false","false","true","false","false","HashMap<SensorListener,LegacyListener>","new HashMap<SensorListener, LegacyListener>()","[@SuppressWarnings(""deprecation"")]","Optional.empty","\android\hardware\SensorManager.java"
"SENSOR_ORIENTATION_RAW","true","false","false","true","true","int","1 << 7","[@Deprecated]","Optional[/**
 * A constant describing an orientation sensor. See
 * {@link android.hardware.SensorListener SensorListener} for more details.
 *
 * @deprecated use {@link android.hardware.Sensor Sensor} instead.
 */
]","\android\hardware\SensorManager.java"
"AXIS_Y","true","false","false","true","true","int","2","[]","Optional[/**
 * see {@link #remapCoordinateSystem}
 */
]","\android\hardware\SensorManager.java"
"AXIS_X","true","false","false","true","true","int","1","[]","Optional[/**
 * see {@link #remapCoordinateSystem}
 */
]","\android\hardware\SensorManager.java"
"mSensors","false","false","true","false","false","int","null","[]","Optional.empty","\android\hardware\SensorManager.java"
"AXIS_MINUS_Z","true","false","false","true","true","int","AXIS_Z | 0x80","[]","Optional[/**
 * see {@link #remapCoordinateSystem}
 */
]","\android\hardware\SensorManager.java"
"sRotation","false","false","true","true","false","int","Surface.ROTATION_0","[]","Optional.empty","\android\hardware\SensorManager.java"
"AXIS_MINUS_Y","true","false","false","true","true","int","AXIS_Y | 0x80","[]","Optional[/**
 * see {@link #remapCoordinateSystem}
 */
]","\android\hardware\SensorManager.java"
"AXIS_MINUS_X","true","false","false","true","true","int","AXIS_X | 0x80","[]","Optional[/**
 * see {@link #remapCoordinateSystem}
 */
]","\android\hardware\SensorManager.java"
"SENSOR_DELAY_GAME","true","false","false","true","true","int","1","[]","Optional[/**
 * rate suitable for games
 */
]","\android\hardware\SensorManager.java"
"SENSOR_MIN","true","false","false","true","true","int","SENSOR_ORIENTATION","[@Deprecated]","Optional[/**
 * Smallest sensor ID
 *
 * @deprecated use {@link android.hardware.Sensor Sensor} instead.
 */
]","\android\hardware\SensorManager.java"
"mSensorsReady","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\hardware\SensorManager.java"
"mFirstEvent","true","false","false","false","false","SparseBooleanArray","new SparseBooleanArray()","[]","Optional.empty","\android\hardware\SensorManager.java"
"COUNT","false","false","true","true","true","int","12","[]","Optional.empty","\android\hardware\SensorManager.java"
"SENSOR_LIGHT","true","false","false","true","true","int","1 << 4","[@Deprecated]","Optional[/**
 * A constant describing an ambient light sensor See
 * {@link android.hardware.SensorListener SensorListener} for more details.
 *
 * @deprecated use {@link android.hardware.Sensor Sensor} instead.
 */
]","\android\hardware\SensorManager.java"
"SENSOR_DISABLE","false","false","true","true","true","int","-1","[]","Optional.empty","\android\hardware\SensorManager.java"
"SENSORS_RATE_MS","false","false","true","true","true","int","20","[]","Optional.empty","\android\hardware\SensorManager.java"
"GRAVITY_THE_ISLAND","true","false","false","true","true","float","4.815162342f","[]","Optional[/**
 * Gravity on the island
 */
]","\android\hardware\SensorManager.java"
"GRAVITY_MOON","true","false","false","true","true","float","1.6f","[]","Optional[/**
 * The Moon's gravity in SI units (m/s^2)
 */
]","\android\hardware\SensorManager.java"
"LIGHT_SUNRISE","true","false","false","true","true","float","400.0f","[]","Optional[/**
 * luminance at sunrise in lux
 */
]","\android\hardware\SensorManager.java"
"GRAVITY_VENUS","true","false","false","true","true","float","8.87f","[]","Optional[/**
 * Venus' gravity in SI units (m/s^2)
 */
]","\android\hardware\SensorManager.java"
"GRAVITY_MARS","true","false","false","true","true","float","3.71f","[]","Optional[/**
 * Mars' gravity in SI units (m/s^2)
 */
]","\android\hardware\SensorManager.java"
"SENSOR_STATUS_UNRELIABLE","true","false","false","true","true","int","0","[]","Optional[/**
 * The values returned by this sensor cannot be trusted, calibration is
 * needed or the environment doesn't allow readings
 */
]","\android\hardware\SensorManager.java"
"mHandler","false","false","true","false","true","Handler","null","[]","Optional.empty","\android\hardware\SensorManager.java"
"TAG","false","false","true","true","true","String","""SensorManager""","[]","Optional.empty","\android\hardware\SensorManager.java"
"mT","false","false","true","false","false","float","new float[COUNT * 2]","[]","Optional.empty","\android\hardware\SensorManager.java"
"mV","false","false","true","false","false","float","new float[COUNT * 2]","[]","Optional.empty","\android\hardware\SensorManager.java"
"LIGHT_NO_MOON","true","false","false","true","true","float","0.001f","[]","Optional[/**
 * luminance at night with no moon in lux
 */
]","\android\hardware\SensorManager.java"
"mSensorAccuracies","true","false","false","false","false","SparseIntArray","new SparseIntArray()","[]","Optional.empty","\android\hardware\SensorManager.java"
"SENSOR_STATUS_ACCURACY_HIGH","true","false","false","true","true","int","3","[]","Optional[/**
 * This sensor is reporting data with maximum accuracy
 */
]","\android\hardware\SensorManager.java"
"mThread","false","false","false","false","false","Thread","null","[]","Optional.empty","\android\hardware\SensorManager.java"
"MAGNETIC_FIELD_EARTH_MIN","true","false","false","true","true","float","30.0f","[]","Optional[/**
 * Minimum magnetic field on Earth's surface
 */
]","\android\hardware\SensorManager.java"
"sSensorListByType","false","false","true","true","false","SparseArray<List<Sensor>>","new SparseArray<List<Sensor>>()","[]","Optional.empty","\android\hardware\SensorManager.java"
"GRAVITY_EARTH","true","false","false","true","true","float","9.80665f","[]","Optional[/**
 * Earth's gravity in SI units (m/s^2)
 */
]","\android\hardware\SensorManager.java"
"sFullSensorsList","false","false","true","true","false","ArrayList<Sensor>","new ArrayList<Sensor>()","[]","Optional.empty","\android\hardware\SensorManager.java"
"mValuesPool","false","false","true","false","false","SensorEvent","null","[]","Optional.empty","\android\hardware\SensorManager.java"
"SENSOR_PROXIMITY","true","false","false","true","true","int","1 << 5","[@Deprecated]","Optional[/**
 * A constant describing a proximity sensor See
 * {@link android.hardware.SensorListener SensorListener} for more details.
 *
 * @deprecated use {@link android.hardware.Sensor Sensor} instead.
 */
]","\android\hardware\SensorManager.java"
"sSensorModuleInitialized","false","false","true","true","false","boolean","false","[]","Optional.empty","\android\hardware\SensorManager.java"
"sWindowManager","false","false","true","true","false","IWindowManager","null","[]","Optional.empty","\android\hardware\SensorManager.java"
"mValues","false","false","true","false","false","float","new float[6]","[]","Optional.empty","\android\hardware\SensorManager.java"
"SENSOR_MAGNETIC_FIELD","true","false","false","true","true","int","1 << 3","[@Deprecated]","Optional[/**
 * A constant describing a magnetic sensor See
 * {@link android.hardware.SensorListener SensorListener} for more details.
 *
 * @deprecated use {@link android.hardware.Sensor Sensor} instead.
 */
]","\android\hardware\SensorManager.java"
"LIGHT_CLOUDY","true","false","false","true","true","float","100.0f","[]","Optional[/**
 * luminance under a cloudy sky in lux
 */
]","\android\hardware\SensorManager.java"
"PREDICTION_TIME","false","false","true","true","true","float","(SENSORS_RATE_MS * COUNT / 1000.0f) * PREDICTION_RATIO","[]","Optional.empty","\android\hardware\SensorManager.java"
"PREDICTION_RATIO","false","false","true","true","true","float","1.0f / 3.0f","[]","Optional.empty","\android\hardware\SensorManager.java"
"SENSOR_TEMPERATURE","true","false","false","true","true","int","1 << 2","[@Deprecated]","Optional[/**
 * A constant describing a temperature sensor See
 * {@link android.hardware.SensorListener SensorListener} for more details.
 *
 * @deprecated use {@link android.hardware.Sensor Sensor} instead.
 */
]","\android\hardware\SensorManager.java"
"sHandleToSensor","false","false","false","true","false","SparseArray<Sensor>","new SparseArray<Sensor>()","[]","Optional[// Used within this module from outside SensorManager, don't make private
]","\android\hardware\SensorManager.java"
"GRAVITY_URANUS","true","false","false","true","true","float","8.69f","[]","Optional[/**
 * Uranus' gravity in SI units (m/s^2)
 */
]","\android\hardware\SensorManager.java"
"SENSOR_DELAY_UI","true","false","false","true","true","int","2","[]","Optional[/**
 * rate suitable for the user interface
 */
]","\android\hardware\SensorManager.java"
"mSensorList","false","false","true","false","true","ArrayList<Sensor>","new ArrayList<Sensor>()","[]","Optional.empty","\android\hardware\SensorManager.java"
"SENSOR_DELAY_NORMAL","true","false","false","true","true","int","3","[]","Optional[/**
 * rate (default) suitable for screen orientation changes
 */
]","\android\hardware\SensorManager.java"
"HISTORY_PROJECTION_FAVICON_INDEX","true","false","false","true","true","int","6","[]","Optional.empty","\android\provider\Browser.java"
"SEARCHES_URI","true","false","false","true","true","Uri","Uri.parse(""content://browser/searches"")","[]","Optional.empty","\android\provider\Browser.java"
"SEARCH","true","false","false","true","true","String","""search""","[]","Optional.empty","\android\provider\Browser.java"
"EXTRA_SHARE_FAVICON","true","false","false","true","true","String","""share_favicon""","[]","Optional[/**
 * Stores a Bitmap extra in an {@link Intent} representing the favicon of a
 * page to share.  When receiving an {@link Intent#ACTION_SEND} from the
 * Browser, use this to access the favicon.
 * @hide
 */
]","\android\provider\Browser.java"
"VISITS","true","false","false","true","true","String","""visits""","[]","Optional.empty","\android\provider\Browser.java"
"TRUNCATE_N_OLDEST","true","false","false","true","true","int","5","[]","Optional[/* truncate this many history items at a time */
]","\android\provider\Browser.java"
"MAX_HISTORY_COUNT","false","false","true","true","true","int","250","[]","Optional[/* Set a cap on the count of history items in the history/bookmark
       table, to prevent db and layout operations from dragging to a
       crawl.  Revisit this cap when/if db/layout performance
       improvements are made.  Note: this does not affect bookmark
       entries -- if the user wants more bookmarks than the cap, they
       get them. */
]","\android\provider\Browser.java"
"HISTORY_PROJECTION_URL_INDEX","true","false","false","true","true","int","1","[]","Optional.empty","\android\provider\Browser.java"
"TRUNCATE_HISTORY_PROJECTION","true","false","false","true","true","String","new String[] { BookmarkColumns._ID, BookmarkColumns.DATE }","[]","Optional[/* columns needed to determine whether to truncate history */
]","\android\provider\Browser.java"
"HISTORY_PROJECTION","true","false","false","true","true","String","new String[] { BookmarkColumns._ID, BookmarkColumns.URL, BookmarkColumns.VISITS, BookmarkColumns.DATE, BookmarkColumns.BOOKMARK, BookmarkColumns.TITLE, BookmarkColumns.FAVICON, BookmarkColumns.THUMBNAIL, BookmarkColumns.TOUCH_ICON, BookmarkColumns.USER_ENTERED }","[]","Optional[/* if you change column order you must also change indices
       below */
]","\android\provider\Browser.java"
"USER_ENTERED","true","false","false","true","true","String","""user_entered""","[]","Optional[/**
 * @hide
 */
]","\android\provider\Browser.java"
"SEARCHES_WHERE_CLAUSE","false","false","true","true","true","String","""search = ?""","[]","Optional.empty","\android\provider\Browser.java"
"CREATED","true","false","false","true","true","String","""created""","[]","Optional.empty","\android\provider\Browser.java"
"HISTORY_PROJECTION_BOOKMARK_INDEX","true","false","false","true","true","int","4","[]","Optional.empty","\android\provider\Browser.java"
"TOUCH_ICON","true","false","false","true","true","String","""touch_icon""","[]","Optional[/**
 * @hide
 */
]","\android\provider\Browser.java"
"TITLE","true","false","false","true","true","String","""title""","[]","Optional.empty","\android\provider\Browser.java"
"BOOKMARKS_URI","true","false","false","true","true","Uri","Uri.parse(""content://browser/bookmarks"")","[]","Optional.empty","\android\provider\Browser.java"
"EXTRA_HEADERS","true","false","false","true","true","String","""com.android.browser.headers""","[]","Optional[/**
 * The name of the extra data in the VIEW intent. The data are key/value
 * pairs in the format of Bundle. They will be sent in the HTTP request
 * headers for the provided url. The keys can't be the standard HTTP headers
 * as they are set by the WebView. The url's schema must be http(s).
 * <p>
 */
]","\android\provider\Browser.java"
"BOOKMARK","true","false","false","true","true","String","""bookmark""","[]","Optional.empty","\android\provider\Browser.java"
"HISTORY_PROJECTION_TOUCH_ICON_INDEX","true","false","false","true","true","int","8","[]","Optional[/**
 * @hide
 */
]","\android\provider\Browser.java"
"FAVICON","true","false","false","true","true","String","""favicon""","[]","Optional.empty","\android\provider\Browser.java"
"HISTORY_PROJECTION_DATE_INDEX","true","false","false","true","true","int","3","[]","Optional.empty","\android\provider\Browser.java"
"URL","true","false","false","true","true","String","""url""","[]","Optional.empty","\android\provider\Browser.java"
"HISTORY_PROJECTION_TITLE_INDEX","true","false","false","true","true","int","5","[]","Optional.empty","\android\provider\Browser.java"
"TRUNCATE_HISTORY_PROJECTION_ID_INDEX","true","false","false","true","true","int","0","[]","Optional.empty","\android\provider\Browser.java"
"HISTORY_PROJECTION_VISITS_INDEX","true","false","false","true","true","int","2","[]","Optional.empty","\android\provider\Browser.java"
"HISTORY_PROJECTION_ID_INDEX","true","false","false","true","true","int","0","[]","Optional[/* these indices dependent on HISTORY_PROJECTION */
]","\android\provider\Browser.java"
"EXTRA_APPLICATION_ID","true","false","false","true","true","String","""com.android.browser.application_id""","[]","Optional[/**
 * The name of the extra data when starting the Browser from another
 * application.
 * <p>
 * The value is a unique identification string that will be used to
 * indentify the calling application. The Browser will attempt to reuse the
 * same window each time the application launches the Browser with the same
 * identifier.
 */
]","\android\provider\Browser.java"
"SEARCHES_PROJECTION","true","false","false","true","true","String","new String[] { SearchColumns._ID, SearchColumns.SEARCH, SearchColumns.DATE }","[]","Optional[/* if you change column order you must also change indices
       below */
]","\android\provider\Browser.java"
"THUMBNAIL","true","false","false","true","true","String","""thumbnail""","[]","Optional[/**
 * @hide
 */
]","\android\provider\Browser.java"
"DATE","true","false","false","true","true","String","""date""","[]","Optional.empty","\android\provider\Browser.java"
"EXTRA_SHARE_SCREENSHOT","true","false","false","true","true","String","""share_screenshot""","[]","Optional[/**
 * Stores a Bitmap extra in an {@link Intent} representing the screenshot of
 * a page to share.  When receiving an {@link Intent#ACTION_SEND} from the
 * Browser, use this to access the screenshot.
 * @hide
 */
]","\android\provider\Browser.java"
"INITIAL_ZOOM_LEVEL","true","false","false","true","true","String","""browser.initialZoomLevel""","[]","Optional[/**
 * The name of extra data when starting Browser with ACTION_VIEW or
 * ACTION_SEARCH intent.
 * <p>
 * The value should be an integer between 0 and 1000. If not set or set to
 * 0, the Browser will use default. If set to 100, the Browser will start
 * with 100%.
 */
]","\android\provider\Browser.java"
"SEARCHES_PROJECTION_DATE_INDEX","true","false","false","true","true","int","2","[]","Optional.empty","\android\provider\Browser.java"
"HISTORY_PROJECTION_THUMBNAIL_INDEX","true","false","false","true","true","int","7","[]","Optional[/**
 * @hide
 */
]","\android\provider\Browser.java"
"SEARCHES_PROJECTION_SEARCH_INDEX","true","false","false","true","true","int","1","[]","Optional[/* these indices dependent on SEARCHES_PROJECTION */
]","\android\provider\Browser.java"
"LOGTAG","false","false","true","true","true","String","""browser""","[]","Optional.empty","\android\provider\Browser.java"
"mTypeface","false","false","true","false","true","String","null","[]","Optional.empty","\android\text\style\TextAppearanceSpan.java"
"mTextColorLink","false","false","true","false","true","ColorStateList","null","[]","Optional.empty","\android\text\style\TextAppearanceSpan.java"
"mTextColor","false","false","true","false","true","ColorStateList","null","[]","Optional.empty","\android\text\style\TextAppearanceSpan.java"
"mTextSize","false","false","true","false","true","int","null","[]","Optional.empty","\android\text\style\TextAppearanceSpan.java"
"mStyle","false","false","true","false","true","int","null","[]","Optional.empty","\android\text\style\TextAppearanceSpan.java"
"FOREGROUND_COLOR_SPAN","true","false","false","true","true","int","2","[]","Optional[/**
 * @hide
 */
]","\android\text\TextUtils.java"
"CAP_MODE_SENTENCES","true","false","false","true","true","int","InputType.TYPE_TEXT_FLAG_CAP_SENTENCES","[]","Optional[/**
 * Capitalization mode for {@link #getCapsMode}: capitalize the first
 * character of each sentence.  This value is explicitly defined to be the same as
 * {@link InputType#TYPE_TEXT_FLAG_CAP_SENTENCES}.
 */
]","\android\text\TextUtils.java"
"STYLE_SPAN","true","false","false","true","true","int","7","[]","Optional[/**
 * @hide
 */
]","\android\text\TextUtils.java"
"LEADING_MARGIN_SPAN","true","false","false","true","true","int","10","[]","Optional[/**
 * @hide
 */
]","\android\text\TextUtils.java"
"sLock","false","false","true","true","false","Object","new Object()","[]","Optional.empty","\android\text\TextUtils.java"
"QUOTE_SPAN","true","false","false","true","true","int","9","[]","Optional[/**
 * @hide
 */
]","\android\text\TextUtils.java"
"ALIGNMENT_SPAN","true","false","false","true","true","int","1","[]","Optional[/**
 * @hide
 */
]","\android\text\TextUtils.java"
"sTemp","false","false","true","true","false","char","null","[]","Optional.empty","\android\text\TextUtils.java"
"mString","false","false","true","false","false","String","null","[]","Optional.empty","\android\text\TextUtils.java"
"URL_SPAN","true","false","false","true","true","int","11","[]","Optional[/**
 * @hide
 */
]","\android\text\TextUtils.java"
"TYPEFACE_SPAN","true","false","false","true","true","int","13","[]","Optional[/**
 * @hide
 */
]","\android\text\TextUtils.java"
"CHAR_SEQUENCE_CREATOR","true","false","false","true","true","Parcelable.Creator<CharSequence>","new Parcelable.Creator<CharSequence>() {

    /**
     * Read and return a new CharSequence, possibly with styles,
     * from the parcel.
     */
    public CharSequence createFromParcel(Parcel p) {
        int kind = p.readInt();
        if (kind == 1)
            return p.readString();
        SpannableString sp = new SpannableString(p.readString());
        while (true) {
            kind = p.readInt();
            if (kind == 0)
                break;
            switch(kind) {
                case ALIGNMENT_SPAN:
                    readSpan(p, sp, new AlignmentSpan.Standard(p));
                    break;
                case FOREGROUND_COLOR_SPAN:
                    readSpan(p, sp, new ForegroundColorSpan(p));
                    break;
                case RELATIVE_SIZE_SPAN:
                    readSpan(p, sp, new RelativeSizeSpan(p));
                    break;
                case SCALE_X_SPAN:
                    readSpan(p, sp, new ScaleXSpan(p));
                    break;
                case STRIKETHROUGH_SPAN:
                    readSpan(p, sp, new StrikethroughSpan(p));
                    break;
                case UNDERLINE_SPAN:
                    readSpan(p, sp, new UnderlineSpan(p));
                    break;
                case STYLE_SPAN:
                    readSpan(p, sp, new StyleSpan(p));
                    break;
                case BULLET_SPAN:
                    readSpan(p, sp, new BulletSpan(p));
                    break;
                case QUOTE_SPAN:
                    readSpan(p, sp, new QuoteSpan(p));
                    break;
                case LEADING_MARGIN_SPAN:
                    readSpan(p, sp, new LeadingMarginSpan.Standard(p));
                    break;
                case URL_SPAN:
                    readSpan(p, sp, new URLSpan(p));
                    break;
                case BACKGROUND_COLOR_SPAN:
                    readSpan(p, sp, new BackgroundColorSpan(p));
                    break;
                case TYPEFACE_SPAN:
                    readSpan(p, sp, new TypefaceSpan(p));
                    break;
                case SUPERSCRIPT_SPAN:
                    readSpan(p, sp, new SuperscriptSpan(p));
                    break;
                case SUBSCRIPT_SPAN:
                    readSpan(p, sp, new SubscriptSpan(p));
                    break;
                case ABSOLUTE_SIZE_SPAN:
                    readSpan(p, sp, new AbsoluteSizeSpan(p));
                    break;
                case TEXT_APPEARANCE_SPAN:
                    readSpan(p, sp, new TextAppearanceSpan(p));
                    break;
                case ANNOTATION:
                    readSpan(p, sp, new Annotation(p));
                    break;
                default:
                    throw new RuntimeException(""bogus span encoding "" + kind);
            }
        }
        return sp;
    }

    public CharSequence[] newArray(int size) {
        return new CharSequence[size];
    }
}","[]","Optional.empty","\android\text\TextUtils.java"
"mLength","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\TextUtils.java"
"SUPERSCRIPT_SPAN","true","false","false","true","true","int","14","[]","Optional[/**
 * @hide
 */
]","\android\text\TextUtils.java"
"BACKGROUND_COLOR_SPAN","true","false","false","true","true","int","12","[]","Optional[/**
 * @hide
 */
]","\android\text\TextUtils.java"
"STRIKETHROUGH_SPAN","true","false","false","true","true","int","5","[]","Optional[/**
 * @hide
 */
]","\android\text\TextUtils.java"
"TEXT_APPEARANCE_SPAN","true","false","false","true","true","int","17","[]","Optional[/**
 * @hide
 */
]","\android\text\TextUtils.java"
"CAP_MODE_CHARACTERS","true","false","false","true","true","int","InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS","[]","Optional[/**
 * Capitalization mode for {@link #getCapsMode}: capitalize all
 * characters.  This value is explicitly defined to be the same as
 * {@link InputType#TYPE_TEXT_FLAG_CAP_CHARACTERS}.
 */
]","\android\text\TextUtils.java"
"mSource","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\text\TextUtils.java"
"ANNOTATION","true","false","false","true","true","int","18","[]","Optional[/**
 * @hide
 */
]","\android\text\TextUtils.java"
"mEnd","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\TextUtils.java"
"mPosition","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\TextUtils.java"
"BULLET_SPAN","true","false","false","true","true","int","8","[]","Optional[/**
 * @hide
 */
]","\android\text\TextUtils.java"
"mStart","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\TextUtils.java"
"UNDERLINE_SPAN","true","false","false","true","true","int","6","[]","Optional[/**
 * @hide
 */
]","\android\text\TextUtils.java"
"CAP_MODE_WORDS","true","false","false","true","true","int","InputType.TYPE_TEXT_FLAG_CAP_WORDS","[]","Optional[/**
 * Capitalization mode for {@link #getCapsMode}: capitalize the first
 * character of all words.  This value is explicitly defined to be the same as
 * {@link InputType#TYPE_TEXT_FLAG_CAP_WORDS}.
 */
]","\android\text\TextUtils.java"
"SUBSCRIPT_SPAN","true","false","false","true","true","int","15","[]","Optional[/**
 * @hide
 */
]","\android\text\TextUtils.java"
"SCALE_X_SPAN","true","false","false","true","true","int","4","[]","Optional[/**
 * @hide
 */
]","\android\text\TextUtils.java"
"RELATIVE_SIZE_SPAN","true","false","false","true","true","int","3","[]","Optional[/**
 * @hide
 */
]","\android\text\TextUtils.java"
"sEllipsis","false","false","true","true","false","String","null","[]","Optional.empty","\android\text\TextUtils.java"
"mDelimiter","false","false","true","false","false","char","null","[]","Optional.empty","\android\text\TextUtils.java"
"ABSOLUTE_SIZE_SPAN","true","false","false","true","true","int","16","[]","Optional[/**
 * @hide
 */
]","\android\text\TextUtils.java"
"EMPTY_STRING_ARRAY","false","false","true","true","false","String","new String[] {}","[]","Optional.empty","\android\text\TextUtils.java"
"mIconId","true","false","false","false","false","int","0","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mViewSpacingRight","true","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mDialog","false","false","true","false","false","WeakReference<DialogInterface>","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mLabelIndex","false","false","true","false","true","int","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mButtonNeutralMessage","false","false","true","false","false","Message","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mNeutralButtonText","true","false","false","false","false","CharSequence","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mContext","true","false","false","false","true","Context","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mButtonPositive","false","false","true","false","false","Button","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mTitleView","false","false","true","false","false","TextView","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"MSG_DISMISS_DIALOG","false","false","true","true","true","int","1","[]","Optional[// Button clicks have Message.what as the BUTTON{1,2,3} constant
]","\com\android\internal\app\AlertController.java"
"mOnItemSelectedListener","true","false","false","false","false","AdapterView.OnItemSelectedListener","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mViewSpacingSpecified","true","false","false","false","false","boolean","false","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mViewSpacingLeft","true","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mNegativeButtonListener","true","false","false","false","false","DialogInterface.OnClickListener","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mLabelColumn","true","false","false","false","false","String","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mView","true","false","false","false","false","View","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mMessageView","false","false","true","false","false","TextView","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mIcon","true","false","false","false","false","Drawable","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mButtonNegativeMessage","false","false","true","false","false","Message","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mDialogInterface","false","false","true","false","true","DialogInterface","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mListView","false","false","true","false","false","ListView","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mWindow","false","false","true","false","true","Window","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mRecycleOnMeasure","true","false","false","false","false","boolean","true","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mIsMultiChoice","true","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mButtonNegative","false","false","true","false","false","Button","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mButtonNeutralText","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mViewSpacingTop","true","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mButtonHandler","false","false","false","false","false","View.OnClickListener","new View.OnClickListener() {

    public void onClick(View v) {
        Message m = null;
        if (v == mButtonPositive && mButtonPositiveMessage != null) {
            m = Message.obtain(mButtonPositiveMessage);
        } else if (v == mButtonNegative && mButtonNegativeMessage != null) {
            m = Message.obtain(mButtonNegativeMessage);
        } else if (v == mButtonNeutral && mButtonNeutralMessage != null) {
            m = Message.obtain(mButtonNeutralMessage);
        }
        if (m != null) {
            m.sendToTarget();
        }
        // Post a message so we dismiss after the above handlers are executed
        mHandler.obtainMessage(ButtonHandler.MSG_DISMISS_DIALOG, mDialogInterface).sendToTarget();
    }
}","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mCheckedItem","true","false","false","false","false","int","-1","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mOnPrepareListViewListener","true","false","false","false","false","OnPrepareListViewListener","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mCheckedItems","true","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mNeutralButtonListener","true","false","false","false","false","DialogInterface.OnClickListener","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mCursor","true","false","false","false","false","Cursor","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mButtonNeutral","false","false","true","false","false","Button","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mTitle","true","false","false","false","false","CharSequence","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mIsSingleChoice","true","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mIconView","false","false","true","false","false","ImageView","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mOnCheckboxClickListener","true","false","false","false","false","DialogInterface.OnMultiChoiceClickListener","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mItems","true","false","false","false","false","CharSequence","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mButtonPositiveText","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mScrollView","false","false","true","false","false","ScrollView","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mHandler","false","false","true","false","false","Handler","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mButtonPositiveMessage","false","false","true","false","false","Message","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mPositiveButtonText","true","false","false","false","false","CharSequence","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mNegativeButtonText","true","false","false","false","false","CharSequence","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mButtonNegativeText","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mOnCancelListener","true","false","false","false","false","DialogInterface.OnCancelListener","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mAdapter","true","false","false","false","false","ListAdapter","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mCustomTitleView","true","false","false","false","false","View","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mInflater","true","false","false","false","true","LayoutInflater","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mIsCheckedIndex","false","false","true","false","true","int","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mOnClickListener","true","false","false","false","false","DialogInterface.OnClickListener","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mForceInverseBackground","true","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mPositiveButtonListener","true","false","false","false","false","DialogInterface.OnClickListener","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mIsCheckedColumn","true","false","false","false","false","String","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mMessage","true","false","false","false","false","CharSequence","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mViewSpacingBottom","true","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mCancelable","true","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"mOnKeyListener","true","false","false","false","false","DialogInterface.OnKeyListener","null","[]","Optional.empty","\com\android\internal\app\AlertController.java"
"THROTTLE_VALUE_KBITSPS","true","false","false","true","true","String","""throttle_value_kbitsps""","[]","Optional[/**
 * The bandwidth throttle value (kbps)
 * @hide
 */
]","\android\provider\Settings.java"
"GPRS_REGISTER_CHECK_PERIOD_MS","true","false","false","true","true","String","""gprs_register_check_period_ms""","[]","Optional[/**
 * The interval in milliseconds at which to check gprs registration
 * after the first registration mismatch of gprs and voice service,
 * to detect possible data network registration problems.
 *
 * @hide
 */
]","\android\provider\Settings.java"
"ACTION_DISPLAY_SETTINGS","true","false","false","true","true","String","""android.settings.DISPLAY_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings to allow configuration of display.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"AIRPLANE_MODE_TOGGLEABLE_RADIOS","true","false","false","true","true","String","""airplane_mode_toggleable_radios""","[]","Optional[/**
 * A comma separated list of radios that should to be disabled when airplane mode
 * is on, but can be manually reenabled by the user.  For example, if RADIO_WIFI is
 * added to both AIRPLANE_MODE_RADIOS and AIRPLANE_MODE_TOGGLEABLE_RADIOS, then Wifi
 * will be turned off when entering airplane mode, but the user will be able to reenable
 * Wifi in the Settings app.
 *
 * {@hide}
 */
]","\android\provider\Settings.java"
"END_BUTTON_BEHAVIOR","true","false","false","true","true","String","""end_button_behavior""","[]","Optional[/**
 * What happens when the user presses the end call button if they're not
 * on a call.<br/>
 * <b>Values:</b><br/>
 * 0 - The end button does nothing.<br/>
 * 1 - The end button goes to the home screen.<br/>
 * 2 - The end button puts the device to sleep and locks the keyguard.<br/>
 * 3 - The end button goes to the home screen.  If the user is already on the
 * home screen, it puts the device to sleep.
 */
]","\android\provider\Settings.java"
"SEARCH_MAX_STAT_AGE_MILLIS","true","false","false","true","true","String","""search_max_stat_age_millis""","[]","Optional[/**
 * The maximum age of log data used for shortcuts in GlobalSearch.
 * @hide
 */
]","\android\provider\Settings.java"
"mContentProvider","false","false","true","false","false","IContentProvider","null","[]","Optional[// Initially null; set lazily and held forever.  Synchronized on 'this'.
]","\android\provider\Settings.java"
"DROPBOX_QUOTA_PERCENT","true","false","false","true","true","String","""dropbox_quota_percent""","[]","Optional[/**
 * Percent of free disk (excluding reserve) which {@link com.android.internal.os.IDropBoxManagerService} will use.
 * @hide
 */
]","\android\provider\Settings.java"
"PARENTAL_CONTROL_REDIRECT_URL","true","false","false","true","true","String","""parental_control_redirect_url""","[]","Optional[/**
 * No longer supported.
 */
]","\android\provider\Settings.java"
"INET_CONDITION_DEBOUNCE_DOWN_DELAY","true","false","false","true","true","String","""inet_condition_debounce_down_delay""","[]","Optional[/**
 * ms during which to consume extra events related to Inet connection condtion
 * after a transtion to partly-connected
 * @hide
 */
]","\android\provider\Settings.java"
"ACTION_DEVICE_INFO_SETTINGS","true","false","false","true","true","String","""android.settings.DEVICE_INFO_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show general device information settings (serial
 * number, software version, phone number, etc.).
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing
 */
]","\android\provider\Settings.java"
"WIFI_SLEEP_POLICY","true","false","false","true","true","String","""wifi_sleep_policy""","[]","Optional[/**
 * The policy for deciding when Wi-Fi should go to sleep (which will in
 * turn switch to using the mobile data as an Internet connection).
 * <p>
 * Set to one of {@link #WIFI_SLEEP_POLICY_DEFAULT},
 * {@link #WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED}, or
 * {@link #WIFI_SLEEP_POLICY_NEVER}.
 */
]","\android\provider\Settings.java"
"NOTIFICATION_LIGHT_PULSE","true","false","false","true","true","String","""notification_light_pulse""","[]","Optional[/**
 * Whether the notification LED should repeatedly flash when a notification is
 * pending. The value is boolean (1 or 0).
 * @hide
 */
]","\android\provider\Settings.java"
"SEARCH_MAX_RESULTS_PER_SOURCE","true","false","false","true","true","String","""search_max_results_per_source""","[]","Optional[/**
 * The number of suggestions GlobalSearch will ask each non-web search source for.
 * @hide
 */
]","\android\provider\Settings.java"
"MODE_RINGER","true","false","false","true","true","String","""mode_ringer""","[]","Optional[/**
 * Ringer mode. This is used internally, changing this value will not
 * change the ringer mode. See AudioManager.
 */
]","\android\provider\Settings.java"
"LOCATION_PROVIDERS_ALLOWED","true","false","false","true","true","String","""location_providers_allowed""","[]","Optional[/**
 * Comma-separated list of location providers that activities may access.
 */
]","\android\provider\Settings.java"
"sIntentProjection","false","false","true","true","true","String","{ INTENT }","[]","Optional.empty","\android\provider\Settings.java"
"WIFI_WATCHDOG_MAX_AP_CHECKS","true","false","false","true","true","String","""wifi_watchdog_max_ap_checks""","[]","Optional[/**
 * The maximum number of access points (per network) to attempt to test.
 * If this number is reached, the watchdog will no longer monitor the
 * initial connection state for the network. This is a safeguard for
 * networks containing multiple APs whose DNS does not respond to pings.
 */
]","\android\provider\Settings.java"
"BLUETOOTH_DISCOVERABILITY_TIMEOUT","true","false","false","true","true","String","""bluetooth_discoverability_timeout""","[]","Optional[/**
 * Bluetooth discoverability timeout.  If this value is nonzero, then
 * Bluetooth becomes discoverable for a certain number of seconds,
 * after which is becomes simply connectable.  The value is in seconds.
 */
]","\android\provider\Settings.java"
"DISK_FREE_CHANGE_REPORTING_THRESHOLD","true","false","false","true","true","String","""disk_free_change_reporting_threshold""","[]","Optional[/**
 * Threshold for the amount of change in disk free space required to report the amount of
 * free space. Used to prevent spamming the logs when the disk free space isn't changing
 * frequently.
 * @hide
 */
]","\android\provider\Settings.java"
"DROPBOX_MAX_FILES","true","false","false","true","true","String","""dropbox_max_files""","[]","Optional[/**
 * Maximum number of entry files which {@link com.android.internal.os.IDropBoxManagerService} will keep around.
 * @hide
 */
]","\android\provider\Settings.java"
"ACTION_ACCESSIBILITY_SETTINGS","true","false","false","true","true","String","""android.settings.ACCESSIBILITY_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings for accessibility modules.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"WIFI_AP_PASSWD","true","false","false","true","true","String","""wifi_ap_passwd""","[]","Optional[/**
 * AP passphrase
 *
 * @hide
 */
]","\android\provider\Settings.java"
"BATTERY_DISCHARGE_DURATION_THRESHOLD","true","false","false","true","true","String","""battery_discharge_duration_threshold""","[]","Optional[/**
 * Threshold values for the duration and level of a discharge cycle, under
 * which we log discharge cycle info.
 * @hide
 */
]","\android\provider\Settings.java"
"PDP_WATCHDOG_PING_DEADLINE","true","false","false","true","true","String","""pdp_watchdog_ping_deadline""","[]","Optional[/**
 * The ""-w deadline"" parameter for the ping, ie, the max time in
 * seconds to spend pinging.
 * @hide
 */
]","\android\provider\Settings.java"
"ACTION_WIFI_IP_SETTINGS","true","false","false","true","true","String","""android.settings.WIFI_IP_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings to allow configuration of a static IP
 * address for Wi-Fi.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you safeguard
 * against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"MEMCHECK_PHONE_SOFT_THRESHOLD","true","false","false","true","true","String","""memcheck_phone_soft""","[]","Optional[/**
 * How many bytes the phone process must be below to avoid scheduling
 * a soft restart.  This restart will happen when it is next determined
 * to be a good time.
 * @hide
 */
]","\android\provider\Settings.java"
"BLUETOOTH_ON","true","false","false","true","true","String","""bluetooth_on""","[]","Optional[/**
 * Whether bluetooth is enabled/disabled
 * 0=disabled. 1=enabled.
 */
]","\android\provider\Settings.java"
"CDMA_CELL_BROADCAST_SMS","true","false","false","true","true","String","""cdma_cell_broadcast_sms""","[]","Optional[/**
 * CDMA Cell Broadcast SMS
 * 0 = CDMA Cell Broadcast SMS disabled
 * 1 = CDMA Cell Broadcast SMS enabled
 * @hide
 */
]","\android\provider\Settings.java"
"USE_GOOGLE_MAIL","true","false","false","true","true","String","""use_google_mail""","[]","Optional[/**
 * If this setting is set (to anything), then all references
 * to Gmail on the device must change to Google Mail.
 */
]","\android\provider\Settings.java"
"DEVICE_PROVISIONED","true","false","false","true","true","String","""device_provisioned""","[]","Optional[/**
 * Whether the device has been provisioned (0 = false, 1 = true)
 */
]","\android\provider\Settings.java"
"SEND_ACTION_APP_ERROR","true","false","false","true","true","String","""send_action_app_error""","[]","Optional[/**
 * Flag for allowing ActivityManagerService to send ACTION_APP_ERROR intents
 * on application crashes and ANRs. If this is disabled, the crash/ANR dialog
 * will never display the ""Report"" button.
 * Type: int ( 0 = disallow, 1 = allow )
 * @hide
 */
]","\android\provider\Settings.java"
"DROPBOX_AGE_SECONDS","true","false","false","true","true","String","""dropbox_age_seconds""","[]","Optional[/**
 * Maximum age of entries kept by {@link com.android.internal.os.IDropBoxManagerService}.
 * @hide
 */
]","\android\provider\Settings.java"
"SEARCH_MAX_RESULTS_TO_DISPLAY","true","false","false","true","true","String","""search_max_results_to_display""","[]","Optional[/**
 * The maximum number of suggestions returned by GlobalSearch.
 * @hide
 */
]","\android\provider\Settings.java"
"ACTION_DATE_SETTINGS","true","false","false","true","true","String","""android.settings.DATE_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings to allow configuration of date and time.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"USB_MASS_STORAGE_ENABLED","true","false","false","true","true","String","""usb_mass_storage_enabled""","[]","Optional[/**
 * USB Mass Storage Enabled
 */
]","\android\provider\Settings.java"
"THROTTLE_POLLING_SEC","true","false","false","true","true","String","""throttle_polling_sec""","[]","Optional[/**
 * The bandwidth throttle polling freqency in seconds
 * @hide
 */
]","\android\provider\Settings.java"
"WIFI_WATCHDOG_ON","true","false","false","true","true","String","""wifi_watchdog_on""","[]","Optional[/**
 * Whether the Wi-Fi watchdog is enabled.
 */
]","\android\provider\Settings.java"
"MODE_RINGER_STREAMS_AFFECTED","true","false","false","true","true","String","""mode_ringer_streams_affected""","[]","Optional[/**
 * Determines which streams are affected by ringer mode changes. The
 * stream type's bit should be set to 1 if it should be muted when going
 * into an inaudible ringer mode.
 */
]","\android\provider\Settings.java"
"THROTTLE_HELP_URI","true","false","false","true","true","String","""throttle_help_uri""","[]","Optional[/**
 * Help URI for data throttling policy
 * @hide
 */
]","\android\provider\Settings.java"
"REBOOT_WINDOW","true","false","false","true","true","String","""reboot_window""","[]","Optional[/**
 * The window of time (in seconds) after each REBOOT_INTERVAL in which
 * a reboot can be executed.  If 0, a reboot will always be executed at
 * exactly the given time.  Otherwise, it will only be executed if
 * the device is idle within the window.
 * @hide
 */
]","\android\provider\Settings.java"
"TTS_DEFAULT_LANG","true","false","false","true","true","String","""tts_default_lang""","[]","Optional[/**
 * Default text-to-speech language.
 */
]","\android\provider\Settings.java"
"WIFI_STATIC_GATEWAY","true","false","false","true","true","String","""wifi_static_gateway""","[]","Optional[/**
 * If using static IP, the gateway's IP address.
 * <p>
 * Example: ""192.168.1.1""
 */
]","\android\provider\Settings.java"
"SYS_PROP_SETTING_VERSION","true","false","false","true","true","String","""sys.settings_secure_version""","[]","Optional.empty","\android\provider\Settings.java"
"MOVED_TO_SECURE","false","false","true","true","true","HashSet<String>","null","[]","Optional.empty","\android\provider\Settings.java"
"HTTP_PROXY","true","false","false","true","true","String","""http_proxy""","[]","Optional[/**
 * Host name and port for a user-selected proxy.
 */
]","\android\provider\Settings.java"
"SEARCH_SHORTCUT_REFRESH_CORE_POOL_SIZE","true","false","false","true","true","String","""search_shortcut_refresh_core_pool_size""","[]","Optional[/**
 * The size of the core thread pool for shortcut refreshing in GlobalSearch.
 * @hide
 */
]","\android\provider\Settings.java"
"TTS_ENABLED_PLUGINS","true","false","false","true","true","String","""tts_enabled_plugins""","[]","Optional[/**
 * Space delimited list of plugin packages that are enabled.
 */
]","\android\provider\Settings.java"
"SCREEN_OFF_TIMEOUT","true","false","false","true","true","String","""screen_off_timeout""","[]","Optional[/**
 * The timeout before the screen turns off.
 */
]","\android\provider\Settings.java"
"INET_CONDITION_DEBOUNCE_UP_DELAY","true","false","false","true","true","String","""inet_condition_debounce_up_delay""","[]","Optional[/**
 * ms during which to consume extra events related to Inet connection condition
 * after a transtion to fully-connected
 * @hide
 */
]","\android\provider\Settings.java"
"INCALL_POWER_BUTTON_BEHAVIOR_SCREEN_OFF","true","false","false","true","true","int","0x1","[]","Optional[/**
 * INCALL_POWER_BUTTON_BEHAVIOR value for ""turn off screen"".
 * @hide
 */
]","\android\provider\Settings.java"
"NITZ_UPDATE_DIFF","true","false","false","true","true","String","""nitz_update_diff""","[]","Optional[/**
 * If the NITZ_UPDATE_DIFF time is exceeded then an automatic adjustment
 * to SystemClock will be allowed even if NITZ_UPDATE_SPACING has not been
 * exceeded.
 * @hide
 */
]","\android\provider\Settings.java"
"MEMCHECK_LOG_REALTIME_INTERVAL","true","false","false","true","true","String","""memcheck_log_realtime_interval""","[]","Optional[/**
 * Max frequency (in seconds) to log memory check stats, in realtime
 * seconds.  This allows for throttling of logs when the device is
 * running for large amounts of time.
 * @hide
 */
]","\android\provider\Settings.java"
"LOCK_PATTERN_VISIBLE","true","false","false","true","true","String","""lock_pattern_visible_pattern""","[]","Optional[/**
 * Whether lock pattern is visible as user enters (0 = false, 1 = true)
 */
]","\android\provider\Settings.java"
"TIME_12_24","true","false","false","true","true","String","""time_12_24""","[]","Optional[/**
 * Display times as 12 or 24 hours
 * 12
 * 24
 */
]","\android\provider\Settings.java"
"CALL_METHOD_GET_SYSTEM","true","false","false","true","true","String","""GET_system""","[]","Optional[/**
 * @hide - Private call() method on SettingsProvider to read from 'system' table.
 */
]","\android\provider\Settings.java"
"INCALL_POWER_BUTTON_BEHAVIOR","true","false","false","true","true","String","""incall_power_button_behavior""","[]","Optional[/**
 * What happens when the user presses the Power button while in-call
 * and the screen is on.<br/>
 * <b>Values:</b><br/>
 * 1 - The Power button turns off the screen and locks the device. (Default behavior)<br/>
 * 2 - The Power button hangs up the current call.<br/>
 *
 * @hide
 */
]","\android\provider\Settings.java"
"ACTION_SECURITY_SETTINGS","true","false","false","true","true","String","""android.settings.SECURITY_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings to allow configuration of security and
 * location privacy.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"ACTION_MANAGE_APPLICATIONS_SETTINGS","true","false","false","true","true","String","""android.settings.MANAGE_APPLICATIONS_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings to manage installed applications.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"NOTIFICATION_SOUND","true","false","false","true","true","String","""notification_sound""","[]","Optional[/**
 * Persistent store for the system-wide default notification sound.
 *
 * @see #RINGTONE
 * @see #DEFAULT_NOTIFICATION_URI
 */
]","\android\provider\Settings.java"
"mCallCommand","false","false","true","false","true","String","null","[]","Optional[// for the fast path of retrieving settings.
]","\android\provider\Settings.java"
"END_BUTTON_BEHAVIOR_HOME","true","false","false","true","true","int","0x1","[]","Optional[/**
 * END_BUTTON_BEHAVIOR value for ""go home"".
 * @hide
 */
]","\android\provider\Settings.java"
"WIFI_WATCHDOG_AP_COUNT","true","false","false","true","true","String","""wifi_watchdog_ap_count""","[]","Optional[/**
 * The number of access points required for a network in order for the
 * watchdog to monitor it.
 */
]","\android\provider\Settings.java"
"MEMCHECK_SYSTEM_ENABLED","true","false","false","true","true","String","""memcheck_system_enabled""","[]","Optional[/**
 * Boolean indicating whether rebooting due to system memory checks
 * is enabled.
 * @hide
 */
]","\android\provider\Settings.java"
"DROPBOX_RESERVE_PERCENT","true","false","false","true","true","String","""dropbox_reserve_percent""","[]","Optional[/**
 * Percent of total disk which {@link com.android.internal.os.IDropBoxManagerService} will never dip into.
 * @hide
 */
]","\android\provider\Settings.java"
"SHOW_GTALK_SERVICE_STATUS","true","false","false","true","true","String","""SHOW_GTALK_SERVICE_STATUS""","[]","Optional.empty","\android\provider\Settings.java"
"DROPBOX_TAG_PREFIX","true","false","false","true","true","String","""dropbox:""","[]","Optional[/**
 * Prefix for per-tag dropbox disable/enable settings.
 * @hide
 */
]","\android\provider\Settings.java"
"RADIO_WIFI","true","false","false","true","true","String","""wifi""","[]","Optional[/**
 * Constant for use in AIRPLANE_MODE_RADIOS to specify Wi-Fi radio.
 */
]","\android\provider\Settings.java"
"VOLUME_SYSTEM","true","false","false","true","true","String","""volume_system""","[]","Optional[/**
 * System/notifications volume. This is used internally, changing this
 * value will not change the volume. See AudioManager.
 */
]","\android\provider\Settings.java"
"LOCAL_LOGV","false","false","true","true","true","boolean","Config.LOGV || false","[]","Optional.empty","\android\provider\Settings.java"
"STAY_ON_WHILE_PLUGGED_IN","true","false","false","true","true","String","""stay_on_while_plugged_in""","[]","Optional[/**
 * Whether we keep the device on while the device is plugged in.
 * Supported values are:
 * <ul>
 * <li>{@code 0} to never stay on while plugged in</li>
 * <li>{@link BatteryManager#BATTERY_PLUGGED_AC} to stay on for AC charger</li>
 * <li>{@link BatteryManager#BATTERY_PLUGGED_USB} to stay on for USB charger</li>
 * </ul>
 * These values can be OR-ed together.
 */
]","\android\provider\Settings.java"
"WIFI_IDLE_MS","true","false","false","true","true","String","""wifi_idle_ms""","[]","Optional[/**
 * The interval in milliseconds after which Wi-Fi is considered idle.
 * When idle, it is possible for the device to be switched from Wi-Fi to
 * the mobile data network.
 * @hide
 */
]","\android\provider\Settings.java"
"WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS","true","false","false","true","true","String","""wifi_mobile_data_transition_wakelock_timeout_ms""","[]","Optional[/**
 * Maximum amount of time in milliseconds to hold a wakelock while waiting for mobile
 * data connectivity to be established after a disconnect from Wi-Fi.
 */
]","\android\provider\Settings.java"
"SHORTCUT","true","false","false","true","true","String","""shortcut""","[]","Optional[/**
 * Optional shortcut character associated with this bookmark.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Settings.java"
"ACTION_APPLICATION_DETAILS_SETTINGS","true","false","false","true","true","String","""android.settings.APPLICATION_DETAILS_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show screen of details about a particular application.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * Input: The Intent's data URI specifies the application package name
 * to be shown, with the ""package"" scheme.  That is ""package:com.my.app"".
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"sNameValueCache","false","false","true","true","false","NameValueCache","null","[]","Optional[// Populated lazily, guarded by class object:
]","\android\provider\Settings.java"
"RADIO_BLUETOOTH","true","false","false","true","true","String","""bluetooth""","[]","Optional[/**
 * Constant for use in AIRPLANE_MODE_RADIOS to specify Bluetooth radio.
 */
]","\android\provider\Settings.java"
"WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED","true","false","false","true","true","int","1","[]","Optional[/**
 * Value for {@link #WIFI_SLEEP_POLICY} to use the default policy when
 * the device is on battery, and never go to sleep when the device is
 * plugged in.
 */
]","\android\provider\Settings.java"
"BATTERY_DISCHARGE_THRESHOLD","true","false","false","true","true","String","""battery_discharge_threshold""","[]","Optional[/**
 * @hide
 */
]","\android\provider\Settings.java"
"PARENTAL_CONTROL_ENABLED","true","false","false","true","true","String","""parental_control_enabled""","[]","Optional[/**
 * No longer supported.
 */
]","\android\provider\Settings.java"
"ACTION_INTERNAL_STORAGE_SETTINGS","true","false","false","true","true","String","""android.settings.INTERNAL_STORAGE_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings for internal storage.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"PREFERRED_NETWORK_MODE","true","false","false","true","true","String","""preferred_network_mode""","[]","Optional[/**
 * The preferred network mode   7 = Global
 * 6 = EvDo only
 * 5 = CDMA w/o EvDo
 * 4 = CDMA / EvDo auto
 * 3 = GSM / WCDMA auto
 * 2 = WCDMA only
 * 1 = GSM only
 * 0 = GSM / WCDMA preferred
 * @hide
 */
]","\android\provider\Settings.java"
"DIM_SCREEN","true","false","false","true","true","String","""dim_screen""","[]","Optional[/**
 * Whether or not to dim the screen. 0=no  1=yes
 */
]","\android\provider\Settings.java"
"SCREEN_BRIGHTNESS_MODE_AUTOMATIC","true","false","false","true","true","int","1","[]","Optional[/**
 * SCREEN_BRIGHTNESS_MODE value for manual mode.
 */
]","\android\provider\Settings.java"
"THROTTLE_THRESHOLD_BYTES","true","false","false","true","true","String","""throttle_threshold_bytes""","[]","Optional[/**
 * The bandwidth throttle threshold (long)
 * @hide
 */
]","\android\provider\Settings.java"
"ACTION_INPUT_METHOD_SETTINGS","true","false","false","true","true","String","""android.settings.INPUT_METHOD_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings to configure input methods, in particular
 * allowing the user to enable input methods.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"BACKGROUND_DATA","true","false","false","true","true","String","""background_data""","[]","Optional[/**
 * Whether background data usage is allowed by the user. See
 * ConnectivityManager for more info.
 */
]","\android\provider\Settings.java"
"SYS_STORAGE_FULL_THRESHOLD_BYTES","true","false","false","true","true","String","""sys_storage_full_threshold_bytes""","[]","Optional[/**
 * Minimum bytes of free storage on the device before the data
 * partition is considered full. By default, 1 MB is reserved
 * to avoid system-wide SQLite disk full exceptions.
 * @hide
 */
]","\android\provider\Settings.java"
"ACTION_LOCATION_SOURCE_SETTINGS","true","false","false","true","true","String","""android.settings.LOCATION_SOURCE_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings to allow configuration of current location
 * sources.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"SETTINGS_CLASSNAME","true","false","false","true","true","String","""settings_classname""","[]","Optional[// TODO: 881807
]","\android\provider\Settings.java"
"ACTION_LOCALE_SETTINGS","true","false","false","true","true","String","""android.settings.LOCALE_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings to allow configuration of locale.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"ACTION_AIRPLANE_MODE_SETTINGS","true","false","false","true","true","String","""android.settings.AIRPLANE_MODE_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings to allow entering/exiting airplane mode.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"SEARCH_SOURCE_TIMEOUT_MILLIS","true","false","false","true","true","String","""search_source_timeout_millis""","[]","Optional[/**
 * The number of milliseconds before GlobalSearch aborts search suggesiton queries.
 * @hide
 */
]","\android\provider\Settings.java"
"JID_RESOURCE_PREFIX","false","false","true","true","true","String","""android""","[]","Optional.empty","\android\provider\Settings.java"
"WIFI_STATIC_NETMASK","true","false","false","true","true","String","""wifi_static_netmask""","[]","Optional[/**
 * If using static IP, the net mask.
 * <p>
 * Example: ""255.255.255.0""
 */
]","\android\provider\Settings.java"
"TEXT_AUTO_CAPS","true","false","false","true","true","String","""auto_caps""","[]","Optional[/**
 * Setting to enable Auto Caps in text editors. 1 = On, 0 = Off
 */
]","\android\provider\Settings.java"
"WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON","true","false","false","true","true","String","""wifi_networks_available_notification_on""","[]","Optional[/**
 * Whether to notify the user of open networks.
 * <p>
 * If not connected and the scan results have an open network, we will
 * put this notification up. If we attempt to connect to a network or
 * the open network(s) disappear, we remove the notification. When we
 * show the notification, we will not show it again for
 * {@link android.provider.Settings.Secure#WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY} time.
 */
]","\android\provider\Settings.java"
"PDP_WATCHDOG_MAX_PDP_RESET_FAIL_COUNT","true","false","false","true","true","String","""pdp_watchdog_max_pdp_reset_fail_count""","[]","Optional[/**
 * The number of failed PDP reset attempts before moving to something more
 * drastic: re-registering to the network.
 * @hide
 */
]","\android\provider\Settings.java"
"SELECT_VALUE","false","false","true","true","true","String","new String[] { Settings.NameValueTable.VALUE }","[]","Optional.empty","\android\provider\Settings.java"
"PDP_WATCHDOG_ERROR_POLL_INTERVAL_MS","true","false","false","true","true","String","""pdp_watchdog_error_poll_interval_ms""","[]","Optional[/**
 * The interval in milliseconds at which to check packet counts on the
 * mobile data interface after {@link #PDP_WATCHDOG_TRIGGER_PACKET_COUNT}
 * outgoing packets has been reached without incoming packets.
 * @hide
 */
]","\android\provider\Settings.java"
"ACTION_WIFI_SETTINGS","true","false","false","true","true","String","""android.settings.WIFI_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings to allow configuration of Wi-Fi.
 *
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"ACTION_USER_DICTIONARY_SETTINGS","true","false","false","true","true","String","""android.settings.USER_DICTIONARY_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings to manage the user input dictionary.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"SEARCH_MIN_CLICKS_FOR_SOURCE_RANKING","true","false","false","true","true","String","""search_min_clicks_for_source_ranking""","[]","Optional[/**
 * The minimum number of clicks needed to rank a source in GlobalSearch.
 * @hide
 */
]","\android\provider\Settings.java"
"WIFI_STATIC_DNS1","true","false","false","true","true","String","""wifi_static_dns1""","[]","Optional[/**
 * If using static IP, the primary DNS's IP address.
 * <p>
 * Example: ""192.168.1.1""
 */
]","\android\provider\Settings.java"
"TRANSITION_ANIMATION_SCALE","true","false","false","true","true","String","""transition_animation_scale""","[]","Optional[/**
 * Scaling factor for activity transition animations. Setting to 0 will disable window
 * animations.
 */
]","\android\provider\Settings.java"
"VIBRATE_IN_SILENT","true","false","false","true","true","String","""vibrate_in_silent""","[]","Optional[/**
 * Whether silent mode should allow vibration feedback. This is used
 * internally in AudioService and the Sound settings activity to
 * coordinate decoupling of vibrate and silent modes. This setting
 * will likely be removed in a future release with support for
 * audio/vibe feedback profiles.
 *
 * @hide
 */
]","\android\provider\Settings.java"
"VOICE_RECOGNITION_SERVICE","true","false","false","true","true","String","""voice_recognition_service""","[]","Optional[/**
 * The {@link ComponentName} string of the service to be used as the voice recognition
 * service.
 *
 * @hide
 */
]","\android\provider\Settings.java"
"NAME","true","false","false","true","true","String","""name""","[]","Optional.empty","\android\provider\Settings.java"
"SOUND_EFFECTS_ENABLED","true","false","false","true","true","String","""sound_effects_enabled""","[]","Optional[/**
 * Whether the sounds effects (key clicks, lid open ...) are enabled. The value is
 * boolean (1 or 0).
 */
]","\android\provider\Settings.java"
"VOLUME_MUSIC","true","false","false","true","true","String","""volume_music""","[]","Optional[/**
 * Music/media/gaming volume. This is used internally, changing this
 * value will not change the volume. See AudioManager.
 */
]","\android\provider\Settings.java"
"SEARCH_PROMOTED_SOURCE_DEADLINE_MILLIS","true","false","false","true","true","String","""search_promoted_source_deadline_millis""","[]","Optional[/**
 * The number of milliseconds that GlobalSearch will wait for suggestions from
 * promoted sources before continuing with all other sources.
 * @hide
 */
]","\android\provider\Settings.java"
"WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED","true","false","false","true","true","String","""wifi_watchdog_background_check_enabled""","[]","Optional[/**
 * Whether the Wi-Fi watchdog is enabled for background checking even
 * after it thinks the user has connected to a good access point.
 */
]","\android\provider\Settings.java"
"SHOW_WEB_SUGGESTIONS","true","false","false","true","true","String","""show_web_suggestions""","[]","Optional[/**
 * Whether live web suggestions while the user types into search dialogs are
 * enabled. Browsers and other search UIs should respect this, as it allows
 * a user to avoid sending partial queries to a search engine, if it poses
 * any privacy concern. The value is boolean (1 or 0).
 */
]","\android\provider\Settings.java"
"REBOOT_START_TIME","true","false","false","true","true","String","""reboot_start_time""","[]","Optional[/**
 * First time during the day it is okay to force a reboot of the
 * device (if REBOOT_INTERVAL is set).  This number is
 * in seconds since midnight.
 * @hide
 */
]","\android\provider\Settings.java"
"WIFI_STATIC_DNS2","true","false","false","true","true","String","""wifi_static_dns2""","[]","Optional[/**
 * If using static IP, the secondary DNS's IP address.
 * <p>
 * Example: ""192.168.1.2""
 */
]","\android\provider\Settings.java"
"DOWNLOAD_MAX_BYTES_OVER_MOBILE","true","false","false","true","true","String","""download_manager_max_bytes_over_mobile""","[]","Optional[/**
 * The maximum size, in bytes, of a download that the download manager will transfer over
 * a non-wifi connection.
 * @hide
 */
]","\android\provider\Settings.java"
"SHORT_KEYLIGHT_DELAY_MS","true","false","false","true","true","String","""short_keylight_delay_ms""","[]","Optional[/**
 * Screen timeout in milliseconds corresponding to the
 * PowerManager's POKE_LOCK_SHORT_TIMEOUT flag (i.e. the fastest
 * possible screen timeout behavior.)
 * @hide
 */
]","\android\provider\Settings.java"
"SEARCH_MIN_IMPRESSIONS_FOR_SOURCE_RANKING","true","false","false","true","true","String","""search_min_impressions_for_source_ranking""","[]","Optional[/**
 * The minimum number of impressions needed to rank a source in GlobalSearch.
 * @hide
 */
]","\android\provider\Settings.java"
"UI_NIGHT_MODE","true","false","false","true","true","String","""ui_night_mode""","[]","Optional[/**
 * The current night mode that has been selected by the user.  Owned
 * and controlled by UiModeManagerService.  Constants are as per
 * UiModeManager.
 * @hide
 */
]","\android\provider\Settings.java"
"EMERGENCY_TONE","true","false","false","true","true","String","""emergency_tone""","[]","Optional[/**
 * CDMA only settings
 * Emergency Tone  0 = Off
 * 1 = Alert
 * 2 = Vibrate
 * @hide
 */
]","\android\provider\Settings.java"
"WIFI_MAX_DHCP_RETRY_COUNT","true","false","false","true","true","String","""wifi_max_dhcp_retry_count""","[]","Optional[/**
 * The maximum number of times we will retry a connection to an access
 * point for which we have failed in acquiring an IP address from DHCP.
 * A value of N means that we will make N+1 connection attempts in all.
 */
]","\android\provider\Settings.java"
"PDP_WATCHDOG_ERROR_POLL_COUNT","true","false","false","true","true","String","""pdp_watchdog_error_poll_count""","[]","Optional[/**
 * The number of polls to perform (at {@link #PDP_WATCHDOG_ERROR_POLL_INTERVAL_MS})
 * after hitting {@link #PDP_WATCHDOG_TRIGGER_PACKET_COUNT} before
 * attempting data connection recovery.
 * @hide
 */
]","\android\provider\Settings.java"
"ACCESSIBILITY_ENABLED","true","false","false","true","true","String","""accessibility_enabled""","[]","Optional[/**
 * If accessibility is enabled.
 */
]","\android\provider\Settings.java"
"SCREEN_BRIGHTNESS_MODE","true","false","false","true","true","String","""screen_brightness_mode""","[]","Optional[/**
 * Control whether to enable automatic brightness mode.
 */
]","\android\provider\Settings.java"
"CDMA_ROAMING_MODE","true","false","false","true","true","String","""roaming_settings""","[]","Optional[/**
 * The CDMA roaming mode 0 = Home Networks, CDMA default
 * 1 = Roaming on Affiliated networks
 * 2 = Roaming on any networks
 * @hide
 */
]","\android\provider\Settings.java"
"MEMCHECK_MIN_SCREEN_OFF","true","false","false","true","true","String","""memcheck_min_screen_off""","[]","Optional[/**
 * How long the screen must have been off in order to kill processes
 * or reboot.  This number is in seconds.  A value of -1 means to
 * entirely disregard whether the screen is on.
 * @hide
 */
]","\android\provider\Settings.java"
"mValuesVersion","false","false","true","false","false","long","0","[]","Optional.empty","\android\provider\Settings.java"
"HAPTIC_FEEDBACK_ENABLED","true","false","false","true","true","String","""haptic_feedback_enabled""","[]","Optional[/**
 * Whether the haptic feedback (long presses, ...) are enabled. The value is
 * boolean (1 or 0).
 */
]","\android\provider\Settings.java"
"THROTTLE_RESET_DAY","true","false","false","true","true","String","""throttle_reset_day""","[]","Optional[/**
 * The bandwidth throttle reset calendar day (1-28)
 * @hide
 */
]","\android\provider\Settings.java"
"POINTER_LOCATION","true","false","false","true","true","String","""pointer_location""","[]","Optional[/**
 * Show pointer location on screen?
 * 0 = no
 * 1 = yes
 * @hide
 */
]","\android\provider\Settings.java"
"WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE","true","false","false","true","true","String","""wifi_watchdog_acceptable_packet_loss_percentage""","[]","Optional[/**
 * The acceptable packet loss percentage (range 0 - 100) before trying
 * another AP on the same network.
 */
]","\android\provider\Settings.java"
"NEXT_ALARM_FORMATTED","true","false","false","true","true","String","""next_alarm_formatted""","[]","Optional[/**
 * A formatted string of the next alarm that is set, or the empty string
 * if there is no alarm set.
 */
]","\android\provider\Settings.java"
"TTS_USE_DEFAULTS","true","false","false","true","true","String","""tts_use_defaults""","[]","Optional[/**
 * Setting to always use the default text-to-speech settings regardless
 * of the application settings.
 * 1 = override application settings,
 * 0 = use application settings (if specified).
 */
]","\android\provider\Settings.java"
"MEMCHECK_MIN_ALARM","true","false","false","true","true","String","""memcheck_min_alarm""","[]","Optional[/**
 * How much time there must be until the next alarm in order to kill processes
 * or reboot.  This number is in seconds.  Note: this value must be
 * smaller than {@link #MEMCHECK_RECHECK_INTERVAL} or else it will
 * always see an alarm scheduled within its time.
 * @hide
 */
]","\android\provider\Settings.java"
"TETHER_DUN_APN","true","false","false","true","true","String","""tether_dun_apn""","[]","Optional[/**
 * Used to hold a gservices-provisioned apn value for DUN.  If set, or the
 * corresponding build config values are set it will override the APN DB
 * values.
 * Consists of a comma seperated list of strings:
 * ""name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type""
 * note that empty fields can be ommitted: ""name,apn,,,,,,,,,310,260,,DUN""
 * @hide
 */
]","\android\provider\Settings.java"
"WIFI_WATCHDOG_WATCH_LIST","true","false","false","true","true","String","""wifi_watchdog_watch_list""","[]","Optional[/**
 * A comma-separated list of SSIDs for which the Wi-Fi watchdog should be enabled.
 */
]","\android\provider\Settings.java"
"WIFI_WATCHDOG_PING_DELAY_MS","true","false","false","true","true","String","""wifi_watchdog_ping_delay_ms""","[]","Optional[/**
 * The delay between pings.
 */
]","\android\provider\Settings.java"
"ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS","true","false","false","true","true","String","""android.settings.MANAGE_ALL_APPLICATIONS_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings to manage all applications.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"DEFAULT_INPUT_METHOD","true","false","false","true","true","String","""default_input_method""","[]","Optional[/**
 * Setting to record the input method used by default, holding the ID
 * of the desired method.
 */
]","\android\provider\Settings.java"
"ALLOW_MOCK_LOCATION","true","false","false","true","true","String","""mock_location""","[]","Optional[/**
 * Setting to allow mock locations and location provider status to be injected into the
 * LocationManager service for testing purposes during application development.  These
 * locations and status values  override actual location and status information generated
 * by network, gps, or other location providers.
 */
]","\android\provider\Settings.java"
"ACTION_APN_SETTINGS","true","false","false","true","true","String","""android.settings.APN_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings to allow configuration of APNs.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: nothing.
 */
]","\android\provider\Settings.java"
"ACTION_SETTINGS","true","false","false","true","true","String","""android.settings.SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show system settings.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: nothing.
 */
]","\android\provider\Settings.java"
"TTY_MODE","true","false","false","true","true","String","""tty_mode""","[]","Optional[/**
 * CDMA only settings
 * TTY Mode
 * 0 = OFF
 * 1 = FULL
 * 2 = VCO
 * 3 = HCO
 * @hide
 */
]","\android\provider\Settings.java"
"WIFI_SAVED_STATE","true","false","false","true","true","String","""wifi_saved_state""","[]","Optional[/**
 * Used to save the Wifi_ON state prior to tethering.
 * This state will be checked to restore Wifi after
 * the user turns off tethering.
 *
 * @hide
 */
]","\android\provider\Settings.java"
"MOBILE_DATA","true","false","false","true","true","String","""mobile_data""","[]","Optional[/**
 * Whether mobile data connections are allowed by the user.  See
 * ConnectivityManager for more info.
 * @hide
 */
]","\android\provider\Settings.java"
"ACTION_BLUETOOTH_SETTINGS","true","false","false","true","true","String","""android.settings.BLUETOOTH_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings to allow configuration of Bluetooth.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY","true","false","false","true","true","String","""wifi_networks_available_repeat_delay""","[]","Optional[/**
 * Delay (in seconds) before repeating the Wi-Fi networks available notification.
 * Connecting to a network will reset the timer.
 */
]","\android\provider\Settings.java"
"NITZ_UPDATE_SPACING","true","false","false","true","true","String","""nitz_update_spacing""","[]","Optional[/**
 * The length of time in milli-seconds that automatic small adjustments to
 * SystemClock are ignored if NITZ_UPDATE_DIFF is not exceeded.
 * @hide
 */
]","\android\provider\Settings.java"
"DEFAULT_RINGTONE_URI","true","false","false","true","true","Uri","getUriFor(RINGTONE)","[]","Optional[/**
 * A {@link Uri} that will point to the current default ringtone at any
 * given time.
 * <p>
 * If the current default ringtone is in the DRM provider and the caller
 * does not have permission, the exception will be a
 * FileNotFoundException.
 */
]","\android\provider\Settings.java"
"WINDOW_ANIMATION_SCALE","true","false","false","true","true","String","""window_animation_scale""","[]","Optional[/**
 * Scaling factor for normal window animations. Setting to 0 will disable window
 * animations.
 */
]","\android\provider\Settings.java"
"TITLE","true","false","false","true","true","String","""title""","[]","Optional[/**
 * Descriptive name of the bookmark that can be displayed to the user.
 * If this is empty, the title should be resolved at display time (use
 * {@link #getTitle(Context, Cursor)} any time you want to display the
 * title of a bookmark.)
 * <P>
 * Type: TEXT
 * </P>
 */
]","\android\provider\Settings.java"
"ACTION_QUICK_LAUNCH_SETTINGS","true","false","false","true","true","String","""android.settings.QUICK_LAUNCH_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings to allow configuration of quick launch shortcuts.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"UNLOCK_SOUND","true","false","false","true","true","String","""unlock_sound""","[]","Optional[/**
 * URI for the ""device unlocked"" (keyguard dismissed) sound.
 * @hide
 */
]","\android\provider\Settings.java"
"WIFI_WATCHDOG_PING_COUNT","true","false","false","true","true","String","""wifi_watchdog_ping_count""","[]","Optional[/**
 * The number of pings to test if an access point is a good connection.
 */
]","\android\provider\Settings.java"
"HEARING_AID","true","false","false","true","true","String","""hearing_aid""","[]","Optional[/**
 * Whether the hearing aid is enabled. The value is
 * boolean (1 or 0).
 * @hide
 */
]","\android\provider\Settings.java"
"DESK_DOCK_SOUND","true","false","false","true","true","String","""desk_dock_sound""","[]","Optional[/**
 * URI for the desk dock ""in"" event sound.
 * @hide
 */
]","\android\provider\Settings.java"
"SEARCH_THREAD_KEEPALIVE_SECONDS","true","false","false","true","true","String","""search_thread_keepalive_seconds""","[]","Optional[/**
 * The maximun time that excess threads in the GlobalSeach thread pools will
 * wait before terminating.
 * @hide
 */
]","\android\provider\Settings.java"
"POWER_SOUNDS_ENABLED","true","false","false","true","true","String","""power_sounds_enabled""","[]","Optional[/**
 * Whether to play a sound for low-battery alerts.
 * @hide
 */
]","\android\provider\Settings.java"
"SEARCH_SHORTCUT_REFRESH_MAX_POOL_SIZE","true","false","false","true","true","String","""search_shortcut_refresh_max_pool_size""","[]","Optional[/**
 * The maximum size of the thread pool for shortcut refreshing in GlobalSearch.
 * @hide
 */
]","\android\provider\Settings.java"
"ANDROID_ID","true","false","false","true","true","String","""android_id""","[]","Optional[/**
 * A 64-bit number (as a hex string) that is randomly
 * generated on the device's first boot and should remain
 * constant for the lifetime of the device.  (The value may
 * change if a factory reset is performed on the device.)
 */
]","\android\provider\Settings.java"
"COMPATIBILITY_MODE","true","false","false","true","true","String","""compatibility_mode""","[]","Optional[/**
 * If 0, the compatibility mode is off for all applications.
 * If 1, older applications run under compatibility mode.
 * TODO: remove this settings before code freeze (bug/1907571)
 * @hide
 */
]","\android\provider\Settings.java"
"SYNC_MAX_RETRY_DELAY_IN_SECONDS","true","false","false","true","true","String","""sync_max_retry_delay_in_seconds""","[]","Optional[/**
 * The maximum reconnect delay for short network outages or when the network is suspended
 * due to phone use.
 * @hide
 */
]","\android\provider\Settings.java"
"DTMF_TONE_WHEN_DIALING","true","false","false","true","true","String","""dtmf_tone""","[]","Optional[/**
 * Whether the audible DTMF tones are played by the dialer when dialing. The value is
 * boolean (1 or 0).
 */
]","\android\provider\Settings.java"
"DTMF_TONE_TYPE_WHEN_DIALING","true","false","false","true","true","String","""dtmf_tone_type""","[]","Optional[/**
 * CDMA only settings
 * DTMF tone type played by the dialer when dialing.
 * 0 = Normal
 * 1 = Long
 * @hide
 */
]","\android\provider\Settings.java"
"WIFI_SLEEP_POLICY_DEFAULT","true","false","false","true","true","int","0","[]","Optional[/**
 * Value for {@link #WIFI_SLEEP_POLICY} to use the default Wi-Fi sleep
 * policy, which is to sleep shortly after the turning off
 * according to the {@link #STAY_ON_WHILE_PLUGGED_IN} setting.
 */
]","\android\provider\Settings.java"
"PDP_WATCHDOG_TRIGGER_PACKET_COUNT","true","false","false","true","true","String","""pdp_watchdog_trigger_packet_count""","[]","Optional[/**
 * The number of outgoing packets sent without seeing an incoming packet
 * that triggers a countdown (of {@link #PDP_WATCHDOG_ERROR_POLL_COUNT}
 * device is logged to the event log
 * @hide
 */
]","\android\provider\Settings.java"
"ID","true","false","false","true","true","String","""_id""","[]","Optional[/**
 * The row ID.
 * <p>Type: INTEGER</p>
 */
]","\android\provider\Settings.java"
"MOUNT_UMS_NOTIFY_ENABLED","true","false","false","true","true","String","""mount_ums_notify_enabled""","[]","Optional[/**
 * Whether or not a notification is displayed while UMS is enabled. (0 = false, 1 = true)
 * @hide
 */
]","\android\provider\Settings.java"
"FONT_SCALE","true","false","false","true","true","String","""font_scale""","[]","Optional[/**
 * Scaling factor for fonts, float.
 */
]","\android\provider\Settings.java"
"SHOW_PROCESSES","true","false","false","true","true","String","""show_processes""","[]","Optional[/**
 * Control whether the process CPU usage meter should be shown.
 */
]","\android\provider\Settings.java"
"VOLUME_VOICE","true","false","false","true","true","String","""volume_voice""","[]","Optional[/**
 * Voice call volume. This is used internally, changing this value will
 * not change the volume. See AudioManager.
 */
]","\android\provider\Settings.java"
"INCALL_POWER_BUTTON_BEHAVIOR_DEFAULT","true","false","false","true","true","int","INCALL_POWER_BUTTON_BEHAVIOR_SCREEN_OFF","[]","Optional[/**
 * INCALL_POWER_BUTTON_BEHAVIOR default value.
 * @hide
 */
]","\android\provider\Settings.java"
"LOGGING_ID","true","false","false","true","true","String","""logging_id""","[@Deprecated]","Optional[/**
 * The Logging ID (a unique 64-bit value) as a hex string.
 * Used as a pseudonymous identifier for logging.
 * @deprecated This identifier is poorly initialized and has
 * many collisions.  It should not be used.
 */
]","\android\provider\Settings.java"
"WIFI_STATIC_IP","true","false","false","true","true","String","""wifi_static_ip""","[]","Optional[/**
 * The static IP address.
 * <p>
 * Example: ""192.168.1.51""
 */
]","\android\provider\Settings.java"
"ACTION_SYNC_SETTINGS","true","false","false","true","true","String","""android.settings.SYNC_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings to allow configuration of sync settings.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * The account types available to add via the add account button may be restricted by adding an
 * {@link #EXTRA_AUTHORITIES} extra to this Intent with one or more syncable content provider's
 * authorities. Only account types which can sync with that content provider will be offered to
 * the user.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"WIFI_SLEEP_POLICY_NEVER","true","false","false","true","true","int","2","[]","Optional[/**
 * Value for {@link #WIFI_SLEEP_POLICY} to never go to sleep.
 */
]","\android\provider\Settings.java"
"BLUETOOTH_DISCOVERABILITY","true","false","false","true","true","String","""bluetooth_discoverability""","[]","Optional[/**
 * Determines whether remote devices may discover and/or connect to
 * this device.
 * <P>Type: INT</P>
 * 2 -- discoverable and connectable
 * 1 -- connectable but not discoverable
 * 0 -- neither connectable nor discoverable
 */
]","\android\provider\Settings.java"
"TETHER_DUN_REQUIRED","true","false","false","true","true","String","""tether_dun_required""","[]","Optional[/**
 * Used to require DUN APN on the device or not - defaults to a build config value
 * which defaults to false
 * @hide
 */
]","\android\provider\Settings.java"
"THROTTLE_NOTIFICATION_TYPE","true","false","false","true","true","String","""throttle_notification_type""","[]","Optional[/**
 * The throttling notifications we should send
 * @hide
 */
]","\android\provider\Settings.java"
"ACTION_PRIVACY_SETTINGS","true","false","false","true","true","String","""android.settings.PRIVACY_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings to allow configuration of privacy options.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"SCREEN_BRIGHTNESS","true","false","false","true","true","String","""screen_brightness""","[]","Optional[/**
 * The screen backlight brightness between 0 and 255.
 */
]","\android\provider\Settings.java"
"AUTHORITY","true","false","false","true","true","String","""settings""","[]","Optional.empty","\android\provider\Settings.java"
"DOWNLOAD_RECOMMENDED_MAX_BYTES_OVER_MOBILE","true","false","false","true","true","String","""download_manager_recommended_max_bytes_over_mobile""","[]","Optional[/**
 * The recommended maximum size, in bytes, of a download that the download manager should
 * transfer over a non-wifi connection. Over this size, the use will be warned, but will
 * have the option to start the download over the mobile connection anyway.
 * @hide
 */
]","\android\provider\Settings.java"
"AIRPLANE_MODE_RADIOS","true","false","false","true","true","String","""airplane_mode_radios""","[]","Optional[/**
 * A comma separated list of radios that need to be disabled when airplane mode
 * is on. This overrides WIFI_ON and BLUETOOTH_ON, if Wi-Fi and bluetooth are
 * included in the comma separated list.
 */
]","\android\provider\Settings.java"
"CALL_AUTO_RETRY","true","false","false","true","true","String","""call_auto_retry""","[]","Optional[/**
 * CDMA only settings
 * Whether the auto retry is enabled. The value is
 * boolean (1 or 0).
 * @hide
 */
]","\android\provider\Settings.java"
"PREFERRED_CDMA_SUBSCRIPTION","true","false","false","true","true","String","""preferred_cdma_subscription""","[]","Optional[/**
 * The cdma subscription 0 = Subscription from RUIM, when available
 * 1 = Subscription from NV
 * @hide
 */
]","\android\provider\Settings.java"
"sShortcutProjection","false","false","true","true","true","String","{ ID, SHORTCUT }","[]","Optional.empty","\android\provider\Settings.java"
"SYS_STORAGE_THRESHOLD_PERCENTAGE","true","false","false","true","true","String","""sys_storage_threshold_percentage""","[]","Optional[/**
 * Minimum percentage of free storage on the device that is used to determine if
 * the device is running low on storage.
 * Say this value is set to 10, the device is considered running low on storage
 * if 90% or more of the device storage is filled up.
 * @hide
 */
]","\android\provider\Settings.java"
"CDMA_SUBSCRIPTION_MODE","true","false","false","true","true","String","""subscription_mode""","[]","Optional[/**
 * The CDMA subscription mode 0 = RUIM/SIM (default)
 * 1 = NV
 * @hide
 */
]","\android\provider\Settings.java"
"MEMCHECK_PHONE_ENABLED","true","false","false","true","true","String","""memcheck_phone_enabled""","[]","Optional[/**
 * Boolean indicating whether restarting the phone process due to
 * memory checks is enabled.
 * @hide
 */
]","\android\provider\Settings.java"
"DATE_FORMAT","true","false","false","true","true","String","""date_format""","[]","Optional[/**
 * Date format string
 * mm/dd/yyyy
 * dd/mm/yyyy
 * yyyy/mm/dd
 */
]","\android\provider\Settings.java"
"SEARCH_MAX_SOURCE_EVENT_AGE_MILLIS","true","false","false","true","true","String","""search_max_source_event_age_millis""","[]","Optional[/**
 * The maximum age of log data used for source ranking in GlobalSearch.
 * @hide
 */
]","\android\provider\Settings.java"
"PREFERRED_TTY_MODE","true","false","false","true","true","String","""preferred_tty_mode""","[]","Optional[/**
 * The preferred TTY mode     0 = TTy Off, CDMA default
 * 1 = TTY Full
 * 2 = TTY HCO
 * 3 = TTY VCO
 * @hide
 */
]","\android\provider\Settings.java"
"SEARCH_PER_SOURCE_CONCURRENT_QUERY_LIMIT","true","false","false","true","true","String","""search_per_source_concurrent_query_limit""","[]","Optional[/**
 * The maximum number of concurrent suggestion queries to each source.
 * @hide
 */
]","\android\provider\Settings.java"
"END_BUTTON_BEHAVIOR_DEFAULT","true","false","false","true","true","int","END_BUTTON_BEHAVIOR_SLEEP","[]","Optional[/**
 * END_BUTTON_BEHAVIOR default value.
 * @hide
 */
]","\android\provider\Settings.java"
"NETWORK_PREFERENCE","true","false","false","true","true","String","""network_preference""","[]","Optional[/**
 * User preference for which network(s) should be used. Only the
 * connectivity service should touch this.
 */
]","\android\provider\Settings.java"
"TETHER_SUPPORTED","true","false","false","true","true","String","""tether_supported""","[]","Optional[/**
 * Used to disable Tethering on a device - defaults to true
 * @hide
 */
]","\android\provider\Settings.java"
"ACTION_WIRELESS_SETTINGS","true","false","false","true","true","String","""android.settings.WIRELESS_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings to allow configuration of wireless controls
 * such as Wi-Fi, Bluetooth and Mobile networks.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"SCREEN_BRIGHTNESS_MODE_MANUAL","true","false","false","true","true","int","0","[]","Optional[/**
 * SCREEN_BRIGHTNESS_MODE value for manual mode.
 */
]","\android\provider\Settings.java"
"CONTENT_URI","true","false","false","true","true","Uri","Uri.parse(""content://"" + AUTHORITY + ""/bookmarks"")","[]","Optional[/**
 * The content:// style URL for this table
 */
]","\android\provider\Settings.java"
"APPEND_FOR_LAST_AUDIBLE","true","false","false","true","true","String","""_last_audible""","[]","Optional[/**
 * Appended to various volume related settings to record the previous
 * values before they the settings were affected by a silent/vibrate
 * ringer mode change.
 */
]","\android\provider\Settings.java"
"RINGTONE","true","false","false","true","true","String","""ringtone""","[]","Optional[/**
 * Persistent store for the system-wide default ringtone URI.
 * <p>
 * If you need to play the default ringtone at any given time, it is recommended
 * you give {@link #DEFAULT_RINGTONE_URI} to the media player.  It will resolve
 * to the set default ringtone at the time of playing.
 *
 * @see #DEFAULT_RINGTONE_URI
 */
]","\android\provider\Settings.java"
"SIP_ALWAYS","true","false","false","true","true","String","""SIP_ALWAYS""","[]","Optional[/**
 * One of the sip call options: Always use SIP with network access.
 * @hide
 */
]","\android\provider\Settings.java"
"SIP_RECEIVE_CALLS","true","false","false","true","true","String","""sip_receive_calls""","[]","Optional[/**
 * Receive incoming SIP calls?
 * 0 = no
 * 1 = yes
 * @hide
 */
]","\android\provider\Settings.java"
"SIP_CALL_OPTIONS","true","false","false","true","true","String","""sip_call_options""","[]","Optional[/**
 * Call Preference String.
 * ""SIP_ALWAYS"" : Always use SIP with network access
 * ""SIP_ADDRESS_ONLY"" : Only if destination is a SIP address
 * ""SIP_ASK_ME_EACH_TIME"" : Always ask me each time
 * @hide
 */
]","\android\provider\Settings.java"
"ACTION_APPLICATION_DEVELOPMENT_SETTINGS","true","false","false","true","true","String","""android.settings.APPLICATION_DEVELOPMENT_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings to allow configuration of application
 * development-related settings.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you safeguard
 * against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"MOUNT_UMS_AUTOSTART","true","false","false","true","true","String","""mount_ums_autostart""","[]","Optional[/**
 * Whether or not UMS auto-starts on UMS host detection. (0 = false, 1 = true)
 * @hide
 */
]","\android\provider\Settings.java"
"ACTION_MEMORY_CARD_SETTINGS","true","false","false","true","true","String","""android.settings.MEMORY_CARD_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings for memory card storage.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"MEMCHECK_PHONE_HARD_THRESHOLD","true","false","false","true","true","String","""memcheck_phone_hard""","[]","Optional[/**
 * How many bytes the phone process must be below to avoid scheduling
 * a hard restart.  This restart will happen immediately.
 * @hide
 */
]","\android\provider\Settings.java"
"ACCELEROMETER_ROTATION","true","false","false","true","true","String","""accelerometer_rotation""","[]","Optional[/**
 * Control whether the accelerometer will be used to change screen
 * orientation.  If 0, it will not be used unless explicitly requested
 * by the application; if 1, it will be used by default unless explicitly
 * disabled by the application.
 */
]","\android\provider\Settings.java"
"VIBRATE_ON","true","false","false","true","true","String","""vibrate_on""","[]","Optional[/**
 * Whether vibrate is on for different events. This is used internally,
 * changing this value will not change the vibrate. See AudioManager.
 */
]","\android\provider\Settings.java"
"ENHANCED_VOICE_PRIVACY_ENABLED","true","false","false","true","true","String","""enhanced_voice_privacy_enabled""","[]","Optional[/**
 * Whether the enhanced voice privacy mode is enabled.
 * 0 = normal voice privacy
 * 1 = enhanced voice privacy
 * @hide
 */
]","\android\provider\Settings.java"
"ACTION_SEARCH_SETTINGS","true","false","false","true","true","String","""android.search.action.SEARCH_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings for global search.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing
 */
]","\android\provider\Settings.java"
"WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS","true","false","false","true","true","String","""wifi_watchdog_background_check_delay_ms""","[]","Optional[/**
 * The delay between background checks.
 */
]","\android\provider\Settings.java"
"ALWAYS_FINISH_ACTIVITIES","true","false","false","true","true","String","""always_finish_activities""","[]","Optional[/**
 * If 1, the activity manager will aggressively finish activities and
 * processes as soon as they are no longer needed.  If 0, the normal
 * extended lifetime is used.
 */
]","\android\provider\Settings.java"
"TEXT_AUTO_REPLACE","true","false","false","true","true","String","""auto_replace""","[]","Optional[/**
 * Setting to enable Auto Replace (AutoText) in text editors. 1 = On, 0 = Off
 */
]","\android\provider\Settings.java"
"TTS_DEFAULT_COUNTRY","true","false","false","true","true","String","""tts_default_country""","[]","Optional[/**
 * Default text-to-speech country.
 */
]","\android\provider\Settings.java"
"SEARCH_PREFILL_MILLIS","true","false","false","true","true","String","""search_prefill_millis""","[]","Optional[/**
 * The maximum number of milliseconds that GlobalSearch shows the previous results
 * after receiving a new query.
 * @hide
 */
]","\android\provider\Settings.java"
"LOCK_PATTERN_ENABLED","true","false","false","true","true","String","""lock_pattern_autolock""","[]","Optional[/**
 * Whether autolock is enabled (0 = false, 1 = true)
 */
]","\android\provider\Settings.java"
"WALLPAPER_ACTIVITY","true","false","false","true","true","String","""wallpaper_activity""","[]","Optional[/**
 * Name of activity to use for wallpaper on the home screen.
 */
]","\android\provider\Settings.java"
"ACTION_NETWORK_OPERATOR_SETTINGS","true","false","false","true","true","String","""android.settings.NETWORK_OPERATOR_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings for selecting the network operator.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"MEMCHECK_RECHECK_INTERVAL","true","false","false","true","true","String","""memcheck_recheck_interval""","[]","Optional[/**
 * How frequently to check whether it is a good time to restart things,
 * if the device is in a bad state.  This number is in seconds.  Note:
 * this value must be larger than {@link #MEMCHECK_MIN_ALARM} or else
 * the alarm to schedule the recheck will always appear within the
 * minimum ""do not execute now"" time.
 * @hide
 */
]","\android\provider\Settings.java"
"TTS_DEFAULT_VARIANT","true","false","false","true","true","String","""tts_default_variant""","[]","Optional[/**
 * Default text-to-speech locale variant.
 */
]","\android\provider\Settings.java"
"WIFI_AP_SSID","true","false","false","true","true","String","""wifi_ap_ssid""","[]","Optional[/**
 * AP SSID
 *
 * @hide
 */
]","\android\provider\Settings.java"
"NOTIFICATIONS_USE_RING_VOLUME","true","false","false","true","true","String","""notifications_use_ring_volume""","[]","Optional[/**
 * Whether the notifications should use the ring volume (value of 1) or
 * a separate notification volume (value of 0). In most cases, users
 * will have this enabled so the notification and ringer volumes will be
 * the same. However, power users can disable this and use the separate
 * notification volume control.
 * <p>
 * Note: This is a one-off setting that will be removed in the future
 * when there is profile support. For this reason, it is kept hidden
 * from the public APIs.
 *
 * @hide
 */
]","\android\provider\Settings.java"
"TAG","false","false","true","true","true","String","""Bookmarks""","[]","Optional.empty","\android\provider\Settings.java"
"mVersionSystemProperty","false","false","true","false","true","String","null","[]","Optional.empty","\android\provider\Settings.java"
"sShortcutSelection","false","false","true","true","true","String","SHORTCUT + ""=?""","[]","Optional.empty","\android\provider\Settings.java"
"REBOOT_INTERVAL","true","false","false","true","true","String","""reboot_interval""","[]","Optional[/**
 * How frequently (in DAYS) to reboot the device.  If 0, no reboots
 * will occur.
 * @hide
 */
]","\android\provider\Settings.java"
"DISABLED_SYSTEM_INPUT_METHODS","true","false","false","true","true","String","""disabled_system_input_methods""","[]","Optional[/**
 * List of system input methods that are currently disabled.  This is a string
 * containing the IDs of all disabled input methods, each ID separated
 * by ':'.
 * @hide
 */
]","\android\provider\Settings.java"
"VOLUME_SETTINGS","true","false","false","true","true","String","{ VOLUME_VOICE, VOLUME_SYSTEM, VOLUME_RING, VOLUME_MUSIC, VOLUME_ALARM, VOLUME_NOTIFICATION, VOLUME_BLUETOOTH_SCO }","[]","Optional[/**
 * The mapping of stream type (integer) to its setting.
 */
]","\android\provider\Settings.java"
"BACKUP_TRANSPORT","true","false","false","true","true","String","""backup_transport""","[]","Optional[/**
 * Component of the transport to use for backup/restore.
 * @hide
 */
]","\android\provider\Settings.java"
"WIFI_ON","true","false","false","true","true","String","""wifi_on""","[]","Optional[/**
 * Whether the Wi-Fi should be on.  Only the Wi-Fi service should touch this.
 */
]","\android\provider\Settings.java"
"BACKUP_ENABLED","true","false","false","true","true","String","""backup_enabled""","[]","Optional[/**
 * Controls whether settings backup is enabled.
 * Type: int ( 0 = disabled, 1 = enabled )
 * @hide
 */
]","\android\provider\Settings.java"
"MUTE_STREAMS_AFFECTED","true","false","false","true","true","String","""mute_streams_affected""","[]","Optional[/**
 * Determines which streams are affected by mute. The
 * stream type's bit should be set to 1 if it should be muted when a mute request
 * is received.
 */
]","\android\provider\Settings.java"
"ENABLED_INPUT_METHODS","true","false","false","true","true","String","""enabled_input_methods""","[]","Optional[/**
 * List of input methods that are currently enabled.  This is a string
 * containing the IDs of all enabled input methods, each ID separated
 * by ':'.
 */
]","\android\provider\Settings.java"
"SIP_ASK_ME_EACH_TIME","true","false","false","true","true","String","""SIP_ASK_ME_EACH_TIME""","[]","Optional[/**
 * One of the sip call options: Always ask me each time.
 * @hide
 */
]","\android\provider\Settings.java"
"SEARCH_MAX_SHORTCUTS_RETURNED","true","false","false","true","true","String","""search_max_shortcuts_returned""","[]","Optional[/**
 * The maximum number of shortcuts shown by GlobalSearch.
 * @hide
 */
]","\android\provider\Settings.java"
"WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT","true","false","false","true","true","String","""wifi_watchdog_initial_ignored_ping_count""","[]","Optional[/**
 * The number of initial pings to perform that *may* be ignored if they
 * fail. Again, if these fail, they will *not* be used in packet loss
 * calculation. For example, one network always seemed to time out for
 * the first couple pings, so this is set to 3 by default.
 */
]","\android\provider\Settings.java"
"VALUE","true","false","false","true","true","String","""value""","[]","Optional.empty","\android\provider\Settings.java"
"CALL_METHOD_GET_SECURE","true","false","false","true","true","String","""GET_secure""","[]","Optional[/**
 * @hide - Private call() method on SettingsProvider to read from 'secure' table.
 */
]","\android\provider\Settings.java"
"mUri","false","false","true","false","true","Uri","null","[]","Optional.empty","\android\provider\Settings.java"
"DROPBOX_QUOTA_KB","true","false","false","true","true","String","""dropbox_quota_kb""","[]","Optional[/**
 * Maximum amount of disk space used by {@link com.android.internal.os.IDropBoxManagerService} no matter what.
 * @hide
 */
]","\android\provider\Settings.java"
"MOUNT_UMS_PROMPT","true","false","false","true","true","String","""mount_ums_prompt""","[]","Optional[/**
 * Whether or not a notification is displayed on UMS host detection. (0 = false, 1 = true)
 * @hide
 */
]","\android\provider\Settings.java"
"DESK_UNDOCK_SOUND","true","false","false","true","true","String","""desk_undock_sound""","[]","Optional[/**
 * URI for the desk dock ""out"" event sound.
 * @hide
 */
]","\android\provider\Settings.java"
"ENABLED_ACCESSIBILITY_SERVICES","true","false","false","true","true","String","""enabled_accessibility_services""","[]","Optional[/**
 * List of the enabled accessibility providers.
 */
]","\android\provider\Settings.java"
"SETTINGS_TO_BACKUP","true","false","false","true","true","String","{ ADB_ENABLED, ALLOW_MOCK_LOCATION, PARENTAL_CONTROL_ENABLED, PARENTAL_CONTROL_REDIRECT_URL, USB_MASS_STORAGE_ENABLED, ACCESSIBILITY_ENABLED, BACKUP_AUTO_RESTORE, ENABLED_ACCESSIBILITY_SERVICES, TTS_USE_DEFAULTS, TTS_DEFAULT_RATE, TTS_DEFAULT_PITCH, TTS_DEFAULT_SYNTH, TTS_DEFAULT_LANG, TTS_DEFAULT_COUNTRY, TTS_ENABLED_PLUGINS, WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON, WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY, WIFI_NUM_ALLOWED_CHANNELS, WIFI_NUM_OPEN_NETWORKS_KEPT, MOUNT_PLAY_NOTIFICATION_SND, MOUNT_UMS_AUTOSTART, MOUNT_UMS_PROMPT, MOUNT_UMS_NOTIFY_ENABLED, UI_NIGHT_MODE }","[]","Optional[/**
 * @hide
 */
]","\android\provider\Settings.java"
"WIFI_NUM_OPEN_NETWORKS_KEPT","true","false","false","true","true","String","""wifi_num_open_networks_kept""","[]","Optional[/**
 * When the number of open networks exceeds this number, the
 * least-recently-used excess networks will be removed.
 */
]","\android\provider\Settings.java"
"ACTION_SOUND_SETTINGS","true","false","false","true","true","String","""android.settings.SOUND_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings to allow configuration of sound and volume.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"WIFI_AP_SECURITY","true","false","false","true","true","String","""wifi_ap_security""","[]","Optional[/**
 * AP security
 *
 * @hide
 */
]","\android\provider\Settings.java"
"LOW_BATTERY_SOUND","true","false","false","true","true","String","""low_battery_sound""","[]","Optional[/**
 * URI for the low battery sound file.
 * @hide
 */
]","\android\provider\Settings.java"
"LOCKSCREEN_SOUNDS_ENABLED","true","false","false","true","true","String","""lockscreen_sounds_enabled""","[]","Optional[/**
 * Whether to play sounds when the keyguard is shown and dismissed.
 * @hide
 */
]","\android\provider\Settings.java"
"WAIT_FOR_DEBUGGER","true","false","false","true","true","String","""wait_for_debugger""","[]","Optional[/**
 * If 1, when launching DEBUG_APP it will wait for the debugger before
 * starting user code.  If 0, it will run normally.
 */
]","\android\provider\Settings.java"
"INTENT","true","false","false","true","true","String","""intent""","[]","Optional[/**
 * The Intent URL of the bookmark, describing what it points to.  This
 * value is given to {@link android.content.Intent#getIntent} to create
 * an Intent that can be launched.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Settings.java"
"TEXT_AUTO_PUNCTUATE","true","false","false","true","true","String","""auto_punctuate""","[]","Optional[/**
 * Setting to enable Auto Punctuate in text editors. 1 = On, 0 = Off. This
 * feature converts two spaces to a ""."" and space.
 */
]","\android\provider\Settings.java"
"NAME_EQ_PLACEHOLDER","false","false","true","true","true","String","""name=?""","[]","Optional.empty","\android\provider\Settings.java"
"SET_INSTALL_LOCATION","true","false","false","true","true","String","""set_install_location""","[]","Optional[/**
 * Let user pick default install location.
 * @hide
 */
]","\android\provider\Settings.java"
"FOLDER","true","false","false","true","true","String","""folder""","[]","Optional[/**
 * Arbitrary string (displayed to the user) that allows bookmarks to be
 * organized into categories.  There are some special names for
 * standard folders, which all start with '@'.  The label displayed for
 * the folder changes with the locale (via {@link #getLabelForFolder}) but
 * the folder name does not change so you can consistently query for
 * the folder regardless of the current locale.
 *
 * <P>Type: TEXT</P>
 */
]","\android\provider\Settings.java"
"PDP_WATCHDOG_LONG_POLL_INTERVAL_MS","true","false","false","true","true","String","""pdp_watchdog_long_poll_interval_ms""","[]","Optional[/**
 * The interval in milliseconds at which to check packet counts on the
 * mobile data interface when screen is off, to detect possible data
 * connection problems.
 * @hide
 */
]","\android\provider\Settings.java"
"PDP_WATCHDOG_POLL_INTERVAL_MS","true","false","false","true","true","String","""pdp_watchdog_poll_interval_ms""","[]","Optional[/**
 * The interval in milliseconds at which to check packet counts on the
 * mobile data interface when screen is on, to detect possible data
 * connection problems.
 * @hide
 */
]","\android\provider\Settings.java"
"LAST_SETUP_SHOWN","true","false","false","true","true","String","""last_setup_shown""","[]","Optional[/**
 * Version for which the setup wizard was last shown.  Bumped for
 * each release when there is new setup information to show.
 * @hide
 */
]","\android\provider\Settings.java"
"CAR_DOCK_SOUND","true","false","false","true","true","String","""car_dock_sound""","[]","Optional[/**
 * URI for the car dock ""in"" event sound.
 * @hide
 */
]","\android\provider\Settings.java"
"SMS_OUTGOING_CHECK_MAX_COUNT","true","false","false","true","true","String","""sms_outgoing_check_max_count""","[]","Optional[/**
 * The number of outgoing SMS sent without asking for user permit
 * (of {@link #SMS_OUTGOING_CHECK_INTERVAL_MS}
 * @hide
 */
]","\android\provider\Settings.java"
"TTS_DEFAULT_RATE","true","false","false","true","true","String","""tts_default_rate""","[]","Optional[/**
 * Default text-to-speech engine speech rate. 100 = 1x
 */
]","\android\provider\Settings.java"
"MEMCHECK_INTERVAL","true","false","false","true","true","String","""memcheck_interval""","[]","Optional[/**
 * How frequently (in seconds) to check the memory status of the
 * device.
 * @hide
 */
]","\android\provider\Settings.java"
"ERROR_LOGCAT_PREFIX","true","false","false","true","true","String","""logcat_for_""","[]","Optional[/**
 * Lines of logcat to include with system crash/ANR/etc. reports,
 * as a prefix of the dropbox tag of the report type.
 * For example, ""logcat_for_system_server_anr"" controls the lines
 * of logcat captured with system server ANR reports.  0 to disable.
 * @hide
 */
]","\android\provider\Settings.java"
"TEXT_SHOW_PASSWORD","true","false","false","true","true","String","""show_password""","[]","Optional[/**
 * Setting to showing password characters in text editors. 1 = On, 0 = Off
 */
]","\android\provider\Settings.java"
"ASSISTED_GPS_ENABLED","true","false","false","true","true","String","""assisted_gps_enabled""","[]","Optional[/**
 * Whether assisted GPS should be enabled or not.
 * @hide
 */
]","\android\provider\Settings.java"
"THROTTLE_MAX_NTP_CACHE_AGE_SEC","true","false","false","true","true","String","""throttle_max_ntp_cache_age_sec""","[]","Optional[/**
 * The length of time in Sec that we allow our notion of NTP time
 * to be cached before we refresh it
 * @hide
 */
]","\android\provider\Settings.java"
"DEBUG_APP","true","false","false","true","true","String","""debug_app""","[]","Optional[/**
 * Name of an application package to be debugged.
 */
]","\android\provider\Settings.java"
"VOLUME_ALARM","true","false","false","true","true","String","""volume_alarm""","[]","Optional[/**
 * Alarm volume. This is used internally, changing this
 * value will not change the volume. See AudioManager.
 */
]","\android\provider\Settings.java"
"DOCK_SOUNDS_ENABLED","true","false","false","true","true","String","""dock_sounds_enabled""","[]","Optional[/**
 * Whether to play a sound for dock events.
 * @hide
 */
]","\android\provider\Settings.java"
"ACTION_SYSTEM_UPDATE_SETTINGS","true","false","false","true","true","String","""android.settings.SYSTEM_UPDATE_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings for system update functionality.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 *
 * @hide
 */
]","\android\provider\Settings.java"
"DEFAULT_NOTIFICATION_URI","true","false","false","true","true","Uri","getUriFor(NOTIFICATION_SOUND)","[]","Optional[/**
 * A {@link Uri} that will point to the current default notification
 * sound at any given time.
 *
 * @see #DEFAULT_RINGTONE_URI
 */
]","\android\provider\Settings.java"
"FANCY_IME_ANIMATIONS","true","false","false","true","true","String","""fancy_ime_animations""","[]","Optional[/**
 * Scaling factor for normal window animations. Setting to 0 will disable window
 * animations.
 * @hide
 */
]","\android\provider\Settings.java"
"EXTRA_AUTHORITIES","true","false","false","true","true","String","""authorities""","[]","Optional[/**
 * Activity Extra: Limit available options in launched activity based on the given authority.
 * <p>
 * This can be passed as an extra field in an Activity Intent with one or more syncable content
 * provider's authorities as a String[]. This field is used by some intents to alter the
 * behavior of the called activity.
 * <p>
 * Example: The {@link #ACTION_ADD_ACCOUNT} intent restricts the account types available based
 * on the authority given.
 */
]","\android\provider\Settings.java"
"DEFAULT_ALARM_ALERT_URI","true","false","false","true","true","Uri","getUriFor(ALARM_ALERT)","[]","Optional[/**
 * A {@link Uri} that will point to the current default alarm alert at
 * any given time.
 *
 * @see #DEFAULT_ALARM_ALERT_URI
 */
]","\android\provider\Settings.java"
"TTS_DEFAULT_PITCH","true","false","false","true","true","String","""tts_default_pitch""","[]","Optional[/**
 * Default text-to-speech engine pitch. 100 = 1x
 */
]","\android\provider\Settings.java"
"INCALL_POWER_BUTTON_BEHAVIOR_HANGUP","true","false","false","true","true","int","0x2","[]","Optional[/**
 * INCALL_POWER_BUTTON_BEHAVIOR value for ""hang up"".
 * @hide
 */
]","\android\provider\Settings.java"
"AIRPLANE_MODE_ON","true","false","false","true","true","String","""airplane_mode_on""","[]","Optional[/**
 * Whether Airplane Mode is on.
 */
]","\android\provider\Settings.java"
"AUTO_TIME","true","false","false","true","true","String","""auto_time""","[]","Optional[/**
 * Value to specify if the user prefers the date, time and time zone
 * to be automatically fetched from the network (NITZ). 1=yes, 0=no
 */
]","\android\provider\Settings.java"
"PARENTAL_CONTROL_LAST_UPDATE","true","false","false","true","true","String","""parental_control_last_update""","[]","Optional[/**
 * No longer supported.
 */
]","\android\provider\Settings.java"
"mValues","false","false","true","false","true","HashMap<String,String>","new HashMap<String, String>()","[]","Optional[// Must synchronize on 'this' to access mValues and mValuesVersion.
]","\android\provider\Settings.java"
"MEMCHECK_EXEC_START_TIME","true","false","false","true","true","String","""memcheck_exec_start_time""","[]","Optional[/**
 * First time during the day it is okay to kill processes
 * or reboot the device due to low memory situations.  This number is
 * in seconds since midnight.
 * @hide
 */
]","\android\provider\Settings.java"
"DEFAULT_INSTALL_LOCATION","true","false","false","true","true","String","""default_install_location""","[]","Optional[/**
 * Default install location value.
 * 0 = auto, let system decide
 * 1 = internal
 * 2 = sdcard
 * @hide
 */
]","\android\provider\Settings.java"
"RADIO_CELL","true","false","false","true","true","String","""cell""","[]","Optional[/**
 * Constant for use in AIRPLANE_MODE_RADIOS to specify Cellular radio.
 */
]","\android\provider\Settings.java"
"WIFI_WATCHDOG_PING_TIMEOUT_MS","true","false","false","true","true","String","""wifi_watchdog_ping_timeout_ms""","[]","Optional[/**
 * The timeout per ping.
 */
]","\android\provider\Settings.java"
"BACKUP_AUTO_RESTORE","true","false","false","true","true","String","""backup_auto_restore""","[]","Optional[/**
 * Controls whether application data is automatically restored from backup
 * at install time.
 * Type: int ( 0 = disabled, 1 = enabled )
 * @hide
 */
]","\android\provider\Settings.java"
"ADB_ENABLED","true","false","false","true","true","String","""adb_enabled""","[]","Optional[/**
 * Whether ADB is enabled.
 */
]","\android\provider\Settings.java"
"ANR_SHOW_BACKGROUND","true","false","false","true","true","String","""anr_show_background""","[]","Optional[/**
 * If nonzero, ANRs in invisible background processes bring up a dialog.
 * Otherwise, the process will be silently killed.
 * @hide
 */
]","\android\provider\Settings.java"
"SEARCH_NUM_PROMOTED_SOURCES","true","false","false","true","true","String","""search_num_promoted_sources""","[]","Optional[/**
 * The number of promoted sources in GlobalSearch.
 * @hide
 */
]","\android\provider\Settings.java"
"VOLUME_RING","true","false","false","true","true","String","""volume_ring""","[]","Optional[/**
 * Ringer volume. This is used internally, changing this value will not
 * change the volume. See AudioManager.
 */
]","\android\provider\Settings.java"
"SEARCH_QUERY_THREAD_MAX_POOL_SIZE","true","false","false","true","true","String","""search_query_thread_max_pool_size""","[]","Optional[/**
 * The maximum size of the thread pool for suggestion queries in GlobalSearch.
 * @hide
 */
]","\android\provider\Settings.java"
"TTS_DEFAULT_SYNTH","true","false","false","true","true","String","""tts_default_synth""","[]","Optional[/**
 * Default text-to-speech engine.
 */
]","\android\provider\Settings.java"
"SEARCH_WEB_RESULTS_OVERRIDE_LIMIT","true","false","false","true","true","String","""search_web_results_override_limit""","[]","Optional[/**
 * The number of suggestions the GlobalSearch will ask the web search source for.
 * @hide
 */
]","\android\provider\Settings.java"
"MEMCHECK_SYSTEM_HARD_THRESHOLD","true","false","false","true","true","String","""memcheck_system_hard""","[]","Optional[/**
 * How many bytes the system process must be below to avoid scheduling
 * a hard reboot.  This reboot will happen immediately.
 * @hide
 */
]","\android\provider\Settings.java"
"WIFI_NUM_ALLOWED_CHANNELS","true","false","false","true","true","String","""wifi_num_allowed_channels""","[]","Optional[/**
 * The number of radio channels that are allowed in the local
 * 802.11 regulatory domain.
 * @hide
 */
]","\android\provider\Settings.java"
"WTF_IS_FATAL","true","false","false","true","true","String","""wtf_is_fatal""","[]","Optional[/**
 * Nonzero causes Log.wtf() to crash.
 * @hide
 */
]","\android\provider\Settings.java"
"SEARCH_QUERY_THREAD_CORE_POOL_SIZE","true","false","false","true","true","String","""search_query_thread_core_pool_size""","[]","Optional[/**
 * The size of the core thread pool for suggestion queries in GlobalSearch.
 * @hide
 */
]","\android\provider\Settings.java"
"LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED","true","false","false","true","true","String","""lock_pattern_tactile_feedback_enabled""","[]","Optional[/**
 * Whether lock pattern will vibrate as user enters (0 = false, 1 = true)
 */
]","\android\provider\Settings.java"
"ACTION_APPLICATION_SETTINGS","true","false","false","true","true","String","""android.settings.APPLICATION_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings to allow configuration of application-related settings.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"INSTALL_NON_MARKET_APPS","true","false","false","true","true","String","""install_non_market_apps""","[]","Optional[/**
 * Whether the package installer should allow installation of apps downloaded from
 * sources other than the Android Market (vending machine).
 *
 * 1 = allow installing from other sources
 * 0 = only allow installing from the Android Market
 */
]","\android\provider\Settings.java"
"ALLOWED_GEOLOCATION_ORIGINS","true","false","false","true","true","String","""allowed_geolocation_origins""","[]","Optional[/**
 * Origins for which browsers should allow geolocation by default.
 * The value is a space-separated list of origins.
 */
]","\android\provider\Settings.java"
"VOLUME_BLUETOOTH_SCO","true","false","false","true","true","String","""volume_bluetooth_sco""","[]","Optional[/**
 * Bluetooth Headset volume. This is used internally, changing this value will
 * not change the volume. See AudioManager.
 */
]","\android\provider\Settings.java"
"ALARM_ALERT","true","false","false","true","true","String","""alarm_alert""","[]","Optional[/**
 * Persistent store for the system-wide default alarm alert.
 *
 * @see #RINGTONE
 * @see #DEFAULT_ALARM_ALERT_URI
 */
]","\android\provider\Settings.java"
"TTY_MODE_ENABLED","true","false","false","true","true","String","""tty_mode_enabled""","[]","Optional[/**
 * Whether the TTY mode mode is enabled.
 * 0 = disabled
 * 1 = enabled
 * @hide
 */
]","\android\provider\Settings.java"
"WIFI_USE_STATIC_IP","true","false","false","true","true","String","""wifi_use_static_ip""","[]","Optional[/**
 * Whether to use static IP and other static network attributes.
 * <p>
 * Set to 1 for true and 0 for false.
 */
]","\android\provider\Settings.java"
"ACTION_ADD_ACCOUNT","true","false","false","true","true","String","""android.settings.ADD_ACCOUNT_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show add account screen for creating a new account.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * The account types available to add may be restricted by adding an {@link #EXTRA_AUTHORITIES}
 * extra to the Intent with one or more syncable content provider's authorities.  Only account
 * types which can sync with that content provider will be offered to the user.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"MEMCHECK_EXEC_END_TIME","true","false","false","true","true","String","""memcheck_exec_end_time""","[]","Optional[/**
 * Last time during the day it is okay to kill processes
 * or reboot the device due to low memory situations.  This number is
 * in seconds since midnight.
 * @hide
 */
]","\android\provider\Settings.java"
"ACTION_DATA_ROAMING_SETTINGS","true","false","false","true","true","String","""android.settings.DATA_ROAMING_SETTINGS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings for selection of 2G/3G.
 * <p>
 * In some cases, a matching Activity may not exist, so ensure you
 * safeguard against this.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\Settings.java"
"MEMCHECK_SYSTEM_SOFT_THRESHOLD","true","false","false","true","true","String","""memcheck_system_soft""","[]","Optional[/**
 * How many bytes the system process must be below to avoid scheduling
 * a soft reboot.  This reboot will happen when it is next determined
 * to be a good time.
 * @hide
 */
]","\android\provider\Settings.java"
"PDP_WATCHDOG_PING_ADDRESS","true","false","false","true","true","String","""pdp_watchdog_ping_address""","[]","Optional[/**
 * Address to ping as a last sanity check before attempting any recovery.
 * Unset or set to ""0.0.0.0"" to skip this check.
 * @hide
 */
]","\android\provider\Settings.java"
"CAR_UNDOCK_SOUND","true","false","false","true","true","String","""car_undock_sound""","[]","Optional[/**
 * URI for the car dock ""out"" event sound.
 * @hide
 */
]","\android\provider\Settings.java"
"ORDERING","true","false","false","true","true","String","""ordering""","[]","Optional[/**
 * The order in which the bookmark should be displayed
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Settings.java"
"VOLUME_NOTIFICATION","true","false","false","true","true","String","""volume_notification""","[]","Optional[/**
 * Notification volume. This is used internally, changing this
 * value will not change the volume. See AudioManager.
 */
]","\android\provider\Settings.java"
"SETUP_WIZARD_HAS_RUN","true","false","false","true","true","String","""setup_wizard_has_run""","[]","Optional[/**
 * Whether the setup wizard has been run before (on first boot), or if
 * it still needs to be run.
 *
 * nonzero = it has been run in the past
 * 0 = it has not been run in the past
 */
]","\android\provider\Settings.java"
"MOUNT_PLAY_NOTIFICATION_SND","true","false","false","true","true","String","""mount_play_not_snd""","[]","Optional[/**
 * Whether or not alert sounds are played on MountService events. (0 = false, 1 = true)
 * @hide
 */
]","\android\provider\Settings.java"
"SYS_FREE_STORAGE_LOG_INTERVAL","true","false","false","true","true","String","""sys_free_storage_log_interval""","[]","Optional[/**
 * The interval in minutes after which the amount of free storage left on the
 * device is logged to the event log
 * @hide
 */
]","\android\provider\Settings.java"
"DATA_ROAMING","true","false","false","true","true","String","""data_roaming""","[]","Optional[/**
 * Whether or not data roaming is enabled. (0 = false, 1 = true)
 */
]","\android\provider\Settings.java"
"SIP_ADDRESS_ONLY","true","false","false","true","true","String","""SIP_ADDRESS_ONLY""","[]","Optional[/**
 * One of the sip call options: Only if destination is a SIP address.
 * @hide
 */
]","\android\provider\Settings.java"
"WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS","true","false","false","true","true","String","""wifi_watchdog_background_check_timeout_ms""","[]","Optional[/**
 * The timeout for a background ping
 */
]","\android\provider\Settings.java"
"END_BUTTON_BEHAVIOR_SLEEP","true","false","false","true","true","int","0x2","[]","Optional[/**
 * END_BUTTON_BEHAVIOR value for ""go to sleep"".
 * @hide
 */
]","\android\provider\Settings.java"
"LOCK_SOUND","true","false","false","true","true","String","""lock_sound""","[]","Optional[/**
 * URI for the ""device locked"" (keyguard shown) sound.
 * @hide
 */
]","\android\provider\Settings.java"
"SMS_OUTGOING_CHECK_INTERVAL_MS","true","false","false","true","true","String","""sms_outgoing_check_interval_ms""","[]","Optional[/**
 * The interval in milliseconds at which to check the number of SMS sent
 * out without asking for use permit, to limit the un-authorized SMS
 * usage.
 * @hide
 */
]","\android\provider\Settings.java"
"BACKUP_PROVISIONED","true","false","false","true","true","String","""backup_provisioned""","[]","Optional[/**
 * Indicates whether settings backup has been fully provisioned.
 * Type: int ( 0 = unprovisioned, 1 = fully provisioned )
 * @hide
 */
]","\android\provider\Settings.java"
"mTimer","false","false","true","false","false","Timer","null","[]","Optional[// See http://www.whatwg.org/specs/web-apps/current-work/#event-media-timeupdate
]","\android\webkit\HTML5Audio.java"
"ERROR","false","false","true","true","false","int","-1","[]","Optional.empty","\android\webkit\HTML5Audio.java"
"TIMEUPDATE","false","false","true","true","true","int","100","[]","Optional[// Timer thread -> UI thread
]","\android\webkit\HTML5Audio.java"
"PREPARED","false","false","true","true","false","int","2","[]","Optional.empty","\android\webkit\HTML5Audio.java"
"mAskToPlay","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\webkit\HTML5Audio.java"
"mNativePointer","false","false","true","false","false","int","null","[]","Optional[// The C++ MediaPlayerPrivateAndroid object.
]","\android\webkit\HTML5Audio.java"
"TIMEUPDATE_PERIOD","false","false","true","true","true","int","250","[]","Optional[// ms
]","\android\webkit\HTML5Audio.java"
"mState","false","false","true","false","false","int","IDLE","[]","Optional.empty","\android\webkit\HTML5Audio.java"
"PAUSED","false","false","true","true","false","int","6","[]","Optional.empty","\android\webkit\HTML5Audio.java"
"INITIALIZED","false","false","true","true","false","int","1","[]","Optional.empty","\android\webkit\HTML5Audio.java"
"mMediaPlayer","false","false","true","false","false","MediaPlayer","null","[]","Optional.empty","\android\webkit\HTML5Audio.java"
"COMPLETE","false","false","true","true","false","int","5","[]","Optional.empty","\android\webkit\HTML5Audio.java"
"STOPPED","false","false","true","true","false","int","-2","[]","Optional.empty","\android\webkit\HTML5Audio.java"
"STARTED","false","false","true","true","false","int","4","[]","Optional.empty","\android\webkit\HTML5Audio.java"
"mUrl","false","false","true","false","false","String","null","[]","Optional.empty","\android\webkit\HTML5Audio.java"
"IDLE","false","false","true","true","false","int","0","[]","Optional.empty","\android\webkit\HTML5Audio.java"
"LOGTAG","false","false","true","true","true","String","""HTML5Audio""","[]","Optional[// Logging tag.
]","\android\webkit\HTML5Audio.java"
"mValidNotAfter","false","false","true","false","false","Date","null","[]","Optional[/**
 * Not-after date from the validity period
 */
]","\android\net\http\SslCertificate.java"
"VALID_NOT_BEFORE","false","false","true","true","true","String","""valid-not-before""","[]","Optional.empty","\android\net\http\SslCertificate.java"
"mIssuedTo","false","false","true","false","false","DName","null","[]","Optional[/**
 * Name of the entity this certificate is issued to
 */
]","\android\net\http\SslCertificate.java"
"VALID_NOT_AFTER","false","false","true","true","true","String","""valid-not-after""","[]","Optional.empty","\android\net\http\SslCertificate.java"
"mUName","false","false","true","false","false","String","null","[]","Optional[/**
 * Organizational Unit (OU) component of the name
 */
]","\android\net\http\SslCertificate.java"
"mCName","false","false","true","false","false","String","null","[]","Optional[/**
 * Common-name (CN) component of the name
 */
]","\android\net\http\SslCertificate.java"
"mDName","false","false","true","false","false","String","null","[]","Optional[/**
 * Distinguished name (normally includes CN, O, and OU names)
 */
]","\android\net\http\SslCertificate.java"
"ISSUED_BY","false","false","true","true","true","String","""issued-by""","[]","Optional.empty","\android\net\http\SslCertificate.java"
"mIssuedBy","false","false","true","false","false","DName","null","[]","Optional[/**
 * Name of the entity this certificate is issued by
 */
]","\android\net\http\SslCertificate.java"
"mValidNotBefore","false","false","true","false","false","Date","null","[]","Optional[/**
 * Not-before date from the validity period
 */
]","\android\net\http\SslCertificate.java"
"mOName","false","false","true","false","false","String","null","[]","Optional[/**
 * Organization (O) component of the name
 */
]","\android\net\http\SslCertificate.java"
"ISO_8601_DATE_FORMAT","false","false","true","true","false","String","""yyyy-MM-dd HH:mm:ssZ""","[]","Optional[/**
 * SimpleDateFormat pattern for an ISO 8601 date
 */
]","\android\net\http\SslCertificate.java"
"ISSUED_TO","false","false","true","true","true","String","""issued-to""","[]","Optional[/**
 * Bundle key names
 */
]","\android\net\http\SslCertificate.java"
"DEFAULT_SYNC_MIN_GZIP_BYTES","true","false","false","true","false","long","256","[]","Optional[// Gzip of data shorter than this probably won't be worthwhile
]","\android\net\http\AndroidHttpClient.java"
"delegate","false","false","true","false","true","HttpClient","null","[]","Optional.empty","\android\net\http\AndroidHttpClient.java"
"mLeakedException","false","false","true","false","false","RuntimeException","new IllegalStateException(""AndroidHttpClient created and never closed"")","[]","Optional.empty","\android\net\http\AndroidHttpClient.java"
"curlConfiguration","false","false","true","false","false","LoggingConfiguration","null","[]","Optional[/**
 * cURL logging configuration.
 */
]","\android\net\http\AndroidHttpClient.java"
"TAG","false","false","true","true","true","String","""AndroidHttpClient""","[]","Optional.empty","\android\net\http\AndroidHttpClient.java"
"tag","false","false","true","false","true","String","null","[]","Optional.empty","\android\net\http\AndroidHttpClient.java"
"level","false","false","true","false","true","int","null","[]","Optional.empty","\android\net\http\AndroidHttpClient.java"
"sThreadCheckInterceptor","false","false","true","true","true","HttpRequestInterceptor","new HttpRequestInterceptor() {

    public void process(HttpRequest request, HttpContext context) {
        // Prevent the HttpRequest from being sent on the main thread
        if (Looper.myLooper() != null && Looper.myLooper() == Looper.getMainLooper()) {
            throw new RuntimeException(""This thread forbids HTTP requests"");
        }
    }
}","[]","Optional[/**
 * Interceptor throws an exception if the executing thread is blocked
 */
]","\android\net\http\AndroidHttpClient.java"
"QUERIES_PROJECTION_1LINE","true","false","false","true","true","String","new String[] { SuggestionColumns._ID, SuggestionColumns.DATE, SuggestionColumns.QUERY, SuggestionColumns.DISPLAY1 }","[]","Optional[/**
 * This is the database projection that can be used to view saved queries, when
 * configured for one-line operation.
 */
]","\android\provider\SearchRecentSuggestions.java"
"QUERIES_PROJECTION_DISPLAY1_INDEX","true","false","false","true","true","int","3","[]","Optional[/**
 * Index into the provided query projections.  For use with Cursor.update methods.
 */
]","\android\provider\SearchRecentSuggestions.java"
"QUERY","true","false","false","true","true","String","""query""","[]","Optional.empty","\android\provider\SearchRecentSuggestions.java"
"mSuggestionsUri","false","false","true","false","false","Uri","null","[]","Optional.empty","\android\provider\SearchRecentSuggestions.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional[// client-provided configuration values
]","\android\provider\SearchRecentSuggestions.java"
"mTwoLineDisplay","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\provider\SearchRecentSuggestions.java"
"DISPLAY1","true","false","false","true","true","String","""display1""","[]","Optional.empty","\android\provider\SearchRecentSuggestions.java"
"DISPLAY2","true","false","false","true","true","String","""display2""","[]","Optional.empty","\android\provider\SearchRecentSuggestions.java"
"MAX_HISTORY_COUNT","false","false","true","true","true","int","250","[]","Optional[/*
     * Set a cap on the count of items in the suggestions table, to
     * prevent db and layout operations from dragging to a crawl. Revisit this
     * cap when/if db/layout performance improvements are made.
     */
]","\android\provider\SearchRecentSuggestions.java"
"TRUNCATE_HISTORY_PROJECTION","false","false","true","true","true","String","new String[] { SuggestionColumns._ID, SuggestionColumns.DATE }","[]","Optional[/* columns needed to determine whether to truncate history */
]","\android\provider\SearchRecentSuggestions.java"
"QUERIES_PROJECTION_2LINE","true","false","false","true","true","String","new String[] { SuggestionColumns._ID, SuggestionColumns.DATE, SuggestionColumns.QUERY, SuggestionColumns.DISPLAY1, SuggestionColumns.DISPLAY2 }","[]","Optional[/**
 * This is the database projection that can be used to view saved queries, when
 * configured for two-line operation.
 */
]","\android\provider\SearchRecentSuggestions.java"
"QUERIES_PROJECTION_DISPLAY2_INDEX","true","false","false","true","true","int","4","[]","Optional[// only when 2line active
]","\android\provider\SearchRecentSuggestions.java"
"LOG_TAG","false","false","true","true","true","String","""SearchSuggestions""","[]","Optional[// debugging support
]","\android\provider\SearchRecentSuggestions.java"
"QUERIES_PROJECTION_QUERY_INDEX","true","false","false","true","true","int","2","[]","Optional[/**
 * Index into the provided query projections.  For use with Cursor.update methods.
 */
]","\android\provider\SearchRecentSuggestions.java"
"DBG_SUGGESTION_TIMESTAMPS","false","false","true","true","true","int","0","[]","Optional[// DELETE ME (eventually)
]","\android\provider\SearchRecentSuggestions.java"
"DATE","true","false","false","true","true","String","""date""","[]","Optional.empty","\android\provider\SearchRecentSuggestions.java"
"mQueriesProjection","false","false","true","false","false","String","null","[]","Optional.empty","\android\provider\SearchRecentSuggestions.java"
"QUERIES_PROJECTION_DATE_INDEX","true","false","false","true","true","int","1","[]","Optional[/**
 * Index into the provided query projections.  For use with Cursor.update methods.
 */
]","\android\provider\SearchRecentSuggestions.java"
"mAuthority","false","false","true","false","false","String","null","[]","Optional.empty","\android\provider\SearchRecentSuggestions.java"
"LOG_TAG","false","false","false","true","true","String","""Gestures""","[]","Optional.empty","\android\gesture\GestureConstants.java"
"STROKE_STRING_BUFFER_SIZE","false","false","false","true","true","int","1024","[]","Optional.empty","\android\gesture\GestureConstants.java"
"STROKE_POINT_BUFFER_SIZE","false","false","false","true","true","int","100","[]","Optional[// number of points
]","\android\gesture\GestureConstants.java"
"IO_BUFFER_SIZE","false","false","false","true","true","int","32 * 1024","[]","Optional[// 32K
]","\android\gesture\GestureConstants.java"
"mCandidatesFrame","false","false","false","false","false","FrameLayout","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mIsFullscreen","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mInputViewStarted","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mImm","false","false","false","false","false","InputMethodManager","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mInShowWindow","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mFullscreenApplied","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mCurCompletions","false","false","false","false","false","CompletionInfo","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mExtractedText","false","false","false","false","false","ExtractedText","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mExtractAccessories","false","false","false","false","false","ViewGroup","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mExtractFrame","false","false","false","false","false","FrameLayout","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mIsInputViewShown","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"TOUCHABLE_INSETS_VISIBLE","true","false","false","true","true","int","ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_VISIBLE","[]","Optional[/**
 * Option for {@link #touchableInsets}: the area inside of
 * the visible insets can be touched.
 */
]","\android\inputmethodservice\InputMethodService.java"
"touchableInsets","true","false","false","false","false","int","null","[]","Optional[/**
 * Determine which area of the window is touchable by the user.  May
 * be one of: {@link #TOUCHABLE_INSETS_FRAME},
 * {@link #TOUCHABLE_INSETS_CONTENT}, or {@link #TOUCHABLE_INSETS_VISIBLE}.
 */
]","\android\inputmethodservice\InputMethodService.java"
"mExtractView","false","false","false","false","false","View","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mWindowAdded","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mWindow","false","false","false","false","false","SoftInputWindow","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"MOVEMENT_DOWN","false","false","false","true","true","int","-1","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mExtractEditText","false","false","false","false","false","ExtractEditText","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mCandidatesVisibility","false","false","false","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"visibleTopInsets","true","false","false","false","false","int","null","[]","Optional[/**
 * This is the top part of the UI that is visibly covering the
 * application behind it.  This provides finer-grained control over
 * visibility, allowing you to change it relatively frequently (such
 * as hiding or showing candidates) without disrupting the underlying
 * UI too much.  For example, this will never resize the application
 * UI, will only pan if needed to make the current focus visible, and
 * will not aggressively move the pan position when this changes unless
 * needed to make the focus visible.  This value is relative to the top edge
 * of the input method window.
 */
]","\android\inputmethodservice\InputMethodService.java"
"mStartedInputConnection","false","false","false","false","false","InputConnection","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mExtractViewHidden","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mTmpInsets","false","false","false","false","true","Insets","new Insets()","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mWindowWasVisible","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mStatusIcon","false","false","false","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mInputStarted","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mTmpLocation","false","false","false","false","true","int","new int[2]","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mCandidatesViewStarted","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mRootView","false","false","false","false","false","View","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mLastShowInputRequested","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mExtractedToken","false","false","false","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mToken","false","false","false","false","false","IBinder","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mInputFrame","false","false","false","false","false","FrameLayout","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"TAG","false","false","false","true","true","String","""InputMethodService""","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mShowInputFlags","false","false","false","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mInputBinding","false","false","false","false","false","InputBinding","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"TOUCHABLE_INSETS_CONTENT","true","false","false","true","true","int","ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_CONTENT","[]","Optional[/**
 * Option for {@link #touchableInsets}: the area inside of
 * the content insets can be touched.
 */
]","\android\inputmethodservice\InputMethodService.java"
"mTheme","false","false","false","false","false","int","android.R.style.Theme_InputMethod","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mShowInputRequested","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mShowInputForced","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mInflater","false","false","false","false","false","LayoutInflater","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mInputConnection","false","false","false","false","false","InputConnection","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"contentTopInsets","true","false","false","false","false","int","null","[]","Optional[/**
 * This is the top part of the UI that is the main content.  It is
 * used to determine the basic space needed, to resize/pan the
 * application behind.  It is assumed that this inset does not
 * change very much, since any change will cause a full resize/pan
 * of the application behind.  This value is relative to the top edge
 * of the input method window.
 */
]","\android\inputmethodservice\InputMethodService.java"
"MOVEMENT_UP","false","false","false","true","true","int","-2","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mInitialized","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"TOUCHABLE_INSETS_FRAME","true","false","false","true","true","int","ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_FRAME","[]","Optional[/**
 * Option for {@link #touchableInsets}: the entire window frame
 * can be touched.
 */
]","\android\inputmethodservice\InputMethodService.java"
"mFullscreenArea","false","false","false","false","false","ViewGroup","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mWindowCreated","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mInputView","false","false","false","false","false","View","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mInsetsComputer","false","false","false","false","true","ViewTreeObserver.OnComputeInternalInsetsListener","new ViewTreeObserver.OnComputeInternalInsetsListener() {

    public void onComputeInternalInsets(ViewTreeObserver.InternalInsetsInfo info) {
        if (isExtractViewShown()) {
            // In true fullscreen mode, we just say the window isn't covering
            // any content so we don't impact whatever is behind.
            View decor = getWindow().getWindow().getDecorView();
            info.contentInsets.top = info.visibleInsets.top = decor.getHeight();
            info.setTouchableInsets(ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_FRAME);
        } else {
            onComputeInsets(mTmpInsets);
            info.contentInsets.top = mTmpInsets.contentTopInsets;
            info.visibleInsets.top = mTmpInsets.visibleTopInsets;
            info.setTouchableInsets(mTmpInsets.touchableInsets);
        }
    }
}","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mInputEditorInfo","false","false","false","false","false","EditorInfo","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mWindowVisible","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mActionClickListener","false","false","false","false","true","View.OnClickListener","new View.OnClickListener() {

    public void onClick(View v) {
        final EditorInfo ei = getCurrentInputEditorInfo();
        final InputConnection ic = getCurrentInputConnection();
        if (ei != null && ic != null) {
            if (ei.actionId != 0) {
                ic.performEditorAction(ei.actionId);
            } else if ((ei.imeOptions & EditorInfo.IME_MASK_ACTION) != EditorInfo.IME_ACTION_NONE) {
                ic.performEditorAction(ei.imeOptions & EditorInfo.IME_MASK_ACTION);
            }
        }
    }
}","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"DEBUG","false","false","false","true","true","boolean","false","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mThemeAttrs","false","false","false","false","false","TypedArray","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mExtractAction","false","false","false","false","false","Button","null","[]","Optional.empty","\android\inputmethodservice\InputMethodService.java"
"mColumns","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\PackedObjectVector.java"
"mRowGapStart","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\PackedObjectVector.java"
"mRowGapLength","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\PackedObjectVector.java"
"mValues","false","false","true","false","false","Object","null","[]","Optional.empty","\android\text\PackedObjectVector.java"
"mRows","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\PackedObjectVector.java"
"mInstance","false","false","true","true","false","DdmHandleProfiling","new DdmHandleProfiling()","[]","Optional.empty","\android\ddm\DdmHandleProfiling.java"
"CHUNK_MPSS","true","false","false","true","true","int","type(""MPSS"")","[]","Optional.empty","\android\ddm\DdmHandleProfiling.java"
"CHUNK_MPSE","true","false","false","true","true","int","type(""MPSE"")","[]","Optional.empty","\android\ddm\DdmHandleProfiling.java"
"CHUNK_MPRQ","true","false","false","true","true","int","type(""MPRQ"")","[]","Optional.empty","\android\ddm\DdmHandleProfiling.java"
"CHUNK_MPRS","true","false","false","true","true","int","type(""MPRS"")","[]","Optional.empty","\android\ddm\DdmHandleProfiling.java"
"CHUNK_MPRE","true","false","false","true","true","int","type(""MPRE"")","[]","Optional.empty","\android\ddm\DdmHandleProfiling.java"
"FILE_NAME","false","true","false","true","true","String","""; filename=""","[]","Optional[/**
 * Attachment's file name
 */
]","\com\android\internal\http\multipart\FilePart.java"
"DEFAULT_TRANSFER_ENCODING","true","false","false","true","true","String","""binary""","[]","Optional[/**
 * Default transfer encoding of file attachments.
 */
]","\com\android\internal\http\multipart\FilePart.java"
"source","false","false","true","false","false","PartSource","null","[]","Optional[/**
 * Source of the file part.
 */
]","\com\android\internal\http\multipart\FilePart.java"
"DEFAULT_CONTENT_TYPE","true","false","false","true","true","String","""application/octet-stream""","[]","Optional[/**
 * Default content encoding of file attachments.
 */
]","\com\android\internal\http\multipart\FilePart.java"
"LOG","false","false","true","true","true","Log","LogFactory.getLog(FilePart.class)","[]","Optional[/**
 * Log object for this class.
 */
]","\com\android\internal\http\multipart\FilePart.java"
"FILE_NAME_BYTES","false","false","true","true","true","byte","EncodingUtils.getAsciiBytes(FILE_NAME)","[]","Optional[/**
 * Attachment's file name as a byte array
 */
]","\com\android\internal\http\multipart\FilePart.java"
"DEFAULT_CHARSET","true","false","false","true","true","String","""ISO-8859-1""","[]","Optional[/**
 * Default charset of file attachments.
 */
]","\com\android\internal\http\multipart\FilePart.java"
"transferEncoding","false","false","true","false","false","String","null","[]","Optional[/**
 * The transfer encoding.
 */
]","\com\android\internal\http\multipart\PartBase.java"
"name","false","false","true","false","false","String","null","[]","Optional[/**
 * Name of the file part.
 */
]","\com\android\internal\http\multipart\PartBase.java"
"charSet","false","false","true","false","false","String","null","[]","Optional[/**
 * Content encoding of the file part.
 */
]","\com\android\internal\http\multipart\PartBase.java"
"contentType","false","false","true","false","false","String","null","[]","Optional[/**
 * Content type of the file part.
 */
]","\com\android\internal\http\multipart\PartBase.java"
"mView","false","false","true","false","false","View","null","[]","Optional.empty","\android\text\method\CharacterPickerDialog.java"
"mOptions","false","false","true","false","false","String","null","[]","Optional.empty","\android\text\method\CharacterPickerDialog.java"
"mText","false","false","true","false","false","Editable","null","[]","Optional.empty","\android\text\method\CharacterPickerDialog.java"
"mInsert","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\text\method\CharacterPickerDialog.java"
"mCancelButton","false","false","true","false","false","Button","null","[]","Optional.empty","\android\text\method\CharacterPickerDialog.java"
"mInflater","false","false","true","false","false","LayoutInflater","null","[]","Optional.empty","\android\text\method\CharacterPickerDialog.java"
"mText2","false","false","true","false","false","TextView","null","[]","Optional.empty","\android\widget\TwoLineListItem.java"
"mText1","false","false","true","false","false","TextView","null","[]","Optional.empty","\android\widget\TwoLineListItem.java"
"MULTIPART_BOUNDARY","true","false","false","true","true","String","""http.method.multipart.boundary""","[]","Optional[/**
 * Sets the value to use as the multipart boundary.
 * <p>
 * This parameter expects a value if type {@link String}.
 * </p>
 */
]","\com\android\internal\http\multipart\MultipartEntity.java"
"multipartBoundary","false","false","true","false","false","byte","null","[]","Optional.empty","\com\android\internal\http\multipart\MultipartEntity.java"
"MULTIPART_FORM_CONTENT_TYPE","false","false","true","true","true","String","""multipart/form-data""","[]","Optional[/**
 * The Content-Type for multipart/form-data.
 */
]","\com\android\internal\http\multipart\MultipartEntity.java"
"parts","false","true","false","false","false","Part","null","[]","Optional[/**
 * The MIME parts as set by the constructor
 */
]","\com\android\internal\http\multipart\MultipartEntity.java"
"contentConsumed","false","false","true","false","false","boolean","false","[]","Optional.empty","\com\android\internal\http\multipart\MultipartEntity.java"
"params","false","false","true","false","false","HttpParams","null","[]","Optional.empty","\com\android\internal\http\multipart\MultipartEntity.java"
"log","false","false","true","true","true","Log","LogFactory.getLog(MultipartEntity.class)","[]","Optional.empty","\com\android\internal\http\multipart\MultipartEntity.java"
"MULTIPART_CHARS","false","false","true","true","false","byte","EncodingUtils.getAsciiBytes(""-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"")","[]","Optional[/**
 * The pool of ASCII chars to be used for generating a multipart boundary.
 */
]","\com\android\internal\http\multipart\MultipartEntity.java"
"mAppData","false","false","true","false","false","byte","null","[]","Optional.empty","\android\nfc\tech\NfcB.java"
"EXTRA_PROTINFO","true","false","false","true","true","String","""protinfo""","[]","Optional[/**
 * @hide
 */
]","\android\nfc\tech\NfcB.java"
"mProtInfo","false","false","true","false","false","byte","null","[]","Optional.empty","\android\nfc\tech\NfcB.java"
"EXTRA_APPDATA","true","false","false","true","true","String","""appdata""","[]","Optional[/**
 * @hide
 */
]","\android\nfc\tech\NfcB.java"
"bpos","false","false","true","false","false","int","0","[]","Optional.empty","\android\util\Base64OutputStream.java"
"EMPTY","false","false","true","true","false","byte","new byte[0]","[]","Optional.empty","\android\util\Base64OutputStream.java"
"flags","false","false","true","false","true","int","null","[]","Optional.empty","\android\util\Base64OutputStream.java"
"coder","false","false","true","false","true","Base64.Coder","null","[]","Optional.empty","\android\util\Base64OutputStream.java"
"buffer","false","false","true","false","false","byte","null","[]","Optional.empty","\android\util\Base64OutputStream.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<PkgUsageStats>","new Parcelable.Creator<PkgUsageStats>() {

    public PkgUsageStats createFromParcel(Parcel in) {
        return new PkgUsageStats(in);
    }

    public PkgUsageStats[] newArray(int size) {
        return new PkgUsageStats[size];
    }
}","[]","Optional.empty","\com\android\internal\os\PkgUsageStats.java"
"usageTime","true","false","false","false","false","long","null","[]","Optional.empty","\com\android\internal\os\PkgUsageStats.java"
"launchCount","true","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\os\PkgUsageStats.java"
"packageName","true","false","false","false","false","String","null","[]","Optional.empty","\com\android\internal\os\PkgUsageStats.java"
"mNumSuccessfulYieldPoints","false","false","true","false","true","int","null","[]","Optional.empty","\android\content\OperationApplicationException.java"
"mFactory","false","false","false","false","false","ViewFactory","null","[]","Optional[/**
 * The factory used to create the two children.
 */
]","\android\widget\ViewSwitcher.java"
"FLAG_SUPPORTS_SCREEN_DENSITIES","true","false","false","true","true","int","1 << 13","[]","Optional[/**
 * Value for {@link #flags}: true when the application knows how to
 * accomodate different screen densities.  Corresponds to
 * {@link android.R.styleable#AndroidManifestSupportsScreens_anyDensity
 * android:anyDensity}.
 */
]","\android\content\pm\ApplicationInfo.java"
"FLAG_SUPPORTS_SMALL_SCREENS","true","false","false","true","true","int","1 << 9","[]","Optional[/**
 * Value for {@link #flags}: true when the application's window can be
 * reduced in size for smaller screens.  Corresponds to
 * {@link android.R.styleable#AndroidManifestSupportsScreens_smallScreens
 * android:smallScreens}.
 */
]","\android\content\pm\ApplicationInfo.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<ApplicationInfo>","new Parcelable.Creator<ApplicationInfo>() {

    public ApplicationInfo createFromParcel(Parcel source) {
        return new ApplicationInfo(source);
    }

    public ApplicationInfo[] newArray(int size) {
        return new ApplicationInfo[size];
    }
}","[]","Optional.empty","\android\content\pm\ApplicationInfo.java"
"backupAgentName","true","false","false","false","false","String","null","[]","Optional[/**
 * Class implementing the Application's backup functionality.  From
 * the ""backupAgent"" attribute.  This is an optional attribute and
 * will be null if the application does not specify it in its manifest.
 *
 * <p>If android:allowBackup is set to false, this attribute is ignored.
 */
]","\android\content\pm\ApplicationInfo.java"
"manageSpaceActivityName","true","false","false","false","false","String","null","[]","Optional[/**
 * Class implementing the Application's manage space
 * functionality.  From the ""manageSpaceActivity""
 * attribute. This is an optional attribute and will be null if
 * applications don't specify it in their manifest
 */
]","\android\content\pm\ApplicationInfo.java"
"FLAG_VM_SAFE_MODE","true","false","false","true","true","int","1 << 14","[]","Optional[/**
 * Value for {@link #flags}: set to true if this application would like to
 * request the VM to operate under the safe mode. Comes from
 * {@link android.R.styleable#AndroidManifestApplication_vmSafeMode
 * android:vmSafeMode} of the &lt;application&gt; tag.
 */
]","\android\content\pm\ApplicationInfo.java"
"FLAG_SUPPORTS_LARGE_SCREENS","true","false","false","true","true","int","1 << 11","[]","Optional[/**
 * Value for {@link #flags}: true when the application's window can be
 * increased in size for larger screens.  Corresponds to
 * {@link android.R.styleable#AndroidManifestSupportsScreens_largeScreens
 * android:largeScreens}.
 */
]","\android\content\pm\ApplicationInfo.java"
"FLAG_ALLOW_BACKUP","true","false","false","true","true","int","1 << 15","[]","Optional[/**
 * Value for {@link #flags}: set to <code>false</code> if the application does not wish
 * to permit any OS-driven backups of its data; <code>true</code> otherwise.
 *
 * <p>Comes from the
 * {@link android.R.styleable#AndroidManifestApplication_allowBackup android:allowBackup}
 * attribute of the &lt;application&gt; tag.
 */
]","\android\content\pm\ApplicationInfo.java"
"FLAG_SUPPORTS_XLARGE_SCREENS","true","false","false","true","true","int","1 << 19","[]","Optional[/**
 * Value for {@link #flags}: true when the application's window can be
 * increased in size for extra large screens.  Corresponds to
 * {@link android.R.styleable#AndroidManifestSupportsScreens_xlargeScreens
 * android:xlargeScreens}.
 * @hide
 */
]","\android\content\pm\ApplicationInfo.java"
"uid","true","false","false","false","false","int","null","[]","Optional[/**
 * The kernel user-ID that has been assigned to this application;
 * currently this is not a unique ID (multiple applications can have
 * the same uid).
 */
]","\android\content\pm\ApplicationInfo.java"
"FLAG_RESTORE_ANY_VERSION","true","false","false","true","true","int","1 << 17","[]","Optional[/**
 * Value for {@link #flags}: Set to <code>true</code> if the application's backup
 * agent claims to be able to handle restore data even ""from the future,""
 * i.e. from versions of the application with a versionCode greater than
 * the one currently installed on the device.  <i>Use with caution!</i>  By default
 * this attribute is <code>false</code> and the Backup Manager will ensure that data
 * from ""future"" versions of the application are never supplied during a restore operation.
 *
 * <p>If
 * {@link android.R.styleable#AndroidManifestApplication_allowBackup android:allowBackup}
 * is set to <code>false</code> or no
 * {@link android.R.styleable#AndroidManifestApplication_backupAgent android:backupAgent}
 * is specified, this flag will be ignored.
 *
 * <p>Comes from the
 * {@link android.R.styleable#AndroidManifestApplication_restoreAnyVersion android:restoreAnyVersion}
 * attribute of the &lt;application&gt; tag.
 */
]","\android\content\pm\ApplicationInfo.java"
"FLAG_EXTERNAL_STORAGE","true","false","false","true","true","int","1 << 18","[]","Optional[/**
 * Value for {@link #flags}: Set to true if the application is
 * currently installed on external/removable/unprotected storage.  Such
 * applications may not be available if their storage is not currently
 * mounted.  When the storage it is on is not available, it will look like
 * the application has been uninstalled (its .apk is no longer available)
 * but its persistent data is not removed.
 */
]","\android\content\pm\ApplicationInfo.java"
"FLAG_ALLOW_TASK_REPARENTING","true","false","false","true","true","int","1 << 5","[]","Optional[/**
 * Value for {@link #flags}: default value for the corresponding ActivityInfo flag.
 * Comes from {@link android.R.styleable#AndroidManifestApplication_allowTaskReparenting
 * android:allowTaskReparenting} of the &lt;application&gt; tag.
 */
]","\android\content\pm\ApplicationInfo.java"
"FLAG_CANT_SAVE_STATE","true","false","false","true","true","int","1 << 27","[]","Optional[/**
 * Value for {@link #flags}: set to <code>true</code> if the application
 * has reported that it is heavy-weight, and thus can not participate in
 * the normal application lifecycle.
 *
 * <p>Comes from the
 * {@link android.R.styleable#AndroidManifestApplication_cantSaveState android:cantSaveState}
 * attribute of the &lt;application&gt; tag.
 *
 * {@hide}
 */
]","\android\content\pm\ApplicationInfo.java"
"FLAG_SUPPORTS_NORMAL_SCREENS","true","false","false","true","true","int","1 << 10","[]","Optional[/**
 * Value for {@link #flags}: true when the application's window can be
 * displayed on normal screens.  Corresponds to
 * {@link android.R.styleable#AndroidManifestSupportsScreens_normalScreens
 * android:normalScreens}.
 */
]","\android\content\pm\ApplicationInfo.java"
"dataDir","true","false","false","false","false","String","null","[]","Optional[/**
 * Full path to a directory assigned to the package for its persistent
 * data.
 */
]","\android\content\pm\ApplicationInfo.java"
"nativeLibraryDir","true","false","false","false","false","String","null","[]","Optional[/**
 * Full path to the directory where native JNI libraries are stored.
 */
]","\android\content\pm\ApplicationInfo.java"
"FLAG_FORWARD_LOCK","true","false","false","true","true","int","1 << 29","[]","Optional[/**
 * Value for {@link #flags}: Set to true if the application has been
 * installed using the forward lock option.
 *
 * {@hide}
 */
]","\android\content\pm\ApplicationInfo.java"
"FLAG_RESIZEABLE_FOR_SCREENS","true","false","false","true","true","int","1 << 12","[]","Optional[/**
 * Value for {@link #flags}: true when the application knows how to adjust
 * its UI for different screen sizes.  Corresponds to
 * {@link android.R.styleable#AndroidManifestSupportsScreens_resizeable
 * android:resizeable}.
 */
]","\android\content\pm\ApplicationInfo.java"
"sourceDir","true","false","false","false","false","String","null","[]","Optional[/**
 * Full path to the location of this package.
 */
]","\android\content\pm\ApplicationInfo.java"
"permission","true","false","false","false","false","String","null","[]","Optional[/**
 * Optional name of a permission required to be able to access this
 * application's components.  From the ""permission"" attribute.
 */
]","\android\content\pm\ApplicationInfo.java"
"FLAG_PERSISTENT","true","false","false","true","true","int","1 << 3","[]","Optional[/**
 * Value for {@link #flags}: set to true if this application is persistent.
 * Comes from {@link android.R.styleable#AndroidManifestApplication_persistent
 * android:persistent} of the &lt;application&gt; tag.
 */
]","\android\content\pm\ApplicationInfo.java"
"installLocation","true","false","false","false","false","int","PackageInfo.INSTALL_LOCATION_UNSPECIFIED","[]","Optional[/**
 * For convenient access to package's install location.
 * @hide
 */
]","\android\content\pm\ApplicationInfo.java"
"FLAG_HAS_CODE","true","false","false","true","true","int","1 << 2","[]","Optional[/**
 * Value for {@link #flags}: set to true if this application has code
 * associated with it.  Comes
 * from {@link android.R.styleable#AndroidManifestApplication_hasCode
 * android:hasCode} of the &lt;application&gt; tag.
 */
]","\android\content\pm\ApplicationInfo.java"
"FLAG_SYSTEM","true","false","false","true","true","int","1 << 0","[]","Optional[/**
 * Value for {@link #flags}: if set, this application is installed in the
 * device's system image.
 */
]","\android\content\pm\ApplicationInfo.java"
"mPM","false","false","true","false","false","PackageManager","null","[]","Optional.empty","\android\content\pm\ApplicationInfo.java"
"sharedLibraryFiles","true","false","false","false","false","String","null","[]","Optional[/**
 * Paths to all shared libraries this application is linked against.  This
 * field is only set if the {@link PackageManager#GET_SHARED_LIBRARY_FILES
 * PackageManager.GET_SHARED_LIBRARY_FILES} flag was used when retrieving
 * the structure.
 */
]","\android\content\pm\ApplicationInfo.java"
"sCollator","false","false","true","false","true","Collator","Collator.getInstance()","[]","Optional.empty","\android\content\pm\ApplicationInfo.java"
"FLAG_ALLOW_CLEAR_USER_DATA","true","false","false","true","true","int","1 << 6","[]","Optional[/**
 * Value for {@link #flags}: default value for the corresponding ActivityInfo flag.
 * Comes from {@link android.R.styleable#AndroidManifestApplication_allowClearUserData
 * android:allowClearUserData} of the &lt;application&gt; tag.
 */
]","\android\content\pm\ApplicationInfo.java"
"flags","true","false","false","false","false","int","0","[]","Optional[/**
 * Flags associated with the application.  Any combination of
 * {@link #FLAG_SYSTEM}, {@link #FLAG_DEBUGGABLE}, {@link #FLAG_HAS_CODE},
 * {@link #FLAG_PERSISTENT}, {@link #FLAG_FACTORY_TEST}, and
 * {@link #FLAG_ALLOW_TASK_REPARENTING}
 * {@link #FLAG_ALLOW_CLEAR_USER_DATA}, {@link #FLAG_UPDATED_SYSTEM_APP},
 * {@link #FLAG_TEST_ONLY}, {@link #FLAG_SUPPORTS_SMALL_SCREENS},
 * {@link #FLAG_SUPPORTS_NORMAL_SCREENS},
 * {@link #FLAG_SUPPORTS_LARGE_SCREENS},
 * {@link #FLAG_RESIZEABLE_FOR_SCREENS},
 * {@link #FLAG_SUPPORTS_SCREEN_DENSITIES}, {@link #FLAG_VM_SAFE_MODE}
 */
]","\android\content\pm\ApplicationInfo.java"
"className","true","false","false","false","false","String","null","[]","Optional[/**
 * Class implementing the Application object.  From the ""class""
 * attribute.
 */
]","\android\content\pm\ApplicationInfo.java"
"enabled","true","false","false","false","false","boolean","true","[]","Optional[/**
 * When false, indicates that all components within this application are
 * considered disabled, regardless of their individually set enabled status.
 */
]","\android\content\pm\ApplicationInfo.java"
"theme","true","false","false","false","false","int","null","[]","Optional[/**
 * A style resource identifier (in the package's resources) of the
 * default visual theme of the application.  From the ""theme"" attribute
 * or, if not set, 0.
 */
]","\android\content\pm\ApplicationInfo.java"
"FLAG_DEBUGGABLE","true","false","false","true","true","int","1 << 1","[]","Optional[/**
 * Value for {@link #flags}: set to true if this application would like to
 * allow debugging of its
 * code, even when installed on a non-development system.  Comes
 * from {@link android.R.styleable#AndroidManifestApplication_debuggable
 * android:debuggable} of the &lt;application&gt; tag.
 */
]","\android\content\pm\ApplicationInfo.java"
"FLAG_UPDATED_SYSTEM_APP","true","false","false","true","true","int","1 << 7","[]","Optional[/**
 * Value for {@link #flags}: this is set if this application has been
 * install as an update to a built-in system application.
 */
]","\android\content\pm\ApplicationInfo.java"
"taskAffinity","true","false","false","false","false","String","null","[]","Optional[/**
 * Default task affinity of all activities in this application. See
 * {@link ActivityInfo#taskAffinity} for more information.  This comes
 * from the ""taskAffinity"" attribute.
 */
]","\android\content\pm\ApplicationInfo.java"
"processName","true","false","false","false","false","String","null","[]","Optional[/**
 * The name of the process this application should run in.  From the
 * ""process"" attribute or, if not set, the same as
 * <var>packageName</var>.
 */
]","\android\content\pm\ApplicationInfo.java"
"descriptionRes","true","false","false","false","false","int","null","[]","Optional[/**
 * A style resource identifier (in the package's resources) of the
 * description of an application.  From the ""description"" attribute
 * or, if not set, 0.
 */
]","\android\content\pm\ApplicationInfo.java"
"FLAG_NEVER_ENCRYPT","true","false","false","true","true","int","1 << 30","[]","Optional[/**
 * Value for {@link #flags}: this is true if the application has set
 * its android:neverEncrypt to true, false otherwise. It is used to specify
 * that this package specifically ""opts-out"" of a secured file system solution,
 * and will always store its data in-the-clear.
 *
 * {@hide}
 */
]","\android\content\pm\ApplicationInfo.java"
"resourceDirs","true","false","false","false","false","String","null","[]","Optional[/**
 * Full paths to the locations of extra resource packages this application
 * uses. This field is only used if there are extra resource packages,
 * otherwise it is null.
 *
 * {@hide}
 */
]","\android\content\pm\ApplicationInfo.java"
"publicSourceDir","true","false","false","false","false","String","null","[]","Optional[/**
 * Full path to the location of the publicly available parts of this
 * package (i.e. the primary resource package and manifest).  For
 * non-forward-locked apps this will be the same as {@link #sourceDir).
 */
]","\android\content\pm\ApplicationInfo.java"
"FLAG_FACTORY_TEST","true","false","false","true","true","int","1 << 4","[]","Optional[/**
 * Value for {@link #flags}: set to true if this application holds the
 * {@link android.Manifest.permission#FACTORY_TEST} permission and the
 * device is running in factory test mode.
 */
]","\android\content\pm\ApplicationInfo.java"
"targetSdkVersion","true","false","false","false","false","int","null","[]","Optional[/**
 * The minimum SDK version this application targets.  It may run on earlier
 * versions, but it knows how to work with any new behavior added at this
 * version.  Will be {@link android.os.Build.VERSION_CODES#CUR_DEVELOPMENT}
 * if this is a development build and the app is targeting that.  You should
 * compare that this number is >= the SDK version number at which your
 * behavior was introduced.
 */
]","\android\content\pm\ApplicationInfo.java"
"FLAG_TEST_ONLY","true","false","false","true","true","int","1 << 8","[]","Optional[/**
 * Value for {@link #flags}: this is set of the application has specified
 * {@link android.R.styleable#AndroidManifestApplication_testOnly
 * android:testOnly} to be true.
 */
]","\android\content\pm\ApplicationInfo.java"
"FLAG_KILL_AFTER_RESTORE","true","false","false","true","true","int","1 << 16","[]","Optional[/**
 * Value for {@link #flags}: set to <code>false</code> if the application must be kept
 * in memory following a full-system restore operation; <code>true</code> otherwise.
 * Ordinarily, during a full system restore operation each application is shut down
 * following execution of its agent's onRestore() method.  Setting this attribute to
 * <code>false</code> prevents this.  Most applications will not need to set this attribute.
 *
 * <p>If
 * {@link android.R.styleable#AndroidManifestApplication_allowBackup android:allowBackup}
 * is set to <code>false</code> or no
 * {@link android.R.styleable#AndroidManifestApplication_backupAgent android:backupAgent}
 * is specified, this flag will be ignored.
 *
 * <p>Comes from the
 * {@link android.R.styleable#AndroidManifestApplication_killAfterRestore android:killAfterRestore}
 * attribute of the &lt;application&gt; tag.
 */
]","\android\content\pm\ApplicationInfo.java"
"mDialog","false","false","true","false","false","Dialog","null","[]","Optional.empty","\android\preference\PreferenceScreen.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<SavedState>","new Parcelable.Creator<SavedState>() {

    public SavedState createFromParcel(Parcel in) {
        return new SavedState(in);
    }

    public SavedState[] newArray(int size) {
        return new SavedState[size];
    }
}","[]","Optional.empty","\android\preference\PreferenceScreen.java"
"mRootAdapter","false","false","true","false","false","ListAdapter","null","[]","Optional.empty","\android\preference\PreferenceScreen.java"
"dialogBundle","false","false","false","false","false","Bundle","null","[]","Optional.empty","\android\preference\PreferenceScreen.java"
"isDialogShowing","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\preference\PreferenceScreen.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<CompletionInfo>","new Parcelable.Creator<CompletionInfo>() {

    public CompletionInfo createFromParcel(Parcel source) {
        return new CompletionInfo(source);
    }

    public CompletionInfo[] newArray(int size) {
        return new CompletionInfo[size];
    }
}","[]","Optional[/**
 * Used to make this class parcelable.
 */
]","\android\view\inputmethod\CompletionInfo.java"
"mId","false","false","false","false","true","long","null","[]","Optional.empty","\android\view\inputmethod\CompletionInfo.java"
"mLabel","false","false","false","false","true","CharSequence","null","[]","Optional.empty","\android\view\inputmethod\CompletionInfo.java"
"mText","false","false","false","false","true","CharSequence","null","[]","Optional.empty","\android\view\inputmethod\CompletionInfo.java"
"mPosition","false","false","false","false","true","int","null","[]","Optional.empty","\android\view\inputmethod\CompletionInfo.java"
"TAG","false","false","false","true","true","String","""CompletionInfo""","[]","Optional.empty","\android\view\inputmethod\CompletionInfo.java"
"ALIAS_META_DATA","true","false","false","false","true","String","""android.app.alias""","[]","Optional[/**
 * This is the name under which you should store in your component the
 * meta-data information about the alias.  It is a reference to an XML
 * resource describing an intent that launches the real application.
 * {@hide}
 */
]","\android\app\AliasActivity.java"
"MIMENAME_UTF_16","true","false","false","true","true","String","""utf-16""","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"NAME_TO_MIBENUM_MAP","false","false","true","true","true","HashMap<String,Integer>","null","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"US_ASCII","true","false","false","true","true","int","0x03","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"UTF_16","true","false","false","true","true","int","0x03F7","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"ANY_CHARSET","true","false","false","true","true","int","0x00","[]","Optional[/**
 * IANA assigned MIB enum numbers.
 *
 * From wap-230-wsp-20010705-a.pdf
 * Any-charset = <Octet 128>
 * Equivalent to the special RFC2616 charset value ""*""
 */
]","\com\google\android\mms\pdu\CharacterSets.java"
"MIMENAME_US_ASCII","true","false","false","true","true","String","""us-ascii""","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"MIMENAME_ISO_8859_1","true","false","false","true","true","String","""iso-8859-1""","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"MIMENAME_ISO_8859_2","true","false","false","true","true","String","""iso-8859-2""","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"MIMENAME_ISO_8859_3","true","false","false","true","true","String","""iso-8859-3""","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"MIMENAME_ISO_8859_4","true","false","false","true","true","String","""iso-8859-4""","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"MIMENAME_ISO_8859_5","true","false","false","true","true","String","""iso-8859-5""","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"MIMENAME_ISO_8859_6","true","false","false","true","true","String","""iso-8859-6""","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"MIMENAME_ISO_8859_7","true","false","false","true","true","String","""iso-8859-7""","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"MIMENAME_ISO_8859_8","true","false","false","true","true","String","""iso-8859-8""","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"MIMENAME_ISO_8859_9","true","false","false","true","true","String","""iso-8859-9""","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"MIMENAME_UTF_8","true","false","false","true","true","String","""utf-8""","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"ISO_8859_9","true","false","false","true","true","int","0x0C","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"ISO_8859_4","true","false","false","true","true","int","0x07","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"MIBENUM_NUMBERS","false","false","true","true","true","int","{ ANY_CHARSET, US_ASCII, ISO_8859_1, ISO_8859_2, ISO_8859_3, ISO_8859_4, ISO_8859_5, ISO_8859_6, ISO_8859_7, ISO_8859_8, ISO_8859_9, SHIFT_JIS, UTF_8, BIG5, UCS2, UTF_16 }","[]","Optional[/**
 * Array of MIB enum numbers.
 */
]","\com\google\android\mms\pdu\CharacterSets.java"
"ISO_8859_3","true","false","false","true","true","int","0x06","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"ISO_8859_2","true","false","false","true","true","int","0x05","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"ISO_8859_1","true","false","false","true","true","int","0x04","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"ISO_8859_8","true","false","false","true","true","int","0x0B","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"ISO_8859_7","true","false","false","true","true","int","0x0A","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"ISO_8859_6","true","false","false","true","true","int","0x09","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"ISO_8859_5","true","false","false","true","true","int","0x08","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"MIMENAME_SHIFT_JIS","true","false","false","true","true","String","""shift_JIS""","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"SHIFT_JIS","true","false","false","true","true","int","0x11","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"DEFAULT_CHARSET_NAME","true","false","false","true","true","String","MIMENAME_UTF_8","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"BIG5","true","false","false","true","true","int","0x07EA","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"UTF_8","true","false","false","true","true","int","0x6A","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"UCS2","true","false","false","true","true","int","0x03E8","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"MIMENAME_ANY_CHARSET","true","false","false","true","true","String","""*""","[]","Optional[/**
 * The Well-known-charset Mime name.
 */
]","\com\google\android\mms\pdu\CharacterSets.java"
"DEFAULT_CHARSET","true","false","false","true","true","int","UTF_8","[]","Optional[/**
 * If the encoding of given data is unsupported, use UTF_8 to decode it.
 */
]","\com\google\android\mms\pdu\CharacterSets.java"
"MIME_NAMES","false","false","true","true","true","String","{ MIMENAME_ANY_CHARSET, MIMENAME_US_ASCII, MIMENAME_ISO_8859_1, MIMENAME_ISO_8859_2, MIMENAME_ISO_8859_3, MIMENAME_ISO_8859_4, MIMENAME_ISO_8859_5, MIMENAME_ISO_8859_6, MIMENAME_ISO_8859_7, MIMENAME_ISO_8859_8, MIMENAME_ISO_8859_9, MIMENAME_SHIFT_JIS, MIMENAME_UTF_8, MIMENAME_BIG5, MIMENAME_UCS2, MIMENAME_UTF_16 }","[]","Optional[/**
 * Array of the names of character sets.
 */
]","\com\google\android\mms\pdu\CharacterSets.java"
"MIMENAME_UCS2","true","false","false","true","true","String","""iso-10646-ucs-2""","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"MIMENAME_BIG5","true","false","false","true","true","String","""big5""","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"MIBENUM_TO_NAME_MAP","false","false","true","true","true","HashMap<Integer,String>","null","[]","Optional.empty","\com\google\android\mms\pdu\CharacterSets.java"
"MIFARE_ULTRALIGHT","true","false","false","true","true","int","9","[]","Optional[/**
 * This technology is an instance of {@link MifareUltralight}.
 * <p>Support for this technology type is optional. If a stack doesn't support this technology
 * type tags using it must still be discovered and present the lower level radio interface
 * technologies in use.
 * @hide
 */
]","\android\nfc\tech\TagTechnology.java"
"NFC_V","true","false","false","true","true","int","5","[]","Optional[/**
 * This technology is an instance of {@link NfcV}.
 * <p>Support for this technology type is mandatory.
 * @hide
 */
]","\android\nfc\tech\TagTechnology.java"
"ISO_DEP","true","false","false","true","true","int","3","[]","Optional[/**
 * This technology is an instance of {@link IsoDep}.
 * <p>Support for this technology type is mandatory.
 * @hide
 */
]","\android\nfc\tech\TagTechnology.java"
"NFC_A","true","false","false","true","true","int","1","[]","Optional[/**
 * This technology is an instance of {@link NfcA}.
 * <p>Support for this technology type is mandatory.
 * @hide
 */
]","\android\nfc\tech\TagTechnology.java"
"NFC_B","true","false","false","true","true","int","2","[]","Optional[/**
 * This technology is an instance of {@link NfcB}.
 * <p>Support for this technology type is mandatory.
 * @hide
 */
]","\android\nfc\tech\TagTechnology.java"
"NDEF","true","false","false","true","true","int","6","[]","Optional[/**
 * This technology is an instance of {@link Ndef}.
 * <p>Support for this technology type is mandatory.
 * @hide
 */
]","\android\nfc\tech\TagTechnology.java"
"NDEF_FORMATABLE","true","false","false","true","true","int","7","[]","Optional[/**
 * This technology is an instance of {@link NdefFormatable}.
 * <p>Support for this technology type is mandatory.
 * @hide
 */
]","\android\nfc\tech\TagTechnology.java"
"NFC_F","true","false","false","true","true","int","4","[]","Optional[/**
 * This technology is an instance of {@link NfcF}.
 * <p>Support for this technology type is mandatory.
 * @hide
 */
]","\android\nfc\tech\TagTechnology.java"
"MIFARE_CLASSIC","true","false","false","true","true","int","8","[]","Optional[/**
 * This technology is an instance of {@link MifareClassic}.
 * <p>Support for this technology type is optional. If a stack doesn't support this technology
 * type tags using it must still be discovered and present the lower level radio interface
 * technologies in use.
 * @hide
 */
]","\android\nfc\tech\TagTechnology.java"
"FEATURE_RELAXED","true","false","false","true","false","String","ExpatPullParser.FEATURE_RELAXED","[]","Optional[/**
 * {@link org.xmlpull.v1.XmlPullParser} ""relaxed"" feature name.
 *
 * @see <a href=""http://xmlpull.org/v1/doc/features.html#relaxed"">
 * specification</a>
 */
]","\android\util\Xml.java"
"expatName","false","false","false","false","true","String","null","[]","Optional.empty","\android\util\Xml.java"
"TYPE","false","false","false","true","true","String","""org.kxml2.io.KXmlParser,org.kxml2.io.KXmlSerializer""","[]","Optional.empty","\android\util\Xml.java"
"instance","false","false","false","true","true","XmlPullParserFactory","null","[]","Optional.empty","\android\util\Xml.java"
"mDropDownLayout","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ResourceCursorAdapter.java"
"mLayout","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ResourceCursorAdapter.java"
"mInflater","false","false","true","false","false","LayoutInflater","null","[]","Optional.empty","\android\widget\ResourceCursorAdapter.java"
"mSmileyToRes","false","false","true","false","false","HashMap<String,Integer>","new HashMap<String, Integer>()","[]","Optional.empty","\com\google\android\util\SmileyResources.java"
"smileys","false","false","true","false","true","TrieNode","new TrieNode()","[]","Optional.empty","\com\google\android\util\SmileyResources.java"
"mDefaultComposingSpans","false","false","true","false","false","Object","null","[]","Optional.empty","\android\view\inputmethod\BaseInputConnection.java"
"mIMM","false","false","false","false","true","InputMethodManager","null","[]","Optional.empty","\android\view\inputmethod\BaseInputConnection.java"
"mDummyMode","false","false","false","false","true","boolean","null","[]","Optional.empty","\android\view\inputmethod\BaseInputConnection.java"
"COMPOSING","false","false","false","true","true","Object","new ComposingText()","[]","Optional.empty","\android\view\inputmethod\BaseInputConnection.java"
"mTargetView","false","false","false","false","true","View","null","[]","Optional.empty","\android\view\inputmethod\BaseInputConnection.java"
"mEditable","false","false","false","false","false","Editable","null","[]","Optional.empty","\android\view\inputmethod\BaseInputConnection.java"
"TAG","false","false","true","true","true","String","""BaseInputConnection""","[]","Optional.empty","\android\view\inputmethod\BaseInputConnection.java"
"mKeyCharacterMap","false","false","false","false","false","KeyCharacterMap","null","[]","Optional.empty","\android\view\inputmethod\BaseInputConnection.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\view\inputmethod\BaseInputConnection.java"
"mAlignment","false","false","true","false","true","Layout.Alignment","null","[]","Optional.empty","\android\text\style\AlignmentSpan.java"
"sCacheSize","false","false","true","false","false","int","100","[]","Optional.empty","\android\emoji\EmojiFactory.java"
"mName","false","false","true","false","false","String","null","[]","Optional.empty","\android\emoji\EmojiFactory.java"
"mCache","false","false","true","false","false","Map<Integer,WeakReference<Bitmap>>","null","[]","Optional[// Cache.
]","\android\emoji\EmojiFactory.java"
"mNativeEmojiFactory","false","false","true","false","false","int","null","[]","Optional[// A pointer to native EmojiFactory object.
]","\android\emoji\EmojiFactory.java"
"mFlags","false","false","true","false","false","int","null","[]","Optional.empty","\android\net\UrlQuerySanitizer.java"
"sUrlAndSpaceLegal","false","false","true","true","true","ValueSanitizer","new IllegalCharacterValueSanitizer(IllegalCharacterValueSanitizer.URL_AND_SPACE_LEGAL)","[]","Optional.empty","\android\net\UrlQuerySanitizer.java"
"URL_LEGAL","true","false","false","true","true","int","NON_7_BIT_ASCII_OK | SQUOTE_OK | AMP_OK | PCT_OK","[]","Optional[/**
 * <ul>
 * <li>Allow characters used by encoded URLs.
 * <li>Deny script URLs.
 * </ul>
 */
]","\android\net\UrlQuerySanitizer.java"
"sAllIllegal","false","false","true","true","true","ValueSanitizer","new IllegalCharacterValueSanitizer(IllegalCharacterValueSanitizer.ALL_ILLEGAL)","[]","Optional.empty","\android\net\UrlQuerySanitizer.java"
"PCT_OK","true","false","false","true","true","int","1 << 8","[]","Optional[/**
 * Allow percent-sign characters ('%')
 */
]","\android\net\UrlQuerySanitizer.java"
"AMP_LEGAL","true","false","false","true","true","int","AMP_OK","[]","Optional[/**
 * <ul>
 * <li>Allow ampersand.
 * <li>Deny script URLs.
 * </ul>
 */
]","\android\net\UrlQuerySanitizer.java"
"URL_AND_SPACE_LEGAL","true","false","false","true","true","int","URL_LEGAL | SPACE_OK","[]","Optional[/**
 * <ul>
 * <li>Allow characters used by encoded URLs.
 * <li>Allow spaces.
 * <li>Deny script URLs.
 * </ul>
 */
]","\android\net\UrlQuerySanitizer.java"
"mAllowUnregisteredParamaters","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\net\UrlQuerySanitizer.java"
"sURLLegal","false","false","true","true","true","ValueSanitizer","new IllegalCharacterValueSanitizer(IllegalCharacterValueSanitizer.URL_LEGAL)","[]","Optional.empty","\android\net\UrlQuerySanitizer.java"
"SCRIPT_URL_OK","true","false","false","true","true","int","1 << 10","[]","Optional[/**
 * Allow text to start with a script URL
 * such as ""javascript:"" or ""vbscript:""
 */
]","\android\net\UrlQuerySanitizer.java"
"mEntries","false","false","true","false","true","HashMap<String,String>","new HashMap<String, String>()","[]","Optional.empty","\android\net\UrlQuerySanitizer.java"
"MIN_SCRIPT_PREFIX_LENGTH","false","false","true","true","true","int","Math.min(JAVASCRIPT_PREFIX.length(), VBSCRIPT_PREFIX.length())","[]","Optional.empty","\android\net\UrlQuerySanitizer.java"
"ALL_OK","true","false","false","true","true","int","0x7ff","[]","Optional[/**
 * Mask with all fields set to OK
 */
]","\android\net\UrlQuerySanitizer.java"
"GT_OK","true","false","false","true","true","int","1 << 6","[]","Optional[/**
 * Allow greater-than characters. ('>')
 */
]","\android\net\UrlQuerySanitizer.java"
"sAmpLegal","false","false","true","true","true","ValueSanitizer","new IllegalCharacterValueSanitizer(IllegalCharacterValueSanitizer.AMP_LEGAL)","[]","Optional.empty","\android\net\UrlQuerySanitizer.java"
"mParameter","true","false","false","false","false","String","null","[]","Optional[/**
 * The unencoded parameter
 */
]","\android\net\UrlQuerySanitizer.java"
"DQUOTE_OK","true","false","false","true","true","int","1 << 3","[]","Optional[/**
 * Allow double quote characters. ('""')
 */
]","\android\net\UrlQuerySanitizer.java"
"sSpaceLegal","false","false","true","true","true","ValueSanitizer","new IllegalCharacterValueSanitizer(IllegalCharacterValueSanitizer.SPACE_LEGAL)","[]","Optional.empty","\android\net\UrlQuerySanitizer.java"
"SPACE_LEGAL","true","false","false","true","true","int","SPACE_OK","[]","Optional[/**
 * <ul>
 * <li>Allow space.
 * <li>Deny script URLs.
 * </ul>
 */
]","\android\net\UrlQuerySanitizer.java"
"sAllButNulAndAngleBracketsLegal","false","false","true","true","true","ValueSanitizer","new IllegalCharacterValueSanitizer(IllegalCharacterValueSanitizer.ALL_BUT_NUL_AND_ANGLE_BRACKETS_LEGAL)","[]","Optional.empty","\android\net\UrlQuerySanitizer.java"
"ALL_BUT_NUL_LEGAL","true","false","false","true","true","int","ALL_OK & ~NUL_OK","[]","Optional[/**
 * <ul>
 * <li>Allow all special characters except Nul. ('\0').
 * <li>Allow script URLs.
 * </ul>
 */
]","\android\net\UrlQuerySanitizer.java"
"mSanitizers","false","false","true","false","true","HashMap<String,ValueSanitizer>","new HashMap<String, ValueSanitizer>()","[]","Optional.empty","\android\net\UrlQuerySanitizer.java"
"ALL_ILLEGAL","true","false","false","true","true","int","0","[]","Optional[/**
 * <ul>
 * <li>Deny all special characters.
 * <li>Deny script URLs.
 * </ul>
 */
]","\android\net\UrlQuerySanitizer.java"
"mEntriesList","false","false","true","false","true","ArrayList<ParameterValuePair>","new ArrayList<ParameterValuePair>()","[]","Optional.empty","\android\net\UrlQuerySanitizer.java"
"ALL_BUT_NUL_AND_ANGLE_BRACKETS_LEGAL","true","false","false","true","true","int","ALL_OK & ~(NUL_OK | LT_OK | GT_OK)","[]","Optional[/**
 * <ul>
 * <li>Allow all but.
 * <ul>
 * <li>Nul ('\0')
 * <li>Angle brackets ('<', '>')
 * </ul>
 * <li>Deny script URLs.
 * </ul>
 */
]","\android\net\UrlQuerySanitizer.java"
"AMP_OK","true","false","false","true","true","int","1 << 7","[]","Optional[/**
 * Allow ampersand characters ('&')
 */
]","\android\net\UrlQuerySanitizer.java"
"NUL_OK","true","false","false","true","true","int","1 << 9","[]","Optional[/**
 * Allow nul characters ('\0')
 */
]","\android\net\UrlQuerySanitizer.java"
"mPreferFirstRepeatedParameter","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\net\UrlQuerySanitizer.java"
"sAmpAndSpaceLegal","false","false","true","true","true","ValueSanitizer","new IllegalCharacterValueSanitizer(IllegalCharacterValueSanitizer.AMP_AND_SPACE_LEGAL)","[]","Optional.empty","\android\net\UrlQuerySanitizer.java"
"NON_7_BIT_ASCII_OK","true","false","false","true","true","int","1 << 2","[]","Optional[/**
 * Allow characters with character codes 128 to 255.
 */
]","\android\net\UrlQuerySanitizer.java"
"ALL_BUT_WHITESPACE_LEGAL","true","false","false","true","true","int","ALL_OK & ~(ALL_WHITESPACE_OK | NUL_OK)","[]","Optional[/**
 * <ul>
 * <li>Allow all special characters except for:
 * <ul>
 * <li>whitespace characters
 * <li>Nul ('\0')
 * </ul>
 * <li>Allow script URLs.
 * </ul>
 */
]","\android\net\UrlQuerySanitizer.java"
"SPACE_OK","true","false","false","true","true","int","1 << 0","[]","Optional[/**
 * Allow space (' ') characters.
 */
]","\android\net\UrlQuerySanitizer.java"
"mUnregisteredParameterValueSanitizer","false","false","true","false","false","ValueSanitizer","getAllIllegal()","[]","Optional.empty","\android\net\UrlQuerySanitizer.java"
"ALL_WHITESPACE_OK","true","false","false","true","true","int","SPACE_OK | OTHER_WHITESPACE_OK","[]","Optional[/**
 * Mask with both regular space and other whitespace OK
 */
]","\android\net\UrlQuerySanitizer.java"
"SQUOTE_OK","true","false","false","true","true","int","1 << 4","[]","Optional[/**
 * Allow single quote characters. ('\'')
 */
]","\android\net\UrlQuerySanitizer.java"
"JAVASCRIPT_PREFIX","false","false","true","true","true","String","""javascript:""","[]","Optional.empty","\android\net\UrlQuerySanitizer.java"
"AMP_AND_SPACE_LEGAL","true","false","false","true","true","int","AMP_OK | SPACE_OK","[]","Optional[/**
 * <ul>
 * <li>Allow ampersand.
 * <li>Allow space.
 * <li>Deny script URLs.
 * </ul>
 */
]","\android\net\UrlQuerySanitizer.java"
"LT_OK","true","false","false","true","true","int","1 << 5","[]","Optional[/**
 * Allow less-than characters. ('<')
 */
]","\android\net\UrlQuerySanitizer.java"
"VBSCRIPT_PREFIX","false","false","true","true","true","String","""vbscript:""","[]","Optional.empty","\android\net\UrlQuerySanitizer.java"
"OTHER_WHITESPACE_OK","true","false","false","true","true","int","1 << 1","[]","Optional[/**
 * Allow whitespace characters other than space. The
 * other whitespace characters are
 * '\t' '\f' '\n' '\r' and '\0x000b' (vertical tab)
 */
]","\android\net\UrlQuerySanitizer.java"
"sAllButWhitespaceLegal","false","false","true","true","true","ValueSanitizer","new IllegalCharacterValueSanitizer(IllegalCharacterValueSanitizer.ALL_BUT_WHITESPACE_LEGAL)","[]","Optional.empty","\android\net\UrlQuerySanitizer.java"
"sAllButNulLegal","false","false","true","true","true","ValueSanitizer","new IllegalCharacterValueSanitizer(IllegalCharacterValueSanitizer.ALL_BUT_NUL_LEGAL)","[]","Optional.empty","\android\net\UrlQuerySanitizer.java"
"mValue","true","false","false","false","false","String","null","[]","Optional[/**
 * The unencoded value
 */
]","\android\net\UrlQuerySanitizer.java"
"SCHEME_STR","false","false","true","true","true","String","""scheme""","[]","Optional.empty","\android\content\IntentFilter.java"
"MATCH_ADJUSTMENT_MASK","true","false","false","true","true","int","0x000ffff","[]","Optional[/**
 * The part of a match constant that applies a quality adjustment to the
 * basic category of match.  The value {@link #MATCH_ADJUSTMENT_NORMAL}
 * is no adjustment; higher numbers than that improve the quality, while
 * lower numbers reduce it.
 */
]","\android\content\IntentFilter.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<IntentFilter>","new Parcelable.Creator<IntentFilter>() {

    public IntentFilter createFromParcel(Parcel source) {
        return new IntentFilter(source);
    }

    public IntentFilter[] newArray(int size) {
        return new IntentFilter[size];
    }
}","[]","Optional.empty","\android\content\IntentFilter.java"
"MATCH_CATEGORY_TYPE","true","false","false","true","true","int","0x0600000","[]","Optional[/**
 * The filter matched an intent with the same data MIME type.
 */
]","\android\content\IntentFilter.java"
"NAME_STR","false","false","true","true","true","String","""name""","[]","Optional.empty","\android\content\IntentFilter.java"
"HOST_STR","false","false","true","true","true","String","""host""","[]","Optional.empty","\android\content\IntentFilter.java"
"mOrigHost","false","false","true","false","true","String","null","[]","Optional.empty","\android\content\IntentFilter.java"
"MATCH_ADJUSTMENT_NORMAL","true","false","false","true","true","int","0x8000","[]","Optional[/**
 * Quality adjustment applied to the category of match that signifies
 * the default, base value; higher numbers improve the quality while
 * lower numbers reduce it.
 */
]","\android\content\IntentFilter.java"
"LITERAL_STR","false","false","true","true","true","String","""literal""","[]","Optional.empty","\android\content\IntentFilter.java"
"mDataAuthorities","false","false","true","false","false","ArrayList<AuthorityEntry>","null","[]","Optional.empty","\android\content\IntentFilter.java"
"SGLOB_STR","false","false","true","true","true","String","""sglob""","[]","Optional.empty","\android\content\IntentFilter.java"
"MATCH_CATEGORY_MASK","true","false","false","true","true","int","0xfff0000","[]","Optional[/**
 * The part of a match constant that describes the category of match
 * that occurred.  May be either {@link #MATCH_CATEGORY_EMPTY},
 * {@link #MATCH_CATEGORY_SCHEME}, {@link #MATCH_CATEGORY_HOST},
 * {@link #MATCH_CATEGORY_PORT},
 * {@link #MATCH_CATEGORY_PATH}, or {@link #MATCH_CATEGORY_TYPE}.  Higher
 * values indicate a better match.
 */
]","\android\content\IntentFilter.java"
"NO_MATCH_TYPE","true","false","false","true","true","int","-1","[]","Optional[/**
 * The filter didn't match due to different MIME types.
 */
]","\android\content\IntentFilter.java"
"mPort","false","false","true","false","true","int","null","[]","Optional.empty","\android\content\IntentFilter.java"
"mPriority","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\IntentFilter.java"
"PATH_STR","false","false","true","true","true","String","""path""","[]","Optional.empty","\android\content\IntentFilter.java"
"MATCH_CATEGORY_PORT","true","false","false","true","true","int","0x0400000","[]","Optional[/**
 * The filter matched an intent with the same data URI scheme and
 * authority host and port.
 */
]","\android\content\IntentFilter.java"
"AUTH_STR","false","false","true","true","true","String","""auth""","[]","Optional.empty","\android\content\IntentFilter.java"
"mActions","false","false","true","false","true","ArrayList<String>","null","[]","Optional.empty","\android\content\IntentFilter.java"
"mCategories","false","false","true","false","false","ArrayList<String>","null","[]","Optional.empty","\android\content\IntentFilter.java"
"SYSTEM_HIGH_PRIORITY","true","false","false","true","true","int","1000","[]","Optional[/**
 * The filter {@link #setPriority} value at which system high-priority
 * receivers are placed; that is, receivers that should execute before
 * application code. Applications should never use filters with this or
 * higher priorities.
 *
 * @see #setPriority
 */
]","\android\content\IntentFilter.java"
"NO_MATCH_DATA","true","false","false","true","true","int","-2","[]","Optional[/**
 * The filter didn't match due to different data URIs.
 */
]","\android\content\IntentFilter.java"
"MATCH_CATEGORY_EMPTY","true","false","false","true","true","int","0x0100000","[]","Optional[/**
 * The filter matched an intent that had no data specified.
 */
]","\android\content\IntentFilter.java"
"NO_MATCH_ACTION","true","false","false","true","true","int","-3","[]","Optional[/**
 * The filter didn't match due to different actions.
 */
]","\android\content\IntentFilter.java"
"MATCH_CATEGORY_PATH","true","false","false","true","true","int","0x0500000","[]","Optional[/**
 * The filter matched an intent with the same data URI scheme,
 * authority, and path.
 */
]","\android\content\IntentFilter.java"
"mDataPaths","false","false","true","false","false","ArrayList<PatternMatcher>","null","[]","Optional.empty","\android\content\IntentFilter.java"
"mHasPartialTypes","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\content\IntentFilter.java"
"SYSTEM_LOW_PRIORITY","true","false","false","true","true","int","-1000","[]","Optional[/**
 * The filter {@link #setPriority} value at which system low-priority
 * receivers are placed; that is, receivers that should execute after
 * application code. Applications should never use filters with this or
 * lower priorities.
 *
 * @see #setPriority
 */
]","\android\content\IntentFilter.java"
"PORT_STR","false","false","true","true","true","String","""port""","[]","Optional.empty","\android\content\IntentFilter.java"
"mDataTypes","false","false","true","false","false","ArrayList<String>","null","[]","Optional.empty","\android\content\IntentFilter.java"
"MATCH_CATEGORY_SCHEME","true","false","false","true","true","int","0x0200000","[]","Optional[/**
 * The filter matched an intent with the same data URI scheme.
 */
]","\android\content\IntentFilter.java"
"NO_MATCH_CATEGORY","true","false","false","true","true","int","-4","[]","Optional[/**
 * The filter didn't match because it required one or more categories
 * that were not in the Intent.
 */
]","\android\content\IntentFilter.java"
"mHost","false","false","true","false","true","String","null","[]","Optional.empty","\android\content\IntentFilter.java"
"mDataSchemes","false","false","true","false","false","ArrayList<String>","null","[]","Optional.empty","\android\content\IntentFilter.java"
"MATCH_CATEGORY_HOST","true","false","false","true","true","int","0x0300000","[]","Optional[/**
 * The filter matched an intent with the same data URI scheme and
 * authority host.
 */
]","\android\content\IntentFilter.java"
"ACTION_STR","false","false","true","true","true","String","""action""","[]","Optional.empty","\android\content\IntentFilter.java"
"TYPE_STR","false","false","true","true","true","String","""type""","[]","Optional.empty","\android\content\IntentFilter.java"
"CAT_STR","false","false","true","true","true","String","""cat""","[]","Optional.empty","\android\content\IntentFilter.java"
"PREFIX_STR","false","false","true","true","true","String","""prefix""","[]","Optional.empty","\android\content\IntentFilter.java"
"mWild","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\content\IntentFilter.java"
"DEFAULT_COMPATIBILITY_INFO","true","false","false","true","true","CompatibilityInfo","new CompatibilityInfo() {

    @Override
    public void setExpandable(boolean expandable) {
        throw new UnsupportedOperationException(""trying to change default compatibility info"");
    }
}","[]","Optional[/**
 * default compatibility info object for compatible applications
 */
]","\android\content\res\CompatibilityInfo.java"
"CONFIGURED_XLARGE_SCREENS","false","false","true","true","true","int","64","[]","Optional[/**
 * A flag mask to tell if the application supports xlarge screens. This differs
 * from XLARGE_SCREENS in that the application that does not support xlarge
 * screens will be marked as supporting them if the current screen is not
 * xlarge.
 */
]","\android\content\res\CompatibilityInfo.java"
"SCALING_REQUIRED","false","false","true","true","true","int","1","[]","Optional[/**
 * A flag mask to tell if the application needs scaling (when mApplicationScale != 1.0f)
 * {@see compatibilityFlag}
 */
]","\android\content\res\CompatibilityInfo.java"
"applicationScale","true","false","false","false","true","float","null","[]","Optional.empty","\android\content\res\CompatibilityInfo.java"
"DEFAULT_PORTRAIT_HEIGHT","true","false","false","true","true","int","480","[]","Optional[/**
 * The default height of the screen in portrait mode.
 */
]","\android\content\res\CompatibilityInfo.java"
"appFlags","true","false","false","false","true","int","null","[]","Optional[/**
 * The flags from ApplicationInfo.
 */
]","\android\content\res\CompatibilityInfo.java"
"mContentInsetsBuffer","false","false","true","false","false","Rect","null","[]","Optional.empty","\android\content\res\CompatibilityInfo.java"
"applicationInvertedScale","true","false","false","false","true","float","null","[]","Optional.empty","\android\content\res\CompatibilityInfo.java"
"DEFAULT_PORTRAIT_WIDTH","true","false","false","true","true","int","320","[]","Optional[/**
 * The default width of the screen in portrait mode.
 */
]","\android\content\res\CompatibilityInfo.java"
"mVisibleInsetsBuffer","false","false","true","false","false","Rect","null","[]","Optional.empty","\android\content\res\CompatibilityInfo.java"
"TAG","false","false","true","true","true","String","""CompatibilityInfo""","[]","Optional.empty","\android\content\res\CompatibilityInfo.java"
"LARGE_SCREENS","false","false","true","true","true","int","8","[]","Optional[/**
 * A flag mask to indicates that the application supports large screens.
 * The flag is set to true if
 * 1) Application declares it supports large screens in manifest file using <supports-screens> or
 * 2) The screen size is not large
 * {@see compatibilityFlag}
 */
]","\android\content\res\CompatibilityInfo.java"
"DBG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\content\res\CompatibilityInfo.java"
"XLARGE_SCREENS","false","false","true","true","true","int","32","[]","Optional[/**
 * A flag mask to indicates that the application supports xlarge screens.
 * The flag is set to true if
 * 1) Application declares it supports xlarge screens in manifest file using <supports-screens> or
 * 2) The screen size is not xlarge
 * {@see compatibilityFlag}
 */
]","\android\content\res\CompatibilityInfo.java"
"CONFIGURED_EXPANDABLE","false","false","true","true","true","int","4","[]","Optional[/**
 * A flag mask to tell if the application is configured to be expandable. This differs
 * from EXPANDABLE in that the application that is not expandable will be
 * marked as expandable if Configuration.SCREENLAYOUT_COMPAT_NEEDED is not set.
 */
]","\android\content\res\CompatibilityInfo.java"
"applicationDensity","true","false","false","false","true","int","null","[]","Optional[/**
 * The effective screen density we have selected for this application.
 */
]","\android\content\res\CompatibilityInfo.java"
"CONFIGURED_LARGE_SCREENS","false","false","true","true","true","int","16","[]","Optional[/**
 * A flag mask to tell if the application supports large screens. This differs
 * from LARGE_SCREENS in that the application that does not support large
 * screens will be marked as supporting them if the current screen is not
 * large.
 */
]","\android\content\res\CompatibilityInfo.java"
"mCompatibilityFlags","false","false","true","false","false","int","null","[]","Optional[/**
 * A compatibility flags
 */
]","\android\content\res\CompatibilityInfo.java"
"EXPANDABLE","false","false","true","true","true","int","2","[]","Optional[/**
 * A flag mask to indicates that the application can expand over the original size.
 * The flag is set to true if
 * 1) Application declares its expandable in manifest file using <supports-screens> or
 * 2) Configuration.SCREENLAYOUT_COMPAT_NEEDED is not set
 * {@see compatibilityFlag}
 */
]","\android\content\res\CompatibilityInfo.java"
"mAttached","false","false","true","false","false","int","0","[]","Optional[// for debugging - tells us whether attach/detach is unbalanced
]","\com\android\internal\widget\DigitalClock.java"
"mClock","false","false","true","false","false","WeakReference<DigitalClock>","null","[]","Optional.empty","\com\android\internal\widget\DigitalClock.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\com\android\internal\widget\DigitalClock.java"
"mCalendar","false","false","true","false","false","Calendar","null","[]","Optional.empty","\com\android\internal\widget\DigitalClock.java"
"mFormat","false","false","true","false","false","String","null","[]","Optional.empty","\com\android\internal\widget\DigitalClock.java"
"mTimeDisplay","false","false","true","false","false","TextView","null","[]","Optional.empty","\com\android\internal\widget\DigitalClock.java"
"M12","false","false","true","true","true","String","""h:mm""","[]","Optional.empty","\com\android\internal\widget\DigitalClock.java"
"mAmPm","false","false","true","false","false","TextView","null","[]","Optional.empty","\com\android\internal\widget\DigitalClock.java"
"M24","false","false","true","true","true","String","""kk:mm""","[]","Optional.empty","\com\android\internal\widget\DigitalClock.java"
"mHandler","false","false","true","false","true","Handler","new Handler()","[]","Optional[/* called by system on minute ticks */
]","\com\android\internal\widget\DigitalClock.java"
"mAmString","false","false","true","false","false","String","null","[]","Optional.empty","\com\android\internal\widget\DigitalClock.java"
"mIntentReceiver","false","false","true","false","false","BroadcastReceiver","null","[]","Optional.empty","\com\android\internal\widget\DigitalClock.java"
"mFormatChangeObserver","false","false","true","false","false","ContentObserver","null","[]","Optional.empty","\com\android\internal\widget\DigitalClock.java"
"uid","false","false","true","false","true","int","null","[]","Optional[/**
 * uid of process. root peers may lie.
 */
]","\android\net\Credentials.java"
"pid","false","false","true","false","true","int","null","[]","Optional[/**
 * pid of process. root peers may lie.
 */
]","\android\net\Credentials.java"
"gid","false","false","true","false","true","int","null","[]","Optional[/**
 * gid of process. root peers may lie.
 */
]","\android\net\Credentials.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\app\StatusBarManager.java"
"DISABLE_NOTIFICATION_ICONS","true","false","false","true","true","int","0x00000002","[]","Optional[/**
 * Flag for {@link #disable} to hide notification icons and scrolling ticker text.
 */
]","\android\app\StatusBarManager.java"
"DISABLE_NOTIFICATION_TICKER","true","false","false","true","true","int","0x00000008","[]","Optional[/**
 * Flag for {@link #disable} to hide only the scrolling ticker.  Note that
 * {@link #DISABLE_NOTIFICATION_ICONS} implies {@link #DISABLE_NOTIFICATION_TICKER}.
 */
]","\android\app\StatusBarManager.java"
"DISABLE_NONE","true","false","false","true","true","int","0x00000000","[]","Optional[/**
 * Re-enable all of the status bar features that you've disabled.
 */
]","\android\app\StatusBarManager.java"
"mToken","false","false","true","false","false","IBinder","new Binder()","[]","Optional.empty","\android\app\StatusBarManager.java"
"mService","false","false","true","false","false","IStatusBarService","null","[]","Optional.empty","\android\app\StatusBarManager.java"
"DISABLE_NOTIFICATION_ALERTS","true","false","false","true","true","int","0x00000004","[]","Optional[/**
 * Flag for {@link #disable} to disable incoming notification alerts.  This will not block
 * icons, but it will block sound, vibrating and other visual or aural notifications.
 */
]","\android\app\StatusBarManager.java"
"DISABLE_EXPAND","true","false","false","true","true","int","0x00000001","[]","Optional[/**
 * Flag for {@link #disable} to make the status bar not expandable.  Unless you also
 * set {@link #DISABLE_NOTIFICATION_ICONS}, new notifications will continue to show.
 */
]","\android\app\StatusBarManager.java"
"_SYNC_ACCOUNT","true","false","false","true","true","String","""_sync_account""","[]","Optional[/**
 * The account that was used to sync the entry to the device.
 * <P>Type: TEXT</P>
 */
]","\android\provider\SyncConstValue.java"
"_SYNC_ACCOUNT_TYPE","true","false","false","true","true","String","""_sync_account_type""","[]","Optional[/**
 * The type of the account that was used to sync the entry to the device.
 * <P>Type: TEXT</P>
 */
]","\android\provider\SyncConstValue.java"
"NON_SYNCABLE_ACCOUNT_TYPE","true","false","false","true","true","String","""android.local""","[]","Optional[/**
 * Used to indicate that this account is not synced
 */
]","\android\provider\SyncConstValue.java"
"_SYNC_MARK","true","false","false","true","true","String","""_sync_mark""","[]","Optional[/**
 * Used only in persistent providers, and only during merging.
 * <P>Type: INTEGER (long)</P>
 */
]","\android\provider\SyncConstValue.java"
"_SYNC_TIME","true","false","false","true","true","String","""_sync_time""","[]","Optional[/**
 * The last time, from the sync source's point of view, that this row has been synchronized.
 * <P>Type: INTEGER (long)</P>
 */
]","\android\provider\SyncConstValue.java"
"_SYNC_LOCAL_ID","true","false","false","true","true","String","""_sync_local_id""","[]","Optional[/**
 * Used in temporary provider while syncing, always NULL for rows in persistent providers.
 * <P>Type: INTEGER (long)</P>
 */
]","\android\provider\SyncConstValue.java"
"_SYNC_ID","true","false","false","true","true","String","""_sync_id""","[]","Optional[/**
 * The unique ID for a row assigned by the sync source. NULL if the row has never been synced.
 * <P>Type: TEXT</P>
 */
]","\android\provider\SyncConstValue.java"
"_SYNC_VERSION","true","false","false","true","true","String","""_sync_version""","[]","Optional[/**
 * The version of the row, as assigned by the server.
 * <P>Type: TEXT</P>
 */
]","\android\provider\SyncConstValue.java"
"NON_SYNCABLE_ACCOUNT","true","false","false","true","true","String","""non_syncable""","[]","Optional[/**
 * Used to indicate that this account is not synced
 */
]","\android\provider\SyncConstValue.java"
"_SYNC_DIRTY","true","false","false","true","true","String","""_sync_dirty""","[]","Optional[/**
 * Used to indicate that local, unsynced, changes are present.
 * <P>Type: INTEGER (long)</P>
 */
]","\android\provider\SyncConstValue.java"
"serialVersionUID","false","false","true","true","true","long","-2053384496042052262L","[]","Optional.empty","\com\google\android\mms\InvalidHeaderValueException.java"
"mCurrY","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\Scroller.java"
"mCurrX","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\Scroller.java"
"mVelocity","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\Scroller.java"
"mMinY","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\Scroller.java"
"mMinX","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\Scroller.java"
"FLING_MODE","false","false","true","true","true","int","1","[]","Optional.empty","\android\widget\Scroller.java"
"mCoeffY","false","false","true","false","false","float","1.0f","[]","Optional.empty","\android\widget\Scroller.java"
"mCoeffX","false","false","true","false","false","float","0.0f","[]","Optional.empty","\android\widget\Scroller.java"
"SCROLL_MODE","false","false","true","true","true","int","0","[]","Optional.empty","\android\widget\Scroller.java"
"mFinalY","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\Scroller.java"
"sViscousFluidScale","false","false","true","true","false","float","null","[]","Optional.empty","\android\widget\Scroller.java"
"mFinalX","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\Scroller.java"
"mFinished","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\Scroller.java"
"mDurationReciprocal","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\Scroller.java"
"mStartX","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\Scroller.java"
"mStartY","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\Scroller.java"
"mInterpolator","false","false","true","false","false","Interpolator","null","[]","Optional.empty","\android\widget\Scroller.java"
"mDuration","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\Scroller.java"
"mMode","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\Scroller.java"
"mMaxX","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\Scroller.java"
"mMaxY","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\Scroller.java"
"mDeceleration","false","false","true","false","true","float","null","[]","Optional.empty","\android\widget\Scroller.java"
"sViscousFluidNormalize","false","false","true","true","false","float","null","[]","Optional.empty","\android\widget\Scroller.java"
"mStartTime","false","false","true","false","false","long","null","[]","Optional.empty","\android\widget\Scroller.java"
"mDeltaY","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\Scroller.java"
"mDeltaX","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\Scroller.java"
"DEFAULT_DURATION","false","false","true","true","true","int","250","[]","Optional.empty","\android\widget\Scroller.java"
"mPduHeaders","false","false","false","false","false","PduHeaders","null","[]","Optional[/**
 * The headers of pdu.
 */
]","\com\google\android\mms\pdu\GenericPdu.java"
"exception","true","false","false","false","false","Throwable","null","[]","Optional.empty","\android\os\AsyncResult.java"
"userObj","true","false","false","false","false","Object","null","[]","Optional[// Expect either exception or result to be null
]","\android\os\AsyncResult.java"
"result","true","false","false","false","false","Object","null","[]","Optional.empty","\android\os\AsyncResult.java"
"EXTRA_MESSAGE","true","false","false","true","true","String","""android.intent.extra.alarm.MESSAGE""","[]","Optional[/**
 * Activity Extra: Provide a custom message for the alarm.
 * <p>
 * This can be passed as an extra field in the Intent created with
 * ACTION_SET_ALARM.
 */
]","\android\provider\AlarmClock.java"
"EXTRA_MINUTES","true","false","false","true","true","String","""android.intent.extra.alarm.MINUTES""","[]","Optional[/**
 * Activity Extra: The minutes of the alarm being set.
 * <p>
 * This value can be passed as an extra field to the Intent created with
 * ACTION_SET_ALARM.  If it is not provided, the behavior is undefined and
 * is up to the application.  The value is an integer and ranges from 0 to
 * 59.
 */
]","\android\provider\AlarmClock.java"
"ACTION_SET_ALARM","true","false","false","true","true","String","""android.intent.action.SET_ALARM""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Set an alarm.
 * <p>
 * Input: Nothing.
 * <p>
 * Output: Nothing.
 */
]","\android\provider\AlarmClock.java"
"EXTRA_HOUR","true","false","false","true","true","String","""android.intent.extra.alarm.HOUR""","[]","Optional[/**
 * Activity Extra: The hour of the alarm being set.
 * <p>
 * This value can be passed as an extra field to the Intent created with
 * ACTION_SET_ALARM.  If it is not provided, the behavior is undefined and
 * is up to the application.  The value is an integer and ranges from 0 to
 * 23.
 */
]","\android\provider\AlarmClock.java"
"outFile","false","false","false","false","false","File","null","[]","Optional.empty","\android\webkit\CacheManager.java"
"localPath","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\CacheManager.java"
"httpStatusCode","false","false","false","false","false","int","null","[]","Optional[// these fields are saved to the database
]","\android\webkit\CacheManager.java"
"MAX_AGE","false","false","true","true","true","String","""max-age""","[]","Optional.empty","\android\webkit\CacheManager.java"
"outStream","false","false","false","false","false","OutputStream","null","[]","Optional.empty","\android\webkit\CacheManager.java"
"CACHE_MAX_SIZE","false","false","false","true","false","long","(CACHE_THRESHOLD - CACHE_TRIM_AMOUNT) / 2","[]","Optional[// Limit the maximum cache file size to half of the normal capacity
]","\android\webkit\CacheManager.java"
"mBaseDir","false","false","true","true","false","File","null","[]","Optional.empty","\android\webkit\CacheManager.java"
"mimeType","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\CacheManager.java"
"encoding","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\CacheManager.java"
"CACHE_TRIM_AMOUNT","false","false","true","true","false","long","2 * 1024 * 1024","[]","Optional.empty","\android\webkit\CacheManager.java"
"mDataBase","false","false","true","true","false","WebViewDatabase","null","[]","Optional.empty","\android\webkit\CacheManager.java"
"NO_STORE","false","false","true","true","true","String","""no-store""","[]","Optional.empty","\android\webkit\CacheManager.java"
"expires","false","false","false","false","false","long","null","[]","Optional.empty","\android\webkit\CacheManager.java"
"TRIM_CACHE_INTERVAL","false","false","true","true","true","int","5","[]","Optional.empty","\android\webkit\CacheManager.java"
"NO_CACHE","false","false","true","true","true","String","""no-cache""","[]","Optional.empty","\android\webkit\CacheManager.java"
"location","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\CacheManager.java"
"mDisabled","false","false","true","true","false","boolean","null","[]","Optional.empty","\android\webkit\CacheManager.java"
"etag","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\CacheManager.java"
"HEADER_KEY_IFNONEMATCH","false","false","false","true","true","String","""if-none-match""","[]","Optional.empty","\android\webkit\CacheManager.java"
"HEADER_KEY_IFMODIFIEDSINCE","false","false","false","true","true","String","""if-modified-since""","[]","Optional.empty","\android\webkit\CacheManager.java"
"CACHE_THRESHOLD","false","false","true","true","false","long","6 * 1024 * 1024","[]","Optional.empty","\android\webkit\CacheManager.java"
"mClearCacheOnInit","false","false","true","true","false","boolean","false","[]","Optional[// Flag to clear the cache when the CacheManager is initialized
]","\android\webkit\CacheManager.java"
"contentLength","false","false","false","false","false","long","null","[]","Optional.empty","\android\webkit\CacheManager.java"
"expiresString","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\CacheManager.java"
"inStream","false","false","false","false","false","InputStream","null","[]","Optional[// these fields are NOT saved to the database
]","\android\webkit\CacheManager.java"
"crossDomain","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\CacheManager.java"
"MANIFEST_MIME","false","false","true","true","true","String","""text/cache-manifest""","[]","Optional.empty","\android\webkit\CacheManager.java"
"contentdisposition","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\CacheManager.java"
"lastModified","false","false","false","false","false","String","null","[]","Optional.empty","\android\webkit\CacheManager.java"
"mRefCount","false","false","true","true","false","int","null","[]","Optional[// Reference count the enable/disable transaction
]","\android\webkit\CacheManager.java"
"mTrimCacheCount","false","false","true","true","false","int","0","[]","Optional[// timer base. We share the same timer with less frequent update.
]","\android\webkit\CacheManager.java"
"LOGTAG","false","false","true","true","true","String","""cache""","[]","Optional.empty","\android\webkit\CacheManager.java"
"mServiceLooper","false","false","true","false","false","Looper","null","[]","Optional.empty","\android\app\IntentService.java"
"mName","false","false","true","false","false","String","null","[]","Optional.empty","\android\app\IntentService.java"
"mServiceHandler","false","false","true","false","false","ServiceHandler","null","[]","Optional.empty","\android\app\IntentService.java"
"mRedelivery","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\app\IntentService.java"
"ERROR","true","false","false","true","true","int","-1","[]","Optional[/**
 * Generic error
 */
]","\android\net\http\EventHandler.java"
"ERROR_BAD_URL","true","false","false","true","true","int","-12","[]","Optional[/**
 * Bad URL
 */
]","\android\net\http\EventHandler.java"
"ERROR_PROXYAUTH","true","false","false","true","true","int","-5","[]","Optional[/**
 * User authentication failed on proxy
 */
]","\android\net\http\EventHandler.java"
"FILE_NOT_FOUND_ERROR","true","false","false","true","true","int","-14","[]","Optional[/**
 * File not found error for file:/// loads
 */
]","\android\net\http\EventHandler.java"
"ERROR_TIMEOUT","true","false","false","true","true","int","-8","[]","Optional[/**
 * Connection timed out
 */
]","\android\net\http\EventHandler.java"
"ERROR_IO","true","false","false","true","true","int","-7","[]","Optional[/**
 * Failed to write to or read from server
 */
]","\android\net\http\EventHandler.java"
"TOO_MANY_REQUESTS_ERROR","true","false","false","true","true","int","-15","[]","Optional[/**
 * Too many requests queued
 */
]","\android\net\http\EventHandler.java"
"ERROR_UNSUPPORTED_AUTH_SCHEME","true","false","false","true","true","int","-3","[]","Optional[/**
 * Unsupported authentication scheme (ie, not basic or digest)
 */
]","\android\net\http\EventHandler.java"
"ERROR_LOOKUP","true","false","false","true","true","int","-2","[]","Optional[/**
 * Server or proxy hostname lookup failed
 */
]","\android\net\http\EventHandler.java"
"ERROR_CONNECT","true","false","false","true","true","int","-6","[]","Optional[/**
 * Could not connect to server
 */
]","\android\net\http\EventHandler.java"
"ERROR_UNSUPPORTED_SCHEME","true","false","false","true","true","int","-10","[]","Optional[/**
 * Unsupported URI scheme (ie, not http, https, etc)
 */
]","\android\net\http\EventHandler.java"
"ERROR_AUTH","true","false","false","true","true","int","-4","[]","Optional[/**
 * User authentication failed on server
 */
]","\android\net\http\EventHandler.java"
"ERROR_FAILED_SSL_HANDSHAKE","true","false","false","true","true","int","-11","[]","Optional[/**
 * Failed to perform SSL handshake
 */
]","\android\net\http\EventHandler.java"
"ERROR_REDIRECT_LOOP","true","false","false","true","true","int","-9","[]","Optional[/**
 * Too many redirects
 */
]","\android\net\http\EventHandler.java"
"errorStringResources","false","false","false","true","true","int","{ com.android.internal.R.string.httpErrorOk, com.android.internal.R.string.httpError, com.android.internal.R.string.httpErrorLookup, com.android.internal.R.string.httpErrorUnsupportedAuthScheme, com.android.internal.R.string.httpErrorAuth, com.android.internal.R.string.httpErrorProxyAuth, com.android.internal.R.string.httpErrorConnect, com.android.internal.R.string.httpErrorIO, com.android.internal.R.string.httpErrorTimeout, com.android.internal.R.string.httpErrorRedirectLoop, com.android.internal.R.string.httpErrorUnsupportedScheme, com.android.internal.R.string.httpErrorFailedSslHandshake, com.android.internal.R.string.httpErrorBadUrl, com.android.internal.R.string.httpErrorFile, com.android.internal.R.string.httpErrorFileNotFound, com.android.internal.R.string.httpErrorTooManyRequests }","[]","Optional.empty","\android\net\http\EventHandler.java"
"OK","true","false","false","true","true","int","0","[]","Optional[/**
 * Success
 */
]","\android\net\http\EventHandler.java"
"FILE_ERROR","true","false","false","true","true","int","-13","[]","Optional[/**
 * Generic file error for file:/// loads
 */
]","\android\net\http\EventHandler.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<SavedState>","new Parcelable.Creator<SavedState>() {

    public SavedState createFromParcel(Parcel in) {
        return new SavedState(in);
    }

    public SavedState[] newArray(int size) {
        return new SavedState[size];
    }
}","[]","Optional.empty","\android\preference\EditTextPreference.java"
"text","false","false","false","false","false","String","null","[]","Optional.empty","\android\preference\EditTextPreference.java"
"mText","false","false","true","false","false","String","null","[]","Optional.empty","\android\preference\EditTextPreference.java"
"mEditText","false","false","true","false","false","EditText","null","[]","Optional[/**
 * The edit text shown in the dialog.
 */
]","\android\preference\EditTextPreference.java"
"A2DP","true","false","false","true","true","int","1","[]","Optional.empty","\android\bluetooth\BluetoothProfileState.java"
"mPendingDevice","false","false","true","false","false","BluetoothDevice","null","[]","Optional.empty","\android\bluetooth\BluetoothProfileState.java"
"TRANSITION_TO_STABLE","false","false","false","true","true","int","100","[]","Optional.empty","\android\bluetooth\BluetoothProfileState.java"
"mPendingCommandState","false","false","true","false","false","PendingCommandState","new PendingCommandState()","[]","Optional.empty","\android\bluetooth\BluetoothProfileState.java"
"HFP","true","false","false","true","true","int","0","[]","Optional.empty","\android\bluetooth\BluetoothProfileState.java"
"mStableState","false","false","true","false","false","StableState","new StableState()","[]","Optional.empty","\android\bluetooth\BluetoothProfileState.java"
"TAG","false","false","true","true","true","String","""BluetoothProfileState""","[]","Optional.empty","\android\bluetooth\BluetoothProfileState.java"
"DBG","false","false","true","true","true","boolean","true","[]","Optional.empty","\android\bluetooth\BluetoothProfileState.java"
"mBroadcastReceiver","false","false","true","false","false","BroadcastReceiver","new BroadcastReceiver() {

    @Override
    public void onReceive(Context context, Intent intent) {
        String action = intent.getAction();
        BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
        if (action.equals(BluetoothHeadset.ACTION_STATE_CHANGED)) {
            int newState = intent.getIntExtra(BluetoothHeadset.EXTRA_STATE, 0);
            if (mProfile == HFP && (newState == BluetoothHeadset.STATE_CONNECTED || newState == BluetoothHeadset.STATE_DISCONNECTED)) {
                sendMessage(TRANSITION_TO_STABLE);
            }
        } else if (action.equals(BluetoothA2dp.ACTION_SINK_STATE_CHANGED)) {
            int newState = intent.getIntExtra(BluetoothA2dp.EXTRA_SINK_STATE, 0);
            if (mProfile == A2DP && (newState == BluetoothA2dp.STATE_CONNECTED || newState == BluetoothA2dp.STATE_DISCONNECTED)) {
                sendMessage(TRANSITION_TO_STABLE);
            }
        } else if (action.equals(BluetoothDevice.ACTION_ACL_DISCONNECTED)) {
            if (device.equals(mPendingDevice)) {
                sendMessage(TRANSITION_TO_STABLE);
            }
        }
    }
}","[]","Optional.empty","\android\bluetooth\BluetoothProfileState.java"
"mProfile","false","false","true","false","false","int","null","[]","Optional.empty","\android\bluetooth\BluetoothProfileState.java"
"TAG","false","false","true","true","true","String","""NFC""","[]","Optional.empty","\android\nfc\tech\NdefFormatable.java"
"mAccounts","false","false","true","false","false","Parcelable","null","[]","Optional.empty","\android\accounts\ChooseAccountActivity.java"
"mResult","false","false","true","false","false","Bundle","null","[]","Optional.empty","\android\accounts\ChooseAccountActivity.java"
"TAG","false","false","true","true","true","String","""AccountManager""","[]","Optional.empty","\android\accounts\ChooseAccountActivity.java"
"mAccountManagerResponse","false","false","true","false","false","AccountManagerResponse","null","[]","Optional.empty","\android\accounts\ChooseAccountActivity.java"
"UNSUPPORTED","true","false","false","true","true","int","-1","[]","Optional[/**
 * The return value to indicate that the device does not support the statistic.
 */
]","\android\net\TrafficStats.java"
"mDescription","false","false","true","false","false","String","null","[]","Optional.empty","\android\webkit\Plugin.java"
"mDialog","false","false","true","false","false","AlertDialog","null","[]","Optional.empty","\android\webkit\Plugin.java"
"mPath","false","false","true","false","false","String","null","[]","Optional.empty","\android\webkit\Plugin.java"
"mFileName","false","false","true","false","false","String","null","[]","Optional.empty","\android\webkit\Plugin.java"
"mName","false","false","true","false","false","String","null","[]","Optional.empty","\android\webkit\Plugin.java"
"mHandler","false","false","true","false","false","PreferencesClickHandler","null","[]","Optional.empty","\android\webkit\Plugin.java"
"mSpaceKey","false","false","true","false","false","Key","null","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboard.java"
"mEnabled","false","false","true","false","false","boolean","true","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboard.java"
"KEYCODE_SPACE","true","false","false","true","true","int","' '","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboard.java"
"mEnterKey","false","false","true","false","false","Key","null","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboard.java"
"mF1Key","false","false","true","false","false","Key","null","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboard.java"
"SHIFT_OFF","false","false","true","true","true","int","0","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboard.java"
"sSpacebarVerticalCorrection","false","false","false","true","false","int","null","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboard.java"
"mShiftLockIcon","false","false","true","false","false","Drawable","null","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboard.java"
"mRes","false","false","true","false","false","Resources","null","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboard.java"
"mOldShiftPreviewIcon","false","false","true","false","false","Drawable","null","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboard.java"
"mLocale","false","false","true","false","false","Locale","null","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboard.java"
"mShiftLockEnabled","false","false","true","false","false","boolean","null","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboard.java"
"mSpaceIcon","false","false","true","false","false","Drawable","null","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboard.java"
"mShiftLockPreviewIcon","false","false","true","false","false","Drawable","null","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboard.java"
"TAG","false","false","true","true","true","String","""PasswordEntryKeyboard""","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboard.java"
"SHIFT_LOCKED","false","false","true","true","true","int","2","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboard.java"
"SHIFT_ON","false","false","true","true","true","int","1","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboard.java"
"mExtensionResId","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboard.java"
"mShiftKey","false","false","true","false","false","Key","null","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboard.java"
"mShiftState","false","false","true","false","false","int","SHIFT_OFF","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboard.java"
"mOldShiftIcon","false","false","true","false","false","Drawable","null","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboard.java"
"mShiftIcon","false","false","true","false","false","Drawable","null","[]","Optional.empty","\com\android\internal\widget\PasswordEntryKeyboard.java"
"EAST_ASIAN_WIDTH_NARROW","true","false","false","true","true","int","4","[]","Optional.empty","\android\text\AndroidCharacter.java"
"EAST_ASIAN_WIDTH_HALF_WIDTH","true","false","false","true","true","int","2","[]","Optional.empty","\android\text\AndroidCharacter.java"
"EAST_ASIAN_WIDTH_AMBIGUOUS","true","false","false","true","true","int","1","[]","Optional.empty","\android\text\AndroidCharacter.java"
"EAST_ASIAN_WIDTH_WIDE","true","false","false","true","true","int","5","[]","Optional.empty","\android\text\AndroidCharacter.java"
"EAST_ASIAN_WIDTH_FULL_WIDTH","true","false","false","true","true","int","3","[]","Optional.empty","\android\text\AndroidCharacter.java"
"EAST_ASIAN_WIDTH_NEUTRAL","true","false","false","true","true","int","0","[]","Optional.empty","\android\text\AndroidCharacter.java"
"mEventTime","false","false","true","false","false","long","null","[]","Optional.empty","\android\view\accessibility\AccessibilityEvent.java"
"TYPE_VIEW_LONG_CLICKED","true","false","false","true","true","int","0x00000002","[]","Optional[/**
 * Represents the event of long clicking on a {@link android.view.View} like
 * {@link android.widget.Button}, {@link android.widget.CompoundButton}, etc.
 */
]","\android\view\accessibility\AccessibilityEvent.java"
"mClassName","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\view\accessibility\AccessibilityEvent.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<AccessibilityEvent>","new Parcelable.Creator<AccessibilityEvent>() {

    public AccessibilityEvent createFromParcel(Parcel parcel) {
        AccessibilityEvent event = AccessibilityEvent.obtain();
        event.initFromParcel(parcel);
        return event;
    }

    public AccessibilityEvent[] newArray(int size) {
        return new AccessibilityEvent[size];
    }
}","[]","Optional[/**
 * @see Parcelable.Creator
 */
]","\android\view\accessibility\AccessibilityEvent.java"
"mPoolLock","false","false","true","true","true","Object","new Object()","[]","Optional.empty","\android\view\accessibility\AccessibilityEvent.java"
"MAX_TEXT_LENGTH","true","false","false","true","true","int","500","[]","Optional[/**
 * Maximum length of the text fields.
 *
 * @see #getBeforeText()
 * @see #getText()
 */
]","\android\view\accessibility\AccessibilityEvent.java"
"mAddedCount","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\accessibility\AccessibilityEvent.java"
"mItemCount","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\accessibility\AccessibilityEvent.java"
"TYPES_ALL_MASK","true","false","false","true","true","int","0xFFFFFFFF","[]","Optional[/**
 * Mask for {@link AccessibilityEvent} all types.
 *
 * @see #TYPE_VIEW_CLICKED
 * @see #TYPE_VIEW_LONG_CLICKED
 * @see #TYPE_VIEW_SELECTED
 * @see #TYPE_VIEW_FOCUSED
 * @see #TYPE_VIEW_TEXT_CHANGED
 * @see #TYPE_WINDOW_STATE_CHANGED
 * @see #TYPE_NOTIFICATION_STATE_CHANGED
 */
]","\android\view\accessibility\AccessibilityEvent.java"
"MAX_POOL_SIZE","false","false","true","true","true","int","2","[]","Optional.empty","\android\view\accessibility\AccessibilityEvent.java"
"mContentDescription","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\view\accessibility\AccessibilityEvent.java"
"mBeforeText","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\view\accessibility\AccessibilityEvent.java"
"CHECKED","false","false","true","true","true","int","0x00000001","[]","Optional.empty","\android\view\accessibility\AccessibilityEvent.java"
"mRemovedCount","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\accessibility\AccessibilityEvent.java"
"mIsInPool","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\view\accessibility\AccessibilityEvent.java"
"FULL_SCREEN","false","false","true","true","true","int","0x00000080","[]","Optional.empty","\android\view\accessibility\AccessibilityEvent.java"
"mFromIndex","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\accessibility\AccessibilityEvent.java"
"TYPE_WINDOW_STATE_CHANGED","true","false","false","true","true","int","0x00000020","[]","Optional[/**
 * Represents the event of opening/closing a {@link android.widget.PopupWindow},
 * {@link android.view.Menu}, {@link android.app.Dialog}, etc.
 */
]","\android\view\accessibility\AccessibilityEvent.java"
"mText","false","false","true","false","true","List<CharSequence>","new ArrayList<CharSequence>()","[]","Optional.empty","\android\view\accessibility\AccessibilityEvent.java"
"TYPE_VIEW_FOCUSED","true","false","false","true","true","int","0x00000008","[]","Optional[/**
 * Represents the event of focusing a {@link android.view.View}.
 */
]","\android\view\accessibility\AccessibilityEvent.java"
"mNext","false","false","true","false","false","AccessibilityEvent","null","[]","Optional.empty","\android\view\accessibility\AccessibilityEvent.java"
"TYPE_NOTIFICATION_STATE_CHANGED","true","false","false","true","true","int","0x00000040","[]","Optional[/**
 * Represents the event showing/hiding a {@link android.app.Notification}.
 */
]","\android\view\accessibility\AccessibilityEvent.java"
"mBooleanProperties","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\accessibility\AccessibilityEvent.java"
"TYPE_VIEW_CLICKED","true","false","false","true","true","int","0x00000001","[]","Optional[/**
 * Represents the event of clicking on a {@link android.view.View} like
 * {@link android.widget.Button}, {@link android.widget.CompoundButton}, etc.
 */
]","\android\view\accessibility\AccessibilityEvent.java"
"sPool","false","false","true","true","false","AccessibilityEvent","null","[]","Optional.empty","\android\view\accessibility\AccessibilityEvent.java"
"mPackageName","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\view\accessibility\AccessibilityEvent.java"
"mEventType","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\accessibility\AccessibilityEvent.java"
"TYPE_VIEW_TEXT_CHANGED","true","false","false","true","true","int","0x00000010","[]","Optional[/**
 * Represents the event of changing the text of an {@link android.widget.EditText}.
 */
]","\android\view\accessibility\AccessibilityEvent.java"
"sPoolSize","false","false","true","true","false","int","null","[]","Optional.empty","\android\view\accessibility\AccessibilityEvent.java"
"mCurrentItemIndex","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\accessibility\AccessibilityEvent.java"
"PASSWORD","false","false","true","true","true","int","0x00000004","[]","Optional.empty","\android\view\accessibility\AccessibilityEvent.java"
"mParcelableData","false","false","true","false","false","Parcelable","null","[]","Optional.empty","\android\view\accessibility\AccessibilityEvent.java"
"INVALID_POSITION","true","false","false","true","true","int","-1","[]","Optional[/**
 * Invalid selection/focus position.
 *
 * @see #getCurrentItemIndex()
 */
]","\android\view\accessibility\AccessibilityEvent.java"
"TYPE_VIEW_SELECTED","true","false","false","true","true","int","0x00000004","[]","Optional[/**
 * Represents the event of selecting an item usually in the context of an
 * {@link android.widget.AdapterView}.
 */
]","\android\view\accessibility\AccessibilityEvent.java"
"ENABLED","false","false","true","true","true","int","0x00000002","[]","Optional.empty","\android\view\accessibility\AccessibilityEvent.java"
"GROUP","true","false","false","true","true","int","2","[]","Optional[/**
 * This data type represents a group position
 */
]","\android\widget\ExpandableListPosition.java"
"MAX_POOL_SIZE","false","false","true","true","true","int","5","[]","Optional.empty","\android\widget\ExpandableListPosition.java"
"type","true","false","false","false","false","int","null","[]","Optional[/**
 * What type of position this ExpandableListPosition represents
 */
]","\android\widget\ExpandableListPosition.java"
"CHILD","true","false","false","true","true","int","1","[]","Optional[/**
 * This data type represents a child position
 */
]","\android\widget\ExpandableListPosition.java"
"flatListPos","false","false","false","false","false","int","null","[]","Optional[/**
 * The position of the item in the flat list (optional, used internally when
 * the corresponding flat list position for the group or child is known)
 */
]","\android\widget\ExpandableListPosition.java"
"sPool","false","false","true","true","false","ArrayList<ExpandableListPosition>","new ArrayList<ExpandableListPosition>(MAX_POOL_SIZE)","[]","Optional.empty","\android\widget\ExpandableListPosition.java"
"childPos","true","false","false","false","false","int","null","[]","Optional[/**
 * The position of the child within its parent group
 */
]","\android\widget\ExpandableListPosition.java"
"groupPos","true","false","false","false","false","int","null","[]","Optional[/**
 * The position of either the group being referred to, or the parent
 * group of the child being referred to
 */
]","\android\widget\ExpandableListPosition.java"
"mRemote","false","false","true","false","false","IBinder","null","[]","Optional.empty","\android\app\ActivityManagerNative.java"
"gDefault","false","false","true","true","false","IActivityManager","null","[]","Optional.empty","\android\app\ActivityManagerNative.java"
"sSystemReady","false","false","false","true","false","boolean","false","[]","Optional.empty","\android\app\ActivityManagerNative.java"
"mDrawableRef","false","false","true","false","false","WeakReference<Drawable>","null","[]","Optional.empty","\android\text\style\DynamicDrawableSpan.java"
"ALIGN_BASELINE","true","false","false","true","true","int","1","[]","Optional[/**
 * A constant indicating that the bottom of this span should be aligned
 * with the baseline of the surrounding text.
 */
]","\android\text\style\DynamicDrawableSpan.java"
"TAG","false","false","true","true","true","String","""DynamicDrawableSpan""","[]","Optional.empty","\android\text\style\DynamicDrawableSpan.java"
"ALIGN_BOTTOM","true","false","false","true","true","int","0","[]","Optional[/**
 * A constant indicating that the bottom of this span should be aligned
 * with the bottom of the surrounding text, i.e., at the same level as the
 * lowest descender in the text.
 */
]","\android\text\style\DynamicDrawableSpan.java"
"mVerticalAlignment","false","true","false","false","true","int","null","[]","Optional.empty","\android\text\style\DynamicDrawableSpan.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<PackageStats>","new Parcelable.Creator<PackageStats>() {

    public PackageStats createFromParcel(Parcel in) {
        return new PackageStats(in);
    }

    public PackageStats[] newArray(int size) {
        return new PackageStats[size];
    }
}","[]","Optional.empty","\android\content\pm\PackageStats.java"
"dataSize","true","false","false","false","false","long","null","[]","Optional.empty","\android\content\pm\PackageStats.java"
"cacheSize","true","false","false","false","false","long","null","[]","Optional.empty","\android\content\pm\PackageStats.java"
"codeSize","true","false","false","false","false","long","null","[]","Optional.empty","\android\content\pm\PackageStats.java"
"packageName","true","false","false","false","false","String","null","[]","Optional.empty","\android\content\pm\PackageStats.java"
"CHECK_INTERVAL","false","false","true","true","true","int","2 * 1000","[]","Optional.empty","\android\net\http\IdleCache.java"
"mCached","false","false","true","false","false","int","0","[]","Optional[/* stats */
]","\android\net\http\IdleCache.java"
"mEntries","false","false","true","false","false","Entry","new Entry[IDLE_CACHE_MAX]","[]","Optional.empty","\android\net\http\IdleCache.java"
"mReused","false","false","true","false","false","int","0","[]","Optional.empty","\android\net\http\IdleCache.java"
"mConnection","false","false","false","false","false","Connection","null","[]","Optional.empty","\android\net\http\IdleCache.java"
"EMPTY_CHECK_MAX","false","false","true","true","true","int","5","[]","Optional[/* Allow five consecutive empty queue checks before shutdown */
]","\android\net\http\IdleCache.java"
"TIMEOUT","false","false","true","true","true","int","6 * 1000","[]","Optional[/* six second timeout for connections */
]","\android\net\http\IdleCache.java"
"mCount","false","false","true","false","false","int","0","[]","Optional.empty","\android\net\http\IdleCache.java"
"mHost","false","false","false","false","false","HttpHost","null","[]","Optional.empty","\android\net\http\IdleCache.java"
"mThread","false","false","true","false","false","IdleReaper","null","[]","Optional.empty","\android\net\http\IdleCache.java"
"IDLE_CACHE_MAX","false","false","true","true","true","int","8","[]","Optional.empty","\android\net\http\IdleCache.java"
"mTimeout","false","false","false","false","false","long","null","[]","Optional.empty","\android\net\http\IdleCache.java"
"mInterfaceName","false","false","true","false","true","String","null","[]","Optional.empty","\android\content\pm\RegisteredServicesCache.java"
"mContext","true","false","false","false","true","Context","null","[]","Optional.empty","\android\content\pm\RegisteredServicesCache.java"
"uid","true","false","false","false","true","int","null","[]","Optional.empty","\android\content\pm\RegisteredServicesCache.java"
"mPersistentServicesFile","false","false","true","false","true","AtomicFile","null","[]","Optional[/**
 * This file contains the list of known services. We would like to maintain this forever
 * so we store it as an XML file.
 */
]","\android\content\pm\RegisteredServicesCache.java"
"componentName","true","false","false","false","true","ComponentName","null","[]","Optional.empty","\android\content\pm\RegisteredServicesCache.java"
"mAttributesName","false","false","true","false","true","String","null","[]","Optional.empty","\android\content\pm\RegisteredServicesCache.java"
"mServices","false","false","true","false","false","Map<V,ServiceInfo<V>>","null","[]","Optional[// synchronized on mServicesLock
]","\android\content\pm\RegisteredServicesCache.java"
"mSerializerAndParser","false","false","true","false","true","XmlSerializerAndParser<V>","null","[]","Optional.empty","\android\content\pm\RegisteredServicesCache.java"
"type","true","false","false","false","true","V","null","[]","Optional.empty","\android\content\pm\RegisteredServicesCache.java"
"mPersistentServicesFileDidNotExist","false","false","true","false","false","boolean","null","[]","Optional[// synchronized on mServicesLock
]","\android\content\pm\RegisteredServicesCache.java"
"mHandler","false","false","true","false","false","Handler","null","[]","Optional.empty","\android\content\pm\RegisteredServicesCache.java"
"TAG","false","false","true","true","true","String","""PackageManager""","[]","Optional.empty","\android\content\pm\RegisteredServicesCache.java"
"mListener","false","false","true","false","false","RegisteredServicesCacheListener<V>","null","[]","Optional[// the listener and handler are synchronized on ""this"" and must be updated together
]","\android\content\pm\RegisteredServicesCache.java"
"mMetaDataName","false","false","true","false","true","String","null","[]","Optional.empty","\android\content\pm\RegisteredServicesCache.java"
"mServicesLock","false","false","true","false","true","Object","new Object()","[]","Optional.empty","\android\content\pm\RegisteredServicesCache.java"
"mReceiver","false","false","true","false","true","AtomicReference<BroadcastReceiver>","null","[]","Optional.empty","\android\content\pm\RegisteredServicesCache.java"
"mPersistentServices","false","false","true","false","false","HashMap<V,Integer>","null","[]","Optional[// synchronized on mServicesLock
]","\android\content\pm\RegisteredServicesCache.java"
"ROOT_GID","false","false","true","true","true","int","0","[]","Optional.empty","\com\android\internal\os\ZygoteInit.java"
"UNPRIVILEGED_UID","false","false","true","true","true","int","9999","[]","Optional.empty","\com\android\internal\os\ZygoteInit.java"
"PRELOADED_CLASSES","false","false","true","true","true","String","""preloaded-classes""","[]","Optional[/**
 * The name of a resource file that contains classes to preload.
 */
]","\com\android\internal\os\ZygoteInit.java"
"ZYGOTE_FORK_MODE","false","false","true","true","true","boolean","false","[]","Optional[/**
 * If true, zygote forks for each peer. If false, a select loop is used
 * inside a single process. The latter is preferred.
 */
]","\com\android\internal\os\ZygoteInit.java"
"ANDROID_SOCKET_ENV","false","false","true","true","true","String","""ANDROID_SOCKET_zygote""","[]","Optional.empty","\com\android\internal\os\ZygoteInit.java"
"UNPRIVILEGED_GID","false","false","true","true","true","int","9999","[]","Optional.empty","\com\android\internal\os\ZygoteInit.java"
"sServerSocket","false","false","true","true","false","LocalServerSocket","null","[]","Optional.empty","\com\android\internal\os\ZygoteInit.java"
"mMethod","false","false","true","false","true","Method","null","[]","Optional[/**
 * method to call
 */
]","\com\android\internal\os\ZygoteInit.java"
"mResources","false","false","true","true","false","Resources","null","[]","Optional[/**
 * Used to pre-load resources.  We hold a global reference on it so it
 * never gets destroyed.
 */
]","\com\android\internal\os\ZygoteInit.java"
"GC_LOOP_COUNT","false","false","false","true","true","int","10","[]","Optional[/**
 * The number of times that the main Zygote loop
 * should run before calling gc() again.
 */
]","\com\android\internal\os\ZygoteInit.java"
"mArgs","false","false","true","false","true","String","null","[]","Optional[/**
 * argument array
 */
]","\com\android\internal\os\ZygoteInit.java"
"LOG_BOOT_PROGRESS_PRELOAD_END","false","false","true","true","true","int","3030","[]","Optional.empty","\com\android\internal\os\ZygoteInit.java"
"PRELOAD_RESOURCES","false","false","true","true","true","boolean","true","[]","Optional[/**
 * Controls whether we should preload resources during zygote init.
 */
]","\com\android\internal\os\ZygoteInit.java"
"REGISTER_MAP_METHODS","false","false","true","true","true","String","{}","[]","Optional[/**
 * List of methods we ""warm up"" in the register map cache.  These were
 * chosen because they appeared on the stack in GCs in multiple
 * applications.
 *
 * This is in a VM-ready format, to minimize string processing.  If a
 * class is not already loaded, or a method is not found, the entry
 * will be skipped.
 *
 * This doesn't really merit a separately-generated input file at this
 * time.  The list is fairly short, and the consequences of failure
 * are minor.
 */
]","\com\android\internal\os\ZygoteInit.java"
"TAG","false","false","true","true","true","String","""Zygote""","[]","Optional.empty","\com\android\internal\os\ZygoteInit.java"
"ROOT_UID","false","false","true","true","true","int","0","[]","Optional.empty","\com\android\internal\os\ZygoteInit.java"
"LOG_BOOT_PROGRESS_PRELOAD_START","false","false","true","true","true","int","3020","[]","Optional.empty","\com\android\internal\os\ZygoteInit.java"
"PRELOAD_GC_THRESHOLD","false","false","true","true","true","int","50000","[]","Optional[/**
 * when preloading, GC after allocating this many bytes
 */
]","\com\android\internal\os\ZygoteInit.java"
"USAGE_STRING","true","false","false","true","true","String",""" <\""true\""|\""false\"" for startSystemServer>""","[]","Optional.empty","\com\android\internal\os\ZygoteInit.java"
"mCurRowNumCache","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\database\SortCursor.java"
"ROWCACHESIZE","false","false","true","false","true","int","64","[]","Optional.empty","\com\android\internal\database\SortCursor.java"
"mCursor","false","false","true","false","false","Cursor","null","[]","Optional[// updated in onMove
]","\com\android\internal\database\SortCursor.java"
"mSortColumns","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\database\SortCursor.java"
"mLastCacheHit","false","false","true","false","false","int","-1","[]","Optional.empty","\com\android\internal\database\SortCursor.java"
"TAG","false","false","true","true","true","String","""SortCursor""","[]","Optional.empty","\com\android\internal\database\SortCursor.java"
"mObserver","false","false","true","false","false","DataSetObserver","new DataSetObserver() {

    @Override
    public void onChanged() {
        // Reset our position so the optimizations in move-related code
        // don't screw us over
        mPos = -1;
    }

    @Override
    public void onInvalidated() {
        mPos = -1;
    }
}","[]","Optional.empty","\com\android\internal\database\SortCursor.java"
"mRowNumCache","false","false","true","false","false","int","new int[ROWCACHESIZE]","[]","Optional.empty","\com\android\internal\database\SortCursor.java"
"mCursors","false","false","true","false","false","Cursor","null","[]","Optional.empty","\com\android\internal\database\SortCursor.java"
"mCursorCache","false","false","true","false","false","int","new int[ROWCACHESIZE]","[]","Optional.empty","\com\android\internal\database\SortCursor.java"
"FORMAT_NUMERIC_DATE","true","false","false","true","true","int","0x20000","[]","Optional.empty","\android\text\format\DateUtils.java"
"YEAR_FORMAT","true","false","false","true","true","String","""%Y""","[]","Optional.empty","\android\text\format\DateUtils.java"
"WEEKDAY_FORMAT","true","false","false","true","true","String","""%A""","[]","Optional.empty","\android\text\format\DateUtils.java"
"FORMAT_NO_NOON","true","false","false","true","true","int","0x00200","[]","Optional.empty","\android\text\format\DateUtils.java"
"FORMAT_NO_NOON_MIDNIGHT","true","false","false","true","true","int","(FORMAT_NO_NOON | FORMAT_NO_MIDNIGHT)","[]","Optional.empty","\android\text\format\DateUtils.java"
"FORMAT_ABBREV_RELATIVE","true","false","false","true","true","int","0x40000","[]","Optional.empty","\android\text\format\DateUtils.java"
"FORMAT_SHOW_YEAR","true","false","false","true","true","int","0x00004","[]","Optional.empty","\android\text\format\DateUtils.java"
"sAmPm","false","false","true","true","true","int","new int[] { com.android.internal.R.string.am, com.android.internal.R.string.pm }","[]","Optional.empty","\android\text\format\DateUtils.java"
"FORMAT_ABBREV_ALL","true","false","false","true","true","int","0x80000","[]","Optional.empty","\android\text\format\DateUtils.java"
"FAST_FORMAT_HMMSS","false","false","true","true","true","String","""%1$d:%2$02d:%3$02d""","[]","Optional.empty","\android\text\format\DateUtils.java"
"MONTH_FORMAT","true","false","false","true","true","String","""%B""","[]","Optional.empty","\android\text\format\DateUtils.java"
"FORMAT_ABBREV_TIME","true","false","false","true","true","int","0x04000","[]","Optional.empty","\android\text\format\DateUtils.java"
"YEAR_IN_MILLIS","true","false","false","true","true","long","WEEK_IN_MILLIS * 52","[]","Optional[/**
 * This constant is actually the length of 364 days, not of a year!
 */
]","\android\text\format\DateUtils.java"
"sLock","false","false","true","true","true","Object","new Object()","[]","Optional.empty","\android\text\format\DateUtils.java"
"sStatusTimeFormat","false","false","true","true","false","java.text.DateFormat","null","[]","Optional.empty","\android\text\format\DateUtils.java"
"sMonthsMedium","false","false","true","true","true","int","new int[] { com.android.internal.R.string.month_medium_january, com.android.internal.R.string.month_medium_february, com.android.internal.R.string.month_medium_march, com.android.internal.R.string.month_medium_april, com.android.internal.R.string.month_medium_may, com.android.internal.R.string.month_medium_june, com.android.internal.R.string.month_medium_july, com.android.internal.R.string.month_medium_august, com.android.internal.R.string.month_medium_september, com.android.internal.R.string.month_medium_october, com.android.internal.R.string.month_medium_november, com.android.internal.R.string.month_medium_december }","[]","Optional.empty","\android\text\format\DateUtils.java"
"sMonthsLong","false","false","true","true","true","int","new int[] { com.android.internal.R.string.month_long_january, com.android.internal.R.string.month_long_february, com.android.internal.R.string.month_long_march, com.android.internal.R.string.month_long_april, com.android.internal.R.string.month_long_may, com.android.internal.R.string.month_long_june, com.android.internal.R.string.month_long_july, com.android.internal.R.string.month_long_august, com.android.internal.R.string.month_long_september, com.android.internal.R.string.month_long_october, com.android.internal.R.string.month_long_november, com.android.internal.R.string.month_long_december }","[]","Optional.empty","\android\text\format\DateUtils.java"
"FORMAT_24HOUR","true","false","false","true","true","int","0x00080","[]","Optional.empty","\android\text\format\DateUtils.java"
"HOUR_IN_MILLIS","true","false","false","true","true","long","MINUTE_IN_MILLIS * 60","[]","Optional.empty","\android\text\format\DateUtils.java"
"sameYearTable","true","false","false","true","true","int","{ com.android.internal.R.string.same_year_md1_md2, com.android.internal.R.string.same_year_wday1_md1_wday2_md2, com.android.internal.R.string.same_year_mdy1_mdy2, com.android.internal.R.string.same_year_wday1_mdy1_wday2_mdy2, com.android.internal.R.string.same_year_md1_time1_md2_time2, com.android.internal.R.string.same_year_wday1_md1_time1_wday2_md2_time2, com.android.internal.R.string.same_year_mdy1_time1_mdy2_time2, com.android.internal.R.string.same_year_wday1_mdy1_time1_wday2_mdy2_time2, // Numeric date strings
com.android.internal.R.string.numeric_md1_md2, com.android.internal.R.string.numeric_wday1_md1_wday2_md2, com.android.internal.R.string.numeric_mdy1_mdy2, com.android.internal.R.string.numeric_wday1_mdy1_wday2_mdy2, com.android.internal.R.string.numeric_md1_time1_md2_time2, com.android.internal.R.string.numeric_wday1_md1_time1_wday2_md2_time2, com.android.internal.R.string.numeric_mdy1_time1_mdy2_time2, com.android.internal.R.string.numeric_wday1_mdy1_time1_wday2_mdy2_time2 }","[]","Optional[// showWeekDay are both true, then the index would be 3.
]","\android\text\format\DateUtils.java"
"sameMonthTable","true","false","false","true","true","int","{ com.android.internal.R.string.same_month_md1_md2, com.android.internal.R.string.same_month_wday1_md1_wday2_md2, com.android.internal.R.string.same_month_mdy1_mdy2, com.android.internal.R.string.same_month_wday1_mdy1_wday2_mdy2, com.android.internal.R.string.same_month_md1_time1_md2_time2, com.android.internal.R.string.same_month_wday1_md1_time1_wday2_md2_time2, com.android.internal.R.string.same_month_mdy1_time1_mdy2_time2, com.android.internal.R.string.same_month_wday1_mdy1_time1_wday2_mdy2_time2, com.android.internal.R.string.numeric_md1_md2, com.android.internal.R.string.numeric_wday1_md1_wday2_md2, com.android.internal.R.string.numeric_mdy1_mdy2, com.android.internal.R.string.numeric_wday1_mdy1_wday2_mdy2, com.android.internal.R.string.numeric_md1_time1_md2_time2, com.android.internal.R.string.numeric_wday1_md1_time1_wday2_md2_time2, com.android.internal.R.string.numeric_mdy1_time1_mdy2_time2, com.android.internal.R.string.numeric_wday1_mdy1_time1_wday2_mdy2_time2 }","[]","Optional[// showWeekDay are both true, then the index would be 3.
]","\android\text\format\DateUtils.java"
"sDaysShort","false","false","true","true","true","int","new int[] { com.android.internal.R.string.day_of_week_short_sunday, com.android.internal.R.string.day_of_week_short_monday, com.android.internal.R.string.day_of_week_short_tuesday, com.android.internal.R.string.day_of_week_short_wednesday, com.android.internal.R.string.day_of_week_short_thursday, com.android.internal.R.string.day_of_week_short_friday, com.android.internal.R.string.day_of_week_short_saturday }","[]","Optional.empty","\android\text\format\DateUtils.java"
"sDaysShortest","false","false","true","true","true","int","new int[] { com.android.internal.R.string.day_of_week_shortest_sunday, com.android.internal.R.string.day_of_week_shortest_monday, com.android.internal.R.string.day_of_week_shortest_tuesday, com.android.internal.R.string.day_of_week_shortest_wednesday, com.android.internal.R.string.day_of_week_shortest_thursday, com.android.internal.R.string.day_of_week_shortest_friday, com.android.internal.R.string.day_of_week_shortest_saturday }","[]","Optional.empty","\android\text\format\DateUtils.java"
"FORMAT_NO_MIDNIGHT","true","false","false","true","true","int","0x00800","[]","Optional.empty","\android\text\format\DateUtils.java"
"sThenTime","false","false","true","true","false","Time","null","[]","Optional.empty","\android\text\format\DateUtils.java"
"LENGTH_MEDIUM","true","false","false","true","true","int","20","[]","Optional[/**
 * Request an abbreviated version of the name. For use with the 'abbrev'
 * parameter of {@link #getDayOfWeekString} and {@link #getMonthString}.
 *
 * @more <p>
 * e.g. ""Sun"" or ""Jan""
 */
]","\android\text\format\DateUtils.java"
"FORMAT_CAP_NOON","true","false","false","true","true","int","0x00400","[]","Optional.empty","\android\text\format\DateUtils.java"
"FORMAT_CAP_NOON_MIDNIGHT","true","false","false","true","true","int","(FORMAT_CAP_NOON | FORMAT_CAP_MIDNIGHT)","[]","Optional.empty","\android\text\format\DateUtils.java"
"HOUR_MINUTE_24","true","false","false","true","true","String","""%H:%M""","[]","Optional[/**
 * This is not actually the preferred 24-hour date format in all locales.
 */
]","\android\text\format\DateUtils.java"
"FORMAT_SHOW_DATE","true","false","false","true","true","int","0x00010","[]","Optional.empty","\android\text\format\DateUtils.java"
"sNowTime","false","false","true","true","false","Time","null","[]","Optional.empty","\android\text\format\DateUtils.java"
"FORMAT_NO_MONTH_DAY","true","false","false","true","true","int","0x00020","[]","Optional.empty","\android\text\format\DateUtils.java"
"YEAR_FORMAT_TWO_DIGITS","true","false","false","true","true","String","""%g""","[]","Optional.empty","\android\text\format\DateUtils.java"
"sElapsedFormatHMMSS","false","false","true","true","false","String","null","[]","Optional.empty","\android\text\format\DateUtils.java"
"LENGTH_SHORT","true","false","false","true","true","int","30","[]","Optional[/**
 * Request a shorter abbreviated version of the name.
 * For use with the 'abbrev' parameter of {@link #getDayOfWeekString} and {@link #getMonthString}.
 * @more
 * <p>e.g. ""Su"" or ""Jan""
 * <p>In most languages, the results returned for LENGTH_SHORT will be the same as
 * the results returned for {@link #LENGTH_MEDIUM}.
 */
]","\android\text\format\DateUtils.java"
"FORMAT_12HOUR","true","false","false","true","true","int","0x00040","[]","Optional.empty","\android\text\format\DateUtils.java"
"TIME_SEPARATOR","false","false","true","true","true","char","':'","[]","Optional.empty","\android\text\format\DateUtils.java"
"ABBREV_MONTH_FORMAT","true","false","false","true","true","String","""%b""","[]","Optional[/**
 * This is not actually a useful month name in all locales.
 */
]","\android\text\format\DateUtils.java"
"LENGTH_SHORTER","true","false","false","true","true","int","40","[]","Optional[/**
 * Request an even shorter abbreviated version of the name.
 * Do not use this.  Currently this will always return the same result
 * as {@link #LENGTH_SHORT}.
 */
]","\android\text\format\DateUtils.java"
"TIME_PADDING","false","false","true","true","true","char","'0'","[]","Optional.empty","\android\text\format\DateUtils.java"
"sMonthsStandaloneLong","false","false","true","true","true","int","new int[] { com.android.internal.R.string.month_long_standalone_january, com.android.internal.R.string.month_long_standalone_february, com.android.internal.R.string.month_long_standalone_march, com.android.internal.R.string.month_long_standalone_april, com.android.internal.R.string.month_long_standalone_may, com.android.internal.R.string.month_long_standalone_june, com.android.internal.R.string.month_long_standalone_july, com.android.internal.R.string.month_long_standalone_august, com.android.internal.R.string.month_long_standalone_september, com.android.internal.R.string.month_long_standalone_october, com.android.internal.R.string.month_long_standalone_november, com.android.internal.R.string.month_long_standalone_december }","[]","Optional.empty","\android\text\format\DateUtils.java"
"sDaysMedium","false","false","true","true","true","int","new int[] { com.android.internal.R.string.day_of_week_medium_sunday, com.android.internal.R.string.day_of_week_medium_monday, com.android.internal.R.string.day_of_week_medium_tuesday, com.android.internal.R.string.day_of_week_medium_wednesday, com.android.internal.R.string.day_of_week_medium_thursday, com.android.internal.R.string.day_of_week_medium_friday, com.android.internal.R.string.day_of_week_medium_saturday }","[]","Optional.empty","\android\text\format\DateUtils.java"
"DAY_IN_MILLIS","true","false","false","true","true","long","HOUR_IN_MILLIS * 24","[]","Optional.empty","\android\text\format\DateUtils.java"
"FORMAT_SHOW_TIME","true","false","false","true","true","int","0x00001","[]","Optional[// dates and times in the formatDateRange method.
]","\android\text\format\DateUtils.java"
"FORMAT_SHOW_WEEKDAY","true","false","false","true","true","int","0x00002","[]","Optional.empty","\android\text\format\DateUtils.java"
"FORMAT_NO_YEAR","true","false","false","true","true","int","0x00008","[]","Optional.empty","\android\text\format\DateUtils.java"
"FORMAT_UTC","true","false","false","true","true","int","0x02000","[@Deprecated]","Optional[/**
 * @deprecated Use
 * {@link #formatDateRange(Context, Formatter, long, long, int, String) formatDateRange}
 * and pass in {@link Time#TIMEZONE_UTC Time.TIMEZONE_UTC} for the timeZone instead.
 */
]","\android\text\format\DateUtils.java"
"FORMAT_CAP_AMPM","true","false","false","true","true","int","0x00100","[]","Optional.empty","\android\text\format\DateUtils.java"
"sElapsedFormatMMSS","false","false","true","true","false","String","null","[]","Optional.empty","\android\text\format\DateUtils.java"
"FAST_FORMAT_MMSS","false","false","true","true","true","String","""%1$02d:%2$02d""","[]","Optional.empty","\android\text\format\DateUtils.java"
"LENGTH_SHORTEST","true","false","false","true","true","int","50","[]","Optional[/**
 * Request an even shorter abbreviated version of the name.
 * For use with the 'abbrev' parameter of {@link #getDayOfWeekString} and {@link #getMonthString}.
 * @more
 * <p>e.g. ""S"", ""T"", ""T"" or ""J""
 * <p>In some languages, the results returned for LENGTH_SHORTEST will be the same as
 * the results returned for {@link #LENGTH_SHORT}.
 */
]","\android\text\format\DateUtils.java"
"SECOND_IN_MILLIS","true","false","false","true","true","long","1000","[]","Optional.empty","\android\text\format\DateUtils.java"
"FORMAT_ABBREV_MONTH","true","false","false","true","true","int","0x10000","[]","Optional.empty","\android\text\format\DateUtils.java"
"sDaysLong","false","false","true","true","true","int","new int[] { com.android.internal.R.string.day_of_week_long_sunday, com.android.internal.R.string.day_of_week_long_monday, com.android.internal.R.string.day_of_week_long_tuesday, com.android.internal.R.string.day_of_week_long_wednesday, com.android.internal.R.string.day_of_week_long_thursday, com.android.internal.R.string.day_of_week_long_friday, com.android.internal.R.string.day_of_week_long_saturday }","[]","Optional.empty","\android\text\format\DateUtils.java"
"FORMAT_ABBREV_WEEKDAY","true","false","false","true","true","int","0x08000","[]","Optional.empty","\android\text\format\DateUtils.java"
"FORMAT_CAP_MIDNIGHT","true","false","false","true","true","int","0x01000","[]","Optional.empty","\android\text\format\DateUtils.java"
"NUMERIC_MONTH_FORMAT","true","false","false","true","true","String","""%m""","[]","Optional.empty","\android\text\format\DateUtils.java"
"ABBREV_WEEKDAY_FORMAT","true","false","false","true","true","String","""%a""","[]","Optional.empty","\android\text\format\DateUtils.java"
"MONTH_DAY_FORMAT","true","false","false","true","true","String","""%-d""","[]","Optional.empty","\android\text\format\DateUtils.java"
"sLastConfig","false","false","true","true","false","Configuration","null","[]","Optional.empty","\android\text\format\DateUtils.java"
"sMonthsShortest","false","false","true","true","true","int","new int[] { com.android.internal.R.string.month_shortest_january, com.android.internal.R.string.month_shortest_february, com.android.internal.R.string.month_shortest_march, com.android.internal.R.string.month_shortest_april, com.android.internal.R.string.month_shortest_may, com.android.internal.R.string.month_shortest_june, com.android.internal.R.string.month_shortest_july, com.android.internal.R.string.month_shortest_august, com.android.internal.R.string.month_shortest_september, com.android.internal.R.string.month_shortest_october, com.android.internal.R.string.month_shortest_november, com.android.internal.R.string.month_shortest_december }","[]","Optional.empty","\android\text\format\DateUtils.java"
"MINUTE_IN_MILLIS","true","false","false","true","true","long","SECOND_IN_MILLIS * 60","[]","Optional.empty","\android\text\format\DateUtils.java"
"WEEK_IN_MILLIS","true","false","false","true","true","long","DAY_IN_MILLIS * 7","[]","Optional.empty","\android\text\format\DateUtils.java"
"LENGTH_LONG","true","false","false","true","true","int","10","[]","Optional[/**
 * Request the full spelled-out name. For use with the 'abbrev' parameter of
 * {@link #getDayOfWeekString} and {@link #getMonthString}.
 *
 * @more <p>
 * e.g. ""Sunday"" or ""January""
 */
]","\android\text\format\DateUtils.java"
"mDescriptor","false","false","true","false","false","String","null","[]","Optional.empty","\android\os\Binder.java"
"mObject","false","false","true","false","false","int","null","[]","Optional.empty","\android\os\Binder.java"
"mOwner","false","false","true","false","false","IInterface","null","[]","Optional.empty","\android\os\Binder.java"
"TAG","false","false","true","true","true","String","""Binder""","[]","Optional.empty","\android\os\Binder.java"
"mSelf","false","false","true","false","true","WeakReference","null","[]","Optional.empty","\android\os\Binder.java"
"FIND_POTENTIAL_LEAKS","false","false","true","true","true","boolean","false","[]","Optional[/*
     * Set this flag to true to detect anonymous, local or member classes
     * that extend this Binder class and that are not static. These kind
     * of classes can potentially create leaks.
     */
]","\android\os\Binder.java"
"mAdapter","false","false","true","false","true","NfcAdapter","null","[]","Optional.empty","\android\nfc\NfcManager.java"
"KEY_CUR_APP","true","false","false","true","true","String","""cur_app""","[]","Optional[/**
 * Package of current heavy-weight app.
 */
]","\com\android\internal\app\HeavyWeightSwitcherActivity.java"
"mHasResult","false","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\app\HeavyWeightSwitcherActivity.java"
"KEY_NEW_APP","true","false","false","true","true","String","""new_app""","[]","Optional[/**
 * Package of newly requested heavy-weight app.
 */
]","\com\android\internal\app\HeavyWeightSwitcherActivity.java"
"mCancelListener","false","false","true","false","false","OnClickListener","new OnClickListener() {

    public void onClick(View v) {
        finish();
    }
}","[]","Optional.empty","\com\android\internal\app\HeavyWeightSwitcherActivity.java"
"KEY_CUR_TASK","true","false","false","true","true","String","""cur_task""","[]","Optional[/**
 * Task that current heavy-weight activity is running in.
 */
]","\com\android\internal\app\HeavyWeightSwitcherActivity.java"
"KEY_INTENT","true","false","false","true","true","String","""intent""","[]","Optional[/**
 * The PendingIntent of the new activity being launched.
 */
]","\com\android\internal\app\HeavyWeightSwitcherActivity.java"
"mSwitchNewListener","false","false","true","false","false","OnClickListener","new OnClickListener() {

    public void onClick(View v) {
        try {
            ActivityManagerNative.getDefault().finishHeavyWeightApp();
        } catch (RemoteException e) {
        }
        try {
            if (mHasResult) {
                startIntentSenderForResult(mStartIntent, -1, null, Intent.FLAG_ACTIVITY_FORWARD_RESULT, Intent.FLAG_ACTIVITY_FORWARD_RESULT, 0);
            } else {
                startIntentSenderForResult(mStartIntent, -1, null, 0, 0, 0);
            }
        } catch (IntentSender.SendIntentException ex) {
            Log.w(""HeavyWeightSwitcherActivity"", ""Failure starting"", ex);
        }
        finish();
    }
}","[]","Optional.empty","\com\android\internal\app\HeavyWeightSwitcherActivity.java"
"mCurTask","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\app\HeavyWeightSwitcherActivity.java"
"mSwitchOldListener","false","false","true","false","false","OnClickListener","new OnClickListener() {

    public void onClick(View v) {
        try {
            ActivityManagerNative.getDefault().moveTaskToFront(mCurTask);
        } catch (RemoteException e) {
        }
        finish();
    }
}","[]","Optional.empty","\com\android\internal\app\HeavyWeightSwitcherActivity.java"
"mCurApp","false","false","false","false","false","String","null","[]","Optional.empty","\com\android\internal\app\HeavyWeightSwitcherActivity.java"
"mStartIntent","false","false","false","false","false","IntentSender","null","[]","Optional.empty","\com\android\internal\app\HeavyWeightSwitcherActivity.java"
"KEY_HAS_RESULT","true","false","false","true","true","String","""has_result""","[]","Optional[/**
 * Set if the caller is requesting a result.
 */
]","\com\android\internal\app\HeavyWeightSwitcherActivity.java"
"mNewApp","false","false","false","false","false","String","null","[]","Optional.empty","\com\android\internal\app\HeavyWeightSwitcherActivity.java"
"VENDOR_DOCOMO","false","false","true","true","true","String","""docomo""","[]","Optional[/**
 * name of the vendor ""Docomo"". <b>Note:</b> This isn't a public
 * constant, in order to keep this class from becoming a de facto
 * reference list of vendor names.
 */
]","\android\util\CharsetUtils.java"
"dbName","true","false","false","false","false","String","null","[]","Optional[/**
 * name of the database
 */
]","\android\database\sqlite\SQLiteDebug.java"
"pageSize","true","false","false","false","false","long","null","[]","Optional[/**
 * the page size for the database
 */
]","\android\database\sqlite\SQLiteDebug.java"
"memoryUsed","true","false","false","false","false","int","null","[]","Optional[/**
 * the current amount of memory checked out by sqlite using sqlite3_malloc().
 * documented at http://www.sqlite.org/c3ref/c_status_malloc_size.html
 */
]","\android\database\sqlite\SQLiteDebug.java"
"referencedBytes","true","false","false","false","false","long","null","[@Deprecated]","Optional[/**
 * The number of bytes in referenced pages in all pagers in the current process
 * @deprecated not used any longer
 */
]","\android\database\sqlite\SQLiteDebug.java"
"DEBUG_SQL_STATEMENTS","true","false","false","true","true","boolean","Log.isLoggable(""SQLiteStatements"", Log.VERBOSE)","[]","Optional[/**
 * Controls the printing of SQL statements as they are executed.
 */
]","\android\database\sqlite\SQLiteDebug.java"
"lookaside","true","false","false","false","false","int","null","[]","Optional[/**
 * documented here http://www.sqlite.org/c3ref/c_dbstatus_lookaside_used.html
 */
]","\android\database\sqlite\SQLiteDebug.java"
"DEBUG_ACTIVE_CURSOR_FINALIZATION","true","false","false","true","true","boolean","Log.isLoggable(""SQLiteCursorClosing"", Log.VERBOSE)","[]","Optional[/**
 * Controls the stack trace reporting of active cursors being
 * finalized.
 */
]","\android\database\sqlite\SQLiteDebug.java"
"largestMemAlloc","true","false","false","false","false","int","null","[]","Optional[/**
 * records the largest memory allocation request handed to sqlite3.
 * documented at http://www.sqlite.org/c3ref/c_status_malloc_size.html
 */
]","\android\database\sqlite\SQLiteDebug.java"
"databaseBytes","true","false","false","false","false","long","null","[@Deprecated]","Optional[/**
 * The number of bytes in all database files opened in the current process
 * @deprecated not used any longer
 */
]","\android\database\sqlite\SQLiteDebug.java"
"DEBUG_SQL_CACHE","true","false","false","true","true","boolean","Log.isLoggable(""SQLiteCompiledSql"", Log.VERBOSE)","[]","Optional[/**
 * Controls the printing of compiled-sql-statement cache stats.
 */
]","\android\database\sqlite\SQLiteDebug.java"
"DEBUG_LOCK_TIME_TRACKING","true","false","false","true","true","boolean","Log.isLoggable(""SQLiteLockTime"", Log.VERBOSE)","[]","Optional[/**
 * Controls the tracking of time spent holding the database lock.
 */
]","\android\database\sqlite\SQLiteDebug.java"
"DEBUG_SQL_TIME","true","false","false","true","true","boolean","Log.isLoggable(""SQLiteTime"", Log.VERBOSE)","[]","Optional[/**
 * Controls the printing of wall-clock time taken to execute SQL statements
 * as they are executed.
 */
]","\android\database\sqlite\SQLiteDebug.java"
"dbStats","true","false","false","false","false","ArrayList<DbStats>","null","[]","Optional[/**
 * a list of {@link DbStats} - one for each main database opened by the applications
 * running on the android device
 */
]","\android\database\sqlite\SQLiteDebug.java"
"numPagers","true","false","false","false","false","int","null","[@Deprecated]","Optional[/**
 * The number of pagers opened in the current process
 * @deprecated not used any longer
 */
]","\android\database\sqlite\SQLiteDebug.java"
"pageCacheOverflo","true","false","false","false","false","int","null","[]","Optional[/**
 * the number of bytes of page cache allocation which could not be sattisfied by the
 * SQLITE_CONFIG_PAGECACHE buffer and where forced to overflow to sqlite3_malloc().
 * The returned value includes allocations that overflowed because they where too large
 * (they were larger than the ""sz"" parameter to SQLITE_CONFIG_PAGECACHE) and allocations
 * that overflowed because no space was left in the page cache.
 * documented at http://www.sqlite.org/c3ref/c_status_malloc_size.html
 */
]","\android\database\sqlite\SQLiteDebug.java"
"sNumActiveCursorsFinalized","false","false","true","true","false","int","0","[]","Optional.empty","\android\database\sqlite\SQLiteDebug.java"
"dbSize","true","false","false","false","false","long","null","[]","Optional[/**
 * the database size
 */
]","\android\database\sqlite\SQLiteDebug.java"
"DEBUG_LOCK_TIME_TRACKING_STACK_TRACE","true","false","false","true","true","boolean","Log.isLoggable(""SQLiteLockStackTrace"", Log.VERBOSE)","[]","Optional[/**
 * Controls the printing of stack traces when tracking the time spent holding the database lock.
 */
]","\android\database\sqlite\SQLiteDebug.java"
"totalBytes","true","false","false","false","false","long","null","[@Deprecated]","Optional[/**
 * The total number of bytes in all pagers in the current process
 * @deprecated not used any longer
 */
]","\android\database\sqlite\SQLiteDebug.java"
"CONTENTS_FILE_DESCRIPTOR","true","false","false","true","true","int","0x0001","[]","Optional[/**
 * Bit masks for use with {@link #describeContents}: each bit represents a
 * kind of object considered to have potential special significance when
 * marshalled.
 */
]","\android\os\Parcelable.java"
"PARCELABLE_WRITE_RETURN_VALUE","true","false","false","true","true","int","0x0001","[]","Optional[/**
 * Flag for use with {@link #writeToParcel}: the object being written
 * is a return value, that is the result of a function such as
 * ""<code>Parcelable someFunction()</code>"",
 * ""<code>void someFunction(out Parcelable)</code>"", or
 * ""<code>void someFunction(inout Parcelable)</code>"".  Some implementations
 * may want to release resources at this point.
 */
]","\android\os\Parcelable.java"
"mPos","false","false","true","false","false","int","null","[]","Optional[// The current position offset, in bits, from the msb in byte 0.
]","\com\android\internal\util\BitwiseOutputStream.java"
"mBuf","false","false","true","false","false","byte","null","[]","Optional[// The byte array being written to, which will be grown as needed.
]","\com\android\internal\util\BitwiseOutputStream.java"
"mEnd","false","false","true","false","false","int","null","[]","Optional[// The last bit offset, given the current buf length.
]","\com\android\internal\util\BitwiseOutputStream.java"
"AXIS_SPECIFIED","true","false","false","true","true","int","0x0001","[]","Optional[/**
 * Raw bit indicating the gravity for an axis has been specified.
 */
]","\android\view\Gravity.java"
"CENTER","true","false","false","true","true","int","CENTER_VERTICAL | CENTER_HORIZONTAL","[]","Optional[/**
 * Place the object in the center of its container in both the vertical
 * and horizontal axis, not changing its size.
 */
]","\android\view\Gravity.java"
"NO_GRAVITY","true","false","false","true","true","int","0x0000","[]","Optional[/**
 * Constant indicating that no gravity has been set *
 */
]","\android\view\Gravity.java"
"LEFT","true","false","false","true","true","int","(AXIS_PULL_BEFORE | AXIS_SPECIFIED) << AXIS_X_SHIFT","[]","Optional[/**
 * Push object to the left of its container, not changing its size.
 */
]","\android\view\Gravity.java"
"DISPLAY_CLIP_HORIZONTAL","true","false","false","true","true","int","0x01000000","[]","Optional[/**
 * Special constant to enable clipping to an overall display along the
 * horizontal dimension.  This is not applied by default by
 * {@link #apply(int, int, int, Rect, int, int, Rect)}; you must do so
 * yourself by calling {@link #applyDisplay}.
 */
]","\android\view\Gravity.java"
"FILL_HORIZONTAL","true","false","false","true","true","int","LEFT | RIGHT","[]","Optional[/**
 * Grow the horizontal size of the object if needed so it completely fills
 * its container.
 */
]","\android\view\Gravity.java"
"FILL_VERTICAL","true","false","false","true","true","int","TOP | BOTTOM","[]","Optional[/**
 * Grow the vertical size of the object if needed so it completely fills
 * its container.
 */
]","\android\view\Gravity.java"
"AXIS_CLIP","true","false","false","true","true","int","0x0008","[]","Optional[/**
 * Raw bit controlling whether the right/bottom edge is clipped to its
 * container, based on the gravity direction being applied.
 */
]","\android\view\Gravity.java"
"CENTER_VERTICAL","true","false","false","true","true","int","AXIS_SPECIFIED << AXIS_Y_SHIFT","[]","Optional[/**
 * Place object in the vertical center of its container, not changing its
 * size.
 */
]","\android\view\Gravity.java"
"HORIZONTAL_GRAVITY_MASK","true","false","false","true","true","int","(AXIS_SPECIFIED | AXIS_PULL_BEFORE | AXIS_PULL_AFTER) << AXIS_X_SHIFT","[]","Optional[/**
 * Binary mask to get the horizontal gravity of a gravity.
 */
]","\android\view\Gravity.java"
"AXIS_PULL_AFTER","true","false","false","true","true","int","0x0004","[]","Optional[/**
 * Raw bit controlling how the right/bottom edge is placed.
 */
]","\android\view\Gravity.java"
"VERTICAL_GRAVITY_MASK","true","false","false","true","true","int","(AXIS_SPECIFIED | AXIS_PULL_BEFORE | AXIS_PULL_AFTER) << AXIS_Y_SHIFT","[]","Optional[/**
 * Binary mask to get the vertical gravity of a gravity.
 */
]","\android\view\Gravity.java"
"AXIS_PULL_BEFORE","true","false","false","true","true","int","0x0002","[]","Optional[/**
 * Raw bit controlling how the left/top edge is placed.
 */
]","\android\view\Gravity.java"
"DISPLAY_CLIP_VERTICAL","true","false","false","true","true","int","0x10000000","[]","Optional[/**
 * Special constant to enable clipping to an overall display along the
 * vertical dimension.  This is not applied by default by
 * {@link #apply(int, int, int, Rect, int, int, Rect)}; you must do so
 * yourself by calling {@link #applyDisplay}.
 */
]","\android\view\Gravity.java"
"BOTTOM","true","false","false","true","true","int","(AXIS_PULL_AFTER | AXIS_SPECIFIED) << AXIS_Y_SHIFT","[]","Optional[/**
 * Push object to the bottom of its container, not changing its size.
 */
]","\android\view\Gravity.java"
"AXIS_Y_SHIFT","true","false","false","true","true","int","4","[]","Optional[/**
 * Bits defining the vertical axis.
 */
]","\android\view\Gravity.java"
"TOP","true","false","false","true","true","int","(AXIS_PULL_BEFORE | AXIS_SPECIFIED) << AXIS_Y_SHIFT","[]","Optional[/**
 * Push object to the top of its container, not changing its size.
 */
]","\android\view\Gravity.java"
"AXIS_X_SHIFT","true","false","false","true","true","int","0","[]","Optional[/**
 * Bits defining the horizontal axis.
 */
]","\android\view\Gravity.java"
"CENTER_HORIZONTAL","true","false","false","true","true","int","AXIS_SPECIFIED << AXIS_X_SHIFT","[]","Optional[/**
 * Place object in the horizontal center of its container, not changing its
 * size.
 */
]","\android\view\Gravity.java"
"RIGHT","true","false","false","true","true","int","(AXIS_PULL_AFTER | AXIS_SPECIFIED) << AXIS_X_SHIFT","[]","Optional[/**
 * Push object to the right of its container, not changing its size.
 */
]","\android\view\Gravity.java"
"CLIP_VERTICAL","true","false","false","true","true","int","AXIS_CLIP << AXIS_Y_SHIFT","[]","Optional[/**
 * Flag to clip the edges of the object to its container along the
 * vertical axis.
 */
]","\android\view\Gravity.java"
"FILL","true","false","false","true","true","int","FILL_VERTICAL | FILL_HORIZONTAL","[]","Optional[/**
 * Grow the horizontal and vertical size of the object if needed so it
 * completely fills its container.
 */
]","\android\view\Gravity.java"
"CLIP_HORIZONTAL","true","false","false","true","true","int","AXIS_CLIP << AXIS_X_SHIFT","[]","Optional[/**
 * Flag to clip the edges of the object to its container along the
 * horizontal axis.
 */
]","\android\view\Gravity.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<ParcelUuid>","new Parcelable.Creator<ParcelUuid>() {

    public ParcelUuid createFromParcel(Parcel source) {
        long mostSigBits = source.readLong();
        long leastSigBits = source.readLong();
        UUID uuid = new UUID(mostSigBits, leastSigBits);
        return new ParcelUuid(uuid);
    }

    public ParcelUuid[] newArray(int size) {
        return new ParcelUuid[size];
    }
}","[]","Optional.empty","\android\os\ParcelUuid.java"
"mUuid","false","false","true","false","true","UUID","null","[]","Optional.empty","\android\os\ParcelUuid.java"
"mArray","true","false","false","false","false","byte","null","[]","Optional.empty","\android\webkit\ByteArrayBuilder.java"
"mChunks","false","false","true","false","false","LinkedList<Chunk>","null","[]","Optional.empty","\android\webkit\ByteArrayBuilder.java"
"sQueue","false","false","true","true","true","ReferenceQueue<Chunk>","new ReferenceQueue<Chunk>()","[]","Optional[// Reference queue for processing gc'd entries.
]","\android\webkit\ByteArrayBuilder.java"
"mLength","true","false","false","false","false","int","null","[]","Optional.empty","\android\webkit\ByteArrayBuilder.java"
"sPool","false","false","true","true","true","LinkedList<SoftReference<Chunk>>","new LinkedList<SoftReference<Chunk>>()","[]","Optional[// Global pool of chunks to be used by other ByteArrayBuilders.
]","\android\webkit\ByteArrayBuilder.java"
"DEFAULT_CAPACITY","false","false","true","true","true","int","8192","[]","Optional.empty","\android\webkit\ByteArrayBuilder.java"
"mParameterMap","false","false","true","false","false","Map<String,Collection<String>>","new HashMap<String, Collection<String>>()","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mNoteList","false","false","true","false","false","List<String>","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mImList","false","false","true","false","false","List<ImData>","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mPhotoList","false","false","true","false","false","List<PhotoData>","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mPropertyValueList","false","false","true","false","false","List<String>","new ArrayList<String>()","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mPhoneticFullName","false","false","true","false","false","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mPostalList","false","false","true","false","false","List<PostalData>","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"GOOGLE_MY_CONTACTS_GROUP","false","false","true","true","true","String","""System Group: My Contacts""","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mSuffix","false","false","true","false","false","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mPrefix","false","false","true","false","false","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"dataArray","false","false","true","false","true","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mPhoneList","false","false","true","false","false","List<PhoneData>","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"formatName","true","false","false","false","true","String","null","[]","Optional[// used when type is not defined in ContactsContract.
]","\android\pim\vcard\VCardEntry.java"
"ADDR_MAX_DATA_SIZE","true","false","false","true","true","int","7","[]","Optional[// - PO Box, Extended Addr, Street, Locality, Region, Postal Code, Country Name
]","\android\pim\vcard\VCardEntry.java"
"country","true","false","false","false","true","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"postalCode","true","false","false","false","true","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mVCardType","false","false","true","false","true","int","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"sImMap","false","false","true","true","true","Map<String,Integer>","new HashMap<String, Integer>()","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"FORMAT_FLASH","true","false","false","true","true","String","""SWF""","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mPropertyBytes","false","false","true","false","false","byte","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mPhoneticFamilyName","false","false","true","false","false","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"departmentName","true","false","false","false","false","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mBirthday","false","false","true","false","false","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"region","true","false","false","false","true","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"extendedAddress","true","false","false","false","true","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"street","true","false","false","false","true","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"LOG_TAG","false","false","true","true","true","String","""VCardEntry""","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"label","true","false","false","false","true","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mAccount","false","false","true","false","true","Account","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mWebsiteList","false","false","true","false","false","List<String>","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"companyName","true","false","false","false","false","String","null","[]","Optional[// different timing.
]","\android\pim\vcard\VCardEntry.java"
"mPropertyName","false","false","true","false","false","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"type","true","false","false","false","true","int","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mAnniversary","false","false","true","false","false","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"localty","true","false","false","false","true","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mNickNameList","false","false","true","false","false","List<String>","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"pobox","true","false","false","false","true","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"ACCOUNT_TYPE_GOOGLE","false","false","true","true","true","String","""com.google""","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mFormattedName","false","false","true","false","false","String","null","[]","Optional[// Used only when no family nor given name is found.
]","\android\pim\vcard\VCardEntry.java"
"mMiddleName","false","false","true","false","false","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mPhoneticMiddleName","false","false","true","false","false","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mPhoneticGivenName","false","false","true","false","false","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"photoBytes","true","false","false","false","true","byte","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mEmailList","false","false","true","false","false","List<EmailData>","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"data","true","false","false","false","true","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"sEmptyList","false","false","true","true","true","List<String>","Collections.unmodifiableList(new ArrayList<String>(0))","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"protocol","true","false","false","false","true","int","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mFamilyName","false","false","true","false","false","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mAndroidCustomPropertyList","false","false","true","false","false","List<List<String>>","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"titleName","true","false","false","false","false","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"phoneticName","true","false","false","false","true","String","null","[]","Optional[// We won't have this in ""TITLE"" property.
]","\android\pim\vcard\VCardEntry.java"
"isPrimary","true","false","false","false","true","boolean","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"customProtocol","true","false","false","false","true","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"DEFAULT_ORGANIZATION_TYPE","false","false","true","true","true","int","Organization.TYPE_WORK","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mOrganizationList","false","false","true","false","false","List<OrganizationData>","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mDisplayName","false","false","true","false","false","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mGivenName","false","false","true","false","false","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntry.java"
"mTab","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\style\TabStopSpan.java"
"mFiles","false","false","false","false","false","String","null","[]","Optional.empty","\android\app\backup\FileBackupHelper.java"
"mContext","false","false","false","false","false","Context","null","[]","Optional.empty","\android\app\backup\FileBackupHelper.java"
"mFilesDir","false","false","false","false","false","File","null","[]","Optional.empty","\android\app\backup\FileBackupHelper.java"
"TAG","false","false","true","true","true","String","""FileBackupHelper""","[]","Optional.empty","\android\app\backup\FileBackupHelper.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\app\backup\FileBackupHelper.java"
"mBinder","false","false","true","false","true","IBinder","new BackupServiceBinder().asBinder()","[]","Optional.empty","\android\app\backup\BackupAgent.java"
"TAG","false","false","true","true","true","String","""BackupServiceBinder""","[]","Optional.empty","\android\app\backup\BackupAgent.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\app\backup\BackupAgent.java"
"mBase","false","false","false","false","false","Context","null","[]","Optional.empty","\android\content\ContextWrapper.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<Signature>","new Parcelable.Creator<Signature>() {

    public Signature createFromParcel(Parcel source) {
        return new Signature(source);
    }

    public Signature[] newArray(int size) {
        return new Signature[size];
    }
}","[]","Optional.empty","\android\content\pm\Signature.java"
"mHashCode","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\pm\Signature.java"
"mSignature","false","false","true","false","true","byte","null","[]","Optional.empty","\android\content\pm\Signature.java"
"mHaveHashCode","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\content\pm\Signature.java"
"mStringRef","false","false","true","false","false","SoftReference<String>","null","[]","Optional.empty","\android\content\pm\Signature.java"
"mActivitiesList","false","true","false","false","false","List<ListItem>","null","[]","Optional.empty","\android\app\LauncherActivity.java"
"icon","true","false","false","false","false","Drawable","null","[]","Optional.empty","\android\app\LauncherActivity.java"
"mPackageManager","false","false","false","false","false","PackageManager","null","[]","Optional.empty","\android\app\LauncherActivity.java"
"resolveInfo","true","false","false","false","false","ResolveInfo","null","[]","Optional.empty","\android\app\LauncherActivity.java"
"label","true","false","false","false","false","CharSequence","null","[]","Optional.empty","\android\app\LauncherActivity.java"
"lock","false","false","true","false","true","Object","new Object()","[]","Optional.empty","\android\app\LauncherActivity.java"
"mFilter","false","false","true","false","false","Filter","null","[]","Optional.empty","\android\app\LauncherActivity.java"
"extras","true","false","false","false","false","Bundle","null","[]","Optional.empty","\android\app\LauncherActivity.java"
"className","true","false","false","false","false","String","null","[]","Optional.empty","\android\app\LauncherActivity.java"
"mOriginalValues","false","false","true","false","false","ArrayList<ListItem>","null","[]","Optional.empty","\android\app\LauncherActivity.java"
"mIconWidth","false","false","true","false","false","int","-1","[]","Optional[// Code is borrowed from com.android.launcher.Utilities.
]","\android\app\LauncherActivity.java"
"mOldBounds","false","false","true","false","true","Rect","new Rect()","[]","Optional.empty","\android\app\LauncherActivity.java"
"mIconResizer","false","true","false","false","true","IconResizer","null","[]","Optional.empty","\android\app\LauncherActivity.java"
"mInflater","false","true","false","false","true","LayoutInflater","null","[]","Optional.empty","\android\app\LauncherActivity.java"
"mIntent","false","false","false","false","false","Intent","null","[]","Optional.empty","\android\app\LauncherActivity.java"
"mIconHeight","false","false","true","false","false","int","-1","[]","Optional.empty","\android\app\LauncherActivity.java"
"mCanvas","false","false","true","false","false","Canvas","new Canvas()","[]","Optional.empty","\android\app\LauncherActivity.java"
"packageName","true","false","false","false","false","String","null","[]","Optional.empty","\android\app\LauncherActivity.java"
"mSelectedTechnology","false","false","false","false","false","int","null","[]","Optional[/*package*/
]","\android\nfc\tech\BasicTagTechnology.java"
"TAG","false","false","true","true","true","String","""NFC""","[]","Optional.empty","\android\nfc\tech\BasicTagTechnology.java"
"mIsConnected","false","false","false","false","false","boolean","null","[]","Optional[/*package*/
]","\android\nfc\tech\BasicTagTechnology.java"
"mTag","false","false","false","false","true","Tag","null","[]","Optional[/*package*/
]","\android\nfc\tech\BasicTagTechnology.java"
"mRebootReason","false","false","true","true","false","String","null","[]","Optional.empty","\com\android\internal\app\ShutdownThread.java"
"sIsStarted","false","false","true","true","false","boolean","false","[]","Optional.empty","\com\android\internal\app\ShutdownThread.java"
"mWakeLock","false","false","true","false","false","PowerManager.WakeLock","null","[]","Optional.empty","\com\android\internal\app\ShutdownThread.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\com\android\internal\app\ShutdownThread.java"
"mActionDoneSync","false","false","true","false","true","Object","new Object()","[]","Optional.empty","\com\android\internal\app\ShutdownThread.java"
"SHUTDOWN_VIBRATE_MS","false","false","true","true","true","int","500","[]","Optional[// length of vibration before shutting down
]","\com\android\internal\app\ShutdownThread.java"
"sIsStartedGuard","false","false","true","true","false","Object","new Object()","[]","Optional[// state tracking
]","\com\android\internal\app\ShutdownThread.java"
"mPowerManager","false","false","true","false","false","PowerManager","null","[]","Optional.empty","\com\android\internal\app\ShutdownThread.java"
"PHONE_STATE_POLL_SLEEP_MSEC","false","false","true","true","true","int","500","[]","Optional.empty","\com\android\internal\app\ShutdownThread.java"
"MAX_NUM_PHONE_STATE_READS","false","false","true","true","true","int","16","[]","Optional.empty","\com\android\internal\app\ShutdownThread.java"
"MAX_SHUTDOWN_WAIT_TIME","false","false","true","true","true","int","20 * 1000","[]","Optional.empty","\com\android\internal\app\ShutdownThread.java"
"mHandler","false","false","true","false","false","Handler","null","[]","Optional.empty","\com\android\internal\app\ShutdownThread.java"
"TAG","false","false","true","true","true","String","""ShutdownThread""","[]","Optional[// constants
]","\com\android\internal\app\ShutdownThread.java"
"sInstance","false","false","true","true","true","ShutdownThread","new ShutdownThread()","[]","Optional[// static instance of this thread
]","\com\android\internal\app\ShutdownThread.java"
"MAX_BROADCAST_TIME","false","false","true","true","true","int","10 * 1000","[]","Optional[// maximum time we wait for the shutdown broadcast before going on.
]","\com\android\internal\app\ShutdownThread.java"
"SHUTDOWN_ACTION_PROPERTY","true","false","false","true","true","String","""sys.shutdown.requested""","[]","Optional[// Provides shutdown assurance in case the system_server is killed
]","\com\android\internal\app\ShutdownThread.java"
"mActionDone","false","false","true","false","false","boolean","null","[]","Optional.empty","\com\android\internal\app\ShutdownThread.java"
"mReboot","false","false","true","true","false","boolean","null","[]","Optional.empty","\com\android\internal\app\ShutdownThread.java"
"mLabel","false","false","true","false","false","String","null","[]","Optional[/**
 * A label to be included in every log.
 */
]","\android\util\TimingLogger.java"
"mDisabled","false","false","true","false","false","boolean","null","[]","Optional[/**
 * Used to track whether Log.isLoggable was enabled at reset time.
 */
]","\android\util\TimingLogger.java"
"mSplits","false","false","false","false","false","ArrayList<Long>","null","[]","Optional[/**
 * Stores the time of each split.
 */
]","\android\util\TimingLogger.java"
"mSplitLabels","false","false","false","false","false","ArrayList<String>","null","[]","Optional[/**
 * Stores the labels for each split.
 */
]","\android\util\TimingLogger.java"
"mTag","false","false","true","false","false","String","null","[]","Optional[/**
 * The Log tag to use for checking Log.isLoggable and for
 * logging the timings.
 */
]","\android\util\TimingLogger.java"
"FLAG_CANCEL_CURRENT","true","false","false","true","true","int","1 << 28","[]","Optional[/**
 * Flag for use with {@link #getActivity}, {@link #getBroadcast}, and
 * {@link #getService}: if the described PendingIntent already exists,
 * the current one is canceled before generating a new one.  You can use
 * this to retrieve a new PendingIntent when you are only changing the
 * extra data in the Intent; by canceling the previous pending intent,
 * this ensures that only entities given the new data will be able to
 * launch it.  If this assurance is not an issue, consider
 * {@link #FLAG_UPDATE_CURRENT}.
 */
]","\android\app\PendingIntent.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<PendingIntent>","new Parcelable.Creator<PendingIntent>() {

    public PendingIntent createFromParcel(Parcel in) {
        IBinder target = in.readStrongBinder();
        return target != null ? new PendingIntent(target) : null;
    }

    public PendingIntent[] newArray(int size) {
        return new PendingIntent[size];
    }
}","[]","Optional.empty","\android\app\PendingIntent.java"
"mWho","false","false","true","false","true","OnFinished","null","[]","Optional.empty","\android\app\PendingIntent.java"
"FLAG_NO_CREATE","true","false","false","true","true","int","1 << 29","[]","Optional[/**
 * Flag for use with {@link #getActivity}, {@link #getBroadcast}, and
 * {@link #getService}: if the described PendingIntent does not already
 * exist, then simply return null instead of creating it.
 */
]","\android\app\PendingIntent.java"
"mTarget","false","false","true","false","true","IIntentSender","null","[]","Optional.empty","\android\app\PendingIntent.java"
"FLAG_ONE_SHOT","true","false","false","true","true","int","1 << 30","[]","Optional[/**
 * Flag for use with {@link #getActivity}, {@link #getBroadcast}, and
 * {@link #getService}: this
 * PendingIntent can only be used once.  If set, after
 * {@link #send()} is called on it, it will be automatically
 * canceled for you and any future attempt to send through it will fail.
 */
]","\android\app\PendingIntent.java"
"mResultExtras","false","false","true","false","false","Bundle","null","[]","Optional.empty","\android\app\PendingIntent.java"
"mPendingIntent","false","false","true","false","true","PendingIntent","null","[]","Optional.empty","\android\app\PendingIntent.java"
"mHandler","false","false","true","false","true","Handler","null","[]","Optional.empty","\android\app\PendingIntent.java"
"mResultData","false","false","true","false","false","String","null","[]","Optional.empty","\android\app\PendingIntent.java"
"mIntent","false","false","true","false","false","Intent","null","[]","Optional.empty","\android\app\PendingIntent.java"
"FLAG_UPDATE_CURRENT","true","false","false","true","true","int","1 << 27","[]","Optional[/**
 * Flag for use with {@link #getActivity}, {@link #getBroadcast}, and
 * {@link #getService}: if the described PendingIntent already exists,
 * then keep it but its replace its extra data with what is in this new
 * Intent.  This can be used if you are creating intents where only the
 * extras change, and don't care that any entities that received your
 * previous PendingIntent will be able to launch it with your new
 * extras even if they are not explicitly given to it.
 */
]","\android\app\PendingIntent.java"
"mResultCode","false","false","true","false","false","int","null","[]","Optional.empty","\android\app\PendingIntent.java"
"mContext","false","true","false","false","false","Context","null","[]","Optional.empty","\android\test\AndroidTestCase.java"
"mTestContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\test\AndroidTestCase.java"
"MSG_INCOMING_HANDSFREE_CONNECTION","true","false","false","true","true","int","101","[]","Optional.empty","\android\bluetooth\BluetoothAudioGateway.java"
"mHandsfreeAgRfcommChannel","false","false","true","false","false","int","-1","[]","Optional[/* in */
]","\android\bluetooth\BluetoothAudioGateway.java"
"mInterrupted","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\bluetooth\BluetoothAudioGateway.java"
"mTimeoutRemainingMs","false","false","true","false","false","int","null","[]","Optional.empty","\android\bluetooth\BluetoothAudioGateway.java"
"mConnectingHeadsetSocketFd","false","false","true","false","false","int","null","[]","Optional[/* -1 when not connected */
]","\android\bluetooth\BluetoothAudioGateway.java"
"mConnectingHandsfreeRfcommChannel","false","false","true","false","false","int","null","[]","Optional.empty","\android\bluetooth\BluetoothAudioGateway.java"
"mConnectingHandsfreeSocketFd","false","false","true","false","false","int","null","[]","Optional[/* -1 when not connected */
]","\android\bluetooth\BluetoothAudioGateway.java"
"MSG_INCOMING_HEADSET_CONNECTION","true","false","false","true","true","int","100","[]","Optional.empty","\android\bluetooth\BluetoothAudioGateway.java"
"mConnectingHeadsetRfcommChannel","false","false","true","false","false","int","null","[]","Optional.empty","\android\bluetooth\BluetoothAudioGateway.java"
"mConnectingHeadsetAddress","false","false","true","false","false","String","null","[]","Optional[/* out - written by native code */
]","\android\bluetooth\BluetoothAudioGateway.java"
"mRfcommChan","true","false","false","false","false","int","null","[]","Optional.empty","\android\bluetooth\BluetoothAudioGateway.java"
"mHeadsetAgRfcommChannel","false","false","true","false","false","int","-1","[]","Optional.empty","\android\bluetooth\BluetoothAudioGateway.java"
"DEFAULT_HS_AG_CHANNEL","true","false","false","true","true","int","11","[]","Optional.empty","\android\bluetooth\BluetoothAudioGateway.java"
"SELECT_WAIT_TIMEOUT","false","false","true","true","true","int","1000","[]","Optional.empty","\android\bluetooth\BluetoothAudioGateway.java"
"mSocketFd","true","false","false","false","false","int","null","[]","Optional.empty","\android\bluetooth\BluetoothAudioGateway.java"
"DEFAULT_HF_AG_CHANNEL","true","false","false","true","true","int","10","[]","Optional.empty","\android\bluetooth\BluetoothAudioGateway.java"
"mCallback","false","false","true","false","false","Handler","null","[]","Optional.empty","\android\bluetooth\BluetoothAudioGateway.java"
"TAG","false","false","true","true","true","String","""BT Audio Gateway""","[]","Optional.empty","\android\bluetooth\BluetoothAudioGateway.java"
"DBG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\bluetooth\BluetoothAudioGateway.java"
"mConnectThead","false","false","true","false","false","Thread","null","[]","Optional.empty","\android\bluetooth\BluetoothAudioGateway.java"
"mNativeData","false","false","true","false","false","int","null","[]","Optional.empty","\android\bluetooth\BluetoothAudioGateway.java"
"mAdapter","true","false","false","false","false","BluetoothAdapter","null","[]","Optional.empty","\android\bluetooth\BluetoothAudioGateway.java"
"mRemoteDevice","true","false","false","false","false","BluetoothDevice","null","[]","Optional.empty","\android\bluetooth\BluetoothAudioGateway.java"
"mConnectingHandsfreeAddress","false","false","true","false","false","String","null","[]","Optional.empty","\android\bluetooth\BluetoothAudioGateway.java"
"OWNER_ACCOUNT","true","false","false","true","true","String","""ownerAccount""","[]","Optional[/**
 * The owner account for this calendar, based on the calendar (foreign
 * key into the calendars table).
 * <P>Type: String</P>
 */
]","\android\provider\Calendar.java"
"CAN_INVITE_OTHERS","true","false","false","true","true","String","""canInviteOthers""","[]","Optional[/**
 * Whether the user can invite others to the event.
 * The GUESTS_CAN_INVITE_OTHERS is a setting that applies to an arbitrary guest,
 * while CAN_INVITE_OTHERS indicates if the user can invite others (either through
 * GUESTS_CAN_INVITE_OTHERS or because the user has modify access to the event).
 * <P>Type: INTEGER (boolean, readonly)</P>
 */
]","\android\provider\Calendar.java"
"SCHEDULED","true","false","false","true","true","int","0","[]","Optional.empty","\android\provider\Calendar.java"
"RELATIONSHIP_PERFORMER","true","false","false","true","true","int","3","[]","Optional.empty","\android\provider\Calendar.java"
"HTML_URI","true","false","false","true","true","String","""htmlUri""","[]","Optional[/**
 * The URI for an HTML version of this event.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Calendar.java"
"ATTENDEES_PROJECTION","false","false","true","true","true","String","new String[] { Attendees.ATTENDEE_NAME, Attendees.ATTENDEE_EMAIL, Attendees.ATTENDEE_RELATIONSHIP, Attendees.ATTENDEE_TYPE, Attendees.ATTENDEE_STATUS }","[]","Optional.empty","\android\provider\Calendar.java"
"COLUMN_ATTENDEE_NAME","false","false","true","true","true","int","0","[]","Optional.empty","\android\provider\Calendar.java"
"ATTENDEES_COLUMNS","false","false","true","true","true","String","new String[] { AttendeesColumns.ATTENDEE_NAME, AttendeesColumns.ATTENDEE_EMAIL, AttendeesColumns.ATTENDEE_RELATIONSHIP, AttendeesColumns.ATTENDEE_TYPE, AttendeesColumns.ATTENDEE_STATUS }","[]","Optional.empty","\android\provider\Calendar.java"
"NO_ACCESS","true","false","false","true","true","int","0","[]","Optional[/**
 * Cannot access the calendar
 */
]","\android\provider\Calendar.java"
"ATTENDEE_RELATIONSHIP","true","false","false","true","true","String","""attendeeRelationship""","[]","Optional[/**
 * The relationship of the attendee to the user.
 * <P>Type: INTEGER (one of {@link #RELATIONSHIP_ATTENDEE}, ...}.
 */
]","\android\provider\Calendar.java"
"CONTENT_URI_BY_INSTANCE","true","false","false","true","true","Uri","Uri.parse(""content://"" + AUTHORITY + ""/calendar_alerts/by_instance"")","[]","Optional[/**
 * This URI is for grouping the query results by event_id and begin
 * time.  This will return one result per instance of an event.  So
 * events with multiple alarms will appear just once, but multiple
 * instances of a repeating event will show up multiple times.
 */
]","\android\provider\Calendar.java"
"DELETED_CONTENT_URI","true","false","false","true","true","Uri","Uri.parse(""content://"" + AUTHORITY + ""/deleted_events"")","[]","Optional.empty","\android\provider\Calendar.java"
"ORGANIZER_CAN_RESPOND","true","false","false","true","true","String","""organizerCanRespond""","[]","Optional[/**
 * Can the organizer respond to the event?  If no, the status of the
 * organizer should not be shown by the UI.  Defaults to 1
 * <P>Type: INTEGER (boolean)</P>
 */
]","\android\provider\Calendar.java"
"COMMENTS_URI","true","false","false","true","true","String","""commentsUri""","[]","Optional[/**
 * The comments feed uri.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Calendar.java"
"WHERE","true","false","false","true","true","String","""key=?""","[]","Optional[/**
 * If updating a property, this must be provided as the selection. All
 * other selections will fail. For queries this field can be omitted to
 * retrieve all properties or used to query a single property. Valid
 * keys include {@link #TIMEZONE_KEY_TYPE},
 * {@link #TIMEZONE_KEY_INSTANCES}, and
 * {@link #TIMEZONE_KEY_INSTANCES_PREVIOUS}, though the last one can
 * only be read, not written.
 */
]","\android\provider\Calendar.java"
"DISPLAY_NAME","true","false","false","true","true","String","""displayName""","[]","Optional[/**
 * The display name of the calendar
 * <P>Type: TEXT</P>
 */
]","\android\provider\Calendar.java"
"HAS_EXTENDED_PROPERTIES","true","false","false","true","true","String","""hasExtendedProperties""","[]","Optional[/**
 * Whether the event has extended properties or not
 * <P>Type: INTEGER (boolean)</P>
 */
]","\android\provider\Calendar.java"
"OWNER_ACCESS","true","false","false","true","true","int","700","[]","Optional[/**
 * Full access to the calendar
 */
]","\android\provider\Calendar.java"
"RELATIONSHIP_SPEAKER","true","false","false","true","true","int","4","[]","Optional.empty","\android\provider\Calendar.java"
"EVENT_ID","true","false","false","true","true","String","""event_id""","[]","Optional[/**
 * The event the extended property belongs to
 * <P>Type: INTEGER (foreign key to the Events table)</P>
 */
]","\android\provider\Calendar.java"
"NOTIFY_TIME","true","false","false","true","true","String","""notifyTime""","[]","Optional[/**
 * The time that the notification was created by the Calendar app,
 * in UTC. (Useful for debugging missed reminders.)
 * <P>Type: INTEGER (long; millis since epoch)</P>
 */
]","\android\provider\Calendar.java"
"RELATIONSHIP_ATTENDEE","true","false","false","true","true","int","1","[]","Optional.empty","\android\provider\Calendar.java"
"KEY","true","false","false","true","true","String","""key""","[]","Optional[/**
 * The key for the setting. Keys are defined in CalendarChache in the
 * Calendar provider.
 * TODO Add keys to this file
 */
]","\android\provider\Calendar.java"
"LOCATION","true","false","false","true","true","String","""location""","[]","Optional[/**
 * The location the of the events in the calendar
 * <P>Type: TEXT</P>
 */
]","\android\provider\Calendar.java"
"GUESTS_CAN_SEE_GUESTS","true","false","false","true","true","String","""guestsCanSeeGuests""","[]","Optional[/**
 * Whether guests can see the list of attendees.
 * <P>Type: INTEGER (boolean)</P>
 */
]","\android\provider\Calendar.java"
"FREEBUSY_ACCESS","true","false","false","true","true","int","100","[]","Optional[/**
 * Can only see free/busy information about the calendar
 */
]","\android\provider\Calendar.java"
"READ_ACCESS","true","false","false","true","true","int","200","[]","Optional[/**
 * Can read all event details
 */
]","\android\provider\Calendar.java"
"TIMEZONE_KEY_INSTANCES_PREVIOUS","true","false","false","true","true","String","""timezoneInstancesPrevious""","[]","Optional[/**
 * The key for reading the last time zone set by the user. This should
 * only be read by apps and it will be automatically updated whenever
 * {@link #TIMEZONE_KEY_INSTANCES} is updated with
 * {@link #TIMEZONE_TYPE_HOME} set.
 */
]","\android\provider\Calendar.java"
"DESCRIPTION","true","false","false","true","true","String","""description""","[]","Optional[/**
 * The description of the event
 * <P>Type: TEXT</P>
 */
]","\android\provider\Calendar.java"
"EXDATE","true","false","false","true","true","String","""exdate""","[]","Optional[/**
 * The recurrence exception dates for the event.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Calendar.java"
"LAST_DATE","true","false","false","true","true","String","""lastDate""","[]","Optional[/**
 * The last date this event repeats on, or NULL if it never ends
 * <P>Type: INTEGER (long; millis since epoch)</P>
 */
]","\android\provider\Calendar.java"
"SORT_CALENDAR_VIEW","true","false","false","true","true","String","""begin ASC, end DESC, title ASC""","[]","Optional[/**
 * The sort order is: events with an earlier start time occur
 * first and if the start times are the same, then events with
 * a later end time occur first. The later end time is ordered
 * first so that long-running events in the calendar views appear
 * first.  If the start and end times of two events are
 * the same then we sort alphabetically on the title.  This isn't
 * required for correctness, it just adds a nice touch.
 */
]","\android\provider\Calendar.java"
"ORIGINAL_EVENT","true","false","false","true","true","String","""originalEvent""","[]","Optional[/**
 * The _sync_id of the original recurring event for which this event is
 * an exception.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Calendar.java"
"WHERE_ALARM_EXISTS","false","false","true","true","true","String","EVENT_ID + ""=?"" + "" AND "" + BEGIN + ""=?"" + "" AND "" + ALARM_TIME + ""=?""","[]","Optional.empty","\android\provider\Calendar.java"
"FETCH_ENTRY_COLUMNS","false","false","true","true","true","String","new String[] { Events._SYNC_ACCOUNT, Events._SYNC_ID }","[]","Optional.empty","\android\provider\Calendar.java"
"GUESTS_CAN_INVITE_OTHERS","true","false","false","true","true","String","""guestsCanInviteOthers""","[]","Optional[/**
 * Whether guests can invite other guests.
 * <P>Type: INTEGER (boolean)</P>
 */
]","\android\provider\Calendar.java"
"ROOT_ACCESS","true","false","false","true","true","int","800","[]","Optional[/**
 * Domain admin
 */
]","\android\provider\Calendar.java"
"TIMEZONE_TYPE_HOME","true","false","false","true","true","String","""home""","[]","Optional[/**
 * The value to write to {@link #TIMEZONE_KEY_TYPE} if the provider
 * should use a fixed time zone set by the user.
 */
]","\android\provider\Calendar.java"
"ACCESS_LEVEL","true","false","false","true","true","String","""access_level""","[]","Optional[/**
 * The level of access that the user has for the calendar
 * <P>Type: INTEGER (one of the values below)</P>
 */
]","\android\provider\Calendar.java"
"_SYNC_ACCOUNT","true","false","false","true","true","String","""_sync_account""","[]","Optional[/**
 * The account that was used to sync the entry to the device.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Calendar.java"
"HAS_ATTENDEE_DATA","true","false","false","true","true","String","""hasAttendeeData""","[]","Optional[/**
 * Whether the event has attendee information.  True if the event
 * has full attendee data, false if the event has information about
 * self only.
 * <P>Type: INTEGER (boolean)</P>
 */
]","\android\provider\Calendar.java"
"DURATION","true","false","false","true","true","String","""duration""","[]","Optional[/**
 * The duration of the event
 * <P>Type: TEXT (duration in RFC2445 format)</P>
 */
]","\android\provider\Calendar.java"
"SYNC_STATE","true","false","false","true","true","String","""sync_state""","[]","Optional[/**
 * Sync state data.
 * <p>Type: String (blob)</p>
 */
]","\android\provider\Calendar.java"
"WHERE_CALENDARS_SELECTED","false","false","true","true","true","String","Calendars.SELECTED + ""=1""","[]","Optional.empty","\android\provider\Calendar.java"
"TABLE_NAME","true","false","false","true","true","String","""CalendarAlerts""","[]","Optional.empty","\android\provider\Calendar.java"
"CREATION_TIME","true","false","false","true","true","String","""creationTime""","[]","Optional[/**
 * The creation time of this database entry, in UTC.
 * (Useful for debugging missed reminders.)
 * <P>Type: INTEGER (long; millis since epoch)</P>
 */
]","\android\provider\Calendar.java"
"DTSTART","true","false","false","true","true","String","""dtstart""","[]","Optional[/**
 * The time the event starts
 * <P>Type: INTEGER (long; millis since epoch)</P>
 */
]","\android\provider\Calendar.java"
"COLUMN_ID","false","false","true","true","true","int","0","[]","Optional.empty","\android\provider\Calendar.java"
"EXRULE","true","false","false","true","true","String","""exrule""","[]","Optional[/**
 * The recurrence exception rule for the event.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Calendar.java"
"CONTENT_BY_DAY_URI","true","false","false","true","true","Uri","Uri.parse(""content://"" + AUTHORITY + ""/instances/whenbyday"")","[]","Optional.empty","\android\provider\Calendar.java"
"CALLER_IS_SYNCADAPTER","true","false","false","true","true","String","""caller_is_syncadapter""","[]","Optional[/**
 * An optional insert, update or delete URI parameter that allows the caller
 * to specify that it is a sync adapter. The default value is false. If true
 * the dirty flag is not automatically set and the ""syncToNetwork"" parameter
 * is set to false when calling
 * {@link ContentResolver#notifyChange(android.net.Uri, android.database.ContentObserver, boolean)}.
 */
]","\android\provider\Calendar.java"
"COLOR","true","false","false","true","true","String","""color""","[]","Optional[/**
 * The color of the calendar
 * <P>Type: INTEGER (color value)</P>
 */
]","\android\provider\Calendar.java"
"TYPE_OPTIONAL","true","false","false","true","true","int","2","[]","Optional.empty","\android\provider\Calendar.java"
"OVERRIDE_ACCESS","true","false","false","true","true","int","400","[]","Optional.empty","\android\provider\Calendar.java"
"POJECTION","true","false","false","true","true","String","{ KEY, VALUE }","[]","Optional.empty","\android\provider\Calendar.java"
"TYPE_REQUIRED","true","false","false","true","true","int","1","[]","Optional.empty","\android\provider\Calendar.java"
"HIDDEN","true","false","false","true","true","String","""hidden""","[]","Optional[/**
 * Should the calendar be hidden in the calendar selection panel?
 * <P>Type: INTEGER (boolean)</P>
 */
]","\android\provider\Calendar.java"
"STATUS_CANCELED","true","false","false","true","true","int","2","[]","Optional.empty","\android\provider\Calendar.java"
"REMINDERS_PROJECTION","false","false","true","true","true","String","new String[] { Reminders.MINUTES, Reminders.METHOD }","[]","Optional.empty","\android\provider\Calendar.java"
"NAME","true","false","false","true","true","String","""name""","[]","Optional[/**
 * The name of the extended property.  This is a uri of the form
 * {scheme}#{local-name} convention.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Calendar.java"
"_SYNC_ACCOUNT_TYPE","true","false","false","true","true","String","""_sync_account_type""","[]","Optional[/**
 * The type of the account that was used to sync the entry to the device.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Calendar.java"
"SYNC_ADAPTER_DATA","true","false","false","true","true","String","""syncAdapterData""","[]","Optional[/**
 * This column is available for use by sync adapters
 * <P>Type: TEXT</P>
 */
]","\android\provider\Calendar.java"
"END","true","false","false","true","true","String","""end""","[]","Optional[/**
 * The end time of the event, in UTC
 * <P>Type: INTEGER (long; millis since epoch)</P>
 */
]","\android\provider\Calendar.java"
"SELECTION","true","false","false","true","true","String","""selected=1""","[]","Optional.empty","\android\provider\Calendar.java"
"METHOD_ALERT","true","false","false","true","true","int","1","[]","Optional.empty","\android\provider\Calendar.java"
"START_DAY","true","false","false","true","true","String","""startDay""","[]","Optional[/**
 * The Julian start day of the instance, relative to the local timezone
 * <P>Type: INTEGER (int)</P>
 */
]","\android\provider\Calendar.java"
"WHERE_EVENT_ID","false","false","true","true","true","String","""event_id=?""","[]","Optional.empty","\android\provider\Calendar.java"
"ACCOUNT_TYPE","true","false","false","true","true","String","""account_type""","[]","Optional[/**
 * The type of account to which this row belongs, which when paired with
 * {@link #ACCOUNT_NAME} identifies a specific account.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Calendar.java"
"ENDDAY","true","false","false","true","true","String","""endDay""","[]","Optional.empty","\android\provider\Calendar.java"
"STATE","true","false","false","true","true","String","""state""","[]","Optional[/**
 * The state of this alert.  It starts out as SCHEDULED, then when
 * the alarm goes off, it changes to FIRED, and then when the user
 * dismisses the alarm it changes to DISMISSED.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Calendar.java"
"ATTENDEE_NAME","true","false","false","true","true","String","""attendeeName""","[]","Optional[/**
 * The name of the attendee.
 * <P>Type: STRING</P>
 */
]","\android\provider\Calendar.java"
"DELETED","true","false","false","true","true","String","""deleted""","[]","Optional[/**
 * Whether the row has been deleted.  A deleted row should be ignored.
 * <P>Type: INTEGER (boolean)</P>
 */
]","\android\provider\Calendar.java"
"ORIGINAL_INSTANCE_TIME","true","false","false","true","true","String","""originalInstanceTime""","[]","Optional[/**
 * The original instance time of the recurring event for which this
 * event is an exception.
 * <P>Type: INTEGER (long; millis since epoch)</P>
 */
]","\android\provider\Calendar.java"
"VISIBILITY_DEFAULT","true","false","false","true","true","int","0","[]","Optional.empty","\android\provider\Calendar.java"
"EXTENDED_PROJECTION","false","false","true","true","true","String","new String[] { ExtendedProperties._ID, ExtendedProperties.NAME, ExtendedProperties.VALUE }","[]","Optional.empty","\android\provider\Calendar.java"
"STARTDAY","true","false","false","true","true","String","""startDay""","[]","Optional[/**
 * The Julian starting day number.
 * <P>Type: INTEGER (int)</P>
 */
]","\android\provider\Calendar.java"
"_SYNC_MARK","true","false","false","true","true","String","""_sync_mark""","[]","Optional[/**
 * Used only in persistent providers, and only during merging.
 * <P>Type: INTEGER (long)</P>
 */
]","\android\provider\Calendar.java"
"ATTENDEE_STATUS_DECLINED","true","false","false","true","true","int","2","[]","Optional.empty","\android\provider\Calendar.java"
"_SYNC_TIME","true","false","false","true","true","String","""_sync_time""","[]","Optional[/**
 * The last time, from the sync source's point of view, that this row has been synchronized.
 * <P>Type: INTEGER (long)</P>
 */
]","\android\provider\Calendar.java"
"RRULE","true","false","false","true","true","String","""rrule""","[]","Optional[/**
 * The recurrence rule for the event.
 * than one.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Calendar.java"
"END_DAY","true","false","false","true","true","String","""endDay""","[]","Optional[/**
 * The Julian end day of the instance, relative to the local timezone
 * <P>Type: INTEGER (int)</P>
 */
]","\android\provider\Calendar.java"
"VISIBILITY_PUBLIC","true","false","false","true","true","int","3","[]","Optional.empty","\android\provider\Calendar.java"
"TITLE","true","false","false","true","true","String","""title""","[]","Optional[/**
 * The title of the event
 * <P>Type: TEXT</P>
 */
]","\android\provider\Calendar.java"
"MINUTES","true","false","false","true","true","String","""minutes""","[]","Optional[/**
 * The number of minutes that this alarm precedes the start time
 * <P>Type: INTEGER </P>
 */
]","\android\provider\Calendar.java"
"RELATIONSHIP_NONE","true","false","false","true","true","int","0","[]","Optional.empty","\android\provider\Calendar.java"
"DISMISSED","true","false","false","true","true","int","2","[]","Optional.empty","\android\provider\Calendar.java"
"VISIBILITY_CONFIDENTIAL","true","false","false","true","true","int","1","[]","Optional.empty","\android\provider\Calendar.java"
"TIMEZONE_KEY_INSTANCES","true","false","false","true","true","String","""timezoneInstances""","[]","Optional[/**
 * The key for updating the time zone used by the provider when it
 * generates the instances table. This should only be written if the
 * type is set to {@link #TIMEZONE_TYPE_HOME}. A valid time zone id
 * should be written to this field.
 */
]","\android\provider\Calendar.java"
"EVENT_LOCATION","true","false","false","true","true","String","""eventLocation""","[]","Optional[/**
 * Where the event takes place.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Calendar.java"
"STATUS_CONFIRMED","true","false","false","true","true","int","1","[]","Optional.empty","\android\provider\Calendar.java"
"TIMEZONE","true","false","false","true","true","String","""timezone""","[]","Optional[/**
 * The timezone the calendar's events occurs in
 * <P>Type: TEXT</P>
 */
]","\android\provider\Calendar.java"
"ATTENDEE_EMAIL","true","false","false","true","true","String","""attendeeEmail""","[]","Optional[/**
 * The email address of the attendee.
 * <P>Type: STRING</P>
 */
]","\android\provider\Calendar.java"
"DEFAULT_SORT_ORDER","true","false","false","true","true","String","""begin ASC,title ASC""","[]","Optional[/**
 * The default sort order for this table
 */
]","\android\provider\Calendar.java"
"MIN_INSTANCE","true","false","false","true","true","String","""minInstance""","[]","Optional[/**
 * The minimum time used in expanding the Instances table,
 * in UTC milliseconds.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Calendar.java"
"TRANSPARENCY_OPAQUE","true","false","false","true","true","int","0","[]","Optional.empty","\android\provider\Calendar.java"
"ATTENDEE_STATUS_ACCEPTED","true","false","false","true","true","int","1","[]","Optional.empty","\android\provider\Calendar.java"
"METHOD_DEFAULT","true","false","false","true","true","int","0","[]","Optional.empty","\android\provider\Calendar.java"
"AUTHORITY","true","false","false","true","true","String","""com.android.calendar""","[]","Optional.empty","\android\provider\Calendar.java"
"SELECTED","true","false","false","true","true","String","""selected""","[]","Optional[/**
 * Is the calendar selected to be displayed?
 * <P>Type: INTEGER (boolean)</P>
 */
]","\android\provider\Calendar.java"
"PROJECTION","true","false","false","true","true","String","{ STARTDAY, ENDDAY }","[]","Optional.empty","\android\provider\Calendar.java"
"FIRED","true","false","false","true","true","int","1","[]","Optional.empty","\android\provider\Calendar.java"
"EVENT_REMINDER_ACTION","true","false","false","true","true","String","""android.intent.action.EVENT_REMINDER""","[]","Optional[/**
 * Broadcast Action: An event reminder.
 */
]","\android\provider\Calendar.java"
"mResolver","false","false","true","false","true","ContentResolver","null","[]","Optional.empty","\android\provider\Calendar.java"
"ATTENDEE_STATUS_NONE","true","false","false","true","true","int","0","[]","Optional.empty","\android\provider\Calendar.java"
"COLUMN_MINUTES","false","false","true","true","true","int","0","[]","Optional.empty","\android\provider\Calendar.java"
"COLUMN_ATTENDEE_STATUS","false","false","true","true","true","int","4","[]","Optional.empty","\android\provider\Calendar.java"
"MINUTES_DEFAULT","true","false","false","true","true","int","-1","[]","Optional.empty","\android\provider\Calendar.java"
"ALL_DAY","true","false","false","true","true","String","""allDay""","[]","Optional[/**
 * Whether the event lasts all day or not
 * <P>Type: INTEGER (boolean)</P>
 */
]","\android\provider\Calendar.java"
"METHOD_SMS","true","false","false","true","true","int","3","[]","Optional.empty","\android\provider\Calendar.java"
"COLUMN_ATTENDEE_RELATIONSHIP","false","false","true","true","true","int","2","[]","Optional.empty","\android\provider\Calendar.java"
"COLUMN_VALUE","false","false","true","true","true","int","2","[]","Optional.empty","\android\provider\Calendar.java"
"TIMEZONE_TYPE_AUTO","true","false","false","true","true","String","""auto""","[]","Optional[/**
 * The value to write to {@link #TIMEZONE_KEY_TYPE} if the provider
 * should stay in sync with the device's time zone.
 */
]","\android\provider\Calendar.java"
"RECEIVED_TIME","true","false","false","true","true","String","""receivedTime""","[]","Optional[/**
 * The time that the alarm broadcast was received by the Calendar app,
 * in UTC. (Useful for debugging missed reminders.)
 * <P>Type: INTEGER (long; millis since epoch)</P>
 */
]","\android\provider\Calendar.java"
"COLUMN_ATTENDEE_EMAIL","false","false","true","true","true","int","1","[]","Optional.empty","\android\provider\Calendar.java"
"BEGIN","true","false","false","true","true","String","""begin""","[]","Optional[/**
 * The start time of the event, in UTC
 * <P>Type: INTEGER (long; millis since epoch)</P>
 */
]","\android\provider\Calendar.java"
"EDITOR_ACCESS","true","false","false","true","true","int","600","[]","Optional.empty","\android\provider\Calendar.java"
"URI","true","false","false","true","true","Uri","Uri.parse(""content://"" + AUTHORITY + ""/properties"")","[]","Optional[/**
 * The URI to use for retrieving the properties from the Calendar db.
 */
]","\android\provider\Calendar.java"
"URL","true","false","false","true","true","String","""url""","[]","Optional[/**
 * The URL to the calendar
 * <P>Type: TEXT (URL)</P>
 */
]","\android\provider\Calendar.java"
"CONTENT_URI","true","false","false","true","true","Uri","Uri.withAppendedPath(Calendar.CONTENT_URI, CONTENT_DIRECTORY)","[]","Optional[/**
 * The content:// style URI for this table
 */
]","\android\provider\Calendar.java"
"WHERE_RESCHEDULE_MISSED_ALARMS","false","false","true","true","true","String","STATE + ""="" + SCHEDULED + "" AND "" + ALARM_TIME + ""<?"" + "" AND "" + ALARM_TIME + "">?"" + "" AND "" + END + "">=?""","[]","Optional.empty","\android\provider\Calendar.java"
"STATUS_TENTATIVE","true","false","false","true","true","int","0","[]","Optional.empty","\android\provider\Calendar.java"
"mProvider","false","false","true","false","true","ContentProviderClient","null","[]","Optional.empty","\android\provider\Calendar.java"
"CONTENT_DIRECTORY","true","false","false","true","true","String","SyncStateContract.Constants.CONTENT_DIRECTORY","[]","Optional.empty","\android\provider\Calendar.java"
"END_MINUTE","true","false","false","true","true","String","""endMinute""","[]","Optional[/**
 * The end minute of the instance measured from midnight in the
 * local timezone.
 * <P>Type: INTEGER (int)</P>
 */
]","\android\provider\Calendar.java"
"ORIGINAL_ALL_DAY","true","false","false","true","true","String","""originalAllDay""","[]","Optional[/**
 * The allDay status (true or false) of the original recurring event
 * for which this event is an exception.
 * <P>Type: INTEGER (boolean)</P>
 */
]","\android\provider\Calendar.java"
"EVENT_BEGIN_TIME","true","false","false","true","true","String","""beginTime""","[]","Optional[/**
 * These are the symbolic names for the keys used in the extra data
 * passed in the intent for event reminders.
 */
]","\android\provider\Calendar.java"
"ATTENDEE_STATUS_INVITED","true","false","false","true","true","int","3","[]","Optional.empty","\android\provider\Calendar.java"
"TAG","true","false","false","true","true","String","""Calendar""","[]","Optional.empty","\android\provider\Calendar.java"
"VISIBILITY_PRIVATE","true","false","false","true","true","int","2","[]","Optional.empty","\android\provider\Calendar.java"
"ORGANIZER","true","false","false","true","true","String","""organizer""","[]","Optional[/**
 * Email of the organizer (owner) of the event.
 * <P>Type: STRING</P>
 */
]","\android\provider\Calendar.java"
"_SYNC_ID","true","false","false","true","true","String","""_sync_id""","[]","Optional[/**
 * The unique ID for a row assigned by the sync source. NULL if the row has never been synced.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Calendar.java"
"METHOD_EMAIL","true","false","false","true","true","int","2","[]","Optional.empty","\android\provider\Calendar.java"
"LOCAL_TIMEZONE","true","false","false","true","true","String","""localTimezone""","[]","Optional[/**
 * The local timezone that was used for precomputing the fields
 * in the Instances table.
 */
]","\android\provider\Calendar.java"
"RESPOND_ACCESS","true","false","false","true","true","int","300","[]","Optional.empty","\android\provider\Calendar.java"
"COLUMN_NAME","false","false","true","true","true","int","1","[]","Optional.empty","\android\provider\Calendar.java"
"TRANSPARENCY_TRANSPARENT","true","false","false","true","true","int","1","[]","Optional.empty","\android\provider\Calendar.java"
"VALUE","true","false","false","true","true","String","""value""","[]","Optional[/**
 * The value of the extended property.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Calendar.java"
"ACCOUNT_NAME","true","false","false","true","true","String","""account_name""","[]","Optional[/**
 * The name of the account instance to which this row belongs, which when paired with
 * {@link #ACCOUNT_TYPE} identifies a specific account.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Calendar.java"
"STATUS","true","false","false","true","true","String","""eventStatus""","[]","Optional[/**
 * The event status
 * <P>Type: INTEGER (int)</P>
 */
]","\android\provider\Calendar.java"
"ATTENDEE_STATUS","true","false","false","true","true","String","""attendeeStatus""","[]","Optional[/**
 * The attendance status of the attendee.
 * <P>Type: Integer (one of {@link #ATTENDEE_STATUS_ACCEPTED}, ...}.
 */
]","\android\provider\Calendar.java"
"COLUMN_ATTENDEE_TYPE","false","false","true","true","true","int","3","[]","Optional.empty","\android\provider\Calendar.java"
"EVENT_TIMEZONE","true","false","false","true","true","String","""eventTimezone""","[]","Optional[/**
 * The timezone for the event.
 * <P>Type: TEXT
 */
]","\android\provider\Calendar.java"
"ATTENDEE_TYPE","true","false","false","true","true","String","""attendeeType""","[]","Optional[/**
 * The type of attendee.
 * <P>Type: Integer (one of {@link #TYPE_REQUIRED}, {@link #TYPE_OPTIONAL})
 */
]","\android\provider\Calendar.java"
"RDATE","true","false","false","true","true","String","""rdate""","[]","Optional[/**
 * The recurrence dates for the event.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Calendar.java"
"START_MINUTE","true","false","false","true","true","String","""startMinute""","[]","Optional[/**
 * The start minute of the instance measured from midnight in the
 * local timezone.
 * <P>Type: INTEGER (int)</P>
 */
]","\android\provider\Calendar.java"
"_SYNC_VERSION","true","false","false","true","true","String","""_sync_version""","[]","Optional[/**
 * The version of the row, as assigned by the server.
 * <P>Type: TEXT</P>
 */
]","\android\provider\Calendar.java"
"WHERE_FINDNEXTALARMTIME","false","false","true","true","true","String","ALARM_TIME + "">=?""","[]","Optional.empty","\android\provider\Calendar.java"
"VISIBILITY","true","false","false","true","true","String","""visibility""","[]","Optional[/**
 * Visibility for the event.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Calendar.java"
"ALARM_TIME","true","false","false","true","true","String","""alarmTime""","[]","Optional[/**
 * The alarm time of the event, in UTC
 * <P>Type: INTEGER (long; millis since epoch)</P>
 */
]","\android\provider\Calendar.java"
"COLUMN_METHOD","false","false","true","true","true","int","1","[]","Optional.empty","\android\provider\Calendar.java"
"ATTENDEE_STATUS_TENTATIVE","true","false","false","true","true","int","4","[]","Optional.empty","\android\provider\Calendar.java"
"METHOD","true","false","false","true","true","String","""method""","[]","Optional[/**
 * The alarm method, as set on the server.  DEFAULT, ALERT, EMAIL, and
 * SMS are possible values; the device will only process DEFAULT and
 * ALERT reminders (the other types are simply stored so we can send the
 * same reminder info back to the server when we make changes).
 */
]","\android\provider\Calendar.java"
"SYNC_EVENTS","true","false","false","true","true","String","""sync_events""","[]","Optional[/**
 * If this calendar is in the list of calendars that are selected for
 * syncing then ""sync_events"" is 1, otherwise 0.
 * <p>Type: INTEGER (boolean)</p>
 */
]","\android\provider\Calendar.java"
"_SYNC_DATA","true","false","false","true","true","String","""_sync_local_id""","[]","Optional[/**
 * For use by sync adapter at its discretion; not modified by CalendarProvider
 * Note that this column was formerly named _SYNC_LOCAL_ID.  We are using it to avoid a
 * schema change.
 * TODO Replace this with something more general in the future.
 * <P>Type: INTEGER (long)</P>
 */
]","\android\provider\Calendar.java"
"GUESTS_CAN_MODIFY","true","false","false","true","true","String","""guestsCanModify""","[]","Optional[/**
 * Whether guests can modify the event.
 * <P>Type: INTEGER (boolean)</P>
 */
]","\android\provider\Calendar.java"
"CONTRIBUTOR_ACCESS","true","false","false","true","true","int","500","[]","Optional[/**
 * Full access to modify the calendar, but not the access control settings
 */
]","\android\provider\Calendar.java"
"HAS_ALARM","true","false","false","true","true","String","""hasAlarm""","[]","Optional[/**
 * Whether the event has an alarm or not
 * <P>Type: INTEGER (boolean)</P>
 */
]","\android\provider\Calendar.java"
"DTEND","true","false","false","true","true","String","""dtend""","[]","Optional[/**
 * The time the event ends
 * <P>Type: INTEGER (long; millis since epoch)</P>
 */
]","\android\provider\Calendar.java"
"TYPE_NONE","true","false","false","true","true","int","0","[]","Optional.empty","\android\provider\Calendar.java"
"CALENDAR_ID","true","false","false","true","true","String","""calendar_id""","[]","Optional[/**
 * The calendar the event belongs to
 * <P>Type: INTEGER (foreign key to the Calendars table)</P>
 */
]","\android\provider\Calendar.java"
"MAX_INSTANCE","true","false","false","true","true","String","""maxInstance""","[]","Optional[/**
 * The maximum time used in expanding the Instances table,
 * in UTC milliseconds.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Calendar.java"
"SORT_ORDER_ALARMTIME_ASC","false","false","true","true","true","String","ALARM_TIME + "" ASC""","[]","Optional.empty","\android\provider\Calendar.java"
"TRANSPARENCY","true","false","false","true","true","String","""transparency""","[]","Optional[/**
 * Transparency for the event -- does the event consume time on the calendar?
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Calendar.java"
"RELATIONSHIP_ORGANIZER","true","false","false","true","true","int","2","[]","Optional.empty","\android\provider\Calendar.java"
"TIMEZONE_KEY_TYPE","true","false","false","true","true","String","""timezoneType""","[]","Optional[/**
 * They key for updating the use of auto/home time zones in Calendar.
 * Valid values are {@link #TIMEZONE_TYPE_AUTO} or
 * {@link #TIMEZONE_TYPE_HOME}.
 */
]","\android\provider\Calendar.java"
"EVENT_END_TIME","true","false","false","true","true","String","""endTime""","[]","Optional.empty","\android\provider\Calendar.java"
"SELF_ATTENDEE_STATUS","true","false","false","true","true","String","""selfAttendeeStatus""","[]","Optional[/**
 * This is a copy of the attendee status for the owner of this event.
 * This field is copied here so that we can efficiently filter out
 * events that are declined without having to look in the Attendees
 * table.
 *
 * <P>Type: INTEGER (int)</P>
 */
]","\android\provider\Calendar.java"
"DEBUG","false","false","true","true","true","boolean","true","[]","Optional.empty","\android\provider\Calendar.java"
"WHERE_DELETE_FOR_ACCOUNT","false","false","true","true","true","String","Calendars._SYNC_ACCOUNT + ""=?"" + "" AND "" + Calendars._SYNC_ACCOUNT_TYPE + ""=?""","[]","Optional.empty","\android\provider\Calendar.java"
"MAX_EVENTDAYS","true","false","false","true","true","String","""maxEventDays""","[]","Optional[/**
 * The maximum Julian day in the EventDays table.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Calendar.java"
"MIN_EVENTDAYS","true","false","false","true","true","String","""minEventDays""","[]","Optional[/**
 * The minimum Julian day in the EventDays table.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\Calendar.java"
"_SYNC_DIRTY","true","false","false","true","true","String","""_sync_dirty""","[]","Optional[/**
 * Used to indicate that local, unsynced, changes are present.
 * <P>Type: INTEGER (long)</P>
 */
]","\android\provider\Calendar.java"
"mServedConnecting","false","false","false","false","false","boolean","null","[]","Optional[/**
 * This is set when we are in the process of connecting, to determine
 * when we have actually finished.
 */
]","\android\view\inputmethod\InputMethodManager.java"
"mCursorSelStart","false","false","false","false","false","int","null","[]","Optional.empty","\android\view\inputmethod\InputMethodManager.java"
"RESULT_SHOWN","true","false","false","true","true","int","2","[]","Optional[/**
 * Flag for the {@link ResultReceiver} result code from
 * {@link #showSoftInput(View, int, ResultReceiver)} and
 * {@link #hideSoftInputFromWindow(IBinder, int, ResultReceiver)}: the
 * state of the soft input window changed from hidden to shown.
 */
]","\android\view\inputmethod\InputMethodManager.java"
"RESULT_HIDDEN","true","false","false","true","true","int","3","[]","Optional[/**
 * Flag for the {@link ResultReceiver} result code from
 * {@link #showSoftInput(View, int, ResultReceiver)} and
 * {@link #hideSoftInputFromWindow(IBinder, int, ResultReceiver)}: the
 * state of the soft input window changed from shown to hidden.
 */
]","\android\view\inputmethod\InputMethodManager.java"
"mMainLooper","false","false","false","false","true","Looper","null","[]","Optional.empty","\android\view\inputmethod\InputMethodManager.java"
"mCurRootView","false","false","false","false","false","View","null","[]","Optional[/**
 * This is the root view of the overall window that currently has input
 * method focus.
 */
]","\android\view\inputmethod\InputMethodManager.java"
"mHasBeenInactive","false","false","false","false","false","boolean","true","[]","Optional[/**
 * Set whenever this client becomes inactive, to know we need to reset
 * state with the IME then next time we receive focus.
 */
]","\android\view\inputmethod\InputMethodManager.java"
"mCursorCandStart","false","false","false","false","false","int","null","[]","Optional.empty","\android\view\inputmethod\InputMethodManager.java"
"mInstance","false","false","false","true","false","InputMethodManager","null","[]","Optional.empty","\android\view\inputmethod\InputMethodManager.java"
"mIInputContext","false","false","false","false","true","IInputContext","null","[]","Optional[// Our generic input connection if the current target does not have its own.
]","\android\view\inputmethod\InputMethodManager.java"
"mInstanceSync","false","false","false","true","true","Object","new Object()","[]","Optional.empty","\android\view\inputmethod\InputMethodManager.java"
"mTmpCursorRect","false","false","false","false","false","Rect","new Rect()","[]","Optional[// Cursor position on the screen.
]","\android\view\inputmethod\InputMethodManager.java"
"SHOW_IMPLICIT","true","false","false","true","true","int","0x0001","[]","Optional[/**
 * Flag for {@link #showSoftInput} to indicate that this is an implicit
 * request to show the input window, not as the result of a direct request
 * by the user.  The window may not be shown in this case.
 */
]","\android\view\inputmethod\InputMethodManager.java"
"MSG_UNBIND","false","false","false","true","true","int","3","[]","Optional.empty","\android\view\inputmethod\InputMethodManager.java"
"mNextServedNeedsStart","false","false","false","false","false","boolean","null","[]","Optional[/**
 * True if we should restart input in the next served view, even if the
 * view hasn't actually changed from the current serve view.
 */
]","\android\view\inputmethod\InputMethodManager.java"
"mCurrentTextBoxAttribute","false","false","false","false","false","EditorInfo","null","[]","Optional[/**
 * This is non-null when we have connected the served view; it holds
 * the attributes that were last retrieved from the served view and given
 * to the input connection.
 */
]","\android\view\inputmethod\InputMethodManager.java"
"SHOW_FORCED","true","false","false","true","true","int","0x0002","[]","Optional[/**
 * Flag for {@link #showSoftInput} to indicate that the user has forced
 * the input method open (such as by long-pressing menu) so it should
 * not be closed until they explicitly do so.
 */
]","\android\view\inputmethod\InputMethodManager.java"
"HIDE_NOT_ALWAYS","true","false","false","true","true","int","0x0002","[]","Optional[/**
 * Flag for {@link #hideSoftInputFromWindow} to indicate that the soft
 * input window should normally be hidden, unless it was originally
 * shown with {@link #SHOW_FORCED}.
 */
]","\android\view\inputmethod\InputMethodManager.java"
"mCursorCandEnd","false","false","false","false","false","int","null","[]","Optional.empty","\android\view\inputmethod\InputMethodManager.java"
"mFullscreenMode","false","false","false","false","false","boolean","null","[]","Optional[/**
 * As reported by IME through InputConnection.
 */
]","\android\view\inputmethod\InputMethodManager.java"
"RESULT_UNCHANGED_HIDDEN","true","false","false","true","true","int","1","[]","Optional[/**
 * Flag for the {@link ResultReceiver} result code from
 * {@link #showSoftInput(View, int, ResultReceiver)} and
 * {@link #hideSoftInputFromWindow(IBinder, int, ResultReceiver)}: the
 * state of the soft input window was unchanged and remains hidden.
 */
]","\android\view\inputmethod\InputMethodManager.java"
"mClient","false","false","false","false","true","IInputMethodClient.Stub","new IInputMethodClient.Stub() {

    @Override
    protected void dump(FileDescriptor fd, PrintWriter fout, String[] args) {
        // No need to check for dump permission, since we only give this
        // interface to the system.
        CountDownLatch latch = new CountDownLatch(1);
        HandlerCaller.SomeArgs sargs = new HandlerCaller.SomeArgs();
        sargs.arg1 = fd;
        sargs.arg2 = fout;
        sargs.arg3 = args;
        sargs.arg4 = latch;
        mH.sendMessage(mH.obtainMessage(MSG_DUMP, sargs));
        try {
            if (!latch.await(5, TimeUnit.SECONDS)) {
                fout.println(""Timeout waiting for dump"");
            }
        } catch (InterruptedException e) {
            fout.println(""Interrupted waiting for dump"");
        }
    }

    public void setUsingInputMethod(boolean state) {
    }

    public void onBindMethod(InputBindResult res) {
        mH.sendMessage(mH.obtainMessage(MSG_BIND, res));
    }

    public void onUnbindMethod(int sequence) {
        mH.sendMessage(mH.obtainMessage(MSG_UNBIND, sequence, 0));
    }

    public void setActive(boolean active) {
        mH.sendMessage(mH.obtainMessage(MSG_SET_ACTIVE, active ? 1 : 0, 0));
    }
}","[]","Optional.empty","\android\view\inputmethod\InputMethodManager.java"
"mCurId","false","false","false","false","false","String","null","[]","Optional[/**
 * ID of the method we are bound to.
 */
]","\android\view\inputmethod\InputMethodManager.java"
"MSG_SET_ACTIVE","false","false","false","true","true","int","4","[]","Optional.empty","\android\view\inputmethod\InputMethodManager.java"
"mServedInputConnection","false","false","false","false","false","InputConnection","null","[]","Optional[/**
 * The InputConnection that was last retrieved from the served view.
 */
]","\android\view\inputmethod\InputMethodManager.java"
"HIDE_IMPLICIT_ONLY","true","false","false","true","true","int","0x0001","[]","Optional[/**
 * Flag for {@link #hideSoftInputFromWindow} to indicate that the soft
 * input window should only be hidden if it was not explicitly shown
 * by the user.
 */
]","\android\view\inputmethod\InputMethodManager.java"
"mActive","false","false","false","false","false","boolean","false","[]","Optional[/**
 * True if this input method client is active, initially false.
 */
]","\android\view\inputmethod\InputMethodManager.java"
"mNextServedView","false","false","false","false","false","View","null","[]","Optional[/**
 * This is then next view that will be served by the input method, when
 * we get around to updating things.
 */
]","\android\view\inputmethod\InputMethodManager.java"
"mServedView","false","false","false","false","false","View","null","[]","Optional[/**
 * This is the view that should currently be served by an input method,
 * regardless of the state of setting that up.
 */
]","\android\view\inputmethod\InputMethodManager.java"
"mCompletions","false","false","false","false","false","CompletionInfo","null","[]","Optional[/**
 * The completions that were last provided by the served view.
 */
]","\android\view\inputmethod\InputMethodManager.java"
"RESULT_UNCHANGED_SHOWN","true","false","false","true","true","int","0","[]","Optional[/**
 * Flag for the {@link ResultReceiver} result code from
 * {@link #showSoftInput(View, int, ResultReceiver)} and
 * {@link #hideSoftInputFromWindow(IBinder, int, ResultReceiver)}: the
 * state of the soft input window was unchanged and remains shown.
 */
]","\android\view\inputmethod\InputMethodManager.java"
"mDummyInputConnection","false","false","false","false","true","InputConnection","new BaseInputConnection(this, false)","[]","Optional.empty","\android\view\inputmethod\InputMethodManager.java"
"TAG","false","false","false","true","true","String","""InputMethodManager""","[]","Optional.empty","\android\view\inputmethod\InputMethodManager.java"
"mH","false","false","false","false","true","H","null","[]","Optional[// global lock.
]","\android\view\inputmethod\InputMethodManager.java"
"mCurMethod","false","false","false","false","false","IInputMethodSession","null","[]","Optional[/**
 * The actual instance of the method to make calls on it.
 */
]","\android\view\inputmethod\InputMethodManager.java"
"MSG_BIND","false","false","false","true","true","int","2","[]","Optional.empty","\android\view\inputmethod\InputMethodManager.java"
"mCursorRect","false","false","false","false","false","Rect","new Rect()","[]","Optional.empty","\android\view\inputmethod\InputMethodManager.java"
"mBindSequence","false","false","false","false","false","int","-1","[]","Optional[/**
 * Sequence number of this binding, as returned by the server.
 */
]","\android\view\inputmethod\InputMethodManager.java"
"mService","false","false","false","false","true","IInputMethodManager","null","[]","Optional.empty","\android\view\inputmethod\InputMethodManager.java"
"mCursorSelEnd","false","false","false","false","false","int","null","[]","Optional.empty","\android\view\inputmethod\InputMethodManager.java"
"DEBUG","false","false","false","true","true","boolean","false","[]","Optional.empty","\android\view\inputmethod\InputMethodManager.java"
"MSG_DUMP","false","false","false","true","true","int","1","[]","Optional.empty","\android\view\inputmethod\InputMethodManager.java"
"mNativeMd5Context","false","false","true","false","false","int","null","[]","Optional[// ptr to native context
]","\android\security\Md5MessageDigest.java"
"mProportion","false","false","true","false","true","float","null","[]","Optional.empty","\android\text\style\ScaleXSpan.java"
"serialVersionUID","false","false","true","true","true","long","-7323249827281485390L","[]","Optional.empty","\com\google\android\mms\MmsException.java"
"FIRST_UNIHAN","false","false","true","true","true","char","'\u3400'","[]","Optional[/**
 * The first Chinese character in Unicode block
 */
]","\com\android\internal\util\HanziToPinyin.java"
"FIRST_PINYIN_UNIHAN","false","false","true","true","true","String","""\u5416""","[]","Optional[/**
 * First and last Chinese character with known Pinyin according to zh collation
 */
]","\com\android\internal\util\HanziToPinyin.java"
"source","true","false","false","false","false","String","null","[]","Optional[/**
 * Original string before translation.
 */
]","\com\android\internal\util\HanziToPinyin.java"
"LATIN","true","false","false","true","true","int","1","[]","Optional.empty","\com\android\internal\util\HanziToPinyin.java"
"COLLATOR","false","false","true","true","true","Collator","Collator.getInstance(Locale.CHINA)","[]","Optional.empty","\com\android\internal\util\HanziToPinyin.java"
"mHasChinaCollator","false","false","true","false","true","boolean","null","[]","Optional.empty","\com\android\internal\util\HanziToPinyin.java"
"target","true","false","false","false","false","String","null","[]","Optional[/**
 * Translated string of source. For Han, target is corresponding Pinyin.
 * Otherwise target is original string in source.
 */
]","\com\android\internal\util\HanziToPinyin.java"
"UNIHANS","false","false","true","true","true","char","{ '\u5416', '\u54ce', '\u5b89', '\u80ae', '\u51f9', '\u516b', '\u63b0', '\u6273', '\u90a6', '\u52f9', '\u9642', '\u5954', '\u4f3b', '\u7680', '\u782d', '\u706c', '\u618b', '\u6c43', '\u51ab', '\u7676', '\u5cec', '\u5693', '\u5072', '\u53c2', '\u4ed3', '\u64a1', '\u518a', '\u5d7e', '\u564c', '\u6260', '\u62c6', '\u8fbf', '\u4f25', '\u6284', '\u8f66', '\u62bb', '\u9637', '\u5403', '\u5145', '\u62bd', '\u51fa', '\u640b', '\u5ddb', '\u5205', '\u5439', '\u65fe', '\u8e14', '\u5472', '\u4ece', '\u51d1', '\u7c97', '\u6c46', '\u5d14', '\u90a8', '\u6413', '\u5491', '\u5446', '\u4e39', '\u5f53', '\u5200', '\u6074', '\u6265', '\u706f', '\u4efe', '\u55f2', '\u6541', '\u5201', '\u7239', '\u4e01', '\u4e1f', '\u4e1c', '\u543a', '\u5262', '\u8011', '\u5796', '\u5428', '\u591a', '\u59b8', '\u5940', '\u97a5', '\u800c', '\u53d1', '\u5e06', '\u531a', '\u98de', '\u5206', '\u4e30', '\u8985', '\u4ecf', '\u57ba', '\u7d11', '\u592b', '\u7324', '\u65ee', '\u4f85', '\u5e72', '\u5188', '\u768b', '\u6208', '\u7ed9', '\u6839', '\u63ef', '\u55bc', '\u55f0', '\u5de5', '\u52fe', '\u4f30', '\u9e39', '\u4e56', '\u5173', '\u5149', '\u5f52', '\u4e28', '\u8b34', '\u5459', '\u598e', '\u548d', '\u4f44', '\u592f', '\u8320', '\u8bc3', '\u9ed2', '\u62eb', '\u4ea8', '\u53ff', '\u9f41', '\u4e4e', '\u82b1', '\u6000', '\u6b22', '\u5ddf', '\u7070', '\u660f', '\u5419', '\u4e0c', '\u52a0', '\u620b', '\u6c5f', '\u827d', '\u9636', '\u5dfe', '\u5755', '\u5182', '\u4e29', '\u51e5', '\u59e2', '\u5658', '\u519b', '\u5494', '\u5f00', '\u938e', '\u5ffc', '\u5c3b', '\u533c', '\u808e', '\u52a5', '\u7a7a', '\u62a0', '\u625d', '\u5938', '\u84af', '\u5bbd', '\u5321', '\u4e8f', '\u5764', '\u6269', '\u62c9', '\u4f86', '\u5170', '\u5577', '\u635e', '\u4ec2', '\u96f7', '\u8137', '\u68f1', '\u695e', '\u550e', '\u4fe9', '\u5afe', '\u826f', '\u8e7d', '\u57d3', '\u53b8', '\u62ce', '\u6e9c', '\u9f99', '\u5a04', '\u565c', '\u5b6a', '\u62a1', '\u9831', '\u5988', '\u57cb', '\u989f', '\u7264', '\u732b', '\u5445', '\u95e8', '\u6c13', '\u54aa', '\u5b80', '\u55b5', '\u4e5c', '\u6c11', '\u540d', '\u8c2c', '\u6478', '\u725f', '\u6bcd', '\u62cf', '\u8149', '\u56e1', '\u56d4', '\u5b6c', '\u8bb7', '\u5a1e', '\u5ae9', '\u80fd', '\u92b0', '\u62c8', '\u5a18', '\u9e1f', '\u634f', '\u56dc', '\u5b81', '\u599e', '\u519c', '\u7fba', '\u5974', '\u597b', '\u9ec1', '\u90cd', '\u5662', '\u8bb4', '\u5991', '\u62cd', '\u7705', '\u6c78', '\u629b', '\u5478', '\u55b7', '\u5309', '\u4e76', '\u7247', '\u527d', '\u6c15', '\u59d8', '\u4e52', '\u948b', '\u5256', '\u4ec6', '\u4e03', '\u6390', '\u5343', '\u545b', '\u6084', '\u5207', '\u4eb2', '\u9751', '\u5b86', '\u74d7', '\u533a', '\u5cd1', '\u7094', '\u590b', '\u5465', '\u7a63', '\u835b', '\u60f9', '\u4eba', '\u6254', '\u65e5', '\u620e', '\u53b9', '\u909a', '\u5827', '\u6875', '\u95f0', '\u633c', '\u4ee8', '\u6be2', '\u4e09', '\u6852', '\u63bb', '\u8272', '\u68ee', '\u50e7', '\u6740', '\u7b5b', '\u5c71', '\u4f24', '\u5f30', '\u5962', '\u7533', '\u5347', '\u5c38', '\u53ce', '\u4e66', '\u5237', '\u8870', '\u95e9', '\u53cc', '\u8c01', '\u542e', '\u8bf4', '\u53b6', '\u5fea', '\u51c1', '\u82cf', '\u72fb', '\u590a', '\u5b59', '\u5506', '\u4ed6', '\u5b61', '\u574d', '\u6c64', '\u5932', '\u5fd1', '\u81af', '\u5254', '\u5929', '\u65eb', '\u6017', '\u5385', '\u70b5', '\u5077', '\u51f8', '\u6e4d', '\u63a8', '\u541e', '\u8bac', '\u52b8', '\u6b6a', '\u5f2f', '\u5c23', '\u5371', '\u6637', '\u7fc1', '\u631d', '\u4e4c', '\u5915', '\u5477', '\u4ed9', '\u4e61', '\u7071', '\u4e9b', '\u5fc3', '\u5174', '\u51f6', '\u4f11', '\u620c', '\u5405', '\u75b6', '\u7025', '\u4e2b', '\u54bd', '\u592e', '\u5e7a', '\u503b', '\u4e00', '\u4e5a', '\u5e94', '\u5537', '\u4f63', '\u4f18', '\u7ea1', '\u56e6', '\u66f0', '\u8480', '\u5e00', '\u707d', '\u5142', '\u7242', '\u50ae', '\u556b', '\u9c61', '\u600e', '\u66fd', '\u5412', '\u635a', '\u6cbe', '\u5f20', '\u4f4b', '\u8707', '\u8d1e', '\u9eee', '\u4e4b', '\u4e2d', '\u5dde', '\u6731', '\u6293', '\u62fd', '\u4e13', '\u5986', '\u96b9', '\u5b92', '\u5353', '\u4ed4', '\u5b97', '\u90b9', '\u79df', '\u5297', '\u55fa', '\u5c0a', '\u6628' }","[]","Optional.empty","\com\android\internal\util\HanziToPinyin.java"
"PINYIN","true","false","false","true","true","int","2","[]","Optional.empty","\com\android\internal\util\HanziToPinyin.java"
"type","true","false","false","false","false","int","null","[]","Optional[/**
 * Type of this token, ASCII, PINYIN or UNKNOWN.
 */
]","\com\android\internal\util\HanziToPinyin.java"
"PINYINS","false","false","true","true","true","byte","{ { 65, 00, 00, 00, 00, 00 }, { 65, 73, 00, 00, 00, 00 }, { 65, 78, 00, 00, 00, 00 }, { 65, 78, 71, 00, 00, 00 }, { 65, 79, 00, 00, 00, 00 }, { 66, 65, 00, 00, 00, 00 }, { 66, 65, 73, 00, 00, 00 }, { 66, 65, 78, 00, 00, 00 }, { 66, 65, 78, 71, 00, 00 }, { 66, 65, 79, 00, 00, 00 }, { 66, 69, 73, 00, 00, 00 }, { 66, 69, 78, 00, 00, 00 }, { 66, 69, 78, 71, 00, 00 }, { 66, 73, 00, 00, 00, 00 }, { 66, 73, 65, 78, 00, 00 }, { 66, 73, 65, 79, 00, 00 }, { 66, 73, 69, 00, 00, 00 }, { 66, 73, 78, 00, 00, 00 }, { 66, 73, 78, 71, 00, 00 }, { 66, 79, 00, 00, 00, 00 }, { 66, 85, 00, 00, 00, 00 }, { 67, 65, 00, 00, 00, 00 }, { 67, 65, 73, 00, 00, 00 }, { 67, 65, 78, 00, 00, 00 }, { 67, 65, 78, 71, 00, 00 }, { 67, 65, 79, 00, 00, 00 }, { 67, 69, 00, 00, 00, 00 }, { 67, 69, 78, 00, 00, 00 }, { 67, 69, 78, 71, 00, 00 }, { 67, 72, 65, 00, 00, 00 }, { 67, 72, 65, 73, 00, 00 }, { 67, 72, 65, 78, 00, 00 }, { 67, 72, 65, 78, 71, 00 }, { 67, 72, 65, 79, 00, 00 }, { 67, 72, 69, 00, 00, 00 }, { 67, 72, 69, 78, 00, 00 }, { 67, 72, 69, 78, 71, 00 }, { 67, 72, 73, 00, 00, 00 }, { 67, 72, 79, 78, 71, 00 }, { 67, 72, 79, 85, 00, 00 }, { 67, 72, 85, 00, 00, 00 }, { 67, 72, 85, 65, 73, 00 }, { 67, 72, 85, 65, 78, 00 }, { 67, 72, 85, 65, 78, 71 }, { 67, 72, 85, 73, 00, 00 }, { 67, 72, 85, 78, 00, 00 }, { 67, 72, 85, 79, 00, 00 }, { 67, 73, 00, 00, 00, 00 }, { 67, 79, 78, 71, 00, 00 }, { 67, 79, 85, 00, 00, 00 }, { 67, 85, 00, 00, 00, 00 }, { 67, 85, 65, 78, 00, 00 }, { 67, 85, 73, 00, 00, 00 }, { 67, 85, 78, 00, 00, 00 }, { 67, 85, 79, 00, 00, 00 }, { 68, 65, 00, 00, 00, 00 }, { 68, 65, 73, 00, 00, 00 }, { 68, 65, 78, 00, 00, 00 }, { 68, 65, 78, 71, 00, 00 }, { 68, 65, 79, 00, 00, 00 }, { 68, 69, 00, 00, 00, 00 }, { 68, 69, 78, 00, 00, 00 }, { 68, 69, 78, 71, 00, 00 }, { 68, 73, 00, 00, 00, 00 }, { 68, 73, 65, 00, 00, 00 }, { 68, 73, 65, 78, 00, 00 }, { 68, 73, 65, 79, 00, 00 }, { 68, 73, 69, 00, 00, 00 }, { 68, 73, 78, 71, 00, 00 }, { 68, 73, 85, 00, 00, 00 }, { 68, 79, 78, 71, 00, 00 }, { 68, 79, 85, 00, 00, 00 }, { 68, 85, 00, 00, 00, 00 }, { 68, 85, 65, 78, 00, 00 }, { 68, 85, 73, 00, 00, 00 }, { 68, 85, 78, 00, 00, 00 }, { 68, 85, 79, 00, 00, 00 }, { 69, 00, 00, 00, 00, 00 }, { 69, 78, 00, 00, 00, 00 }, { 69, 78, 71, 00, 00, 00 }, { 69, 82, 00, 00, 00, 00 }, { 70, 65, 00, 00, 00, 00 }, { 70, 65, 78, 00, 00, 00 }, { 70, 65, 78, 71, 00, 00 }, { 70, 69, 73, 00, 00, 00 }, { 70, 69, 78, 00, 00, 00 }, { 70, 69, 78, 71, 00, 00 }, { 70, 73, 65, 79, 00, 00 }, { 70, 79, 00, 00, 00, 00 }, { 70, 85, 00, 00, 00, 00 }, { 70, 79, 85, 00, 00, 00 }, { 70, 85, 00, 00, 00, 00 }, { 71, 85, 73, 00, 00, 00 }, { 71, 65, 00, 00, 00, 00 }, { 71, 65, 73, 00, 00, 00 }, { 71, 65, 78, 00, 00, 00 }, { 71, 65, 78, 71, 00, 00 }, { 71, 65, 79, 00, 00, 00 }, { 71, 69, 00, 00, 00, 00 }, { 71, 69, 73, 00, 00, 00 }, { 71, 69, 78, 00, 00, 00 }, { 71, 69, 78, 71, 00, 00 }, { 74, 73, 69, 00, 00, 00 }, { 71, 69, 00, 00, 00, 00 }, { 71, 79, 78, 71, 00, 00 }, { 71, 79, 85, 00, 00, 00 }, { 71, 85, 00, 00, 00, 00 }, { 71, 85, 65, 00, 00, 00 }, { 71, 85, 65, 73, 00, 00 }, { 71, 85, 65, 78, 00, 00 }, { 71, 85, 65, 78, 71, 00 }, { 71, 85, 73, 00, 00, 00 }, { 71, 85, 78, 00, 00, 00 }, { 71, 85, 65, 78, 00, 00 }, { 71, 85, 79, 00, 00, 00 }, { 72, 65, 00, 00, 00, 00 }, { 72, 65, 73, 00, 00, 00 }, { 72, 65, 78, 00, 00, 00 }, { 72, 65, 78, 71, 00, 00 }, { 72, 65, 79, 00, 00, 00 }, { 72, 69, 00, 00, 00, 00 }, { 72, 69, 73, 00, 00, 00 }, { 72, 69, 78, 00, 00, 00 }, { 72, 69, 78, 71, 00, 00 }, { 72, 79, 78, 71, 00, 00 }, { 72, 79, 85, 00, 00, 00 }, { 72, 85, 00, 00, 00, 00 }, { 72, 85, 65, 00, 00, 00 }, { 72, 85, 65, 73, 00, 00 }, { 72, 85, 65, 78, 00, 00 }, { 72, 85, 65, 78, 71, 00 }, { 72, 85, 73, 00, 00, 00 }, { 72, 85, 78, 00, 00, 00 }, { 72, 85, 79, 00, 00, 00 }, { 74, 73, 00, 00, 00, 00 }, { 74, 73, 65, 00, 00, 00 }, { 74, 73, 65, 78, 00, 00 }, { 74, 73, 65, 78, 71, 00 }, { 74, 73, 65, 79, 00, 00 }, { 74, 73, 69, 00, 00, 00 }, { 74, 73, 78, 00, 00, 00 }, { 74, 73, 78, 71, 00, 00 }, { 74, 73, 79, 78, 71, 00 }, { 74, 73, 85, 00, 00, 00 }, { 74, 85, 00, 00, 00, 00 }, { 74, 85, 65, 78, 00, 00 }, { 74, 85, 69, 00, 00, 00 }, { 74, 85, 78, 00, 00, 00 }, { 75, 65, 00, 00, 00, 00 }, { 75, 65, 73, 00, 00, 00 }, { 75, 65, 78, 00, 00, 00 }, { 75, 65, 78, 71, 00, 00 }, { 75, 65, 79, 00, 00, 00 }, { 75, 69, 00, 00, 00, 00 }, { 75, 69, 78, 00, 00, 00 }, { 75, 69, 78, 71, 00, 00 }, { 75, 79, 78, 71, 00, 00 }, { 75, 79, 85, 00, 00, 00 }, { 75, 85, 00, 00, 00, 00 }, { 75, 85, 65, 00, 00, 00 }, { 75, 85, 65, 73, 00, 00 }, { 75, 85, 65, 78, 00, 00 }, { 75, 85, 65, 78, 71, 00 }, { 75, 85, 73, 00, 00, 00 }, { 75, 85, 78, 00, 00, 00 }, { 75, 85, 79, 00, 00, 00 }, { 76, 65, 00, 00, 00, 00 }, { 76, 65, 73, 00, 00, 00 }, { 76, 65, 78, 00, 00, 00 }, { 76, 65, 78, 71, 00, 00 }, { 76, 65, 79, 00, 00, 00 }, { 76, 69, 00, 00, 00, 00 }, { 76, 69, 73, 00, 00, 00 }, { 76, 73, 00, 00, 00, 00 }, { 76, 73, 78, 71, 00, 00 }, { 76, 69, 78, 71, 00, 00 }, { 76, 73, 00, 00, 00, 00 }, { 76, 73, 65, 00, 00, 00 }, { 76, 73, 65, 78, 00, 00 }, { 76, 73, 65, 78, 71, 00 }, { 76, 73, 65, 79, 00, 00 }, { 76, 73, 69, 00, 00, 00 }, { 76, 73, 78, 00, 00, 00 }, { 76, 73, 78, 71, 00, 00 }, { 76, 73, 85, 00, 00, 00 }, { 76, 79, 78, 71, 00, 00 }, { 76, 79, 85, 00, 00, 00 }, { 76, 85, 00, 00, 00, 00 }, { 76, 85, 65, 78, 00, 00 }, { 76, 85, 78, 00, 00, 00 }, { 76, 85, 79, 00, 00, 00 }, { 77, 65, 00, 00, 00, 00 }, { 77, 65, 73, 00, 00, 00 }, { 77, 65, 78, 00, 00, 00 }, { 77, 65, 78, 71, 00, 00 }, { 77, 65, 79, 00, 00, 00 }, { 77, 69, 73, 00, 00, 00 }, { 77, 69, 78, 00, 00, 00 }, { 77, 69, 78, 71, 00, 00 }, { 77, 73, 00, 00, 00, 00 }, { 77, 73, 65, 78, 00, 00 }, { 77, 73, 65, 79, 00, 00 }, { 77, 73, 69, 00, 00, 00 }, { 77, 73, 78, 00, 00, 00 }, { 77, 73, 78, 71, 00, 00 }, { 77, 73, 85, 00, 00, 00 }, { 77, 79, 00, 00, 00, 00 }, { 77, 79, 85, 00, 00, 00 }, { 77, 85, 00, 00, 00, 00 }, { 78, 65, 00, 00, 00, 00 }, { 78, 65, 73, 00, 00, 00 }, { 78, 65, 78, 00, 00, 00 }, { 78, 65, 78, 71, 00, 00 }, { 78, 65, 79, 00, 00, 00 }, { 78, 69, 00, 00, 00, 00 }, { 78, 69, 73, 00, 00, 00 }, { 78, 69, 78, 00, 00, 00 }, { 78, 69, 78, 71, 00, 00 }, { 78, 73, 00, 00, 00, 00 }, { 78, 73, 65, 78, 00, 00 }, { 78, 73, 65, 78, 71, 00 }, { 78, 73, 65, 79, 00, 00 }, { 78, 73, 69, 00, 00, 00 }, { 78, 73, 78, 00, 00, 00 }, { 78, 73, 78, 71, 00, 00 }, { 78, 73, 85, 00, 00, 00 }, { 78, 79, 78, 71, 00, 00 }, { 78, 79, 85, 00, 00, 00 }, { 78, 85, 00, 00, 00, 00 }, { 78, 85, 65, 78, 00, 00 }, { 78, 85, 78, 00, 00, 00 }, { 78, 85, 79, 00, 00, 00 }, { 79, 00, 00, 00, 00, 00 }, { 79, 85, 00, 00, 00, 00 }, { 80, 65, 00, 00, 00, 00 }, { 80, 65, 73, 00, 00, 00 }, { 80, 65, 78, 00, 00, 00 }, { 80, 65, 78, 71, 00, 00 }, { 80, 65, 79, 00, 00, 00 }, { 80, 69, 73, 00, 00, 00 }, { 80, 69, 78, 00, 00, 00 }, { 80, 69, 78, 71, 00, 00 }, { 80, 73, 00, 00, 00, 00 }, { 80, 73, 65, 78, 00, 00 }, { 80, 73, 65, 79, 00, 00 }, { 80, 73, 69, 00, 00, 00 }, { 80, 73, 78, 00, 00, 00 }, { 80, 73, 78, 71, 00, 00 }, { 80, 79, 00, 00, 00, 00 }, { 80, 79, 85, 00, 00, 00 }, { 80, 85, 00, 00, 00, 00 }, { 81, 73, 00, 00, 00, 00 }, { 81, 73, 65, 00, 00, 00 }, { 81, 73, 65, 78, 00, 00 }, { 81, 73, 65, 78, 71, 00 }, { 81, 73, 65, 79, 00, 00 }, { 81, 73, 69, 00, 00, 00 }, { 81, 73, 78, 00, 00, 00 }, { 81, 73, 78, 71, 00, 00 }, { 81, 73, 79, 78, 71, 00 }, { 81, 73, 85, 00, 00, 00 }, { 81, 85, 00, 00, 00, 00 }, { 81, 85, 65, 78, 00, 00 }, { 81, 85, 69, 00, 00, 00 }, { 81, 85, 78, 00, 00, 00 }, { 82, 65, 78, 00, 00, 00 }, { 82, 65, 78, 71, 00, 00 }, { 82, 65, 79, 00, 00, 00 }, { 82, 69, 00, 00, 00, 00 }, { 82, 69, 78, 00, 00, 00 }, { 82, 69, 78, 71, 00, 00 }, { 82, 73, 00, 00, 00, 00 }, { 82, 79, 78, 71, 00, 00 }, { 82, 79, 85, 00, 00, 00 }, { 82, 85, 00, 00, 00, 00 }, { 82, 85, 65, 78, 00, 00 }, { 82, 85, 73, 00, 00, 00 }, { 82, 85, 78, 00, 00, 00 }, { 82, 85, 79, 00, 00, 00 }, { 83, 65, 00, 00, 00, 00 }, { 83, 65, 73, 00, 00, 00 }, { 83, 65, 78, 00, 00, 00 }, { 83, 65, 78, 71, 00, 00 }, { 83, 65, 79, 00, 00, 00 }, { 83, 69, 00, 00, 00, 00 }, { 83, 69, 78, 00, 00, 00 }, { 83, 69, 78, 71, 00, 00 }, { 83, 72, 65, 00, 00, 00 }, { 83, 72, 65, 73, 00, 00 }, { 83, 72, 65, 78, 00, 00 }, { 83, 72, 65, 78, 71, 00 }, { 83, 72, 65, 79, 00, 00 }, { 83, 72, 69, 00, 00, 00 }, { 83, 72, 69, 78, 00, 00 }, { 83, 72, 69, 78, 71, 00 }, { 83, 72, 73, 00, 00, 00 }, { 83, 72, 79, 85, 00, 00 }, { 83, 72, 85, 00, 00, 00 }, { 83, 72, 85, 65, 00, 00 }, { 83, 72, 85, 65, 73, 00 }, { 83, 72, 85, 65, 78, 00 }, { 83, 72, 85, 65, 78, 71 }, { 83, 72, 85, 73, 00, 00 }, { 83, 72, 85, 78, 00, 00 }, { 83, 72, 85, 79, 00, 00 }, { 83, 73, 00, 00, 00, 00 }, { 83, 79, 78, 71, 00, 00 }, { 83, 79, 85, 00, 00, 00 }, { 83, 85, 00, 00, 00, 00 }, { 83, 85, 65, 78, 00, 00 }, { 83, 85, 73, 00, 00, 00 }, { 83, 85, 78, 00, 00, 00 }, { 83, 85, 79, 00, 00, 00 }, { 84, 65, 00, 00, 00, 00 }, { 84, 65, 73, 00, 00, 00 }, { 84, 65, 78, 00, 00, 00 }, { 84, 65, 78, 71, 00, 00 }, { 84, 65, 79, 00, 00, 00 }, { 84, 69, 00, 00, 00, 00 }, { 84, 69, 78, 71, 00, 00 }, { 84, 73, 00, 00, 00, 00 }, { 84, 73, 65, 78, 00, 00 }, { 84, 73, 65, 79, 00, 00 }, { 84, 73, 69, 00, 00, 00 }, { 84, 73, 78, 71, 00, 00 }, { 84, 79, 78, 71, 00, 00 }, { 84, 79, 85, 00, 00, 00 }, { 84, 85, 00, 00, 00, 00 }, { 84, 85, 65, 78, 00, 00 }, { 84, 85, 73, 00, 00, 00 }, { 84, 85, 78, 00, 00, 00 }, { 84, 85, 79, 00, 00, 00 }, { 87, 65, 00, 00, 00, 00 }, { 87, 65, 73, 00, 00, 00 }, { 87, 65, 78, 00, 00, 00 }, { 87, 65, 78, 71, 00, 00 }, { 87, 69, 73, 00, 00, 00 }, { 87, 69, 78, 00, 00, 00 }, { 87, 69, 78, 71, 00, 00 }, { 87, 79, 00, 00, 00, 00 }, { 87, 85, 00, 00, 00, 00 }, { 88, 73, 00, 00, 00, 00 }, { 88, 73, 65, 00, 00, 00 }, { 88, 73, 65, 78, 00, 00 }, { 88, 73, 65, 78, 71, 00 }, { 88, 73, 65, 79, 00, 00 }, { 88, 73, 69, 00, 00, 00 }, { 88, 73, 78, 00, 00, 00 }, { 88, 73, 78, 71, 00, 00 }, { 88, 73, 79, 78, 71, 00 }, { 88, 73, 85, 00, 00, 00 }, { 88, 85, 00, 00, 00, 00 }, { 88, 85, 65, 78, 00, 00 }, { 88, 85, 69, 00, 00, 00 }, { 88, 85, 78, 00, 00, 00 }, { 89, 65, 00, 00, 00, 00 }, { 89, 65, 78, 00, 00, 00 }, { 89, 65, 78, 71, 00, 00 }, { 89, 65, 79, 00, 00, 00 }, { 89, 69, 00, 00, 00, 00 }, { 89, 73, 00, 00, 00, 00 }, { 89, 73, 78, 00, 00, 00 }, { 89, 73, 78, 71, 00, 00 }, { 89, 79, 00, 00, 00, 00 }, { 89, 79, 78, 71, 00, 00 }, { 89, 79, 85, 00, 00, 00 }, { 89, 85, 00, 00, 00, 00 }, { 89, 85, 65, 78, 00, 00 }, { 89, 85, 69, 00, 00, 00 }, { 89, 85, 78, 00, 00, 00 }, { 90, 65, 00, 00, 00, 00 }, { 90, 65, 73, 00, 00, 00 }, { 90, 65, 78, 00, 00, 00 }, { 90, 65, 78, 71, 00, 00 }, { 90, 65, 79, 00, 00, 00 }, { 90, 69, 00, 00, 00, 00 }, { 90, 69, 73, 00, 00, 00 }, { 90, 69, 78, 00, 00, 00 }, { 90, 69, 78, 71, 00, 00 }, { 90, 72, 65, 00, 00, 00 }, { 90, 72, 65, 73, 00, 00 }, { 90, 72, 65, 78, 00, 00 }, { 90, 72, 65, 78, 71, 00 }, { 90, 72, 65, 79, 00, 00 }, { 90, 72, 69, 00, 00, 00 }, { 90, 72, 69, 78, 00, 00 }, { 90, 72, 69, 78, 71, 00 }, { 90, 72, 73, 00, 00, 00 }, { 90, 72, 79, 78, 71, 00 }, { 90, 72, 79, 85, 00, 00 }, { 90, 72, 85, 00, 00, 00 }, { 90, 72, 85, 65, 00, 00 }, { 90, 72, 85, 65, 73, 00 }, { 90, 72, 85, 65, 78, 00 }, { 90, 72, 85, 65, 78, 71 }, { 90, 72, 85, 73, 00, 00 }, { 90, 72, 85, 78, 00, 00 }, { 90, 72, 85, 79, 00, 00 }, { 90, 73, 00, 00, 00, 00 }, { 90, 79, 78, 71, 00, 00 }, { 90, 79, 85, 00, 00, 00 }, { 90, 85, 00, 00, 00, 00 }, { 90, 85, 65, 78, 00, 00 }, { 90, 85, 73, 00, 00, 00 }, { 90, 85, 78, 00, 00, 00 }, { 90, 85, 79, 00, 00, 00 } }","[]","Optional.empty","\com\android\internal\util\HanziToPinyin.java"
"TAG","false","false","true","true","true","String","""HanziToPinyin""","[]","Optional.empty","\com\android\internal\util\HanziToPinyin.java"
"sInstance","false","false","true","true","false","HanziToPinyin","null","[]","Optional.empty","\com\android\internal\util\HanziToPinyin.java"
"SEPARATOR","true","false","false","true","true","String",""" ""","[]","Optional[/**
 * Separator between target string for each source char
 */
]","\com\android\internal\util\HanziToPinyin.java"
"LAST_PINYIN_UNIHAN","false","false","true","true","true","String","""\u5497""","[]","Optional.empty","\com\android\internal\util\HanziToPinyin.java"
"UNKNOWN","true","false","false","true","true","int","3","[]","Optional.empty","\com\android\internal\util\HanziToPinyin.java"
"mListAdapter","false","false","true","false","false","ListAdapter","null","[]","Optional.empty","\android\widget\Spinner.java"
"mPopup","false","false","true","false","false","AlertDialog","null","[]","Optional.empty","\android\widget\Spinner.java"
"mPrompt","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\widget\Spinner.java"
"mAdapter","false","false","true","false","false","SpinnerAdapter","null","[]","Optional.empty","\android\widget\Spinner.java"
"registrants","false","false","false","false","false","ArrayList","new ArrayList()","[]","Optional[// of Registrant
]","\android\os\RegistrantList.java"
"mQuitAllowed","false","false","false","false","false","boolean","true","[]","Optional.empty","\android\os\MessageQueue.java"
"mBlocked","false","false","true","false","false","boolean","null","[]","Optional[// Indicates whether next() is blocked waiting in pollOnce() with a non-zero timeout.
]","\android\os\MessageQueue.java"
"mPendingIdleHandlers","false","false","true","false","false","IdleHandler","null","[]","Optional.empty","\android\os\MessageQueue.java"
"mQuiting","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\os\MessageQueue.java"
"mPtr","false","false","true","false","false","int","null","[@SuppressWarnings(""unused"")]","Optional.empty","\android\os\MessageQueue.java"
"mMessages","false","false","false","false","false","Message","null","[]","Optional.empty","\android\os\MessageQueue.java"
"mIdleHandlers","false","false","true","false","true","ArrayList<IdleHandler>","new ArrayList<IdleHandler>()","[]","Optional.empty","\android\os\MessageQueue.java"
"SERVICE_INTERFACE","true","false","false","true","true","String","""android.view.InputMethod""","[@SdkConstant(SdkConstantType.SERVICE_ACTION)]","Optional[/**
 * This is the interface name that a service implementing an input
 * method should say that it supports -- that is, this is the action it
 * uses for its intent filter.
 * To be supported, the service must also require the
 * {@link android.Manifest.permission#BIND_INPUT_METHOD} permission so
 * that other applications can not abuse it.
 */
]","\android\view\inputmethod\InputMethod.java"
"SHOW_EXPLICIT","true","false","false","true","true","int","0x00001","[]","Optional[/**
 * Flag for {@link #showSoftInput}: this show has been explicitly
 * requested by the user.  If not set, the system has decided it may be
 * a good idea to show the input method based on a navigation operation
 * in the UI.
 */
]","\android\view\inputmethod\InputMethod.java"
"SERVICE_META_DATA","true","false","false","true","true","String","""android.view.im""","[]","Optional[/**
 * Name under which an InputMethod service component publishes information
 * about itself.  This meta-data must reference an XML resource containing
 * an
 * <code>&lt;{@link android.R.styleable#InputMethod input-method}&gt;</code>
 * tag.
 */
]","\android\view\inputmethod\InputMethod.java"
"SHOW_FORCED","true","false","false","true","true","int","0x00002","[]","Optional[/**
 * Flag for {@link #showSoftInput}: this show has been forced to
 * happen by the user.  If set, the input method should remain visible
 * until deliberated dismissed by the user in its UI.
 */
]","\android\view\inputmethod\InputMethod.java"
"ERROR","true","false","false","true","true","int","1","[]","Optional.empty","\android\bluetooth\AtCommandResult.java"
"OK_STRING","false","false","true","true","true","String","""OK""","[]","Optional.empty","\android\bluetooth\AtCommandResult.java"
"ERROR_STRING","false","false","true","true","true","String","""ERROR""","[]","Optional.empty","\android\bluetooth\AtCommandResult.java"
"mResponse","false","false","true","false","false","StringBuilder","null","[]","Optional[// Response with CRLF line breaks
]","\android\bluetooth\AtCommandResult.java"
"UNSOLICITED","true","false","false","true","true","int","2","[]","Optional.empty","\android\bluetooth\AtCommandResult.java"
"OK","true","false","false","true","true","int","0","[]","Optional[// Result code enumerations
]","\android\bluetooth\AtCommandResult.java"
"mResultCode","false","false","true","false","false","int","null","[]","Optional[// Result code
]","\android\bluetooth\AtCommandResult.java"
"mSortedHorizontalChildren","false","false","true","false","false","View","new View[0]","[]","Optional.empty","\android\widget\RelativeLayout.java"
"mRules","false","false","true","false","false","int","new int[VERB_COUNT]","[@ViewDebug.ExportedProperty(category = ""layout"", resolveId = true, indexMapping = { @ViewDebug.IntToString(from = ABOVE, to = ""above""), @ViewDebug.IntToString(from = ALIGN_BASELINE, to = ""alignBaseline""), @ViewDebug.IntToString(from = ALIGN_BOTTOM, to = ""alignBottom""), @ViewDebug.IntToString(from = ALIGN_LEFT, to = ""alignLeft""), @ViewDebug.IntToString(from = ALIGN_PARENT_BOTTOM, to = ""alignParentBottom""), @ViewDebug.IntToString(from = ALIGN_PARENT_LEFT, to = ""alignParentLeft""), @ViewDebug.IntToString(from = ALIGN_PARENT_RIGHT, to = ""alignParentRight""), @ViewDebug.IntToString(from = ALIGN_PARENT_TOP, to = ""alignParentTop""), @ViewDebug.IntToString(from = ALIGN_RIGHT, to = ""alignRight""), @ViewDebug.IntToString(from = ALIGN_TOP, to = ""alignTop""), @ViewDebug.IntToString(from = BELOW, to = ""below""), @ViewDebug.IntToString(from = CENTER_HORIZONTAL, to = ""centerHorizontal""), @ViewDebug.IntToString(from = CENTER_IN_PARENT, to = ""center""), @ViewDebug.IntToString(from = CENTER_VERTICAL, to = ""centerVertical""), @ViewDebug.IntToString(from = LEFT_OF, to = ""leftOf""), @ViewDebug.IntToString(from = RIGHT_OF, to = ""rightOf"") }, mapping = { @ViewDebug.IntToString(from = TRUE, to = ""true""), @ViewDebug.IntToString(from = 0, to = ""false/NO_ID"") })]","Optional.empty","\android\widget\RelativeLayout.java"
"mLeft","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\RelativeLayout.java"
"mNodes","false","false","true","false","false","ArrayList<Node>","new ArrayList<Node>()","[]","Optional[/**
 * List of all views in the graph.
 */
]","\android\widget\RelativeLayout.java"
"mDirtyHierarchy","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\RelativeLayout.java"
"CENTER_VERTICAL","true","false","false","true","true","int","15","[]","Optional[/**
 * Rule that centers the child vertically with respect to the
 * bounds of its RelativeLayout parent.
 */
]","\android\widget\RelativeLayout.java"
"mBaselineView","false","false","true","false","false","View","null","[]","Optional.empty","\android\widget\RelativeLayout.java"
"ALIGN_PARENT_BOTTOM","true","false","false","true","true","int","12","[]","Optional[/**
 * Rule that aligns the child's bottom edge with its RelativeLayout
 * parent's bottom edge.
 */
]","\android\widget\RelativeLayout.java"
"CENTER_IN_PARENT","true","false","false","true","true","int","13","[]","Optional[/**
 * Rule that centers the child with respect to the bounds of its
 * RelativeLayout parent.
 */
]","\android\widget\RelativeLayout.java"
"ALIGN_PARENT_TOP","true","false","false","true","true","int","10","[]","Optional[/**
 * Rule that aligns the child's top edge with its RelativeLayout
 * parent's top edge.
 */
]","\android\widget\RelativeLayout.java"
"view","false","false","false","false","false","View","null","[]","Optional[/**
 * The view representing this node in the layout.
 */
]","\android\widget\RelativeLayout.java"
"mSelfBounds","false","false","true","false","true","Rect","new Rect()","[]","Optional.empty","\android\widget\RelativeLayout.java"
"ABOVE","true","false","false","true","true","int","2","[]","Optional[/**
 * Rule that aligns a child's bottom edge with another child's top edge.
 */
]","\android\widget\RelativeLayout.java"
"LOG_TAG","false","false","true","true","true","String","""RelativeLayout""","[]","Optional.empty","\android\widget\RelativeLayout.java"
"POOL_LIMIT","false","false","true","true","true","int","100","[]","Optional[// activities, that's why we give it a rather high limit
]","\android\widget\RelativeLayout.java"
"mKeyNodes","false","false","true","false","false","SparseArray<Node>","new SparseArray<Node>()","[]","Optional[/**
 * List of nodes in the graph. Each node is identified by its
 * view id (see View#getId()).
 */
]","\android\widget\RelativeLayout.java"
"mGraph","false","false","true","false","true","DependencyGraph","new DependencyGraph()","[]","Optional.empty","\android\widget\RelativeLayout.java"
"mIgnoreGravity","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\RelativeLayout.java"
"LEFT_OF","true","false","false","true","true","int","0","[]","Optional[/**
 * Rule that aligns a child's right edge with another child's left edge.
 */
]","\android\widget\RelativeLayout.java"
"alignWithParent","true","false","false","false","false","boolean","null","[@ViewDebug.ExportedProperty(category = ""layout"")]","Optional[/**
 * When true, uses the parent as the anchor if the anchor doesn't exist or if
 * the anchor's visibility is GONE.
 */
]","\android\widget\RelativeLayout.java"
"mNext","false","false","true","false","false","Node","null","[]","Optional.empty","\android\widget\RelativeLayout.java"
"dependencies","false","false","false","false","true","SparseArray<Node>","new SparseArray<Node>()","[]","Optional[/**
 * The list of dependencies for this node.
 */
]","\android\widget\RelativeLayout.java"
"dependents","false","false","false","false","true","HashSet<Node>","new HashSet<Node>()","[]","Optional[/**
 * The list of dependents for this node; a dependent is a node
 * that needs this node to be processed first.
 */
]","\android\widget\RelativeLayout.java"
"mHasBaselineAlignedChild","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\RelativeLayout.java"
"VERB_COUNT","false","false","true","true","true","int","16","[]","Optional.empty","\android\widget\RelativeLayout.java"
"mSortedVerticalChildren","false","false","true","false","false","View","new View[0]","[]","Optional.empty","\android\widget\RelativeLayout.java"
"CENTER_HORIZONTAL","true","false","false","true","true","int","14","[]","Optional[/**
 * Rule that centers the child horizontally with respect to the
 * bounds of its RelativeLayout parent.
 */
]","\android\widget\RelativeLayout.java"
"sPool","false","false","true","true","true","Pool<Node>","Pools.synchronizedPool(Pools.finitePool(new PoolableManager<Node>() {

    public Node newInstance() {
        return new Node();
    }

    public void onAcquired(Node element) {
    }

    public void onReleased(Node element) {
    }
}, POOL_LIMIT))","[]","Optional.empty","\android\widget\RelativeLayout.java"
"ALIGN_TOP","true","false","false","true","true","int","6","[]","Optional[/**
 * Rule that aligns a child's top edge with another child's top edge.
 */
]","\android\widget\RelativeLayout.java"
"ALIGN_LEFT","true","false","false","true","true","int","5","[]","Optional[/**
 * Rule that aligns a child's left edge with another child's left edge.
 */
]","\android\widget\RelativeLayout.java"
"mContentBounds","false","false","true","false","true","Rect","new Rect()","[]","Optional.empty","\android\widget\RelativeLayout.java"
"ALIGN_BASELINE","true","false","false","true","true","int","4","[]","Optional[/**
 * Rule that aligns a child's baseline with another child's baseline.
 */
]","\android\widget\RelativeLayout.java"
"ALIGN_RIGHT","true","false","false","true","true","int","7","[]","Optional[/**
 * Rule that aligns a child's right edge with another child's right edge.
 */
]","\android\widget\RelativeLayout.java"
"TRUE","true","false","false","true","true","int","-1","[]","Optional.empty","\android\widget\RelativeLayout.java"
"mTopToBottomLeftToRightSet","false","false","true","false","false","SortedSet<View>","null","[]","Optional.empty","\android\widget\RelativeLayout.java"
"BELOW","true","false","false","true","true","int","3","[]","Optional[/**
 * Rule that aligns a child's top edge with another child's bottom edge.
 */
]","\android\widget\RelativeLayout.java"
"ALIGN_PARENT_LEFT","true","false","false","true","true","int","9","[]","Optional[/**
 * Rule that aligns the child's left edge with its RelativeLayout
 * parent's left edge.
 */
]","\android\widget\RelativeLayout.java"
"mRoots","false","false","true","false","false","LinkedList<Node>","new LinkedList<Node>()","[]","Optional[/**
 * Temporary data structure used to build the list of roots
 * for this graph.
 */
]","\android\widget\RelativeLayout.java"
"ALIGN_PARENT_RIGHT","true","false","false","true","true","int","11","[]","Optional[/**
 * Rule that aligns the child's right edge with its RelativeLayout
 * parent's right edge.
 */
]","\android\widget\RelativeLayout.java"
"DEBUG_GRAPH","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\widget\RelativeLayout.java"
"ALIGN_BOTTOM","true","false","false","true","true","int","8","[]","Optional[/**
 * Rule that aligns a child's bottom edge with another child's bottom edge.
 */
]","\android\widget\RelativeLayout.java"
"mGravity","false","false","true","false","false","int","Gravity.LEFT | Gravity.TOP","[]","Optional.empty","\android\widget\RelativeLayout.java"
"RIGHT_OF","true","false","false","true","true","int","1","[]","Optional[/**
 * Rule that aligns a child's left edge with another child's right edge.
 */
]","\android\widget\RelativeLayout.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<Messenger>","new Parcelable.Creator<Messenger>() {

    public Messenger createFromParcel(Parcel in) {
        IBinder target = in.readStrongBinder();
        return target != null ? new Messenger(target) : null;
    }

    public Messenger[] newArray(int size) {
        return new Messenger[size];
    }
}","[]","Optional.empty","\android\os\Messenger.java"
"mTarget","false","false","true","false","true","IMessenger","null","[]","Optional.empty","\android\os\Messenger.java"
"mTimer","false","false","true","true","false","Timer","null","[]","Optional[// See http://www.whatwg.org/specs/web-apps/current-work/#event-media-timeupdate
]","\android\webkit\HTML5VideoViewProxy.java"
"ERROR","false","false","true","true","true","int","103","[]","Optional.empty","\android\webkit\HTML5VideoViewProxy.java"
"TIMEUPDATE","false","false","true","true","true","int","300","[]","Optional[// Timer thread -> UI thread
]","\android\webkit\HTML5VideoViewProxy.java"
"mSeekPosition","false","false","true","false","false","int","null","[]","Optional[// The seek position.
]","\android\webkit\HTML5VideoViewProxy.java"
"PREPARED","false","false","true","true","true","int","200","[]","Optional[// Message Ids to be handled on the WebCore thread
]","\android\webkit\HTML5VideoViewProxy.java"
"SEEK","false","false","true","true","true","int","101","[]","Optional.empty","\android\webkit\HTML5VideoViewProxy.java"
"LOAD_DEFAULT_POSTER","false","false","true","true","true","int","104","[]","Optional.empty","\android\webkit\HTML5VideoViewProxy.java"
"mProxy","false","false","true","false","true","HTML5VideoViewProxy","null","[]","Optional[// The proxy we're doing this for.
]","\android\webkit\HTML5VideoViewProxy.java"
"mNativePointer","false","false","false","false","false","int","null","[]","Optional[// The C++ MediaPlayerPrivateAndroid object.
]","\android\webkit\HTML5VideoViewProxy.java"
"mLayout","false","false","true","true","false","FrameLayout","null","[]","Optional[// The container for the progress view and video view
]","\android\webkit\HTML5VideoViewProxy.java"
"mRequestQueue","false","false","true","true","false","RequestQueue","null","[]","Optional[// The request queue. This is static as we have one queue for all posters.
]","\android\webkit\HTML5VideoViewProxy.java"
"COOKIE","false","false","true","true","true","String","""Cookie""","[]","Optional.empty","\android\webkit\HTML5VideoViewProxy.java"
"mPoster","false","false","true","false","false","Bitmap","null","[]","Optional[// This ref prevents the bitmap from being GC'ed.
]","\android\webkit\HTML5VideoViewProxy.java"
"mRequestHandle","false","false","true","false","false","RequestHandle","null","[]","Optional[// The request handle. We only touch this on the WebCore thread.
]","\android\webkit\HTML5VideoViewProxy.java"
"TIMEUPDATE_PERIOD","false","false","true","true","true","int","250","[]","Optional[// ms
]","\android\webkit\HTML5VideoViewProxy.java"
"POSTER_FETCHED","false","false","true","true","true","int","202","[]","Optional.empty","\android\webkit\HTML5VideoViewProxy.java"
"isVideoSelfEnded","false","false","false","true","false","boolean","false","[]","Optional.empty","\android\webkit\HTML5VideoViewProxy.java"
"PLAY","false","false","true","true","true","int","100","[]","Optional[// Message Ids for WebCore thread -> UI thread communication.
]","\android\webkit\HTML5VideoViewProxy.java"
"PAUSED","false","false","true","true","true","int","203","[]","Optional.empty","\android\webkit\HTML5VideoViewProxy.java"
"mProgressView","false","false","true","true","false","View","null","[]","Optional[// The progress view.
]","\android\webkit\HTML5VideoViewProxy.java"
"PAUSE","false","false","true","true","true","int","102","[]","Optional.empty","\android\webkit\HTML5VideoViewProxy.java"
"ENDED","false","false","true","true","true","int","201","[]","Optional.empty","\android\webkit\HTML5VideoViewProxy.java"
"mCallback","false","false","true","true","true","WebChromeClient.CustomViewCallback","new WebChromeClient.CustomViewCallback() {

    public void onCustomViewHidden() {
        // At this point the videoview is pretty much destroyed.
        // It listens to SurfaceHolder.Callback.SurfaceDestroyed event
        // which happens when the video view is detached from its parent
        // view. This happens in the WebChromeClient before this method
        // is invoked.
        mTimer.cancel();
        mTimer = null;
        if (mVideoView.isPlaying()) {
            mVideoView.stopPlayback();
        }
        if (isVideoSelfEnded)
            mCurrentProxy.dispatchOnEnded();
        else
            mCurrentProxy.dispatchOnPaused();
        // Re enable plugin views.
        mCurrentProxy.getWebView().getViewManager().showAll();
        isVideoSelfEnded = false;
        mCurrentProxy = null;
        mLayout.removeView(mVideoView);
        mVideoView = null;
        if (mProgressView != null) {
            mLayout.removeView(mProgressView);
            mProgressView = null;
        }
        mLayout = null;
    }
}","[]","Optional.empty","\android\webkit\HTML5VideoViewProxy.java"
"mHandler","false","false","true","false","false","Handler","null","[]","Optional[// The handler to handle messages on the WebCore thread.
]","\android\webkit\HTML5VideoViewProxy.java"
"mWebCoreHandler","false","false","true","false","false","Handler","null","[]","Optional[// The handler for WebCore thread messages;
]","\android\webkit\HTML5VideoViewProxy.java"
"mPosterBytes","false","false","true","false","false","ByteArrayOutputStream","null","[]","Optional[// The poster bytes. We only touch this on the network thread.
]","\android\webkit\HTML5VideoViewProxy.java"
"mPosterDownloader","false","false","true","false","false","PosterDownloader","null","[]","Optional[// The poster downloader.
]","\android\webkit\HTML5VideoViewProxy.java"
"mStatusCode","false","false","true","false","false","int","null","[]","Optional[// The response status code.
]","\android\webkit\HTML5VideoViewProxy.java"
"mQueueRefCount","false","false","true","true","false","int","0","[]","Optional.empty","\android\webkit\HTML5VideoViewProxy.java"
"mCurrentProxy","false","false","true","true","false","HTML5VideoViewProxy","null","[]","Optional[// The proxy that is currently playing (if any).
]","\android\webkit\HTML5VideoViewProxy.java"
"mHeaders","false","false","true","false","false","Headers","null","[]","Optional[// The response headers.
]","\android\webkit\HTML5VideoViewProxy.java"
"mWebView","false","false","true","false","false","WebView","null","[]","Optional[// The WebView instance that created this view.
]","\android\webkit\HTML5VideoViewProxy.java"
"mUrl","false","false","true","false","false","String","null","[]","Optional[// The poster URL
]","\android\webkit\HTML5VideoViewProxy.java"
"mVideoView","false","false","true","true","false","VideoView","null","[]","Optional[// http://b/issue?id=1973663 is fixed.
]","\android\webkit\HTML5VideoViewProxy.java"
"LOGTAG","false","false","true","true","true","String","""HTML5VideoViewProxy""","[]","Optional[// Logging tag.
]","\android\webkit\HTML5VideoViewProxy.java"
"mStore","false","true","false","false","true","GestureStore","null","[]","Optional.empty","\android\gesture\GestureLibrary.java"
"mAlertParams","false","true","false","false","false","AlertController.AlertParams","null","[]","Optional[/**
 * The parameters for the alert.
 */
]","\com\android\internal\app\AlertActivity.java"
"mAlert","false","true","false","false","false","AlertController","null","[]","Optional[/**
 * The model for the alert.
 *
 * @see #mAlertParams
 */
]","\com\android\internal\app\AlertActivity.java"
"TAG","false","false","true","true","true","String","""FullBackupAgent""","[]","Optional[// !!! TODO: turn off debugging
]","\android\app\FullBackupAgent.java"
"DEBUG","false","false","true","true","true","boolean","true","[]","Optional.empty","\android\app\FullBackupAgent.java"
"VAL_SPARSEBOOLEANARRAY","false","false","true","true","true","int","22","[]","Optional.empty","\android\os\Parcel.java"
"VAL_DOUBLE","false","false","true","true","true","int","8","[]","Optional.empty","\android\os\Parcel.java"
"VAL_INTARRAY","false","false","true","true","true","int","18","[]","Optional.empty","\android\os\Parcel.java"
"VAL_PARCELABLEARRAY","false","false","true","true","true","int","16","[]","Optional.empty","\android\os\Parcel.java"
"mCreators","false","false","true","true","true","HashMap<ClassLoader,HashMap<String,Parcelable.Creator>>","new HashMap<ClassLoader, HashMap<String, Parcelable.Creator>>()","[]","Optional[// Method objects.
]","\android\os\Parcel.java"
"VAL_CHARSEQUENCE","false","false","true","true","true","int","10","[]","Optional.empty","\android\os\Parcel.java"
"VAL_LIST","false","false","true","true","true","int","11","[]","Optional.empty","\android\os\Parcel.java"
"VAL_INTEGER","false","false","true","true","true","int","1","[]","Optional.empty","\android\os\Parcel.java"
"VAL_BUNDLE","false","false","true","true","true","int","3","[]","Optional.empty","\android\os\Parcel.java"
"VAL_SPARSEARRAY","false","false","true","true","true","int","12","[]","Optional.empty","\android\os\Parcel.java"
"mObject","false","false","true","false","false","int","null","[@SuppressWarnings({ ""UnusedDeclaration"" })]","Optional.empty","\android\os\Parcel.java"
"VAL_MAP","false","false","true","true","true","int","2","[]","Optional.empty","\android\os\Parcel.java"
"VAL_LONGARRAY","false","false","true","true","true","int","19","[]","Optional.empty","\android\os\Parcel.java"
"sHolderPool","false","false","true","true","true","Parcel","new Parcel[POOL_SIZE]","[]","Optional.empty","\android\os\Parcel.java"
"EX_ILLEGAL_STATE","false","false","true","true","true","int","-5","[]","Optional.empty","\android\os\Parcel.java"
"VAL_BYTE","false","false","true","true","true","int","20","[]","Optional.empty","\android\os\Parcel.java"
"VAL_PARCELABLE","false","false","true","true","true","int","4","[]","Optional.empty","\android\os\Parcel.java"
"EX_SECURITY","false","false","true","true","true","int","-1","[]","Optional[// The initial int32 in a Binder call's reply Parcel header:
]","\android\os\Parcel.java"
"mStack","false","false","true","false","false","RuntimeException","null","[]","Optional.empty","\android\os\Parcel.java"
"VAL_SERIALIZABLE","false","false","true","true","true","int","21","[]","Optional.empty","\android\os\Parcel.java"
"VAL_FLOAT","false","false","true","true","true","int","7","[]","Optional.empty","\android\os\Parcel.java"
"EX_BAD_PARCELABLE","false","false","true","true","true","int","-2","[]","Optional.empty","\android\os\Parcel.java"
"mOwnObject","false","false","true","false","false","int","null","[@SuppressWarnings({ ""UnusedDeclaration"" })]","Optional.empty","\android\os\Parcel.java"
"VAL_NULL","false","false","true","true","true","int","-1","[]","Optional.empty","\android\os\Parcel.java"
"VAL_BOOLEANARRAY","false","false","true","true","true","int","23","[]","Optional.empty","\android\os\Parcel.java"
"VAL_OBJECTARRAY","false","false","true","true","true","int","17","[]","Optional.empty","\android\os\Parcel.java"
"VAL_IBINDER","false","false","true","true","true","int","15","[]","Optional.empty","\android\os\Parcel.java"
"VAL_BYTEARRAY","false","false","true","true","true","int","13","[]","Optional.empty","\android\os\Parcel.java"
"TAG","false","false","true","true","true","String","""Parcel""","[]","Optional.empty","\android\os\Parcel.java"
"DEBUG_RECYCLE","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\os\Parcel.java"
"VAL_CHARSEQUENCEARRAY","false","false","true","true","true","int","24","[]","Optional.empty","\android\os\Parcel.java"
"sOwnedPool","false","false","true","true","true","Parcel","new Parcel[POOL_SIZE]","[]","Optional.empty","\android\os\Parcel.java"
"VAL_STRING","false","false","true","true","true","int","0","[]","Optional.empty","\android\os\Parcel.java"
"POOL_SIZE","false","false","true","true","true","int","6","[]","Optional.empty","\android\os\Parcel.java"
"VAL_BOOLEAN","false","false","true","true","true","int","9","[]","Optional.empty","\android\os\Parcel.java"
"VAL_STRINGARRAY","false","false","true","true","true","int","14","[]","Optional.empty","\android\os\Parcel.java"
"VAL_SHORT","false","false","true","true","true","int","5","[]","Optional.empty","\android\os\Parcel.java"
"VAL_LONG","false","false","true","true","true","int","6","[]","Optional.empty","\android\os\Parcel.java"
"STRING_CREATOR","true","false","false","true","true","Parcelable.Creator<String>","new Parcelable.Creator<String>() {

    public String createFromParcel(Parcel source) {
        return source.readString();
    }

    public String[] newArray(int size) {
        return new String[size];
    }
}","[]","Optional.empty","\android\os\Parcel.java"
"EX_NULL_POINTER","false","false","true","true","true","int","-4","[]","Optional.empty","\android\os\Parcel.java"
"EX_ILLEGAL_ARGUMENT","false","false","true","true","true","int","-3","[]","Optional.empty","\android\os\Parcel.java"
"EX_HAS_REPLY_HEADER","false","false","true","true","true","int","-128","[]","Optional[// special; see below
]","\android\os\Parcel.java"
"forceAdd","false","false","false","false","false","boolean","null","[@ViewDebug.ExportedProperty(category = ""list"")]","Optional[/**
 * When an AbsListView is measured with an AT_MOST measure spec, it needs
 * to obtain children views to measure itself. When doing so, the children
 * are not attached to the window, but put in the recycler which assumes
 * they've been attached before. Setting this flag will force the reused
 * view to be attached to the window rather than just attached to the
 * parent.
 */
]","\android\widget\AbsListView.java"
"mOverscrollMax","false","false","false","false","false","int","null","[]","Optional[/**
 * Maximum distance to record overscroll
 */
]","\android\widget\AbsListView.java"
"SCROLL_STATE_IDLE","true","false","false","true","false","int","0","[]","Optional[/**
 * The view is not scrolling. Note navigating the list using the trackball counts as
 * being in the idle state since these transitions are not animated.
 */
]","\android\widget\AbsListView.java"
"mFirstActivePosition","false","false","true","false","false","int","null","[]","Optional[/**
 * The position of the first view stored in mActiveViews.
 */
]","\android\widget\AbsListView.java"
"mPublicInputConnection","false","false","true","false","false","InputConnectionWrapper","null","[]","Optional.empty","\android\widget\AbsListView.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<SavedState>","new Parcelable.Creator<SavedState>() {

    public SavedState createFromParcel(Parcel in) {
        return new SavedState(in);
    }

    public SavedState[] newArray(int size) {
        return new SavedState[size];
    }
}","[]","Optional.empty","\android\widget\AbsListView.java"
"mIsScrap","false","false","false","false","true","boolean","new boolean[1]","[]","Optional.empty","\android\widget\AbsListView.java"
"height","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\AbsListView.java"
"mFastScrollEnabled","false","false","false","false","false","boolean","null","[]","Optional[/**
 * Whether or not to enable the fast scroll feature on this list
 */
]","\android\widget\AbsListView.java"
"mTouchFrame","false","false","true","false","false","Rect","null","[]","Optional[/**
 * Rectangle used for hit testing children
 */
]","\android\widget\AbsListView.java"
"mMotionPosition","false","false","false","false","false","int","null","[]","Optional[/**
 * The position of the view that received the down motion event
 */
]","\android\widget\AbsListView.java"
"mDensityScale","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\AbsListView.java"
"mStackFromBottom","false","false","false","false","false","boolean","null","[]","Optional[/**
 * Indicates whether the list is stacked from the bottom edge or
 * the top edge.
 */
]","\android\widget\AbsListView.java"
"mMotionX","false","false","false","false","false","int","null","[]","Optional[/**
 * The X value associated with the the down motion event
 */
]","\android\widget\AbsListView.java"
"mMotionY","false","false","false","false","false","int","null","[]","Optional[/**
 * The Y value associated with the the down motion event
 */
]","\android\widget\AbsListView.java"
"mRecycler","false","false","false","false","true","RecycleBin","new RecycleBin()","[]","Optional[/**
 * The data set used to store unused views that should be reused during the next layout
 * to avoid creating new ones
 */
]","\android\widget\AbsListView.java"
"mLastFlingY","false","false","true","false","false","int","null","[]","Optional[/**
 * Y value reported by mScroller on the previous fling
 */
]","\android\widget\AbsListView.java"
"PROFILE_FLINGING","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\widget\AbsListView.java"
"viewType","false","false","false","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""list"", mapping = { @ViewDebug.IntToString(from = ITEM_VIEW_TYPE_IGNORE, to = ""ITEM_VIEW_TYPE_IGNORE""), @ViewDebug.IntToString(from = ITEM_VIEW_TYPE_HEADER_OR_FOOTER, to = ""ITEM_VIEW_TYPE_HEADER_OR_FOOTER"") })]","Optional[/**
 * View type for this view, as returned by
 * {@link android.widget.Adapter#getItemViewType(int) }
 */
]","\android\widget\AbsListView.java"
"mWidthMeasureSpec","false","false","false","false","false","int","0","[]","Optional[/**
 * Subclasses must retain their measure spec from onMeasure() into this member
 */
]","\android\widget\AbsListView.java"
"mSelectionTopPadding","false","false","false","false","false","int","0","[]","Optional[/**
 * The selection's top padding
 */
]","\android\widget\AbsListView.java"
"selectedId","false","false","false","false","false","long","null","[]","Optional.empty","\android\widget\AbsListView.java"
"mOriginalAttachCount","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\AbsListView.java"
"mLastY","false","false","false","false","false","int","null","[]","Optional[/**
 * Y value from on the previous motion event (if any)
 */
]","\android\widget\AbsListView.java"
"mSelectionLeftPadding","false","false","false","false","false","int","0","[]","Optional[/**
 * The selection's left padding
 */
]","\android\widget\AbsListView.java"
"mTextFilterEnabled","false","false","true","false","false","boolean","null","[]","Optional[/**
 * Indicates that this view supports filtering
 */
]","\android\widget\AbsListView.java"
"mContextMenuInfo","false","false","true","false","false","ContextMenuInfo","null","[]","Optional.empty","\android\widget\AbsListView.java"
"mLastSeenPos","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\AbsListView.java"
"mVelocityTracker","false","false","true","false","false","VelocityTracker","null","[]","Optional[/**
 * Determines speed during touch scrolling
 */
]","\android\widget\AbsListView.java"
"mDrawSelectorOnTop","false","false","false","false","false","boolean","false","[]","Optional[/**
 * Indicates whether the list selector should be drawn on top of the children or behind
 */
]","\android\widget\AbsListView.java"
"mScrapViews","false","false","true","false","false","ArrayList<View>","null","[]","Optional[/**
 * Unsorted views that can be used by the adapter as a convert view.
 */
]","\android\widget\AbsListView.java"
"LAYOUT_SPECIFIC","false","false","false","true","true","int","4","[]","Optional[/**
 * Make a mSelectedItem appear in a specific location and build the rest of
 * the views from there. The top is specified by mSpecificTop.
 */
]","\android\widget\AbsListView.java"
"mListPadding","false","false","false","false","false","Rect","new Rect()","[]","Optional[/**
 * This view's padding
 */
]","\android\widget\AbsListView.java"
"mScrollDuration","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\AbsListView.java"
"mPendingCheckForTap","false","false","true","false","false","Runnable","null","[]","Optional[/**
 * The last CheckForTap runnable we posted, if any
 */
]","\android\widget\AbsListView.java"
"INVALID_POINTER","false","false","true","true","true","int","-1","[]","Optional[/**
 * Sentinel value for no current active pointer.
 * Used by {@link #mActivePointerId}.
 */
]","\android\widget\AbsListView.java"
"mOnScrollListener","false","false","true","false","false","OnScrollListener","null","[]","Optional[/**
 * Optional callback to notify client when scroll position has changed
 */
]","\android\widget\AbsListView.java"
"mActiveViews","false","false","true","false","false","View","new View[0]","[]","Optional[/**
 * Views that were on screen at the start of layout. This array is populated at the start of
 * layout, and at the end of layout all view in mActiveViews are moved to mScrapViews.
 * Views in mActiveViews represent a contiguous range of Views, with position of the first
 * view store in mFirstActivePosition.
 */
]","\android\widget\AbsListView.java"
"TOUCH_MODE_REST","false","false","false","true","true","int","-1","[]","Optional[/**
 * Indicates that we are not in the middle of a touch gesture
 */
]","\android\widget\AbsListView.java"
"firstId","false","false","false","false","false","long","null","[]","Optional.empty","\android\widget\AbsListView.java"
"mTextFilter","false","false","false","false","false","EditText","null","[]","Optional[/**
 * Used with type filter window
 */
]","\android\widget\AbsListView.java"
"mOverscrollDistance","false","false","false","false","false","int","null","[]","Optional[/**
 * Maximum distance to overscroll by during edge effects
 */
]","\android\widget\AbsListView.java"
"mCurrentScrap","false","false","true","false","false","ArrayList<View>","null","[]","Optional.empty","\android\widget\AbsListView.java"
"mPendingCheckForLongPress","false","false","true","false","false","CheckForLongPress","null","[]","Optional[/**
 * The last CheckForLongPress runnable we posted, if any
 */
]","\android\widget\AbsListView.java"
"mLastPositionDistanceGuess","false","false","true","false","false","int","null","[]","Optional[/**
 * An estimate of how many pixels are between the bottom of the list and
 * the bottom of the last position in the adapter, based on the last time
 * we saw it. Used to hint where to draw edge glows.
 */
]","\android\widget\AbsListView.java"
"mPopup","false","false","false","false","false","PopupWindow","null","[]","Optional[/**
 * Keeps track of our accessory window
 */
]","\android\widget\AbsListView.java"
"mLayoutMode","false","false","false","false","false","int","LAYOUT_NORMAL","[]","Optional[/**
 * Controls how the next layout will happen
 */
]","\android\widget\AbsListView.java"
"OVERSCROLL_LIMIT_DIVISOR","false","false","false","true","true","int","3","[]","Optional[/**
 * Content height divided by this is the overscroll limit.
 */
]","\android\widget\AbsListView.java"
"mScroller","false","false","true","false","true","OverScroller","null","[]","Optional[/**
 * Tracks the decay of a fling scroll
 */
]","\android\widget\AbsListView.java"
"mCacheColorHint","false","false","true","false","false","int","null","[]","Optional[/**
 * Indicates that this list is always drawn on top of a solid, single-color, opaque
 * background
 */
]","\android\widget\AbsListView.java"
"TOUCH_MODE_OVERSCROLL","false","false","false","true","true","int","5","[]","Optional[/**
 * Indicates the touch gesture is an overscroll - a scroll beyond the beginning or end.
 */
]","\android\widget\AbsListView.java"
"mDirection","false","false","true","false","false","int","0","[]","Optional[/**
 * Used for determining when to cancel out of overscroll.
 */
]","\android\widget\AbsListView.java"
"TRANSCRIPT_MODE_DISABLED","true","false","false","true","true","int","0","[]","Optional[/**
 * Disables the transcript mode.
 *
 * @see #setTranscriptMode(int)
 */
]","\android\widget\AbsListView.java"
"mPositionScroller","false","false","true","false","false","PositionScroller","null","[]","Optional[/**
 * Handles scrolling between positions within the list.
 */
]","\android\widget\AbsListView.java"
"MOVE_DOWN_BOUND","false","false","true","true","true","int","3","[]","Optional.empty","\android\widget\AbsListView.java"
"MOVE_DOWN_POS","false","false","true","true","true","int","1","[]","Optional.empty","\android\widget\AbsListView.java"
"mScrollUp","false","false","false","false","false","View","null","[]","Optional[/**
 * The top scroll indicator
 */
]","\android\widget\AbsListView.java"
"recycledHeaderFooter","false","false","false","false","false","boolean","null","[@ViewDebug.ExportedProperty(category = ""list"")]","Optional[/**
 * When this boolean is set, the view has been added to the AbsListView
 * at least once. It is used to know whether headers/footers have already
 * been added to the list view and whether they should be treated as
 * recycled views or not.
 */
]","\android\widget\AbsListView.java"
"TOUCH_MODE_UNKNOWN","false","false","true","true","true","int","-1","[]","Optional[/**
 * Used to request a layout when we changed touch mode
 */
]","\android\widget\AbsListView.java"
"mExtraScroll","false","false","true","false","true","int","null","[]","Optional.empty","\android\widget\AbsListView.java"
"mDefInputConnection","false","false","true","false","false","InputConnection","null","[]","Optional.empty","\android\widget\AbsListView.java"
"mGlobalLayoutListenerAddedFilter","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\AbsListView.java"
"TOUCH_MODE_TAP","false","false","false","true","true","int","1","[]","Optional[/**
 * Indicates the touch has been recognized as a tap and we are now waiting to see if the touch
 * is a longpress
 */
]","\android\widget\AbsListView.java"
"LAYOUT_FORCE_TOP","false","false","false","true","true","int","1","[]","Optional[/**
 * Show the first item
 */
]","\android\widget\AbsListView.java"
"LAYOUT_SET_SELECTION","false","false","false","true","true","int","2","[]","Optional[/**
 * Force the selected item to be on somewhere on the screen
 */
]","\android\widget\AbsListView.java"
"mOverflingDistance","false","false","false","false","false","int","null","[]","Optional[/**
 * Maximum distance to overfling during edge effects
 */
]","\android\widget\AbsListView.java"
"mPendingCheckForKeyLongPress","false","false","true","false","false","CheckForKeyLongPress","null","[]","Optional[/**
 * The last CheckForKeyLongPress runnable we posted, if any
 */
]","\android\widget\AbsListView.java"
"mTargetPos","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\AbsListView.java"
"mMotionViewNewTop","false","false","false","false","false","int","null","[]","Optional[/**
 * The desired offset to the top of the mMotionPosition view after a scroll
 */
]","\android\widget\AbsListView.java"
"mFastScroller","false","false","true","false","false","FastScroller","null","[]","Optional[/**
 * Helper object that renders and controls the fast scroll thumb.
 */
]","\android\widget\AbsListView.java"
"mClearScrollingCache","false","false","true","false","false","Runnable","null","[]","Optional.empty","\android\widget\AbsListView.java"
"mResurrectToPosition","false","false","false","false","false","int","INVALID_POSITION","[]","Optional[/**
 * The position to resurrect the selected position to.
 */
]","\android\widget\AbsListView.java"
"TOUCH_MODE_OFF","false","false","true","true","true","int","1","[]","Optional.empty","\android\widget\AbsListView.java"
"mScrollProfilingStarted","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\AbsListView.java"
"mPerformClick","false","false","true","false","false","AbsListView.PerformClick","null","[]","Optional[/**
 * Acts upon click
 */
]","\android\widget\AbsListView.java"
"mSelectedTop","false","false","false","false","false","int","0","[]","Optional[/**
 * The offset in pixels form the top of the AdapterView to the top
 * of the currently selected view. Used to save and restore state.
 */
]","\android\widget\AbsListView.java"
"SCROLL_DURATION","false","false","true","true","true","int","400","[]","Optional.empty","\android\widget\AbsListView.java"
"mScrollDown","false","false","false","false","false","View","null","[]","Optional[/**
 * The down scroll indicator
 */
]","\android\widget\AbsListView.java"
"TOUCH_MODE_FLING","false","false","false","true","true","int","4","[]","Optional[/**
 * Indicates the view is in the process of being flung
 */
]","\android\widget\AbsListView.java"
"TRANSCRIPT_MODE_ALWAYS_SCROLL","true","false","false","true","true","int","2","[]","Optional[/**
 * The list will automatically scroll to the bottom, no matter what items
 * are currently visible.
 *
 * @see #setTranscriptMode(int)
 */
]","\android\widget\AbsListView.java"
"LAYOUT_NORMAL","false","false","false","true","true","int","0","[]","Optional[/**
 * Regular layout - usually an unsolicited layout from the view system
 */
]","\android\widget\AbsListView.java"
"mChild","false","false","false","false","false","View","null","[]","Optional.empty","\android\widget\AbsListView.java"
"mFlingRunnable","false","false","true","false","false","FlingRunnable","null","[]","Optional[/**
 * Handles one frame of a fling
 */
]","\android\widget\AbsListView.java"
"mSmoothScrollbarEnabled","false","false","true","false","false","boolean","true","[]","Optional[/**
 * Indicates whether to use pixels-based or position-based scrollbar
 * properties.
 */
]","\android\widget\AbsListView.java"
"mActivePointerId","false","false","true","false","false","int","INVALID_POINTER","[]","Optional[/**
 * ID of the active pointer. This is used to retain consistency during
 * drags/flings if multiple pointers are used.
 */
]","\android\widget\AbsListView.java"
"mMaximumVelocity","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\AbsListView.java"
"viewTop","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\AbsListView.java"
"mSelectionBottomPadding","false","false","false","false","false","int","0","[]","Optional[/**
 * The selection's bottom padding
 */
]","\android\widget\AbsListView.java"
"mScrollingCacheEnabled","false","false","false","false","false","boolean","null","[]","Optional[/**
 * When set to true, the list automatically discards the children's
 * bitmap cache after scrolling.
 */
]","\android\widget\AbsListView.java"
"SCROLL_STATE_TOUCH_SCROLL","true","false","false","true","false","int","1","[]","Optional[/**
 * The user is scrolling using touch, and their finger is still on the screen
 */
]","\android\widget\AbsListView.java"
"mBoundPos","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\AbsListView.java"
"LAYOUT_SYNC","false","false","false","true","true","int","5","[]","Optional[/**
 * Layout to sync as a result of a data change. Restore mSyncPosition to have its top
 * at mSpecificTop
 */
]","\android\widget\AbsListView.java"
"TOUCH_MODE_DONE_WAITING","false","false","false","true","true","int","2","[]","Optional[/**
 * Indicates we have waited for everything we can wait for, but the user's finger is still down
 */
]","\android\widget\AbsListView.java"
"TOUCH_MODE_SCROLL","false","false","false","true","true","int","3","[]","Optional[/**
 * Indicates the touch gesture is a scroll
 */
]","\android\widget\AbsListView.java"
"mSelector","false","false","false","false","false","Drawable","null","[]","Optional[/**
 * The drawable used to draw the selector
 */
]","\android\widget\AbsListView.java"
"TOUCH_MODE_ON","false","false","true","true","true","int","0","[]","Optional.empty","\android\widget\AbsListView.java"
"mEdgeGlowBottom","false","false","true","false","false","EdgeGlow","null","[]","Optional[/**
 * Tracks the state of the bottom edge glow.
 */
]","\android\widget\AbsListView.java"
"mFirstPositionDistanceGuess","false","false","true","false","false","int","null","[]","Optional[/**
 * An estimate of how many pixels are between the top of the list and
 * the top of the first position in the adapter, based on the last time
 * we saw it. Used to hint where to draw edge glows.
 */
]","\android\widget\AbsListView.java"
"filter","false","false","false","false","false","String","null","[]","Optional.empty","\android\widget\AbsListView.java"
"mCachingStarted","false","false","false","false","false","boolean","null","[]","Optional[/**
 * When the view is scrolling, this flag is set to true to indicate subclasses that
 * the drawing cache was enabled on the children
 */
]","\android\widget\AbsListView.java"
"TRANSCRIPT_MODE_NORMAL","true","false","false","true","true","int","1","[]","Optional[/**
 * The list will automatically scroll to the bottom when a data set change
 * notification is received and only if the last item is already visible
 * on screen.
 *
 * @see #setTranscriptMode(int)
 */
]","\android\widget\AbsListView.java"
"mTouchSlop","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\AbsListView.java"
"mEdgeGlowTop","false","false","true","false","false","EdgeGlow","null","[]","Optional[/**
 * Tracks the state of the top edge glow.
 */
]","\android\widget\AbsListView.java"
"MOVE_UP_POS","false","false","true","true","true","int","2","[]","Optional.empty","\android\widget\AbsListView.java"
"TOUCH_MODE_OVERFLING","false","false","false","true","true","int","6","[]","Optional[/**
 * Indicates the view is being flung outside of normal content bounds
 * and will spring back.
 */
]","\android\widget\AbsListView.java"
"mPopupHidden","false","false","true","false","false","boolean","null","[]","Optional[// dispatchDisplayHint()
]","\android\widget\AbsListView.java"
"mMode","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\AbsListView.java"
"mLastScrollState","false","false","true","false","false","int","OnScrollListener.SCROLL_STATE_IDLE","[]","Optional[/**
 * The last scroll state reported to clients through {@link OnScrollListener}.
 */
]","\android\widget\AbsListView.java"
"mFiltered","false","false","true","false","false","boolean","null","[]","Optional[/**
 * Indicates that this view is currently displaying a filtered view of the data
 */
]","\android\widget\AbsListView.java"
"mSelectorRect","false","false","false","false","false","Rect","new Rect()","[]","Optional[/**
 * Defines the selector's location and dimension at drawing time
 */
]","\android\widget\AbsListView.java"
"mAdapter","false","false","false","false","false","ListAdapter","null","[]","Optional[/**
 * The adapter containing the data to be displayed by this view
 */
]","\android\widget\AbsListView.java"
"mTranscriptMode","false","false","true","false","false","int","null","[]","Optional[/**
 * This view is in transcript mode -- it shows the bottom of the list when the data
 * changes
 */
]","\android\widget\AbsListView.java"
"mClickMotionPosition","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\AbsListView.java"
"mRecyclerListener","false","false","true","false","false","RecyclerListener","null","[]","Optional.empty","\android\widget\AbsListView.java"
"MOVE_UP_BOUND","false","false","true","true","true","int","4","[]","Optional.empty","\android\widget\AbsListView.java"
"mFlingProfilingStarted","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\AbsListView.java"
"PROFILE_SCROLLING","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\widget\AbsListView.java"
"position","false","false","false","false","false","int","null","[]","Optional.empty","\android\widget\AbsListView.java"
"mMinimumVelocity","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\AbsListView.java"
"TOUCH_MODE_DOWN","false","false","false","true","true","int","0","[]","Optional[/**
 * Indicates we just received the touch event and we are waiting to see if the it is a tap or a
 * scroll gesture.
 */
]","\android\widget\AbsListView.java"
"LAYOUT_MOVE_SELECTION","false","false","false","true","true","int","6","[]","Optional[/**
 * Layout as a result of using the navigation keys
 */
]","\android\widget\AbsListView.java"
"mMotionViewOriginalTop","false","false","false","false","false","int","null","[]","Optional[/**
 * The offset to the top of the mMotionPosition view when the down motion event was received
 */
]","\android\widget\AbsListView.java"
"mMotionCorrection","false","false","false","false","false","int","null","[]","Optional[/**
 * How far the finger moved before we started scrolling
 */
]","\android\widget\AbsListView.java"
"mLastTouchMode","false","false","true","false","false","int","TOUCH_MODE_UNKNOWN","[]","Optional.empty","\android\widget\AbsListView.java"
"mSelectionRightPadding","false","false","false","false","false","int","0","[]","Optional[/**
 * The selection's right padding
 */
]","\android\widget\AbsListView.java"
"LAYOUT_FORCE_BOTTOM","false","false","false","true","true","int","3","[]","Optional[/**
 * Show the last item
 */
]","\android\widget\AbsListView.java"
"mViewTypeCount","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\AbsListView.java"
"mTouchMode","false","false","false","false","false","int","TOUCH_MODE_REST","[]","Optional[/**
 * One of TOUCH_MODE_REST, TOUCH_MODE_DOWN, TOUCH_MODE_TAP, TOUCH_MODE_SCROLL, or
 * TOUCH_MODE_DONE_WAITING
 */
]","\android\widget\AbsListView.java"
"SCROLL_STATE_FLING","true","false","false","true","false","int","2","[]","Optional[/**
 * The user had previously been scrolling using touch and had performed a fling. The
 * animation is now coasting to a stop
 */
]","\android\widget\AbsListView.java"
"mIsChildViewEnabled","false","false","true","false","false","boolean","null","[]","Optional[/**
 * The select child's view (from the adapter's getView) is enabled.
 */
]","\android\widget\AbsListView.java"
"mDataSetObserver","false","false","false","false","false","AdapterDataSetObserver","null","[]","Optional[/**
 * Should be used by subclasses to listen to changes in the dataset
 */
]","\android\widget\AbsListView.java"
"activity","true","false","false","false","false","Activity","null","[]","Optional.empty","\android\app\Instrumentation.java"
"mComponent","false","false","true","false","false","ComponentName","null","[]","Optional.empty","\android\app\Instrumentation.java"
"mMessageQueue","false","false","true","false","false","MessageQueue","null","[]","Optional.empty","\android\app\Instrumentation.java"
"mLastActivity","false","false","false","false","false","Activity","null","[]","Optional[/*package*/
]","\android\app\Instrumentation.java"
"mSync","false","false","true","false","true","Object","new Object()","[]","Optional.empty","\android\app\Instrumentation.java"
"mTarget","false","false","true","false","true","Runnable","null","[]","Optional.empty","\android\app\Instrumentation.java"
"returnValue","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\app\Instrumentation.java"
"REPORT_KEY_STREAMRESULT","true","false","false","true","true","String","""stream""","[]","Optional[/**
 * If included in the status or final bundle sent to an IInstrumentationWatcher, this key
 * identifies a string which can simply be printed to the output stream.  Using these streams
 * provides a ""pretty printer"" version of the status & final packets.  Any bundles including
 * this key should also include the complete set of raw key/value pairs, so that the
 * instrumentation can also be launched, and results collected, by an automated system.
 */
]","\android\app\Instrumentation.java"
"REPORT_KEY_IDENTIFIER","true","false","false","true","true","String","""id""","[]","Optional[/**
 * If included in the status or final bundle sent to an IInstrumentationWatcher, this key
 * identifies the class that is writing the report.  This can be used to provide more structured
 * logging or reporting capabilities in the IInstrumentationWatcher.
 */
]","\android\app\Instrumentation.java"
"mClass","false","false","true","false","true","String","null","[]","Optional.empty","\android\app\Instrumentation.java"
"mAppContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\app\Instrumentation.java"
"mActivityMonitors","false","false","true","false","false","List<ActivityMonitor>","null","[]","Optional.empty","\android\app\Instrumentation.java"
"identifier","false","false","true","false","true","int","null","[]","Optional.empty","\android\app\Instrumentation.java"
"mPerformanceCollector","false","false","true","false","false","PerformanceCollector","null","[]","Optional.empty","\android\app\Instrumentation.java"
"flags","false","false","true","false","true","int","null","[]","Optional.empty","\android\app\Instrumentation.java"
"mWhich","false","false","true","false","true","IntentFilter","null","[]","Optional.empty","\android\app\Instrumentation.java"
"mResult","false","false","true","false","true","ActivityResult","null","[]","Optional.empty","\android\app\Instrumentation.java"
"mRunner","false","false","true","false","false","Thread","null","[]","Optional.empty","\android\app\Instrumentation.java"
"mCallback","false","false","true","false","true","Runnable","null","[]","Optional.empty","\android\app\Instrumentation.java"
"mHits","false","false","false","false","false","int","0","[]","Optional[/*package*/
]","\android\app\Instrumentation.java"
"TAG","false","false","true","true","true","String","""Instrumentation""","[]","Optional.empty","\android\app\Instrumentation.java"
"mComplete","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\app\Instrumentation.java"
"mThread","false","false","true","false","false","ActivityThread","null","[]","Optional.empty","\android\app\Instrumentation.java"
"mPerfMetrics","false","false","true","false","false","Bundle","new Bundle()","[]","Optional.empty","\android\app\Instrumentation.java"
"mResultData","false","false","true","false","true","Intent","null","[]","Optional.empty","\android\app\Instrumentation.java"
"mWaiter","false","false","true","false","true","ActivityWaiter","null","[]","Optional.empty","\android\app\Instrumentation.java"
"mWaitingActivities","false","false","true","false","false","List<ActivityWaiter>","null","[]","Optional.empty","\android\app\Instrumentation.java"
"mWatcher","false","false","true","false","false","IInstrumentationWatcher","null","[]","Optional.empty","\android\app\Instrumentation.java"
"mIdle","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\app\Instrumentation.java"
"mAutomaticPerformanceSnapshots","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\app\Instrumentation.java"
"mInstrContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\app\Instrumentation.java"
"mResultCode","false","false","true","false","true","int","null","[]","Optional.empty","\android\app\Instrumentation.java"
"intent","true","false","false","false","true","Intent","null","[]","Optional.empty","\android\app\Instrumentation.java"
"mBlock","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\app\Instrumentation.java"
"mMessageBody","false","false","true","false","false","PduBody","null","[]","Optional[/**
 * The body.
 */
]","\com\google\android\mms\pdu\MultimediaMessagePdu.java"
"mContentView","false","false","true","false","false","View","null","[]","Optional.empty","\android\webkit\PluginFullScreenHolder.java"
"mNpp","false","false","true","false","true","int","null","[]","Optional.empty","\android\webkit\PluginFullScreenHolder.java"
"mWebView","false","false","true","false","true","WebView","null","[]","Optional.empty","\android\webkit\PluginFullScreenHolder.java"
"mIsActive","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\view\Window.java"
"PROGRESS_VISIBILITY_ON","true","false","false","true","true","int","-1","[]","Optional[/**
 * Flag for setting the progress bar's visibility to VISIBLE
 */
]","\android\view\Window.java"
"mAppToken","false","false","true","false","false","IBinder","null","[]","Optional.empty","\android\view\Window.java"
"mHasChildren","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\view\Window.java"
"mWindowAttributes","false","false","true","false","true","WindowManager.LayoutParams","new WindowManager.LayoutParams()","[]","Optional[// The current window attributes.
]","\android\view\Window.java"
"PROGRESS_START","true","false","false","true","true","int","0","[]","Optional[/**
 * Starting value for the (primary) progress
 */
]","\android\view\Window.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\android\view\Window.java"
"mHaveWindowFormat","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\view\Window.java"
"mFeatures","false","false","true","false","false","int","DEFAULT_FEATURES","[]","Optional.empty","\android\view\Window.java"
"mForcedWindowFlags","false","false","true","false","false","int","0","[]","Optional.empty","\android\view\Window.java"
"PROGRESS_SECONDARY_END","true","false","false","true","true","int","30000","[]","Optional[/**
 * Highest possible value for the secondary progress
 */
]","\android\view\Window.java"
"PROGRESS_INDETERMINATE_OFF","true","false","false","true","true","int","-4","[]","Optional[/**
 * Flag for setting the progress bar's indeterminate mode off
 */
]","\android\view\Window.java"
"mContainer","false","false","true","false","false","Window","null","[]","Optional.empty","\android\view\Window.java"
"FEATURE_INDETERMINATE_PROGRESS","true","false","false","true","true","int","5","[]","Optional[/**
 * Flag for indeterminate progress
 */
]","\android\view\Window.java"
"FEATURE_LEFT_ICON","true","false","false","true","true","int","3","[]","Optional[/**
 * Flag for having an icon on the left side of the title bar
 */
]","\android\view\Window.java"
"mDefaultDisplay","false","false","true","false","true","Display","null","[]","Optional.empty","\android\view\Window.java"
"FEATURE_NO_TITLE","true","false","false","true","true","int","1","[]","Optional[/**
 * Flag for the ""no title"" feature, turning off the title at the top
 * of the screen.
 */
]","\android\view\Window.java"
"FEATURE_PROGRESS","true","false","false","true","true","int","2","[]","Optional[/**
 * Flag for the progress indicator feature
 */
]","\android\view\Window.java"
"PROGRESS_VISIBILITY_OFF","true","false","false","true","true","int","-2","[]","Optional[/**
 * Flag for setting the progress bar's visibility to GONE
 */
]","\android\view\Window.java"
"ID_ANDROID_CONTENT","true","false","false","true","true","int","com.android.internal.R.id.content","[]","Optional[/**
 * The ID that the main layout in the XML layout file should have.
 */
]","\android\view\Window.java"
"mActiveChild","false","false","true","false","false","Window","null","[]","Optional.empty","\android\view\Window.java"
"mDefaultWindowFormat","false","false","true","false","false","int","PixelFormat.OPAQUE","[]","Optional.empty","\android\view\Window.java"
"mWindowManager","false","false","true","false","true","WindowManager","null","[]","Optional.empty","\android\view\Window.java"
"FEATURE_OPTIONS_PANEL","true","false","false","true","true","int","0","[]","Optional[/**
 * Flag for the ""options panel"" feature.  This is enabled by default.
 */
]","\android\view\Window.java"
"PROGRESS_INDETERMINATE_ON","true","false","false","true","true","int","-3","[]","Optional[/**
 * Flag for setting the progress bar's indeterminate mode on
 */
]","\android\view\Window.java"
"PROGRESS_END","true","false","false","true","true","int","10000","[]","Optional[/**
 * Ending value for the (primary) progress
 */
]","\android\view\Window.java"
"FEATURE_CONTEXT_MENU","true","false","false","true","true","int","6","[]","Optional[/**
 * Flag for the context menu.  This is enabled by default.
 */
]","\android\view\Window.java"
"mLocalFeatures","false","false","true","false","false","int","DEFAULT_FEATURES","[]","Optional.empty","\android\view\Window.java"
"PROGRESS_SECONDARY_START","true","false","false","true","true","int","20000","[]","Optional[/**
 * Lowest possible value for the secondary progress
 */
]","\android\view\Window.java"
"mCallback","false","false","true","false","false","Callback","null","[]","Optional.empty","\android\view\Window.java"
"mWindowStyle","false","false","true","false","false","TypedArray","null","[]","Optional.empty","\android\view\Window.java"
"mHasSoftInputMode","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\view\Window.java"
"FEATURE_OPENGL","true","false","false","true","true","int","8","[]","Optional[/**
 * Flag for asking for an OpenGL enabled window.
 * All 2D graphics will be handled by OpenGL ES.
 * @hide
 */
]","\android\view\Window.java"
"mAppName","false","false","true","false","false","String","null","[]","Optional.empty","\android\view\Window.java"
"DEFAULT_FEATURES","false","true","false","true","true","int","(1 << FEATURE_OPTIONS_PANEL) | (1 << FEATURE_CONTEXT_MENU)","[@SuppressWarnings({ ""PointlessBitwiseExpression"" })]","Optional[/**
 * The default features enabled
 */
]","\android\view\Window.java"
"FEATURE_RIGHT_ICON","true","false","false","true","true","int","4","[]","Optional[/**
 * Flag for having an icon on the right side of the title bar
 */
]","\android\view\Window.java"
"FEATURE_CUSTOM_TITLE","true","false","false","true","true","int","7","[]","Optional[/**
 * Flag for custom title. You cannot combine this feature with other title features.
 */
]","\android\view\Window.java"
"mUnselectedAlpha","false","false","true","false","false","float","null","[]","Optional[/**
 * The alpha of items that are not selected.
 */
]","\android\widget\Gallery.java"
"mContextMenuInfo","false","false","true","false","false","AdapterContextMenuInfo","null","[]","Optional.empty","\android\widget\Gallery.java"
"mSuppressSelectionChanged","false","false","true","false","false","boolean","null","[]","Optional[/**
 * If true, do not callback to item selected listener.
 */
]","\android\widget\Gallery.java"
"mScroller","false","false","true","false","false","Scroller","null","[]","Optional[/**
 * Tracks the decay of a fling scroll
 */
]","\android\widget\Gallery.java"
"mLeftMost","false","false","true","false","false","int","null","[]","Optional[/**
 * Left most edge of a child seen so far during layout.
 */
]","\android\widget\Gallery.java"
"mShouldCallbackOnUnselectedItemClick","false","false","true","false","false","boolean","true","[]","Optional[/**
 * Whether to callback when an item that is not selected is clicked.
 */
]","\android\widget\Gallery.java"
"mIsFirstScroll","false","false","true","false","false","boolean","null","[]","Optional[/**
 * If true, this onScroll is the first for this user's drag (remember, a
 * drag sends many onScrolls).
 */
]","\android\widget\Gallery.java"
"mAnimationDuration","false","false","true","false","false","int","400","[]","Optional[/**
 * How long the transition animation should run when a child view changes
 * position, measured in milliseconds.
 */
]","\android\widget\Gallery.java"
"mDownTouchPosition","false","false","true","false","false","int","null","[]","Optional[/**
 * The position of the item that received the user's down touch.
 */
]","\android\widget\Gallery.java"
"mRightMost","false","false","true","false","false","int","null","[]","Optional[/**
 * Right most edge of a child seen so far during layout.
 */
]","\android\widget\Gallery.java"
"mSpacing","false","false","true","false","false","int","0","[]","Optional[/**
 * Horizontal spacing between items.
 */
]","\android\widget\Gallery.java"
"mFlingRunnable","false","false","true","false","false","FlingRunnable","new FlingRunnable()","[]","Optional[/**
 * Executes the delta scrolls from a fling or scroll movement.
 */
]","\android\widget\Gallery.java"
"mGestureDetector","false","false","true","false","false","GestureDetector","null","[]","Optional[/**
 * Helper for detecting touch gestures.
 */
]","\android\widget\Gallery.java"
"mShouldStopFling","false","false","true","false","false","boolean","null","[]","Optional[/**
 * When fling runnable runs, it resets this to false. Any method along the
 * path until the end of its run() can set this to true to abort any
 * remaining fling. For example, if we've reached either the leftmost or
 * rightmost item, we will set this to true.
 */
]","\android\widget\Gallery.java"
"mReceivedInvokeKeyDown","false","false","true","false","false","boolean","null","[]","Optional[/**
 * If true, we have received the ""invoke"" (center or enter buttons) key
 * down. This is checked before we action on the ""invoke"" key up, and is
 * subsequently cleared.
 */
]","\android\widget\Gallery.java"
"mShouldCallbackDuringFling","false","false","true","false","false","boolean","true","[]","Optional[/**
 * Whether to continuously callback on the item selected listener during a
 * fling.
 */
]","\android\widget\Gallery.java"
"TAG","false","false","true","true","true","String","""Gallery""","[]","Optional.empty","\android\widget\Gallery.java"
"mDisableSuppressSelectionChangedRunnable","false","false","true","false","false","Runnable","new Runnable() {

    public void run() {
        mSuppressSelectionChanged = false;
        selectionChanged();
    }
}","[]","Optional[/**
 * Sets mSuppressSelectionChanged = false. This is used to set it to false
 * in the future. It will also trigger a selection changed.
 */
]","\android\widget\Gallery.java"
"mSelectedChild","false","false","true","false","false","View","null","[]","Optional[/**
 * The currently selected item's child.
 */
]","\android\widget\Gallery.java"
"localLOGV","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\widget\Gallery.java"
"SCROLL_TO_FLING_UNCERTAINTY_TIMEOUT","false","false","true","true","true","int","250","[]","Optional[/**
 * Duration in milliseconds from the start of a scroll during which we're
 * unsure whether the user is scrolling or flinging.
 */
]","\android\widget\Gallery.java"
"mLastFlingX","false","false","true","false","false","int","null","[]","Optional[/**
 * X value reported by mScroller on the previous fling
 */
]","\android\widget\Gallery.java"
"mDownTouchView","false","false","true","false","false","View","null","[]","Optional[/**
 * The view of the item that received the user's down touch.
 */
]","\android\widget\Gallery.java"
"mGravity","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\Gallery.java"
"DO_CLEAR_META_KEY_STATES","false","false","true","true","true","int","130","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"mMainLooper","false","false","true","false","false","Looper","null","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"DO_BEGIN_BATCH_EDIT","false","false","true","true","true","int","90","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"DO_GET_EXTRACTED_TEXT","false","false","true","true","true","int","40","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"DO_COMMIT_COMPLETION","false","false","true","true","true","int","55","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"DO_FINISH_COMPOSING_TEXT","false","false","true","true","true","int","65","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"DO_PERFORM_PRIVATE_COMMAND","false","false","true","true","true","int","120","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"seq","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"DO_SET_COMPOSING_REGION","false","false","true","true","true","int","63","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"arg2","false","false","false","false","false","Object","null","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"arg1","false","false","false","false","false","Object","null","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"DO_GET_TEXT_AFTER_CURSOR","false","false","true","true","true","int","10","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"DO_END_BATCH_EDIT","false","false","true","true","true","int","95","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"DO_SET_SELECTION","false","false","true","true","true","int","57","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"DO_SET_COMPOSING_TEXT","false","false","true","true","true","int","60","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"DO_GET_TEXT_BEFORE_CURSOR","false","false","true","true","true","int","20","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"DO_PERFORM_EDITOR_ACTION","false","false","true","true","true","int","58","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"DO_DELETE_SURROUNDING_TEXT","false","false","true","true","true","int","80","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"DO_GET_CURSOR_CAPS_MODE","false","false","true","true","true","int","30","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"DO_SEND_KEY_EVENT","false","false","true","true","true","int","70","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"TAG","false","false","false","true","true","String","""IInputConnectionWrapper""","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"mH","false","false","true","false","false","Handler","null","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"DO_GET_SELECTED_TEXT","false","false","true","true","true","int","25","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"DO_REPORT_FULLSCREEN_MODE","false","false","true","true","true","int","100","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"mInputConnection","false","false","true","false","false","WeakReference<InputConnection>","null","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"DO_PERFORM_CONTEXT_MENU_ACTION","false","false","true","true","true","int","59","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"DO_COMMIT_TEXT","false","false","true","true","true","int","50","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"callback","false","false","false","false","false","IInputContextCallback","null","[]","Optional.empty","\com\android\internal\view\IInputConnectionWrapper.java"
"ERROR_INVALID_PARAM","true","false","false","true","true","int","-8","[]","Optional.empty","\android\nfc\ErrorCodes.java"
"ERROR_NFC_ON","true","false","false","true","true","int","-16","[]","Optional.empty","\android\nfc\ErrorCodes.java"
"ERROR_SOCKET_NOT_CONNECTED","true","false","false","true","true","int","-11","[]","Optional.empty","\android\nfc\ErrorCodes.java"
"ERROR_CANCELLED","true","false","false","true","true","int","-2","[]","Optional.empty","\android\nfc\ErrorCodes.java"
"SUCCESS","true","false","false","true","true","int","0","[]","Optional.empty","\android\nfc\ErrorCodes.java"
"ERROR_SE_ALREADY_SELECTED","true","false","false","true","true","int","-18","[]","Optional.empty","\android\nfc\ErrorCodes.java"
"ERROR_NO_SE_CONNECTED","true","false","false","true","true","int","-20","[]","Optional.empty","\android\nfc\ErrorCodes.java"
"ERROR_NOT_INITIALIZED","true","false","false","true","true","int","-17","[]","Optional.empty","\android\nfc\ErrorCodes.java"
"ERROR_SOCKET_OPTIONS","true","false","false","true","true","int","-15","[]","Optional.empty","\android\nfc\ErrorCodes.java"
"ERROR_SOCKET_CREATION","true","false","false","true","true","int","-10","[]","Optional.empty","\android\nfc\ErrorCodes.java"
"ERROR_BUFFER_TO_SMALL","true","false","false","true","true","int","-12","[]","Optional.empty","\android\nfc\ErrorCodes.java"
"ERROR_TIMEOUT","true","false","false","true","true","int","-3","[]","Optional.empty","\android\nfc\ErrorCodes.java"
"ERROR_WRITE","true","false","false","true","true","int","-7","[]","Optional.empty","\android\nfc\ErrorCodes.java"
"ERROR_IO","true","false","false","true","true","int","-1","[]","Optional.empty","\android\nfc\ErrorCodes.java"
"ERROR_DISCONNECT","true","false","false","true","true","int","-5","[]","Optional.empty","\android\nfc\ErrorCodes.java"
"ERROR_SAP_USED","true","false","false","true","true","int","-13","[]","Optional.empty","\android\nfc\ErrorCodes.java"
"ERROR_SERVICE_NAME_USED","true","false","false","true","true","int","-14","[]","Optional.empty","\android\nfc\ErrorCodes.java"
"ERROR_CONNECT","true","false","false","true","true","int","-5","[]","Optional.empty","\android\nfc\ErrorCodes.java"
"ERROR_INSUFFICIENT_RESOURCES","true","false","false","true","true","int","-9","[]","Optional.empty","\android\nfc\ErrorCodes.java"
"ERROR_READ","true","false","false","true","true","int","-6","[]","Optional.empty","\android\nfc\ErrorCodes.java"
"ERROR_SE_CONNECTED","true","false","false","true","true","int","-19","[]","Optional.empty","\android\nfc\ErrorCodes.java"
"ERROR_BUSY","true","false","false","true","true","int","-4","[]","Optional.empty","\android\nfc\ErrorCodes.java"
"FLAG_WAKE","true","false","false","true","true","int","0x00000001","[]","Optional[// Policy flags.  These flags are also defined in frameworks/base/include/ui/Input.h.
]","\android\view\WindowManagerPolicy.java"
"TRANSIT_WALLPAPER_INTRA_OPEN","true","false","false","false","true","int","14 | TRANSIT_ENTER_MASK","[]","Optional[/**
 * A window in a new activity is being opened on top of an existing one,
 * and both are on top of the wallpaper.
 */
]","\android\view\WindowManagerPolicy.java"
"FINISH_LAYOUT_REDO_LAYOUT","false","false","false","true","true","int","0x0001","[]","Optional[/**
 * Layout state may have changed (so another layout will be performed)
 */
]","\android\view\WindowManagerPolicy.java"
"ACTION_POKE_USER_ACTIVITY","true","false","false","true","true","int","0x00000002","[]","Optional[/**
 * This key event should extend the user activity timeout and turn the lights on.
 * To be returned from {@link #interceptKeyTq}. Do not return this and
 * {@link #ACTION_GO_TO_SLEEP} or {@link #ACTION_PASS_TO_USER}.
 */
]","\android\view\WindowManagerPolicy.java"
"FLAG_VIRTUAL","true","false","false","true","true","int","0x00000100","[]","Optional.empty","\android\view\WindowManagerPolicy.java"
"FLAG_LAUNCHER","true","false","false","true","true","int","0x00000080","[]","Optional.empty","\android\view\WindowManagerPolicy.java"
"TRANSIT_TASK_TO_BACK","true","false","false","false","true","int","11 | TRANSIT_EXIT_MASK","[]","Optional[/**
 * A window in an existing task is being put below all other tasks.
 */
]","\android\view\WindowManagerPolicy.java"
"FLAG_ALT_GR","true","false","false","true","true","int","0x00000020","[]","Optional.empty","\android\view\WindowManagerPolicy.java"
"TRANSIT_ENTER_MASK","true","false","false","false","true","int","0x1000","[]","Optional[/**
 * Bit mask that is set for all enter transition.
 */
]","\android\view\WindowManagerPolicy.java"
"FLAG_WOKE_HERE","true","false","false","true","true","int","0x10000000","[]","Optional.empty","\android\view\WindowManagerPolicy.java"
"TRANSIT_ENTER","true","false","false","false","true","int","1 | TRANSIT_ENTER_MASK","[]","Optional[/**
 * Window has been added to the screen.
 */
]","\android\view\WindowManagerPolicy.java"
"TRANSIT_EXIT_MASK","true","false","false","false","true","int","0x2000","[]","Optional[/**
 * Bit mask that is set for all exit transitions.
 */
]","\android\view\WindowManagerPolicy.java"
"FINISH_LAYOUT_REDO_ANIM","false","false","false","true","true","int","0x0008","[]","Optional[/**
 * Need to recompute animations
 */
]","\android\view\WindowManagerPolicy.java"
"ACTION_GO_TO_SLEEP","true","false","false","true","true","int","0x00000004","[]","Optional[/**
 * This key event should put the device to sleep (and engage keyguard if necessary)
 * To be returned from {@link #interceptKeyTq}.  Do not return this and
 * {@link #ACTION_POKE_USER_ACTIVITY} or {@link #ACTION_PASS_TO_USER}.
 */
]","\android\view\WindowManagerPolicy.java"
"FLAG_INJECTED","true","false","false","true","true","int","0x01000000","[]","Optional.empty","\android\view\WindowManagerPolicy.java"
"TRANSIT_PREVIEW_DONE","true","false","false","false","true","int","5","[]","Optional[/**
 * The ""application starting"" preview window is no longer needed, and will
 * animate away to show the real window.
 */
]","\android\view\WindowManagerPolicy.java"
"TRANSIT_ACTIVITY_OPEN","true","false","false","false","true","int","6 | TRANSIT_ENTER_MASK","[]","Optional[/**
 * A window in a new activity is being opened on top of an existing one
 * in the same task.
 */
]","\android\view\WindowManagerPolicy.java"
"TRANSIT_ACTIVITY_CLOSE","true","false","false","false","true","int","7 | TRANSIT_EXIT_MASK","[]","Optional[/**
 * The window in the top-most activity is being closed to reveal the
 * previous activity in the same task.
 */
]","\android\view\WindowManagerPolicy.java"
"FLAG_MENU","true","false","false","true","true","int","0x00000040","[]","Optional.empty","\android\view\WindowManagerPolicy.java"
"FLAG_WAKE_DROPPED","true","false","false","true","true","int","0x00000002","[]","Optional.empty","\android\view\WindowManagerPolicy.java"
"FLAG_ALT","true","false","false","true","true","int","0x00000010","[]","Optional.empty","\android\view\WindowManagerPolicy.java"
"OFF_BECAUSE_OF_ADMIN","true","false","false","false","true","int","1","[]","Optional[/**
 * Screen turned off because of a device admin
 */
]","\android\view\WindowManagerPolicy.java"
"FLAG_SHIFT","true","false","false","true","true","int","0x00000004","[]","Optional.empty","\android\view\WindowManagerPolicy.java"
"TRANSIT_WALLPAPER_INTRA_CLOSE","true","false","false","false","true","int","15 | TRANSIT_EXIT_MASK","[]","Optional[/**
 * The window in the top-most activity is being closed to reveal the
 * previous activity, and both are on top of he wallpaper.
 */
]","\android\view\WindowManagerPolicy.java"
"TRANSIT_TASK_OPEN","true","false","false","false","true","int","8 | TRANSIT_ENTER_MASK","[]","Optional[/**
 * A window in a new task is being opened on top of an existing one
 * in another activity's task.
 */
]","\android\view\WindowManagerPolicy.java"
"WATCH_POINTER","true","false","false","true","true","boolean","false","[]","Optional.empty","\android\view\WindowManagerPolicy.java"
"USE_LAST_ROTATION","true","false","false","false","true","int","-1000","[]","Optional[/**
 * Magic constant to {@link IWindowManager#setRotation} to not actually
 * modify the rotation.
 */
]","\android\view\WindowManagerPolicy.java"
"TRANSIT_HIDE","true","false","false","false","true","int","4 | TRANSIT_EXIT_MASK","[]","Optional[/**
 * Window has been made invisible.
 */
]","\android\view\WindowManagerPolicy.java"
"TRANSIT_NONE","true","false","false","false","true","int","0","[]","Optional[/**
 * No animation for transition.
 */
]","\android\view\WindowManagerPolicy.java"
"FLAG_BRIGHT_HERE","true","false","false","true","true","int","0x20000000","[]","Optional.empty","\android\view\WindowManagerPolicy.java"
"TRANSIT_UNSET","true","false","false","false","true","int","-1","[]","Optional[/**
 * Not set up for a transition.
 */
]","\android\view\WindowManagerPolicy.java"
"TRANSIT_EXIT","true","false","false","false","true","int","2 | TRANSIT_EXIT_MASK","[]","Optional[/**
 * Window has been removed from the screen.
 */
]","\android\view\WindowManagerPolicy.java"
"TRANSIT_SHOW","true","false","false","false","true","int","3 | TRANSIT_ENTER_MASK","[]","Optional[/**
 * Window has been made visible.
 */
]","\android\view\WindowManagerPolicy.java"
"OFF_BECAUSE_OF_PROX_SENSOR","true","false","false","false","true","int","4","[]","Optional[/**
 * Screen turned off because of proximity sensor
 */
]","\android\view\WindowManagerPolicy.java"
"OFF_BECAUSE_OF_USER","true","false","false","false","true","int","2","[]","Optional[/**
 * Screen turned off because of power button
 */
]","\android\view\WindowManagerPolicy.java"
"FINISH_LAYOUT_REDO_CONFIG","false","false","false","true","true","int","0x0002","[]","Optional[/**
 * Configuration state may have changed
 */
]","\android\view\WindowManagerPolicy.java"
"TRANSIT_WALLPAPER_OPEN","true","false","false","false","true","int","13 | TRANSIT_ENTER_MASK","[]","Optional[/**
 * A window in a new activity that does have a wallpaper is being
 * opened on one that didn't, effectively opening the wallpaper.
 */
]","\android\view\WindowManagerPolicy.java"
"FLAG_PASS_TO_USER","true","false","false","true","true","int","0x40000000","[]","Optional.empty","\android\view\WindowManagerPolicy.java"
"FINISH_LAYOUT_REDO_WALLPAPER","false","false","false","true","true","int","0x0004","[]","Optional[/**
 * Wallpaper may need to move
 */
]","\android\view\WindowManagerPolicy.java"
"ACTION_PASS_TO_USER","true","false","false","true","true","int","0x00000001","[]","Optional[/**
 * Pass this event to the user / app.  To be returned from {@link #interceptKeyTq}.
 */
]","\android\view\WindowManagerPolicy.java"
"TRANSIT_TASK_TO_FRONT","true","false","false","false","true","int","10 | TRANSIT_ENTER_MASK","[]","Optional[/**
 * A window in an existing task is being displayed on top of an existing one
 * in another activity's task.
 */
]","\android\view\WindowManagerPolicy.java"
"TRANSIT_TASK_CLOSE","true","false","false","false","true","int","9 | TRANSIT_EXIT_MASK","[]","Optional[/**
 * A window in the top-most activity is being closed to reveal the
 * previous activity in a different task.
 */
]","\android\view\WindowManagerPolicy.java"
"OFF_BECAUSE_OF_TIMEOUT","true","false","false","false","true","int","3","[]","Optional[/**
 * Screen turned off because of timeout
 */
]","\android\view\WindowManagerPolicy.java"
"FLAG_CAPS_LOCK","true","false","false","true","true","int","0x00000008","[]","Optional.empty","\android\view\WindowManagerPolicy.java"
"FLAG_TRUSTED","true","false","false","true","true","int","0x02000000","[]","Optional.empty","\android\view\WindowManagerPolicy.java"
"TRANSIT_WALLPAPER_CLOSE","true","false","false","false","true","int","12 | TRANSIT_EXIT_MASK","[]","Optional[/**
 * A window in a new activity that doesn't have a wallpaper is being
 * opened on top of one that does, effectively closing the wallpaper.
 */
]","\android\view\WindowManagerPolicy.java"
"mLock","false","false","true","false","false","Object","new Object()","[]","Optional.empty","\android\database\sqlite\SQLiteClosable.java"
"mReferenceCount","false","false","true","false","false","int","1","[]","Optional.empty","\android\database\sqlite\SQLiteClosable.java"
"SIP_SERVICE","true","false","false","true","true","String","""sip""","[]","Optional[/**
 * @hide
 */
]","\android\content\Context.java"
"DEVICE_POLICY_SERVICE","true","false","false","true","true","String","""device_policy""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a
 * {@link android.app.admin.DevicePolicyManager} for working with global
 * device policy management.
 *
 * @see #getSystemService
 */
]","\android\content\Context.java"
"ACCOUNT_SERVICE","true","false","false","true","true","String","""account""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a
 * {@link android.accounts.AccountManager} for receiving intents at a
 * time of your choosing.
 *
 * @see #getSystemService
 * @see android.accounts.AccountManager
 */
]","\android\content\Context.java"
"BIND_NOT_FOREGROUND","true","false","false","true","true","int","0x0004","[]","Optional[/**
 * Flag for {@link #bindService}: don't allow this binding to raise
 * the target service's process to the foreground scheduling priority.
 * It will still be raised to the at least the same memory priority
 * as the client (so that its process will not be killable in any
 * situation where the client is not killable), but for CPU scheduling
 * purposes it may be left in the background.  This only has an impact
 * in the situation where the binding client is a foreground process
 * and the target service is in a background process.
 */
]","\android\content\Context.java"
"APPWIDGET_SERVICE","true","false","false","true","true","String","""appwidget""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a
 * {@link android.appwidget.AppWidgetManager} for accessing AppWidgets.
 *
 * @hide
 * @see #getSystemService
 */
]","\android\content\Context.java"
"DOWNLOAD_SERVICE","true","false","false","true","true","String","""download""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a
 * {@link android.app.DownloadManager} for requesting HTTP downloads.
 *
 * @see #getSystemService
 */
]","\android\content\Context.java"
"ACTIVITY_SERVICE","true","false","false","true","true","String","""activity""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a
 * {@link android.app.ActivityManager} for interacting with the global
 * system state.
 *
 * @see #getSystemService
 * @see android.app.ActivityManager
 */
]","\android\content\Context.java"
"CONNECTIVITY_SERVICE","true","false","false","true","true","String","""connectivity""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a {@link
 * android.net.ConnectivityManager} for handling management of
 * network connections.
 *
 * @see #getSystemService
 * @see android.net.ConnectivityManager
 */
]","\android\content\Context.java"
"TELEPHONY_SERVICE","true","false","false","true","true","String","""phone""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a
 * {@link android.telephony.TelephonyManager} for handling management the
 * telephony features of the device.
 *
 * @see #getSystemService
 * @see android.telephony.TelephonyManager
 */
]","\android\content\Context.java"
"STORAGE_SERVICE","true","false","false","true","true","String","""storage""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a {@link
 * android.os.storage.StorageManager} for accessing system storage
 * functions.
 *
 * @see #getSystemService
 * @see android.os.storage.StorageManager
 */
]","\android\content\Context.java"
"NETWORKMANAGEMENT_SERVICE","true","false","false","true","true","String","""network_management""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a {@link
 * android.net.NetworkManagementService} for handling management of
 * system network services
 *
 * @hide
 * @see #getSystemService
 * @see android.net.NetworkManagementService
 */
]","\android\content\Context.java"
"UI_MODE_SERVICE","true","false","false","true","true","String","""uimode""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a
 * {@link android.app.UiModeManager} for controlling UI modes.
 *
 * @see #getSystemService
 */
]","\android\content\Context.java"
"ACCESSIBILITY_SERVICE","true","false","false","true","true","String","""accessibility""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a
 * {@link android.view.accessibility.AccessibilityManager} for giving the user
 * feedback for UI events through the registered event listeners.
 *
 * @see #getSystemService
 * @see android.view.accessibility.AccessibilityManager
 */
]","\android\content\Context.java"
"CONTEXT_RESTRICTED","true","false","false","true","true","int","0x00000004","[]","Optional[/**
 * Flag for use with {@link #createPackageContext}: a restricted context may
 * disable specific features. For instance, a View associated with a restricted
 * context would ignore particular XML attributes.
 */
]","\android\content\Context.java"
"MODE_WORLD_WRITEABLE","true","false","false","true","true","int","0x0002","[]","Optional[/**
 * File creation mode: allow all other applications to have write access
 * to the created file.
 * @see #MODE_PRIVATE
 * @see #MODE_WORLD_READABLE
 */
]","\android\content\Context.java"
"MODE_WORLD_READABLE","true","false","false","true","true","int","0x0001","[]","Optional[/**
 * File creation mode: allow all other applications to have read access
 * to the created file.
 * @see #MODE_PRIVATE
 * @see #MODE_WORLD_WRITEABLE
 */
]","\android\content\Context.java"
"AUDIO_SERVICE","true","false","false","true","true","String","""audio""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a
 * {@link android.media.AudioManager} for handling management of volume,
 * ringer modes and audio routing.
 *
 * @see #getSystemService
 * @see android.media.AudioManager
 */
]","\android\content\Context.java"
"WIFI_SERVICE","true","false","false","true","true","String","""wifi""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a {@link
 * android.net.wifi.WifiManager} for handling management of
 * Wi-Fi access.
 *
 * @see #getSystemService
 * @see android.net.wifi.WifiManager
 */
]","\android\content\Context.java"
"LAYOUT_INFLATER_SERVICE","true","false","false","true","true","String","""layout_inflater""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a
 * {@link android.view.LayoutInflater} for inflating layout resources in this
 * context.
 *
 * @see #getSystemService
 * @see android.view.LayoutInflater
 */
]","\android\content\Context.java"
"NFC_SERVICE","true","false","false","true","true","String","""nfc""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a
 * {@link android.nfc.NfcManager} for using NFC.
 *
 * @see #getSystemService
 */
]","\android\content\Context.java"
"THROTTLE_SERVICE","true","false","false","true","true","String","""throttle""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a {@link
 * android.net.ThrottleManager} for handling management of
 * throttling.
 *
 * @hide
 * @see #getSystemService
 * @see android.net.ThrottleManager
 */
]","\android\content\Context.java"
"BIND_AUTO_CREATE","true","false","false","true","true","int","0x0001","[]","Optional[/**
 * Flag for {@link #bindService}: automatically create the service as long
 * as the binding exists.  Note that while this will create the service,
 * its {@link android.app.Service#onStartCommand}
 * method will still only be called due to an
 * explicit call to {@link #startService}.  Even without that, though,
 * this still provides you with access to the service object while the
 * service is created.
 *
 * <p>Specifying this flag also tells the system to treat the service
 * as being as important as your own process -- that is, when deciding
 * which process should be killed to free memory, the service will only
 * be considered a candidate as long as the processes of any such bindings
 * is also a candidate to be killed.  This is to avoid situations where
 * the service is being continually created and killed due to low memory.
 */
]","\android\content\Context.java"
"CONTEXT_INCLUDE_CODE","true","false","false","true","true","int","0x00000001","[]","Optional[/**
 * Flag for use with {@link #createPackageContext}: include the application
 * code with the context.  This means loading code into the caller's
 * process, so that {@link #getClassLoader()} can be used to instantiate
 * the application's classes.  Setting this flags imposes security
 * restrictions on what application context you can access; if the
 * requested application can not be safely loaded into your process,
 * java.lang.SecurityException will be thrown.  If this flag is not set,
 * there will be no restrictions on the packages that can be loaded,
 * but {@link #getClassLoader} will always return the default system
 * class loader.
 */
]","\android\content\Context.java"
"NOTIFICATION_SERVICE","true","false","false","true","true","String","""notification""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a
 * {@link android.app.NotificationManager} for informing the user of
 * background events.
 *
 * @see #getSystemService
 * @see android.app.NotificationManager
 */
]","\android\content\Context.java"
"POWER_SERVICE","true","false","false","true","true","String","""power""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a
 * {@link android.os.PowerManager} for controlling power management,
 * including ""wake locks,"" which let you keep the device on while
 * you're running long tasks.
 */
]","\android\content\Context.java"
"LOCATION_SERVICE","true","false","false","true","true","String","""location""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a {@link
 * android.location.LocationManager} for controlling location
 * updates.
 *
 * @see #getSystemService
 * @see android.location.LocationManager
 */
]","\android\content\Context.java"
"INPUT_METHOD_SERVICE","true","false","false","true","true","String","""input_method""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a
 * {@link android.view.inputmethod.InputMethodManager} for accessing input
 * methods.
 *
 * @see #getSystemService
 */
]","\android\content\Context.java"
"MODE_APPEND","true","false","false","true","true","int","0x8000","[]","Optional[/**
 * File creation mode: for use with {@link #openFileOutput}, if the file
 * already exists then write data to the end of the existing file
 * instead of erasing it.
 * @see #openFileOutput
 */
]","\android\content\Context.java"
"BIND_DEBUG_UNBIND","true","false","false","true","true","int","0x0002","[]","Optional[/**
 * Flag for {@link #bindService}: include debugging help for mismatched
 * calls to unbind.  When this flag is set, the callstack of the following
 * {@link #unbindService} call is retained, to be printed if a later
 * incorrect unbind call is made.  Note that doing this requires retaining
 * information about the binding that was made for the lifetime of the app,
 * resulting in a leak -- this should only be used for debugging.
 */
]","\android\content\Context.java"
"CONTEXT_IGNORE_SECURITY","true","false","false","true","true","int","0x00000002","[]","Optional[/**
 * Flag for use with {@link #createPackageContext}: ignore any security
 * restrictions on the Context being requested, allowing it to always
 * be loaded.  For use with {@link #CONTEXT_INCLUDE_CODE} to allow code
 * to be loaded into a process even when it isn't safe to do so.  Use
 * with extreme care!
 */
]","\android\content\Context.java"
"STATUS_BAR_SERVICE","true","false","false","true","true","String","""statusbar""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a {@link
 * android.app.StatusBarManager} for interacting with the status bar.
 *
 * @see #getSystemService
 * @see android.app.StatusBarManager
 * @hide
 */
]","\android\content\Context.java"
"ALARM_SERVICE","true","false","false","true","true","String","""alarm""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a
 * {@link android.app.AlarmManager} for receiving intents at a
 * time of your choosing.
 *
 * @see #getSystemService
 * @see android.app.AlarmManager
 */
]","\android\content\Context.java"
"KEYGUARD_SERVICE","true","false","false","true","true","String","""keyguard""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a
 * {@link android.app.NotificationManager} for controlling keyguard.
 *
 * @see #getSystemService
 * @see android.app.KeyguardManager
 */
]","\android\content\Context.java"
"BACKUP_SERVICE","true","false","false","true","true","String","""backup""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve an
 * {@link android.app.backup.IBackupManager IBackupManager} for communicating
 * with the backup mechanism.
 * @hide
 *
 * @see #getSystemService
 */
]","\android\content\Context.java"
"SEARCH_SERVICE","true","false","false","true","true","String","""search""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a {@link
 * android.app.SearchManager} for handling searches.
 *
 * @see #getSystemService
 * @see android.app.SearchManager
 */
]","\android\content\Context.java"
"MODE_PRIVATE","true","false","false","true","true","int","0x0000","[]","Optional[/**
 * File creation mode: the default mode, where the created file can only
 * be accessed by the calling application (or all applications sharing the
 * same user ID).
 * @see #MODE_WORLD_READABLE
 * @see #MODE_WORLD_WRITEABLE
 */
]","\android\content\Context.java"
"WINDOW_SERVICE","true","false","false","true","true","String","""window""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a
 * {@link android.view.WindowManager} for accessing the system's window
 * manager.
 *
 * @see #getSystemService
 * @see android.view.WindowManager
 */
]","\android\content\Context.java"
"CLIPBOARD_SERVICE","true","false","false","true","true","String","""clipboard""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a
 * {@link android.text.ClipboardManager} for accessing and modifying
 * the contents of the global clipboard.
 *
 * @see #getSystemService
 * @see android.text.ClipboardManager
 */
]","\android\content\Context.java"
"VIBRATOR_SERVICE","true","false","false","true","true","String","""vibrator""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a {@link
 * android.os.Vibrator} for interacting with the vibration hardware.
 *
 * @see #getSystemService
 * @see android.os.Vibrator
 */
]","\android\content\Context.java"
"WALLPAPER_SERVICE","true","false","false","true","true","String","""wallpaper""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a
 * com.android.server.WallpaperService for accessing wallpapers.
 *
 * @see #getSystemService
 */
]","\android\content\Context.java"
"SENSOR_SERVICE","true","false","false","true","true","String","""sensor""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a {@link
 * android.hardware.SensorManager} for accessing sensors.
 *
 * @see #getSystemService
 * @see android.hardware.SensorManager
 */
]","\android\content\Context.java"
"DROPBOX_SERVICE","true","false","false","true","true","String","""dropbox""","[]","Optional[/**
 * Use with {@link #getSystemService} to retrieve a
 * {@link android.os.DropBoxManager} instance for recording
 * diagnostic logs.
 * @see #getSystemService
 */
]","\android\content\Context.java"
"ACCOUNT_TYPE","true","false","false","true","true","String","""account_type""","[]","Optional[/**
 * A reference to the type of the account to which this data belongs
 * <P>Type: STRING</P>
 */
]","\android\provider\SyncStateContract.java"
"DATA_PROJECTION","false","false","true","true","true","String","new String[] { Columns.DATA, Columns._ID }","[]","Optional.empty","\android\provider\SyncStateContract.java"
"CONTENT_DIRECTORY","true","false","false","true","true","String","""syncstate""","[]","Optional.empty","\android\provider\SyncStateContract.java"
"ACCOUNT_NAME","true","false","false","true","true","String","""account_name""","[]","Optional[/**
 * A reference to the name of the account to which this data belongs
 * <P>Type: STRING</P>
 */
]","\android\provider\SyncStateContract.java"
"DATA","true","false","false","true","true","String","""data""","[]","Optional[/**
 * The sync data associated with this account.
 * <P>Type: NONE</P>
 */
]","\android\provider\SyncStateContract.java"
"SELECT_BY_ACCOUNT","false","false","true","true","true","String","Columns.ACCOUNT_NAME + ""=? AND "" + Columns.ACCOUNT_TYPE + ""=?""","[]","Optional.empty","\android\provider\SyncStateContract.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<ObbInfo>","new Parcelable.Creator<ObbInfo>() {

    public ObbInfo createFromParcel(Parcel source) {
        return new ObbInfo(source);
    }

    public ObbInfo[] newArray(int size) {
        return new ObbInfo[size];
    }
}","[]","Optional.empty","\android\content\res\ObbInfo.java"
"version","true","false","false","false","false","int","null","[]","Optional[/**
 * The version of the package to which the OBB file belongs.
 */
]","\android\content\res\ObbInfo.java"
"filename","true","false","false","false","false","String","null","[]","Optional[/**
 * The canonical filename of the OBB.
 */
]","\android\content\res\ObbInfo.java"
"salt","true","false","false","false","false","byte","null","[]","Optional[/**
 * The salt for the encryption algorithm.
 *
 * @hide
 */
]","\android\content\res\ObbInfo.java"
"flags","true","false","false","false","false","int","null","[]","Optional[/**
 * The flags relating to the OBB.
 */
]","\android\content\res\ObbInfo.java"
"OBB_OVERLAY","true","false","false","true","true","int","1 << 0","[]","Optional[/**
 * Flag noting that this OBB is an overlay patch for a base OBB.
 */
]","\android\content\res\ObbInfo.java"
"packageName","true","false","false","false","false","String","null","[]","Optional[/**
 * The name of the package to which the OBB file belongs.
 */
]","\android\content\res\ObbInfo.java"
"mSyncHeight","false","false","false","false","false","long","null","[]","Optional[/**
 * Height of the view when mSyncPosition and mSyncRowId where set
 */
]","\android\widget\AdapterView.java"
"SYNC_FIRST_POSITION","false","false","false","true","true","int","1","[]","Optional[/**
 * Sync based on the first child displayed
 */
]","\android\widget\AdapterView.java"
"mDesiredFocusableInTouchModeState","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\AdapterView.java"
"mItemCount","false","false","false","false","false","int","null","[@ViewDebug.ExportedProperty(category = ""list"")]","Optional[/**
 * The number of items in the current adapter.
 */
]","\android\widget\AdapterView.java"
"mSpecificTop","false","false","false","false","false","int","null","[]","Optional[/**
 * The offset in pixels from the top of the AdapterView to the top
 * of the view to select during the next layout.
 */
]","\android\widget\AdapterView.java"
"mSelectedRowId","false","false","false","false","false","long","INVALID_ROW_ID","[]","Optional[/**
 * The item id of the currently selected item.
 */
]","\android\widget\AdapterView.java"
"mInstanceState","false","false","true","false","false","Parcelable","null","[]","Optional.empty","\android\widget\AdapterView.java"
"mOnItemSelectedListener","false","false","false","false","false","OnItemSelectedListener","null","[]","Optional[/**
 * The listener that receives notifications when an item is selected.
 */
]","\android\widget\AdapterView.java"
"mOldSelectedPosition","false","false","false","false","false","int","INVALID_POSITION","[]","Optional[/**
 * The last selected position we used when notifying
 */
]","\android\widget\AdapterView.java"
"mDesiredFocusableState","false","false","true","false","false","boolean","null","[]","Optional[/**
 * Indicates what focusable state is requested when calling setFocusable().
 * In addition to this, this view has other criteria for actually
 * determining the focusable state (such as whether its empty or the text
 * filter is shown).
 *
 * @see #setFocusable(boolean)
 * @see #checkFocus()
 */
]","\android\widget\AdapterView.java"
"mBlockLayoutRequests","false","false","false","false","false","boolean","false","[]","Optional[/**
 * When set to true, calls to requestLayout() will not propagate up the parent hierarchy.
 * This is used to layout the children during a layout pass.
 */
]","\android\widget\AdapterView.java"
"SYNC_SELECTED_POSITION","false","false","false","true","true","int","0","[]","Optional[/**
 * Sync based on the selected child
 */
]","\android\widget\AdapterView.java"
"mNextSelectedPosition","false","false","false","false","false","int","INVALID_POSITION","[@ViewDebug.ExportedProperty(category = ""list"")]","Optional[/**
 * The position within the adapter's data set of the item to select
 * during the next layout.
 */
]","\android\widget\AdapterView.java"
"ITEM_VIEW_TYPE_IGNORE","true","false","false","true","true","int","-1","[]","Optional[/**
 * The item view type returned by {@link Adapter#getItemViewType(int)} when
 * the adapter does not want the item's view recycled.
 */
]","\android\widget\AdapterView.java"
"SYNC_MAX_DURATION_MILLIS","false","false","false","true","true","int","100","[]","Optional[/**
 * Maximum amount of time to spend in {@link #findSyncPosition()}
 */
]","\android\widget\AdapterView.java"
"mOnItemLongClickListener","false","false","false","false","false","OnItemLongClickListener","null","[]","Optional[/**
 * The listener that receives notifications when an item is long clicked.
 */
]","\android\widget\AdapterView.java"
"ITEM_VIEW_TYPE_HEADER_OR_FOOTER","true","false","false","true","true","int","-2","[]","Optional[/**
 * The item view type returned by {@link Adapter#getItemViewType(int)} when
 * the item is a header or footer.
 */
]","\android\widget\AdapterView.java"
"mInLayout","false","false","false","false","false","boolean","false","[]","Optional[/**
 * Indicates that this view is currently being laid out.
 */
]","\android\widget\AdapterView.java"
"targetView","true","false","false","false","false","View","null","[]","Optional[/**
 * The child view for which the context menu is being displayed. This
 * will be one of the children of this AdapterView.
 */
]","\android\widget\AdapterView.java"
"mNextSelectedRowId","false","false","false","false","false","long","INVALID_ROW_ID","[]","Optional[/**
 * The item id of the item to select during the next layout.
 */
]","\android\widget\AdapterView.java"
"id","true","false","false","false","false","long","null","[]","Optional[/**
 * The row id of the item for which the context menu is being displayed.
 */
]","\android\widget\AdapterView.java"
"mSyncPosition","false","false","false","false","false","int","null","[]","Optional[/**
 * Position from which to start looking for mSyncRowId
 */
]","\android\widget\AdapterView.java"
"mOldSelectedRowId","false","false","false","false","false","long","INVALID_ROW_ID","[]","Optional[/**
 * The id of the last selected position we used when notifying
 */
]","\android\widget\AdapterView.java"
"mSyncMode","false","false","false","false","false","int","null","[]","Optional[/**
 * Indicates whether to sync based on the selection or position. Possible
 * values are {@link #SYNC_SELECTED_POSITION} or
 * {@link #SYNC_FIRST_POSITION}.
 */
]","\android\widget\AdapterView.java"
"mDataChanged","false","false","false","false","false","boolean","null","[]","Optional[/**
 * True if the data has changed since the last layout
 */
]","\android\widget\AdapterView.java"
"mSelectionNotifier","false","false","true","false","false","SelectionNotifier","null","[]","Optional.empty","\android\widget\AdapterView.java"
"mNeedSync","false","false","false","false","false","boolean","false","[]","Optional[/**
 * True if we need to sync to mSyncRowId
 */
]","\android\widget\AdapterView.java"
"mOldItemCount","false","false","false","false","false","int","null","[]","Optional[/**
 * The number of items in the adapter before a data changed event occured.
 */
]","\android\widget\AdapterView.java"
"mLayoutHeight","false","false","true","false","false","int","null","[]","Optional[/**
 * Our height after the last layout
 */
]","\android\widget\AdapterView.java"
"mSelectedPosition","false","false","false","false","false","int","INVALID_POSITION","[@ViewDebug.ExportedProperty(category = ""list"")]","Optional[/**
 * The position within the adapter's data set of the currently selected item.
 */
]","\android\widget\AdapterView.java"
"mEmptyView","false","false","true","false","false","View","null","[]","Optional[/**
 * View to show if there are no items to show.
 */
]","\android\widget\AdapterView.java"
"mSyncRowId","false","false","false","false","false","long","INVALID_ROW_ID","[]","Optional[/**
 * Row id to look for when data has changed
 */
]","\android\widget\AdapterView.java"
"position","true","false","false","false","false","int","null","[]","Optional[/**
 * The position in the adapter for which the context menu is being
 * displayed.
 */
]","\android\widget\AdapterView.java"
"INVALID_ROW_ID","true","false","false","true","true","long","Long.MIN_VALUE","[]","Optional[/**
 * Represents an empty or invalid row id
 */
]","\android\widget\AdapterView.java"
"INVALID_POSITION","true","false","false","true","true","int","-1","[]","Optional[/**
 * Represents an invalid position. All valid positions are in the range 0 to 1 less than the
 * number of items in the current adapter.
 */
]","\android\widget\AdapterView.java"
"mFirstPosition","false","false","false","false","false","int","0","[@ViewDebug.ExportedProperty(category = ""scrolling"")]","Optional[/**
 * The position of the first child displayed
 */
]","\android\widget\AdapterView.java"
"mOnItemClickListener","false","false","false","false","false","OnItemClickListener","null","[]","Optional[/**
 * The listener that receives notifications when an item is clicked.
 */
]","\android\widget\AdapterView.java"
"mSpanData","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\SpannableStringInternal.java"
"END","false","false","true","true","true","int","1","[]","Optional.empty","\android\text\SpannableStringInternal.java"
"COLUMNS","false","false","true","true","true","int","3","[]","Optional.empty","\android\text\SpannableStringInternal.java"
"EMPTY","false","false","false","true","true","Object","new Object[0]","[]","Optional[/* package */
]","\android\text\SpannableStringInternal.java"
"START","false","false","true","true","true","int","0","[]","Optional.empty","\android\text\SpannableStringInternal.java"
"mText","false","false","true","false","false","String","null","[]","Optional.empty","\android\text\SpannableStringInternal.java"
"mSpanCount","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\SpannableStringInternal.java"
"mSpans","false","false","true","false","false","Object","null","[]","Optional.empty","\android\text\SpannableStringInternal.java"
"FLAGS","false","false","true","true","true","int","2","[]","Optional.empty","\android\text\SpannableStringInternal.java"
"mHandlerList","false","false","true","true","false","LinkedList","null","[]","Optional.empty","\android\webkit\UrlInterceptRegistry.java"
"mDisabled","false","false","true","true","false","boolean","false","[]","Optional.empty","\android\webkit\UrlInterceptRegistry.java"
"LOGTAG","false","false","true","true","true","String","""intercept""","[]","Optional.empty","\android\webkit\UrlInterceptRegistry.java"
"KEEP_ALIVE","false","false","true","true","true","int","1","[]","Optional.empty","\android\os\AsyncTask.java"
"sExecutor","false","false","true","true","true","ThreadPoolExecutor","new ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE, TimeUnit.SECONDS, sWorkQueue, sThreadFactory)","[]","Optional.empty","\android\os\AsyncTask.java"
"mParams","false","false","false","false","false","Params","null","[]","Optional.empty","\android\os\AsyncTask.java"
"mWorker","false","false","true","false","true","WorkerRunnable<Params,Result>","null","[]","Optional.empty","\android\os\AsyncTask.java"
"mStatus","false","false","true","false","false","Status","Status.PENDING","[]","Optional.empty","\android\os\AsyncTask.java"
"mFuture","false","false","true","false","true","FutureTask<Result>","null","[]","Optional.empty","\android\os\AsyncTask.java"
"MESSAGE_POST_CANCEL","false","false","true","true","true","int","0x3","[]","Optional.empty","\android\os\AsyncTask.java"
"CORE_POOL_SIZE","false","false","true","true","true","int","5","[]","Optional.empty","\android\os\AsyncTask.java"
"LOG_TAG","false","false","true","true","true","String","""AsyncTask""","[]","Optional.empty","\android\os\AsyncTask.java"
"MAXIMUM_POOL_SIZE","false","false","true","true","true","int","128","[]","Optional.empty","\android\os\AsyncTask.java"
"MESSAGE_POST_PROGRESS","false","false","true","true","true","int","0x2","[]","Optional.empty","\android\os\AsyncTask.java"
"mCount","false","false","true","false","true","AtomicInteger","new AtomicInteger(1)","[]","Optional.empty","\android\os\AsyncTask.java"
"sThreadFactory","false","false","true","true","true","ThreadFactory","new ThreadFactory() {

    private final AtomicInteger mCount = new AtomicInteger(1);

    public Thread newThread(Runnable r) {
        return new Thread(r, ""AsyncTask #"" + mCount.getAndIncrement());
    }
}","[]","Optional.empty","\android\os\AsyncTask.java"
"mData","false","false","false","false","true","Data","null","[]","Optional.empty","\android\os\AsyncTask.java"
"MESSAGE_POST_RESULT","false","false","true","true","true","int","0x1","[]","Optional.empty","\android\os\AsyncTask.java"
"mTask","false","false","false","false","true","AsyncTask","null","[]","Optional.empty","\android\os\AsyncTask.java"
"sWorkQueue","false","false","true","true","true","BlockingQueue<Runnable>","new LinkedBlockingQueue<Runnable>(10)","[]","Optional.empty","\android\os\AsyncTask.java"
"sHandler","false","false","true","true","true","InternalHandler","new InternalHandler()","[]","Optional.empty","\android\os\AsyncTask.java"
"mCanPersist","false","false","true","false","false","boolean","null","[]","Optional[/**
 * true if the connection can be reused for sending more requests
 */
]","\android\net\http\Connection.java"
"DRAIN","false","false","true","true","true","int","2","[]","Optional.empty","\android\net\http\Connection.java"
"mContext","false","false","false","false","false","Context","null","[]","Optional.empty","\android\net\http\Connection.java"
"HTTP_CONNECTION","false","false","true","true","true","String","""http.connection""","[]","Optional[/**
 * Doesn't seem to exist anymore in the new HTTP client, so copied here.
 */
]","\android\net\http\Connection.java"
"mCertificate","false","true","false","false","false","SslCertificate","null","[]","Optional[/**
 * The server SSL certificate associated with this connection
 * (null if the connection is not secure)
 * It would be nice to store the whole certificate chain, but
 * we want to keep things as light-weight as possible
 */
]","\android\net\http\Connection.java"
"RETRY_REQUEST_LIMIT","false","false","true","true","true","int","2","[]","Optional[/**
 * The number of times to try to re-connect (if connect fails).
 */
]","\android\net\http\Connection.java"
"states","false","false","true","true","true","String","{ ""SEND"", ""READ"", ""DRAIN"", ""DONE"" }","[]","Optional.empty","\android\net\http\Connection.java"
"mHttpContext","false","false","true","false","false","HttpContext","null","[]","Optional[/**
 * context required by ConnectionReuseStrategy.
 */
]","\android\net\http\Connection.java"
"STATE_CANCEL_REQUESTED","false","false","true","true","false","int","1","[]","Optional.empty","\android\net\http\Connection.java"
"mBuf","false","false","true","false","false","byte","null","[]","Optional[/**
 * Buffer for feeding response blocks to webkit.  One block per
 * connection reduces memory churn.
 */
]","\android\net\http\Connection.java"
"STATE_NORMAL","false","false","true","true","false","int","0","[]","Optional[/**
 * set when cancelled
 */
]","\android\net\http\Connection.java"
"MIN_PIPE","false","false","true","true","true","int","2","[]","Optional.empty","\android\net\http\Connection.java"
"mActive","false","false","true","false","false","int","STATE_NORMAL","[]","Optional.empty","\android\net\http\Connection.java"
"SOCKET_TIMEOUT","false","false","false","true","true","int","60000","[]","Optional[/**
 * Allow a TCP connection 60 idle seconds before erroring out
 */
]","\android\net\http\Connection.java"
"mRequestFeeder","false","false","false","false","false","RequestFeeder","null","[]","Optional.empty","\android\net\http\Connection.java"
"MAX_PIPE","false","false","true","true","true","int","3","[]","Optional.empty","\android\net\http\Connection.java"
"mHttpClientConnection","false","true","false","false","false","AndroidHttpClientConnection","null","[]","Optional[/**
 * The low level connection
 */
]","\android\net\http\Connection.java"
"mHost","false","false","false","false","false","HttpHost","null","[]","Optional[/**
 * The host this connection is connected to.  If using proxy,
 * this is set to the proxy address
 */
]","\android\net\http\Connection.java"
"DONE","false","false","true","true","true","int","3","[]","Optional.empty","\android\net\http\Connection.java"
"SEND","false","false","true","true","true","int","0","[]","Optional.empty","\android\net\http\Connection.java"
"READ","false","false","true","true","true","int","1","[]","Optional.empty","\android\net\http\Connection.java"
"mDockAddress","false","false","true","true","false","String","null","[]","Optional.empty","\android\server\BluetoothService.java"
"mIsAirplaneSensitive","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\server\BluetoothService.java"
"mHfpProfileState","false","false","true","false","true","BluetoothProfileState","null","[]","Optional.empty","\android\server\BluetoothService.java"
"mDockPin","false","false","true","false","false","String","null","[]","Optional.empty","\android\server\BluetoothService.java"
"mBondState","false","false","true","false","true","BondState","new BondState()","[]","Optional[// local cache of bondings
]","\android\server\BluetoothService.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\android\server\BluetoothService.java"
"mIsDiscovering","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\server\BluetoothService.java"
"BLUETOOTH_ADMIN_PERM","false","false","true","true","true","String","android.Manifest.permission.BLUETOOTH_ADMIN","[]","Optional.empty","\android\server\BluetoothService.java"
"mAutoPairingExactNameBlacklist","false","false","true","false","false","ArrayList<String>","null","[]","Optional.empty","\android\server\BluetoothService.java"
"mAutoPairingPartialNameBlacklist","false","false","true","false","false","ArrayList<String>","null","[]","Optional.empty","\android\server\BluetoothService.java"
"address","true","false","false","false","false","String","null","[]","Optional.empty","\android\server\BluetoothService.java"
"DYNAMIC_AUTO_PAIRING_BLACKLIST","false","false","true","true","true","String","""/data/misc/bluetooth/dynamic_auto_pairing.conf""","[]","Optional.empty","\android\server\BluetoothService.java"
"mEnableThread","false","false","true","false","false","EnableThread","null","[]","Optional.empty","\android\server\BluetoothService.java"
"INIT_AUTO_PAIRING_FAILURE_ATTEMPT_DELAY","false","false","true","true","true","long","3000","[]","Optional[// MAX_AUTO_PAIRING_FAILURE_ATTEMPT_DELAY as the max value.
]","\android\server\BluetoothService.java"
"RFCOMM_UUIDS","false","false","true","true","true","ParcelUuid","{ BluetoothUuid.Handsfree, BluetoothUuid.HSP, BluetoothUuid.ObexObjectPush }","[]","Optional[/**
 * Always retrieve RFCOMM channel for these SDP UUIDs
 */
]","\android\server\BluetoothService.java"
"mA2dpProfileState","false","false","true","false","true","BluetoothProfileState","null","[]","Optional.empty","\android\server\BluetoothService.java"
"AUTO_PAIRING_BLACKLIST","false","false","true","true","true","String","""/etc/bluetooth/auto_pairing.conf""","[]","Optional.empty","\android\server\BluetoothService.java"
"mAutoPairingDynamicAddressBlacklist","false","false","true","false","false","ArrayList<String>","null","[]","Optional[// Addresses added to blacklist dynamically based on usage.
]","\android\server\BluetoothService.java"
"mDeviceProperties","false","false","true","false","true","HashMap<String,Map<String,String>>","null","[]","Optional.empty","\android\server\BluetoothService.java"
"mA2dpService","false","false","true","false","false","BluetoothA2dpService","null","[]","Optional.empty","\android\server\BluetoothService.java"
"DOCK_PIN_PATH","false","false","true","true","true","String","""/sys/class/switch/dock/bt_pin""","[]","Optional.empty","\android\server\BluetoothService.java"
"mEventLoop","false","false","true","false","false","BluetoothEventLoop","null","[]","Optional.empty","\android\server\BluetoothService.java"
"mState","false","false","true","false","true","HashMap<String,Integer>","new HashMap<String, Integer>()","[]","Optional.empty","\android\server\BluetoothService.java"
"mSaveSetting","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\server\BluetoothService.java"
"UUID_INTENT_DELAY","false","false","true","true","true","int","6000","[]","Optional[// This timeout should be greater than the page timeout
]","\android\server\BluetoothService.java"
"MESSAGE_AUTO_PAIRING_FAILURE_ATTEMPT_DELAY","false","false","true","true","true","int","5","[]","Optional.empty","\android\server\BluetoothService.java"
"MESSAGE_FINISH_DISABLE","false","false","true","true","true","int","2","[]","Optional.empty","\android\server\BluetoothService.java"
"mBluetoothState","false","false","true","false","false","int","null","[]","Optional.empty","\android\server\BluetoothService.java"
"SHARED_PREFERENCE_DOCK_ADDRESS","false","false","true","true","true","String","""dock_bluetooth_address""","[]","Optional.empty","\android\server\BluetoothService.java"
"handle","false","false","false","false","false","int","null","[]","Optional.empty","\android\server\BluetoothService.java"
"BLUETOOTH_PERM","false","false","true","true","true","String","android.Manifest.permission.BLUETOOTH","[]","Optional.empty","\android\server\BluetoothService.java"
"mUuidIntentTracker","false","false","true","false","true","ArrayList<String>","null","[]","Optional.empty","\android\server\BluetoothService.java"
"MESSAGE_UUID_INTENT","false","false","true","true","true","int","3","[]","Optional.empty","\android\server\BluetoothService.java"
"mDeviceProfileState","false","false","true","false","true","HashMap<String,BluetoothDeviceProfileState>","null","[]","Optional.empty","\android\server\BluetoothService.java"
"mIsAirplaneToggleable","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\server\BluetoothService.java"
"mUuidCallbackTracker","false","false","true","false","true","HashMap<RemoteService,IBluetoothCallback>","null","[]","Optional.empty","\android\server\BluetoothService.java"
"mDeviceServiceChannelCache","false","false","true","false","true","HashMap<String,Map<ParcelUuid,Integer>>","null","[]","Optional.empty","\android\server\BluetoothService.java"
"mRestart","false","false","true","false","false","boolean","false","[]","Optional[// need to call enable() after disable()
]","\android\server\BluetoothService.java"
"mHandler","false","false","true","false","true","Handler","new Handler() {

    @Override
    public void handleMessage(Message msg) {
        switch(msg.what) {
            case MESSAGE_REGISTER_SDP_RECORDS:
                if (!isEnabledInternal()) {
                    return;
                }
                // records, use a DBUS call instead.
                switch(msg.arg1) {
                    case 1:
                        Log.d(TAG, ""Registering hfag record"");
                        SystemService.start(""hfag"");
                        mHandler.sendMessageDelayed(mHandler.obtainMessage(MESSAGE_REGISTER_SDP_RECORDS, 2, -1), 500);
                        break;
                    case 2:
                        Log.d(TAG, ""Registering hsag record"");
                        SystemService.start(""hsag"");
                        mHandler.sendMessageDelayed(mHandler.obtainMessage(MESSAGE_REGISTER_SDP_RECORDS, 3, -1), 500);
                        break;
                    case 3:
                        Log.d(TAG, ""Registering opush record"");
                        SystemService.start(""opush"");
                        mHandler.sendMessageDelayed(mHandler.obtainMessage(MESSAGE_REGISTER_SDP_RECORDS, 4, -1), 500);
                        break;
                    case 4:
                        Log.d(TAG, ""Registering pbap record"");
                        SystemService.start(""pbap"");
                        break;
                }
                break;
            case MESSAGE_FINISH_DISABLE:
                finishDisable(msg.arg1 != 0);
                break;
            case MESSAGE_UUID_INTENT:
                String address = (String) msg.obj;
                if (address != null) {
                    sendUuidIntent(address);
                    makeServiceChannelCallbacks(address);
                }
                break;
            case MESSAGE_DISCOVERABLE_TIMEOUT:
                int mode = msg.arg1;
                if (isEnabledInternal()) {
                    // TODO: Switch back to the previous scan mode
                    // This is ok for now, because we only use
                    // CONNECTABLE and CONNECTABLE_DISCOVERABLE
                    setScanMode(BluetoothAdapter.SCAN_MODE_CONNECTABLE, -1);
                }
                break;
            case MESSAGE_AUTO_PAIRING_FAILURE_ATTEMPT_DELAY:
                address = (String) msg.obj;
                if (address != null) {
                    createBond(address);
                    return;
                }
                break;
        }
    }
}","[]","Optional.empty","\android\server\BluetoothService.java"
"TAG","false","false","true","true","true","String","""BluetoothService""","[]","Optional.empty","\android\server\BluetoothService.java"
"mPendingOutgoingBonding","false","false","true","false","false","String","null","[]","Optional[// There can be only 1 pending outgoing connection at a time,
]","\android\server\BluetoothService.java"
"SHARED_PREFERENCES_NAME","false","false","true","true","true","String","""bluetooth_service_settings""","[]","Optional.empty","\android\server\BluetoothService.java"
"MAX_AUTO_PAIRING_FAILURE_ATTEMPT_DELAY","false","false","true","true","true","long","12000","[]","Optional.empty","\android\server\BluetoothService.java"
"DBG","false","false","true","true","true","boolean","true","[]","Optional.empty","\android\server\BluetoothService.java"
"pid","false","false","false","false","false","int","null","[]","Optional.empty","\android\server\BluetoothService.java"
"mDeviceOobData","false","false","true","false","true","HashMap<String,Pair<byte[],byte[]>>","null","[]","Optional.empty","\android\server\BluetoothService.java"
"uuid","true","false","false","false","false","ParcelUuid","null","[]","Optional.empty","\android\server\BluetoothService.java"
"mServiceRecordToPid","false","false","true","false","true","HashMap<Integer,Integer>","null","[]","Optional.empty","\android\server\BluetoothService.java"
"mNativeData","false","false","true","false","false","int","null","[]","Optional.empty","\android\server\BluetoothService.java"
"mAdapterProperties","false","false","true","false","true","Map<String,String>","null","[]","Optional[// TODO(): Optimize all these string handling
]","\android\server\BluetoothService.java"
"mAdapter","false","false","true","false","false","BluetoothAdapter","null","[]","Optional[// constant after init()
]","\android\server\BluetoothService.java"
"mReceiver","false","false","true","false","true","BroadcastReceiver","new BroadcastReceiver() {

    @Override
    public void onReceive(Context context, Intent intent) {
        if (intent == null)
            return;
        String action = intent.getAction();
        if (action.equals(Intent.ACTION_AIRPLANE_MODE_CHANGED)) {
            ContentResolver resolver = context.getContentResolver();
            // Query the airplane mode from Settings.System just to make sure that
            // some random app is not sending this intent and disabling bluetooth
            boolean enabled = !isAirplaneModeOn();
            // If bluetooth is currently expected to be on, then enable or disable bluetooth
            if (Settings.Secure.getInt(resolver, Settings.Secure.BLUETOOTH_ON, 0) > 0) {
                if (enabled) {
                    enable(false);
                } else {
                    disable(false);
                }
            }
        } else if (Intent.ACTION_DOCK_EVENT.equals(action)) {
            int state = intent.getIntExtra(Intent.EXTRA_DOCK_STATE, Intent.EXTRA_DOCK_STATE_UNDOCKED);
            if (DBG)
                Log.v(TAG, ""Received ACTION_DOCK_EVENT with State:"" + state);
            if (state == Intent.EXTRA_DOCK_STATE_UNDOCKED) {
                mDockAddress = null;
                mDockPin = null;
            } else {
                SharedPreferences.Editor editor = mContext.getSharedPreferences(SHARED_PREFERENCES_NAME, mContext.MODE_PRIVATE).edit();
                editor.putBoolean(SHARED_PREFERENCE_DOCK_ADDRESS + mDockAddress, true);
                editor.apply();
            }
        }
    }
}","[]","Optional.empty","\android\server\BluetoothService.java"
"mBatteryStats","false","false","true","false","true","IBatteryStats","null","[]","Optional.empty","\android\server\BluetoothService.java"
"mAutoPairingAddressBlacklist","false","false","true","false","false","ArrayList<String>","null","[]","Optional.empty","\android\server\BluetoothService.java"
"mPinAttempt","false","false","true","false","true","HashMap<String,Integer>","new HashMap<String, Integer>()","[]","Optional.empty","\android\server\BluetoothService.java"
"MESSAGE_REGISTER_SDP_RECORDS","false","false","true","true","true","int","1","[]","Optional.empty","\android\server\BluetoothService.java"
"MESSAGE_DISCOVERABLE_TIMEOUT","false","false","true","true","true","int","4","[]","Optional.empty","\android\server\BluetoothService.java"
"DOCK_ADDRESS_PATH","false","false","true","true","true","String","""/sys/class/switch/dock/bt_addr""","[]","Optional.empty","\android\server\BluetoothService.java"
"ACTION_DEVICE_POLICY_MANAGER_STATE_CHANGED","true","false","false","true","true","String","""android.app.action.DEVICE_POLICY_MANAGER_STATE_CHANGED""","[]","Optional[/**
 * Activity action: send when any policy admin changes a policy.
 * This is generally used to find out when a new policy is in effect.
 *
 * @hide
 */
]","\android\app\admin\DevicePolicyManager.java"
"PASSWORD_QUALITY_ALPHANUMERIC","true","false","false","true","true","int","0x50000","[]","Optional[/**
 * Constant for {@link #setPasswordQuality}: the user must have entered a
 * password containing at least <em>both></em> numeric <em>and</em>
 * alphabetic (or other symbol) characters.  Note that quality constants are
 * ordered so that higher values are more restrictive.
 */
]","\android\app\admin\DevicePolicyManager.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\android\app\admin\DevicePolicyManager.java"
"PASSWORD_QUALITY_UNSPECIFIED","true","false","false","true","true","int","0","[]","Optional[/**
 * Constant for {@link #setPasswordQuality}: the policy has no requirements
 * for the password.  Note that quality constants are ordered so that higher
 * values are more restrictive.
 */
]","\android\app\admin\DevicePolicyManager.java"
"RESET_PASSWORD_REQUIRE_ENTRY","true","false","false","true","true","int","0x0001","[]","Optional[/**
 * Flag for {@link #resetPassword}: don't allow other admins to change
 * the password again until the user has entered it.
 */
]","\android\app\admin\DevicePolicyManager.java"
"PASSWORD_QUALITY_NUMERIC","true","false","false","true","true","int","0x20000","[]","Optional[/**
 * Constant for {@link #setPasswordQuality}: the user must have entered a
 * password containing at least numeric characters.  Note that quality
 * constants are ordered so that higher values are more restrictive.
 */
]","\android\app\admin\DevicePolicyManager.java"
"PASSWORD_QUALITY_ALPHABETIC","true","false","false","true","true","int","0x40000","[]","Optional[/**
 * Constant for {@link #setPasswordQuality}: the user must have entered a
 * password containing at least alphabetic (or other symbol) characters.
 * Note that quality constants are ordered so that higher values are more
 * restrictive.
 */
]","\android\app\admin\DevicePolicyManager.java"
"ACTION_ADD_DEVICE_ADMIN","true","false","false","true","true","String","""android.app.action.ADD_DEVICE_ADMIN""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity action: ask the user to add a new device administrator to the system.
 * The desired policy is the ComponentName of the policy in the
 * {@link #EXTRA_DEVICE_ADMIN} extra field.  This will invoke a UI to
 * bring the user through adding the device administrator to the system (or
 * allowing them to reject it).
 *
 * <p>You can optionally include the {@link #EXTRA_ADD_EXPLANATION}
 * field to provide the user with additional explanation (in addition
 * to your component's description) about what is being added.
 */
]","\android\app\admin\DevicePolicyManager.java"
"ACTION_SET_NEW_PASSWORD","true","false","false","true","true","String","""android.app.action.SET_NEW_PASSWORD""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity action: have the user enter a new password.  This activity
 * should be launched after using {@link #setPasswordQuality(ComponentName, int)}
 * or {@link #setPasswordMinimumLength(ComponentName, int)} to have the
 * user enter a new password that meets the current requirements.  You can
 * use {@link #isActivePasswordSufficient()} to determine whether you need
 * to have the user select a new password in order to meet the current
 * constraints.  Upon being resumed from this activity,
 * you can check the new password characteristics to see if they are
 * sufficient.
 */
]","\android\app\admin\DevicePolicyManager.java"
"PASSWORD_QUALITY_SOMETHING","true","false","false","true","true","int","0x10000","[]","Optional[/**
 * Constant for {@link #setPasswordQuality}: the policy requires some kind
 * of password, but doesn't care what it is.  Note that quality constants
 * are ordered so that higher values are more restrictive.
 */
]","\android\app\admin\DevicePolicyManager.java"
"EXTRA_ADD_EXPLANATION","true","false","false","true","true","String","""android.app.extra.ADD_EXPLANATION""","[]","Optional[/**
 * An optional CharSequence providing additional explanation for why the
 * admin is being added.
 *
 * @see #ACTION_ADD_DEVICE_ADMIN
 */
]","\android\app\admin\DevicePolicyManager.java"
"EXTRA_DEVICE_ADMIN","true","false","false","true","true","String","""android.app.extra.DEVICE_ADMIN""","[]","Optional[/**
 * The ComponentName of the administrator component.
 *
 * @see #ACTION_ADD_DEVICE_ADMIN
 */
]","\android\app\admin\DevicePolicyManager.java"
"mHandler","false","false","true","false","true","Handler","null","[]","Optional.empty","\android\app\admin\DevicePolicyManager.java"
"TAG","false","false","true","true","false","String","""DevicePolicyManager""","[]","Optional.empty","\android\app\admin\DevicePolicyManager.java"
"localLOGV","false","false","true","true","false","boolean","DEBUG || android.util.Config.LOGV","[]","Optional.empty","\android\app\admin\DevicePolicyManager.java"
"mService","false","false","true","false","true","IDevicePolicyManager","null","[]","Optional.empty","\android\app\admin\DevicePolicyManager.java"
"DEBUG","false","false","true","true","false","boolean","false","[]","Optional.empty","\android\app\admin\DevicePolicyManager.java"
"WIPE_EXTERNAL_STORAGE","true","false","false","true","true","int","0x0001","[]","Optional[/**
 * Flag for {@link #wipeData(int)}: also erase the device's external
 * storage.
 */
]","\android\app\admin\DevicePolicyManager.java"
"mStringResult","false","false","true","false","false","String","null","[]","Optional[// String result of the prompt
]","\android\webkit\JsPromptResult.java"
"SQLITE_EXCEPTION_DETAIL_MESSAGE","false","false","true","true","true","String","""unable to open database file""","[]","Optional.empty","\com\google\android\mms\util\SqliteWrapper.java"
"TAG","false","false","true","true","true","String","""SqliteWrapper""","[]","Optional.empty","\com\google\android\mms\util\SqliteWrapper.java"
"mCursor","false","false","true","false","false","Cursor","null","[]","Optional.empty","\android\database\CursorWrapper.java"
"SECONDARY_EMAIL_TYPE","true","false","false","true","true","String","""secondary_email_type""","[]","Optional[/**
 * The extra field for an optional second contact email type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Email}
 * or a string specifying a custom label.</P>
 */
]","\android\provider\ContactsContract.java"
"MODE_LARGE","true","false","false","true","true","int","3","[@Deprecated]","Optional[/**
 * Value for {@link #EXTRA_MODE} to show a large-sized dialog.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"POSTAL_ISPRIMARY","true","false","false","true","true","String","""postal_isprimary""","[]","Optional[/**
 * The extra field for the postal isprimary flag.
 * <P>Type: boolean</P>
 */
]","\android\provider\ContactsContract.java"
"TYPE_OTHER_NAME","true","false","false","true","true","int","2","[]","Optional.empty","\android\provider\ContactsContract.java"
"TERTIARY_PHONE","true","false","false","true","true","String","""tertiary_phone""","[]","Optional[/**
 * The extra field for an optional third contact phone number.
 * <P>Type: String</P>
 */
]","\android\provider\ContactsContract.java"
"TYPE_INITIALS","true","false","false","true","true","int","5","[]","Optional.empty","\android\provider\ContactsContract.java"
"FULL_NAME_STYLE","true","false","false","true","true","String","DATA10","[]","Optional[/**
 * The style used for combining given/middle/family name into a full name.
 * See {@link ContactsContract.FullNameStyle}.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"TYPE_HOME","true","false","false","true","true","int","1","[]","Optional.empty","\android\provider\ContactsContract.java"
"TYPE_WORK_PAGER","true","false","false","true","true","int","18","[]","Optional.empty","\android\provider\ContactsContract.java"
"OFFICE_LOCATION","true","false","false","true","true","String","DATA9","[]","Optional[/**
 * The office location of this organization.
 * <P>Type: TEXT</P>
 */
]","\android\provider\ContactsContract.java"
"DATA7","true","false","false","true","true","String","""data7""","[]","Optional[/**
 * Generic data column, the meaning is {@link #MIMETYPE} specific
 */
]","\android\provider\ContactsContract.java"
"DATA6","true","false","false","true","true","String","""data6""","[]","Optional[/**
 * Generic data column, the meaning is {@link #MIMETYPE} specific
 */
]","\android\provider\ContactsContract.java"
"PROTOCOL_SKYPE","true","false","false","true","true","int","3","[]","Optional.empty","\android\provider\ContactsContract.java"
"DATA9","true","false","false","true","true","String","""data9""","[]","Optional[/**
 * Generic data column, the meaning is {@link #MIMETYPE} specific
 */
]","\android\provider\ContactsContract.java"
"NAME_RAW_CONTACT_ID","true","false","false","true","true","String","""name_raw_contact_id""","[]","Optional[/**
 * Reference to the row in the RawContacts table holding the contact name.
 * <P>Type: INTEGER REFERENCES raw_contacts(_id)</P>
 * @hide
 */
]","\android\provider\ContactsContract.java"
"DATA8","true","false","false","true","true","String","""data8""","[]","Optional[/**
 * Generic data column, the meaning is {@link #MIMETYPE} specific
 */
]","\android\provider\ContactsContract.java"
"DATA3","true","false","false","true","true","String","""data3""","[]","Optional[/**
 * Generic data column, the meaning is {@link #MIMETYPE} specific
 */
]","\android\provider\ContactsContract.java"
"DATA2","true","false","false","true","true","String","""data2""","[]","Optional[/**
 * Generic data column, the meaning is {@link #MIMETYPE} specific
 */
]","\android\provider\ContactsContract.java"
"CONTENT_TYPE","true","false","false","true","true","String","""vnd.android.cursor.dir/provider_status""","[]","Optional[/**
 * The MIME-type of {@link #CONTENT_URI} providing a directory of
 * settings.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"DATA5","true","false","false","true","true","String","""data5""","[]","Optional[/**
 * Generic data column, the meaning is {@link #MIMETYPE} specific
 */
]","\android\provider\ContactsContract.java"
"DATA4","true","false","false","true","true","String","""data4""","[]","Optional[/**
 * Generic data column, the meaning is {@link #MIMETYPE} specific
 */
]","\android\provider\ContactsContract.java"
"FAMILY_NAME","true","false","false","true","true","String","DATA3","[]","Optional[/**
 * The family name for the contact.
 * <P>Type: TEXT</P>
 */
]","\android\provider\ContactsContract.java"
"DATA1","true","false","false","true","true","String","""data1""","[]","Optional[/**
 * Additional data associated with the status.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"TYPE_PARENT","true","false","false","true","true","int","9","[]","Optional.empty","\android\provider\ContactsContract.java"
"LIST_GROUP_ACTION","true","false","false","true","true","String","""com.android.contacts.action.LIST_GROUP""","[]","Optional[/**
 * The action for the contacts list tab.
 */
]","\android\provider\ContactsContract.java"
"SUMMARY_COUNT","true","false","false","true","true","String","""summ_count""","[]","Optional[/**
 * The total number of {@link Contacts} that have
 * {@link CommonDataKinds.GroupMembership} in this group. Read-only value that is only
 * present when querying {@link Groups#CONTENT_SUMMARY_URI}.
 * <p>
 * Type: INTEGER
 */
]","\android\provider\ContactsContract.java"
"GIVEN_NAME","true","false","false","true","true","String","DATA2","[]","Optional[/**
 * The given name for the contact.
 * <P>Type: TEXT</P>
 */
]","\android\provider\ContactsContract.java"
"SIP_ADDRESS","true","false","false","true","true","String","DATA1","[]","Optional[/**
 * The SIP address.
 * <P>Type: TEXT</P>
 */
]","\android\provider\ContactsContract.java"
"TYPE_WORK","true","false","false","true","true","int","2","[]","Optional.empty","\android\provider\ContactsContract.java"
"LIST_DEFAULT","true","false","false","true","true","String","""com.android.contacts.action.LIST_DEFAULT""","[]","Optional[/**
 * The action for the default contacts list tab.
 */
]","\android\provider\ContactsContract.java"
"DATA_VERSION","true","false","false","true","true","String","""data_version""","[]","Optional[/**
 * The version of this data record. This is a read-only value. The data column is
 * guaranteed to not change without the version going up. This value is monotonically
 * increasing.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\ContactsContract.java"
"DEPARTMENT","true","false","false","true","true","String","DATA5","[]","Optional[/**
 * The department at this company as the user entered it.
 * <P>Type: TEXT</P>
 */
]","\android\provider\ContactsContract.java"
"AGGREGATION_MODE_DEFAULT","true","false","false","true","true","int","0","[]","Optional[/**
 * Aggregation mode: aggregate immediately after insert or update operation(s) are complete.
 */
]","\android\provider\ContactsContract.java"
"ANY_UNSYNCED","true","false","false","true","true","String","""any_unsynced""","[]","Optional[/**
 * Read-only flag indicating if this {@link #SHOULD_SYNC} or any
 * {@link Groups#SHOULD_SYNC} under this account have been marked as
 * unsynced.
 */
]","\android\provider\ContactsContract.java"
"CONTACT_PRESENCE","true","false","false","true","true","String","""contact_presence""","[]","Optional[/**
 * Contact presence status. See {@link StatusUpdates} for individual status
 * definitions.
 * <p>Type: NUMBER</p>
 */
]","\android\provider\ContactsContract.java"
"TYPE_SISTER","true","false","false","true","true","int","13","[]","Optional.empty","\android\provider\ContactsContract.java"
"DISPLAY_NAME","true","false","false","true","true","String","DATA4","[]","Optional[/**
 * The display name for the email address
 * <P>Type: TEXT</P>
 */
]","\android\provider\ContactsContract.java"
"TYPE_RELATIVE","true","false","false","true","true","int","12","[]","Optional.empty","\android\provider\ContactsContract.java"
"CUSTOM_PROTOCOL","true","false","false","true","true","String","DATA6","[]","Optional.empty","\android\provider\ContactsContract.java"
"PHONE_ISPRIMARY","true","false","false","true","true","String","""phone_isprimary""","[]","Optional[/**
 * The extra field for the phone isprimary flag.
 * <P>Type: boolean</P>
 */
]","\android\provider\ContactsContract.java"
"NAME_VERIFIED","true","false","false","true","true","String","""name_verified""","[]","Optional[/**
 * The ""name_verified"" flag: ""1"" means that the name fields on this raw
 * contact can be trusted and therefore should be used for the entire
 * aggregated contact.
 * <p>
 * If an aggregated contact contains more than one raw contact with a
 * verified name, one of those verified names is chosen at random.
 * If an aggregated contact contains no verified names, the
 * name is chosen randomly from the constituent raw contacts.
 * </p>
 * <p>
 * Updating this flag from ""0"" to ""1"" automatically resets it to ""0"" on
 * all other raw contacts in the same aggregated contact.
 * </p>
 * <p>
 * Sync adapters should only specify a value for this column when
 * inserting a raw contact and leave it out when doing an update.
 * </p>
 * <p>
 * The default value is ""0""
 * </p>
 * <p>Type: INTEGER</p>
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"CONTACT_STATUS_ICON","true","false","false","true","true","String","""contact_status_icon""","[]","Optional[/**
 * The resource ID of the icon for the source of contact status. This
 * resource is scoped by the {@link #CONTACT_STATUS_RES_PACKAGE}.
 * <p>Type: NUMBER</p>
 */
]","\android\provider\ContactsContract.java"
"SYNC4","true","false","false","true","true","String","""data_sync4""","[]","Optional[/**
 * Generic column for use by sync adapters.
 */
]","\android\provider\ContactsContract.java"
"CAPABILITY_HAS_CAMERA","true","false","false","true","true","int","4","[]","Optional[/**
 * An allowed value of {@link #CHAT_CAPABILITY}. Indicates that the contact's device has a
 * camera that can be used for video chat (e.g. a front-facing camera on a phone).
 * @hide
 */
]","\android\provider\ContactsContract.java"
"SYNC3","true","false","false","true","true","String","""data_sync3""","[]","Optional[/**
 * Generic column for use by sync adapters.
 */
]","\android\provider\ContactsContract.java"
"TYPE_FATHER","true","false","false","true","true","int","5","[]","Optional.empty","\android\provider\ContactsContract.java"
"SUMMARY_WITH_PHONES","true","false","false","true","true","String","""summ_phones""","[]","Optional[/**
 * The total number of {@link Contacts} that have both
 * {@link CommonDataKinds.GroupMembership} in this group, and also have phone numbers.
 * Read-only value that is only present when querying
 * {@link Groups#CONTENT_SUMMARY_URI}.
 * <p>
 * Type: INTEGER
 */
]","\android\provider\ContactsContract.java"
"TYPE_MMS","true","false","false","true","true","int","20","[]","Optional.empty","\android\provider\ContactsContract.java"
"PROTOCOL_CUSTOM","true","false","false","true","true","int","-1","[]","Optional[/*
             * The predefined IM protocol types.
             */
]","\android\provider\ContactsContract.java"
"SYNC2","true","false","false","true","true","String","""data_sync2""","[]","Optional[/**
 * Generic column for use by sync adapters.
 */
]","\android\provider\ContactsContract.java"
"SYNC1","true","false","false","true","true","String","""data_sync1""","[]","Optional[/**
 * Generic column for use by sync adapters.
 */
]","\android\provider\ContactsContract.java"
"SYSTEM_ID","true","false","false","true","true","String","""system_id""","[]","Optional[/**
 * The ID of this group if it is a System Group, i.e. a group that has a special meaning
 * to the sync adapter, null otherwise.
 * <P>Type: TEXT</P>
 */
]","\android\provider\ContactsContract.java"
"TYPE_KEEP_TOGETHER","true","false","false","true","true","int","1","[]","Optional[/**
 * Makes sure that the specified raw contacts are included in the same
 * aggregate contact.
 */
]","\android\provider\ContactsContract.java"
"DIRTY","true","false","false","true","true","String","""dirty""","[]","Optional[/**
 * Flag indicating that {@link #VERSION} has changed, and this row needs
 * to be synchronized by its owning account.
 * <P>Type: INTEGER (boolean)</P>
 */
]","\android\provider\ContactsContract.java"
"STATUS_ICON","true","false","false","true","true","String","""status_icon""","[]","Optional[/**
 * The resource ID of the icon for the source of the status update.
 * This resource should be scoped by the {@link #STATUS_RES_PACKAGE}.
 * <p>Type: NUMBER</p>
 */
]","\android\provider\ContactsContract.java"
"TYPE_CUSTOM","true","false","false","true","false","int","0","[]","Optional[/**
 * A custom type. The custom label should be supplied by user.
 */
]","\android\provider\ContactsContract.java"
"SHOW_OR_CREATE_CONTACT","true","false","false","true","true","String","""com.android.contacts.action.SHOW_OR_CREATE_CONTACT""","[]","Optional[/**
 * Takes as input a data URI with a mailto: or tel: scheme. If a single
 * contact exists with the given data it will be shown. If no contact
 * exists, a dialog will ask the user if they want to create a new
 * contact with the provided details filled in. If multiple contacts
 * share the data the user will be prompted to pick which contact they
 * want to view.
 * <p>
 * For <code>mailto:</code> URIs, the scheme specific portion must be a
 * raw email address, such as one built using
 * {@link Uri#fromParts(String, String, String)}.
 * <p>
 * For <code>tel:</code> URIs, the scheme specific portion is compared
 * to existing numbers using the standard caller ID lookup algorithm.
 * The number must be properly encoded, for example using
 * {@link Uri#fromParts(String, String, String)}.
 * <p>
 * Any extras from the {@link Insert} class will be passed along to the
 * create activity if there are no contacts to show.
 * <p>
 * Passing true for the {@link #EXTRA_FORCE_CREATE} extra will skip
 * prompting the user when the contact doesn't exist.
 */
]","\android\provider\ContactsContract.java"
"UNGROUPED_VISIBLE","true","false","false","true","true","String","""ungrouped_visible""","[]","Optional[/**
 * Flag indicating if contacts without any {@link CommonDataKinds.GroupMembership}
 * entries should be visible in any user interface.
 * <p>
 * Type: INTEGER (boolean)
 */
]","\android\provider\ContactsContract.java"
"LIST_CONTACTS_WITH_PHONES_ACTION","true","false","false","true","true","String","""com.android.contacts.action.LIST_CONTACTS_WITH_PHONES""","[]","Optional[/**
 * The action for the contacts with phone numbers list tab.
 */
]","\android\provider\ContactsContract.java"
"FILTER_TEXT_EXTRA_KEY","true","false","false","true","true","String","""com.android.contacts.extra.FILTER_TEXT""","[]","Optional[/**
 * Used as an int extra field in {@link #FILTER_CONTACTS_ACTION}
 * intents to supply the text on which to filter.
 */
]","\android\provider\ContactsContract.java"
"CUSTOM_RINGTONE","true","false","false","true","true","String","""custom_ringtone""","[]","Optional[/**
 * URI for a custom ringtone associated with the contact. If null or missing,
 * the default ringtone is used.
 * <P>Type: TEXT (URI to the ringtone)</P>
 */
]","\android\provider\ContactsContract.java"
"TERTIARY_PHONE_TYPE","true","false","false","true","true","String","""tertiary_phone_type""","[]","Optional[/**
 * The extra field for an optional third contact phone number type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Phone},
 * or a string specifying a custom label.</P>
 */
]","\android\provider\ContactsContract.java"
"STREET","true","false","false","true","true","String","DATA4","[]","Optional[/**
 * Can be street, avenue, road, etc. This element also includes the
 * house number and room/apartment/flat/floor number.
 * <p>
 * Type: TEXT
 */
]","\android\provider\ContactsContract.java"
"TYPE_FRIEND","true","false","false","true","true","int","6","[]","Optional.empty","\android\provider\ContactsContract.java"
"AUTHORITY_URI","true","false","false","true","true","Uri","Uri.parse(""content://"" + AUTHORITY)","[]","Optional[/**
 * A content:// style uri to the authority for the contacts provider
 */
]","\android\provider\ContactsContract.java"
"CAPABILITY_HAS_VOICE","true","false","false","true","true","int","2","[]","Optional[/**
 * An allowed value of {@link #CHAT_CAPABILITY}. Indicates audio-chat capability.
 * @hide
 */
]","\android\provider\ContactsContract.java"
"IS_PRIMARY","true","false","false","true","true","String","""is_primary""","[]","Optional[/**
 * Whether this is the primary entry of its kind for the raw contact it belongs to.
 * <P>Type: INTEGER (if set, non-0 means true)</P>
 */
]","\android\provider\ContactsContract.java"
"PROTOCOL_GOOGLE_TALK","true","false","false","true","true","int","5","[]","Optional.empty","\android\provider\ContactsContract.java"
"PRESENCE","true","false","false","true","true","String","""mode""","[]","Optional[/**
 * Contact's latest presence level.
 * <P>Type: INTEGER (one of the values below)</P>
 */
]","\android\provider\ContactsContract.java"
"SORT_ORDER","true","false","false","true","true","String","""android.contacts.SORT_ORDER""","[]","Optional[/**
 * A key in the {@link android.provider.Settings android.provider.Settings} provider
 * that stores the preferred sorting order for contacts (by given name vs. by family name).
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"JAPANESE","true","false","false","true","true","int","4","[]","Optional[/**
 * Hiragana and Katakana are two common styles of writing out the pronunciation
 * of a Japanese names.
 */
]","\android\provider\ContactsContract.java"
"SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED","true","false","false","true","true","String","""android.provider.Contacts.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED""","[]","Optional[/**
 * This is the intent that is fired when a search suggestion for creating a contact
 * is clicked on.
 */
]","\android\provider\ContactsContract.java"
"PHONE_TYPE","true","false","false","true","true","String","""phone_type""","[]","Optional[/**
 * The extra field for the contact phone number type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Phone},
 * or a string specifying a custom label.</P>
 */
]","\android\provider\ContactsContract.java"
"TYPE_REFERRED_BY","true","false","false","true","true","int","11","[]","Optional.empty","\android\provider\ContactsContract.java"
"LAST_TIME_CONTACTED","true","false","false","true","true","String","""last_time_contacted""","[]","Optional[/**
 * The last time a contact was contacted.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\ContactsContract.java"
"TYPE_SHORT_NAME","true","false","false","true","true","int","4","[]","Optional.empty","\android\provider\ContactsContract.java"
"TYPE_SPOUSE","true","false","false","true","true","int","14","[]","Optional.empty","\android\provider\ContactsContract.java"
"PHONETIC_NAME","true","false","false","true","true","String","""phonetic_name""","[]","Optional[/**
 * The extra field for the contact phonetic name.
 * <P>Type: String</P>
 */
]","\android\provider\ContactsContract.java"
"CONTENT_VCARD_URI","true","false","false","true","true","Uri","Uri.withAppendedPath(CONTENT_URI, ""as_vcard"")","[]","Optional[/**
 * Base {@link Uri} for referencing a single {@link Contacts} entry,
 * created by appending {@link #LOOKUP_KEY} using
 * {@link Uri#withAppendedPath(Uri, String)}. Provides
 * {@link OpenableColumns} columns when queried, or returns the
 * referenced contact formatted as a vCard when opened through
 * {@link ContentResolver#openAssetFileDescriptor(Uri, String)}.
 */
]","\android\provider\ContactsContract.java"
"PACKAGE_COMMON","true","false","false","true","true","String","""common""","[]","Optional[/**
 * The {@link Data#RES_PACKAGE} value for common data that should be
 * shown using a default style.
 *
 * @hide RES_PACKAGE is hidden
 */
]","\android\provider\ContactsContract.java"
"CONTENT_STREQUENT_URI","true","false","false","true","true","Uri","Uri.withAppendedPath(CONTENT_URI, ""strequent"")","[]","Optional[/**
 * The content:// style URI for this table joined with useful data from
 * {@link ContactsContract.Data}, filtered to include only starred contacts
 * and the most frequently contacted contacts.
 */
]","\android\provider\ContactsContract.java"
"TYPE_OTHER_FAX","true","false","false","true","true","int","13","[]","Optional.empty","\android\provider\ContactsContract.java"
"GROUP_ROW_ID","true","false","false","true","true","String","DATA1","[]","Optional[/**
 * The row id of the group that this group membership refers to. Exactly one of
 * this or {@link #GROUP_SOURCE_ID} must be set when inserting a row.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\ContactsContract.java"
"DATA13","true","false","false","true","true","String","""data13""","[]","Optional[/**
 * Generic data column, the meaning is {@link #MIMETYPE} specific
 */
]","\android\provider\ContactsContract.java"
"DATA14","true","false","false","true","true","String","""data14""","[]","Optional[/**
 * Generic data column, the meaning is {@link #MIMETYPE} specific
 */
]","\android\provider\ContactsContract.java"
"DATA15","true","false","false","true","true","String","""data15""","[]","Optional[/**
 * Generic data column, the meaning is {@link #MIMETYPE} specific. By convention,
 * this field is used to store BLOBs (binary data).
 */
]","\android\provider\ContactsContract.java"
"PROTOCOL_MSN","true","false","false","true","true","int","1","[]","Optional.empty","\android\provider\ContactsContract.java"
"EMAIL","true","false","false","true","true","String","""email""","[]","Optional[/**
 * The extra field for the contact email address.
 * <P>Type: String</P>
 */
]","\android\provider\ContactsContract.java"
"DO_NOT_DISTURB","false","false","false","false","false","int","4","[]","Optional[/**
 * An allowed value of {@link #PRESENCE}.
 */
]","\android\provider\ContactsContract.java"
"DATA10","true","false","false","true","true","String","""data10""","[]","Optional[/**
 * Generic data column, the meaning is {@link #MIMETYPE} specific
 */
]","\android\provider\ContactsContract.java"
"DATA11","true","false","false","true","true","String","""data11""","[]","Optional[/**
 * Generic data column, the meaning is {@link #MIMETYPE} specific
 */
]","\android\provider\ContactsContract.java"
"DATA12","true","false","false","true","true","String","""data12""","[]","Optional[/**
 * Generic data column, the meaning is {@link #MIMETYPE} specific
 */
]","\android\provider\ContactsContract.java"
"CONTENT_ITEM_TYPE","true","false","false","true","true","String","""vnd.android.cursor.item/setting""","[]","Optional[/**
 * The MIME-type of {@link #CONTENT_URI} providing a single setting.
 */
]","\android\provider\ContactsContract.java"
"CONTACT_CHAT_CAPABILITY","true","false","false","true","true","String","""contact_chat_capability""","[]","Optional[/**
 * Contact Chat Capabilities. See {@link StatusUpdates} for individual
 * definitions.
 * <p>Type: NUMBER</p>
 * @hide
 */
]","\android\provider\ContactsContract.java"
"CALLER_IS_SYNCADAPTER","true","false","false","true","true","String","""caller_is_syncadapter""","[]","Optional[/**
 * An optional URI parameter for insert, update, or delete queries
 * that allows the caller
 * to specify that it is a sync adapter. The default value is false. If true
 * {@link RawContacts#DIRTY} is not automatically set and the
 * ""syncToNetwork"" parameter is set to false when calling
 * {@link
 * ContentResolver#notifyChange(android.net.Uri, android.database.ContentObserver, boolean)}.
 * This prevents an unnecessary extra synchronization, see the discussion of
 * the delete operation in {@link RawContacts}.
 */
]","\android\provider\ContactsContract.java"
"COUNTRY","true","false","false","true","true","String","DATA10","[]","Optional[/**
 * The name or code of the country.
 * <p>
 * Type: TEXT
 */
]","\android\provider\ContactsContract.java"
"LABEL","true","false","false","true","true","String","DataColumns.DATA3","[]","Optional[/**
 * The user defined label for the the contact method.
 * <P>Type: TEXT</P>
 */
]","\android\provider\ContactsContract.java"
"CONTENT_GROUP_URI","true","false","false","true","true","Uri","Uri.withAppendedPath(CONTENT_URI, ""group"")","[]","Optional.empty","\android\provider\ContactsContract.java"
"PHOTO","true","false","false","true","true","String","DATA15","[]","Optional[/**
 * Thumbnail photo of the raw contact. This is the raw bytes of an image
 * that could be inflated using {@link android.graphics.BitmapFactory}.
 * <p>
 * Type: BLOB
 */
]","\android\provider\ContactsContract.java"
"EXTRA_ADDRESS_BOOK_INDEX_TITLES","true","false","false","true","true","String","""address_book_index_titles""","[]","Optional[/**
 * The array of address book index titles, which are returned in the
 * same order as the data in the cursor.
 * <p>TYPE: String[]</p>
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"NUMBER","true","false","false","true","true","String","DATA","[]","Optional[/**
 * The phone number as the user entered it.
 * <P>Type: TEXT</P>
 */
]","\android\provider\ContactsContract.java"
"IN_VISIBLE_GROUP","true","false","false","true","true","String","""in_visible_group""","[]","Optional[/**
 * Lookup value that reflects the {@link Groups#GROUP_VISIBLE} state of
 * any {@link CommonDataKinds.GroupMembership} for this contact.
 */
]","\android\provider\ContactsContract.java"
"EXTRA_FORCE_CREATE","true","false","false","true","true","String","""com.android.contacts.action.FORCE_CREATE""","[]","Optional[/**
 * Used with {@link #SHOW_OR_CREATE_CONTACT} to force creating a new
 * contact if no matching contact found. Otherwise, default behavior is
 * to prompt user with dialog before creating.
 * <p>
 * Type: BOOLEAN
 */
]","\android\provider\ContactsContract.java"
"TYPE_PAGER","true","false","false","true","true","int","6","[]","Optional.empty","\android\provider\ContactsContract.java"
"CONTACT_STATUS_LABEL","true","false","false","true","true","String","""contact_status_label""","[]","Optional[/**
 * The resource ID of the label describing the source of contact
 * status, e.g. ""Google Talk"". This resource is scoped by the
 * {@link #CONTACT_STATUS_RES_PACKAGE}.
 * <p>Type: NUMBER</p>
 */
]","\android\provider\ContactsContract.java"
"DISPLAY_NAME_SOURCE","true","false","false","true","true","String","""display_name_source""","[]","Optional[/**
 * The kind of data that is used as the display name for the contact, such as
 * structured name or email address.  See DisplayNameSources.
 *
 * TODO: convert DisplayNameSources to a link after it is un-hidden
 */
]","\android\provider\ContactsContract.java"
"MODE_SMALL","true","false","false","true","true","int","1","[@Deprecated]","Optional[/**
 * Value for {@link #EXTRA_MODE} to show a small-sized dialog.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"DISPLAY_NAME_ALTERNATIVE","true","false","false","true","true","String","""display_name_alt""","[]","Optional[/**
 * <p>
 * An alternative representation of the display name, such as ""family name first""
 * instead of ""given name first"" for Western names.  If an alternative is not
 * available, the values should be the same as {@link #DISPLAY_NAME_PRIMARY}.
 * </p>
 * <p>
 * A contacts provider is free to provide alternatives as necessary for
 * its target market.
 * For example the default Android Open Source Project contacts provider
 * currently provides an
 * alternative in a single case:  if the display name is
 * based on the structured name and the structured name follows
 * the Western full name style, then the field contains the ""family name first""
 * version of the full name.
 * Other cases may be added later.
 * </p>
 */
]","\android\provider\ContactsContract.java"
"NAME","true","false","false","true","true","String","""name""","[]","Optional[/**
 * The extra field for the contact name.
 * <P>Type: String</P>
 */
]","\android\provider\ContactsContract.java"
"FULL_MODE","true","false","false","true","true","String","""full_mode""","[]","Optional[/**
 * If present, forces a bypass of quick insert mode.
 */
]","\android\provider\ContactsContract.java"
"GROUP_VISIBLE","true","false","false","true","true","String","""group_visible""","[]","Optional[/**
 * Flag indicating if the contacts belonging to this group should be
 * visible in any user interface.
 * <p>
 * Type: INTEGER (boolean)
 */
]","\android\provider\ContactsContract.java"
"NICKNAME","true","false","false","true","true","int","35","[]","Optional.empty","\android\provider\ContactsContract.java"
"PHONETIC_GIVEN_NAME","true","false","false","true","true","String","DATA7","[]","Optional[/**
 * The phonetic version of the given name for the contact.
 * <P>Type: TEXT</P>
 */
]","\android\provider\ContactsContract.java"
"STATUS_CHANGING_LOCALE","true","false","false","true","true","int","3","[]","Optional[/**
 * The status used during a locale change.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"PHONETIC_FAMILY_NAME","true","false","false","true","true","String","DATA9","[]","Optional[/**
 * The phonetic version of the family name for the contact.
 * <P>Type: TEXT</P>
 */
]","\android\provider\ContactsContract.java"
"TYPE_DEFAULT","true","false","false","true","true","int","1","[]","Optional.empty","\android\provider\ContactsContract.java"
"ACCOUNT_TYPE","true","false","false","true","true","String","""account_type""","[]","Optional[/**
 * The type of account to which this row belongs, which when paired with
 * {@link #ACCOUNT_NAME} identifies a specific account.
 * <P>Type: TEXT</P>
 */
]","\android\provider\ContactsContract.java"
"CJK","true","false","false","true","true","int","2","[]","Optional[/**
 * Used if the name is written in Hanzi/Kanji/Hanja and we could not determine
 * which specific language it belongs to: Chinese, Japanese or Korean.
 */
]","\android\provider\ContactsContract.java"
"SNIPPET_MIMETYPE","true","false","false","true","true","String","""snippet_mimetype""","[]","Optional[/**
 * The type of data that was matched by the filter.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"FORMATTED_ADDRESS","true","false","false","true","true","String","DATA","[]","Optional[/**
 * The full, unstructured postal address. <i>This field must be
 * consistent with any structured data.</i>
 * <p>
 * Type: TEXT
 */
]","\android\provider\ContactsContract.java"
"SECONDARY_PHONE","true","false","false","true","true","String","""secondary_phone""","[]","Optional[/**
 * The extra field for an optional second contact phone number.
 * <P>Type: String</P>
 */
]","\android\provider\ContactsContract.java"
"DELETED","true","false","false","true","true","String","""deleted""","[]","Optional[/**
 * The ""deleted"" flag: ""0"" by default, ""1"" if the row has been marked
 * for deletion. When {@link android.content.ContentResolver#delete} is
 * called on a group, it is marked for deletion. The sync adaptor
 * deletes the group on the server and then calls ContactResolver.delete
 * once more, this time setting the the
 * {@link ContactsContract#CALLER_IS_SYNCADAPTER} query parameter to
 * finalize the data removal.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\ContactsContract.java"
"CONTENT_MULTI_VCARD_URI","true","false","false","true","true","Uri","Uri.withAppendedPath(CONTENT_URI, ""as_multi_vcard"")","[]","Optional[/**
 * Base {@link Uri} for referencing multiple {@link Contacts} entry,
 * created by appending {@link #LOOKUP_KEY} using
 * {@link Uri#withAppendedPath(Uri, String)}. The lookup keys have to be
 * encoded and joined with the colon ("":"") seperator. The resulting string
 * has to be encoded again. Provides
 * {@link OpenableColumns} columns when queried, or returns the
 * referenced contact formatted as a vCard when opened through
 * {@link ContentResolver#openAssetFileDescriptor(Uri, String)}.
 *
 * This is private API because we do not have a well-defined way to
 * specify several entities yet. The format of this Uri might change in the future
 * or the Uri might be completely removed.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"NOTES","true","false","false","true","true","String","""notes""","[]","Optional[/**
 * The extra field for the contact notes.
 * <P>Type: String</P>
 */
]","\android\provider\ContactsContract.java"
"SORT_ORDER_PRIMARY","true","false","false","true","true","int","1","[]","Optional[/**
 * The value for the SORT_ORDER key corresponding to sorting by given name first.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"SHOULD_SYNC","true","false","false","true","true","String","""should_sync""","[]","Optional[/**
 * Depending on the mode defined by the sync-adapter, this flag controls
 * the top-level sync behavior for this data source.
 * <p>
 * Type: INTEGER (boolean)
 */
]","\android\provider\ContactsContract.java"
"MIMETYPE","true","false","false","true","true","String","""mimetype""","[]","Optional[/**
 * The MIME type of the item represented by this row.
 */
]","\android\provider\ContactsContract.java"
"TYPE_FTP","true","false","false","true","true","int","6","[]","Optional.empty","\android\provider\ContactsContract.java"
"PHOTO_ID","true","false","false","true","true","String","""photo_id""","[]","Optional[/**
 * Reference to the row in the data table holding the photo.
 * <P>Type: INTEGER REFERENCES data(_id)</P>
 */
]","\android\provider\ContactsContract.java"
"NEIGHBORHOOD","true","false","false","true","true","String","DATA6","[]","Optional[/**
 * This is used to disambiguate a street address when a city
 * contains more than one street with the same name, or to specify a
 * small place whose mail is routed through a larger postal town. In
 * China it could be a county or a minor city.
 * <p>
 * Type: TEXT
 */
]","\android\provider\ContactsContract.java"
"IS_SUPER_PRIMARY","true","false","false","true","true","String","""is_super_primary""","[]","Optional[/**
 * Whether this is the primary entry of its kind for the aggregate
 * contact it belongs to. Any data record that is ""super primary"" must
 * also be ""primary"".
 * <P>Type: INTEGER (if set, non-0 means true)</P>
 */
]","\android\provider\ContactsContract.java"
"AWAY","false","false","false","false","false","int","2","[]","Optional[/**
 * An allowed value of {@link #PRESENCE}.
 */
]","\android\provider\ContactsContract.java"
"AVAILABLE","false","false","false","false","false","int","5","[]","Optional[/**
 * An allowed value of {@link #PRESENCE}.
 */
]","\android\provider\ContactsContract.java"
"TYPE_DOMESTIC_PARTNER","true","false","false","true","true","int","4","[]","Optional.empty","\android\provider\ContactsContract.java"
"ACTION","true","false","false","true","true","String","Intent.ACTION_INSERT","[]","Optional[/**
 * The action code to use when adding a contact
 */
]","\android\provider\ContactsContract.java"
"CONTENT_FILTER_URI","true","false","false","true","true","Uri","Uri.withAppendedPath(CONTENT_URI, ""filter"")","[]","Optional[/**
 * <p>
 * The content:// style URL for email lookup using a filter. The filter returns
 * records of MIME type {@link #CONTENT_ITEM_TYPE}. The filter is applied
 * to display names as well as email addresses. The filter argument should be passed
 * as an additional path segment after this URI.
 * </p>
 * <p>The query in the following example will return ""Robert Parr (bob@incredibles.com)""
 * as well as ""Bob Parr (incredible@android.com)"".
 * <pre>
 * Uri uri = Uri.withAppendedPath(Email.CONTENT_LOOKUP_URI, Uri.encode(""bob""));
 * Cursor c = getContentResolver().query(uri,
 * new String[]{Email.DISPLAY_NAME, Email.DATA},
 * null, null, null);
 * </pre>
 * </p>
 */
]","\android\provider\ContactsContract.java"
"CONTACT_ID","true","false","false","true","true","String","""contact_id""","[]","Optional[/**
 * A reference to the {@link ContactsContract.Contacts#_ID} that this
 * data belongs to.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\ContactsContract.java"
"IS_RESTRICTED","true","false","false","true","true","String","""is_restricted""","[]","Optional[/**
 * Flag indicating that this {@link RawContacts} entry and its children have
 * been restricted to specific platform apps.
 * <P>Type: INTEGER (boolean)</P>
 *
 * @hide until finalized in future platform release
 */
]","\android\provider\ContactsContract.java"
"CAPABILITY_HAS_VIDEO_PLAYBACK_ONLY","true","false","false","true","true","int","1","[]","Optional[/**
 * An allowed value of {@link #CHAT_CAPABILITY}. Indicates that the contact's device can
 * display a video feed.
 * @hide
 */
]","\android\provider\ContactsContract.java"
"PROTOCOL_QQ","true","false","false","true","true","int","4","[]","Optional.empty","\android\provider\ContactsContract.java"
"TITLE","true","false","false","true","true","String","""title""","[]","Optional[/**
 * The display title of this group.
 * <p>
 * Type: TEXT
 */
]","\android\provider\ContactsContract.java"
"EXTRA_TARGET_RECT","true","false","false","true","true","String","""target_rect""","[@Deprecated]","Optional[/**
 * Optional extra used with {@link #SHOW_OR_CREATE_CONTACT} to specify a
 * dialog location using screen coordinates. When not specified, the
 * dialog will be centered.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"DATA_ID","true","false","false","true","true","String","""presence_data_id""","[]","Optional[/**
 * Reference to the {@link Data#_ID} entry that owns this presence.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\ContactsContract.java"
"STATUS_RES_PACKAGE","true","false","false","true","true","String","""status_res_package""","[]","Optional[/**
 * The package containing resources for this status: label and icon.
 * <p>Type: NUMBER</p>
 */
]","\android\provider\ContactsContract.java"
"PINYIN","true","false","false","true","true","int","3","[]","Optional[/**
 * Pinyin is a phonetic method of entering Chinese characters. Typically not explicitly
 * shown in UIs, but used for searches and sorting.
 */
]","\android\provider\ContactsContract.java"
"CONTENT_SUMMARY_URI","true","false","false","true","true","Uri","Uri.withAppendedPath(AUTHORITY_URI, ""groups_summary"")","[]","Optional[/**
 * The content:// style URI for this table joined with details data from
 * {@link ContactsContract.Data}.
 */
]","\android\provider\ContactsContract.java"
"UNDEFINED","true","false","false","true","true","int","0","[]","Optional.empty","\android\provider\ContactsContract.java"
"EMAIL_ISPRIMARY","true","false","false","true","true","String","""email_isprimary""","[]","Optional[/**
 * The extra field for the email isprimary flag.
 * <P>Type: boolean</P>
 */
]","\android\provider\ContactsContract.java"
"TYPE_BROTHER","true","false","false","true","true","int","2","[]","Optional.empty","\android\provider\ContactsContract.java"
"SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED","true","false","false","true","true","String","""android.provider.Contacts.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED""","[]","Optional[/**
 * This is the intent that is fired when a search suggestion for dialing a number
 * is clicked on.
 */
]","\android\provider\ContactsContract.java"
"SEND_TO_VOICEMAIL","true","false","false","true","true","String","""send_to_voicemail""","[]","Optional[/**
 * Whether the contact should always be sent to voicemail. If missing,
 * defaults to false.
 * <P>Type: INTEGER (0 for false, 1 for true)</P>
 */
]","\android\provider\ContactsContract.java"
"PROTOCOL_YAHOO","true","false","false","true","true","int","2","[]","Optional.empty","\android\provider\ContactsContract.java"
"TYPE_ANNIVERSARY","true","false","false","true","true","int","1","[]","Optional.empty","\android\provider\ContactsContract.java"
"RES_PACKAGE","true","false","false","true","true","String","""res_package""","[]","Optional[/**
 * The package name to use when creating {@link Resources} objects for
 * this group. This value is only designed for use when building user
 * interfaces, and should not be used to infer the owner.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"LIST_STREQUENT_ACTION","true","false","false","true","true","String","""com.android.contacts.action.LIST_STREQUENT""","[]","Optional[/**
 * The action for the ""strequent"" contacts list tab. It first lists the starred
 * contacts in alphabetical order and then the frequent contacts in descending
 * order of the number of times they have been contacted.
 */
]","\android\provider\ContactsContract.java"
"EXTRA_CREATE_DESCRIPTION","true","false","false","true","true","String","""com.android.contacts.action.CREATE_DESCRIPTION""","[]","Optional[/**
 * Used with {@link #SHOW_OR_CREATE_CONTACT} to specify an exact
 * description to be shown when prompting user about creating a new
 * contact.
 * <p>
 * Type: STRING
 */
]","\android\provider\ContactsContract.java"
"TYPE","true","false","false","true","true","String","""type""","[]","Optional[/**
 * The type of exception: {@link #TYPE_KEEP_TOGETHER}, {@link #TYPE_KEEP_SEPARATE} or
 * {@link #TYPE_AUTOMATIC}.
 *
 * <P>Type: INTEGER</P>
 */
]","\android\provider\ContactsContract.java"
"SECONDARY_EMAIL","true","false","false","true","true","String","""secondary_email""","[]","Optional[/**
 * The extra field for an optional second contact email address.
 * <P>Type: String</P>
 */
]","\android\provider\ContactsContract.java"
"SUFFIX","true","false","false","true","true","String","DATA6","[]","Optional[/**
 * The contact's honorific suffix, e.g. ""Jr""
 */
]","\android\provider\ContactsContract.java"
"JOB_DESCRIPTION","true","false","false","true","true","String","DATA6","[]","Optional[/**
 * The job description at this company as the user entered it.
 * <P>Type: TEXT</P>
 */
]","\android\provider\ContactsContract.java"
"STATUS_UPGRADING","true","false","false","true","true","int","1","[]","Optional[/**
 * The status used when the provider is in the process of upgrading.  Contacts
 * are temporarily unaccessible.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"LIST_FREQUENT_ACTION","true","false","false","true","true","String","""com.android.contacts.action.LIST_FREQUENT""","[]","Optional[/**
 * The action for the frequent contacts list tab.
 */
]","\android\provider\ContactsContract.java"
"TITLE_RES","true","false","false","true","true","String","""title_res""","[]","Optional[/**
 * The display title of this group to load as a resource from
 * {@link #RES_PACKAGE}, which may be localized.
 * <P>Type: TEXT</P>
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"UNGROUPED_WITH_PHONES","true","false","false","true","true","String","""summ_phones""","[]","Optional[/**
 * Read-only count of {@link Contacts} from a specific source that have
 * no {@link CommonDataKinds.GroupMembership} entries, and also have phone numbers.
 * <p>
 * Type: INTEGER
 */
]","\android\provider\ContactsContract.java"
"PROTOCOL","true","false","false","true","true","String","DATA5","[]","Optional[/**
 * This column should be populated with one of the defined
 * constants, e.g. {@link #PROTOCOL_YAHOO}. If the value of this
 * column is {@link #PROTOCOL_CUSTOM}, the {@link #CUSTOM_PROTOCOL}
 * should contain the name of the custom protocol.
 */
]","\android\provider\ContactsContract.java"
"DISPLAY_ORDER_ALTERNATIVE","true","false","false","true","true","int","2","[]","Optional[/**
 * The value for the DISPLAY_ORDER key corresponding to showing the family name first.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"SORT_KEY_ALTERNATIVE","true","false","false","true","true","String","""sort_key_alt""","[]","Optional[/**
 * Sort key based on the alternative representation of the full name,
 * {@link #DISPLAY_NAME_ALTERNATIVE}.  Thus for Western names,
 * it is the one using the ""family name first"" format.
 */
]","\android\provider\ContactsContract.java"
"TYPE_BIRTHDAY","true","false","false","true","true","int","3","[]","Optional.empty","\android\provider\ContactsContract.java"
"AUTHORITY","true","false","false","true","true","String","""com.android.contacts""","[]","Optional[/**
 * The authority for the contacts provider
 */
]","\android\provider\ContactsContract.java"
"REGION","true","false","false","true","true","String","DATA8","[]","Optional[/**
 * A state, province, county (in Ireland), Land (in Germany),
 * departement (in France), etc.
 * <p>
 * Type: TEXT
 */
]","\android\provider\ContactsContract.java"
"COMPANY","true","false","false","true","true","String","""company""","[]","Optional[/**
 * The extra field for the contact company.
 * <P>Type: String</P>
 */
]","\android\provider\ContactsContract.java"
"IM_PROTOCOL","true","false","false","true","true","String","""im_protocol""","[]","Optional[/**
 * The extra field for the IM protocol
 */
]","\android\provider\ContactsContract.java"
"INVISIBLE","false","false","false","false","false","int","1","[]","Optional[/**
 * An allowed value of {@link #PRESENCE}.
 */
]","\android\provider\ContactsContract.java"
"CHAT_CAPABILITY","true","false","false","true","true","String","""chat_capability""","[]","Optional[/**
 * Contact's audio/video chat capability level.
 * <P>Type: INTEGER (one of the values below)</P>
 * @hide
 */
]","\android\provider\ContactsContract.java"
"SYMBOL","true","false","false","true","true","String","DATA7","[]","Optional[/**
 * The symbol of this company as the user entered it.
 * <P>Type: TEXT</P>
 */
]","\android\provider\ContactsContract.java"
"PROTOCOL_AIM","true","false","false","true","true","int","0","[]","Optional.empty","\android\provider\ContactsContract.java"
"TYPE_MAINDEN_NAME","true","false","false","true","true","int","3","[@Deprecated]","Optional[/**
 * @deprecated Use TYPE_MAIDEN_NAME instead.
 */
]","\android\provider\ContactsContract.java"
"PHONETIC_NAME_STYLE","true","false","false","true","true","String","DATA10","[]","Optional[/**
 * The alphabet used for capturing the phonetic name.
 * See {@link ContactsContract.PhoneticNameStyle}.
 * @hide
 */
]","\android\provider\ContactsContract.java"
"GROUP_SOURCE_ID","true","false","false","true","true","String","""group_sourceid""","[]","Optional[/**
 * The sourceid of the group that this group membership refers to.  Exactly one of
 * this or {@link #GROUP_ROW_ID} must be set when inserting a row.
 * <P>Type: TEXT</P>
 */
]","\android\provider\ContactsContract.java"
"SNIPPET_DATA_ID","true","false","false","true","true","String","""snippet_data_id""","[]","Optional[/**
 * The ID of the data row that was matched by the filter.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"TYPE_BLOG","true","false","false","true","true","int","2","[]","Optional.empty","\android\provider\ContactsContract.java"
"PRESENCE_STATUS","true","false","false","true","true","String","PRESENCE","[@Deprecated]","Optional[/**
 * @deprecated use {@link #PRESENCE}
 */
]","\android\provider\ContactsContract.java"
"TIMES_CONTACTED","true","false","false","true","true","String","""times_contacted""","[]","Optional[/**
 * The number of times a contact has been contacted
 * <P>Type: INTEGER</P>
 */
]","\android\provider\ContactsContract.java"
"TYPE_CAR","true","false","false","true","true","int","9","[]","Optional.empty","\android\provider\ContactsContract.java"
"POSTCODE","true","false","false","true","true","String","DATA9","[]","Optional[/**
 * Postal code. Usually country-wide, but sometimes specific to the
 * city (e.g. ""2"" in ""Dublin 2, Ireland"" addresses).
 * <p>
 * Type: TEXT
 */
]","\android\provider\ContactsContract.java"
"DATA_KEYS","false","false","true","true","true","String","new String[] { Data.DATA1, Data.DATA2, Data.DATA3, Data.DATA4, Data.DATA5, Data.DATA6, Data.DATA7, Data.DATA8, Data.DATA9, Data.DATA10, Data.DATA11, Data.DATA12, Data.DATA13, Data.DATA14, Data.DATA15, Data.SYNC1, Data.SYNC2, Data.SYNC3, Data.SYNC4 }","[]","Optional.empty","\android\provider\ContactsContract.java"
"IM_ACCOUNT","true","false","false","true","true","String","""im_account""","[]","Optional[/**
 * The IM account for the local user that the presence data came from.
 * <P>Type: TEXT</P>
 */
]","\android\provider\ContactsContract.java"
"TYPE_OTHER","true","false","false","true","true","int","3","[]","Optional.empty","\android\provider\ContactsContract.java"
"CONTACT_STATUS_RES_PACKAGE","true","false","false","true","true","String","""contact_status_res_package""","[]","Optional[/**
 * The package containing resources for this status: label and icon.
 * <p>Type: TEXT</p>
 */
]","\android\provider\ContactsContract.java"
"FOR_EXPORT_ONLY","true","false","false","true","true","String","""for_export_only""","[]","Optional[/**
 * If {@link #FOR_EXPORT_ONLY} is explicitly set to ""1"", returned Cursor toward
 * Data.CONTENT_URI contains only exportable data.
 *
 * This flag is useful (currently) only for vCard exporter in Contacts app, which
 * needs to exclude ""un-exportable"" data from available data to export, while
 * Contacts app itself has priviledge to access all data including ""un-expotable""
 * ones and providers return all of them regardless of the callers' intention.
 * <P>Type: INTEGER</p>
 *
 * @hide Maybe available only in Eclair and not really ready for public use.
 * TODO: remove, or implement this feature completely. As of now (Eclair),
 * we only use this flag in queryEntities(), not query().
 */
]","\android\provider\ContactsContract.java"
"URL","true","false","false","true","true","String","DATA","[]","Optional[/**
 * The website URL string.
 * <P>Type: TEXT</P>
 */
]","\android\provider\ContactsContract.java"
"TYPE_WORK_MOBILE","true","false","false","true","true","int","17","[]","Optional.empty","\android\provider\ContactsContract.java"
"ORGANIZATION","true","false","false","true","true","int","30","[]","Optional.empty","\android\provider\ContactsContract.java"
"TYPE_MAIN","true","false","false","true","true","int","12","[]","Optional.empty","\android\provider\ContactsContract.java"
"ATTACH_IMAGE","true","false","false","true","true","String","""com.android.contacts.action.ATTACH_IMAGE""","[]","Optional[/**
 * Starts an Activity that lets the user pick a contact to attach an image to.
 * After picking the contact it launches the image cropper in face detection mode.
 */
]","\android\provider\ContactsContract.java"
"CONTENT_URI","true","false","false","true","true","Uri","Uri.withAppendedPath(AUTHORITY_URI, ""provider_status"")","[]","Optional[/**
 * The content:// style URI for this table.  Requests to this URI can be
 * performed on the UI thread because they are always unblocking.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"HAS_PHONE_NUMBER","true","false","false","true","true","String","""has_phone_number""","[]","Optional[/**
 * An indicator of whether this contact has at least one phone number. ""1"" if there is
 * at least one phone number, ""0"" otherwise.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\ContactsContract.java"
"SNIPPET_DATA4","true","false","false","true","true","String","""snippet_data4""","[]","Optional[/**
 * The {@link Data#DATA4} field of the data row that was matched by the filter.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"SNIPPET_DATA2","true","false","false","true","true","String","""snippet_data2""","[]","Optional[/**
 * The {@link Data#DATA2} field of the data row that was matched by the filter.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"SNIPPET_DATA3","true","false","false","true","true","String","""snippet_data3""","[]","Optional[/**
 * The {@link Data#DATA3} field of the data row that was matched by the filter.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"SNIPPET_DATA1","true","false","false","true","true","String","""snippet_data1""","[]","Optional[/**
 * The {@link Data#DATA1} field of the data row that was matched by the filter.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"EMAIL_TYPE","true","false","false","true","true","String","""email_type""","[]","Optional[/**
 * The extra field for the contact email type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Email}
 * or a string specifying a custom label.</P>
 */
]","\android\provider\ContactsContract.java"
"IM_ISPRIMARY","true","false","false","true","true","String","""im_isprimary""","[]","Optional[/**
 * The extra field for the IM isprimary flag.
 * <P>Type: boolean</P>
 */
]","\android\provider\ContactsContract.java"
"TYPE_CALLBACK","true","false","false","true","true","int","8","[]","Optional.empty","\android\provider\ContactsContract.java"
"SOURCE_ID","true","false","false","true","true","String","""sourceid""","[]","Optional[/**
 * String that uniquely identifies this row to its source account.
 * <P>Type: TEXT</P>
 */
]","\android\provider\ContactsContract.java"
"EXTRA_EXCLUDE_MIMES","true","false","false","true","true","String","""exclude_mimes""","[@Deprecated]","Optional[/**
 * Optional extra used with {@link #SHOW_OR_CREATE_CONTACT} to indicate
 * a list of specific MIME-types to exclude and not display. Stored as a
 * {@link String} array.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"STATUS_NORMAL","true","false","false","true","true","int","0","[]","Optional[/**
 * Default status of the provider.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"JOB_TITLE","true","false","false","true","true","String","""job_title""","[]","Optional[/**
 * The extra field for the contact job title.
 * <P>Type: String</P>
 */
]","\android\provider\ContactsContract.java"
"CONTENT_DIRECTORY","true","false","false","true","true","String","""entity""","[]","Optional[/**
 * The directory twig for this sub-table
 */
]","\android\provider\ContactsContract.java"
"STARRED","true","false","false","true","true","String","""starred""","[]","Optional[/**
 * Is the contact starred?
 * <P>Type: INTEGER (boolean)</P>
 */
]","\android\provider\ContactsContract.java"
"START_DATE","true","false","false","true","true","String","DATA","[]","Optional[/**
 * The event start date as the user entered it.
 * <P>Type: TEXT</P>
 */
]","\android\provider\ContactsContract.java"
"TERTIARY_EMAIL_TYPE","true","false","false","true","true","String","""tertiary_email_type""","[]","Optional[/**
 * The extra field for an optional third contact email type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Email}
 * or a string specifying a custom label.</P>
 */
]","\android\provider\ContactsContract.java"
"ACTION_QUICK_CONTACT","true","false","false","true","true","String","""com.android.contacts.action.QUICK_CONTACT""","[]","Optional[/**
 * Action used to trigger person pivot dialog.
 * @hide
 */
]","\android\provider\ContactsContract.java"
"TYPE_HOMEPAGE","true","false","false","true","true","int","1","[]","Optional.empty","\android\provider\ContactsContract.java"
"CITY","true","false","false","true","true","String","DATA7","[]","Optional[/**
 * Can be city, village, town, borough, etc. This is the postal town
 * and not necessarily the place of residence or place of business.
 * <p>
 * Type: TEXT
 */
]","\android\provider\ContactsContract.java"
"VERSION","true","false","false","true","true","String","""version""","[]","Optional[/**
 * Version number that is updated whenever this row or its related data
 * changes.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\ContactsContract.java"
"UNGROUPED_COUNT","true","false","false","true","true","String","""summ_count""","[]","Optional[/**
 * Read-only count of {@link Contacts} from a specific source that have
 * no {@link CommonDataKinds.GroupMembership} entries.
 * <p>
 * Type: INTEGER
 */
]","\android\provider\ContactsContract.java"
"STATUS_UPGRADE_OUT_OF_MEMORY","true","false","false","true","true","int","2","[]","Optional[/**
 * The status used if the provider was in the process of upgrading but ran
 * out of storage. The DATA1 column will contain the estimated amount of
 * storage required (in bytes). Update status to STATUS_NORMAL to force
 * the provider to retry the upgrade.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"KOREAN","true","false","false","true","true","int","5","[]","Optional[/**
 * Hangul is the Korean phonetic alphabet.
 */
]","\android\provider\ContactsContract.java"
"LOOKUP_KEY","true","false","false","true","true","String","""lookup""","[]","Optional[/**
 * An opaque value that contains hints on how to find the contact if
 * its row id changed as a result of a sync or aggregation.
 */
]","\android\provider\ContactsContract.java"
"MODE_MEDIUM","true","false","false","true","true","int","2","[@Deprecated]","Optional[/**
 * Value for {@link #EXTRA_MODE} to show a medium-sized dialog.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"AGGREGATION_MODE","true","false","false","true","true","String","""aggregation_mode""","[]","Optional[/**
 * The aggregation mode for this contact.
 * <P>Type: INTEGER</P>
 */
]","\android\provider\ContactsContract.java"
"TYPE_TELEX","true","false","false","true","true","int","15","[]","Optional.empty","\android\provider\ContactsContract.java"
"TYPE_FAX_WORK","true","false","false","true","true","int","4","[]","Optional.empty","\android\provider\ContactsContract.java"
"WESTERN","true","false","false","true","true","int","1","[]","Optional.empty","\android\provider\ContactsContract.java"
"AGGREGATION_MODE_IMMEDIATE","true","false","false","true","true","int","1","[]","Optional[/**
 * Do not use.
 *
 * TODO: deprecate in favor of {@link #AGGREGATION_MODE_DEFAULT}
 */
]","\android\provider\ContactsContract.java"
"TYPE_CHILD","true","false","false","true","true","int","3","[]","Optional.empty","\android\provider\ContactsContract.java"
"CHINESE","true","false","false","true","true","int","3","[]","Optional.empty","\android\provider\ContactsContract.java"
"LIST_STARRED_ACTION","true","false","false","true","true","String","""com.android.contacts.action.LIST_STARRED""","[]","Optional[/**
 * The action for the starred contacts list tab.
 */
]","\android\provider\ContactsContract.java"
"ACCOUNT_NAME","true","false","false","true","true","String","""account_name""","[]","Optional[/**
 * The name of the account instance to which this row belongs.
 * <P>Type: TEXT</P>
 */
]","\android\provider\ContactsContract.java"
"STATUS","true","false","false","true","true","String","""status""","[]","Optional[/**
 * An integer representing the current status of the provider.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"POSTAL_TYPE","true","false","false","true","true","String","""postal_type""","[]","Optional[/**
 * The extra field for the contact postal address type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.StructuredPostal}
 * or a string specifying a custom label.</P>
 */
]","\android\provider\ContactsContract.java"
"TYPE_MOTHER","true","false","false","true","true","int","8","[]","Optional.empty","\android\provider\ContactsContract.java"
"EXTRA_ADDRESS_BOOK_INDEX_COUNTS","true","false","false","true","true","String","""address_book_index_counts""","[]","Optional[/**
 * The array of group counts for the corresponding group.  Contains the same number
 * of elements as the EXTRA_ADDRESS_BOOK_INDEX_TITLES array.
 * <p>TYPE: int[]</p>
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"STRUCTURED_NAME","true","false","false","true","true","int","40","[]","Optional.empty","\android\provider\ContactsContract.java"
"TYPE_RADIO","true","false","false","true","true","int","14","[]","Optional.empty","\android\provider\ContactsContract.java"
"PROTOCOL_ICQ","true","false","false","true","true","int","6","[]","Optional.empty","\android\provider\ContactsContract.java"
"RAW_CONTACT_ID","true","false","false","true","true","String","""raw_contact_id""","[]","Optional[/**
 * A reference to the {@link RawContacts#_ID}
 * that this data belongs to.
 */
]","\android\provider\ContactsContract.java"
"LIST_ALL_CONTACTS_ACTION","true","false","false","true","true","String","""com.android.contacts.action.LIST_ALL_CONTACTS""","[]","Optional[/**
 * The action for the all contacts list tab.
 */
]","\android\provider\ContactsContract.java"
"TYPE_PROFILE","true","false","false","true","true","int","3","[]","Optional.empty","\android\provider\ContactsContract.java"
"PROTOCOL_JABBER","true","false","false","true","true","int","7","[]","Optional.empty","\android\provider\ContactsContract.java"
"REQUESTING_PACKAGE_PARAM_KEY","true","false","false","true","true","String","""requesting_package""","[]","Optional[/**
 * A query parameter key used to specify the package that is requesting a query.
 * This is used for restricting data based on package name.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"DISPLAY_NAME_PRIMARY","true","false","false","true","true","String","""display_name""","[]","Optional[/**
 * <p>
 * The standard text shown as the contact's display name, based on the best
 * available information for the contact (for example, it might be the email address
 * if the name is not available).
 * The information actually used to compute the name is stored in
 * {@link #DISPLAY_NAME_SOURCE}.
 * </p>
 * <p>
 * A contacts provider is free to choose whatever representation makes most
 * sense for its target market.
 * For example in the default Android Open Source Project implementation,
 * if the display name is
 * based on the structured name and the structured name follows
 * the Western full-name style, then this field contains the ""given name first""
 * version of the full name.
 * <p>
 *
 * @see ContactsContract.ContactNameColumns#DISPLAY_NAME_ALTERNATIVE
 */
]","\android\provider\ContactsContract.java"
"PHONETIC_MIDDLE_NAME","true","false","false","true","true","String","DATA8","[]","Optional[/**
 * The phonetic version of the additional name for the contact.
 * <P>Type: TEXT</P>
 */
]","\android\provider\ContactsContract.java"
"EXTRA_MODE","true","false","false","true","true","String","""mode""","[@Deprecated]","Optional[/**
 * Optional extra used with {@link #SHOW_OR_CREATE_CONTACT} to specify a
 * desired dialog style, usually a variation on size. One of
 * {@link #MODE_SMALL}, {@link #MODE_MEDIUM}, or {@link #MODE_LARGE}.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"TYPE_FAX_HOME","true","false","false","true","true","int","5","[]","Optional.empty","\android\provider\ContactsContract.java"
"PROTOCOL_NETMEETING","true","false","false","true","true","int","8","[]","Optional.empty","\android\provider\ContactsContract.java"
"TYPE_MOBILE","true","false","false","true","true","int","4","[]","Optional.empty","\android\provider\ContactsContract.java"
"CONTENT_STREQUENT_FILTER_URI","true","false","false","true","true","Uri","Uri.withAppendedPath(CONTENT_STREQUENT_URI, ""filter"")","[]","Optional[/**
 * The content:// style URI used for ""type-to-filter"" functionality on the
 * {@link #CONTENT_STREQUENT_URI} URI. The filter string will be used to match
 * various parts of the contact name. The filter argument should be passed
 * as an additional path segment after this URI.
 */
]","\android\provider\ContactsContract.java"
"STATUS_TIMESTAMP","true","false","false","true","true","String","""status_ts""","[]","Optional[/**
 * The absolute time in milliseconds when the latest status was inserted/updated.
 * <p>Type: NUMBER</p>
 */
]","\android\provider\ContactsContract.java"
"DATA","true","false","false","true","true","String","DataColumns.DATA1","[]","Optional[/**
 * The data for the contact method.
 * <P>Type: TEXT</P>
 */
]","\android\provider\ContactsContract.java"
"PREFIX","true","false","false","true","true","String","DATA4","[]","Optional[/**
 * The contact's honorific prefix, e.g. ""Sir""
 * <P>Type: TEXT</P>
 */
]","\android\provider\ContactsContract.java"
"TYPE_MAIDEN_NAME","true","false","false","true","true","int","3","[]","Optional.empty","\android\provider\ContactsContract.java"
"ADDRESS","true","false","false","true","true","String","DATA1","[]","Optional[/**
 * The email address.
 * <P>Type: TEXT</P>
 * @hide TODO: Unhide in a separate CL
 */
]","\android\provider\ContactsContract.java"
"SORT_ORDER_ALTERNATIVE","true","false","false","true","true","int","2","[]","Optional[/**
 * The value for the SORT_ORDER key corresponding to sorting by family name first.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"ADDRESS_BOOK_INDEX_EXTRAS","true","false","false","true","true","String","""address_book_index_extras""","[]","Optional[/**
 * Add this query parameter to a URI to get back row counts grouped by
 * the address book index as cursor extras. For most languages it is the
 * first letter of the sort key. This parameter does not affect the main
 * content of the cursor.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"AGGREGATION_MODE_SUSPENDED","true","false","false","true","true","int","2","[]","Optional[/**
 * <p>
 * Aggregation mode: aggregation suspended temporarily, and is likely to be resumed later.
 * Changes to the raw contact will update the associated aggregate contact but will not
 * result in any change in how the contact is aggregated. Similar to
 * {@link #AGGREGATION_MODE_DISABLED}, but maintains a link to the corresponding
 * {@link Contacts} aggregate.
 * </p>
 * <p>
 * This can be used to postpone aggregation until after a series of updates, for better
 * performance and/or user experience.
 * </p>
 * <p>
 * Note that changing
 * {@link #AGGREGATION_MODE} from {@link #AGGREGATION_MODE_SUSPENDED} to
 * {@link #AGGREGATION_MODE_DEFAULT} does not trigger an aggregation pass, but any
 * subsequent
 * change to the raw contact's data will.
 * </p>
 */
]","\android\provider\ContactsContract.java"
"PRESENCE_CUSTOM_STATUS","true","false","false","true","true","String","STATUS","[@Deprecated]","Optional[/**
 * @deprecated use {@link #STATUS}
 */
]","\android\provider\ContactsContract.java"
"GROUP_NAME_EXTRA_KEY","true","false","false","true","true","String","""com.android.contacts.extra.GROUP""","[]","Optional[/**
 * When in LIST_GROUP_ACTION mode, this is the group to display.
 */
]","\android\provider\ContactsContract.java"
"OFFLINE","false","false","false","false","false","int","0","[]","Optional[/**
 * An allowed value of {@link #PRESENCE}.
 */
]","\android\provider\ContactsContract.java"
"POBOX","true","false","false","true","true","String","DATA5","[]","Optional[/**
 * Covers actual P.O. boxes, drawers, locked bags, etc. This is
 * usually but not always mutually exclusive with street.
 * <p>
 * Type: TEXT
 */
]","\android\provider\ContactsContract.java"
"AGGREGATION_MODE_DISABLED","true","false","false","true","true","int","3","[]","Optional[/**
 * <p>
 * Aggregation mode: never aggregate this raw contact.  The raw contact will not
 * have a corresponding {@link Contacts} aggregate and therefore will not be included in
 * {@link Contacts} query results.
 * </p>
 * <p>
 * For example, this mode can be used for a raw contact that is marked for deletion while
 * waiting for the deletion to occur on the server side.
 * </p>
 *
 * @see #AGGREGATION_MODE_SUSPENDED
 */
]","\android\provider\ContactsContract.java"
"SECONDARY_PHONE_TYPE","true","false","false","true","true","String","""secondary_phone_type""","[]","Optional[/**
 * The extra field for an optional second contact phone number type.
 * <P>Type: Either an integer value from
 * {@link CommonDataKinds.Phone},
 * or a string specifying a custom label.</P>
 */
]","\android\provider\ContactsContract.java"
"TYPE_COMPANY_MAIN","true","false","false","true","true","int","10","[]","Optional.empty","\android\provider\ContactsContract.java"
"PHONE","true","false","false","true","true","String","""phone""","[]","Optional[/**
 * The extra field for the contact phone number.
 * <P>Type: String</P>
 */
]","\android\provider\ContactsContract.java"
"POSTAL","true","false","false","true","true","String","""postal""","[]","Optional[/**
 * The extra field for the contact postal address.
 * <P>Type: String</P>
 */
]","\android\provider\ContactsContract.java"
"CONTENT_VCARD_TYPE","true","false","false","true","true","String","""text/x-vcard""","[]","Optional[/**
 * The MIME type of a {@link #CONTENT_URI} subdirectory of a single
 * person.
 */
]","\android\provider\ContactsContract.java"
"CONTENT_LOOKUP_URI","true","false","false","true","true","Uri","Uri.withAppendedPath(CONTENT_URI, ""lookup"")","[]","Optional[/**
 * <p>
 * The content:// style URL for looking up data rows by email address. The
 * lookup argument, an email address, should be passed as an additional path segment
 * after this URI.
 * </p>
 * <p>Example:
 * <pre>
 * Uri uri = Uri.withAppendedPath(Email.CONTENT_LOOKUP_URI, Uri.encode(email));
 * Cursor c = getContentResolver().query(uri,
 * new String[]{Email.CONTACT_ID, Email.DISPLAY_NAME, Email.DATA},
 * null, null, null);
 * </pre>
 * </p>
 */
]","\android\provider\ContactsContract.java"
"EXTRA_SELECTED_CONTACTS_APP_TAB_INDEX","true","false","false","true","true","String","""SELECTED_TAB_INDEX""","[]","Optional[/**
 * Extra used to specify the last selected tab index of the Contacts app.
 * If this is not given or -1
 * @hide
 */
]","\android\provider\ContactsContract.java"
"CONTACT_STATUS_TIMESTAMP","true","false","false","true","true","String","""contact_status_ts""","[]","Optional[/**
 * The absolute time in milliseconds when the latest status was
 * inserted/updated.
 * <p>Type: NUMBER</p>
 */
]","\android\provider\ContactsContract.java"
"TYPE_AUTOMATIC","true","false","false","true","true","int","0","[]","Optional[/**
 * Allows the provider to automatically decide whether the specified raw contacts should
 * be included in the same aggregate contact or not.
 */
]","\android\provider\ContactsContract.java"
"TYPE_ISDN","true","false","false","true","true","int","11","[]","Optional.empty","\android\provider\ContactsContract.java"
"NOTE","true","false","false","true","true","String","DATA1","[]","Optional[/**
 * The note text.
 * <P>Type: TEXT</P>
 */
]","\android\provider\ContactsContract.java"
"STATUS_LABEL","true","false","false","true","true","String","""status_label""","[]","Optional[/**
 * The resource ID of the label describing the source of the status update, e.g. ""Google
 * Talk"".  This resource should be scoped by the {@link #STATUS_RES_PACKAGE}.
 * <p>Type: NUMBER</p>
 */
]","\android\provider\ContactsContract.java"
"TYPE_KEEP_SEPARATE","true","false","false","true","true","int","2","[]","Optional[/**
 * Makes sure that the specified raw contacts are NOT included in the same
 * aggregate contact.
 */
]","\android\provider\ContactsContract.java"
"TITLE_EXTRA_KEY","true","false","false","true","true","String","""com.android.contacts.extra.TITLE_EXTRA""","[]","Optional[/**
 * A key for to be used as an intent extra to set the activity
 * title to a custom String value.
 */
]","\android\provider\ContactsContract.java"
"MIDDLE_NAME","true","false","false","true","true","String","DATA5","[]","Optional[/**
 * The contact's middle name
 * <P>Type: TEXT</P>
 */
]","\android\provider\ContactsContract.java"
"TYPE_MANAGER","true","false","false","true","true","int","7","[]","Optional.empty","\android\provider\ContactsContract.java"
"FILTER_CONTACTS_ACTION","true","false","false","true","true","String","""com.android.contacts.action.FILTER_CONTACTS""","[]","Optional[/**
 * Activity Action: Display a filtered list of contacts
 * <p>
 * Input: Extra field {@link #FILTER_TEXT_EXTRA_KEY} is the text to use for
 * filtering
 * <p>
 * Output: Nothing.
 */
]","\android\provider\ContactsContract.java"
"TERTIARY_EMAIL","true","false","false","true","true","String","""tertiary_email""","[]","Optional[/**
 * The extra field for an optional third contact email address.
 * <P>Type: String</P>
 */
]","\android\provider\ContactsContract.java"
"TYPE_TTY_TDD","true","false","false","true","true","int","16","[]","Optional.empty","\android\provider\ContactsContract.java"
"IM_HANDLE","true","false","false","true","true","String","""im_handle""","[]","Optional[/**
 * The extra field for an IM handle.
 * <P>Type: String</P>
 */
]","\android\provider\ContactsContract.java"
"DISPLAY_ORDER","true","false","false","true","true","String","""android.contacts.DISPLAY_ORDER""","[]","Optional[/**
 * A key in the {@link android.provider.Settings android.provider.Settings} provider
 * that stores the preferred display order for contacts (given name first vs. family
 * name first).
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"RAW_CONTACT_ID1","true","false","false","true","true","String","""raw_contact_id1""","[]","Optional[/**
 * A reference to the {@link RawContacts#_ID} of the raw contact that the rule applies to.
 */
]","\android\provider\ContactsContract.java"
"RAW_CONTACT_ID2","true","false","false","true","true","String","""raw_contact_id2""","[]","Optional[/**
 * A reference to the other {@link RawContacts#_ID} of the raw contact that the rule
 * applies to.
 */
]","\android\provider\ContactsContract.java"
"SORT_KEY_PRIMARY","true","false","false","true","true","String","""sort_key""","[]","Optional[/**
 * Sort key that takes into account locale-based traditions for sorting
 * names in address books.  The default
 * sort key is {@link #DISPLAY_NAME_PRIMARY}.  For Chinese names
 * the sort key is the name's Pinyin spelling, and for Japanese names
 * it is the Hiragana version of the phonetic name.
 */
]","\android\provider\ContactsContract.java"
"TYPE_PARTNER","true","false","false","true","true","int","10","[]","Optional.empty","\android\provider\ContactsContract.java"
"TYPE_ASSISTANT","true","false","false","true","true","int","1","[]","Optional.empty","\android\provider\ContactsContract.java"
"IDLE","false","false","false","false","false","int","3","[]","Optional[/**
 * An allowed value of {@link #PRESENCE}.
 */
]","\android\provider\ContactsContract.java"
"DISPLAY_ORDER_PRIMARY","true","false","false","true","true","int","1","[]","Optional[/**
 * The value for the DISPLAY_ORDER key corresponding to showing the given name first.
 *
 * @hide
 */
]","\android\provider\ContactsContract.java"
"CONTACT_STATUS","true","false","false","true","true","String","""contact_status""","[]","Optional[/**
 * Contact's latest status update.
 * <p>Type: TEXT</p>
 */
]","\android\provider\ContactsContract.java"
"SEARCH_SUGGESTION_CLICKED","true","false","false","true","true","String","""android.provider.Contacts.SEARCH_SUGGESTION_CLICKED""","[]","Optional[/**
 * This is the intent that is fired when a search suggestion is clicked on.
 */
]","\android\provider\ContactsContract.java"
"mObservers","false","false","true","false","false","ArrayList<Object>","new ArrayList<Object>()","[]","Optional[/**
 * Many to many mapping of string match to observer.
 * Multimap would be better, but not available in android, so use
 * an ArrayList where even elements are the String match and odd
 * elements the corresponding UEventObserver observer
 */
]","\android\os\UEventObserver.java"
"sThread","false","false","true","true","false","UEventThread","null","[]","Optional.empty","\android\os\UEventObserver.java"
"TAG","false","false","true","true","true","String","UEventObserver.class.getSimpleName()","[]","Optional.empty","\android\os\UEventObserver.java"
"mMap","true","false","false","false","false","HashMap<String,String>","new HashMap<String, String>()","[]","Optional[// collection of key=value pairs parsed from the uevent message
]","\android\os\UEventObserver.java"
"sThreadStarted","false","false","true","true","false","boolean","false","[]","Optional.empty","\android\os\UEventObserver.java"
"mHeaderViewInfos","false","false","false","false","false","ArrayList<ListView.FixedViewInfo>","null","[]","Optional[// They are indeed created when declared in ListView and then shared.
]","\android\widget\HeaderViewListAdapter.java"
"mFooterViewInfos","false","false","false","false","false","ArrayList<ListView.FixedViewInfo>","null","[]","Optional.empty","\android\widget\HeaderViewListAdapter.java"
"mIsFilterable","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\widget\HeaderViewListAdapter.java"
"mAreAllFixedViewsSelectable","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\widget\HeaderViewListAdapter.java"
"mAdapter","false","false","true","false","true","ListAdapter","null","[]","Optional.empty","\android\widget\HeaderViewListAdapter.java"
"EMPTY_INFO_LIST","false","false","false","true","true","ArrayList<ListView.FixedViewInfo>","new ArrayList<ListView.FixedViewInfo>()","[]","Optional[// Currently only used by some CTS tests, which may be removed.
]","\android\widget\HeaderViewListAdapter.java"
"RTC","true","false","false","true","true","int","1","[]","Optional[/**
 * Alarm time in {@link System#currentTimeMillis System.currentTimeMillis()}
 * (wall clock time in UTC).  This alarm does not wake the
 * device up; if it goes off while the device is asleep, it will not be
 * delivered until the next time the device wakes up.
 */
]","\android\app\AlarmManager.java"
"INTERVAL_HOUR","true","false","false","true","true","long","2 * INTERVAL_HALF_HOUR","[]","Optional.empty","\android\app\AlarmManager.java"
"ELAPSED_REALTIME_WAKEUP","true","false","false","true","true","int","2","[]","Optional[/**
 * Alarm time in {@link android.os.SystemClock#elapsedRealtime
 * SystemClock.elapsedRealtime()} (time since boot, including sleep),
 * which will wake up the device when it goes off.
 */
]","\android\app\AlarmManager.java"
"ELAPSED_REALTIME","true","false","false","true","true","int","3","[]","Optional[/**
 * Alarm time in {@link android.os.SystemClock#elapsedRealtime
 * SystemClock.elapsedRealtime()} (time since boot, including sleep).
 * This alarm does not wake the device up; if it goes off while the device
 * is asleep, it will not be delivered until the next time the device
 * wakes up.
 */
]","\android\app\AlarmManager.java"
"INTERVAL_HALF_HOUR","true","false","false","true","true","long","2 * INTERVAL_FIFTEEN_MINUTES","[]","Optional.empty","\android\app\AlarmManager.java"
"RTC_WAKEUP","true","false","false","true","true","int","0","[]","Optional[/**
 * Alarm time in {@link System#currentTimeMillis System.currentTimeMillis()}
 * (wall clock time in UTC), which will wake up the device when
 * it goes off.
 */
]","\android\app\AlarmManager.java"
"INTERVAL_FIFTEEN_MINUTES","true","false","false","true","true","long","15 * 60 * 1000","[]","Optional[/**
 * Available inexact recurrence intervals recognized by
 * {@link #setInexactRepeating(int, long, long, PendingIntent)}
 */
]","\android\app\AlarmManager.java"
"INTERVAL_DAY","true","false","false","true","true","long","2 * INTERVAL_HALF_DAY","[]","Optional.empty","\android\app\AlarmManager.java"
"INTERVAL_HALF_DAY","true","false","false","true","true","long","12 * INTERVAL_HOUR","[]","Optional.empty","\android\app\AlarmManager.java"
"mService","false","false","true","false","true","IAlarmManager","null","[]","Optional.empty","\android\app\AlarmManager.java"
"mDefaultGrpLabel","false","false","true","false","false","String","null","[]","Optional.empty","\android\widget\AppSecurityPermissions.java"
"mPermFormat","false","false","true","false","false","String","null","[]","Optional.empty","\android\widget\AppSecurityPermissions.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\widget\AppSecurityPermissions.java"
"mShowMoreText","false","false","true","false","false","TextView","null","[]","Optional.empty","\android\widget\AppSecurityPermissions.java"
"mNonDangerousList","false","false","true","false","false","LinearLayout","null","[]","Optional.empty","\android\widget\AppSecurityPermissions.java"
"mDangerousMap","false","false","true","false","false","Map<String,String>","null","[]","Optional.empty","\android\widget\AppSecurityPermissions.java"
"mShowMaxIcon","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\AppSecurityPermissions.java"
"mDefaultGrpName","false","false","true","false","false","String","""DefaultGrp""","[]","Optional.empty","\android\widget\AppSecurityPermissions.java"
"mDangerousList","false","false","true","false","false","LinearLayout","null","[]","Optional.empty","\android\widget\AppSecurityPermissions.java"
"mShowMinIcon","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\AppSecurityPermissions.java"
"mGroupLabelCache","false","false","true","false","false","HashMap<String,CharSequence>","null","[]","Optional.empty","\android\widget\AppSecurityPermissions.java"
"mNormalIcon","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\AppSecurityPermissions.java"
"mShowMoreIcon","false","false","true","false","false","ImageView","null","[]","Optional.empty","\android\widget\AppSecurityPermissions.java"
"mExpanded","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\AppSecurityPermissions.java"
"mNoPermsView","false","false","true","false","false","View","null","[]","Optional.empty","\android\widget\AppSecurityPermissions.java"
"sCollator","false","false","true","false","true","Collator","Collator.getInstance()","[]","Optional.empty","\android\widget\AppSecurityPermissions.java"
"mPm","false","false","true","false","false","PackageManager","null","[]","Optional.empty","\android\widget\AppSecurityPermissions.java"
"mPermsView","false","false","true","false","false","LinearLayout","null","[]","Optional.empty","\android\widget\AppSecurityPermissions.java"
"TAG","false","false","true","true","true","String","""AppSecurityPermissions""","[]","Optional.empty","\android\widget\AppSecurityPermissions.java"
"mPermsList","false","false","true","false","false","List<PermissionInfo>","null","[]","Optional.empty","\android\widget\AppSecurityPermissions.java"
"mInflater","false","false","true","false","false","LayoutInflater","null","[]","Optional.empty","\android\widget\AppSecurityPermissions.java"
"mShowMore","false","false","true","false","false","View","null","[]","Optional.empty","\android\widget\AppSecurityPermissions.java"
"localLOGV","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\widget\AppSecurityPermissions.java"
"mNormalMap","false","false","true","false","false","Map<String,String>","null","[]","Optional.empty","\android\widget\AppSecurityPermissions.java"
"mCurrentState","false","false","true","false","false","State","null","[]","Optional.empty","\android\widget\AppSecurityPermissions.java"
"mDangerousIcon","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\AppSecurityPermissions.java"
"mOnRatingBarChangeListener","false","false","true","false","false","OnRatingBarChangeListener","null","[]","Optional.empty","\android\widget\RatingBar.java"
"mNumStars","false","false","true","false","false","int","5","[]","Optional.empty","\android\widget\RatingBar.java"
"mProgressOnStartTracking","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\RatingBar.java"
"mPath","false","false","true","false","false","String","null","[]","Optional[// Full path to the file to load
]","\android\webkit\FileLoader.java"
"mAllowFileAccess","false","false","true","false","false","boolean","null","[]","Optional[// Allow/block file system access
]","\android\webkit\FileLoader.java"
"mType","false","false","true","false","false","int","null","[]","Optional[// Indicates the type of the load
]","\android\webkit\FileLoader.java"
"TYPE_RES","false","false","false","true","true","int","2","[]","Optional[// used for files under res directory
]","\android\webkit\FileLoader.java"
"TYPE_FILE","false","false","false","true","true","int","3","[]","Optional[// generic file
]","\android\webkit\FileLoader.java"
"TYPE_ASSET","false","false","false","true","true","int","1","[]","Optional[// used for files under asset directory
]","\android\webkit\FileLoader.java"
"LOGTAG","false","false","true","true","true","String","""webkit""","[]","Optional.empty","\android\webkit\FileLoader.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<SavedState>","new Parcelable.Creator<SavedState>() {

    public SavedState createFromParcel(Parcel in) {
        return new SavedState(in);
    }

    public SavedState[] newArray(int size) {
        return new SavedState[size];
    }
}","[]","Optional.empty","\android\preference\ListPreference.java"
"mEntries","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\preference\ListPreference.java"
"mClickedDialogEntryIndex","false","false","true","false","false","int","null","[]","Optional.empty","\android\preference\ListPreference.java"
"mEntryValues","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\preference\ListPreference.java"
"value","false","false","false","false","false","String","null","[]","Optional.empty","\android\preference\ListPreference.java"
"mValue","false","false","true","false","false","String","null","[]","Optional.empty","\android\preference\ListPreference.java"
"CREATE","true","false","false","true","true","int","0x00000100","[]","Optional[/**
 * Event type: A new file or subdirectory was created under the monitored directory
 */
]","\android\os\FileObserver.java"
"m_mask","false","false","true","false","false","int","null","[]","Optional.empty","\android\os\FileObserver.java"
"ALL_EVENTS","true","false","false","true","true","int","ACCESS | MODIFY | ATTRIB | CLOSE_WRITE | CLOSE_NOWRITE | OPEN | MOVED_FROM | MOVED_TO | DELETE | CREATE | DELETE_SELF | MOVE_SELF","[]","Optional[/**
 * Event mask: All valid event types, combined
 */
]","\android\os\FileObserver.java"
"DELETE","true","false","false","true","true","int","0x00000200","[]","Optional[/**
 * Event type: A file was deleted from the monitored directory
 */
]","\android\os\FileObserver.java"
"DELETE_SELF","true","false","false","true","true","int","0x00000400","[]","Optional[/**
 * Event type: The monitored file or directory was deleted; monitoring effectively stops
 */
]","\android\os\FileObserver.java"
"m_descriptor","false","false","true","false","false","Integer","null","[]","Optional.empty","\android\os\FileObserver.java"
"OPEN","true","false","false","true","true","int","0x00000020","[]","Optional[/**
 * Event type: A file or directory was opened
 */
]","\android\os\FileObserver.java"
"LOG_TAG","false","false","true","true","true","String","""FileObserver""","[]","Optional.empty","\android\os\FileObserver.java"
"s_observerThread","false","false","true","true","false","ObserverThread","null","[]","Optional.empty","\android\os\FileObserver.java"
"MODIFY","true","false","false","true","true","int","0x00000002","[]","Optional[/**
 * Event type: Data was written to a file
 */
]","\android\os\FileObserver.java"
"CLOSE_NOWRITE","true","false","false","true","true","int","0x00000010","[]","Optional[/**
 * Event type: Someone had a file or directory open read-only, and closed it
 */
]","\android\os\FileObserver.java"
"MOVE_SELF","true","false","false","true","true","int","0x00000800","[]","Optional[/**
 * Event type: The monitored file or directory was moved; monitoring continues
 */
]","\android\os\FileObserver.java"
"ATTRIB","true","false","false","true","true","int","0x00000004","[]","Optional[/**
 * Event type: Metadata (permissions, owner, timestamp) was changed explicitly
 */
]","\android\os\FileObserver.java"
"CLOSE_WRITE","true","false","false","true","true","int","0x00000008","[]","Optional[/**
 * Event type: Someone had a file or directory open for writing, and closed it
 */
]","\android\os\FileObserver.java"
"MOVED_FROM","true","false","false","true","true","int","0x00000040","[]","Optional[/**
 * Event type: A file or subdirectory was moved from the monitored directory
 */
]","\android\os\FileObserver.java"
"m_observers","false","false","true","false","false","HashMap<Integer,WeakReference>","new HashMap<Integer, WeakReference>()","[]","Optional.empty","\android\os\FileObserver.java"
"MOVED_TO","true","false","false","true","true","int","0x00000080","[]","Optional[/**
 * Event type: A file or subdirectory was moved to the monitored directory
 */
]","\android\os\FileObserver.java"
"m_path","false","false","true","false","false","String","null","[]","Optional[// instance
]","\android\os\FileObserver.java"
"ACCESS","true","false","false","true","true","int","0x00000001","[]","Optional[/**
 * Event type: Data was read from a file
 */
]","\android\os\FileObserver.java"
"m_fd","false","false","true","false","false","int","null","[]","Optional.empty","\android\os\FileObserver.java"
"DISMISS","false","false","true","true","true","int","0x43","[]","Optional.empty","\android\app\Dialog.java"
"mDialog","false","false","true","false","false","WeakReference<DialogInterface>","null","[]","Optional.empty","\android\app\Dialog.java"
"mCancelMessage","false","false","true","false","false","Message","null","[]","Optional.empty","\android\app\Dialog.java"
"DIALOG_SHOWING_TAG","false","false","true","true","true","String","""android:dialogShowing""","[]","Optional.empty","\android\app\Dialog.java"
"mContext","false","false","false","false","true","Context","null","[]","Optional.empty","\android\app\Dialog.java"
"CANCEL","false","false","true","true","true","int","0x44","[]","Optional.empty","\android\app\Dialog.java"
"mListenersHandler","false","false","true","false","false","Handler","null","[]","Optional.empty","\android\app\Dialog.java"
"mWindow","false","false","false","false","false","Window","null","[]","Optional.empty","\android\app\Dialog.java"
"SHOW","false","false","true","true","true","int","0x45","[]","Optional.empty","\android\app\Dialog.java"
"mCreated","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\app\Dialog.java"
"DIALOG_HIERARCHY_TAG","false","false","true","true","true","String","""android:dialogHierarchy""","[]","Optional.empty","\android\app\Dialog.java"
"mWindowManager","false","false","false","false","true","WindowManager","null","[]","Optional.empty","\android\app\Dialog.java"
"mDecor","false","false","false","false","false","View","null","[]","Optional.empty","\android\app\Dialog.java"
"mOwnerActivity","false","false","true","false","false","Activity","null","[]","Optional.empty","\android\app\Dialog.java"
"mCanceledOnTouchOutside","false","false","true","false","false","boolean","false","[]","Optional[/**
 * Whether to cancel the dialog when a touch is received outside of the
 * window's bounds.
 */
]","\android\app\Dialog.java"
"mHandler","false","false","true","false","true","Handler","new Handler()","[]","Optional.empty","\android\app\Dialog.java"
"mDismissMessage","false","false","true","false","false","Message","null","[]","Optional.empty","\android\app\Dialog.java"
"mShowMessage","false","false","true","false","false","Message","null","[]","Optional.empty","\android\app\Dialog.java"
"mDismissAction","false","false","true","false","true","Runnable","new Runnable() {

    public void run() {
        dismissDialog();
    }
}","[]","Optional.empty","\android\app\Dialog.java"
"mShowing","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\app\Dialog.java"
"mUiThread","false","false","true","false","true","Thread","null","[]","Optional.empty","\android\app\Dialog.java"
"mCancelable","false","true","false","false","false","boolean","true","[]","Optional[/**
 * This field should be made private, so it is hidden from the SDK.
 * {@hide}
 */
]","\android\app\Dialog.java"
"mOnKeyListener","false","false","true","false","false","OnKeyListener","null","[]","Optional.empty","\android\app\Dialog.java"
"ORIGINAL","false","false","true","true","false","char","new char[] { '\r' }","[]","Optional.empty","\android\text\method\HideReturnsTransformationMethod.java"
"sInstance","false","false","true","true","false","HideReturnsTransformationMethod","null","[]","Optional.empty","\android\text\method\HideReturnsTransformationMethod.java"
"REPLACEMENT","false","false","true","true","false","char","new char[] { '\uFEFF' }","[]","Optional.empty","\android\text\method\HideReturnsTransformationMethod.java"
"mTimeToCommit","false","false","true","false","false","long","null","[]","Optional.empty","\android\pim\vcard\VCardEntryCommitter.java"
"mCreatedUris","false","false","true","false","false","ArrayList<Uri>","new ArrayList<Uri>()","[]","Optional.empty","\android\pim\vcard\VCardEntryCommitter.java"
"mContentResolver","false","false","true","false","true","ContentResolver","null","[]","Optional.empty","\android\pim\vcard\VCardEntryCommitter.java"
"LOG_TAG","true","false","false","true","false","String","""VCardEntryComitter""","[]","Optional.empty","\android\pim\vcard\VCardEntryCommitter.java"
"ACTION_POWER_DISCONNECTED","true","false","false","true","true","String","""android.intent.action.ACTION_POWER_DISCONNECTED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  External power has been removed from the device.
 * This is intended for applications that wish to register specifically to this notification.
 * Unlike ACTION_BATTERY_CHANGED, applications will be woken for this and so do not have to
 * stay active to receive this notification.  This action can be used to implement actions
 * that wait until power is available to trigger.
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"ACTION_PACKAGE_REMOVED","true","false","false","true","true","String","""android.intent.action.PACKAGE_REMOVED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: An existing application package has been removed from
 * the device.  The data contains the name of the package.  The package
 * that is being installed does <em>not</em> receive this Intent.
 * <ul>
 * <li> {@link #EXTRA_UID} containing the integer uid previously assigned
 * to the package.
 * <li> {@link #EXTRA_DATA_REMOVED} is set to true if the entire
 * application -- data and code -- is being removed.
 * <li> {@link #EXTRA_REPLACING} is set to true if this will be followed
 * by an {@link #ACTION_PACKAGE_ADDED} broadcast for the same package.
 * </ul>
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"ACTION_EDIT","true","false","false","true","true","String","""android.intent.action.EDIT""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Provide explicit editable access to the given data.
 * <p>Input: {@link #getData} is URI of data to be edited.
 * <p>Output: nothing.
 */
]","\android\content\Intent.java"
"EXTRA_INITIAL_INTENTS","true","false","false","true","true","String","""android.intent.extra.INITIAL_INTENTS""","[]","Optional[/**
 * A Parcelable[] of {@link Intent} or
 * {@link android.content.pm.LabeledIntent} objects as set with
 * {@link #putExtra(String, Parcelable[])} of additional activities to place
 * a the front of the list of choices, when shown to the user with a
 * {@link #ACTION_CHOOSER}.
 */
]","\android\content\Intent.java"
"ACTION_GTALK_SERVICE_CONNECTED","true","false","false","true","true","String","""android.intent.action.GTALK_CONNECTED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: An GTalk connection has been established.
 */
]","\android\content\Intent.java"
"ACTION_ALL_APPS","true","false","false","true","true","String","""android.intent.action.ALL_APPS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: List all available applications
 * <p>Input: Nothing.
 * <p>Output: nothing.
 */
]","\android\content\Intent.java"
"ACTION_INSERT","true","false","false","true","true","String","""android.intent.action.INSERT""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Insert an empty item into the given container.
 * <p>Input: {@link #getData} is URI of the directory (vnd.android.cursor.dir/*)
 * in which to place the data.
 * <p>Output: URI of the new data that was created.
 */
]","\android\content\Intent.java"
"ACTION_REBOOT","true","false","false","true","true","String","""android.intent.action.REBOOT""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: Have the device reboot.  This is only for use by
 * system code.
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"CATEGORY_MONKEY","true","false","false","true","true","String","""android.intent.category.MONKEY""","[@SdkConstant(SdkConstantType.INTENT_CATEGORY)]","Optional[/**
 * This activity may be exercised by the monkey or other automated test tools.
 */
]","\android\content\Intent.java"
"METADATA_DOCK_HOME","true","false","false","true","true","String","""android.dock_home""","[]","Optional[/**
 * Boolean that can be supplied as meta-data with a dock activity, to
 * indicate that the dock should take over the home key when it is active.
 */
]","\android\content\Intent.java"
"ACTION_EXTERNAL_APPLICATIONS_AVAILABLE","true","false","false","true","true","String","""android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: Resources for a set of packages (which were
 * previously unavailable) are currently
 * available since the media on which they exist is available.
 * The extra data {@link #EXTRA_CHANGED_PACKAGE_LIST} contains a
 * list of packages whose availability changed.
 * The extra data {@link #EXTRA_CHANGED_UID_LIST} contains a
 * list of uids of packages whose availability changed.
 * Note that the
 * packages in this list do <em>not</em> receive this broadcast.
 * The specified set of packages are now available on the system.
 * <p>Includes the following extras:
 * <ul>
 * <li> {@link #EXTRA_CHANGED_PACKAGE_LIST} is the set of packages
 * whose resources(were previously unavailable) are currently available.
 * {@link #EXTRA_CHANGED_UID_LIST} is the set of uids of the
 * packages whose resources(were previously unavailable)
 * are  currently available.
 * </ul>
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"ACTION_PACKAGE_DATA_CLEARED","true","false","false","true","true","String","""android.intent.action.PACKAGE_DATA_CLEARED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: The user has cleared the data of a package.  This should
 * be preceded by {@link #ACTION_PACKAGE_RESTARTED}, after which all of
 * its persistent data is erased and this broadcast sent.
 * Note that the cleared package does <em>not</em>
 * receive this broadcast. The data contains the name of the package.
 * <ul>
 * <li> {@link #EXTRA_UID} containing the integer uid assigned to the package.
 * </ul>
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"ACTION_POWER_CONNECTED","true","false","false","true","true","String","""android.intent.action.ACTION_POWER_CONNECTED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  External power has been connected to the device.
 * This is intended for applications that wish to register specifically to this notification.
 * Unlike ACTION_BATTERY_CHANGED, applications will be woken for this and so do not have to
 * stay active to receive this notification.  This action can be used to implement actions
 * that wait until power is available to trigger.
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"ACTION_SET_WALLPAPER","true","false","false","true","true","String","""android.intent.action.SET_WALLPAPER""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show settings for choosing wallpaper
 * <p>Input: Nothing.
 * <p>Output: Nothing.
 */
]","\android\content\Intent.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<Intent>","new Parcelable.Creator<Intent>() {

    public Intent createFromParcel(Parcel in) {
        return new Intent(in);
    }

    public Intent[] newArray(int size) {
        return new Intent[size];
    }
}","[]","Optional.empty","\android\content\Intent.java"
"mFlags","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\Intent.java"
"ACTION_UID_REMOVED","true","false","false","true","true","String","""android.intent.action.UID_REMOVED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: A user ID has been removed from the system.  The user
 * ID number is stored in the extra data under {@link #EXTRA_UID}.
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"EXTRA_DOCK_STATE_DESK","true","false","false","true","true","int","1","[]","Optional[/**
 * Used as an int value for {@link android.content.Intent#EXTRA_DOCK_STATE}
 * to represent that the phone is in a desk dock.
 */
]","\android\content\Intent.java"
"ACTION_BATTERY_CHANGED","true","false","false","true","true","String","""android.intent.action.BATTERY_CHANGED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  This is a <em>sticky broadcast</em> containing the
 * charging state, level, and other information about the battery.
 * See {@link android.os.BatteryManager} for documentation on the
 * contents of the Intent.
 *
 * <p class=""note"">
 * You can <em>not</em> receive this through components declared
 * in manifests, only by explicitly registering for it with
 * {@link Context#registerReceiver(BroadcastReceiver, IntentFilter)
 * Context.registerReceiver()}.  See {@link #ACTION_BATTERY_LOW},
 * {@link #ACTION_BATTERY_OKAY}, {@link #ACTION_POWER_CONNECTED},
 * and {@link #ACTION_POWER_DISCONNECTED} for distinct battery-related
 * broadcasts that are sent and can be received through manifest
 * receivers.
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"CATEGORY_CAR_MODE","true","false","false","true","true","String","""android.intent.category.CAR_MODE""","[@SdkConstant(SdkConstantType.INTENT_CATEGORY)]","Optional[/**
 * Used to indicate that the activity can be used in a car environment.
 */
]","\android\content\Intent.java"
"EXTRA_ALARM_COUNT","true","false","false","true","true","String","""android.intent.extra.ALARM_COUNT""","[]","Optional[/**
 * Used as an int extra field in {@link android.app.AlarmManager} intents
 * to tell the application being invoked how many pending alarms are being
 * delievered with the intent.  For one-shot alarms this will always be 1.
 * For recurring alarms, this might be greater than 1 if the device was
 * asleep or powered off at the time an earlier alarm would have been
 * delivered.
 */
]","\android\content\Intent.java"
"CATEGORY_HOME","true","false","false","true","true","String","""android.intent.category.HOME""","[@SdkConstant(SdkConstantType.INTENT_CATEGORY)]","Optional[/**
 * This is the home activity, that is the first activity that is displayed
 * when the device boots.
 */
]","\android\content\Intent.java"
"ACTION_DELETE","true","false","false","true","true","String","""android.intent.action.DELETE""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Delete the given data from its container.
 * <p>Input: {@link #getData} is URI of data to be deleted.
 * <p>Output: nothing.
 */
]","\android\content\Intent.java"
"ACTION_CONFIGURATION_CHANGED","true","false","false","true","true","String","""android.intent.action.CONFIGURATION_CHANGED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: The current device {@link android.content.res.Configuration}
 * (orientation, locale, etc) has changed.  When such a change happens, the
 * UIs (view hierarchy) will need to be rebuilt based on this new
 * information; for the most part, applications don't need to worry about
 * this, because the system will take care of stopping and restarting the
 * application to make sure it sees the new changes.  Some system code that
 * can not be restarted will need to watch for this action and handle it
 * appropriately.
 *
 * <p class=""note"">
 * You can <em>not</em> receive this through components declared
 * in manifests, only by explicitly registering for it with
 * {@link Context#registerReceiver(BroadcastReceiver, IntentFilter)
 * Context.registerReceiver()}.
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 *
 * @see android.content.res.Configuration
 */
]","\android\content\Intent.java"
"FLAG_ACTIVITY_FORWARD_RESULT","true","false","false","true","true","int","0x02000000","[]","Optional[/**
 * If set and this intent is being used to launch a new activity from an
 * existing one, then the reply target of the existing activity will be
 * transfered to the new activity.  This way the new activity can call
 * {@link android.app.Activity#setResult} and have that result sent back to
 * the reply target of the original activity.
 */
]","\android\content\Intent.java"
"ACTION_UPGRADE_SETUP","true","false","false","true","true","String","""android.intent.action.UPGRADE_SETUP""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Setup wizard to launch after a platform update.  This
 * activity should have a string meta-data field associated with it,
 * {@link #METADATA_SETUP_VERSION}, which defines the current version of
 * the platform for setup.  The activity will be launched only if
 * {@link android.provider.Settings.Secure#LAST_SETUP_SHOWN} is not the
 * same value.
 * <p>Input: Nothing.
 * <p>Output: Nothing.
 * @hide
 */
]","\android\content\Intent.java"
"CATEGORY_ALTERNATIVE","true","false","false","true","true","String","""android.intent.category.ALTERNATIVE""","[@SdkConstant(SdkConstantType.INTENT_CATEGORY)]","Optional[/**
 * Set if the activity should be considered as an alternative action to
 * the data the user is currently viewing.  See also
 * {@link #CATEGORY_SELECTED_ALTERNATIVE} for an alternative action that
 * applies to the selection in a list of items.
 *
 * <p>Supporting this category means that you would like your activity to be
 * displayed in the set of alternative things the user can do, usually as
 * part of the current activity's options menu.  You will usually want to
 * include a specific label in the &lt;intent-filter&gt; of this action
 * describing to the user what it does.
 *
 * <p>The action of IntentFilter with this category is important in that it
 * describes the specific action the target will perform.  This generally
 * should not be a generic action (such as {@link #ACTION_VIEW}, but rather
 * a specific name such as ""com.android.camera.action.CROP.  Only one
 * alternative of any particular action will be shown to the user, so using
 * a specific action like this makes sure that your alternative will be
 * displayed while also allowing other applications to provide their own
 * overrides of that particular action.
 */
]","\android\content\Intent.java"
"EXTRA_BCC","true","false","false","true","true","String","""android.intent.extra.BCC""","[]","Optional[/**
 * A String[] holding e-mail addresses that should be blind carbon copied.
 */
]","\android\content\Intent.java"
"IMMUTABLE_FLAGS","true","false","false","true","true","int","FLAG_GRANT_READ_URI_PERMISSION | FLAG_GRANT_WRITE_URI_PERMISSION","[]","Optional[/**
 * @hide Flags that can't be changed with PendingIntent.
 */
]","\android\content\Intent.java"
"EXTRA_SHORTCUT_ICON_RESOURCE","true","false","false","true","true","String","""android.intent.extra.shortcut.ICON_RESOURCE""","[]","Optional[/**
 * The name of the extra used to define the icon, as a ShortcutIconResource, of a shortcut.
 *
 * @see #ACTION_CREATE_SHORTCUT
 * @see android.content.Intent.ShortcutIconResource
 */
]","\android\content\Intent.java"
"EXTRA_REPLACING","true","false","false","true","true","String","""android.intent.extra.REPLACING""","[]","Optional[/**
 * Used as a boolean extra field in {@link android.content.Intent#ACTION_PACKAGE_REMOVED}
 * intents to indicate that this is a replacement of the package, so this
 * broadcast will immediately be followed by an add broadcast for a
 * different version of the same package.
 */
]","\android\content\Intent.java"
"EXTRA_CHANGED_COMPONENT_NAME","true","false","false","true","true","String","""android.intent.extra.changed_component_name""","[@Deprecated]","Optional[/**
 * @deprecated See {@link #EXTRA_CHANGED_COMPONENT_NAME_LIST}; this field
 * will contain only the first name in the list.
 */
]","\android\content\Intent.java"
"FLAG_ACTIVITY_MULTIPLE_TASK","true","false","false","true","true","int","0x08000000","[]","Optional[/**
 * <strong>Do not use this flag unless you are implementing your own
 * top-level application launcher.</strong>  Used in conjunction with
 * {@link #FLAG_ACTIVITY_NEW_TASK} to disable the
 * behavior of bringing an existing task to the foreground.  When set,
 * a new task is <em>always</em> started to host the Activity for the
 * Intent, regardless of whether there is already an existing task running
 * the same thing.
 *
 * <p><strong>Because the default system does not include graphical task management,
 * you should not use this flag unless you provide some way for a user to
 * return back to the tasks you have launched.</strong>
 *
 * <p>This flag is ignored if
 * {@link #FLAG_ACTIVITY_NEW_TASK} is not set.
 *
 * <p>See <a href=""{@docRoot}guide/topics/fundamentals.html#acttask"">Application Fundamentals:
 * Activities and Tasks</a> for more details on tasks.
 */
]","\android\content\Intent.java"
"ACTION_VOICE_COMMAND","true","false","false","true","true","String","""android.intent.action.VOICE_COMMAND""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Start Voice Command.
 * <p>Input: Nothing.
 * <p>Output: Nothing.
 */
]","\android\content\Intent.java"
"mComponent","false","false","true","false","false","ComponentName","null","[]","Optional.empty","\android\content\Intent.java"
"ACTION_HEADSET_PLUG","true","false","false","true","true","String","""android.intent.action.HEADSET_PLUG""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: Wired Headset plugged in or unplugged.
 *
 * <p>The intent will have the following extra values:
 * <ul>
 * <li><em>state</em> - 0 for unplugged, 1 for plugged. </li>
 * <li><em>name</em> - Headset type, human readable string </li>
 * <li><em>microphone</em> - 1 if headset has a microphone, 0 otherwise </li>
 * </ul>
 * </ul>
 */
]","\android\content\Intent.java"
"ACTION_MAIN","true","false","false","true","true","String","""android.intent.action.MAIN""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Start as a main entry point, does not expect to
 * receive data.
 * <p>Input: nothing
 * <p>Output: nothing
 */
]","\android\content\Intent.java"
"ACTION_PICK_ACTIVITY","true","false","false","true","true","String","""android.intent.action.PICK_ACTIVITY""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Pick an activity given an intent, returning the class
 * selected.
 * <p>Input: get*Extra field {@link #EXTRA_INTENT} is an Intent
 * used with {@link PackageManager#queryIntentActivities} to determine the
 * set of activities from which to pick.
 * <p>Output: Class name of the activity that was selected.
 */
]","\android\content\Intent.java"
"ACTION_MEDIA_EJECT","true","false","false","true","true","String","""android.intent.action.MEDIA_EJECT""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  User has expressed the desire to remove the external storage media.
 * Applications should close all files they have open within the mount point when they receive this intent.
 * The path to the mount point for the media to be ejected is contained in the Intent.mData field.
 */
]","\android\content\Intent.java"
"ACTION_MEDIA_MOUNTED","true","false","false","true","true","String","""android.intent.action.MEDIA_MOUNTED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  External media is present and mounted at its mount point.
 * The path to the mount point for the removed media is contained in the Intent.mData field.
 * The Intent contains an extra with name ""read-only"" and Boolean value to indicate if the
 * media was mounted read only.
 */
]","\android\content\Intent.java"
"ACTION_DEVICE_STORAGE_FULL","true","false","false","true","true","String","""android.intent.action.DEVICE_STORAGE_FULL""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  A sticky broadcast that indicates a memory full
 * condition on the device. This is intended for activities that want
 * to be able to fill the data partition completely, leaving only
 * enough free space to prevent system-wide SQLite failures.
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 *
 * {@hide}
 */
]","\android\content\Intent.java"
"ACTION_MEDIA_SCANNER_FINISHED","true","false","false","true","true","String","""android.intent.action.MEDIA_SCANNER_FINISHED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  The media scanner has finished scanning a directory.
 * The path to the scanned directory is contained in the Intent.mData field.
 */
]","\android\content\Intent.java"
"ACTION_TIME_TICK","true","false","false","true","true","String","""android.intent.action.TIME_TICK""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: The current time has changed.  Sent every
 * minute.  You can <em>not</em> receive this through components declared
 * in manifests, only by exlicitly registering for it with
 * {@link Context#registerReceiver(BroadcastReceiver, IntentFilter)
 * Context.registerReceiver()}.
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"ACTION_PACKAGE_REPLACED","true","false","false","true","true","String","""android.intent.action.PACKAGE_REPLACED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: A new version of an application package has been
 * installed, replacing an existing version that was previously installed.
 * The data contains the name of the package.
 * <p>My include the following extras:
 * <ul>
 * <li> {@link #EXTRA_UID} containing the integer uid assigned to the new package.
 * </ul>
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"mHashCode","false","false","true","false","true","int","null","[]","Optional.empty","\android\content\Intent.java"
"FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET","true","false","false","true","true","int","0x00080000","[]","Optional[/**
 * If set, this marks a point in the task's activity stack that should
 * be cleared when the task is reset.  That is, the next time the task
 * is brought to the foreground with
 * {@link #FLAG_ACTIVITY_RESET_TASK_IF_NEEDED} (typically as a result of
 * the user re-launching it from home), this activity and all on top of
 * it will be finished so that the user does not return to them, but
 * instead returns to whatever activity preceeded it.
 *
 * <p>This is useful for cases where you have a logical break in your
 * application.  For example, an e-mail application may have a command
 * to view an attachment, which launches an image view activity to
 * display it.  This activity should be part of the e-mail application's
 * task, since it is a part of the task the user is involved in.  However,
 * if the user leaves that task, and later selects the e-mail app from
 * home, we may like them to return to the conversation they were
 * viewing, not the picture attachment, since that is confusing.  By
 * setting this flag when launching the image viewer, that viewer and
 * any activities it starts will be removed the next time the user returns
 * to mail.
 */
]","\android\content\Intent.java"
"ACTION_CALL_BUTTON","true","false","false","true","true","String","""android.intent.action.CALL_BUTTON""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: The user pressed the ""call"" button to go to the dialer
 * or other appropriate UI for placing a call.
 * <p>Input: Nothing.
 * <p>Output: Nothing.
 */
]","\android\content\Intent.java"
"EXTRA_CLIENT_LABEL","true","false","false","true","true","String","""android.intent.extra.client_label""","[]","Optional[/**
 * @hide
 * Magic extra system code can use when binding, to give a label for
 * who it is that has bound to a service.  This is an integer giving
 * a framework string resource that can be displayed to the user.
 */
]","\android\content\Intent.java"
"EXTRA_DATA_REMOVED","true","false","false","true","true","String","""android.intent.extra.DATA_REMOVED""","[]","Optional[/**
 * Used as a boolean extra field in {@link android.content.Intent#ACTION_PACKAGE_REMOVED}
 * intents to indicate whether this represents a full uninstall (removing
 * both the code and its data) or a partial uninstall (leaving its data,
 * implying that this is an update).
 */
]","\android\content\Intent.java"
"FILL_IN_SOURCE_BOUNDS","true","false","false","true","true","int","1 << 5","[]","Optional[/**
 * Use with {@link #fillIn} to allow the current package value to be
 * overwritten, even if it is already set.
 */
]","\android\content\Intent.java"
"CATEGORY_DEFAULT","true","false","false","true","true","String","""android.intent.category.DEFAULT""","[@SdkConstant(SdkConstantType.INTENT_CATEGORY)]","Optional[/**
 * Set if the activity should be an option for the default action
 * (center press) to perform on a piece of data.  Setting this will
 * hide from the user any activities without it set when performing an
 * action on some data.  Note that this is normal -not- set in the
 * Intent when initiating an action -- it is for use in intent filters
 * specified in packages.
 */
]","\android\content\Intent.java"
"EXTRA_UID","true","false","false","true","true","String","""android.intent.extra.UID""","[]","Optional[/**
 * Used as an int extra field in {@link android.content.Intent#ACTION_UID_REMOVED}
 * intents to supply the uid the package had been assigned.  Also an optional
 * extra in {@link android.content.Intent#ACTION_PACKAGE_REMOVED} or
 * {@link android.content.Intent#ACTION_PACKAGE_CHANGED} for the same
 * purpose.
 */
]","\android\content\Intent.java"
"FLAG_FROM_BACKGROUND","true","false","false","true","true","int","0x00000004","[]","Optional[/**
 * Can be set by the caller to indicate that this Intent is coming from
 * a background operation, not from direct user interaction.
 */
]","\android\content\Intent.java"
"ACTION_PACKAGE_ADDED","true","false","false","true","true","String","""android.intent.action.PACKAGE_ADDED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: A new application package has been installed on the
 * device. The data contains the name of the package.  Note that the
 * newly installed package does <em>not</em> receive this broadcast.
 * <p>My include the following extras:
 * <ul>
 * <li> {@link #EXTRA_UID} containing the integer uid assigned to the new package.
 * <li> {@link #EXTRA_REPLACING} is set to true if this is following
 * an {@link #ACTION_PACKAGE_REMOVED} broadcast for the same package.
 * </ul>
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"ACTION_USER_PRESENT","true","false","false","true","true","String","""android.intent.action.USER_PRESENT""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: Sent when the user is present after device wakes up (e.g when the
 * keyguard is gone).
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"ACTION_CLOSE_SYSTEM_DIALOGS","true","false","false","true","true","String","""android.intent.action.CLOSE_SYSTEM_DIALOGS""","[]","Optional[/**
 * Broadcast Action: This is broadcast when a user action should request a
 * temporary system dialog to dismiss.  Some examples of temporary system
 * dialogs are the notification window-shade and the recent tasks dialog.
 */
]","\android\content\Intent.java"
"ACTION_APP_ERROR","true","false","false","true","true","String","""android.intent.action.APP_ERROR""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: The user pressed the ""Report"" button in the crash/ANR dialog.
 * This intent is delivered to the package which installed the application, usually
 * the Market.
 * <p>Input: No data is specified. The bug report is passed in using
 * an {@link #EXTRA_BUG_REPORT} field.
 * <p>Output: Nothing.
 * @hide
 */
]","\android\content\Intent.java"
"EXTRA_DONT_KILL_APP","true","false","false","true","true","String","""android.intent.extra.DONT_KILL_APP""","[]","Optional[/**
 * Used as an boolean extra field in {@link android.content.Intent#ACTION_PACKAGE_REMOVED} or
 * {@link android.content.Intent#ACTION_PACKAGE_CHANGED} intents to override the default action
 * of restarting the application.
 */
]","\android\content\Intent.java"
"FLAG_ACTIVITY_RESET_TASK_IF_NEEDED","true","false","false","true","true","int","0x00200000","[]","Optional[/**
 * If set, and this activity is either being started in a new task or
 * bringing to the top an existing task, then it will be launched as
 * the front door of the task.  This will result in the application of
 * any affinities needed to have that task in the proper state (either
 * moving activities to or from it), or simply resetting that task to
 * its initial state if needed.
 */
]","\android\content\Intent.java"
"EXTRA_CHANGED_COMPONENT_NAME_LIST","true","false","false","true","true","String","""android.intent.extra.changed_component_name_list""","[]","Optional[/**
 * This field is part of {@link android.content.Intent#ACTION_PACKAGE_CHANGED},
 * and contains a string array of all of the components that have changed.
 */
]","\android\content\Intent.java"
"CATEGORY_TEST","true","false","false","true","true","String","""android.intent.category.TEST""","[]","Optional[/**
 * To be used as a test (not part of the normal user experience).
 */
]","\android\content\Intent.java"
"FILL_IN_PACKAGE","true","false","false","true","true","int","1 << 4","[]","Optional[/**
 * Use with {@link #fillIn} to allow the current package value to be
 * overwritten, even if it is already set.
 */
]","\android\content\Intent.java"
"ACTION_MEDIA_UNMOUNTED","true","false","false","true","true","String","""android.intent.action.MEDIA_UNMOUNTED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  External media is present, but not mounted at its mount point.
 * The path to the mount point for the removed media is contained in the Intent.mData field.
 */
]","\android\content\Intent.java"
"ACTION_TIMEZONE_CHANGED","true","false","false","true","true","String","""android.intent.action.TIMEZONE_CHANGED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: The timezone has changed. The intent will have the following extra values:</p>
 * <ul>
 * <li><em>time-zone</em> - The java.util.TimeZone.getID() value identifying the new time zone.</li>
 * </ul>
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"EXTRA_SHORTCUT_INTENT","true","false","false","true","true","String","""android.intent.extra.shortcut.INTENT""","[]","Optional[/**
 * The name of the extra used to define the Intent of a shortcut.
 *
 * @see #ACTION_CREATE_SHORTCUT
 */
]","\android\content\Intent.java"
"ACTION_POWER_USAGE_SUMMARY","true","false","false","true","true","String","""android.intent.action.POWER_USAGE_SUMMARY""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show power usage information to the user.
 * <p>Input: Nothing.
 * <p>Output: Nothing.
 */
]","\android\content\Intent.java"
"ACTION_DATE_CHANGED","true","false","false","true","true","String","""android.intent.action.DATE_CHANGED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: The date has changed.
 */
]","\android\content\Intent.java"
"ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE","true","false","false","true","true","String","""android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: Resources for a set of packages are currently
 * unavailable since the media on which they exist is unavailable.
 * The extra data {@link #EXTRA_CHANGED_PACKAGE_LIST} contains a
 * list of packages whose availability changed.
 * The extra data {@link #EXTRA_CHANGED_UID_LIST} contains a
 * list of uids of packages whose availability changed.
 * The specified set of packages can no longer be
 * launched and are practically unavailable on the system.
 * <p>Inclues the following extras:
 * <ul>
 * <li> {@link #EXTRA_CHANGED_PACKAGE_LIST} is the set of packages
 * whose resources are no longer available.
 * {@link #EXTRA_CHANGED_UID_LIST} is the set of packages
 * whose resources are no longer available.
 * </ul>
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"EXTRA_PACKAGES","true","false","false","true","true","String","""android.intent.extra.PACKAGES""","[]","Optional[/**
 * @hide String array of package names.
 */
]","\android\content\Intent.java"
"ACTION_NEW_OUTGOING_CALL","true","false","false","true","true","String","""android.intent.action.NEW_OUTGOING_CALL""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: An outgoing call is about to be placed.
 *
 * <p>The Intent will have the following extra value:
 * <ul>
 * <li><em>{@link android.content.Intent#EXTRA_PHONE_NUMBER}</em> -
 * the phone number originally intended to be dialed.</li>
 * </ul>
 * <p>Once the broadcast is finished, the resultData is used as the actual
 * number to call.  If  <code>null</code>, no call will be placed.</p>
 * <p>It is perfectly acceptable for multiple receivers to process the
 * outgoing call in turn: for example, a parental control application
 * might verify that the user is authorized to place the call at that
 * time, then a number-rewriting application might add an area code if
 * one was not specified.</p>
 * <p>For consistency, any receiver whose purpose is to prohibit phone
 * calls should have a priority of 0, to ensure it will see the final
 * phone number to be dialed.
 * Any receiver whose purpose is to rewrite phone numbers to be called
 * should have a positive priority.
 * Negative priorities are reserved for the system for this broadcast;
 * using them may cause problems.</p>
 * <p>Any BroadcastReceiver receiving this Intent <em>must not</em>
 * abort the broadcast.</p>
 * <p>Emergency calls cannot be intercepted using this mechanism, and
 * other calls cannot be modified to call emergency numbers using this
 * mechanism.
 * <p>You must hold the
 * {@link android.Manifest.permission#PROCESS_OUTGOING_CALLS}
 * permission to receive this Intent.</p>
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"FLAG_GRANT_READ_URI_PERMISSION","true","false","false","true","true","int","0x00000001","[]","Optional[/**
 * If set, the recipient of this Intent will be granted permission to
 * perform read operations on the Uri in the Intent's data.
 */
]","\android\content\Intent.java"
"ACTION_QUERY_PACKAGE_RESTART","true","false","false","true","true","String","""android.intent.action.QUERY_PACKAGE_RESTART""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * @hide
 * Broadcast Action: Ask system services if there is any reason to
 * restart the given package.  The data contains the name of the
 * package.
 * <ul>
 * <li> {@link #EXTRA_UID} containing the integer uid assigned to the package.
 * <li> {@link #EXTRA_PACKAGES} String array of all packages to check.
 * </ul>
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"FILL_IN_COMPONENT","true","false","false","true","true","int","1 << 3","[]","Optional[/**
 * Use with {@link #fillIn} to allow the current component value to be
 * overwritten, even if it is already set.
 */
]","\android\content\Intent.java"
"ACTION_ATTACH_DATA","true","false","false","true","true","String","""android.intent.action.ATTACH_DATA""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Used to indicate that some piece of data should be attached to some other
 * place.  For example, image data could be attached to a contact.  It is up
 * to the recipient to decide where the data should be attached; the intent
 * does not specify the ultimate destination.
 * <p>Input: {@link #getData} is URI of data to be attached.
 * <p>Output: nothing.
 */
]","\android\content\Intent.java"
"ACTION_LOCALE_CHANGED","true","false","false","true","true","String","""android.intent.action.LOCALE_CHANGED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: The current device's locale has changed.
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"EXTRA_TEMPLATE","true","false","false","true","true","String","""android.intent.extra.TEMPLATE""","[]","Optional[/**
 * The initial data to place in a newly created record.  Use with
 * {@link #ACTION_INSERT}.  The data here is a Map containing the same
 * fields as would be given to the underlying ContentProvider.insert()
 * call.
 */
]","\android\content\Intent.java"
"ACTION_ANSWER","true","false","false","true","true","String","""android.intent.action.ANSWER""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Handle an incoming phone call.
 * <p>Input: nothing.
 * <p>Output: nothing.
 */
]","\android\content\Intent.java"
"ACTION_SEARCH","true","false","false","true","true","String","""android.intent.action.SEARCH""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Perform a search.
 * <p>Input: {@link android.app.SearchManager#QUERY getStringExtra(SearchManager.QUERY)}
 * is the text to search for.  If empty, simply
 * enter your search results Activity with the search UI activated.
 * <p>Output: nothing.
 */
]","\android\content\Intent.java"
"resourceName","true","false","false","false","false","String","null","[]","Optional[/**
 * The resource name of the icon, including package, name and type.
 */
]","\android\content\Intent.java"
"ACTION_MEDIA_SCANNER_STARTED","true","false","false","true","true","String","""android.intent.action.MEDIA_SCANNER_STARTED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  The media scanner has started scanning a directory.
 * The path to the directory being scanned is contained in the Intent.mData field.
 */
]","\android\content\Intent.java"
"EXTRA_DOCK_STATE_UNDOCKED","true","false","false","true","true","int","0","[]","Optional[/**
 * Used as an int value for {@link android.content.Intent#EXTRA_DOCK_STATE}
 * to represent that the phone is not in any dock.
 */
]","\android\content\Intent.java"
"ACTION_MEDIA_BUTTON","true","false","false","true","true","String","""android.intent.action.MEDIA_BUTTON""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  The ""Media Button"" was pressed.  Includes a single
 * extra field, {@link #EXTRA_KEY_EVENT}, containing the key event that
 * caused the broadcast.
 */
]","\android\content\Intent.java"
"ACTION_AIRPLANE_MODE_CHANGED","true","false","false","true","true","String","""android.intent.action.AIRPLANE_MODE""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * <p>Broadcast Action: The user has switched the phone into or out of Airplane Mode. One or
 * more radios have been turned off or on. The intent will have the following extra value:</p>
 * <ul>
 * <li><em>state</em> - A boolean value indicating whether Airplane Mode is on. If true,
 * then cell radio and possibly other radios such as bluetooth or WiFi may have also been
 * turned off</li>
 * </ul>
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"FLAG_ACTIVITY_PREVIOUS_IS_TOP","true","false","false","true","true","int","0x01000000","[]","Optional[/**
 * If set and this intent is being used to launch a new activity from an
 * existing one, the current activity will not be counted as the top
 * activity for deciding whether the new intent should be delivered to
 * the top instead of starting a new one.  The previous activity will
 * be used as the top, with the assumption being that the current activity
 * will finish itself immediately.
 */
]","\android\content\Intent.java"
"ACTION_MEDIA_SHARED","true","false","false","true","true","String","""android.intent.action.MEDIA_SHARED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  External media is unmounted because it is being shared via USB mass storage.
 * The path to the mount point for the shared media is contained in the Intent.mData field.
 */
]","\android\content\Intent.java"
"ACTION_CALL","true","false","false","true","true","String","""android.intent.action.CALL""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Perform a call to someone specified by the data.
 * <p>Input: If nothing, an empty dialer is started; else {@link #getData}
 * is URI of a phone number to be dialed or a tel: URI of an explicit phone
 * number.
 * <p>Output: nothing.
 *
 * <p>Note: there will be restrictions on which applications can initiate a
 * call; most applications should use the {@link #ACTION_DIAL}.
 * <p>Note: this Intent <strong>cannot</strong> be used to call emergency
 * numbers.  Applications can <strong>dial</strong> emergency numbers using
 * {@link #ACTION_DIAL}, however.
 */
]","\android\content\Intent.java"
"ACTION_SCREEN_OFF","true","false","false","true","true","String","""android.intent.action.SCREEN_OFF""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: Sent after the screen turns off.
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"CATEGORY_CAR_DOCK","true","false","false","true","true","String","""android.intent.category.CAR_DOCK""","[@SdkConstant(SdkConstantType.INTENT_CATEGORY)]","Optional[/**
 * An activity to run when device is inserted into a car dock.
 * Used with {@link #ACTION_MAIN} to launch an activity.  For more
 * information, see {@link android.app.UiModeManager}.
 */
]","\android\content\Intent.java"
"ACTION_DEVICE_STORAGE_OK","true","false","false","true","true","String","""android.intent.action.DEVICE_STORAGE_OK""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  Indicates low memory condition on the device no longer exists
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"FLAG_RECEIVER_REPLACE_PENDING","true","false","false","true","true","int","0x20000000","[]","Optional[/**
 * If set, when sending a broadcast the new broadcast will replace
 * any existing pending broadcast that matches it.  Matching is defined
 * by {@link Intent#filterEquals(Intent) Intent.filterEquals} returning
 * true for the intents of the two broadcasts.  When a match is found,
 * the new broadcast (and receivers associated with it) will replace the
 * existing one in the pending broadcast list, remaining at the same
 * position in the list.
 *
 * <p>This flag is most typically used with sticky broadcasts, which
 * only care about delivering the most recent values of the broadcast
 * to their receivers.
 */
]","\android\content\Intent.java"
"FLAG_GRANT_WRITE_URI_PERMISSION","true","false","false","true","true","int","0x00000002","[]","Optional[/**
 * If set, the recipient of this Intent will be granted permission to
 * perform write operations on the Uri in the Intent's data.
 */
]","\android\content\Intent.java"
"METADATA_SETUP_VERSION","true","false","false","true","true","String","""android.SETUP_VERSION""","[]","Optional[/**
 * A string associated with a {@link #ACTION_UPGRADE_SETUP} activity
 * describing the last run version of the platform that was setup.
 * @hide
 */
]","\android\content\Intent.java"
"ACTION_INSERT_OR_EDIT","true","false","false","true","true","String","""android.intent.action.INSERT_OR_EDIT""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Pick an existing item, or insert a new item, and then edit it.
 * <p>Input: {@link #getType} is the desired MIME type of the item to create or edit.
 * The extras can contain type specific data to pass through to the editing/creating
 * activity.
 * <p>Output: The URI of the item that was picked.  This must be a content:
 * URI so that any receiver can access it.
 */
]","\android\content\Intent.java"
"CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST","true","false","false","true","true","String","""android.intent.category.FRAMEWORK_INSTRUMENTATION_TEST""","[]","Optional[/**
 * To be used as code under test for framework instrumentation tests.
 */
]","\android\content\Intent.java"
"mSourceBounds","false","false","true","false","false","Rect","null","[]","Optional.empty","\android\content\Intent.java"
"EXTRA_DOCK_STATE_CAR","true","false","false","true","true","int","2","[]","Optional[/**
 * Used as an int value for {@link android.content.Intent#EXTRA_DOCK_STATE}
 * to represent that the phone is in a car dock.
 */
]","\android\content\Intent.java"
"ACTION_WEB_SEARCH","true","false","false","true","true","String","""android.intent.action.WEB_SEARCH""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Perform a web search.
 * <p>
 * Input: {@link android.app.SearchManager#QUERY
 * getStringExtra(SearchManager.QUERY)} is the text to search for. If it is
 * a url starts with http or https, the site will be opened. If it is plain
 * text, Google search will be applied.
 * <p>
 * Output: nothing.
 */
]","\android\content\Intent.java"
"ACTION_DEVICE_STORAGE_LOW","true","false","false","true","true","String","""android.intent.action.DEVICE_STORAGE_LOW""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  A sticky broadcast that indicates low memory
 * condition on the device
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"FLAG_ACTIVITY_CLEAR_TOP","true","false","false","true","true","int","0x04000000","[]","Optional[/**
 * If set, and the activity being launched is already running in the
 * current task, then instead of launching a new instance of that activity,
 * all of the other activities on top of it will be closed and this Intent
 * will be delivered to the (now on top) old activity as a new Intent.
 *
 * <p>For example, consider a task consisting of the activities: A, B, C, D.
 * If D calls startActivity() with an Intent that resolves to the component
 * of activity B, then C and D will be finished and B receive the given
 * Intent, resulting in the stack now being: A, B.
 *
 * <p>The currently running instance of activity B in the above example will
 * either receive the new intent you are starting here in its
 * onNewIntent() method, or be itself finished and restarted with the
 * new intent.  If it has declared its launch mode to be ""multiple"" (the
 * default) and you have not set {@link #FLAG_ACTIVITY_SINGLE_TOP} in
 * the same intent, then it will be finished and re-created; for all other
 * launch modes or if {@link #FLAG_ACTIVITY_SINGLE_TOP} is set then this
 * Intent will be delivered to the current instance's onNewIntent().
 *
 * <p>This launch mode can also be used to good effect in conjunction with
 * {@link #FLAG_ACTIVITY_NEW_TASK}: if used to start the root activity
 * of a task, it will bring any currently running instance of that task
 * to the foreground, and then clear it to its root state.  This is
 * especially useful, for example, when launching an activity from the
 * notification manager.
 *
 * <p>See <a href=""{@docRoot}guide/topics/fundamentals.html#acttask"">Application Fundamentals:
 * Activities and Tasks</a> for more details on tasks.
 */
]","\android\content\Intent.java"
"ACTION_CHOOSER","true","false","false","true","true","String","""android.intent.action.CHOOSER""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Display an activity chooser, allowing the user to pick
 * what they want to before proceeding.  This can be used as an alternative
 * to the standard activity picker that is displayed by the system when
 * you try to start an activity with multiple possible matches, with these
 * differences in behavior:
 * <ul>
 * <li>You can specify the title that will appear in the activity chooser.
 * <li>The user does not have the option to make one of the matching
 * activities a preferred activity, and all possible activities will
 * always be shown even if one of them is currently marked as the
 * preferred activity.
 * </ul>
 * <p>
 * This action should be used when the user will naturally expect to
 * select an activity in order to proceed.  An example if when not to use
 * it is when the user clicks on a ""mailto:"" link.  They would naturally
 * expect to go directly to their mail app, so startActivity() should be
 * called directly: it will
 * either launch the current preferred app, or put up a dialog allowing the
 * user to pick an app to use and optionally marking that as preferred.
 * <p>
 * In contrast, if the user is selecting a menu item to send a picture
 * they are viewing to someone else, there are many different things they
 * may want to do at this point: send it through e-mail, upload it to a
 * web service, etc.  In this case the CHOOSER action should be used, to
 * always present to the user a list of the things they can do, with a
 * nice title given by the caller such as ""Send this photo with:"".
 * <p>
 * As a convenience, an Intent of this form can be created with the
 * {@link #createChooser} function.
 * <p>Input: No data should be specified.  get*Extra must have
 * a {@link #EXTRA_INTENT} field containing the Intent being executed,
 * and can optionally have a {@link #EXTRA_TITLE} field containing the
 * title text to display in the chooser.
 * <p>Output: Depends on the protocol of {@link #EXTRA_INTENT}.
 */
]","\android\content\Intent.java"
"EXTRA_REMOTE_INTENT_TOKEN","true","false","false","true","true","String","""android.intent.extra.remote_intent_token""","[]","Optional[/**
 * Used in the extra field in the remote intent. It's astring token passed with the
 * remote intent.
 */
]","\android\content\Intent.java"
"CATEGORY_INFO","true","false","false","true","true","String","""android.intent.category.INFO""","[@SdkConstant(SdkConstantType.INTENT_CATEGORY)]","Optional[/**
 * Provides information about the package it is in; typically used if
 * a package does not contain a {@link #CATEGORY_LAUNCHER} to provide
 * a front-door to the user without having to be shown in the all apps list.
 */
]","\android\content\Intent.java"
"FILL_IN_ACTION","true","false","false","true","true","int","1 << 0","[]","Optional[/**
 * Use with {@link #fillIn} to allow the current action value to be
 * overwritten, even if it is already set.
 */
]","\android\content\Intent.java"
"mPackage","false","false","true","false","false","String","null","[]","Optional.empty","\android\content\Intent.java"
"ACTION_PACKAGE_INSTALL","true","false","false","true","true","String","""android.intent.action.PACKAGE_INSTALL""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: Trigger the download and eventual installation
 * of a package.
 * <p>Input: {@link #getData} is the URI of the package file to download.
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"ACTION_MANAGE_PACKAGE_STORAGE","true","false","false","true","true","String","""android.intent.action.MANAGE_PACKAGE_STORAGE""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  Indicates low memory condition notification acknowledged by user
 * and package management should be started.
 * This is triggered by the user from the ACTION_DEVICE_STORAGE_LOW
 * notification.
 */
]","\android\content\Intent.java"
"ACTION_PICK","true","false","false","true","true","String","""android.intent.action.PICK""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Pick an item from the data, returning what was selected.
 * <p>Input: {@link #getData} is URI containing a directory of data
 * (vnd.android.cursor.dir/*) from which to pick an item.
 * <p>Output: The URI of the item that was picked.
 */
]","\android\content\Intent.java"
"EXTRA_BUG_REPORT","true","false","false","true","true","String","""android.intent.extra.BUG_REPORT""","[]","Optional[/**
 * Used as a parcelable extra field in {@link #ACTION_APP_ERROR}, containing
 * the bug report.
 *
 * @hide
 */
]","\android\content\Intent.java"
"CATEGORY_OPENABLE","true","false","false","true","true","String","""android.intent.category.OPENABLE""","[@SdkConstant(SdkConstantType.INTENT_CATEGORY)]","Optional[/**
 * Used to indicate that a GET_CONTENT intent only wants URIs that can be opened with
 * ContentResolver.openInputStream. Openable URIs must support the columns in OpenableColumns
 * when queried, though it is allowable for those columns to be blank.
 */
]","\android\content\Intent.java"
"FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS","true","false","false","true","true","int","0x00800000","[]","Optional[/**
 * If set, the new activity is not kept in the list of recently launched
 * activities.
 */
]","\android\content\Intent.java"
"URI_INTENT_SCHEME","true","false","false","true","true","int","1 << 0","[]","Optional[/**
 * Flag for use with {@link #toUri} and {@link #parseUri}: the URI string
 * always has the ""intent:"" scheme.  This syntax can be used when you want
 * to later disambiguate between URIs that are intended to describe an
 * Intent vs. all others that should be treated as raw URIs.  When used
 * with {@link #parseUri}, any other scheme will result in a generic
 * VIEW action for that raw URI.
 */
]","\android\content\Intent.java"
"ACTION_PACKAGE_RESTARTED","true","false","false","true","true","String","""android.intent.action.PACKAGE_RESTARTED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: The user has restarted a package, and all of its
 * processes have been killed.  All runtime state
 * associated with it (processes, alarms, notifications, etc) should
 * be removed.  Note that the restarted package does <em>not</em>
 * receive this broadcast.
 * The data contains the name of the package.
 * <ul>
 * <li> {@link #EXTRA_UID} containing the integer uid assigned to the package.
 * </ul>
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"FLAG_RECEIVER_BOOT_UPGRADE","true","false","false","true","true","int","0x08000000","[]","Optional[/**
 * Set when this broadcast is for a boot upgrade, a special mode that
 * allows the broadcast to be sent before the system is ready and launches
 * the app process with no providers running in it.
 * @hide
 */
]","\android\content\Intent.java"
"ACTION_UMS_CONNECTED","true","false","false","true","true","String","""android.intent.action.UMS_CONNECTED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  The device has entered USB Mass Storage mode.
 * This is used mainly for the USB Settings panel.
 * Apps should listen for ACTION_MEDIA_MOUNTED and ACTION_MEDIA_UNMOUNTED broadcasts to be notified
 * when the SD card file system is mounted or unmounted
 */
]","\android\content\Intent.java"
"mCategories","false","false","true","false","false","HashSet<String>","null","[]","Optional.empty","\android\content\Intent.java"
"ACTION_DEFAULT","true","false","false","true","true","String","ACTION_VIEW","[]","Optional[/**
 * A synonym for {@link #ACTION_VIEW}, the ""standard"" action that is
 * performed on a piece of data.
 */
]","\android\content\Intent.java"
"CATEGORY_BROWSABLE","true","false","false","true","true","String","""android.intent.category.BROWSABLE""","[@SdkConstant(SdkConstantType.INTENT_CATEGORY)]","Optional[/**
 * Activities that can be safely invoked from a browser must support this
 * category.  For example, if the user is viewing a web page or an e-mail
 * and clicks on a link in the text, the Intent generated execute that
 * link will require the BROWSABLE category, so that only activities
 * supporting this category will be considered as possible actions.  By
 * supporting this category, you are promising that there is nothing
 * damaging (without user intervention) that can happen by invoking any
 * matching Intent.
 */
]","\android\content\Intent.java"
"FILL_IN_CATEGORIES","true","false","false","true","true","int","1 << 2","[]","Optional[/**
 * Use with {@link #fillIn} to allow the current categories to be
 * overwritten, even if they are already set.
 */
]","\android\content\Intent.java"
"ACTION_DOCK_EVENT","true","false","false","true","true","String","""android.intent.action.DOCK_EVENT""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  A sticky broadcast for changes in the physical
 * docking state of the device.
 *
 * <p>The intent will have the following extra values:
 * <ul>
 * <li><em>{@link #EXTRA_DOCK_STATE}</em> - the current dock
 * state, indicating which dock the device is physically in.</li>
 * </ul>
 * <p>This is intended for monitoring the current physical dock state.
 * See {@link android.app.UiModeManager} for the normal API dealing with
 * dock mode changes.
 */
]","\android\content\Intent.java"
"EXTRA_KEY_CONFIRM","true","false","false","true","true","String","""android.intent.extra.KEY_CONFIRM""","[]","Optional[/**
 * Set to true in {@link #ACTION_REQUEST_SHUTDOWN} to request confirmation from the user
 * before shutting down.
 *
 * {@hide}
 */
]","\android\content\Intent.java"
"ACTION_INPUT_METHOD_CHANGED","true","false","false","true","true","String","""android.intent.action.INPUT_METHOD_CHANGED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: An input method has been changed.
 */
]","\android\content\Intent.java"
"ACTION_SEND_MULTIPLE","true","false","false","true","true","String","""android.intent.action.SEND_MULTIPLE""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Deliver multiple data to someone else.
 * <p>
 * Like ACTION_SEND, except the data is multiple.
 * <p>
 * Input: {@link #getType} is the MIME type of the data being sent.
 * get*ArrayListExtra can have either a {@link #EXTRA_TEXT} or {@link
 * #EXTRA_STREAM} field, containing the data to be sent.
 * <p>
 * Multiple types are supported, and receivers should handle mixed types
 * whenever possible. The right way for the receiver to check them is to
 * use the content resolver on each URI. The intent sender should try to
 * put the most concrete mime type in the intent type, but it can fall
 * back to {@literal <type>/*} or {@literal *}/* as needed.
 * <p>
 * e.g. if you are sending image/jpg and image/jpg, the intent's type can
 * be image/jpg, but if you are sending image/jpg and image/png, then the
 * intent's type should be image/*.
 * <p>
 * Optional standard extras, which may be interpreted by some recipients as
 * appropriate, are: {@link #EXTRA_EMAIL}, {@link #EXTRA_CC},
 * {@link #EXTRA_BCC}, {@link #EXTRA_SUBJECT}.
 * <p>
 * Output: nothing.
 */
]","\android\content\Intent.java"
"EXTRA_CHANGED_UID_LIST","true","false","false","true","true","String","""android.intent.extra.changed_uid_list""","[]","Optional[/**
 * This field is part of
 * {@link android.content.Intent#ACTION_EXTERNAL_APPLICATIONS_AVAILABLE},
 * {@link android.content.Intent#ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE}
 * and contains an integer array of uids of all of the components
 * that have changed.
 */
]","\android\content\Intent.java"
"EXTRA_STREAM","true","false","false","true","true","String","""android.intent.extra.STREAM""","[]","Optional[/**
 * A content: URI holding a stream of data associated with the Intent,
 * used with {@link #ACTION_SEND} to supply the data being sent.
 */
]","\android\content\Intent.java"
"FLAG_ACTIVITY_NEW_TASK","true","false","false","true","true","int","0x10000000","[]","Optional[/**
 * If set, this activity will become the start of a new task on this
 * history stack.  A task (from the activity that started it to the
 * next task activity) defines an atomic group of activities that the
 * user can move to.  Tasks can be moved to the foreground and background;
 * all of the activities inside of a particular task always remain in
 * the same order.  See
 * <a href=""{@docRoot}guide/topics/fundamentals.html#acttask"">Application Fundamentals:
 * Activities and Tasks</a> for more details on tasks.
 *
 * <p>This flag is generally used by activities that want
 * to present a ""launcher"" style behavior: they give the user a list of
 * separate things that can be done, which otherwise run completely
 * independently of the activity launching them.
 *
 * <p>When using this flag, if a task is already running for the activity
 * you are now starting, then a new activity will not be started; instead,
 * the current task will simply be brought to the front of the screen with
 * the state it was last in.  See {@link #FLAG_ACTIVITY_MULTIPLE_TASK} for a flag
 * to disable this behavior.
 *
 * <p>This flag can not be used when the caller is requesting a result from
 * the activity being launched.
 */
]","\android\content\Intent.java"
"ACTION_SCREEN_ON","true","false","false","true","true","String","""android.intent.action.SCREEN_ON""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: Sent after the screen turns on.
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"CATEGORY_TAB","true","false","false","true","true","String","""android.intent.category.TAB""","[@SdkConstant(SdkConstantType.INTENT_CATEGORY)]","Optional[/**
 * Intended to be used as a tab inside of an containing TabActivity.
 */
]","\android\content\Intent.java"
"ACTION_GET_CONTENT","true","false","false","true","true","String","""android.intent.action.GET_CONTENT""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Allow the user to select a particular kind of data and
 * return it.  This is different than {@link #ACTION_PICK} in that here we
 * just say what kind of data is desired, not a URI of existing data from
 * which the user can pick.  A ACTION_GET_CONTENT could allow the user to
 * create the data as it runs (for example taking a picture or recording a
 * sound), let them browser over the web and download the desired data,
 * etc.
 * <p>
 * There are two main ways to use this action: if you want an specific kind
 * of data, such as a person contact, you set the MIME type to the kind of
 * data you want and launch it with {@link Context#startActivity(Intent)}.
 * The system will then launch the best application to select that kind
 * of data for you.
 * <p>
 * You may also be interested in any of a set of types of content the user
 * can pick.  For example, an e-mail application that wants to allow the
 * user to add an attachment to an e-mail message can use this action to
 * bring up a list of all of the types of content the user can attach.
 * <p>
 * In this case, you should wrap the GET_CONTENT intent with a chooser
 * (through {@link #createChooser}), which will give the proper interface
 * for the user to pick how to send your data and allow you to specify
 * a prompt indicating what they are doing.  You will usually specify a
 * broad MIME type (such as image/* or {@literal *}/*), resulting in a
 * broad range of content types the user can select from.
 * <p>
 * When using such a broad GET_CONTENT action, it is often desireable to
 * only pick from data that can be represented as a stream.  This is
 * accomplished by requiring the {@link #CATEGORY_OPENABLE} in the Intent.
 * <p>
 * Input: {@link #getType} is the desired MIME type to retrieve.  Note
 * that no URI is supplied in the intent, as there are no constraints on
 * where the returned data originally comes from.  You may also include the
 * {@link #CATEGORY_OPENABLE} if you can only accept data that can be
 * opened as a stream.
 * <p>
 * Output: The URI of the item that was picked.  This must be a content:
 * URI so that any receiver can access it.
 */
]","\android\content\Intent.java"
"FLAG_RECEIVER_REGISTERED_ONLY","true","false","false","true","true","int","0x40000000","[]","Optional[/**
 * If set, when sending a broadcast only registered receivers will be
 * called -- no BroadcastReceiver components will be launched.
 */
]","\android\content\Intent.java"
"FLAG_ACTIVITY_REORDER_TO_FRONT","true","false","false","true","true","int","0X00020000","[]","Optional[/**
 * If set in an Intent passed to {@link Context#startActivity Context.startActivity()},
 * this flag will cause the launched activity to be brought to the front of its
 * task's history stack if it is already running.
 *
 * <p>For example, consider a task consisting of four activities: A, B, C, D.
 * If D calls startActivity() with an Intent that resolves to the component
 * of activity B, then B will be brought to the front of the history stack,
 * with this resulting order:  A, C, D, B.
 *
 * This flag will be ignored if {@link #FLAG_ACTIVITY_CLEAR_TOP} is also
 * specified.
 */
]","\android\content\Intent.java"
"ACTION_MEDIA_UNMOUNTABLE","true","false","false","true","true","String","""android.intent.action.MEDIA_UNMOUNTABLE""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  External media is present but cannot be mounted.
 * The path to the mount point for the removed media is contained in the Intent.mData field.
 */
]","\android\content\Intent.java"
"ACTION_BATTERY_OKAY","true","false","false","true","true","String","""android.intent.action.BATTERY_OKAY""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  Indicates the battery is now okay after being low.
 * This will be sent after {@link #ACTION_BATTERY_LOW} once the battery has
 * gone back up to an okay state.
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"EXTRA_CLIENT_INTENT","true","false","false","true","true","String","""android.intent.extra.client_intent""","[]","Optional[/**
 * @hide
 * Magic extra system code can use when binding, to give a PendingIntent object
 * that can be launched for the user to disable the system's use of this
 * service.
 */
]","\android\content\Intent.java"
"ACTION_BUG_REPORT","true","false","false","true","true","String","""android.intent.action.BUG_REPORT""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Show activity for reporting a bug.
 * <p>Input: Nothing.
 * <p>Output: Nothing.
 */
]","\android\content\Intent.java"
"ACTION_FACTORY_TEST","true","false","false","true","true","String","""android.intent.action.FACTORY_TEST""","[]","Optional[/**
 * Activity Action: Main entry point for factory tests.  Only used when
 * the device is booting in factory test node.  The implementing package
 * must be installed in the system image.
 * <p>Input: nothing
 * <p>Output: nothing
 */
]","\android\content\Intent.java"
"ACTION_WALLPAPER_CHANGED","true","false","false","true","true","String","""android.intent.action.WALLPAPER_CHANGED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  The current system wallpaper has changed.  See
 * {@link android.app.WallpaperManager} for retrieving the new wallpaper.
 */
]","\android\content\Intent.java"
"FLAG_ACTIVITY_NO_ANIMATION","true","false","false","true","true","int","0X00010000","[]","Optional[/**
 * If set in an Intent passed to {@link Context#startActivity Context.startActivity()},
 * this flag will prevent the system from applying an activity transition
 * animation to go to the next activity state.  This doesn't mean an
 * animation will never run -- if another activity change happens that doesn't
 * specify this flag before the activity started here is displayed, then
 * that transition will be used.  This this flag can be put to good use
 * when you are going to do a series of activity operations but the
 * animation seen by the user shouldn't be driven by the first activity
 * change but rather a later one.
 */
]","\android\content\Intent.java"
"ACTION_SENDTO","true","false","false","true","true","String","""android.intent.action.SENDTO""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Send a message to someone specified by the data.
 * <p>Input: {@link #getData} is URI describing the target.
 * <p>Output: nothing.
 */
]","\android\content\Intent.java"
"EXTRA_DOCK_STATE","true","false","false","true","true","String","""android.intent.extra.DOCK_STATE""","[]","Optional[/**
 * Used as an int extra field in {@link android.content.Intent#ACTION_DOCK_EVENT}
 * intents to request the dock state.  Possible values are
 * {@link android.content.Intent#EXTRA_DOCK_STATE_UNDOCKED},
 * {@link android.content.Intent#EXTRA_DOCK_STATE_DESK}, or
 * {@link android.content.Intent#EXTRA_DOCK_STATE_CAR}.
 */
]","\android\content\Intent.java"
"FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY","true","false","false","true","true","int","0x00100000","[]","Optional[/**
 * This flag is not normally set by application code, but set for you by
 * the system if this activity is being launched from history
 * (longpress home key).
 */
]","\android\content\Intent.java"
"FILL_IN_DATA","true","false","false","true","true","int","1 << 1","[]","Optional[/**
 * Use with {@link #fillIn} to allow the current data or type value
 * overwritten, even if it is already set.
 */
]","\android\content\Intent.java"
"EXTRA_SHORTCUT_ICON","true","false","false","true","true","String","""android.intent.extra.shortcut.ICON""","[]","Optional[/**
 * The name of the extra used to define the icon, as a Bitmap, of a shortcut.
 *
 * @see #ACTION_CREATE_SHORTCUT
 */
]","\android\content\Intent.java"
"EXTRA_TEXT","true","false","false","true","true","String","""android.intent.extra.TEXT""","[]","Optional[/**
 * A constant CharSequence that is associated with the Intent, used with
 * {@link #ACTION_SEND} to supply the literal data to be sent.  Note that
 * this may be a styled CharSequence, so you must use
 * {@link Bundle#getCharSequence(String) Bundle.getCharSequence()} to
 * retrieve it.
 */
]","\android\content\Intent.java"
"FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT","true","false","false","true","true","int","0x10000000","[]","Optional[/**
 * If set, when sending a broadcast <i>before boot has completed</i> only
 * registered receivers will be called -- no BroadcastReceiver components
 * will be launched.  Sticky intent state will be recorded properly even
 * if no receivers wind up being called.  If {@link #FLAG_RECEIVER_REGISTERED_ONLY}
 * is specified in the broadcast intent, this flag is unnecessary.
 *
 * <p>This flag is only for use by system sevices as a convenience to
 * avoid having to implement a more complex mechanism around detection
 * of boot completion.
 *
 * @hide
 */
]","\android\content\Intent.java"
"ACTION_BATTERY_LOW","true","false","false","true","true","String","""android.intent.action.BATTERY_LOW""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  Indicates low battery condition on the device.
 * This broadcast corresponds to the ""Low battery warning"" system dialog.
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"ACTION_CAMERA_BUTTON","true","false","false","true","true","String","""android.intent.action.CAMERA_BUTTON""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  The ""Camera Button"" was pressed.  Includes a single
 * extra field, {@link #EXTRA_KEY_EVENT}, containing the key event that
 * caused the broadcast.
 */
]","\android\content\Intent.java"
"ACTION_PACKAGE_CHANGED","true","false","false","true","true","String","""android.intent.action.PACKAGE_CHANGED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: An existing application package has been changed (e.g.
 * a component has been enabled or disabled).  The data contains the name of
 * the package.
 * <ul>
 * <li> {@link #EXTRA_UID} containing the integer uid assigned to the package.
 * <li> {@link #EXTRA_CHANGED_COMPONENT_NAME_LIST} containing the class name
 * of the changed components.
 * <li> {@link #EXTRA_DONT_KILL_APP} containing boolean field to override the
 * default action of restarting the application.
 * </ul>
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"ACTION_CALL_PRIVILEGED","true","false","false","true","true","String","""android.intent.action.CALL_PRIVILEGED""","[]","Optional[/**
 * Activity action: Perform a call to any number (emergency or not)
 * specified by the data.
 * <p>Input: {@link #getData} is URI of a phone number to be dialed or a
 * tel: URI of an explicit phone number.
 * <p>Output: nothing.
 * @hide
 */
]","\android\content\Intent.java"
"mType","false","false","true","false","false","String","null","[]","Optional.empty","\android\content\Intent.java"
"ACTION_SHUTDOWN","true","false","false","true","true","String","""android.intent.action.ACTION_SHUTDOWN""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  Device is shutting down.
 * This is broadcast when the device is being shut down (completely turned
 * off, not sleeping).  Once the broadcast is complete, the final shutdown
 * will proceed and all unsaved data lost.  Apps will not normally need
 * to handle this, since the foreground activity will be paused as well.
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"ACTION_VIEW","true","false","false","true","true","String","""android.intent.action.VIEW""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Display the data to the user.  This is the most common
 * action performed on data -- it is the generic action you can use on
 * a piece of data to get the most reasonable thing to occur.  For example,
 * when used on a contacts entry it will view the entry; when used on a
 * mailto: URI it will bring up a compose window filled with the information
 * supplied by the URI; when used with a tel: URI it will invoke the
 * dialer.
 * <p>Input: {@link #getData} is URI from which to retrieve data.
 * <p>Output: nothing.
 */
]","\android\content\Intent.java"
"EXTRA_SHORTCUT_NAME","true","false","false","true","true","String","""android.intent.extra.shortcut.NAME""","[]","Optional[/**
 * The name of the extra used to define the name of a shortcut.
 *
 * @see #ACTION_CREATE_SHORTCUT
 */
]","\android\content\Intent.java"
"ACTION_BOOT_COMPLETED","true","false","false","true","true","String","""android.intent.action.BOOT_COMPLETED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: This is broadcast once, after the system has finished
 * booting.  It can be used to perform application-specific initialization,
 * such as installing alarms.  You must hold the
 * {@link android.Manifest.permission#RECEIVE_BOOT_COMPLETED} permission
 * in order to receive this broadcast.
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 */
]","\android\content\Intent.java"
"ACTION_SYNC","true","false","false","true","true","String","""android.intent.action.SYNC""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Perform a data synchronization.
 * <p>Input: ?
 * <p>Output: ?
 */
]","\android\content\Intent.java"
"EXTRA_PHONE_NUMBER","true","false","false","true","true","String","""android.intent.extra.PHONE_NUMBER""","[]","Optional[/**
 * A String holding the phone number originally entered in
 * {@link android.content.Intent#ACTION_NEW_OUTGOING_CALL}, or the actual
 * number to call in a {@link android.content.Intent#ACTION_CALL}.
 */
]","\android\content\Intent.java"
"CATEGORY_SELECTED_ALTERNATIVE","true","false","false","true","true","String","""android.intent.category.SELECTED_ALTERNATIVE""","[@SdkConstant(SdkConstantType.INTENT_CATEGORY)]","Optional[/**
 * Set if the activity should be considered as an alternative selection
 * action to the data the user has currently selected.  This is like
 * {@link #CATEGORY_ALTERNATIVE}, but is used in activities showing a list
 * of items from which the user can select, giving them alternatives to the
 * default action that will be performed on it.
 */
]","\android\content\Intent.java"
"ACTION_REMOTE_INTENT","true","false","false","true","true","String","""com.google.android.c2dm.intent.RECEIVE""","[]","Optional[/**
 * Broadcast Action: a remote intent is to be broadcasted.
 *
 * A remote intent is used for remote RPC between devices. The remote intent
 * is serialized and sent from one device to another device. The receiving
 * device parses the remote intent and broadcasts it. Note that anyone can
 * broadcast a remote intent. However, if the intent receiver of the remote intent
 * does not trust intent broadcasts from arbitrary intent senders, it should require
 * the sender to hold certain permissions so only trusted sender's broadcast will be
 * let through.
 * @hide
 */
]","\android\content\Intent.java"
"FLAG_ACTIVITY_NO_USER_ACTION","true","false","false","true","true","int","0x00040000","[]","Optional[/**
 * If set, this flag will prevent the normal {@link android.app.Activity#onUserLeaveHint}
 * callback from occurring on the current frontmost activity before it is
 * paused as the newly-started activity is brought to the front.
 *
 * <p>Typically, an activity can rely on that callback to indicate that an
 * explicit user action has caused their activity to be moved out of the
 * foreground. The callback marks an appropriate point in the activity's
 * lifecycle for it to dismiss any notifications that it intends to display
 * ""until the user has seen them,"" such as a blinking LED.
 *
 * <p>If an activity is ever started via any non-user-driven events such as
 * phone-call receipt or an alarm handler, this flag should be passed to {@link
 * Context#startActivity Context.startActivity}, ensuring that the pausing
 * activity does not think the user has acknowledged its notification.
 */
]","\android\content\Intent.java"
"ACTION_SYSTEM_TUTORIAL","true","false","false","true","true","String","""android.intent.action.SYSTEM_TUTORIAL""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Start the platform-defined tutorial
 * <p>Input: {@link android.app.SearchManager#QUERY getStringExtra(SearchManager.QUERY)}
 * is the text to search for.  If empty, simply
 * enter your search results Activity with the search UI activated.
 * <p>Output: nothing.
 */
]","\android\content\Intent.java"
"ACTION_ALARM_CHANGED","true","false","false","true","true","String","""android.intent.action.ALARM_CHANGED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Alarm Changed Action: This is broadcast when the AlarmClock
 * application's alarm is set or unset.  It is used by the
 * AlarmClock application and the StatusBar service.
 * @hide
 */
]","\android\content\Intent.java"
"CATEGORY_DEVELOPMENT_PREFERENCE","true","false","false","true","true","String","""android.intent.category.DEVELOPMENT_PREFERENCE""","[@SdkConstant(SdkConstantType.INTENT_CATEGORY)]","Optional[/**
 * This activity is a development preference panel.
 */
]","\android\content\Intent.java"
"CATEGORY_SAMPLE_CODE","true","false","false","true","true","String","""android.intent.category.SAMPLE_CODE""","[]","Optional[/**
 * To be used as an sample code example (not part of the normal user
 * experience).
 */
]","\android\content\Intent.java"
"ACTION_SEND","true","false","false","true","true","String","""android.intent.action.SEND""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Deliver some data to someone else.  Who the data is
 * being delivered to is not specified; it is up to the receiver of this
 * action to ask the user where the data should be sent.
 * <p>
 * When launching a SEND intent, you should usually wrap it in a chooser
 * (through {@link #createChooser}), which will give the proper interface
 * for the user to pick how to send your data and allow you to specify
 * a prompt indicating what they are doing.
 * <p>
 * Input: {@link #getType} is the MIME type of the data being sent.
 * get*Extra can have either a {@link #EXTRA_TEXT}
 * or {@link #EXTRA_STREAM} field, containing the data to be sent.  If
 * using EXTRA_TEXT, the MIME type should be ""text/plain""; otherwise it
 * should be the MIME type of the data in EXTRA_STREAM.  Use {@literal *}/*
 * if the MIME type is unknown (this will only allow senders that can
 * handle generic data streams).
 * <p>
 * Optional standard extras, which may be interpreted by some recipients as
 * appropriate, are: {@link #EXTRA_EMAIL}, {@link #EXTRA_CC},
 * {@link #EXTRA_BCC}, {@link #EXTRA_SUBJECT}.
 * <p>
 * Output: nothing.
 */
]","\android\content\Intent.java"
"ACTION_MEDIA_REMOVED","true","false","false","true","true","String","""android.intent.action.MEDIA_REMOVED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  External media has been removed.
 * The path to the mount point for the removed media is contained in the Intent.mData field.
 */
]","\android\content\Intent.java"
"ACTION_REQUEST_SHUTDOWN","true","false","false","true","true","String","""android.intent.action.ACTION_REQUEST_SHUTDOWN""","[]","Optional[/**
 * Activity Action:  Start this activity to request system shutdown.
 * The optional boolean extra field {@link #EXTRA_KEY_CONFIRM} can be set to true
 * to request confirmation from the user before shutting down.
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 *
 * {@hide}
 */
]","\android\content\Intent.java"
"ACTION_TIME_CHANGED","true","false","false","true","true","String","""android.intent.action.TIME_SET""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: The time was set.
 */
]","\android\content\Intent.java"
"ACTION_UMS_DISCONNECTED","true","false","false","true","true","String","""android.intent.action.UMS_DISCONNECTED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  The device has exited USB Mass Storage mode.
 * This is used mainly for the USB Settings panel.
 * Apps should listen for ACTION_MEDIA_MOUNTED and ACTION_MEDIA_UNMOUNTED broadcasts to be notified
 * when the SD card file system is mounted or unmounted
 */
]","\android\content\Intent.java"
"ACTION_MEDIA_UNSHARED","true","false","false","true","true","String","""android.intent.action.MEDIA_UNSHARED""","[]","Optional[/**
 * Broadcast Action:  External media is no longer being shared via USB mass storage.
 * The path to the mount point for the previously shared media is contained in the Intent.mData field.
 *
 * @hide
 */
]","\android\content\Intent.java"
"EXTRA_EMAIL","true","false","false","true","true","String","""android.intent.extra.EMAIL""","[]","Optional[/**
 * A String[] holding e-mail addresses that should be delivered to.
 */
]","\android\content\Intent.java"
"mData","false","false","true","false","false","Uri","null","[]","Optional.empty","\android\content\Intent.java"
"ACTION_MEDIA_BAD_REMOVAL","true","false","false","true","true","String","""android.intent.action.MEDIA_BAD_REMOVAL""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  External media was removed from SD card slot, but mount point was not unmounted.
 * The path to the mount point for the removed media is contained in the Intent.mData field.
 */
]","\android\content\Intent.java"
"mAction","false","false","true","false","false","String","null","[]","Optional.empty","\android\content\Intent.java"
"ACTION_CALL_EMERGENCY","true","false","false","true","true","String","""android.intent.action.CALL_EMERGENCY""","[]","Optional[/**
 * Activity Action: Perform a call to an emergency number specified by the
 * data.
 * <p>Input: {@link #getData} is URI of a phone number to be dialed or a
 * tel: URI of an explicit phone number.
 * <p>Output: nothing.
 * @hide
 */
]","\android\content\Intent.java"
"EXTRA_KEY_EVENT","true","false","false","true","true","String","""android.intent.extra.KEY_EVENT""","[]","Optional[/**
 * A {@link android.view.KeyEvent} object containing the event that
 * triggered the creation of the Intent it is in.
 */
]","\android\content\Intent.java"
"ACTION_GTALK_SERVICE_DISCONNECTED","true","false","false","true","true","String","""android.intent.action.GTALK_DISCONNECTED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: An GTalk connection has been disconnected.
 */
]","\android\content\Intent.java"
"CATEGORY_LAUNCHER","true","false","false","true","true","String","""android.intent.category.LAUNCHER""","[@SdkConstant(SdkConstantType.INTENT_CATEGORY)]","Optional[/**
 * Should be displayed in the top-level launcher.
 */
]","\android\content\Intent.java"
"FLAG_ACTIVITY_BROUGHT_TO_FRONT","true","false","false","true","true","int","0x00400000","[]","Optional[/**
 * This flag is not normally set by application code, but set for you by
 * the system as described in the
 * {@link android.R.styleable#AndroidManifestActivity_launchMode
 * launchMode} documentation for the singleTask mode.
 */
]","\android\content\Intent.java"
"mExtras","false","false","true","false","false","Bundle","null","[]","Optional.empty","\android\content\Intent.java"
"ACTION_MEDIA_CHECKING","true","false","false","true","true","String","""android.intent.action.MEDIA_CHECKING""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  External media is present, and being disk-checked
 * The path to the mount point for the checking media is contained in the Intent.mData field.
 */
]","\android\content\Intent.java"
"ACTION_DIAL","true","false","false","true","true","String","""android.intent.action.DIAL""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Dial a number as specified by the data.  This shows a
 * UI with the number being dialed, allowing the user to explicitly
 * initiate the call.
 * <p>Input: If nothing, an empty dialer is started; else {@link #getData}
 * is URI of a phone number to be dialed or a tel: URI of an explicit phone
 * number.
 * <p>Output: nothing.
 */
]","\android\content\Intent.java"
"EXTRA_CHANGED_PACKAGE_LIST","true","false","false","true","true","String","""android.intent.extra.changed_package_list""","[]","Optional[/**
 * This field is part of
 * {@link android.content.Intent#ACTION_EXTERNAL_APPLICATIONS_AVAILABLE},
 * {@link android.content.Intent#ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE}
 * and contains a string array of all of the components that have changed.
 */
]","\android\content\Intent.java"
"mIntent","false","false","true","false","true","Intent","null","[]","Optional.empty","\android\content\Intent.java"
"ACTION_RUN","true","false","false","true","true","String","""android.intent.action.RUN""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Run the data, whatever that means.
 * <p>Input: ?  (Note: this is currently specific to the test harness.)
 * <p>Output: nothing.
 */
]","\android\content\Intent.java"
"EXTRA_CC","true","false","false","true","true","String","""android.intent.extra.CC""","[]","Optional[/**
 * A String[] holding e-mail addresses that should be carbon copied.
 */
]","\android\content\Intent.java"
"ACTION_PRE_BOOT_COMPLETED","true","false","false","true","true","String","""android.intent.action.PRE_BOOT_COMPLETED""","[]","Optional[/**
 * Broadcast Action: hook for permforming cleanup after a system update.
 *
 * The broadcast is sent when the system is booting, before the
 * BOOT_COMPLETED broadcast.  It is only sent to receivers in the system
 * image.  A receiver for this should do its work and then disable itself
 * so that it does not get run again at the next boot.
 * @hide
 */
]","\android\content\Intent.java"
"CATEGORY_PREFERENCE","true","false","false","true","true","String","""android.intent.category.PREFERENCE""","[@SdkConstant(SdkConstantType.INTENT_CATEGORY)]","Optional[/**
 * This activity is a preference panel.
 */
]","\android\content\Intent.java"
"CATEGORY_EMBED","true","false","false","true","true","String","""android.intent.category.EMBED""","[@SdkConstant(SdkConstantType.INTENT_CATEGORY)]","Optional[/**
 * Capable of running inside a parent activity container.
 */
]","\android\content\Intent.java"
"CATEGORY_UNIT_TEST","true","false","false","true","true","String","""android.intent.category.UNIT_TEST""","[]","Optional[/**
 * To be used as a unit test (run through the Test Harness).
 */
]","\android\content\Intent.java"
"ACTION_CREATE_SHORTCUT","true","false","false","true","true","String","""android.intent.action.CREATE_SHORTCUT""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Creates a shortcut.
 * <p>Input: Nothing.</p>
 * <p>Output: An Intent representing the shortcut. The intent must contain three
 * extras: SHORTCUT_INTENT (value: Intent), SHORTCUT_NAME (value: String),
 * and SHORTCUT_ICON (value: Bitmap) or SHORTCUT_ICON_RESOURCE
 * (value: ShortcutIconResource).</p>
 *
 * @see #EXTRA_SHORTCUT_INTENT
 * @see #EXTRA_SHORTCUT_NAME
 * @see #EXTRA_SHORTCUT_ICON
 * @see #EXTRA_SHORTCUT_ICON_RESOURCE
 * @see android.content.Intent.ShortcutIconResource
 */
]","\android\content\Intent.java"
"ACTION_MEDIA_SCANNER_SCAN_FILE","true","false","false","true","true","String","""android.intent.action.MEDIA_SCANNER_SCAN_FILE""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  Request the media scanner to scan a file and add it to the media database.
 * The path to the file is contained in the Intent.mData field.
 */
]","\android\content\Intent.java"
"ACTION_MEDIA_NOFS","true","false","false","true","true","String","""android.intent.action.MEDIA_NOFS""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  External media is present, but is using an incompatible fs (or is blank)
 * The path to the mount point for the checking media is contained in the Intent.mData field.
 */
]","\android\content\Intent.java"
"EXTRA_INSTALLER_PACKAGE_NAME","true","false","false","true","true","String","""android.intent.extra.INSTALLER_PACKAGE_NAME""","[]","Optional[/**
 * Used as a string extra field when sending an intent to PackageInstaller to install a
 * package. Specifies the installer package name; this package will receive the
 * {@link #ACTION_APP_ERROR} intent.
 *
 * @hide
 */
]","\android\content\Intent.java"
"packageName","true","false","false","false","false","String","null","[]","Optional[/**
 * The package name of the application containing the icon.
 */
]","\android\content\Intent.java"
"FLAG_ACTIVITY_NO_HISTORY","true","false","false","true","true","int","0x40000000","[]","Optional[/**
 * If set, the new activity is not kept in the history stack.  As soon as
 * the user navigates away from it, the activity is finished.  This may also
 * be set with the {@link android.R.styleable#AndroidManifestActivity_noHistory
 * noHistory} attribute.
 */
]","\android\content\Intent.java"
"CATEGORY_DESK_DOCK","true","false","false","true","true","String","""android.intent.category.DESK_DOCK""","[@SdkConstant(SdkConstantType.INTENT_CATEGORY)]","Optional[/**
 * An activity to run when device is inserted into a car dock.
 * Used with {@link #ACTION_MAIN} to launch an activity.  For more
 * information, see {@link android.app.UiModeManager}.
 */
]","\android\content\Intent.java"
"EXTRA_TITLE","true","false","false","true","true","String","""android.intent.extra.TITLE""","[]","Optional[/**
 * A CharSequence dialog title to provide to the user when used with a
 * {@link #ACTION_CHOOSER}.
 */
]","\android\content\Intent.java"
"ACTION_SEARCH_LONG_PRESS","true","false","false","true","true","String","""android.intent.action.SEARCH_LONG_PRESS""","[@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)]","Optional[/**
 * Activity Action: Start action associated with long pressing on the
 * search key.
 * <p>Input: Nothing.
 * <p>Output: Nothing.
 */
]","\android\content\Intent.java"
"EXTRA_SUBJECT","true","false","false","true","true","String","""android.intent.extra.SUBJECT""","[]","Optional[/**
 * A constant string holding the desired subject line of a message.
 */
]","\android\content\Intent.java"
"ACTION_SYNC_STATE_CHANGED","true","false","false","true","true","String","""android.intent.action.SYNC_STATE_CHANGED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Sync State Changed Action: This is broadcast when the sync starts or stops or when one has
 * been failing for a long time.  It is used by the SyncManager and the StatusBar service.
 * @hide
 */
]","\android\content\Intent.java"
"EXTRA_INTENT","true","false","false","true","true","String","""android.intent.extra.INTENT""","[]","Optional[/**
 * An Intent describing the choices you would like shown with
 * {@link #ACTION_PICK_ACTIVITY}.
 */
]","\android\content\Intent.java"
"ACTION_DEVICE_STORAGE_NOT_FULL","true","false","false","true","true","String","""android.intent.action.DEVICE_STORAGE_NOT_FULL""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action:  Indicates memory full condition on the device
 * no longer exists.
 *
 * <p class=""note"">This is a protected intent that can only be sent
 * by the system.
 *
 * {@hide}
 */
]","\android\content\Intent.java"
"ACTION_PROVIDER_CHANGED","true","false","false","true","true","String","""android.intent.action.PROVIDER_CHANGED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: Some content providers have parts of their namespace
 * where they publish new events or items that the user may be especially
 * interested in. For these things, they may broadcast this action when the
 * set of interesting items change.
 *
 * For example, GmailProvider sends this notification when the set of unread
 * mail in the inbox changes.
 *
 * <p>The data of the intent identifies which part of which provider
 * changed. When queried through the content resolver, the data URI will
 * return the data set in question.
 *
 * <p>The intent will have the following extra values:
 * <ul>
 * <li><em>count</em> - The number of items in the data set. This is the
 * same as the number of items in the cursor returned by querying the
 * data URI. </li>
 * </ul>
 *
 * This intent will be sent at boot (if the count is non-zero) and when the
 * data set changes. It is possible for the data set to change without the
 * count changing (for example, if a new unread message arrives in the same
 * sync operation in which a message is archived). The phone should still
 * ring/vibrate/etc as normal in this case.
 */
]","\android\content\Intent.java"
"FLAG_DEBUG_LOG_RESOLUTION","true","false","false","true","true","int","0x00000008","[]","Optional[/**
 * A flag you can enable for debugging: when set, log messages will be
 * printed during the resolution of this intent to show you what has
 * been found to create the final resolved list.
 */
]","\android\content\Intent.java"
"FLAG_ACTIVITY_SINGLE_TOP","true","false","false","true","true","int","0x20000000","[]","Optional[/**
 * If set, the activity will not be launched if it is already running
 * at the top of the history stack.
 */
]","\android\content\Intent.java"
"mOneByte","false","false","true","false","true","byte","new byte[1]","[]","Optional.empty","\android\speech\srec\UlawEncoderInputStream.java"
"mIn","false","false","true","false","false","InputStream","null","[]","Optional.empty","\android\speech\srec\UlawEncoderInputStream.java"
"mBuf","false","false","true","false","true","byte","new byte[1024]","[]","Optional.empty","\android\speech\srec\UlawEncoderInputStream.java"
"TAG","false","false","true","true","true","String","""UlawEncoderInputStream""","[]","Optional.empty","\android\speech\srec\UlawEncoderInputStream.java"
"mMax","false","false","true","false","false","int","0","[]","Optional.empty","\android\speech\srec\UlawEncoderInputStream.java"
"MAX_ULAW","false","false","true","true","true","int","8192","[]","Optional.empty","\android\speech\srec\UlawEncoderInputStream.java"
"SCALE_BITS","false","false","true","true","true","int","16","[]","Optional.empty","\android\speech\srec\UlawEncoderInputStream.java"
"mBufCount","false","false","true","false","false","int","0","[]","Optional[// should be 0 or 1
]","\android\speech\srec\UlawEncoderInputStream.java"
"mEntryHandlers","false","false","true","false","true","List<VCardEntryHandler>","new ArrayList<VCardEntryHandler>()","[]","Optional.empty","\android\pim\vcard\VCardEntryConstructor.java"
"mStrictLineBreaking","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\pim\vcard\VCardEntryConstructor.java"
"mParamType","false","false","true","false","false","String","null","[]","Optional.empty","\android\pim\vcard\VCardEntryConstructor.java"
"mCurrentProperty","false","false","true","false","false","VCardEntry.Property","new VCardEntry.Property()","[]","Optional.empty","\android\pim\vcard\VCardEntryConstructor.java"
"mVCardType","false","false","true","false","true","int","null","[]","Optional.empty","\android\pim\vcard\VCardEntryConstructor.java"
"mCurrentVCardEntry","false","false","true","false","false","VCardEntry","null","[]","Optional.empty","\android\pim\vcard\VCardEntryConstructor.java"
"LOG_TAG","false","false","true","true","false","String","""VCardEntryConstructor""","[]","Optional.empty","\android\pim\vcard\VCardEntryConstructor.java"
"mAccount","false","false","true","false","true","Account","null","[]","Optional.empty","\android\pim\vcard\VCardEntryConstructor.java"
"mTimePushIntoContentResolver","false","false","true","false","false","long","null","[]","Optional[// For measuring performance.
]","\android\pim\vcard\VCardEntryConstructor.java"
"mSourceCharset","false","false","true","false","true","String","null","[]","Optional[// property or implicitly mentioned by its version (e.g. vCard 3.0 recommends UTF-8).
]","\android\pim\vcard\VCardEntryConstructor.java"
"HTTP_SEE_OTHER","false","false","true","true","true","int","303","[]","Optional.empty","\android\webkit\LoadListener.java"
"mErrorID","false","false","true","false","false","int","OK","[]","Optional.empty","\android\webkit\LoadListener.java"
"mEncoding","false","false","true","false","false","String","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"HTTP_PARTIAL_CONTENT","false","false","true","true","true","int","206","[]","Optional.empty","\android\webkit\LoadListener.java"
"HTTP_OK","false","false","true","true","true","int","200","[]","Optional[// Standard HTTP status codes in a more representative format
]","\android\webkit\LoadListener.java"
"mSslError","false","false","true","false","false","SslError","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"mPermanent","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"mDataBuilder","false","false","true","false","true","ByteArrayBuilder","new ByteArrayBuilder()","[]","Optional.empty","\android\webkit\LoadListener.java"
"mPostIdentifier","false","false","true","false","false","long","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"mOriginalUrl","false","false","true","false","false","String","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"HTTP_AUTH","false","false","true","true","true","int","401","[]","Optional.empty","\android\webkit\LoadListener.java"
"mStatusText","false","false","true","false","false","String","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"MSG_CONTENT_DATA","false","false","true","true","true","int","110","[]","Optional.empty","\android\webkit\LoadListener.java"
"mIsMainResourceLoader","false","false","true","false","true","boolean","null","[]","Optional[// Does this loader correspond to the main content (as opposed to a supporting resource)
]","\android\webkit\LoadListener.java"
"mCancelled","false","false","true","false","false","boolean","null","[]","Optional[// The request has been cancelled.
]","\android\webkit\LoadListener.java"
"mMessageQueue","false","false","true","false","false","Vector<Message>","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"CONTENT_TYPE_PATTERN","false","false","true","true","true","Pattern","Pattern.compile(""^((?:[xX]-)?[a-zA-Z\\*]+/[\\w\\+\\*-]+[\\.[\\w\\+-]+]*)$"")","[]","Optional[/**
 * Parses the content-type header.
 * The first part only allows '-' if it follows x or X.
 */
]","\android\webkit\LoadListener.java"
"HTTP_PROXY_AUTH","false","false","true","true","true","int","407","[]","Optional.empty","\android\webkit\LoadListener.java"
"mNativeLoader","false","false","true","false","false","int","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"HTTP_NOT_MODIFIED","false","false","true","true","true","int","304","[]","Optional.empty","\android\webkit\LoadListener.java"
"mBrowserFrame","false","false","true","false","false","BrowserFrame","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"mCacheLoader","false","false","true","false","false","CacheLoader","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"mTransferEncoding","false","false","true","false","false","String","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"mMethod","false","false","true","false","false","String","null","[]","Optional[// cache. It is needed if the cache returns a redirect
]","\android\webkit\LoadListener.java"
"sNativeLoaderCount","false","false","true","true","false","int","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"mRequestHeaders","false","false","true","false","false","Map<String,String>","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"HTTP_NOT_FOUND","false","false","true","true","true","int","404","[]","Optional.empty","\android\webkit\LoadListener.java"
"mErrorDescription","false","false","true","false","false","String","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"mRequestHandle","false","false","true","false","false","RequestHandle","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"XML_MIME_TYPE","false","false","true","true","true","String","""^[\\w_\\-+~!$\\^{}|.%'`#&*]+/"" + ""[\\w_\\-+~!$\\^{}|.%'`#&*]+\\+xml$""","[]","Optional[// content before giving it to webkit.
]","\android\webkit\LoadListener.java"
"MSG_CONTENT_FINISHED","false","false","true","true","true","int","120","[]","Optional.empty","\android\webkit\LoadListener.java"
"MSG_LOCATION_CHANGED","false","false","true","true","true","int","140","[]","Optional.empty","\android\webkit\LoadListener.java"
"mMimeType","false","false","true","false","false","String","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"MSG_STATUS","false","false","true","true","true","int","160","[]","Optional.empty","\android\webkit\LoadListener.java"
"mIsMainPageLoader","false","false","true","false","false","boolean","null","[]","Optional[// Does this loader correspond to the main-frame top-level page?
]","\android\webkit\LoadListener.java"
"MSG_CONTENT_ERROR","false","false","true","true","true","int","130","[]","Optional.empty","\android\webkit\LoadListener.java"
"MSG_SSL_ERROR","false","false","true","true","true","int","180","[]","Optional.empty","\android\webkit\LoadListener.java"
"HTTP_TEMPORARY_REDIRECT","false","false","true","true","true","int","307","[]","Optional.empty","\android\webkit\LoadListener.java"
"mUsername","false","false","true","false","true","String","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"mSslErrorRequestHandle","false","false","true","false","false","RequestHandle","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"sCertificateTypeMap","false","false","true","true","false","HashMap<String,String>","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"mContentLength","true","false","false","false","false","long","null","[]","Optional[// Content length of the incoming data
]","\android\webkit\LoadListener.java"
"MSG_LOCATION_CHANGED_REQUEST","false","false","true","true","true","int","150","[]","Optional.empty","\android\webkit\LoadListener.java"
"mAuthFailed","false","false","true","false","false","boolean","null","[]","Optional[// indicates that the prev. auth failed
]","\android\webkit\LoadListener.java"
"mUri","false","false","true","false","false","WebAddress","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"MSG_SSL_CERTIFICATE","false","false","true","true","true","int","170","[]","Optional.empty","\android\webkit\LoadListener.java"
"mCacheRedirectCount","false","false","true","false","false","int","null","[]","Optional[// between the network and the cache.
]","\android\webkit\LoadListener.java"
"mPassword","false","false","true","false","true","String","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"MSG_CONTENT_HEADERS","false","false","true","true","true","int","100","[]","Optional[// Network thread and the WebCore thread.
]","\android\webkit\LoadListener.java"
"mStatusCode","false","false","true","false","false","int","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"mSynchronous","false","false","true","false","false","boolean","null","[]","Optional[// Flag to indicate that this load is synchronous.
]","\android\webkit\LoadListener.java"
"mUserGesture","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"mAuthHeader","false","false","true","false","false","HttpAuthHeader","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"mHeaders","false","false","true","false","false","Headers","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"mPostData","false","false","true","false","false","byte","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"HTTP_FOUND","false","false","true","true","true","int","302","[]","Optional.empty","\android\webkit\LoadListener.java"
"mUrl","false","false","true","false","false","String","null","[]","Optional.empty","\android\webkit\LoadListener.java"
"mFromCache","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\webkit\LoadListener.java"
"HTTP_MOVED_PERMANENTLY","false","false","true","true","true","int","301","[]","Optional.empty","\android\webkit\LoadListener.java"
"LOGTAG","false","false","true","true","true","String","""webkit""","[]","Optional.empty","\android\webkit\LoadListener.java"
"handleProfiling","true","false","false","false","false","boolean","null","[]","Optional[/**
 * Specifies whether or not this instrumentation will handle profiling.
 */
]","\android\content\pm\InstrumentationInfo.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<InstrumentationInfo>","new Parcelable.Creator<InstrumentationInfo>() {

    public InstrumentationInfo createFromParcel(Parcel source) {
        return new InstrumentationInfo(source);
    }

    public InstrumentationInfo[] newArray(int size) {
        return new InstrumentationInfo[size];
    }
}","[]","Optional.empty","\android\content\pm\InstrumentationInfo.java"
"targetPackage","true","false","false","false","false","String","null","[]","Optional[/**
 * The name of the application package being instrumented.  From the
 * ""package"" attribute.
 */
]","\android\content\pm\InstrumentationInfo.java"
"dataDir","true","false","false","false","false","String","null","[]","Optional[/**
 * Full path to a directory assigned to the package for its persistent
 * data.
 */
]","\android\content\pm\InstrumentationInfo.java"
"nativeLibraryDir","true","false","false","false","false","String","null","[]","Optional[/**
 * Full path to the directory where the native JNI libraries are stored.
 *
 * {@hide}
 */
]","\android\content\pm\InstrumentationInfo.java"
"sourceDir","true","false","false","false","false","String","null","[]","Optional[/**
 * Full path to the location of this package.
 */
]","\android\content\pm\InstrumentationInfo.java"
"functionalTest","true","false","false","false","false","boolean","null","[]","Optional[/**
 * Specifies whether or not to run this instrumentation as a functional test
 */
]","\android\content\pm\InstrumentationInfo.java"
"publicSourceDir","true","false","false","false","false","String","null","[]","Optional[/**
 * Full path to the location of the publicly available parts of this package (i.e. the resources
 * and manifest).  For non-forward-locked apps this will be the same as {@link #sourceDir).
 */
]","\android\content\pm\InstrumentationInfo.java"
"mThreads","false","false","true","false","true","HashMap<Long,HashSet<Uri>>","null","[]","Optional.empty","\com\google\android\mms\util\PduCache.java"
"LOCAL_LOGV","false","false","true","true","true","boolean","DEBUG ? Config.LOGD : Config.LOGV","[]","Optional.empty","\com\google\android\mms\util\PduCache.java"
"MMS_ALL","false","false","true","true","true","int","0","[]","Optional.empty","\com\google\android\mms\util\PduCache.java"
"MMS_OUTBOX_ID","false","false","true","true","true","int","9","[]","Optional.empty","\com\google\android\mms\util\PduCache.java"
"MMS_DRAFTS_ID","false","false","true","true","true","int","7","[]","Optional.empty","\com\google\android\mms\util\PduCache.java"
"MMS_ALL_ID","false","false","true","true","true","int","1","[]","Optional.empty","\com\google\android\mms\util\PduCache.java"
"MMS_OUTBOX","false","false","true","true","true","int","8","[]","Optional.empty","\com\google\android\mms\util\PduCache.java"
"MMS_CONVERSATION_ID","false","false","true","true","true","int","11","[]","Optional.empty","\com\google\android\mms\util\PduCache.java"
"MMS_CONVERSATION","false","false","true","true","true","int","10","[]","Optional.empty","\com\google\android\mms\util\PduCache.java"
"MMS_DRAFTS","false","false","true","true","true","int","6","[]","Optional.empty","\com\google\android\mms\util\PduCache.java"
"MMS_INBOX_ID","false","false","true","true","true","int","3","[]","Optional.empty","\com\google\android\mms\util\PduCache.java"
"MMS_SENT","false","false","true","true","true","int","4","[]","Optional.empty","\com\google\android\mms\util\PduCache.java"
"MATCH_TO_MSGBOX_ID_MAP","false","false","true","true","true","HashMap<Integer,Integer>","null","[]","Optional.empty","\com\google\android\mms\util\PduCache.java"
"URI_MATCHER","false","false","true","true","true","UriMatcher","null","[]","Optional.empty","\com\google\android\mms\util\PduCache.java"
"TAG","false","false","true","true","true","String","""PduCache""","[]","Optional.empty","\com\google\android\mms\util\PduCache.java"
"sInstance","false","false","true","true","false","PduCache","null","[]","Optional.empty","\com\google\android\mms\util\PduCache.java"
"mMessageBoxes","false","false","true","false","true","HashMap<Integer,HashSet<Uri>>","null","[]","Optional.empty","\com\google\android\mms\util\PduCache.java"
"MMS_INBOX","false","false","true","true","true","int","2","[]","Optional.empty","\com\google\android\mms\util\PduCache.java"
"MMS_SENT_ID","false","false","true","true","true","int","5","[]","Optional.empty","\com\google\android\mms\util\PduCache.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\com\google\android\mms\util\PduCache.java"
"mCurrLen","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\ScaleGestureDetector.java"
"mGestureInProgress","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\view\ScaleGestureDetector.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\android\view\ScaleGestureDetector.java"
"mPrevFingerDiffX","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\ScaleGestureDetector.java"
"mPrevFingerDiffY","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\ScaleGestureDetector.java"
"PRESSURE_THRESHOLD","false","false","true","true","true","float","0.67f","[]","Optional[/**
 * This value is the threshold ratio between our previous combined pressure
 * and the current combined pressure. We will only fire an onScale event if
 * the computed ratio between the current and previous event pressures is
 * greater than this value. When pressure decreases rapidly between events
 * the position values can often be imprecise, as it usually indicates
 * that the user is in the process of lifting a pointer off of the device.
 * Its value was tuned experimentally.
 */
]","\android\view\ScaleGestureDetector.java"
"mFocusX","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\ScaleGestureDetector.java"
"mFocusY","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\ScaleGestureDetector.java"
"mPrevLen","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\ScaleGestureDetector.java"
"mSloppyGesture","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\view\ScaleGestureDetector.java"
"mEdgeSlop","false","false","true","false","true","float","null","[]","Optional.empty","\android\view\ScaleGestureDetector.java"
"mPrevEvent","false","false","true","false","false","MotionEvent","null","[]","Optional.empty","\android\view\ScaleGestureDetector.java"
"mCurrFingerDiffX","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\ScaleGestureDetector.java"
"mCurrFingerDiffY","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\ScaleGestureDetector.java"
"mRightSlopEdge","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\ScaleGestureDetector.java"
"mCurrPressure","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\ScaleGestureDetector.java"
"mScaleFactor","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\ScaleGestureDetector.java"
"mListener","false","false","true","false","true","OnScaleGestureListener","null","[]","Optional.empty","\android\view\ScaleGestureDetector.java"
"mTimeDelta","false","false","true","false","false","long","null","[]","Optional.empty","\android\view\ScaleGestureDetector.java"
"mCurrEvent","false","false","true","false","false","MotionEvent","null","[]","Optional.empty","\android\view\ScaleGestureDetector.java"
"mBottomSlopEdge","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\ScaleGestureDetector.java"
"mPrevPressure","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\ScaleGestureDetector.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<WorkSource>","new Parcelable.Creator<WorkSource>() {

    public WorkSource createFromParcel(Parcel in) {
        return new WorkSource(in);
    }

    public WorkSource[] newArray(int size) {
        return new WorkSource[size];
    }
}","[]","Optional.empty","\android\os\WorkSource.java"
"mUids","false","false","false","false","false","int","null","[]","Optional.empty","\android\os\WorkSource.java"
"sTmpWorkSource","false","false","false","true","true","WorkSource","new WorkSource(0)","[]","Optional[/**
 * Internal statics to avoid object allocations in some operations.
 * The WorkSource object itself is not thread safe, but we need to
 * hold sTmpWorkSource lock while working with these statics.
 */
]","\android\os\WorkSource.java"
"sNewbWork","false","false","false","true","false","WorkSource","null","[]","Optional[/**
 * For returning newbie work from a modification operation.
 */
]","\android\os\WorkSource.java"
"sGoneWork","false","false","false","true","false","WorkSource","null","[]","Optional[/**
 * For returning gone work form a modification operation.
 */
]","\android\os\WorkSource.java"
"mNum","false","false","false","false","false","int","null","[]","Optional.empty","\android\os\WorkSource.java"
"SELECTION_START","true","false","false","true","true","Object","new START()","[]","Optional.empty","\android\text\Selection.java"
"SELECTION_END","true","false","false","true","true","Object","new END()","[]","Optional.empty","\android\text\Selection.java"
"mHandler","false","false","true","false","false","Handler","null","[]","Optional.empty","\android\bluetooth\BluetoothServerSocket.java"
"mSocket","false","false","false","false","true","BluetoothSocket","null","[]","Optional[/*package*/
]","\android\bluetooth\BluetoothServerSocket.java"
"mMessage","false","false","true","false","false","int","null","[]","Optional.empty","\android\bluetooth\BluetoothServerSocket.java"
"mPrefsInited","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\text\method\TextKeyListener.java"
"LAST_TYPED","false","false","false","true","true","Object","new NoCopySpan.Concrete()","[]","Optional[/* package */
]","\android\text\method\TextKeyListener.java"
"INHIBIT_REPLACEMENT","false","false","false","true","true","Object","new NoCopySpan.Concrete()","[]","Optional[/* package */
]","\android\text\method\TextKeyListener.java"
"mPrefs","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\method\TextKeyListener.java"
"SHOW_PASSWORD","false","false","false","true","true","int","8","[]","Optional[/* package */
]","\android\text\method\TextKeyListener.java"
"AUTO_PERIOD","false","false","false","true","true","int","4","[]","Optional[/* package */
]","\android\text\method\TextKeyListener.java"
"mResolver","false","false","true","false","false","WeakReference<ContentResolver>","null","[]","Optional.empty","\android\text\method\TextKeyListener.java"
"AUTO_CAP","false","false","false","true","true","int","1","[]","Optional[/* package */
]","\android\text\method\TextKeyListener.java"
"AUTO_TEXT","false","false","false","true","true","int","2","[]","Optional[/* package */
]","\android\text\method\TextKeyListener.java"
"sInstance","false","false","true","true","false","NullKeyListener","null","[]","Optional.empty","\android\text\method\TextKeyListener.java"
"mObserver","false","false","true","false","false","TextKeyListener.SettingsObserver","null","[]","Optional.empty","\android\text\method\TextKeyListener.java"
"mAutoText","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\text\method\TextKeyListener.java"
"ACTIVE","false","false","false","true","true","Object","new NoCopySpan.Concrete()","[]","Optional[/* package */
]","\android\text\method\TextKeyListener.java"
"mAutoCap","false","false","true","false","false","Capitalize","null","[]","Optional.empty","\android\text\method\TextKeyListener.java"
"CAPPED","false","false","false","true","true","Object","new NoCopySpan.Concrete()","[]","Optional[/* package */
]","\android\text\method\TextKeyListener.java"
"mWhichChild","false","false","false","false","false","int","0","[]","Optional.empty","\android\widget\ViewAnimator.java"
"mInAnimation","false","false","false","false","false","Animation","null","[]","Optional.empty","\android\widget\ViewAnimator.java"
"mAnimateFirstTime","false","false","false","false","false","boolean","true","[]","Optional.empty","\android\widget\ViewAnimator.java"
"mFirstTime","false","false","false","false","false","boolean","true","[]","Optional.empty","\android\widget\ViewAnimator.java"
"mOutAnimation","false","false","false","false","false","Animation","null","[]","Optional.empty","\android\widget\ViewAnimator.java"
"mInitialMinute","false","false","false","false","false","int","null","[]","Optional.empty","\android\app\TimePickerDialog.java"
"mInitialHourOfDay","false","false","false","false","false","int","null","[]","Optional.empty","\android\app\TimePickerDialog.java"
"mCalendar","false","false","true","false","true","Calendar","null","[]","Optional.empty","\android\app\TimePickerDialog.java"
"mDateFormat","false","false","true","false","true","java.text.DateFormat","null","[]","Optional.empty","\android\app\TimePickerDialog.java"
"mIs24HourView","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\app\TimePickerDialog.java"
"mCallback","false","false","true","false","true","OnTimeSetListener","null","[]","Optional.empty","\android\app\TimePickerDialog.java"
"IS_24_HOUR","false","false","true","true","true","String","""is24hour""","[]","Optional.empty","\android\app\TimePickerDialog.java"
"MINUTE","false","false","true","true","true","String","""minute""","[]","Optional.empty","\android\app\TimePickerDialog.java"
"mTimePicker","false","false","true","false","true","TimePicker","null","[]","Optional.empty","\android\app\TimePickerDialog.java"
"HOUR","false","false","true","true","true","String","""hour""","[]","Optional.empty","\android\app\TimePickerDialog.java"
"mReusableOvalRect","false","false","true","false","false","RectF","new RectF()","[]","Optional[// angles less than or greater than 0 radians rotate the major axis left or right.
]","\com\android\internal\widget\PointerLocationView.java"
"mTextLevelPaint","false","false","true","false","true","Paint","null","[]","Optional.empty","\com\android\internal\widget\PointerLocationView.java"
"mPathPaint","false","false","true","false","true","Paint","null","[]","Optional.empty","\com\android\internal\widget\PointerLocationView.java"
"mTextBackgroundPaint","false","false","true","false","true","Paint","null","[]","Optional.empty","\com\android\internal\widget\PointerLocationView.java"
"mCoords","false","false","true","false","false","MotionEvent.PointerCoords","new MotionEvent.PointerCoords()","[]","Optional[// Most recent coordinates.
]","\com\android\internal\widget\PointerLocationView.java"
"mTargetPaint","false","false","true","false","true","Paint","null","[]","Optional.empty","\com\android\internal\widget\PointerLocationView.java"
"mXVelocity","false","false","true","false","false","float","null","[]","Optional[// Most recent velocity.
]","\com\android\internal\widget\PointerLocationView.java"
"mMaxNumPointers","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\widget\PointerLocationView.java"
"mVelocity","false","false","true","false","true","VelocityTracker","null","[]","Optional.empty","\com\android\internal\widget\PointerLocationView.java"
"mChars","false","false","true","false","false","char","null","[]","Optional.empty","\com\android\internal\widget\PointerLocationView.java"
"mCurNumPointers","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\widget\PointerLocationView.java"
"mTraceCount","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\widget\PointerLocationView.java"
"mYVelocity","false","false","true","false","false","float","null","[]","Optional.empty","\com\android\internal\widget\PointerLocationView.java"
"mLength","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\widget\PointerLocationView.java"
"mTextMetrics","false","false","true","false","true","FontMetricsInt","new FontMetricsInt()","[]","Optional.empty","\com\android\internal\widget\PointerLocationView.java"
"mPrintCoords","false","false","true","false","false","boolean","true","[]","Optional.empty","\com\android\internal\widget\PointerLocationView.java"
"mCurDown","false","false","true","false","false","boolean","null","[]","Optional.empty","\com\android\internal\widget\PointerLocationView.java"
"mText","false","false","true","false","true","FasterStringBuilder","new FasterStringBuilder()","[]","Optional.empty","\com\android\internal\widget\PointerLocationView.java"
"mTextPaint","false","false","true","false","true","Paint","null","[]","Optional.empty","\com\android\internal\widget\PointerLocationView.java"
"mTraceX","false","false","true","false","false","float","new float[32]","[]","Optional[// Trace of previous points.
]","\com\android\internal\widget\PointerLocationView.java"
"mTraceY","false","false","true","false","false","float","new float[32]","[]","Optional.empty","\com\android\internal\widget\PointerLocationView.java"
"mActivePointerId","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\widget\PointerLocationView.java"
"mPaint","false","false","true","false","true","Paint","null","[]","Optional.empty","\com\android\internal\widget\PointerLocationView.java"
"TAG","false","false","true","true","true","String","""Pointer""","[]","Optional.empty","\com\android\internal\widget\PointerLocationView.java"
"mPointers","false","false","true","false","true","ArrayList<PointerState>","new ArrayList<PointerState>()","[]","Optional.empty","\com\android\internal\widget\PointerLocationView.java"
"mVC","false","false","true","false","true","ViewConfiguration","null","[]","Optional.empty","\com\android\internal\widget\PointerLocationView.java"
"mHeaderBottom","false","false","true","false","false","int","null","[]","Optional.empty","\com\android\internal\widget\PointerLocationView.java"
"mCachedPath","false","false","true","false","false","Path","null","[]","Optional.empty","\android\gesture\GestureStroke.java"
"length","true","false","false","false","true","float","null","[]","Optional.empty","\android\gesture\GestureStroke.java"
"boundingBox","true","false","false","false","true","RectF","null","[]","Optional.empty","\android\gesture\GestureStroke.java"
"TOUCH_TOLERANCE","false","false","false","true","true","float","3","[]","Optional.empty","\android\gesture\GestureStroke.java"
"points","true","false","false","false","true","float","null","[]","Optional.empty","\android\gesture\GestureStroke.java"
"timestamps","false","false","true","false","true","long","null","[]","Optional.empty","\android\gesture\GestureStroke.java"
"TYPE_SHORT","false","false","false","true","true","int","'I' | 2 << 8","[]","Optional[// TYPE_CHAR: character literal syntax not supported; use short.
]","\com\android\internal\util\TypedProperties.java"
"TYPE_BYTE","false","false","false","true","true","int","'I' | 1 << 8","[]","Optional.empty","\com\android\internal\util\TypedProperties.java"
"STRING_SET","true","false","false","true","true","int","1","[]","Optional.empty","\com\android\internal\util\TypedProperties.java"
"TYPE_BOOLEAN","false","false","false","true","true","int","'Z'","[]","Optional.empty","\com\android\internal\util\TypedProperties.java"
"TYPE_FLOAT","false","false","false","true","true","int","'F' | 4 << 8","[]","Optional.empty","\com\android\internal\util\TypedProperties.java"
"TYPE_LONG","false","false","false","true","true","int","'I' | 8 << 8","[]","Optional.empty","\com\android\internal\util\TypedProperties.java"
"NULL_STRING","false","false","false","true","true","String","new String(""<TypedProperties:NULL_STRING>"")","[]","Optional[// A sentinel instance used to indicate a null string.
]","\com\android\internal\util\TypedProperties.java"
"TYPE_UNSET","false","false","false","true","true","int","'x'","[]","Optional[// Constants used to represent the supported types.
]","\com\android\internal\util\TypedProperties.java"
"STRING_NULL","true","false","false","true","true","int","0","[]","Optional.empty","\com\android\internal\util\TypedProperties.java"
"TYPE_ERROR","false","false","false","true","true","int","-1","[]","Optional.empty","\com\android\internal\util\TypedProperties.java"
"TYPE_INT","false","false","false","true","true","int","'I' | 4 << 8","[]","Optional.empty","\com\android\internal\util\TypedProperties.java"
"STRING_NOT_SET","true","false","false","true","true","int","-1","[]","Optional.empty","\com\android\internal\util\TypedProperties.java"
"STRING_TYPE_MISMATCH","true","false","false","true","true","int","-2","[]","Optional[// Values returned by getStringInfo()
]","\com\android\internal\util\TypedProperties.java"
"TYPE_STRING","false","false","false","true","true","int","'L' | 's' << 8","[]","Optional.empty","\com\android\internal\util\TypedProperties.java"
"TYPE_DOUBLE","false","false","false","true","true","int","'F' | 8 << 8","[]","Optional.empty","\com\android\internal\util\TypedProperties.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<Notification>","new Parcelable.Creator<Notification>() {

    public Notification createFromParcel(Parcel parcel) {
        return new Notification(parcel);
    }

    public Notification[] newArray(int size) {
        return new Notification[size];
    }
}","[]","Optional[/**
 * Parcelable.Creator that instantiates Notification objects
 */
]","\android\app\Notification.java"
"defaults","true","false","false","false","false","int","null","[]","Optional[/**
 * Specifies which values should be taken from the defaults.
 * <p>
 * To set, OR the desired from {@link #DEFAULT_SOUND},
 * {@link #DEFAULT_VIBRATE}, {@link #DEFAULT_LIGHTS}. For all default
 * values, use {@link #DEFAULT_ALL}.
 * </p>
 */
]","\android\app\Notification.java"
"DEFAULT_ALL","true","false","false","true","true","int","~0","[]","Optional[/**
 * Use all default values (where applicable).
 */
]","\android\app\Notification.java"
"FLAG_INSISTENT","true","false","false","true","true","int","0x00000004","[]","Optional[/**
 * Bit to be bitwise-ored into the {@link #flags} field that if set,
 * the audio will be repeated until the notification is
 * cancelled or the notification window is opened.
 */
]","\android\app\Notification.java"
"DEFAULT_VIBRATE","true","false","false","true","true","int","2","[]","Optional[/**
 * Use the default notification vibrate. This will ignore any given
 * {@link #vibrate}. Using phone vibration requires the
 * {@link android.Manifest.permission#VIBRATE VIBRATE} permission.
 *
 * @see #defaults
 */
]","\android\app\Notification.java"
"icon","true","false","false","false","false","int","null","[]","Optional[/**
 * The resource id of a drawable to use as the icon in the status bar.
 */
]","\android\app\Notification.java"
"ledARGB","true","false","false","false","false","int","null","[]","Optional[/**
 * The color of the led.  The hardware will do its best approximation.
 *
 * @see #FLAG_SHOW_LIGHTS
 * @see #flags
 */
]","\android\app\Notification.java"
"FLAG_NO_CLEAR","true","false","false","true","true","int","0x00000020","[]","Optional[/**
 * Bit to be bitwise-ored into the {@link #flags} field that should be
 * set if the notification should not be canceled when the user clicks
 * the Clear all button.
 */
]","\android\app\Notification.java"
"contentView","true","false","false","false","false","RemoteViews","null","[]","Optional[/**
 * The view that will represent this notification in the expanded status bar.
 */
]","\android\app\Notification.java"
"iconLevel","true","false","false","false","false","int","null","[]","Optional[/**
 * If the icon in the status bar is to have more than one level, you can set this.  Otherwise,
 * leave it at its default value of 0.
 *
 * @see android.widget.ImageView#setImageLevel
 * @see android.graphics.drawable#setLevel
 */
]","\android\app\Notification.java"
"FLAG_FOREGROUND_SERVICE","true","false","false","true","true","int","0x00000040","[]","Optional[/**
 * Bit to be bitwise-ored into the {@link #flags} field that should be
 * set if this notification represents a currently running service.  This
 * will normally be set for you by {@link Service#startForeground}.
 */
]","\android\app\Notification.java"
"fullScreenIntent","true","false","false","false","false","PendingIntent","null","[]","Optional[/**
 * An intent to launch instead of posting the notification to the status bar.
 * Only for use with extremely high-priority notifications demanding the user's
 * <strong>immediate</strong> attention, such as an incoming phone call or
 * alarm clock that the user has explicitly set to a particular time.
 * If this facility is used for something else, please give the user an option
 * to turn it off and use a normal notification, as this can be extremely
 * disruptive.
 */
]","\android\app\Notification.java"
"FLAG_AUTO_CANCEL","true","false","false","true","true","int","0x00000010","[]","Optional[/**
 * Bit to be bitwise-ored into the {@link #flags} field that should be
 * set if the notification should be canceled when it is clicked by the
 * user.
 */
]","\android\app\Notification.java"
"audioStreamType","true","false","false","false","false","int","STREAM_DEFAULT","[]","Optional[/**
 * The audio stream type to use when playing the sound.
 * Should be one of the STREAM_ constants from
 * {@link android.media.AudioManager}.
 */
]","\android\app\Notification.java"
"ledOffMS","true","false","false","false","false","int","null","[]","Optional[/**
 * The number of milliseconds for the LED to be off while it's flashing.
 * The hardware will do its best approximation.
 *
 * @see #FLAG_SHOW_LIGHTS
 * @see #flags
 */
]","\android\app\Notification.java"
"when","true","false","false","false","false","long","null","[]","Optional[/**
 * The timestamp for the notification.  The icons and expanded views
 * are sorted by this key.
 */
]","\android\app\Notification.java"
"number","true","false","false","false","false","int","null","[]","Optional[/**
 * The number of events that this notification represents.  For example, in a new mail
 * notification, this could be the number of unread messages.  This number is superimposed over
 * the icon in the status bar.  If the number is 0 or negative, it is not shown in the status
 * bar.
 */
]","\android\app\Notification.java"
"FLAG_SHOW_LIGHTS","true","false","false","true","true","int","0x00000001","[]","Optional[/**
 * Bit to be bitwise-ored into the {@link #flags} field that should be
 * set if you want the LED on for this notification.
 * <ul>
 * <li>To turn the LED off, pass 0 in the alpha channel for colorARGB
 * or 0 for both ledOnMS and ledOffMS.</li>
 * <li>To turn the LED on, pass 1 for ledOnMS and 0 for ledOffMS.</li>
 * <li>To flash the LED, pass the number of milliseconds that it should
 * be on and off to ledOnMS and ledOffMS.</li>
 * </ul>
 * <p>
 * Since hardware varies, you are not guaranteed that any of the values
 * you pass are honored exactly.  Use the system defaults (TODO) if possible
 * because they will be set to values that work on any given hardware.
 * <p>
 * The alpha channel must be set for forward compatibility.
 */
]","\android\app\Notification.java"
"FLAG_ONGOING_EVENT","true","false","false","true","true","int","0x00000002","[]","Optional[/**
 * Bit to be bitwise-ored into the {@link #flags} field that should be
 * set if this notification is in reference to something that is ongoing,
 * like a phone call.  It should not be set if this notification is in
 * reference to something that happened at a particular point in time,
 * like a missed phone call.
 */
]","\android\app\Notification.java"
"tickerText","true","false","false","false","false","CharSequence","null","[]","Optional[/**
 * Text to scroll across the screen when this item is added to
 * the status bar.
 */
]","\android\app\Notification.java"
"DEFAULT_LIGHTS","true","false","false","true","true","int","4","[]","Optional[/**
 * Use the default notification lights. This will ignore the
 * {@link #FLAG_SHOW_LIGHTS} bit, and {@link #ledARGB}, {@link #ledOffMS}, or
 * {@link #ledOnMS}.
 *
 * @see #defaults
 */
]","\android\app\Notification.java"
"flags","true","false","false","false","false","int","null","[]","Optional.empty","\android\app\Notification.java"
"FLAG_ONLY_ALERT_ONCE","true","false","false","true","true","int","0x00000008","[]","Optional[/**
 * Bit to be bitwise-ored into the {@link #flags} field that should be
 * set if you want the sound and/or vibration play each time the
 * notification is sent, even if it has not been canceled before that.
 */
]","\android\app\Notification.java"
"ledOnMS","true","false","false","false","false","int","null","[]","Optional[/**
 * The number of milliseconds for the LED to be on while it's flashing.
 * The hardware will do its best approximation.
 *
 * @see #FLAG_SHOW_LIGHTS
 * @see #flags
 */
]","\android\app\Notification.java"
"contentIntent","true","false","false","false","false","PendingIntent","null","[]","Optional[/**
 * The intent to execute when the expanded status entry is clicked.  If
 * this is an activity, it must include the
 * {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK} flag, which requires
 * that you take care of task management as described in the <em>Activities and Tasks</em>
 * section of the <a href=""{@docRoot}guide/topics/fundamentals.html#acttask"">Application
 * Fundamentals</a> document.
 */
]","\android\app\Notification.java"
"deleteIntent","true","false","false","false","false","PendingIntent","null","[]","Optional[/**
 * The intent to execute when the status entry is deleted by the user
 * with the ""Clear All Notifications"" button. This probably shouldn't
 * be launching an activity since several of those will be sent at the
 * same time.
 */
]","\android\app\Notification.java"
"STREAM_DEFAULT","true","false","false","true","true","int","-1","[]","Optional[/**
 * Use this constant as the value for audioStreamType to request that
 * the default stream type for notifications be used.  Currently the
 * default stream type is STREAM_RING.
 */
]","\android\app\Notification.java"
"sound","true","false","false","false","false","Uri","null","[]","Optional[/**
 * The sound to play.
 *
 * <p>
 * To play the default notification sound, see {@link #defaults}.
 * </p>
 */
]","\android\app\Notification.java"
"vibrate","true","false","false","false","false","long","null","[]","Optional[/**
 * The pattern with which to vibrate.
 *
 * <p>
 * To vibrate the default pattern, see {@link #defaults}.
 * </p>
 *
 * @see android.os.Vibrator#vibrate(long[],int)
 */
]","\android\app\Notification.java"
"DEFAULT_SOUND","true","false","false","true","true","int","1","[]","Optional[/**
 * Use the default notification sound. This will ignore any given
 * {@link #sound}.
 *
 * @see #defaults
 */
]","\android\app\Notification.java"
"SECONDS_PER_DAY","false","false","true","true","true","int","24 * 60 * 60","[]","Optional.empty","\android\util\TimeUtils.java"
"SECONDS_PER_MINUTE","false","false","true","true","true","int","60","[]","Optional.empty","\android\util\TimeUtils.java"
"HUNDRED_DAY_FIELD_LEN","true","false","false","true","true","int","19","[]","Optional[/**
 * @hide Field length that can hold 999 days of time
 */
]","\android\util\TimeUtils.java"
"SECONDS_PER_HOUR","false","false","true","true","true","int","60 * 60","[]","Optional.empty","\android\util\TimeUtils.java"
"sFormatSync","false","false","true","true","true","Object","new Object()","[]","Optional.empty","\android\util\TimeUtils.java"
"TAG","false","false","true","true","true","String","""TimeUtils""","[]","Optional.empty","\android\util\TimeUtils.java"
"sFormatStr","false","false","true","true","false","char","new char[HUNDRED_DAY_FIELD_LEN + 5]","[]","Optional.empty","\android\util\TimeUtils.java"
"mStream","false","false","true","false","false","InputStream","null","[]","Optional[/**
 * The content stream.
 */
]","\android\webkit\PluginData.java"
"mContentLength","false","false","true","false","false","long","null","[]","Optional[/**
 * The content length.
 */
]","\android\webkit\PluginData.java"
"mStatusCode","false","false","true","false","false","int","null","[]","Optional[/**
 * The associated HTTP response code.
 */
]","\android\webkit\PluginData.java"
"mHeaders","false","false","true","false","false","Map<String,String[]>","null","[]","Optional[/**
 * The associated HTTP response headers stored as a map of
 * lowercase header name to [ unmodified header name, header value].
 * TODO: This design was always a hack. Remove (involves updating
 * the Gears C++ side).
 */
]","\android\webkit\PluginData.java"
"AUDIO_VIDEO_SET_TOP_BOX","true","false","false","true","true","int","0x0424","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"AUDIO","true","false","false","true","true","int","0x200000","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<BluetoothClass>","new Parcelable.Creator<BluetoothClass>() {

    public BluetoothClass createFromParcel(Parcel in) {
        return new BluetoothClass(in.readInt());
    }

    public BluetoothClass[] newArray(int size) {
        return new BluetoothClass[size];
    }
}","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"OBJECT_TRANSFER","true","false","false","true","true","int","0x100000","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"ERROR","true","false","false","true","true","int","0xFF000000","[]","Optional[/**
 * Legacy error value. Applications should use null instead.
 * @hide
 */
]","\android\bluetooth\BluetoothClass.java"
"COMPUTER_PALM_SIZE_PC_PDA","true","false","false","true","true","int","0x0114","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"PROFILE_OPP","true","false","false","true","true","int","2","[]","Optional[/**
 * @hide
 */
]","\android\bluetooth\BluetoothClass.java"
"TOY_VEHICLE","true","false","false","true","true","int","0x0808","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"RENDER","true","false","false","true","true","int","0x040000","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"AUDIO_VIDEO_CAMCORDER","true","false","false","true","true","int","0x0434","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"WEARABLE_WRIST_WATCH","true","false","false","true","true","int","0x0704","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"PHONE_ISDN","true","false","false","true","true","int","0x0214","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"AUDIO_VIDEO_VIDEO_CAMERA","true","false","false","true","true","int","0x0430","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"HEALTH_DATA_DISPLAY","true","false","false","true","true","int","0x091C","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"WEARABLE","true","false","false","true","true","int","0x0700","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"TOY_GAME","true","false","false","true","true","int","0x0814","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"AUDIO_VIDEO_WEARABLE_HEADSET","true","false","false","true","true","int","0x0404","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"TOY_CONTROLLER","true","false","false","true","true","int","0x0810","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"WEARABLE_JACKET","true","false","false","true","true","int","0x070C","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"COMPUTER_SERVER","true","false","false","true","true","int","0x0108","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"HEALTH","true","false","false","true","true","int","0x0900","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"NETWORKING","true","false","false","true","true","int","0x0300","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"AUDIO_VIDEO_LOUDSPEAKER","true","false","false","true","true","int","0x0414","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"CAPTURE","true","false","false","true","true","int","0x080000","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"COMPUTER_UNCATEGORIZED","true","false","false","true","true","int","0x0100","[]","Optional[// Devices in the COMPUTER major class
]","\android\bluetooth\BluetoothClass.java"
"INFORMATION","true","false","false","true","true","int","0x800000","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"WEARABLE_UNCATEGORIZED","true","false","false","true","true","int","0x0700","[]","Optional[// Devices in the WEARABLE major class
]","\android\bluetooth\BluetoothClass.java"
"HEALTH_WEIGHING","true","false","false","true","true","int","0x090C","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"COMPUTER_HANDHELD_PC_PDA","true","false","false","true","true","int","0x0110","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"PERIPHERAL","true","false","false","true","true","int","0x0500","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"TOY_UNCATEGORIZED","true","false","false","true","true","int","0x0800","[]","Optional[// Devices in the TOY major class
]","\android\bluetooth\BluetoothClass.java"
"MISC","true","false","false","true","true","int","0x0000","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"AUDIO_VIDEO_CAR_AUDIO","true","false","false","true","true","int","0x0420","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"mClass","false","false","true","false","true","int","null","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"WEARABLE_GLASSES","true","false","false","true","true","int","0x0714","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"AUDIO_VIDEO_HANDSFREE","true","false","false","true","true","int","0x0408","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"UNCATEGORIZED","true","false","false","true","true","int","0x1F00","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"AUDIO_VIDEO_HIFI_AUDIO","true","false","false","true","true","int","0x0428","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"AUDIO_VIDEO_VIDEO_DISPLAY_AND_LOUDSPEAKER","true","false","false","true","true","int","0x043C","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"HEALTH_BLOOD_PRESSURE","true","false","false","true","true","int","0x0904","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"HEALTH_GLUCOSE","true","false","false","true","true","int","0x0910","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"PHONE_MODEM_OR_GATEWAY","true","false","false","true","true","int","0x0210","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"LIMITED_DISCOVERABILITY","true","false","false","true","true","int","0x002000","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"AUDIO_VIDEO_VIDEO_GAMING_TOY","true","false","false","true","true","int","0x0448","[]","Optional[// public static final int AUDIO_VIDEO_RESERVED              = 0x0444;
]","\android\bluetooth\BluetoothClass.java"
"TELEPHONY","true","false","false","true","true","int","0x400000","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"TOY","true","false","false","true","true","int","0x0800","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"COMPUTER_LAPTOP","true","false","false","true","true","int","0x010C","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"TOY_DOLL_ACTION_FIGURE","true","false","false","true","true","int","0x080C","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"PHONE_UNCATEGORIZED","true","false","false","true","true","int","0x0200","[]","Optional[// Devices in the PHONE major class
]","\android\bluetooth\BluetoothClass.java"
"AUDIO_VIDEO","true","false","false","true","true","int","0x0400","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"HEALTH_THERMOMETER","true","false","false","true","true","int","0x0908","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"AUDIO_VIDEO_VCR","true","false","false","true","true","int","0x042C","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"AUDIO_VIDEO_PORTABLE_AUDIO","true","false","false","true","true","int","0x041C","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"HEALTH_PULSE_RATE","true","false","false","true","true","int","0x0918","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"AUDIO_VIDEO_VIDEO_MONITOR","true","false","false","true","true","int","0x0438","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"PROFILE_HEADSET","true","false","false","true","true","int","0","[]","Optional[/**
 * @hide
 */
]","\android\bluetooth\BluetoothClass.java"
"AUDIO_VIDEO_MICROPHONE","true","false","false","true","true","int","0x0410","[]","Optional[// public static final int AUDIO_VIDEO_RESERVED              = 0x040C;
]","\android\bluetooth\BluetoothClass.java"
"HEALTH_UNCATEGORIZED","true","false","false","true","true","int","0x0900","[]","Optional[// Devices in the HEALTH major class
]","\android\bluetooth\BluetoothClass.java"
"AUDIO_VIDEO_HEADPHONES","true","false","false","true","true","int","0x0418","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"AUDIO_VIDEO_UNCATEGORIZED","true","false","false","true","true","int","0x0400","[]","Optional[// Minor classes for the AUDIO_VIDEO major class
]","\android\bluetooth\BluetoothClass.java"
"PROFILE_A2DP","true","false","false","true","true","int","1","[]","Optional[/**
 * @hide
 */
]","\android\bluetooth\BluetoothClass.java"
"COMPUTER_DESKTOP","true","false","false","true","true","int","0x0104","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"PHONE_CORDLESS","true","false","false","true","true","int","0x0208","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"AUDIO_VIDEO_VIDEO_CONFERENCING","true","false","false","true","true","int","0x0440","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"COMPUTER_WEARABLE","true","false","false","true","true","int","0x0118","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"PHONE_SMART","true","false","false","true","true","int","0x020C","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"PHONE","true","false","false","true","true","int","0x0200","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"TOY_ROBOT","true","false","false","true","true","int","0x0804","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"WEARABLE_HELMET","true","false","false","true","true","int","0x0710","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"POSITIONING","true","false","false","true","true","int","0x010000","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"WEARABLE_PAGER","true","false","false","true","true","int","0x0708","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"PHONE_CELLULAR","true","false","false","true","true","int","0x0204","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"HEALTH_PULSE_OXIMETER","true","false","false","true","true","int","0x0914","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"BITMASK","false","false","true","true","true","int","0x1F00","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"COMPUTER","true","false","false","true","true","int","0x0100","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"IMAGING","true","false","false","true","true","int","0x0600","[]","Optional.empty","\android\bluetooth\BluetoothClass.java"
"mWM","false","false","true","false","false","IWindowManager","null","[]","Optional.empty","\android\app\KeyguardManager.java"
"mToken","false","false","true","false","false","IBinder","new Binder()","[]","Optional.empty","\android\app\KeyguardManager.java"
"mTag","false","false","true","false","false","String","null","[]","Optional.empty","\android\app\KeyguardManager.java"
"mChildLayout","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\SimpleExpandableListAdapter.java"
"mLastChildLayout","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\SimpleExpandableListAdapter.java"
"mGroupFrom","false","false","true","false","false","String","null","[]","Optional.empty","\android\widget\SimpleExpandableListAdapter.java"
"mGroupData","false","false","true","false","false","List<? extends Map<String,?>>","null","[]","Optional.empty","\android\widget\SimpleExpandableListAdapter.java"
"mChildTo","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\SimpleExpandableListAdapter.java"
"mExpandedGroupLayout","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\SimpleExpandableListAdapter.java"
"mCollapsedGroupLayout","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\SimpleExpandableListAdapter.java"
"mInflater","false","false","true","false","false","LayoutInflater","null","[]","Optional.empty","\android\widget\SimpleExpandableListAdapter.java"
"mGroupTo","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\SimpleExpandableListAdapter.java"
"mChildData","false","false","true","false","false","List<? extends List<? extends Map<String,?>>>","null","[]","Optional.empty","\android\widget\SimpleExpandableListAdapter.java"
"mChildFrom","false","false","true","false","false","String","null","[]","Optional.empty","\android\widget\SimpleExpandableListAdapter.java"
"prev","false","false","false","false","false","Registration","null","[]","Optional.empty","\android\os\Broadcaster.java"
"targetWhats","false","false","false","false","false","int","null","[]","Optional.empty","\android\os\Broadcaster.java"
"next","false","false","false","false","false","Registration","null","[]","Optional.empty","\android\os\Broadcaster.java"
"mReg","false","false","true","false","false","Registration","null","[]","Optional.empty","\android\os\Broadcaster.java"
"targets","false","false","false","false","false","Handler","null","[]","Optional.empty","\android\os\Broadcaster.java"
"senderWhat","false","false","false","false","false","int","null","[]","Optional.empty","\android\os\Broadcaster.java"
"P","false","false","true","false","true","AlertController.AlertParams","null","[]","Optional.empty","\android\app\AlertDialog.java"
"mAlert","false","false","true","false","false","AlertController","null","[]","Optional.empty","\android\app\AlertDialog.java"
"mSocketData","false","false","true","false","false","int","null","[]","Optional[/**
 * used by native code only
 */
]","\android\bluetooth\BluetoothSocket.java"
"EADDRINUSE","false","false","false","true","true","int","98","[]","Optional[/*package*/
]","\android\bluetooth\BluetoothSocket.java"
"canceled","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\bluetooth\BluetoothSocket.java"
"device","false","false","true","false","true","BluetoothDevice","null","[]","Optional.empty","\android\bluetooth\BluetoothSocket.java"
"mSdp","false","false","true","false","true","SdpHelper","null","[]","Optional.empty","\android\bluetooth\BluetoothSocket.java"
"mPort","false","false","true","false","false","int","null","[]","Optional.empty","\android\bluetooth\BluetoothSocket.java"
"mClosed","false","false","true","false","false","boolean","null","[]","Optional[/**
 * prevents all native calls after destroyNative()
 */
]","\android\bluetooth\BluetoothSocket.java"
"mInputStream","false","false","true","false","true","BluetoothInputStream","null","[]","Optional.empty","\android\bluetooth\BluetoothSocket.java"
"mDevice","false","false","true","false","true","BluetoothDevice","null","[]","Optional[/* one of TYPE_RFCOMM etc */
]","\android\bluetooth\BluetoothSocket.java"
"service","false","false","true","false","true","IBluetooth","null","[]","Optional.empty","\android\bluetooth\BluetoothSocket.java"
"channel","false","false","true","false","false","int","null","[]","Optional.empty","\android\bluetooth\BluetoothSocket.java"
"TYPE_SCO","false","false","false","true","true","int","2","[]","Optional[/*package*/
]","\android\bluetooth\BluetoothSocket.java"
"TYPE_RFCOMM","false","false","false","true","true","int","1","[]","Optional[/*package*/
]","\android\bluetooth\BluetoothSocket.java"
"mLock","false","false","true","false","true","ReentrantReadWriteLock","null","[]","Optional[/**
 * protects mClosed
 */
]","\android\bluetooth\BluetoothSocket.java"
"mOutputStream","false","false","true","false","true","BluetoothOutputStream","null","[]","Optional.empty","\android\bluetooth\BluetoothSocket.java"
"EBADFD","false","false","false","true","true","int","77","[]","Optional[/*package*/
]","\android\bluetooth\BluetoothSocket.java"
"mType","false","false","true","false","true","int","null","[]","Optional.empty","\android\bluetooth\BluetoothSocket.java"
"mEncrypt","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\bluetooth\BluetoothSocket.java"
"mAddress","false","false","true","false","true","String","null","[]","Optional[/* remote device */
]","\android\bluetooth\BluetoothSocket.java"
"TAG","false","false","true","true","true","String","""BluetoothSocket""","[]","Optional.empty","\android\bluetooth\BluetoothSocket.java"
"uuid","false","false","true","false","true","ParcelUuid","null","[]","Optional.empty","\android\bluetooth\BluetoothSocket.java"
"MAX_RFCOMM_CHANNEL","true","false","false","true","true","int","30","[]","Optional[/**
 * @hide
 */
]","\android\bluetooth\BluetoothSocket.java"
"mAuth","false","false","true","false","true","boolean","null","[]","Optional[/* remote address */
]","\android\bluetooth\BluetoothSocket.java"
"TYPE_L2CAP","false","false","false","true","true","int","3","[]","Optional[/*package*/
]","\android\bluetooth\BluetoothSocket.java"
"mColumns","false","false","true","false","true","int","null","[]","Optional.empty","\android\text\PackedIntVector.java"
"mRowGapStart","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\PackedIntVector.java"
"mRowGapLength","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\PackedIntVector.java"
"mValues","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\PackedIntVector.java"
"mRows","false","false","true","false","false","int","null","[]","Optional.empty","\android\text\PackedIntVector.java"
"mValueGap","false","false","true","false","false","int","null","[]","Optional[// starts, followed by lengths
]","\android\text\PackedIntVector.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<StatusBarNotification>","new Parcelable.Creator<StatusBarNotification>() {

    public StatusBarNotification createFromParcel(Parcel parcel) {
        return new StatusBarNotification(parcel);
    }

    public StatusBarNotification[] newArray(int size) {
        return new StatusBarNotification[size];
    }
}","[]","Optional.empty","\com\android\internal\statusbar\StatusBarNotification.java"
"initialPid","true","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\statusbar\StatusBarNotification.java"
"uid","true","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\statusbar\StatusBarNotification.java"
"id","true","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\statusbar\StatusBarNotification.java"
"notification","true","false","false","false","false","Notification","null","[]","Optional.empty","\com\android\internal\statusbar\StatusBarNotification.java"
"tag","true","false","false","false","false","String","null","[]","Optional.empty","\com\android\internal\statusbar\StatusBarNotification.java"
"pkg","true","false","false","false","false","String","null","[]","Optional.empty","\com\android\internal\statusbar\StatusBarNotification.java"
"AUDIO_OGG","true","false","false","true","true","String","""application/ogg""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"sSupportedImageTypes","false","false","true","true","true","ArrayList<String>","new ArrayList<String>()","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"sSupportedAudioTypes","false","false","true","true","true","ArrayList<String>","new ArrayList<String>()","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"TEXT_PLAIN","true","false","false","true","true","String","""text/plain""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"IMAGE_UNSPECIFIED","true","false","false","true","true","String","""image/*""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"IMAGE_JPEG","true","false","false","true","true","String","""image/jpeg""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"VIDEO_UNSPECIFIED","true","false","false","true","true","String","""video/*""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"APP_SMIL","true","false","false","true","true","String","""application/smil""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"TEXT_HTML","true","false","false","true","true","String","""text/html""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"APP_XHTML","true","false","false","true","true","String","""application/xhtml+xml""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"APP_DRM_CONTENT","true","false","false","true","true","String","""application/vnd.oma.drm.content""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"VIDEO_MP4","true","false","false","true","true","String","""video/mp4""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"IMAGE_WBMP","true","false","false","true","true","String","""image/vnd.wap.wbmp""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"TEXT_VCARD","true","false","false","true","true","String","""text/x-vCard""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"AUDIO_3GPP","true","false","false","true","true","String","""audio/3gpp""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"VIDEO_H263","true","false","false","true","true","String","""video/h263""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"AUDIO_X_MP3","true","false","false","true","true","String","""audio/x-mp3""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"AUDIO_X_MPG","true","false","false","true","true","String","""audio/x-mpg""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"IMAGE_PNG","true","false","false","true","true","String","""image/png""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"AUDIO_MPEG3","true","false","false","true","true","String","""audio/mpeg3""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"MULTIPART_MIXED","true","false","false","true","true","String","""application/vnd.wap.multipart.mixed""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"APP_DRM_MESSAGE","true","false","false","true","true","String","""application/vnd.oma.drm.message""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"MULTIPART_RELATED","true","false","false","true","true","String","""application/vnd.wap.multipart.related""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"VIDEO_3GPP","true","false","false","true","true","String","""video/3gpp""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"AUDIO_AMR","true","false","false","true","true","String","""audio/amr""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"AUDIO_MIDI","true","false","false","true","true","String","""audio/midi""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"MMS_MESSAGE","true","false","false","true","true","String","""application/vnd.wap.mms-message""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"MULTIPART_ALTERNATIVE","true","false","false","true","true","String","""application/vnd.wap.multipart.alternative""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"AUDIO_X_MPEG","true","false","false","true","true","String","""audio/x-mpeg""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"AUDIO_X_MPEG3","true","false","false","true","true","String","""audio/x-mpeg3""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"AUDIO_IMELODY","true","false","false","true","true","String","""audio/imelody""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"AUDIO_MPEG","true","false","false","true","true","String","""audio/mpeg""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"IMAGE_JPG","true","false","false","true","true","String","""image/jpg""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"IMAGE_GIF","true","false","false","true","true","String","""image/gif""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"APP_WAP_XHTML","true","false","false","true","true","String","""application/vnd.wap.xhtml+xml""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"TEXT_VCALENDAR","true","false","false","true","true","String","""text/x-vCalendar""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"AUDIO_AAC","true","false","false","true","true","String","""audio/aac""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"AUDIO_MID","true","false","false","true","true","String","""audio/mid""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"AUDIO_MP3","true","false","false","true","true","String","""audio/mp3""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"AUDIO_MP4","true","false","false","true","true","String","""audio/mp4""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"MMS_GENERIC","true","false","false","true","true","String","""application/vnd.wap.mms-generic""","[]","Optional[// Notification.ind, Delivery.ind).
]","\com\google\android\mms\ContentType.java"
"AUDIO_MPG","true","false","false","true","true","String","""audio/mpg""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"sSupportedVideoTypes","false","false","true","true","true","ArrayList<String>","new ArrayList<String>()","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"VIDEO_3G2","true","false","false","true","true","String","""video/3gpp2""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"AUDIO_UNSPECIFIED","true","false","false","true","true","String","""audio/*""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"AUDIO_X_MIDI","true","false","false","true","true","String","""audio/x-midi""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"sSupportedContentTypes","false","false","true","true","true","ArrayList<String>","new ArrayList<String>()","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"AUDIO_X_MID","true","false","false","true","true","String","""audio/x-mid""","[]","Optional.empty","\com\google\android\mms\ContentType.java"
"QUANTITY_ONE","false","false","false","true","true","int","0x0002","[]","Optional.empty","\android\content\res\PluralRules.java"
"ID_OTHER","false","false","false","true","true","int","0x01000004","[]","Optional.empty","\android\content\res\PluralRules.java"
"cs","false","false","true","true","false","PluralRules","null","[]","Optional.empty","\android\content\res\PluralRules.java"
"QUANTITY_OTHER","false","false","false","true","true","int","0x0000","[]","Optional.empty","\android\content\res\PluralRules.java"
"en","false","false","true","true","false","PluralRules","null","[]","Optional.empty","\android\content\res\PluralRules.java"
"QUANTITY_TWO","false","false","false","true","true","int","0x0004","[]","Optional.empty","\android\content\res\PluralRules.java"
"QUANTITY_FEW","false","false","false","true","true","int","0x0008","[]","Optional.empty","\android\content\res\PluralRules.java"
"QUANTITY_ZERO","false","false","false","true","true","int","0x0001","[]","Optional.empty","\android\content\res\PluralRules.java"
"QUANTITY_MANY","false","false","false","true","true","int","0x0010","[]","Optional.empty","\android\content\res\PluralRules.java"
"mDataSetObservable","false","false","true","false","true","DataSetObservable","new DataSetObservable()","[]","Optional.empty","\android\widget\BaseExpandableListAdapter.java"
"accuracy","true","false","false","false","false","int","null","[]","Optional[/**
 * The accuracy of this event. See {@link android.hardware.SensorManager
 * SensorManager} for details.
 */
]","\android\hardware\SensorEvent.java"
"timestamp","true","false","false","false","false","long","null","[]","Optional[/**
 * The time in nanosecond at which the event happened
 */
]","\android\hardware\SensorEvent.java"
"sensor","true","false","false","false","false","Sensor","null","[]","Optional[/**
 * The sensor that generated this event. See
 * {@link android.hardware.SensorManager SensorManager} for details.
 */
]","\android\hardware\SensorEvent.java"
"values","true","false","false","false","true","float","null","[]","Optional.empty","\android\hardware\SensorEvent.java"
"mDispatcherState","false","false","false","false","true","KeyEvent.DispatcherState","new KeyEvent.DispatcherState()","[]","Optional.empty","\android\inputmethodservice\AbstractInputMethodService.java"
"mEnabled","false","false","false","false","false","boolean","true","[]","Optional.empty","\android\inputmethodservice\AbstractInputMethodService.java"
"mInputMethod","false","false","true","false","false","InputMethod","null","[]","Optional.empty","\android\inputmethodservice\AbstractInputMethodService.java"
"mRevoked","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\inputmethodservice\AbstractInputMethodService.java"
"mIncomingA2dp","false","false","true","false","false","IncomingA2dp","new IncomingA2dp()","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"mHeadsetService","false","false","true","false","false","BluetoothHeadset","null","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"mA2dpState","false","false","true","false","false","int","null","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"mPbapServiceConnected","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"mBondedDevice","false","false","true","false","false","BondedDevice","new BondedDevice()","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"AUTO_CONNECT_PROFILES","true","false","false","true","true","int","101","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"CONNECT_HFP_INCOMING","true","false","false","true","true","int","2","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"DISCONNECT_HFP_INCOMING","false","false","true","true","true","int","6","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"DISCONNECT_A2DP_OUTGOING","true","false","false","true","true","int","7","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"AUTO_CONNECT_DELAY","false","false","true","true","true","int","6000","[]","Optional[// 6 secs
]","\android\bluetooth\BluetoothDeviceProfileState.java"
"mHeadsetState","false","false","true","false","false","int","null","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"mIncomingHandsfree","false","false","true","false","false","IncomingHandsfree","new IncomingHandsfree()","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"mStatus","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"mHeadsetServiceConnected","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"mCommand","false","false","true","false","false","int","null","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"CONNECT_A2DP_OUTGOING","true","false","false","true","true","int","3","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"mA2dpService","false","false","true","false","false","BluetoothA2dpService","null","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"TRANSITION_TO_STABLE","true","false","false","true","true","int","102","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"mDevice","false","false","true","false","false","BluetoothDevice","null","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"mPbapService","false","false","true","false","false","BluetoothPbap","null","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"DISCONNECT_PBAP_OUTGOING","true","false","false","true","true","int","9","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"CONNECT_OTHER_PROFILES","true","false","false","true","true","int","103","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"CONNECT_HFP_OUTGOING","true","false","false","true","true","int","1","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"mOutgoingHandsfree","false","false","true","false","false","OutgoingHandsfree","new OutgoingHandsfree()","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"mOutgoingA2dp","false","false","true","false","false","OutgoingA2dp","new OutgoingA2dp()","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"TAG","false","false","true","true","true","String","""BluetoothDeviceProfileState""","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"DBG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"UNPAIR","true","false","false","true","true","int","100","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"CONNECT_A2DP_INCOMING","true","false","false","true","true","int","4","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"mService","false","false","true","false","false","BluetoothService","null","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"DISCONNECT_A2DP_INCOMING","true","false","false","true","true","int","8","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"mBroadcastReceiver","false","false","true","false","false","BroadcastReceiver","new BroadcastReceiver() {

    @Override
    public void onReceive(Context context, Intent intent) {
        String action = intent.getAction();
        BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
        if (!device.equals(mDevice))
            return;
        if (action.equals(BluetoothHeadset.ACTION_STATE_CHANGED)) {
            int newState = intent.getIntExtra(BluetoothHeadset.EXTRA_STATE, 0);
            int oldState = intent.getIntExtra(BluetoothHeadset.EXTRA_PREVIOUS_STATE, 0);
            int initiator = intent.getIntExtra(BluetoothHeadset.EXTRA_DISCONNECT_INITIATOR, BluetoothHeadset.LOCAL_DISCONNECT);
            mHeadsetState = newState;
            if (newState == BluetoothHeadset.STATE_DISCONNECTED && initiator == BluetoothHeadset.REMOTE_DISCONNECT) {
                sendMessage(DISCONNECT_HFP_INCOMING);
            }
            if (newState == BluetoothHeadset.STATE_CONNECTED || newState == BluetoothHeadset.STATE_DISCONNECTED) {
                sendMessage(TRANSITION_TO_STABLE);
            }
        } else if (action.equals(BluetoothA2dp.ACTION_SINK_STATE_CHANGED)) {
            int newState = intent.getIntExtra(BluetoothA2dp.EXTRA_SINK_STATE, 0);
            int oldState = intent.getIntExtra(BluetoothA2dp.EXTRA_PREVIOUS_SINK_STATE, 0);
            mA2dpState = newState;
            if ((oldState == BluetoothA2dp.STATE_CONNECTED || oldState == BluetoothA2dp.STATE_PLAYING) && newState == BluetoothA2dp.STATE_DISCONNECTED) {
                sendMessage(DISCONNECT_A2DP_INCOMING);
            }
            if (newState == BluetoothA2dp.STATE_CONNECTED || newState == BluetoothA2dp.STATE_DISCONNECTED) {
                sendMessage(TRANSITION_TO_STABLE);
            }
        } else if (action.equals(BluetoothDevice.ACTION_ACL_DISCONNECTED)) {
            // This is technically not needed, but we can get stuck sometimes.
            // For example, if incoming A2DP fails, we are not informed by Bluez
            sendMessage(TRANSITION_TO_STABLE);
        }
    }
}","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"DISCONNECT_HFP_OUTGOING","true","false","false","true","true","int","5","[]","Optional.empty","\android\bluetooth\BluetoothDeviceProfileState.java"
"CONNECT_OTHER_PROFILES_DELAY","false","false","true","true","true","int","4000","[]","Optional[// 4 secs
]","\android\bluetooth\BluetoothDeviceProfileState.java"
"nStatement","false","false","false","false","false","int","0","[]","Optional[/* package */
]","\android\database\sqlite\SQLiteCompiledSql.java"
"mDatabase","false","false","false","false","false","SQLiteDatabase","null","[]","Optional[/* package */
]","\android\database\sqlite\SQLiteCompiledSql.java"
"mStackTrace","false","false","true","false","false","Throwable","null","[]","Optional.empty","\android\database\sqlite\SQLiteCompiledSql.java"
"nHandle","false","false","false","false","false","int","0","[]","Optional[/* package */
]","\android\database\sqlite\SQLiteCompiledSql.java"
"TAG","false","false","true","true","true","String","""SQLiteCompiledSql""","[]","Optional.empty","\android\database\sqlite\SQLiteCompiledSql.java"
"mInUse","false","false","true","false","false","boolean","false","[]","Optional[/**
 * when in cache and is in use, this member is set
 */
]","\android\database\sqlite\SQLiteCompiledSql.java"
"mSqlStmt","false","false","true","false","false","String","null","[]","Optional[/**
 * the following are for debugging purposes
 */
]","\android\database\sqlite\SQLiteCompiledSql.java"
"mAppendInvalid","false","false","true","false","false","boolean","null","[]","Optional[// whether to append or ignore invalid characters
]","\android\text\LoginFilter.java"
"mAllowed","false","false","true","true","true","String","""@_-+.""","[]","Optional[// Additional characters
]","\android\text\LoginFilter.java"
"mOrientationEventLis","false","false","true","false","false","OrientationEventListener","null","[]","Optional.empty","\android\view\OrientationListener.java"
"ORIENTATION_UNKNOWN","true","false","false","true","true","int","OrientationEventListener.ORIENTATION_UNKNOWN","[]","Optional[/**
 * Returned from onOrientationChanged when the device orientation cannot be determined
 * (typically when the device is in a close to flat position).
 *
 * @see #onOrientationChanged
 */
]","\android\view\OrientationListener.java"
"groupVisible","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\view\MenuInflater.java"
"itemVisible","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\view\MenuInflater.java"
"NO_ID","false","false","true","true","true","int","0","[]","Optional.empty","\android\view\MenuInflater.java"
"defaultItemChecked","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\view\MenuInflater.java"
"itemId","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\MenuInflater.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\view\MenuInflater.java"
"itemCheckable","false","false","true","false","false","int","null","[]","Optional[/**
 * Sync to attrs.xml enum:
 * - 0: none
 * - 1: all
 * - 2: exclusive
 */
]","\android\view\MenuInflater.java"
"itemAlphabeticShortcut","false","false","true","false","false","char","null","[]","Optional.empty","\android\view\MenuInflater.java"
"groupId","false","false","true","false","false","int","null","[]","Optional[/*
         * Group state is set on items as they are added, allowing an item to
         * override its group state. (As opposed to set on items at the group end tag.)
         */
]","\android\view\MenuInflater.java"
"defaultGroupId","false","false","true","true","true","int","NO_ID","[]","Optional.empty","\android\view\MenuInflater.java"
"itemEnabled","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\view\MenuInflater.java"
"defaultItemCategory","false","false","true","true","true","int","0","[]","Optional.empty","\android\view\MenuInflater.java"
"itemIconResId","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\MenuInflater.java"
"itemTitle","false","false","true","false","false","String","null","[]","Optional.empty","\android\view\MenuInflater.java"
"XML_GROUP","false","false","true","true","true","String","""group""","[]","Optional[/**
 * Group tag name in XML.
 */
]","\android\view\MenuInflater.java"
"groupCheckable","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\MenuInflater.java"
"defaultItemCheckable","false","false","true","true","true","int","0","[]","Optional.empty","\android\view\MenuInflater.java"
"groupEnabled","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\view\MenuInflater.java"
"defaultItemVisible","false","false","true","true","true","boolean","true","[]","Optional.empty","\android\view\MenuInflater.java"
"XML_MENU","false","false","true","true","true","String","""menu""","[]","Optional[/**
 * Menu tag name in XML.
 */
]","\android\view\MenuInflater.java"
"itemAdded","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\view\MenuInflater.java"
"itemCategoryOrder","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\MenuInflater.java"
"menu","false","false","true","false","false","Menu","null","[]","Optional.empty","\android\view\MenuInflater.java"
"itemChecked","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\view\MenuInflater.java"
"groupOrder","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\MenuInflater.java"
"defaultItemEnabled","false","false","true","true","true","boolean","true","[]","Optional.empty","\android\view\MenuInflater.java"
"itemTitleCondensed","false","false","true","false","false","String","null","[]","Optional.empty","\android\view\MenuInflater.java"
"groupCategory","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\MenuInflater.java"
"defaultItemOrder","false","false","true","true","true","int","0","[]","Optional.empty","\android\view\MenuInflater.java"
"defaultItemId","false","false","true","true","true","int","NO_ID","[]","Optional.empty","\android\view\MenuInflater.java"
"XML_ITEM","false","false","true","true","true","String","""item""","[]","Optional[/**
 * Item tag name in XML.
 */
]","\android\view\MenuInflater.java"
"itemNumericShortcut","false","false","true","false","false","char","null","[]","Optional.empty","\android\view\MenuInflater.java"
"mRemote","false","false","true","false","false","IBinder","null","[]","Optional.empty","\android\content\ContentProviderNative.java"
"TAG","false","false","true","true","true","String","""ContentProvider""","[]","Optional.empty","\android\content\ContentProviderNative.java"
"mFilter","false","false","true","false","false","MaskFilter","null","[]","Optional.empty","\android\text\style\MaskFilterSpan.java"
"mIsVisible","false","false","true","false","false","boolean","null","[]","Optional[/**
 * Whether the container has been added to the window manager.
 */
]","\android\widget\ZoomButtonsController.java"
"mConfigurationChangedReceiver","false","false","true","false","true","BroadcastReceiver","new BroadcastReceiver() {

    @Override
    public void onReceive(Context context, Intent intent) {
        if (!mIsVisible)
            return;
        mHandler.removeMessages(MSG_POST_CONFIGURATION_CHANGED);
        mHandler.sendEmptyMessage(MSG_POST_CONFIGURATION_CHANGED);
    }
}","[]","Optional[/**
 * Needed to reposition the zoom controls after configuration changes.
 */
]","\android\widget\ZoomButtonsController.java"
"mTouchPaddingScaledSq","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ZoomButtonsController.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\android\widget\ZoomButtonsController.java"
"mContainer","false","false","true","false","true","FrameLayout","null","[]","Optional[/**
 * The container that is added as a window.
 */
]","\android\widget\ZoomButtonsController.java"
"mTouchTargetWindowLocation","false","false","true","false","true","int","new int[2]","[]","Optional[/**
 * The {@link #mTouchTargetView}'s location in window, set on touch down.
 */
]","\android\widget\ZoomButtonsController.java"
"mContainerRawLocation","false","false","true","false","true","int","new int[2]","[]","Optional.empty","\android\widget\ZoomButtonsController.java"
"ZOOM_CONTROLS_TOUCH_PADDING","false","false","true","true","true","int","20","[]","Optional.empty","\android\widget\ZoomButtonsController.java"
"mTouchTargetView","false","false","true","false","false","View","null","[]","Optional[/**
 * The view (or null) that should receive touch events. This will get set if
 * the touch down hits the container. It will be reset on the touch up.
 */
]","\android\widget\ZoomButtonsController.java"
"mReleaseTouchListenerOnUp","false","false","true","false","false","boolean","null","[]","Optional[/**
 * If the zoom controller is dismissed but the user is still in a touch
 * interaction, we set this to true. This will ignore all touch events until
 * up/cancel, and then set the owner's touch listener to null.
 * <p>
 * Otherwise, the owner view would get mismatched events (i.e., touch move
 * even though it never got the touch down.)
 */
]","\android\widget\ZoomButtonsController.java"
"mWindowManager","false","false","true","false","true","WindowManager","null","[]","Optional.empty","\android\widget\ZoomButtonsController.java"
"mOwnerViewRawLocation","false","false","true","false","true","int","new int[2]","[]","Optional[/**
 * The location of the owner view on the screen. This is recalculated
 * each time the zoom controller is shown.
 */
]","\android\widget\ZoomButtonsController.java"
"MSG_POST_CONFIGURATION_CHANGED","false","false","true","true","true","int","2","[]","Optional[/**
 * When configuration changes, this is called after the UI thread is idle.
 */
]","\android\widget\ZoomButtonsController.java"
"mTempRect","false","false","true","false","true","Rect","new Rect()","[]","Optional.empty","\android\widget\ZoomButtonsController.java"
"MSG_POST_SET_VISIBLE","false","false","true","true","true","int","4","[]","Optional[/**
 * If setVisible(true) is called and the owner view's window token is null,
 * we delay the setVisible(true) call until it is not null.
 */
]","\android\widget\ZoomButtonsController.java"
"mAutoDismissControls","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\widget\ZoomButtonsController.java"
"MSG_DISMISS_ZOOM_CONTROLS","false","false","true","true","true","int","3","[]","Optional[/**
 * Used to delay the zoom controller dismissal.
 */
]","\android\widget\ZoomButtonsController.java"
"mCallback","false","false","true","false","false","OnZoomListener","null","[]","Optional.empty","\android\widget\ZoomButtonsController.java"
"mControls","false","false","true","false","false","ZoomControls","null","[]","Optional.empty","\android\widget\ZoomButtonsController.java"
"mHandler","false","false","true","false","true","Handler","new Handler() {

    @Override
    public void handleMessage(Message msg) {
        switch(msg.what) {
            case MSG_POST_CONFIGURATION_CHANGED:
                onPostConfigurationChanged();
                break;
            case MSG_DISMISS_ZOOM_CONTROLS:
                setVisible(false);
                break;
            case MSG_POST_SET_VISIBLE:
                if (mOwnerView.getWindowToken() == null) {
                    // Doh, it is still null, just ignore the set visible call
                    Log.e(TAG, ""Cannot make the zoom controller visible if the owner view is "" + ""not attached to a window."");
                } else {
                    setVisible(true);
                }
                break;
        }
    }
}","[]","Optional.empty","\android\widget\ZoomButtonsController.java"
"TAG","false","false","true","true","true","String","""ZoomButtonsController""","[]","Optional.empty","\android\widget\ZoomButtonsController.java"
"ZOOM_CONTROLS_TIMEOUT","false","false","true","true","true","int","(int) ViewConfiguration.getZoomControlsTimeout()","[]","Optional.empty","\android\widget\ZoomButtonsController.java"
"mConfigurationChangedFilter","false","false","true","false","true","IntentFilter","new IntentFilter(Intent.ACTION_CONFIGURATION_CHANGED)","[]","Optional.empty","\android\widget\ZoomButtonsController.java"
"mTempIntArray","false","false","true","false","true","int","new int[2]","[]","Optional.empty","\android\widget\ZoomButtonsController.java"
"mOwnerView","false","false","true","false","true","View","null","[]","Optional[/**
 * The view that is being zoomed by this zoom controller.
 */
]","\android\widget\ZoomButtonsController.java"
"mContainerLayoutParams","false","false","true","false","false","LayoutParams","null","[]","Optional.empty","\android\widget\ZoomButtonsController.java"
"mPostedVisibleInitializer","false","false","true","false","false","Runnable","null","[]","Optional[/**
 * When showing the zoom, we add the view as a new window. However, there is
 * logic that needs to know the size of the zoom which is determined after
 * it's laid out. Therefore, we must post this logic onto the UI thread so
 * it will be exceuted AFTER the layout. This is the logic.
 */
]","\android\widget\ZoomButtonsController.java"
"DENSITY_LOW","true","false","false","true","true","int","120","[]","Optional[/**
 * Standard quantized DPI for low-density screens.
 */
]","\android\util\DisplayMetrics.java"
"density","true","false","false","false","false","float","null","[]","Optional[/**
 * The logical density of the display.  This is a scaling factor for the
 * Density Independent Pixel unit, where one DIP is one pixel on an
 * approximately 160 dpi screen (for example a 240x320, 1.5""x2"" screen),
 * providing the baseline of the system's display. Thus on a 160dpi screen
 * this density value will be 1; on a 120 dpi screen it would be .75; etc.
 *
 * <p>This value does not exactly follow the real screen size (as given by
 * {@link #xdpi} and {@link #ydpi}, but rather is used to scale the size of
 * the overall UI in steps based on gross changes in the display dpi.  For
 * example, a 240x320 screen will have a density of 1 even if its width is
 * 1.8"", 1.3"", etc. However, if the screen resolution is increased to
 * 320x480 but the screen size remained 1.5""x2"" then the density would be
 * increased (probably to 1.5).
 *
 * @see #DENSITY_DEFAULT
 */
]","\android\util\DisplayMetrics.java"
"DENSITY_XHIGH","true","false","false","true","true","int","320","[]","Optional[/**
 * Standard quantized DPI for extra-high-density screens.
 */
]","\android\util\DisplayMetrics.java"
"ydpi","true","false","false","false","false","float","null","[]","Optional[/**
 * The exact physical pixels per inch of the screen in the Y dimension.
 */
]","\android\util\DisplayMetrics.java"
"heightPixels","true","false","false","false","false","int","null","[]","Optional[/**
 * The absolute height of the display in pixels.
 */
]","\android\util\DisplayMetrics.java"
"densityDpi","true","false","false","false","false","int","null","[]","Optional[/**
 * The screen density expressed as dots-per-inch.  May be either
 * {@link #DENSITY_LOW}, {@link #DENSITY_MEDIUM}, or {@link #DENSITY_HIGH}.
 */
]","\android\util\DisplayMetrics.java"
"widthPixels","true","false","false","false","false","int","null","[]","Optional[/**
 * The absolute width of the display in pixels.
 */
]","\android\util\DisplayMetrics.java"
"DENSITY_DEVICE","true","false","false","true","true","int","getDeviceDensity()","[]","Optional[/**
 * The device's density.
 * @hide becase eventually this should be able to change while
 * running, so shouldn't be a constant.
 */
]","\android\util\DisplayMetrics.java"
"DENSITY_MEDIUM","true","false","false","true","true","int","160","[]","Optional[/**
 * Standard quantized DPI for medium-density screens.
 */
]","\android\util\DisplayMetrics.java"
"DENSITY_DEFAULT","true","false","false","true","true","int","DENSITY_MEDIUM","[]","Optional[/**
 * The reference density used throughout the system.
 */
]","\android\util\DisplayMetrics.java"
"scaledDensity","true","false","false","false","false","float","null","[]","Optional[/**
 * A scaling factor for fonts displayed on the display.  This is the same
 * as {@link #density}, except that it may be adjusted in smaller
 * increments at runtime based on a user preference for the font size.
 */
]","\android\util\DisplayMetrics.java"
"DENSITY_HIGH","true","false","false","true","true","int","240","[]","Optional[/**
 * Standard quantized DPI for high-density screens.
 */
]","\android\util\DisplayMetrics.java"
"xdpi","true","false","false","false","false","float","null","[]","Optional[/**
 * The exact physical pixels per inch of the screen in the X dimension.
 */
]","\android\util\DisplayMetrics.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\android\app\WallpaperManager.java"
"mDrawTop","false","false","true","false","false","int","null","[]","Optional.empty","\android\app\WallpaperManager.java"
"ACTION_LIVE_WALLPAPER_CHOOSER","true","false","false","true","true","String","""android.service.wallpaper.LIVE_WALLPAPER_CHOOSER""","[]","Optional[/**
 * Launch an activity for the user to pick the current global live
 * wallpaper.
 */
]","\android\app\WallpaperManager.java"
"mWallpaperXStep","false","false","true","false","false","float","-1","[]","Optional.empty","\android\app\WallpaperManager.java"
"mWallpaper","false","false","true","false","false","Bitmap","null","[]","Optional.empty","\android\app\WallpaperManager.java"
"MSG_CLEAR_WALLPAPER","false","false","true","true","true","int","1","[]","Optional.empty","\android\app\WallpaperManager.java"
"mSync","false","false","true","true","false","Object","new Object()","[]","Optional.empty","\android\app\WallpaperManager.java"
"mDefaultWallpaper","false","false","true","false","false","Bitmap","null","[]","Optional.empty","\android\app\WallpaperManager.java"
"mWallpaperYStep","false","false","true","false","false","float","-1","[]","Optional.empty","\android\app\WallpaperManager.java"
"COMMAND_TAP","true","false","false","true","true","String","""android.wallpaper.tap""","[]","Optional[/**
 * Command for {@link #sendWallpaperCommand}: reported by the wallpaper
 * host when the user taps on an empty area (not performing an action
 * in the host).  The x and y arguments are the location of the tap in
 * screen coordinates.
 */
]","\android\app\WallpaperManager.java"
"mDrawLeft","false","false","true","false","false","int","null","[]","Optional.empty","\android\app\WallpaperManager.java"
"mHeight","false","false","true","false","true","int","null","[]","Optional.empty","\android\app\WallpaperManager.java"
"mBitmap","false","false","true","false","true","Bitmap","null","[]","Optional.empty","\android\app\WallpaperManager.java"
"mHandler","false","false","true","false","true","Handler","null","[]","Optional.empty","\android\app\WallpaperManager.java"
"TAG","false","false","true","true","false","String","""WallpaperManager""","[]","Optional.empty","\android\app\WallpaperManager.java"
"mWidth","false","false","true","false","true","int","null","[]","Optional.empty","\android\app\WallpaperManager.java"
"sGlobals","false","false","true","true","false","Globals","null","[]","Optional.empty","\android\app\WallpaperManager.java"
"mService","false","false","true","false","false","IWallpaperManager","null","[]","Optional.empty","\android\app\WallpaperManager.java"
"DEBUG","false","false","true","true","false","boolean","false","[]","Optional.empty","\android\app\WallpaperManager.java"
"COMMAND_DROP","true","false","false","true","true","String","""android.home.drop""","[]","Optional[/**
 * Command for {@link #sendWallpaperCommand}: reported by the wallpaper
 * host when the user drops an object into an area of the host.  The x
 * and y arguments are the location of the drop.
 */
]","\android\app\WallpaperManager.java"
"mSak","false","false","true","false","false","short","null","[]","Optional.empty","\android\nfc\tech\NfcA.java"
"EXTRA_ATQA","true","false","false","true","true","String","""atqa""","[]","Optional[/**
 * @hide
 */
]","\android\nfc\tech\NfcA.java"
"mAtqa","false","false","true","false","false","byte","null","[]","Optional.empty","\android\nfc\tech\NfcA.java"
"EXTRA_SAK","true","false","false","true","true","String","""sak""","[]","Optional[/**
 * @hide
 */
]","\android\nfc\tech\NfcA.java"
"STATE_RESUME","false","false","true","true","true","int","7","[]","Optional.empty","\android\widget\VideoView.java"
"STATE_SUSPEND","false","false","true","true","true","int","6","[]","Optional.empty","\android\widget\VideoView.java"
"mCanSeekBack","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\VideoView.java"
"mVideoHeight","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\VideoView.java"
"STATE_PLAYBACK_COMPLETED","false","false","true","true","true","int","5","[]","Optional.empty","\android\widget\VideoView.java"
"mSizeChangedListener","false","false","false","false","false","MediaPlayer.OnVideoSizeChangedListener","new MediaPlayer.OnVideoSizeChangedListener() {

    public void onVideoSizeChanged(MediaPlayer mp, int width, int height) {
        mVideoWidth = mp.getVideoWidth();
        mVideoHeight = mp.getVideoHeight();
        if (mVideoWidth != 0 && mVideoHeight != 0) {
            getHolder().setFixedSize(mVideoWidth, mVideoHeight);
        }
    }
}","[]","Optional.empty","\android\widget\VideoView.java"
"mSurfaceHeight","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\VideoView.java"
"mCurrentBufferPercentage","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\VideoView.java"
"mSurfaceHolder","false","false","true","false","false","SurfaceHolder","null","[]","Optional[// All the stuff we need for playing and showing a video
]","\android\widget\VideoView.java"
"mCanSeekForward","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\VideoView.java"
"mBufferingUpdateListener","false","false","true","false","false","MediaPlayer.OnBufferingUpdateListener","new MediaPlayer.OnBufferingUpdateListener() {

    public void onBufferingUpdate(MediaPlayer mp, int percent) {
        mCurrentBufferPercentage = percent;
    }
}","[]","Optional.empty","\android\widget\VideoView.java"
"mCompletionListener","false","false","true","false","false","MediaPlayer.OnCompletionListener","new MediaPlayer.OnCompletionListener() {

    public void onCompletion(MediaPlayer mp) {
        mCurrentState = STATE_PLAYBACK_COMPLETED;
        mTargetState = STATE_PLAYBACK_COMPLETED;
        if (mMediaController != null) {
            mMediaController.hide();
        }
        if (mOnCompletionListener != null) {
            mOnCompletionListener.onCompletion(mMediaPlayer);
        }
    }
}","[]","Optional.empty","\android\widget\VideoView.java"
"STATE_PAUSED","false","false","true","true","true","int","4","[]","Optional.empty","\android\widget\VideoView.java"
"STATE_PREPARING","false","false","true","true","true","int","1","[]","Optional.empty","\android\widget\VideoView.java"
"STATE_PREPARED","false","false","true","true","true","int","2","[]","Optional.empty","\android\widget\VideoView.java"
"mOnErrorListener","false","false","true","false","false","OnErrorListener","null","[]","Optional.empty","\android\widget\VideoView.java"
"STATE_ERROR","false","false","true","true","true","int","-1","[]","Optional[// all possible internal states
]","\android\widget\VideoView.java"
"mCanPause","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\VideoView.java"
"mSeekWhenPrepared","false","false","true","false","false","int","null","[]","Optional[// recording the seek position while preparing
]","\android\widget\VideoView.java"
"STATE_PLAYING","false","false","true","true","true","int","3","[]","Optional.empty","\android\widget\VideoView.java"
"mVideoWidth","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\VideoView.java"
"mStateWhenSuspended","false","false","true","false","false","int","null","[]","Optional[// state before calling suspend()
]","\android\widget\VideoView.java"
"STATE_SUSPEND_UNSUPPORTED","false","false","true","true","true","int","8","[]","Optional.empty","\android\widget\VideoView.java"
"mDuration","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\VideoView.java"
"mMediaPlayer","false","false","true","false","false","MediaPlayer","null","[]","Optional.empty","\android\widget\VideoView.java"
"mMediaController","false","false","true","false","false","MediaController","null","[]","Optional.empty","\android\widget\VideoView.java"
"mErrorListener","false","false","true","false","false","MediaPlayer.OnErrorListener","new MediaPlayer.OnErrorListener() {

    public boolean onError(MediaPlayer mp, int framework_err, int impl_err) {
        Log.d(TAG, ""Error: "" + framework_err + "","" + impl_err);
        mCurrentState = STATE_ERROR;
        mTargetState = STATE_ERROR;
        if (mMediaController != null) {
            mMediaController.hide();
        }
        /* If an error handler has been supplied, use it and finish. */
        if (mOnErrorListener != null) {
            if (mOnErrorListener.onError(mMediaPlayer, framework_err, impl_err)) {
                return true;
            }
        }
        /* Otherwise, pop up an error dialog so the user knows that
             * something bad has happened. Only try and pop up the dialog
             * if we're attached to a window. When we're going away and no
             * longer have a window, don't bother showing the user an error.
             */
        if (getWindowToken() != null) {
            Resources r = mContext.getResources();
            int messageId;
            if (framework_err == MediaPlayer.MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK) {
                messageId = com.android.internal.R.string.VideoView_error_text_invalid_progressive_playback;
            } else {
                messageId = com.android.internal.R.string.VideoView_error_text_unknown;
            }
            new AlertDialog.Builder(mContext).setTitle(com.android.internal.R.string.VideoView_error_title).setMessage(messageId).setPositiveButton(com.android.internal.R.string.VideoView_error_button, new DialogInterface.OnClickListener() {

                public void onClick(DialogInterface dialog, int whichButton) {
                    /* If we get here, there is no onError listener, so
                                         * at least inform them that the video is over.
                                         */
                    if (mOnCompletionListener != null) {
                        mOnCompletionListener.onCompletion(mMediaPlayer);
                    }
                }
            }).setCancelable(false).show();
        }
        return true;
    }
}","[]","Optional.empty","\android\widget\VideoView.java"
"TAG","false","false","true","false","false","String","""VideoView""","[]","Optional.empty","\android\widget\VideoView.java"
"mUri","false","false","true","false","false","Uri","null","[]","Optional[// settable by the client
]","\android\widget\VideoView.java"
"mSurfaceWidth","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\VideoView.java"
"mOnPreparedListener","false","false","true","false","false","MediaPlayer.OnPreparedListener","null","[]","Optional.empty","\android\widget\VideoView.java"
"mHeaders","false","false","true","false","false","Map<String,String>","null","[]","Optional.empty","\android\widget\VideoView.java"
"mCurrentState","false","false","true","false","false","int","STATE_IDLE","[]","Optional[// of STATE_PAUSED.
]","\android\widget\VideoView.java"
"mOnCompletionListener","false","false","true","false","false","OnCompletionListener","null","[]","Optional.empty","\android\widget\VideoView.java"
"mSHCallback","false","false","false","false","false","SurfaceHolder.Callback","new SurfaceHolder.Callback() {

    public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {
        mSurfaceWidth = w;
        mSurfaceHeight = h;
        boolean isValidState = (mTargetState == STATE_PLAYING);
        boolean hasValidSize = (mVideoWidth == w && mVideoHeight == h);
        if (mMediaPlayer != null && isValidState && hasValidSize) {
            if (mSeekWhenPrepared != 0) {
                seekTo(mSeekWhenPrepared);
            }
            start();
            if (mMediaController != null) {
                if (mMediaController.isShowing()) {
                    // ensure the controller will get repositioned later
                    mMediaController.hide();
                }
                mMediaController.show();
            }
        }
    }

    public void surfaceCreated(SurfaceHolder holder) {
        mSurfaceHolder = holder;
        // resume() was called before surfaceCreated()
        if (mMediaPlayer != null && mCurrentState == STATE_SUSPEND && mTargetState == STATE_RESUME) {
            mMediaPlayer.setDisplay(mSurfaceHolder);
            resume();
        } else {
            openVideo();
        }
    }

    public void surfaceDestroyed(SurfaceHolder holder) {
        // after we return from this we can't use the surface any more
        mSurfaceHolder = null;
        if (mMediaController != null)
            mMediaController.hide();
        if (mCurrentState != STATE_SUSPEND) {
            release(true);
        }
    }
}","[]","Optional.empty","\android\widget\VideoView.java"
"mTargetState","false","false","true","false","false","int","STATE_IDLE","[]","Optional.empty","\android\widget\VideoView.java"
"STATE_IDLE","false","false","true","true","true","int","0","[]","Optional.empty","\android\widget\VideoView.java"
"mPreparedListener","false","false","false","false","false","MediaPlayer.OnPreparedListener","new MediaPlayer.OnPreparedListener() {

    public void onPrepared(MediaPlayer mp) {
        mCurrentState = STATE_PREPARED;
        // Get the capabilities of the player for this stream
        Metadata data = mp.getMetadata(MediaPlayer.METADATA_ALL, MediaPlayer.BYPASS_METADATA_FILTER);
        if (data != null) {
            mCanPause = !data.has(Metadata.PAUSE_AVAILABLE) || data.getBoolean(Metadata.PAUSE_AVAILABLE);
            mCanSeekBack = !data.has(Metadata.SEEK_BACKWARD_AVAILABLE) || data.getBoolean(Metadata.SEEK_BACKWARD_AVAILABLE);
            mCanSeekForward = !data.has(Metadata.SEEK_FORWARD_AVAILABLE) || data.getBoolean(Metadata.SEEK_FORWARD_AVAILABLE);
        } else {
            mCanPause = mCanSeekBack = mCanSeekForward = true;
        }
        if (mOnPreparedListener != null) {
            mOnPreparedListener.onPrepared(mMediaPlayer);
        }
        if (mMediaController != null) {
            mMediaController.setEnabled(true);
        }
        mVideoWidth = mp.getVideoWidth();
        mVideoHeight = mp.getVideoHeight();
        // mSeekWhenPrepared may be changed after seekTo() call
        int seekToPosition = mSeekWhenPrepared;
        if (seekToPosition != 0) {
            seekTo(seekToPosition);
        }
        if (mVideoWidth != 0 && mVideoHeight != 0) {
            // Log.i(""@@@@"", ""video size: "" + mVideoWidth +""/""+ mVideoHeight);
            getHolder().setFixedSize(mVideoWidth, mVideoHeight);
            if (mSurfaceWidth == mVideoWidth && mSurfaceHeight == mVideoHeight) {
                // start the video here instead of in the callback.
                if (mTargetState == STATE_PLAYING) {
                    start();
                    if (mMediaController != null) {
                        mMediaController.show();
                    }
                } else if (!isPlaying() && (seekToPosition != 0 || getCurrentPosition() > 0)) {
                    if (mMediaController != null) {
                        // Show the media controls when we're paused into a video and make 'em stick.
                        mMediaController.show(0);
                    }
                }
            }
        } else {
            // The video size might be reported to us later.
            if (mTargetState == STATE_PLAYING) {
                start();
            }
        }
    }
}","[]","Optional.empty","\android\widget\VideoView.java"
"LAST_LOG_FILENAME","false","false","true","true","false","String","""last_log""","[]","Optional.empty","\android\os\RecoverySystem.java"
"COMMAND_FILE","false","false","true","true","false","File","new File(RECOVERY_DIR, ""command"")","[]","Optional.empty","\android\os\RecoverySystem.java"
"RECOVERY_DIR","false","false","true","true","false","File","new File(""/cache/recovery"")","[]","Optional[/**
 * Used to communicate with recovery.  See bootable/recovery/recovery.c.
 */
]","\android\os\RecoverySystem.java"
"LOG_FILE_MAX_LENGTH","false","false","true","true","false","int","64 * 1024","[]","Optional[// Length limits for reading files.
]","\android\os\RecoverySystem.java"
"PUBLISH_PROGRESS_INTERVAL_MS","false","false","true","true","true","long","500","[]","Optional[/**
 * Send progress to listeners no more often than this (in ms).
 */
]","\android\os\RecoverySystem.java"
"TAG","false","false","true","true","true","String","""RecoverySystem""","[]","Optional.empty","\android\os\RecoverySystem.java"
"DEFAULT_KEYSTORE","false","false","true","true","true","File","new File(""/system/etc/security/otacerts.zip"")","[]","Optional[/**
 * Default location of zip file containing public keys (X509
 * certs) authorized to sign OTA updates.
 */
]","\android\os\RecoverySystem.java"
"LOG_FILE","false","false","true","true","false","File","new File(RECOVERY_DIR, ""log"")","[]","Optional.empty","\android\os\RecoverySystem.java"
"CREATOR","true","false","false","true","true","Creator<PermissionInfo>","new Creator<PermissionInfo>() {

    public PermissionInfo createFromParcel(Parcel source) {
        return new PermissionInfo(source);
    }

    public PermissionInfo[] newArray(int size) {
        return new PermissionInfo[size];
    }
}","[]","Optional.empty","\android\content\pm\PermissionInfo.java"
"PROTECTION_SIGNATURE_OR_SYSTEM","true","false","false","true","true","int","3","[]","Optional[/**
 * System-level value for {@link #protectionLevel}, corresponding
 * to the <code>signatureOrSystem</code> value of
 * {@link android.R.attr#protectionLevel}.
 */
]","\android\content\pm\PermissionInfo.java"
"protectionLevel","true","false","false","false","false","int","null","[]","Optional[/**
 * The level of access this permission is protecting, as per
 * {@link android.R.attr#protectionLevel}.  Values may be
 * {@link #PROTECTION_NORMAL}, {@link #PROTECTION_DANGEROUS}, or
 * {@link #PROTECTION_SIGNATURE}.
 */
]","\android\content\pm\PermissionInfo.java"
"PROTECTION_SIGNATURE","true","false","false","true","true","int","2","[]","Optional[/**
 * System-level value for {@link #protectionLevel}, corresponding
 * to the <code>signature</code> value of
 * {@link android.R.attr#protectionLevel}.
 */
]","\android\content\pm\PermissionInfo.java"
"nonLocalizedDescription","true","false","false","false","false","CharSequence","null","[]","Optional[/**
 * The description string provided in the AndroidManifest file, if any.  You
 * probably don't want to use this, since it will be null if the description
 * is in a resource.  You probably want
 * {@link PermissionInfo#loadDescription} instead.
 */
]","\android\content\pm\PermissionInfo.java"
"PROTECTION_DANGEROUS","true","false","false","true","true","int","1","[]","Optional[/**
 * Dangerous value for {@link #protectionLevel}, corresponding
 * to the <code>dangerous</code> value of
 * {@link android.R.attr#protectionLevel}.
 */
]","\android\content\pm\PermissionInfo.java"
"group","true","false","false","false","false","String","null","[]","Optional[/**
 * The group this permission is a part of, as per
 * {@link android.R.attr#permissionGroup}.
 */
]","\android\content\pm\PermissionInfo.java"
"descriptionRes","true","false","false","false","false","int","null","[]","Optional[/**
 * A string resource identifier (in the package's resources) of this
 * permission's description.  From the ""description"" attribute or,
 * if not set, 0.
 */
]","\android\content\pm\PermissionInfo.java"
"PROTECTION_NORMAL","true","false","false","true","true","int","0","[]","Optional[/**
 * A normal application value for {@link #protectionLevel}, corresponding
 * to the <code>normal</code> value of
 * {@link android.R.attr#protectionLevel}.
 */
]","\android\content\pm\PermissionInfo.java"
"mSelectionArgs","false","false","true","false","false","ArrayList<String>","new ArrayList<String>()","[]","Optional.empty","\com\android\internal\content\SelectionBuilder.java"
"mSelection","false","false","true","false","false","StringBuilder","new StringBuilder()","[]","Optional.empty","\com\android\internal\content\SelectionBuilder.java"
"mSurface","true","false","false","false","false","Surface","new Surface()","[]","Optional.empty","\com\android\internal\view\BaseSurfaceHolder.java"
"mRequestedType","false","false","false","false","false","int","-1","[]","Optional.empty","\com\android\internal\view\BaseSurfaceHolder.java"
"mHaveGottenCallbacks","false","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\view\BaseSurfaceHolder.java"
"mRequestedHeight","false","false","false","false","false","int","-1","[]","Optional.empty","\com\android\internal\view\BaseSurfaceHolder.java"
"mLastLockTime","false","false","false","false","false","long","0","[]","Optional.empty","\com\android\internal\view\BaseSurfaceHolder.java"
"mGottenCallbacks","false","false","false","false","false","SurfaceHolder.Callback","null","[]","Optional.empty","\com\android\internal\view\BaseSurfaceHolder.java"
"mCallbacks","true","false","false","false","true","ArrayList<SurfaceHolder.Callback>","new ArrayList<SurfaceHolder.Callback>()","[]","Optional.empty","\com\android\internal\view\BaseSurfaceHolder.java"
"mSurfaceLock","true","false","false","false","true","ReentrantLock","new ReentrantLock()","[]","Optional.empty","\com\android\internal\view\BaseSurfaceHolder.java"
"mSurfaceFrame","false","false","false","false","true","Rect","new Rect()","[]","Optional.empty","\com\android\internal\view\BaseSurfaceHolder.java"
"mType","false","false","false","false","false","int","-1","[]","Optional.empty","\com\android\internal\view\BaseSurfaceHolder.java"
"mRequestedFormat","false","true","false","false","false","int","PixelFormat.OPAQUE","[]","Optional[/**
 * @hide
 */
]","\com\android\internal\view\BaseSurfaceHolder.java"
"TAG","false","false","true","true","true","String","""BaseSurfaceHolder""","[]","Optional.empty","\com\android\internal\view\BaseSurfaceHolder.java"
"mRequestedWidth","false","false","false","false","false","int","-1","[]","Optional.empty","\com\android\internal\view\BaseSurfaceHolder.java"
"DEBUG","false","false","false","true","true","boolean","false","[]","Optional.empty","\com\android\internal\view\BaseSurfaceHolder.java"
"sKnownImPropNameMap_ItoS","false","false","true","true","true","Map<Integer,String>","null","[]","Optional.empty","\android\pim\vcard\VCardUtils.java"
"sKnownPhoneTypeMap_StoI","false","false","true","true","true","Map<String,Integer>","null","[]","Optional.empty","\android\pim\vcard\VCardUtils.java"
"sKnownPhoneTypesMap_ItoS","false","false","true","true","true","Map<Integer,String>","null","[]","Optional[// vCard and current (as of 2009-08-07) Contacts structure.
]","\android\pim\vcard\VCardUtils.java"
"sEscapeIndicatorsV40","false","false","true","true","true","int","new int[] { ';', ':' }","[]","Optional.empty","\android\pim\vcard\VCardUtils.java"
"LOG_TAG","false","false","true","true","true","String","""VCardUtils""","[]","Optional.empty","\android\pim\vcard\VCardUtils.java"
"sEscapeIndicatorsV30","false","false","true","true","true","int","new int[] { ':', ';', ',', ' ' }","[]","Optional.empty","\android\pim\vcard\VCardUtils.java"
"sPhoneTypesUnknownToContactsSet","false","false","true","true","true","Set<String>","null","[]","Optional.empty","\android\pim\vcard\VCardUtils.java"
"sMobilePhoneLabelSet","false","false","true","true","true","Set<String>","null","[]","Optional.empty","\android\pim\vcard\VCardUtils.java"
"sUnAcceptableAsciiInV21WordSet","false","false","true","true","true","Set<Character>","new HashSet<Character>(Arrays.asList('[', ']', '=', ':', '.', ',', ' '))","[]","Optional.empty","\android\pim\vcard\VCardUtils.java"
"TRANSACTION_onUsbMassStorageConnectionChanged","false","false","false","true","true","int","(IBinder.FIRST_CALL_TRANSACTION + 0)","[]","Optional.empty","\android\os\storage\IMountServiceListener.java"
"TRANSACTION_onStorageStateChanged","false","false","false","true","true","int","(IBinder.FIRST_CALL_TRANSACTION + 1)","[]","Optional.empty","\android\os\storage\IMountServiceListener.java"
"mRemote","false","false","true","false","false","IBinder","null","[]","Optional.empty","\android\os\storage\IMountServiceListener.java"
"DESCRIPTOR","false","false","true","true","true","String","""IMountServiceListener""","[]","Optional.empty","\android\os\storage\IMountServiceListener.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<WallpaperInfo>","new Parcelable.Creator<WallpaperInfo>() {

    public WallpaperInfo createFromParcel(Parcel source) {
        return new WallpaperInfo(source);
    }

    public WallpaperInfo[] newArray(int size) {
        return new WallpaperInfo[size];
    }
}","[]","Optional[/**
 * Used to make this class parcelable.
 */
]","\android\app\WallpaperInfo.java"
"mAuthorResource","false","false","false","false","true","int","null","[]","Optional[/**
 * Resource identifier for a string indicating the author of the wallpaper.
 */
]","\android\app\WallpaperInfo.java"
"mSettingsActivityName","false","false","false","false","true","String","null","[]","Optional[/**
 * The wallpaper setting activity's name, to
 * launch the setting activity of this wallpaper.
 */
]","\android\app\WallpaperInfo.java"
"mDescriptionResource","false","false","false","false","true","int","null","[]","Optional[/**
 * Resource identifier for a string containing a short description of the wallpaper.
 */
]","\android\app\WallpaperInfo.java"
"mThumbnailResource","false","false","false","false","true","int","null","[]","Optional[/**
 * Resource identifier for this wallpaper's thumbnail image.
 */
]","\android\app\WallpaperInfo.java"
"TAG","false","false","false","true","true","String","""WallpaperInfo""","[]","Optional.empty","\android\app\WallpaperInfo.java"
"mService","false","false","false","false","true","ResolveInfo","null","[]","Optional[/**
 * The Service that implements this wallpaper component.
 */
]","\android\app\WallpaperInfo.java"
"descriptor","false","false","false","true","true","String","""android.os.IServiceManager""","[]","Optional.empty","\android\os\IServiceManager.java"
"ADD_SERVICE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 2","[]","Optional.empty","\android\os\IServiceManager.java"
"CHECK_SERVICE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 1","[]","Optional.empty","\android\os\IServiceManager.java"
"GET_SERVICE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION","[]","Optional.empty","\android\os\IServiceManager.java"
"CHECK_SERVICES_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 4","[]","Optional.empty","\android\os\IServiceManager.java"
"LIST_SERVICES_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 3","[]","Optional.empty","\android\os\IServiceManager.java"
"SET_PERMISSION_CONTROLLER_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 5","[]","Optional.empty","\android\os\IServiceManager.java"
"THE_FORMATTER","false","false","true","true","true","Formatter","new Formatter() {

    @Override
    public String format(LogRecord r) {
        Throwable thrown = r.getThrown();
        if (thrown != null) {
            StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);
            sw.write(r.getMessage());
            sw.write(""\n"");
            thrown.printStackTrace(pw);
            pw.flush();
            return sw.toString();
        } else {
            return r.getMessage();
        }
    }
}","[]","Optional[/**
 * Holds the formatter for all Android log handlers.
 */
]","\com\android\internal\logging\AndroidHandler.java"
"SHOW_PRESS","false","false","true","true","true","int","1","[]","Optional[// constants for Message.what used by GestureHandler below
]","\android\view\GestureDetector.java"
"mStillDown","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\view\GestureDetector.java"
"mCurrentDownEvent","false","false","true","false","false","MotionEvent","null","[]","Optional.empty","\android\view\GestureDetector.java"
"mAlwaysInBiggerTapRegion","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\view\GestureDetector.java"
"DOUBLE_TAP_TIMEOUT","false","false","true","true","true","int","ViewConfiguration.getDoubleTapTimeout()","[]","Optional.empty","\android\view\GestureDetector.java"
"mVelocityTracker","false","false","true","false","false","VelocityTracker","null","[]","Optional[/**
 * Determines speed during touch scrolling
 */
]","\android\view\GestureDetector.java"
"mMinimumFlingVelocity","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\GestureDetector.java"
"LONGPRESS_TIMEOUT","false","false","true","true","true","int","ViewConfiguration.getLongPressTimeout()","[]","Optional.empty","\android\view\GestureDetector.java"
"TAP_TIMEOUT","false","false","true","true","true","int","ViewConfiguration.getTapTimeout()","[]","Optional.empty","\android\view\GestureDetector.java"
"LONG_PRESS","false","false","true","true","true","int","2","[]","Optional.empty","\android\view\GestureDetector.java"
"mMaximumFlingVelocity","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\GestureDetector.java"
"mTouchSlopSquare","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\GestureDetector.java"
"mIsLongpressEnabled","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\view\GestureDetector.java"
"mDoubleTapListener","false","false","true","false","false","OnDoubleTapListener","null","[]","Optional.empty","\android\view\GestureDetector.java"
"mLastMotionY","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\GestureDetector.java"
"mAlwaysInTapRegion","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\view\GestureDetector.java"
"mPreviousUpEvent","false","false","true","false","false","MotionEvent","null","[]","Optional.empty","\android\view\GestureDetector.java"
"mBiggerTouchSlopSquare","false","false","true","false","false","int","20 * 20","[]","Optional[// TODO: ViewConfiguration
]","\android\view\GestureDetector.java"
"mLastMotionX","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\GestureDetector.java"
"mHandler","false","false","true","false","true","Handler","null","[]","Optional.empty","\android\view\GestureDetector.java"
"mListener","false","false","true","false","true","OnGestureListener","null","[]","Optional.empty","\android\view\GestureDetector.java"
"mInLongPress","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\view\GestureDetector.java"
"TAP","false","false","true","true","true","int","3","[]","Optional.empty","\android\view\GestureDetector.java"
"mIsDoubleTapping","false","false","true","false","false","boolean","null","[]","Optional[/**
 * True when the user is still touching for the second tap (down, move, and
 * up events). Can only be true if there is a double tap listener attached.
 */
]","\android\view\GestureDetector.java"
"mIgnoreMultitouch","false","false","true","false","false","boolean","null","[]","Optional[/**
 * True if we are at a target API level of >= Froyo or the developer can
 * explicitly set it. If true, input events with > 1 pointer will be ignored
 * so we can work side by side with multitouch gesture detectors.
 */
]","\android\view\GestureDetector.java"
"mDoubleTapSlopSquare","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\GestureDetector.java"
"mPath","true","false","false","false","false","String","null","[]","Optional.empty","\android\net\WebAddress.java"
"MATCH_GROUP_PATH","false","false","false","true","true","int","5","[]","Optional.empty","\android\net\WebAddress.java"
"mAuthInfo","true","false","false","false","false","String","null","[]","Optional.empty","\android\net\WebAddress.java"
"mPort","true","false","false","false","false","int","null","[]","Optional.empty","\android\net\WebAddress.java"
"MATCH_GROUP_HOST","false","false","false","true","true","int","3","[]","Optional.empty","\android\net\WebAddress.java"
"mScheme","true","false","false","false","false","String","null","[]","Optional.empty","\android\net\WebAddress.java"
"sAddressPattern","false","false","false","true","false","Pattern","Pattern.compile(/* scheme    */
""(?:(http|https|file)\\:\\/\\/)?"" + /* authority */
""(?:([-A-Za-z0-9$_.+!*'(),;?&=]+(?:\\:[-A-Za-z0-9$_.+!*'(),;?&=]+)?)@)?"" + /* host      */
""([-"" + GOOD_IRI_CHAR + ""%_]+(?:\\.[-"" + GOOD_IRI_CHAR + ""%_]+)*|\\[[0-9a-fA-F:\\.]+\\])?"" + /* port      */
""(?:\\:([0-9]*))?"" + /* path      */
""(\\/?[^#]*)?"" + /* anchor    */
"".*"", Pattern.CASE_INSENSITIVE)","[]","Optional.empty","\android\net\WebAddress.java"
"MATCH_GROUP_AUTHORITY","false","false","false","true","true","int","2","[]","Optional.empty","\android\net\WebAddress.java"
"mHost","true","false","false","false","false","String","null","[]","Optional.empty","\android\net\WebAddress.java"
"MATCH_GROUP_SCHEME","false","false","false","true","true","int","1","[]","Optional.empty","\android\net\WebAddress.java"
"MATCH_GROUP_PORT","false","false","false","true","true","int","4","[]","Optional.empty","\android\net\WebAddress.java"
"LOGTAG","false","false","true","true","true","String","""http""","[]","Optional.empty","\android\net\WebAddress.java"
"mMillisInFuture","false","false","true","false","true","long","null","[]","Optional[/**
 * Millis since epoch when alarm should stop.
 */
]","\android\os\CountDownTimer.java"
"MSG","false","false","true","true","true","int","1","[]","Optional.empty","\android\os\CountDownTimer.java"
"mHandler","false","false","true","false","false","Handler","new Handler() {

    @Override
    public void handleMessage(Message msg) {
        synchronized (CountDownTimer.this) {
            final long millisLeft = mStopTimeInFuture - SystemClock.elapsedRealtime();
            if (millisLeft <= 0) {
                onFinish();
            } else if (millisLeft < mCountdownInterval) {
                // no tick, just delay until done
                sendMessageDelayed(obtainMessage(MSG), millisLeft);
            } else {
                long lastTickStart = SystemClock.elapsedRealtime();
                onTick(millisLeft);
                // take into account user's onTick taking time to execute
                long delay = lastTickStart + mCountdownInterval - SystemClock.elapsedRealtime();
                // complete, skip to next interval
                while (delay < 0) delay += mCountdownInterval;
                sendMessageDelayed(obtainMessage(MSG), delay);
            }
        }
    }
}","[]","Optional[// handles counting down
]","\android\os\CountDownTimer.java"
"mCountdownInterval","false","false","true","false","true","long","null","[]","Optional[/**
 * The interval in millis that the user receives callbacks
 */
]","\android\os\CountDownTimer.java"
"mStopTimeInFuture","false","false","true","false","false","long","null","[]","Optional.empty","\android\os\CountDownTimer.java"
"mCurrVelocity","false","false","false","false","false","float","null","[]","Optional[// Current velocity
]","\android\widget\OverScroller.java"
"TIME_COEF","false","false","true","true","true","float","1000.0f * (float) Math.PI / OVERSCROLL_SPRINGBACK_DURATION","[]","Optional[// Oscillation period
]","\android\widget\OverScroller.java"
"mVelocity","false","false","false","false","false","int","null","[]","Optional[// Initial velocity
]","\android\widget\OverScroller.java"
"FLING_MODE","false","false","true","true","true","int","1","[]","Optional.empty","\android\widget\OverScroller.java"
"TO_EDGE","false","false","true","true","true","int","0","[]","Optional.empty","\android\widget\OverScroller.java"
"TO_BOUNDARY","false","false","true","true","true","int","1","[]","Optional.empty","\android\widget\OverScroller.java"
"mOver","false","false","true","false","false","int","null","[]","Optional[// The allowed overshot distance before boundary is reached.
]","\android\widget\OverScroller.java"
"DEFAULT_BOUNCE_COEFFICIENT","false","false","true","true","true","float","0.16f","[]","Optional[// Proportion of the velocity that is preserved when the edge is reached.
]","\android\widget\OverScroller.java"
"mScrollerY","false","false","true","false","false","MagneticOverScroller","null","[]","Optional.empty","\android\widget\OverScroller.java"
"mState","false","false","true","false","false","int","TO_EDGE","[]","Optional.empty","\android\widget\OverScroller.java"
"mScrollerX","false","false","true","false","false","MagneticOverScroller","null","[]","Optional.empty","\android\widget\OverScroller.java"
"SCROLL_MODE","false","false","true","true","true","int","0","[]","Optional.empty","\android\widget\OverScroller.java"
"mFinal","false","false","false","false","false","int","null","[]","Optional[// Final position
]","\android\widget\OverScroller.java"
"mCurrentPosition","false","false","false","false","false","int","null","[]","Optional[// Current position
]","\android\widget\OverScroller.java"
"OVERSCROLL_SPRINGBACK_DURATION","false","false","true","true","true","int","200","[]","Optional[// Duration in milliseconds to go back from edge to edge. Springback is half of it.
]","\android\widget\OverScroller.java"
"mFinished","false","false","false","false","false","boolean","null","[]","Optional[// Whether the animation is currently in progress
]","\android\widget\OverScroller.java"
"mStart","false","false","false","false","false","int","null","[]","Optional[// Initial position
]","\android\widget\OverScroller.java"
"TO_BOUNCE","false","false","true","true","true","int","2","[]","Optional.empty","\android\widget\OverScroller.java"
"mInterpolator","false","false","true","false","true","Interpolator","null","[]","Optional.empty","\android\widget\OverScroller.java"
"mDuration","false","false","false","false","false","int","null","[]","Optional[// Animation duration, in milliseconds
]","\android\widget\OverScroller.java"
"mMode","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\OverScroller.java"
"mDeceleration","false","false","false","false","false","float","null","[]","Optional[// Constant current deceleration
]","\android\widget\OverScroller.java"
"GRAVITY","false","false","false","true","false","float","null","[]","Optional[// Constant gravity value, used to scale deceleration
]","\android\widget\OverScroller.java"
"mStartTime","false","false","false","false","false","long","null","[]","Optional[// Animation starting time, in system milliseconds
]","\android\widget\OverScroller.java"
"MINIMUM_VELOCITY_FOR_BOUNCE","false","false","true","true","true","float","Float.MAX_VALUE","[]","Optional[// 140.0f;
]","\android\widget\OverScroller.java"
"mBounceCoefficient","false","false","true","false","false","float","DEFAULT_BOUNCE_COEFFICIENT","[]","Optional.empty","\android\widget\OverScroller.java"
"DEFAULT_DURATION","false","false","true","true","true","int","250","[]","Optional.empty","\android\widget\OverScroller.java"
"sExternalFilt","false","false","false","true","true","IntentFilter","new IntentFilter()","[]","Optional.empty","\com\android\internal\content\PackageMonitor.java"
"mDisappearingPackages","false","false","false","false","false","String","null","[]","Optional.empty","\com\android\internal\content\PackageMonitor.java"
"sPackageFilt","false","false","false","true","true","IntentFilter","new IntentFilter()","[]","Optional.empty","\com\android\internal\content\PackageMonitor.java"
"mChangeType","false","false","false","false","false","int","null","[]","Optional.empty","\com\android\internal\content\PackageMonitor.java"
"mRegisteredContext","false","false","false","false","false","Context","null","[]","Optional.empty","\com\android\internal\content\PackageMonitor.java"
"mTempArray","false","false","false","false","false","String","new String[1]","[]","Optional.empty","\com\android\internal\content\PackageMonitor.java"
"PACKAGE_PERMANENT_CHANGE","true","false","false","true","true","int","3","[]","Optional.empty","\com\android\internal\content\PackageMonitor.java"
"mAppearingPackages","false","false","false","false","false","String","null","[]","Optional.empty","\com\android\internal\content\PackageMonitor.java"
"PACKAGE_UPDATING","true","false","false","true","true","int","1","[]","Optional.empty","\com\android\internal\content\PackageMonitor.java"
"mUpdatingPackages","false","false","false","false","true","HashSet<String>","new HashSet<String>()","[]","Optional.empty","\com\android\internal\content\PackageMonitor.java"
"PACKAGE_UNCHANGED","true","false","false","true","true","int","0","[]","Optional.empty","\com\android\internal\content\PackageMonitor.java"
"PACKAGE_TEMPORARY_CHANGE","true","false","false","true","true","int","2","[]","Optional.empty","\com\android\internal\content\PackageMonitor.java"
"mSomePackagesChanged","false","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\content\PackageMonitor.java"
"sNonDataFilt","false","false","false","true","true","IntentFilter","new IntentFilter()","[]","Optional.empty","\com\android\internal\content\PackageMonitor.java"
"mModifiedPackages","false","false","false","false","false","String","null","[]","Optional.empty","\com\android\internal\content\PackageMonitor.java"
"sSingleThreadExecutor","false","false","true","true","false","ExecutorService","null","[]","Optional[// lazy, guarded by class
]","\android\app\QueuedWork.java"
"sPendingWorkFinishers","false","false","true","true","true","ConcurrentLinkedQueue<Runnable>","new ConcurrentLinkedQueue<Runnable>()","[]","Optional[// activities started by the application.
]","\android\app\QueuedWork.java"
"GET_TEXT_WITH_STYLES","false","false","false","true","true","int","0x0001","[]","Optional[/**
 * Flag for use with {@link #getTextAfterCursor} and
 * {@link #getTextBeforeCursor} to have style information returned along
 * with the text.  If not set, you will receive only the raw text.  If
 * set, you may receive a complex CharSequence of both text and style
 * spans.
 */
]","\android\view\inputmethod\InputConnection.java"
"GET_EXTRACTED_TEXT_MONITOR","true","false","false","true","true","int","0x0001","[]","Optional[/**
 * Flag for use with {@link #getExtractedText} to indicate you would
 * like to receive updates when the extracted text changes.
 */
]","\android\view\inputmethod\InputConnection.java"
"CLOSE","false","false","false","true","true","int","1","[]","Optional.empty","\android\webkit\WebIconDatabase.java"
"OPEN","false","false","false","true","true","int","0","[]","Optional[// Message ids
]","\android\webkit\WebIconDatabase.java"
"mIcon","false","false","true","false","true","Bitmap","null","[]","Optional.empty","\android\webkit\WebIconDatabase.java"
"RETAIN_ICON","false","false","false","true","true","int","4","[]","Optional.empty","\android\webkit\WebIconDatabase.java"
"BULK_REQUEST_ICON","false","false","false","true","true","int","6","[]","Optional.empty","\android\webkit\WebIconDatabase.java"
"REMOVE_ALL","false","false","false","true","true","int","2","[]","Optional.empty","\android\webkit\WebIconDatabase.java"
"mEventHandler","false","false","true","false","true","EventHandler","new EventHandler()","[]","Optional[// ready.
]","\android\webkit\WebIconDatabase.java"
"RELEASE_ICON","false","false","false","true","true","int","5","[]","Optional.empty","\android\webkit\WebIconDatabase.java"
"mHandler","false","false","true","false","false","Handler","null","[]","Optional[// Actual handler that runs in WebCore thread
]","\android\webkit\WebIconDatabase.java"
"mListener","false","false","true","false","true","IconListener","null","[]","Optional.empty","\android\webkit\WebIconDatabase.java"
"sIconDatabase","false","false","true","true","false","WebIconDatabase","null","[]","Optional[// Global instance of a WebIconDatabase
]","\android\webkit\WebIconDatabase.java"
"mMessages","false","false","true","false","false","Vector<Message>","new Vector<Message>()","[]","Optional[// Vector of messages before the WebCore thread is ready
]","\android\webkit\WebIconDatabase.java"
"REQUEST_ICON","false","false","false","true","true","int","3","[]","Optional.empty","\android\webkit\WebIconDatabase.java"
"ICON_RESULT","false","false","true","true","true","int","10","[]","Optional[// Message for dispatching icon request results
]","\android\webkit\WebIconDatabase.java"
"mUrl","false","false","true","false","true","String","null","[]","Optional.empty","\android\webkit\WebIconDatabase.java"
"LOGTAG","false","false","true","true","true","String","""WebIconDatabase""","[]","Optional.empty","\android\webkit\WebIconDatabase.java"
"SERVICE_INTERFACE","true","false","false","true","true","String","""android.service.urlrenderer.UrlRendererService""","[@SdkConstant(SdkConstantType.SERVICE_ACTION)]","Optional[/**
 * The {@link Intent} that must be declared as handled by the service.
 */
]","\android\service\urlrenderer\UrlRendererService.java"
"mBinderInterface","false","false","true","false","true","IUrlRendererService.Stub","new IUrlRendererService.Stub() {

    public void render(List<String> urls, int width, int height, IUrlRendererCallback cb) {
        processRequest(urls, width, height, new InternalCallback(cb));
    }
}","[]","Optional.empty","\android\service\urlrenderer\UrlRendererService.java"
"mCallback","false","false","true","false","true","IUrlRendererCallback","null","[]","Optional.empty","\android\service\urlrenderer\UrlRendererService.java"
"TAG","false","false","false","true","true","String","""UrlRendererService""","[]","Optional.empty","\android\service\urlrenderer\UrlRendererService.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<SavedState>","new Creator<SavedState>() {

    public SavedState createFromParcel(Parcel in) {
        return new SavedState(in);
    }

    public SavedState[] newArray(int size) {
        return new SavedState[size];
    }
}","[]","Optional.empty","\android\widget\TimePicker.java"
"mCurrentMinute","false","false","true","false","false","int","0","[]","Optional[// 0-59
]","\android\widget\TimePicker.java"
"mOnTimeChangedListener","false","false","true","false","false","OnTimeChangedListener","null","[]","Optional[// callbacks
]","\android\widget\TimePicker.java"
"mMinutePicker","false","false","true","false","true","NumberPicker","null","[]","Optional.empty","\android\widget\TimePicker.java"
"mAmPmButton","false","false","true","false","true","Button","null","[]","Optional.empty","\android\widget\TimePicker.java"
"mIsAm","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\TimePicker.java"
"mPmText","false","false","true","false","true","String","null","[]","Optional.empty","\android\widget\TimePicker.java"
"mHourPicker","false","false","true","false","true","NumberPicker","null","[]","Optional[// ui components
]","\android\widget\TimePicker.java"
"mAmText","false","false","true","false","true","String","null","[]","Optional.empty","\android\widget\TimePicker.java"
"mIs24HourView","false","false","true","false","false","Boolean","false","[]","Optional.empty","\android\widget\TimePicker.java"
"mMinute","false","false","true","false","true","int","null","[]","Optional.empty","\android\widget\TimePicker.java"
"mCurrentHour","false","false","true","false","false","int","0","[]","Optional[// 0-23
]","\android\widget\TimePicker.java"
"mHour","false","false","true","false","true","int","null","[]","Optional.empty","\android\widget\TimePicker.java"
"NO_OP_CHANGE_LISTENER","false","false","true","true","true","OnTimeChangedListener","new OnTimeChangedListener() {

    public void onTimeChanged(TimePicker view, int hourOfDay, int minute) {
    }
}","[]","Optional[/**
 * A no-op callback used in the constructor to avoid null checks
 * later in the code.
 */
]","\android\widget\TimePicker.java"
"STATE_CONNECTING","true","false","false","true","true","int","1","[]","Optional[/**
 * Connection attempt in progress
 */
]","\android\bluetooth\BluetoothPbap.java"
"RESULT_CANCELED","true","false","false","true","true","int","2","[]","Optional[/**
 * Connection canceled before completion.
 */
]","\android\bluetooth\BluetoothPbap.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\android\bluetooth\BluetoothPbap.java"
"STATE_CONNECTED","true","false","false","true","true","int","2","[]","Optional[/**
 * Client is currently connected
 */
]","\android\bluetooth\BluetoothPbap.java"
"mConnection","false","false","true","false","false","ServiceConnection","new ServiceConnection() {

    public void onServiceConnected(ComponentName className, IBinder service) {
        if (DBG)
            log(""Proxy object connected"");
        mService = IBluetoothPbap.Stub.asInterface(service);
        if (mServiceListener != null) {
            mServiceListener.onServiceConnected();
        }
    }

    public void onServiceDisconnected(ComponentName className) {
        if (DBG)
            log(""Proxy object disconnected"");
        mService = null;
        if (mServiceListener != null) {
            mServiceListener.onServiceDisconnected();
        }
    }
}","[]","Optional.empty","\android\bluetooth\BluetoothPbap.java"
"RESULT_FAILURE","true","false","false","true","true","int","0","[]","Optional.empty","\android\bluetooth\BluetoothPbap.java"
"RESULT_SUCCESS","true","false","false","true","true","int","1","[]","Optional.empty","\android\bluetooth\BluetoothPbap.java"
"STATE_ERROR","true","false","false","true","true","int","-1","[]","Optional[/**
 * There was an error trying to obtain the state
 */
]","\android\bluetooth\BluetoothPbap.java"
"STATE_DISCONNECTED","true","false","false","true","true","int","0","[]","Optional[/**
 * No client currently connected
 */
]","\android\bluetooth\BluetoothPbap.java"
"mServiceListener","false","false","true","false","true","ServiceListener","null","[]","Optional.empty","\android\bluetooth\BluetoothPbap.java"
"TAG","false","false","true","true","true","String","""BluetoothPbap""","[]","Optional.empty","\android\bluetooth\BluetoothPbap.java"
"DBG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\bluetooth\BluetoothPbap.java"
"PBAP_STATE_CHANGED_ACTION","true","false","false","true","true","String","""android.bluetooth.pbap.intent.action.PBAP_STATE_CHANGED""","[]","Optional[/**
 * Indicates the state of an pbap connection state has changed.
 * This intent will always contain PBAP_STATE, PBAP_PREVIOUS_STATE and
 * BluetoothIntent.ADDRESS extras.
 */
]","\android\bluetooth\BluetoothPbap.java"
"PBAP_PREVIOUS_STATE","true","false","false","true","true","String","""android.bluetooth.pbap.intent.PBAP_PREVIOUS_STATE""","[]","Optional[/**
 * int extra for PBAP_STATE_CHANGED_ACTION
 */
]","\android\bluetooth\BluetoothPbap.java"
"mService","false","false","true","false","false","IBluetoothPbap","null","[]","Optional.empty","\android\bluetooth\BluetoothPbap.java"
"PBAP_STATE","true","false","false","true","true","String","""android.bluetooth.pbap.intent.PBAP_STATE""","[]","Optional[/**
 * int extra for PBAP_STATE_CHANGED_ACTION
 */
]","\android\bluetooth\BluetoothPbap.java"
"fileName","false","false","true","false","false","String","null","[]","Optional[/**
 * File part file name.
 */
]","\com\android\internal\http\multipart\FilePartSource.java"
"file","false","false","true","false","false","File","null","[]","Optional[/**
 * File part file.
 */
]","\com\android\internal\http\multipart\FilePartSource.java"
"parent","false","false","false","false","false","Activity","null","[]","Optional.empty","\android\app\ActivityThread.java"
"ident","false","false","false","false","false","int","null","[]","Optional.empty","\android\app\ActivityThread.java"
"mInstrumentationAppPackage","false","false","false","false","false","String","null","[]","Optional.empty","\android\app\ActivityThread.java"
"PATTERN_SEMICOLON","false","false","true","true","true","Pattern","Pattern.compile("";"")","[]","Optional.empty","\android\app\ActivityThread.java"
"path","false","false","false","false","false","String","null","[]","Optional.empty","\android\app\ActivityThread.java"
"STOP_SERVICE","true","false","false","true","true","int","116","[]","Optional.empty","\android\app\ActivityThread.java"
"STOP_ACTIVITY_SHOW","true","false","false","true","true","int","103","[]","Optional.empty","\android\app\ActivityThread.java"
"state","false","false","false","false","false","Bundle","null","[]","Optional.empty","\android\app\ActivityThread.java"
"mScale","false","false","true","false","true","float","null","[]","Optional.empty","\android\app\ActivityThread.java"
"mRelaunchingActivities","false","false","false","false","true","ArrayList<ActivityClientRecord>","new ArrayList<ActivityClientRecord>()","[]","Optional.empty","\android\app\ActivityThread.java"
"mDisplay","false","false","false","false","false","Display","null","[]","Optional.empty","\android\app\ActivityThread.java"
"lastNonConfigurationChildInstances","false","false","false","false","false","HashMap<String,Object>","null","[]","Optional.empty","\android\app\ActivityThread.java"
"DEBUG_CONFIGURATION","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\app\ActivityThread.java"
"mNumVisibleActivities","false","false","false","false","false","int","0","[]","Optional[// Number of activities that are currently visible on-screen.
]","\android\app\ActivityThread.java"
"packageInfo","false","false","false","false","false","LoadedApk","null","[]","Optional.empty","\android\app\ActivityThread.java"
"SCHEDULE_CRASH","true","false","false","true","true","int","134","[]","Optional.empty","\android\app\ActivityThread.java"
"activity","false","false","false","false","false","Activity","null","[]","Optional.empty","\android\app\ActivityThread.java"
"mInitialApplication","false","false","false","false","false","Application","null","[]","Optional.empty","\android\app\ActivityThread.java"
"resultCode","false","false","false","false","false","int","null","[]","Optional.empty","\android\app\ActivityThread.java"
"ONE_COUNT_COLUMN","false","false","true","true","true","String","""%17s %8d""","[]","Optional.empty","\android\app\ActivityThread.java"
"instrumentationWatcher","false","false","false","false","false","IInstrumentationWatcher","null","[]","Optional.empty","\android\app\ActivityThread.java"
"STOP_ACTIVITY_HIDE","true","false","false","true","true","int","104","[]","Optional.empty","\android\app\ActivityThread.java"
"profileFile","false","false","false","false","false","String","null","[]","Optional.empty","\android\app\ActivityThread.java"
"embeddedID","false","false","false","false","false","String","null","[]","Optional.empty","\android\app\ActivityThread.java"
"stopped","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\app\ActivityThread.java"
"TWO_COUNT_COLUMNS_DB","false","false","true","true","true","String","""%20s %8d %20s %8d""","[]","Optional.empty","\android\app\ActivityThread.java"
"handlingProfiling","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\app\ActivityThread.java"
"UNBIND_SERVICE","true","false","false","true","true","int","122","[]","Optional.empty","\android\app\ActivityThread.java"
"GC_WHEN_IDLE","true","false","false","true","true","int","120","[]","Optional.empty","\android\app\ActivityThread.java"
"CREATE_SERVICE","true","false","false","true","true","int","114","[]","Optional.empty","\android\app\ActivityThread.java"
"mActivities","false","false","false","false","true","HashMap<IBinder,ActivityClientRecord>","new HashMap<IBinder, ActivityClientRecord>()","[]","Optional.empty","\android\app\ActivityThread.java"
"pendingResults","false","false","false","false","false","List<ResultInfo>","null","[]","Optional.empty","\android\app\ActivityThread.java"
"lastNonConfigurationInstance","false","false","false","false","false","Object","null","[]","Optional.empty","\android\app\ActivityThread.java"
"mLocalProviders","false","false","false","false","true","HashMap<IBinder,ProviderClientRecord>","new HashMap<IBinder, ProviderClientRecord>()","[]","Optional.empty","\android\app\ActivityThread.java"
"config","false","false","false","false","false","Configuration","null","[]","Optional.empty","\android\app\ActivityThread.java"
"PAUSE_ACTIVITY","true","false","false","true","true","int","101","[]","Optional.empty","\android\app\ActivityThread.java"
"resultData","false","false","false","false","false","String","null","[]","Optional.empty","\android\app\ActivityThread.java"
"DEBUG_BROADCAST","false","false","false","true","true","boolean","false","[]","Optional.empty","\android\app\ActivityThread.java"
"results","false","false","false","false","false","List<ResultInfo>","null","[]","Optional.empty","\android\app\ActivityThread.java"
"PROFILER_CONTROL","true","false","false","true","true","int","127","[]","Optional.empty","\android\app\ActivityThread.java"
"info","false","false","false","false","false","LoadedApk","null","[]","Optional.empty","\android\app\ActivityThread.java"
"count","true","false","false","false","false","int","null","[]","Optional.empty","\android\app\ActivityThread.java"
"sync","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\app\ActivityThread.java"
"TWO_COUNT_COLUMNS","false","false","true","true","true","String","""%17s %8d %17s %8d""","[]","Optional.empty","\android\app\ActivityThread.java"
"pendingIntents","false","false","false","false","false","List<Intent>","null","[]","Optional.empty","\android\app\ActivityThread.java"
"rebind","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\app\ActivityThread.java"
"mAppThread","false","false","false","false","true","ApplicationThread","new ApplicationThread()","[]","Optional.empty","\android\app\ActivityThread.java"
"mName","false","false","false","false","true","String","null","[]","Optional.empty","\android\app\ActivityThread.java"
"debugMode","false","false","false","false","false","int","null","[]","Optional.empty","\android\app\ActivityThread.java"
"HIDE_WINDOW","true","false","false","true","true","int","106","[]","Optional.empty","\android\app\ActivityThread.java"
"fd","false","false","false","false","false","ParcelFileDescriptor","null","[]","Optional.empty","\android\app\ActivityThread.java"
"CREATE_BACKUP_AGENT","true","false","false","true","true","int","128","[]","Optional.empty","\android\app\ActivityThread.java"
"appInfo","false","false","false","false","false","ApplicationInfo","null","[]","Optional.empty","\android\app\ActivityThread.java"
"description","false","false","false","false","false","CharSequence","null","[]","Optional.empty","\android\app\ActivityThread.java"
"mResConfiguration","false","false","false","false","false","Configuration","null","[]","Optional.empty","\android\app\ActivityThread.java"
"mInstrumentationAppDir","false","false","false","false","false","String","null","[]","Optional.empty","\android\app\ActivityThread.java"
"backupMode","false","false","false","false","false","int","null","[]","Optional.empty","\android\app\ActivityThread.java"
"mServices","false","false","false","false","true","HashMap<IBinder,Service>","new HashMap<IBinder, Service>()","[]","Optional.empty","\android\app\ActivityThread.java"
"mThumbnailHeight","false","false","true","false","false","int","-1","[]","Optional.empty","\android\app\ActivityThread.java"
"dumped","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\app\ActivityThread.java"
"mActiveResources","false","false","false","false","true","HashMap<ResourcesKey,WeakReference<Resources>>","new HashMap<ResourcesKey, WeakReference<Resources>>()","[]","Optional.empty","\android\app\ActivityThread.java"
"args","false","false","false","false","false","String","null","[]","Optional.empty","\android\app\ActivityThread.java"
"what","false","false","false","false","false","String","null","[]","Optional.empty","\android\app\ActivityThread.java"
"SHOW_WINDOW","true","false","false","true","true","int","105","[]","Optional.empty","\android\app\ActivityThread.java"
"CLEAN_UP_CONTEXT","true","false","false","true","true","int","119","[]","Optional.empty","\android\app\ActivityThread.java"
"service","false","false","false","false","false","IBinder","null","[]","Optional.empty","\android\app\ActivityThread.java"
"DESTROY_ACTIVITY","true","false","false","true","true","int","109","[]","Optional.empty","\android\app\ActivityThread.java"
"NEW_INTENT","true","false","false","true","true","int","112","[]","Optional.empty","\android\app\ActivityThread.java"
"window","false","false","false","false","false","Window","null","[]","Optional.empty","\android\app\ActivityThread.java"
"DEBUG_BACKUP","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\app\ActivityThread.java"
"DEBUG_RESULTS","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\app\ActivityThread.java"
"createdConfig","false","false","false","false","false","Configuration","null","[]","Optional.empty","\android\app\ActivityThread.java"
"SERVICE_ARGS","true","false","false","true","true","int","115","[]","Optional.empty","\android\app\ActivityThread.java"
"DEBUG_MESSAGES","false","false","false","true","true","boolean","false","[]","Optional.empty","\android\app\ActivityThread.java"
"HEAP_COLUMN","false","false","true","true","true","String","""%17s %8s %8s %8s %8s""","[]","Optional.empty","\android\app\ActivityThread.java"
"mDisplayMetrics","false","false","false","false","false","DisplayMetrics","null","[]","Optional.empty","\android\app\ActivityThread.java"
"instrumentationArgs","false","false","false","false","false","Bundle","null","[]","Optional.empty","\android\app\ActivityThread.java"
"context","false","false","false","false","false","ContextImpl","null","[]","Optional.empty","\android\app\ActivityThread.java"
"mLooper","false","false","false","false","true","Looper","Looper.myLooper()","[]","Optional.empty","\android\app\ActivityThread.java"
"RELAUNCH_ACTIVITY","true","false","false","true","true","int","126","[]","Optional.empty","\android\app\ActivityThread.java"
"mResDir","false","false","true","false","true","String","null","[]","Optional.empty","\android\app\ActivityThread.java"
"ACTIVITY_CONFIGURATION_CHANGED","true","false","false","true","true","int","125","[]","Optional.empty","\android\app\ActivityThread.java"
"isForward","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\app\ActivityThread.java"
"restrictedBackupMode","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\app\ActivityThread.java"
"PAUSE_ACTIVITY_FINISHING","true","false","false","true","true","int","102","[]","Optional.empty","\android\app\ActivityThread.java"
"mHash","false","false","true","false","true","int","null","[]","Optional.empty","\android\app\ActivityThread.java"
"MIN_TIME_BETWEEN_GCS","false","false","true","true","true","long","5 * 1000","[]","Optional.empty","\android\app\ActivityThread.java"
"LOG_ON_RESUME_CALLED","false","false","true","true","true","int","30022","[]","Optional.empty","\android\app\ActivityThread.java"
"mJitEnabled","false","false","false","false","false","boolean","false","[]","Optional.empty","\android\app\ActivityThread.java"
"flags","false","false","false","false","false","int","null","[]","Optional.empty","\android\app\ActivityThread.java"
"THUMBNAIL_FORMAT","false","false","true","true","true","android.graphics.Bitmap.Config","Bitmap.Config.RGB_565","[]","Optional.empty","\android\app\ActivityThread.java"
"ACTIVITY_THREAD_CHECKIN_VERSION","false","false","true","true","true","int","1","[]","Optional[// Formatting for checkin service - update version if row format changes
]","\android\app\ActivityThread.java"
"sThreadLocal","false","false","false","true","true","ThreadLocal<ActivityThread>","new ThreadLocal()","[]","Optional.empty","\android\app\ActivityThread.java"
"activityInfo","false","false","false","false","false","ActivityInfo","null","[]","Optional.empty","\android\app\ActivityThread.java"
"mBoundApplication","false","false","false","false","false","AppBindData","null","[]","Optional.empty","\android\app\ActivityThread.java"
"EXIT_APPLICATION","true","false","false","true","true","int","111","[]","Optional.empty","\android\app\ActivityThread.java"
"REMOVE_PROVIDER","true","false","false","true","true","int","131","[]","Optional.empty","\android\app\ActivityThread.java"
"hideForNow","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\app\ActivityThread.java"
"LOW_MEMORY","true","false","false","true","true","int","124","[]","Optional.empty","\android\app\ActivityThread.java"
"LOG_ON_PAUSE_CALLED","false","false","true","true","true","int","30021","[]","Optional.empty","\android\app\ActivityThread.java"
"resultAbort","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\app\ActivityThread.java"
"mProvider","false","false","false","false","true","IContentProvider","null","[]","Optional.empty","\android\app\ActivityThread.java"
"SEND_RESULT","true","false","false","true","true","int","108","[]","Optional.empty","\android\app\ActivityThread.java"
"BIND_APPLICATION","true","false","false","true","true","int","110","[]","Optional.empty","\android\app\ActivityThread.java"
"instrumentationName","false","false","false","false","false","ComponentName","null","[]","Optional.empty","\android\app\ActivityThread.java"
"mInstrumentation","false","false","false","false","false","Instrumentation","null","[]","Optional.empty","\android\app\ActivityThread.java"
"mAllApplications","false","false","false","false","true","ArrayList<Application>","new ArrayList<Application>()","[]","Optional.empty","\android\app\ActivityThread.java"
"mInstrumentedAppDir","false","false","false","false","false","String","null","[]","Optional.empty","\android\app\ActivityThread.java"
"CONFIGURATION_CHANGED","true","false","false","true","true","int","118","[]","Optional.empty","\android\app\ActivityThread.java"
"token","false","false","false","false","false","IBinder","null","[]","Optional.empty","\android\app\ActivityThread.java"
"mOnPauseListeners","false","false","false","false","true","HashMap<Activity,ArrayList<OnActivityPausedListener>>","new HashMap<Activity, ArrayList<OnActivityPausedListener>>()","[]","Optional.empty","\android\app\ActivityThread.java"
"mLocalProvider","false","false","false","false","true","ContentProvider","null","[]","Optional.empty","\android\app\ActivityThread.java"
"mGcIdlerScheduled","false","false","false","false","false","boolean","false","[]","Optional.empty","\android\app\ActivityThread.java"
"TAG","false","false","false","true","true","String","""ActivityThread""","[]","Optional.empty","\android\app\ActivityThread.java"
"mH","false","false","false","false","true","H","new H()","[]","Optional.empty","\android\app\ActivityThread.java"
"DUMP_SERVICE","true","false","false","true","true","int","123","[]","Optional.empty","\android\app\ActivityThread.java"
"paused","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\app\ActivityThread.java"
"nextIdle","false","false","false","false","false","ActivityClientRecord","null","[]","Optional.empty","\android\app\ActivityThread.java"
"mPendingConfiguration","false","false","false","false","false","Configuration","null","[]","Optional.empty","\android\app\ActivityThread.java"
"mThumbnailWidth","false","false","true","false","false","int","-1","[]","Optional.empty","\android\app\ActivityThread.java"
"RESUME_ACTIVITY","true","false","false","true","true","int","107","[]","Optional.empty","\android\app\ActivityThread.java"
"processName","false","false","false","false","false","String","null","[]","Optional.empty","\android\app\ActivityThread.java"
"REQUEST_THUMBNAIL","true","false","false","true","true","int","117","[]","Optional.empty","\android\app\ActivityThread.java"
"resultExtras","false","false","false","false","false","Bundle","null","[]","Optional.empty","\android\app\ActivityThread.java"
"RECEIVER","true","false","false","true","true","int","113","[]","Optional.empty","\android\app\ActivityThread.java"
"thumbnail","false","false","false","false","false","Bitmap","null","[]","Optional.empty","\android\app\ActivityThread.java"
"BIND_SERVICE","true","false","false","true","true","int","121","[]","Optional.empty","\android\app\ActivityThread.java"
"mSystemContext","false","false","false","true","false","ContextImpl","null","[]","Optional.empty","\android\app\ActivityThread.java"
"DESTROY_BACKUP_AGENT","true","false","false","true","true","int","129","[]","Optional.empty","\android\app\ActivityThread.java"
"mGcIdler","false","false","false","false","true","GcIdler","new GcIdler()","[]","Optional.empty","\android\app\ActivityThread.java"
"DB_INFO_FORMAT","false","false","true","true","true","String","""  %8d %8d %14d  %s""","[]","Optional.empty","\android\app\ActivityThread.java"
"SQLITE_MEM_RELEASED_EVENT_LOG_TAG","false","false","true","true","true","int","75003","[]","Optional.empty","\android\app\ActivityThread.java"
"mResourcePackages","false","false","false","false","true","HashMap<String,WeakReference<LoadedApk>>","new HashMap<String, WeakReference<LoadedApk>>()","[]","Optional.empty","\android\app\ActivityThread.java"
"localLOGV","false","false","false","true","true","boolean","DEBUG ? Config.LOGD : Config.LOGV","[]","Optional.empty","\android\app\ActivityThread.java"
"mSystemThread","false","false","false","false","false","boolean","false","[]","Optional.empty","\android\app\ActivityThread.java"
"mProviderRefCountMap","false","false","false","false","true","HashMap<IBinder,ProviderRefCount>","new HashMap<IBinder, ProviderRefCount>()","[]","Optional.empty","\android\app\ActivityThread.java"
"who","false","false","false","false","false","String","null","[]","Optional.empty","\android\app\ActivityThread.java"
"mPackages","false","false","false","false","true","HashMap<String,WeakReference<LoadedApk>>","new HashMap<String, WeakReference<LoadedApk>>()","[]","Optional[// seen, not removing entries from this map.
]","\android\app\ActivityThread.java"
"mConfiguration","false","false","false","false","false","Configuration","null","[]","Optional.empty","\android\app\ActivityThread.java"
"mBackupAgents","false","false","false","false","true","HashMap<String,BackupAgent>","new HashMap<String, BackupAgent>()","[]","Optional[// set of instantiated backup agents, keyed by package name
]","\android\app\ActivityThread.java"
"sPackageManager","false","false","false","true","false","IPackageManager","null","[]","Optional.empty","\android\app\ActivityThread.java"
"SUICIDE","true","false","false","true","true","int","130","[]","Optional.empty","\android\app\ActivityThread.java"
"DISPATCH_PACKAGE_BROADCAST","true","false","false","true","true","int","133","[]","Optional.empty","\android\app\ActivityThread.java"
"intents","false","false","false","false","false","List<Intent>","null","[]","Optional.empty","\android\app\ActivityThread.java"
"mProviderMap","false","false","false","false","true","HashMap<String,ProviderClientRecord>","new HashMap<String, ProviderClientRecord>()","[]","Optional[// The lock of mProviderMap protects the following variables.
]","\android\app\ActivityThread.java"
"sMainThreadHandler","false","false","false","true","false","Handler","null","[]","Optional[// set once in main()
]","\android\app\ActivityThread.java"
"newConfig","false","false","false","false","false","Configuration","null","[]","Optional.empty","\android\app\ActivityThread.java"
"ENABLE_JIT","true","false","false","true","true","int","132","[]","Optional.empty","\android\app\ActivityThread.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\app\ActivityThread.java"
"mNewActivities","false","false","false","false","false","ActivityClientRecord","null","[]","Optional[// be reported when next we idle.
]","\android\app\ActivityThread.java"
"intent","false","false","false","false","false","Intent","null","[]","Optional.empty","\android\app\ActivityThread.java"
"LAUNCH_ACTIVITY","true","false","false","true","true","int","100","[]","Optional.empty","\android\app\ActivityThread.java"
"startId","false","false","false","false","false","int","null","[]","Optional.empty","\android\app\ActivityThread.java"
"startsNotResumed","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\app\ActivityThread.java"
"providers","false","false","false","false","false","List<ProviderInfo>","null","[]","Optional.empty","\android\app\ActivityThread.java"
"TRANSACTION_onShutDownComplete","false","false","false","true","true","int","(IBinder.FIRST_CALL_TRANSACTION + 0)","[]","Optional.empty","\android\os\storage\IMountShutdownObserver.java"
"mRemote","false","false","true","false","false","IBinder","null","[]","Optional.empty","\android\os\storage\IMountShutdownObserver.java"
"DESCRIPTOR","false","false","true","true","true","java.lang.String","""IMountShutdownObserver""","[]","Optional.empty","\android\os\storage\IMountShutdownObserver.java"
"userObj","false","false","false","false","false","Object","null","[]","Optional.empty","\android\os\Registrant.java"
"refH","false","false","false","false","false","WeakReference","null","[]","Optional.empty","\android\os\Registrant.java"
"what","false","false","false","false","false","int","null","[]","Optional.empty","\android\os\Registrant.java"
"EXTRA_AUDIO_STATE","true","false","false","true","true","String","""android.bluetooth.headset.extra.AUDIO_STATE""","[]","Optional.empty","\android\bluetooth\BluetoothHeadset.java"
"STATE_CONNECTING","true","false","false","true","true","int","1","[]","Optional[/**
 * Connection attempt in progress
 */
]","\android\bluetooth\BluetoothHeadset.java"
"PRIORITY_ON","true","false","false","true","true","int","100","[]","Optional[/**
 * Default priority for headsets for which we will accept
 * incoming connections but not auto-connect.
 */
]","\android\bluetooth\BluetoothHeadset.java"
"RESULT_CANCELED","true","false","false","true","true","int","2","[]","Optional[/**
 * Connection canceled before completion.
 */
]","\android\bluetooth\BluetoothHeadset.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\android\bluetooth\BluetoothHeadset.java"
"REMOTE_DISCONNECT","true","false","false","true","true","int","0","[]","Optional[/**
 * Values for {@link #EXTRA_DISCONNECT_INITIATOR}
 */
]","\android\bluetooth\BluetoothHeadset.java"
"LOCAL_DISCONNECT","true","false","false","true","true","int","1","[]","Optional.empty","\android\bluetooth\BluetoothHeadset.java"
"STATE_CONNECTED","true","false","false","true","true","int","2","[]","Optional[/**
 * A headset is currently connected
 */
]","\android\bluetooth\BluetoothHeadset.java"
"ACTION_STATE_CHANGED","true","false","false","true","true","String","""android.bluetooth.headset.action.STATE_CHANGED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional.empty","\android\bluetooth\BluetoothHeadset.java"
"PRIORITY_UNDEFINED","true","false","false","true","true","int","-1","[]","Optional[/**
 * Default priority when not set or when the device is unpaired
 */
]","\android\bluetooth\BluetoothHeadset.java"
"mConnection","false","false","true","false","false","ServiceConnection","new ServiceConnection() {

    public void onServiceConnected(ComponentName className, IBinder service) {
        if (DBG)
            Log.d(TAG, ""Proxy object connected"");
        mService = IBluetoothHeadset.Stub.asInterface(service);
        if (mServiceListener != null) {
            mServiceListener.onServiceConnected();
        }
    }

    public void onServiceDisconnected(ComponentName className) {
        if (DBG)
            Log.d(TAG, ""Proxy object disconnected"");
        mService = null;
        if (mServiceListener != null) {
            mServiceListener.onServiceDisconnected();
        }
    }
}","[]","Optional.empty","\android\bluetooth\BluetoothHeadset.java"
"RESULT_FAILURE","true","false","false","true","true","int","0","[]","Optional.empty","\android\bluetooth\BluetoothHeadset.java"
"RESULT_SUCCESS","true","false","false","true","true","int","1","[]","Optional.empty","\android\bluetooth\BluetoothHeadset.java"
"AUDIO_STATE_CONNECTED","true","false","false","true","true","int","1","[]","Optional[/**
 * A SCO audio channel is established
 */
]","\android\bluetooth\BluetoothHeadset.java"
"STATE_ERROR","true","false","false","true","true","int","-1","[]","Optional[/**
 * There was an error trying to obtain the state
 */
]","\android\bluetooth\BluetoothHeadset.java"
"STATE_DISCONNECTED","true","false","false","true","true","int","0","[]","Optional[/**
 * No headset currently connected
 */
]","\android\bluetooth\BluetoothHeadset.java"
"mServiceListener","false","false","true","false","true","ServiceListener","null","[]","Optional.empty","\android\bluetooth\BluetoothHeadset.java"
"AUDIO_STATE_DISCONNECTED","true","false","false","true","true","int","0","[]","Optional[/**
 * A SCO audio channel is not established
 */
]","\android\bluetooth\BluetoothHeadset.java"
"PRIORITY_OFF","true","false","false","true","true","int","0","[]","Optional[/**
 * Default priority for headsets that should not be auto-connected
 * and not allow incoming connections.
 */
]","\android\bluetooth\BluetoothHeadset.java"
"EXTRA_PREVIOUS_STATE","true","false","false","true","true","String","""android.bluetooth.headset.extra.PREVIOUS_STATE""","[]","Optional.empty","\android\bluetooth\BluetoothHeadset.java"
"EXTRA_DISCONNECT_INITIATOR","true","false","false","true","true","String","""android.bluetooth.headset.extra.DISCONNECT_INITIATOR""","[]","Optional[/**
 * Extra to be used with the Headset State change intent.
 * This will be used only when Headset state changes to
 * {@link #STATE_DISCONNECTED} from any previous state.
 * This extra field is optional and will be used when
 * we have deterministic information regarding whether
 * the disconnect was initiated by the remote device or
 * by the local adapter.
 */
]","\android\bluetooth\BluetoothHeadset.java"
"TAG","false","false","true","true","true","String","""BluetoothHeadset""","[]","Optional.empty","\android\bluetooth\BluetoothHeadset.java"
"DBG","false","false","true","true","true","boolean","false","[]","Optional.empty","\android\bluetooth\BluetoothHeadset.java"
"EXTRA_STATE","true","false","false","true","true","String","""android.bluetooth.headset.extra.STATE""","[]","Optional.empty","\android\bluetooth\BluetoothHeadset.java"
"PRIORITY_AUTO_CONNECT","true","false","false","true","true","int","1000","[]","Optional[/**
 * Default priority for headsets for which we will accept
 * incoming connections and auto-connect.
 */
]","\android\bluetooth\BluetoothHeadset.java"
"mService","false","false","true","false","false","IBluetoothHeadset","null","[]","Optional[/**
 * TODO(API release): Consider incorporating as new state in
 * HEADSET_STATE_CHANGED
 */
]","\android\bluetooth\BluetoothHeadset.java"
"ACTION_AUDIO_STATE_CHANGED","true","false","false","true","true","String","""android.bluetooth.headset.action.AUDIO_STATE_CHANGED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * TODO(API release): Consider incorporating as new state in
 * HEADSET_STATE_CHANGED
 */
]","\android\bluetooth\BluetoothHeadset.java"
"mDispatcherState","false","false","false","false","true","KeyEvent.DispatcherState","null","[]","Optional.empty","\android\inputmethodservice\SoftInputWindow.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\app\backup\BackupManager.java"
"sService","false","false","true","true","false","IBackupManager","null","[]","Optional.empty","\android\app\backup\BackupManager.java"
"TAG","false","false","true","true","true","String","""BackupManager""","[]","Optional.empty","\android\app\backup\BackupManager.java"
"descriptor","false","false","false","false","false","String","""android.app.IApplicationThread""","[]","Optional.empty","\android\app\IApplicationThread.java"
"SCHEDULE_PAUSE_ACTIVITY_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION","[]","Optional.empty","\android\app\IApplicationThread.java"
"DEBUG_ON","false","false","false","true","true","int","1","[]","Optional.empty","\android\app\IApplicationThread.java"
"EXTERNAL_STORAGE_UNAVAILABLE","false","false","false","true","true","int","1","[]","Optional.empty","\android\app\IApplicationThread.java"
"SCHEDULE_RELAUNCH_ACTIVITY_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 25","[]","Optional.empty","\android\app\IApplicationThread.java"
"BIND_APPLICATION_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 12","[]","Optional.empty","\android\app\IApplicationThread.java"
"SCHEDULE_WINDOW_VISIBILITY_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 3","[]","Optional.empty","\android\app\IApplicationThread.java"
"SCHEDULE_SERVICE_ARGS_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 16","[]","Optional.empty","\android\app\IApplicationThread.java"
"SCHEDULE_LAUNCH_ACTIVITY_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 6","[]","Optional.empty","\android\app\IApplicationThread.java"
"SCHEDULE_STOP_SERVICE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 11","[]","Optional.empty","\android\app\IApplicationThread.java"
"SCHEDULE_RECEIVER_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 9","[]","Optional.empty","\android\app\IApplicationThread.java"
"SCHEDULE_REGISTERED_RECEIVER_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 22","[]","Optional.empty","\android\app\IApplicationThread.java"
"DISPATCH_PACKAGE_BROADCAST_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 33","[]","Optional.empty","\android\app\IApplicationThread.java"
"BACKUP_MODE_FULL","false","false","false","true","true","int","1","[]","Optional.empty","\android\app\IApplicationThread.java"
"REQUEST_THUMBNAIL_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 14","[]","Optional.empty","\android\app\IApplicationThread.java"
"PROCESS_IN_BACKGROUND_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 18","[]","Optional.empty","\android\app\IApplicationThread.java"
"SCHEDULE_STOP_ACTIVITY_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 2","[]","Optional.empty","\android\app\IApplicationThread.java"
"SCHEDULE_CREATE_BACKUP_AGENT_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 29","[]","Optional.empty","\android\app\IApplicationThread.java"
"BACKUP_MODE_INCREMENTAL","false","false","false","true","true","int","0","[]","Optional.empty","\android\app\IApplicationThread.java"
"PROFILER_CONTROL_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 27","[]","Optional.empty","\android\app\IApplicationThread.java"
"DUMP_SERVICE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 21","[]","Optional.empty","\android\app\IApplicationThread.java"
"DEBUG_WAIT","false","false","false","true","true","int","2","[]","Optional.empty","\android\app\IApplicationThread.java"
"GET_MEMORY_INFO_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 31","[]","Optional.empty","\android\app\IApplicationThread.java"
"UPDATE_TIME_ZONE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 17","[]","Optional.empty","\android\app\IApplicationThread.java"
"SCHEDULE_CREATE_SERVICE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 10","[]","Optional.empty","\android\app\IApplicationThread.java"
"DEBUG_OFF","false","false","false","true","true","int","0","[]","Optional.empty","\android\app\IApplicationThread.java"
"SCHEDULE_ACTIVITY_CONFIGURATION_CHANGED_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 24","[]","Optional.empty","\android\app\IApplicationThread.java"
"SCHEDULE_CONFIGURATION_CHANGED_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 15","[]","Optional.empty","\android\app\IApplicationThread.java"
"SCHEDULE_BIND_SERVICE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 19","[]","Optional.empty","\android\app\IApplicationThread.java"
"SCHEDULE_NEW_INTENT_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 7","[]","Optional.empty","\android\app\IApplicationThread.java"
"SCHEDULE_LOW_MEMORY_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 23","[]","Optional.empty","\android\app\IApplicationThread.java"
"SCHEDULE_RESUME_ACTIVITY_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 4","[]","Optional.empty","\android\app\IApplicationThread.java"
"SCHEDULE_FINISH_ACTIVITY_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 8","[]","Optional.empty","\android\app\IApplicationThread.java"
"SCHEDULE_UNBIND_SERVICE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 20","[]","Optional.empty","\android\app\IApplicationThread.java"
"SET_SCHEDULING_GROUP_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 28","[]","Optional.empty","\android\app\IApplicationThread.java"
"BACKUP_MODE_RESTORE","false","false","false","true","true","int","2","[]","Optional.empty","\android\app\IApplicationThread.java"
"SCHEDULE_SEND_RESULT_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 5","[]","Optional.empty","\android\app\IApplicationThread.java"
"SCHEDULE_CRASH_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 34","[]","Optional.empty","\android\app\IApplicationThread.java"
"SCHEDULE_SUICIDE_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 32","[]","Optional.empty","\android\app\IApplicationThread.java"
"PACKAGE_REMOVED","false","false","false","true","true","int","0","[]","Optional.empty","\android\app\IApplicationThread.java"
"SCHEDULE_DESTROY_BACKUP_AGENT_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 30","[]","Optional.empty","\android\app\IApplicationThread.java"
"SCHEDULE_EXIT_TRANSACTION","false","false","false","false","false","int","IBinder.FIRST_CALL_TRANSACTION + 13","[]","Optional.empty","\android\app\IApplicationThread.java"
"mRemote","false","false","true","false","false","IBinder","null","[]","Optional.empty","\android\os\ServiceManagerNative.java"
"mContext","false","false","true","false","false","Context","null","[]","Optional.empty","\android\app\NotificationManager.java"
"sService","false","false","true","true","false","INotificationManager","null","[]","Optional.empty","\android\app\NotificationManager.java"
"TAG","false","false","true","true","false","String","""NotificationManager""","[]","Optional.empty","\android\app\NotificationManager.java"
"localLOGV","false","false","true","true","false","boolean","DEBUG || android.util.Config.LOGV","[]","Optional.empty","\android\app\NotificationManager.java"
"DEBUG","false","false","true","true","false","boolean","false","[]","Optional.empty","\android\app\NotificationManager.java"
"LOCK_PATTERN_FILE","false","false","true","true","true","String","""gesture.key""","[]","Optional.empty","\com\android\internal\widget\LockPatternUtils.java"
"PATTERN_EVER_CHOSEN_KEY","false","false","true","true","true","String","""lockscreen.patterneverchosen""","[]","Optional.empty","\com\android\internal\widget\LockPatternUtils.java"
"FAILED_ATTEMPT_COUNTDOWN_INTERVAL_MS","true","false","false","true","true","long","1000L","[]","Optional[/**
 * The interval of the countdown for showing progress of the lockout.
 */
]","\com\android\internal\widget\LockPatternUtils.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional.empty","\com\android\internal\widget\LockPatternUtils.java"
"sLockPasswordFilename","false","false","true","true","false","String","null","[]","Optional.empty","\com\android\internal\widget\LockPatternUtils.java"
"FAILED_ATTEMPTS_BEFORE_RESET","true","false","false","true","true","int","20","[]","Optional[/**
 * The number of incorrect attempts before which we fall back on an alternative
 * method of verifying the user, and resetting their lock pattern.
 */
]","\com\android\internal\widget\LockPatternUtils.java"
"sLockPatternFilename","false","false","true","true","false","String","null","[]","Optional.empty","\com\android\internal\widget\LockPatternUtils.java"
"mContentResolver","false","false","true","false","true","ContentResolver","null","[]","Optional.empty","\com\android\internal\widget\LockPatternUtils.java"
"MIN_PATTERN_REGISTER_FAIL","true","false","false","true","true","int","3","[]","Optional[/**
 * The minimum number of dots the user must include in a wrong pattern
 * attempt for it to be counted against the counts that affect
 * {@link #FAILED_ATTEMPTS_BEFORE_TIMEOUT} and {@link #FAILED_ATTEMPTS_BEFORE_RESET}
 */
]","\com\android\internal\widget\LockPatternUtils.java"
"LOCKOUT_PERMANENT_KEY","false","false","true","true","true","String","""lockscreen.lockedoutpermanently""","[]","Optional.empty","\com\android\internal\widget\LockPatternUtils.java"
"LOCK_PASSWORD_SALT_KEY","false","false","true","true","true","String","""lockscreen.password_salt""","[]","Optional.empty","\com\android\internal\widget\LockPatternUtils.java"
"mDevicePolicyManager","false","false","true","false","false","DevicePolicyManager","null","[]","Optional.empty","\com\android\internal\widget\LockPatternUtils.java"
"SYSTEM_DIRECTORY","false","false","true","true","true","String","""/system/""","[]","Optional.empty","\com\android\internal\widget\LockPatternUtils.java"
"sHaveNonZeroPasswordFile","false","false","true","true","true","AtomicBoolean","new AtomicBoolean(false)","[]","Optional.empty","\com\android\internal\widget\LockPatternUtils.java"
"LOCKOUT_ATTEMPT_DEADLINE","false","false","true","true","true","String","""lockscreen.lockoutattemptdeadline""","[]","Optional.empty","\com\android\internal\widget\LockPatternUtils.java"
"sPasswordObserver","false","false","true","true","false","FileObserver","null","[]","Optional.empty","\com\android\internal\widget\LockPatternUtils.java"
"TAG","false","false","true","true","true","String","""LockPatternUtils""","[]","Optional.empty","\com\android\internal\widget\LockPatternUtils.java"
"MIN_LOCK_PATTERN_SIZE","true","false","false","true","true","int","4","[]","Optional[/**
 * The minimum number of dots in a valid pattern.
 */
]","\com\android\internal\widget\LockPatternUtils.java"
"PASSWORD_TYPE_KEY","true","false","false","true","true","String","""lockscreen.password_type""","[]","Optional.empty","\com\android\internal\widget\LockPatternUtils.java"
"sHaveNonZeroPatternFile","false","false","true","true","true","AtomicBoolean","new AtomicBoolean(false)","[]","Optional.empty","\com\android\internal\widget\LockPatternUtils.java"
"LOCK_PASSWORD_FILE","false","false","true","true","true","String","""password.key""","[]","Optional.empty","\com\android\internal\widget\LockPatternUtils.java"
"FAILED_ATTEMPTS_BEFORE_TIMEOUT","true","false","false","true","true","int","5","[]","Optional[/**
 * The maximum number of incorrect attempts before the user is prevented
 * from trying again for {@link #FAILED_ATTEMPT_TIMEOUT_MS}.
 */
]","\com\android\internal\widget\LockPatternUtils.java"
"FAILED_ATTEMPT_TIMEOUT_MS","true","false","false","true","true","long","30000L","[]","Optional[/**
 * How long the user is prevented from trying again after entering the
 * wrong pattern too many times.
 */
]","\com\android\internal\widget\LockPatternUtils.java"
"mStyle","false","false","true","false","true","int","null","[]","Optional.empty","\android\text\style\StyleSpan.java"
"mIconId","false","false","true","false","true","int","null","[]","Optional.empty","\android\app\SearchableInfo.java"
"mSuggestPath","false","false","true","false","true","String","null","[]","Optional.empty","\android\app\SearchableInfo.java"
"mVoiceSearchMode","false","false","true","false","true","int","null","[]","Optional.empty","\android\app\SearchableInfo.java"
"mHintId","false","false","true","false","true","int","null","[]","Optional.empty","\android\app\SearchableInfo.java"
"mSettingsDescriptionId","false","false","true","false","true","int","null","[]","Optional.empty","\android\app\SearchableInfo.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<SearchableInfo>","new Parcelable.Creator<SearchableInfo>() {

    public SearchableInfo createFromParcel(Parcel in) {
        return new SearchableInfo(in);
    }

    public SearchableInfo[] newArray(int size) {
        return new SearchableInfo[size];
    }
}","[]","Optional[/**
 * Support for parcelable and aidl operations.
 */
]","\android\app\SearchableInfo.java"
"mSearchActivity","false","false","true","false","true","ComponentName","null","[]","Optional.empty","\android\app\SearchableInfo.java"
"MD_XML_ELEMENT_SEARCHABLE","false","false","true","true","true","String","""searchable""","[]","Optional.empty","\android\app\SearchableInfo.java"
"mSuggestActionMsgColumn","false","false","true","false","true","String","null","[]","Optional.empty","\android\app\SearchableInfo.java"
"mVoicePromptTextId","false","false","true","false","true","int","null","[]","Optional[// voicePromptText
]","\android\app\SearchableInfo.java"
"MD_LABEL_SEARCHABLE","false","false","true","true","true","String","""android.app.searchable""","[]","Optional[// the current long wordy javadoc in SearchManager.java ?
]","\android\app\SearchableInfo.java"
"mLabelId","false","false","true","false","true","int","null","[]","Optional[// true member variables - what we know about the searchability
]","\android\app\SearchableInfo.java"
"mSearchMode","false","false","true","false","true","int","null","[]","Optional.empty","\android\app\SearchableInfo.java"
"VOICE_SEARCH_LAUNCH_WEB_SEARCH","false","false","true","true","true","int","2","[]","Optional.empty","\android\app\SearchableInfo.java"
"mQueryAfterZeroResults","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\app\SearchableInfo.java"
"mSuggestThreshold","false","false","true","false","true","int","null","[]","Optional.empty","\android\app\SearchableInfo.java"
"mKeyCode","false","false","true","false","true","int","null","[]","Optional.empty","\android\app\SearchableInfo.java"
"mVoiceLanguageId","false","false","true","false","true","int","null","[]","Optional[// voiceLanguage
]","\android\app\SearchableInfo.java"
"SEARCH_MODE_BADGE_LABEL","false","false","true","true","true","int","0x04","[]","Optional[// flags in the searchMode attribute
]","\android\app\SearchableInfo.java"
"mSearchInputType","false","false","true","false","true","int","null","[]","Optional.empty","\android\app\SearchableInfo.java"
"mAutoUrlDetect","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\app\SearchableInfo.java"
"LOG_TAG","false","false","true","true","true","String","""SearchableInfo""","[]","Optional.empty","\android\app\SearchableInfo.java"
"MD_XML_ELEMENT_SEARCHABLE_ACTION_KEY","false","false","true","true","true","String","""actionkey""","[]","Optional.empty","\android\app\SearchableInfo.java"
"mActionKeys","false","false","true","false","false","HashMap<Integer,ActionKeyInfo>","null","[]","Optional[// This is not final, to allow lazy initialization.
]","\android\app\SearchableInfo.java"
"mSearchImeOptions","false","false","true","false","true","int","null","[]","Optional.empty","\android\app\SearchableInfo.java"
"SEARCH_MODE_QUERY_REWRITE_FROM_TEXT","false","false","true","true","true","int","0x20","[]","Optional.empty","\android\app\SearchableInfo.java"
"mQueryActionMsg","false","false","true","false","true","String","null","[]","Optional.empty","\android\app\SearchableInfo.java"
"mVoiceMaxResults","false","false","true","false","true","int","null","[]","Optional[// voiceMaxResults
]","\android\app\SearchableInfo.java"
"SEARCH_MODE_BADGE_ICON","false","false","true","true","true","int","0x08","[]","Optional.empty","\android\app\SearchableInfo.java"
"mSuggestProviderPackage","false","false","true","false","true","String","null","[]","Optional.empty","\android\app\SearchableInfo.java"
"DBG","false","false","true","true","true","boolean","false","[]","Optional[// general debugging support
]","\android\app\SearchableInfo.java"
"mSearchButtonText","false","false","true","false","true","int","null","[]","Optional.empty","\android\app\SearchableInfo.java"
"VOICE_SEARCH_SHOW_BUTTON","false","false","true","true","true","int","1","[]","Optional[// Flag values for Searchable_voiceSearchMode
]","\android\app\SearchableInfo.java"
"mIncludeInGlobalSearch","false","false","true","false","true","boolean","null","[]","Optional.empty","\android\app\SearchableInfo.java"
"mSuggestIntentAction","false","false","true","false","true","String","null","[]","Optional.empty","\android\app\SearchableInfo.java"
"VOICE_SEARCH_LAUNCH_RECOGNIZER","false","false","true","true","true","int","4","[]","Optional.empty","\android\app\SearchableInfo.java"
"SEARCH_MODE_QUERY_REWRITE_FROM_DATA","false","false","true","true","true","int","0x10","[]","Optional.empty","\android\app\SearchableInfo.java"
"mVoiceLanguageModeId","false","false","true","false","true","int","null","[]","Optional[// voiceLanguageModel
]","\android\app\SearchableInfo.java"
"mSuggestActionMsg","false","false","true","false","true","String","null","[]","Optional.empty","\android\app\SearchableInfo.java"
"mSuggestSelection","false","false","true","false","true","String","null","[]","Optional.empty","\android\app\SearchableInfo.java"
"mSuggestIntentData","false","false","true","false","true","String","null","[]","Optional.empty","\android\app\SearchableInfo.java"
"mSuggestAuthority","false","false","true","false","true","String","null","[]","Optional.empty","\android\app\SearchableInfo.java"
"mContext","false","false","false","false","false","Context","null","[]","Optional.empty","\android\app\backup\FileBackupHelperBase.java"
"mExceptionLogged","false","false","false","false","false","boolean","null","[]","Optional.empty","\android\app\backup\FileBackupHelperBase.java"
"mPtr","false","false","false","false","false","int","null","[]","Optional.empty","\android\app\backup\FileBackupHelperBase.java"
"TAG","false","false","true","true","true","String","""FileBackupHelperBase""","[]","Optional.empty","\android\app\backup\FileBackupHelperBase.java"
"mHiLayerResponse","false","false","true","false","false","byte","null","[]","Optional.empty","\android\nfc\tech\IsoDep.java"
"EXTRA_HI_LAYER_RESP","true","false","false","true","true","String","""hiresp""","[]","Optional[/**
 * @hide
 */
]","\android\nfc\tech\IsoDep.java"
"mHistBytes","false","false","true","false","false","byte","null","[]","Optional.empty","\android\nfc\tech\IsoDep.java"
"TAG","false","false","true","true","true","String","""NFC""","[]","Optional.empty","\android\nfc\tech\IsoDep.java"
"EXTRA_HIST_BYTES","true","false","false","true","true","String","""histbytes""","[]","Optional[/**
 * @hide
 */
]","\android\nfc\tech\IsoDep.java"
"mCurrentPreferenceOrder","false","false","true","false","false","int","0","[]","Optional.empty","\android\preference\PreferenceGroup.java"
"mPreferenceList","false","false","true","false","false","List<Preference>","null","[]","Optional[/**
 * The container for child {@link Preference}s. This is sorted based on the
 * ordering, please use {@link #addPreference(Preference)} instead of adding
 * to this directly.
 */
]","\android\preference\PreferenceGroup.java"
"mOrderingAsAdded","false","false","true","false","false","boolean","true","[]","Optional.empty","\android\preference\PreferenceGroup.java"
"mAttachedToActivity","false","false","true","false","false","boolean","false","[]","Optional.empty","\android\preference\PreferenceGroup.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<ColorStateList>","new Parcelable.Creator<ColorStateList>() {

    public ColorStateList[] newArray(int size) {
        return new ColorStateList[size];
    }

    public ColorStateList createFromParcel(Parcel source) {
        final int N = source.readInt();
        int[][] stateSpecs = new int[N][];
        for (int i = 0; i < N; i++) {
            stateSpecs[i] = source.createIntArray();
        }
        int[] colors = source.createIntArray();
        return new ColorStateList(stateSpecs, colors);
    }
}","[]","Optional.empty","\android\content\res\ColorStateList.java"
"mColors","false","false","true","false","false","int","null","[]","Optional[// must be parallel to mStateSpecs
]","\android\content\res\ColorStateList.java"
"sCache","false","false","true","true","true","SparseArray<WeakReference<ColorStateList>>","new SparseArray<WeakReference<ColorStateList>>()","[]","Optional.empty","\android\content\res\ColorStateList.java"
"EMPTY","false","false","true","true","true","int","new int[][] { new int[0] }","[]","Optional.empty","\android\content\res\ColorStateList.java"
"mStateSpecs","false","false","true","false","false","int","null","[]","Optional[// must be parallel to mColors
]","\android\content\res\ColorStateList.java"
"mDefaultColor","false","false","true","false","false","int","0xffff0000","[]","Optional.empty","\android\content\res\ColorStateList.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<BluetoothDevice>","new Parcelable.Creator<BluetoothDevice>() {

    public BluetoothDevice createFromParcel(Parcel in) {
        return new BluetoothDevice(in.readString());
    }

    public BluetoothDevice[] newArray(int size) {
        return new BluetoothDevice[size];
    }
}","[]","Optional.empty","\android\bluetooth\BluetoothDevice.java"
"ERROR","true","false","false","true","true","int","Integer.MIN_VALUE","[]","Optional[/**
 * Sentinel error value for this class. Guaranteed to not equal any other
 * integer constant in this class. Provided as a convenience for functions
 * that require a sentinel error value, for example:
 * <p><code>Intent.getIntExtra(BluetoothDevice.EXTRA_BOND_STATE,
 * BluetoothDevice.ERROR)</code>
 */
]","\android\bluetooth\BluetoothDevice.java"
"ACTION_PAIRING_CANCEL","true","false","false","true","true","String","""android.bluetooth.device.action.PAIRING_CANCEL""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * @hide
 */
]","\android\bluetooth\BluetoothDevice.java"
"ACTION_PAIRING_REQUEST","true","false","false","true","true","String","""android.bluetooth.device.action.PAIRING_REQUEST""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * @hide
 */
]","\android\bluetooth\BluetoothDevice.java"
"PAIRING_VARIANT_CONSENT","true","false","false","true","true","int","3","[]","Optional[/**
 * The user will be prompted to accept or deny the incoming pairing request
 * @hide
 */
]","\android\bluetooth\BluetoothDevice.java"
"EXTRA_NAME","true","false","false","true","true","String","""android.bluetooth.device.extra.NAME""","[]","Optional[/**
 * Used as a String extra field in {@link #ACTION_NAME_CHANGED} and {@link
 * #ACTION_FOUND} intents. It contains the friendly Bluetooth name.
 */
]","\android\bluetooth\BluetoothDevice.java"
"ACTION_FOUND","true","false","false","true","true","String","""android.bluetooth.device.action.FOUND""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[// TODO: Change API to not broadcast RSSI if not available (incoming connection)
]","\android\bluetooth\BluetoothDevice.java"
"ACTION_UUID","true","false","false","true","true","String","""android.bleutooth.device.action.UUID""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: This intent is used to broadcast the {@link UUID}
 * wrapped as a {@link android.os.ParcelUuid} of the remote device after it
 * has been fetched. This intent is sent only when the UUIDs of the remote
 * device are requested to be fetched using Service Discovery Protocol
 * <p> Always contains the extra field {@link #EXTRA_DEVICE}
 * <p> Always contains the extra filed {@link #EXTRA_UUID}
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH} to receive.
 * @hide
 */
]","\android\bluetooth\BluetoothDevice.java"
"ACTION_BOND_STATE_CHANGED","true","false","false","true","true","String","""android.bluetooth.device.action.BOND_STATE_CHANGED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[// contain a hidden extra field EXTRA_REASON with the result code.
]","\android\bluetooth\BluetoothDevice.java"
"ACTION_ACL_DISCONNECTED","true","false","false","true","true","String","""android.bluetooth.device.action.ACL_DISCONNECTED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: Indicates a low level (ACL) disconnection from a
 * remote device.
 * <p>Always contains the extra field {@link #EXTRA_DEVICE}.
 * <p>ACL connections are managed automatically by the Android Bluetooth
 * stack.
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH} to receive.
 */
]","\android\bluetooth\BluetoothDevice.java"
"EXTRA_RSSI","true","false","false","true","true","String","""android.bluetooth.device.extra.RSSI""","[]","Optional[/**
 * Used as an optional short extra field in {@link #ACTION_FOUND} intents.
 * Contains the RSSI value of the remote device as reported by the
 * Bluetooth hardware.
 */
]","\android\bluetooth\BluetoothDevice.java"
"BOND_NONE","true","false","false","true","true","int","10","[]","Optional[/**
 * Indicates the remote device is not bonded (paired).
 * <p>There is no shared link key with the remote device, so communication
 * (if it is allowed at all) will be unauthenticated and unencrypted.
 */
]","\android\bluetooth\BluetoothDevice.java"
"EXTRA_PAIRING_VARIANT","true","false","false","true","true","String","""android.bluetooth.device.extra.PAIRING_VARIANT""","[]","Optional[/**
 * @hide
 */
]","\android\bluetooth\BluetoothDevice.java"
"BOND_SUCCESS","true","false","false","true","true","int","0","[]","Optional[/**
 * A bond attempt succeeded
 * @hide
 */
]","\android\bluetooth\BluetoothDevice.java"
"EXTRA_DEVICE","true","false","false","true","true","String","""android.bluetooth.device.extra.DEVICE""","[]","Optional[/**
 * Used as a Parcelable {@link BluetoothDevice} extra field in every intent
 * broadcast by this class. It contains the {@link BluetoothDevice} that
 * the intent applies to.
 */
]","\android\bluetooth\BluetoothDevice.java"
"EXTRA_PREVIOUS_BOND_STATE","true","false","false","true","true","String","""android.bluetooth.device.extra.PREVIOUS_BOND_STATE""","[]","Optional[/**
 * Used as an int extra field in {@link #ACTION_BOND_STATE_CHANGED} intents.
 * Contains the previous bond state of the remote device.
 * <p>Possible values are:
 * {@link #BOND_NONE},
 * {@link #BOND_BONDING},
 * {@link #BOND_BONDED}.
 */
]","\android\bluetooth\BluetoothDevice.java"
"ACTION_ACL_CONNECTED","true","false","false","true","true","String","""android.bluetooth.device.action.ACL_CONNECTED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: Indicates a low level (ACL) connection has been
 * established with a remote device.
 * <p>Always contains the extra field {@link #EXTRA_DEVICE}.
 * <p>ACL connections are managed automatically by the Android Bluetooth
 * stack.
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH} to receive.
 */
]","\android\bluetooth\BluetoothDevice.java"
"BOND_BONDING","true","false","false","true","true","int","11","[]","Optional[/**
 * Indicates bonding (pairing) is in progress with the remote device.
 */
]","\android\bluetooth\BluetoothDevice.java"
"PAIRING_VARIANT_OOB_CONSENT","true","false","false","true","true","int","5","[]","Optional[/**
 * The user will be prompted to accept or deny the OOB pairing request
 * @hide
 */
]","\android\bluetooth\BluetoothDevice.java"
"ACTION_CLASS_CHANGED","true","false","false","true","true","String","""android.bluetooth.device.action.CLASS_CHANGED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: Bluetooth class of a remote device has changed.
 * <p>Always contains the extra fields {@link #EXTRA_DEVICE} and {@link
 * #EXTRA_CLASS}.
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH} to receive.
 * @see {@link BluetoothClass}
 */
]","\android\bluetooth\BluetoothDevice.java"
"UNBOND_REASON_DISCOVERY_IN_PROGRESS","true","false","false","true","true","int","5","[]","Optional[/**
 * A bond attempt failed because a discovery is in progress
 * @hide
 */
]","\android\bluetooth\BluetoothDevice.java"
"UNBOND_REASON_AUTH_CANCELED","true","false","false","true","true","int","3","[]","Optional[/**
 * A bond attempt failed because we canceled the bonding process
 * @hide
 */
]","\android\bluetooth\BluetoothDevice.java"
"EXTRA_PASSKEY","true","false","false","true","true","String","""android.bluetooth.device.extra.PASSKEY""","[]","Optional[/**
 * @hide
 */
]","\android\bluetooth\BluetoothDevice.java"
"BOND_BONDED","true","false","false","true","true","int","12","[]","Optional[/**
 * Indicates the remote device is bonded (paired).
 * <p>A shared link keys exists locally for the remote device, so
 * communication can be authenticated and encrypted.
 * <p><i>Being bonded (paired) with a remote device does not necessarily
 * mean the device is currently connected. It just means that the pending
 * procedure was completed at some earlier time, and the link key is still
 * stored locally, ready to use on the next connection.
 * </i>
 */
]","\android\bluetooth\BluetoothDevice.java"
"UNBOND_REASON_AUTH_TIMEOUT","true","false","false","true","true","int","6","[]","Optional[/**
 * A bond attempt failed because of authentication timeout
 * @hide
 */
]","\android\bluetooth\BluetoothDevice.java"
"UNBOND_REASON_AUTH_FAILED","true","false","false","true","true","int","1","[]","Optional[/**
 * A bond attempt failed because pins did not match, or remote device did
 * not respond to pin request in time
 * @hide
 */
]","\android\bluetooth\BluetoothDevice.java"
"PAIRING_VARIANT_PIN","true","false","false","true","true","int","0","[]","Optional[/**
 * The user will be prompted to enter a pin
 * @hide
 */
]","\android\bluetooth\BluetoothDevice.java"
"UNBOND_REASON_REMOTE_AUTH_CANCELED","true","false","false","true","true","int","8","[]","Optional[/**
 * A bond attempt failed because we received an Authentication Cancel
 * by remote end
 * @hide
 */
]","\android\bluetooth\BluetoothDevice.java"
"sService","false","false","true","true","false","IBluetooth","null","[]","Optional[/**
 * Lazy initialization. Guaranteed final after first object constructed, or
 * getService() called.
 * TODO: Unify implementation of sService amongst BluetoothFoo API's
 */
]","\android\bluetooth\BluetoothDevice.java"
"UNBOND_REASON_REMOTE_DEVICE_DOWN","true","false","false","true","true","int","4","[]","Optional[/**
 * A bond attempt failed because we could not contact the remote device
 * @hide
 */
]","\android\bluetooth\BluetoothDevice.java"
"mAddress","false","false","true","false","true","String","null","[]","Optional.empty","\android\bluetooth\BluetoothDevice.java"
"ACTION_ACL_DISCONNECT_REQUESTED","true","false","false","true","true","String","""android.bluetooth.device.action.ACL_DISCONNECT_REQUESTED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: Indicates that a low level (ACL) disconnection has
 * been requested for a remote device, and it will soon be disconnected.
 * <p>This is useful for graceful disconnection. Applications should use
 * this intent as a hint to immediately terminate higher level connections
 * (RFCOMM, L2CAP, or profile connections) to the remote device.
 * <p>Always contains the extra field {@link #EXTRA_DEVICE}.
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH} to receive.
 */
]","\android\bluetooth\BluetoothDevice.java"
"PAIRING_VARIANT_DISPLAY_PASSKEY","true","false","false","true","true","int","4","[]","Optional[/**
 * The user will be prompted to enter the passkey displayed on remote device
 * @hide
 */
]","\android\bluetooth\BluetoothDevice.java"
"TAG","false","false","true","true","true","String","""BluetoothDevice""","[]","Optional.empty","\android\bluetooth\BluetoothDevice.java"
"ACTION_DISAPPEARED","true","false","false","true","true","String","""android.bluetooth.device.action.DISAPPEARED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: Remote device disappeared.
 * <p>Sent when a remote device that was found in the last discovery is not
 * found in the current discovery.
 * <p>Always contains the extra field {@link #EXTRA_DEVICE}.
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH} to receive.
 * @hide
 */
]","\android\bluetooth\BluetoothDevice.java"
"ACTION_NAME_FAILED","true","false","false","true","true","String","""android.bluetooth.device.action.NAME_FAILED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[// TODO: is this actually useful?
]","\android\bluetooth\BluetoothDevice.java"
"EXTRA_REASON","true","false","false","true","true","String","""android.bluetooth.device.extra.REASON""","[]","Optional[/**
 * @hide
 */
]","\android\bluetooth\BluetoothDevice.java"
"UNBOND_REASON_REMOVED","true","false","false","true","true","int","9","[]","Optional[/**
 * An existing bond was explicitly revoked
 * @hide
 */
]","\android\bluetooth\BluetoothDevice.java"
"EXTRA_CLASS","true","false","false","true","true","String","""android.bluetooth.device.extra.CLASS""","[]","Optional[/**
 * Used as an Parcelable {@link BluetoothClass} extra field in {@link
 * #ACTION_FOUND} and {@link #ACTION_CLASS_CHANGED} intents.
 */
]","\android\bluetooth\BluetoothDevice.java"
"PAIRING_VARIANT_PASSKEY_CONFIRMATION","true","false","false","true","true","int","2","[]","Optional[/**
 * The user will be prompted to confirm the passkey displayed on the screen
 * @hide
 */
]","\android\bluetooth\BluetoothDevice.java"
"ACTION_NAME_CHANGED","true","false","false","true","true","String","""android.bluetooth.device.action.NAME_CHANGED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: Indicates the friendly name of a remote device has
 * been retrieved for the first time, or changed since the last retrieval.
 * <p>Always contains the extra fields {@link #EXTRA_DEVICE} and {@link
 * #EXTRA_NAME}.
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH} to receive.
 */
]","\android\bluetooth\BluetoothDevice.java"
"EXTRA_BOND_STATE","true","false","false","true","true","String","""android.bluetooth.device.extra.BOND_STATE""","[]","Optional[/**
 * Used as an int extra field in {@link #ACTION_BOND_STATE_CHANGED} intents.
 * Contains the bond state of the remote device.
 * <p>Possible values are:
 * {@link #BOND_NONE},
 * {@link #BOND_BONDING},
 * {@link #BOND_BONDED}.
 */
]","\android\bluetooth\BluetoothDevice.java"
"UNBOND_REASON_AUTH_REJECTED","true","false","false","true","true","int","2","[]","Optional[/**
 * A bond attempt failed because the other side explicitly rejected
 * bonding
 * @hide
 */
]","\android\bluetooth\BluetoothDevice.java"
"UNBOND_REASON_REPEATED_ATTEMPTS","true","false","false","true","true","int","7","[]","Optional[/**
 * A bond attempt failed because of repeated attempts
 * @hide
 */
]","\android\bluetooth\BluetoothDevice.java"
"EXTRA_UUID","true","false","false","true","true","String","""android.bluetooth.device.extra.UUID""","[]","Optional[/**
 * Used as an extra field in {@link #ACTION_UUID} intents,
 * Contains the {@link android.os.ParcelUuid}s of the remote device which
 * is a parcelable version of {@link UUID}.
 * @hide
 */
]","\android\bluetooth\BluetoothDevice.java"
"PAIRING_VARIANT_PASSKEY","true","false","false","true","true","int","1","[]","Optional[/**
 * The user will be prompted to enter a passkey
 * @hide
 */
]","\android\bluetooth\BluetoothDevice.java"
"tlFocusFinder","false","false","true","true","false","ThreadLocal<FocusFinder>","new ThreadLocal<FocusFinder>() {

    protected FocusFinder initialValue() {
        return new FocusFinder();
    }
}","[]","Optional.empty","\android\view\FocusFinder.java"
"mBestCandidateRect","false","false","false","false","false","Rect","new Rect()","[]","Optional.empty","\android\view\FocusFinder.java"
"mFocusedRect","false","false","false","false","false","Rect","new Rect()","[]","Optional.empty","\android\view\FocusFinder.java"
"mOtherRect","false","false","false","false","false","Rect","new Rect()","[]","Optional.empty","\android\view\FocusFinder.java"
"FORMAT_ALAW","true","false","false","true","true","short","6","[]","Optional[/**
 * Indicates ALAW format.
 */
]","\android\speech\srec\WaveHeader.java"
"HEADER_LENGTH","false","false","true","true","true","int","44","[]","Optional.empty","\android\speech\srec\WaveHeader.java"
"FORMAT_PCM","true","false","false","true","true","short","1","[]","Optional[/**
 * Indicates PCM format.
 */
]","\android\speech\srec\WaveHeader.java"
"mNumChannels","false","false","true","false","false","short","null","[]","Optional.empty","\android\speech\srec\WaveHeader.java"
"mNumBytes","false","false","true","false","false","int","null","[]","Optional.empty","\android\speech\srec\WaveHeader.java"
"mFormat","false","false","true","false","false","short","null","[]","Optional.empty","\android\speech\srec\WaveHeader.java"
"mSampleRate","false","false","true","false","false","int","null","[]","Optional.empty","\android\speech\srec\WaveHeader.java"
"FORMAT_ULAW","true","false","false","true","true","short","7","[]","Optional[/**
 * Indicates ULAW format.
 */
]","\android\speech\srec\WaveHeader.java"
"TAG","false","false","true","true","true","String","""WaveHeader""","[]","Optional.empty","\android\speech\srec\WaveHeader.java"
"mBitsPerSample","false","false","true","false","false","short","null","[]","Optional.empty","\android\speech\srec\WaveHeader.java"
"IGNORE_ITEM_VIEW_TYPE","false","false","false","true","true","int","AdapterView.ITEM_VIEW_TYPE_IGNORE","[]","Optional[/**
 * An item view type that causes the {@link AdapterView} to ignore the item
 * view. For example, this can be used if the client does not want a
 * particular view to be given for conversion in
 * {@link #getView(int, View, ViewGroup)}.
 *
 * @see #getItemViewType(int)
 * @see #getViewTypeCount()
 */
]","\android\widget\Adapter.java"
"NO_SELECTION","false","false","false","true","true","int","Integer.MIN_VALUE","[]","Optional.empty","\android\widget\Adapter.java"
"mTension","false","false","true","false","true","float","null","[]","Optional.empty","\android\view\animation\AnticipateOvershootInterpolator.java"
"mToYDelta","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\animation\TranslateAnimation.java"
"mFromXDelta","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\animation\TranslateAnimation.java"
"mToXValue","false","false","true","false","false","float","0.0f","[]","Optional.empty","\android\view\animation\TranslateAnimation.java"
"mToXType","false","false","true","false","false","int","ABSOLUTE","[]","Optional.empty","\android\view\animation\TranslateAnimation.java"
"mFromYValue","false","false","true","false","false","float","0.0f","[]","Optional.empty","\android\view\animation\TranslateAnimation.java"
"mToYType","false","false","true","false","false","int","ABSOLUTE","[]","Optional.empty","\android\view\animation\TranslateAnimation.java"
"mToXDelta","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\animation\TranslateAnimation.java"
"mFromYType","false","false","true","false","false","int","ABSOLUTE","[]","Optional.empty","\android\view\animation\TranslateAnimation.java"
"mFromYDelta","false","false","true","false","false","float","null","[]","Optional.empty","\android\view\animation\TranslateAnimation.java"
"mFromXType","false","false","true","false","false","int","ABSOLUTE","[]","Optional.empty","\android\view\animation\TranslateAnimation.java"
"mToYValue","false","false","true","false","false","float","0.0f","[]","Optional.empty","\android\view\animation\TranslateAnimation.java"
"mFromXValue","false","false","true","false","false","float","0.0f","[]","Optional.empty","\android\view\animation\TranslateAnimation.java"
"LOCAL_LOGV","false","false","true","true","true","boolean","DEBUG ? Config.LOGD : Config.LOGV","[]","Optional.empty","\com\google\android\mms\util\AbstractCache.java"
"MAX_CACHED_ITEMS","false","false","true","true","true","int","500","[]","Optional.empty","\com\google\android\mms\util\AbstractCache.java"
"mCacheMap","false","false","true","false","true","HashMap<K,CacheEntry<V>>","null","[]","Optional.empty","\com\google\android\mms\util\AbstractCache.java"
"TAG","false","false","true","true","true","String","""AbstractCache""","[]","Optional.empty","\com\google\android\mms\util\AbstractCache.java"
"hit","false","false","false","false","false","int","null","[]","Optional.empty","\com\google\android\mms\util\AbstractCache.java"
"value","false","false","false","false","false","V","null","[]","Optional.empty","\com\google\android\mms\util\AbstractCache.java"
"DEBUG","false","false","true","true","true","boolean","false","[]","Optional.empty","\com\google\android\mms\util\AbstractCache.java"
"alphabet","false","false","true","false","true","byte","null","[]","Optional.empty","\android\util\Base64.java"
"DECODE","false","false","true","true","true","int","{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -2, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }","[]","Optional[/**
 * Lookup table for turning bytes into their position in the
 * Base64 alphabet.
 */
]","\android\util\Base64.java"
"state","false","false","true","false","false","int","null","[]","Optional[// state number (0 to 6)
]","\android\util\Base64.java"
"CRLF","true","false","false","true","true","int","4","[]","Optional[/**
 * Encoder flag bit to indicate lines should be terminated with a
 * CRLF pair instead of just an LF.  Has no effect if {@code
 * NO_WRAP} is specified as well.
 */
]","\android\util\Base64.java"
"ENCODE","false","false","true","true","true","byte","{ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/' }","[]","Optional[/**
 * Lookup table for turning Base64 alphabet positions (6 bits)
 * into output bytes.
 */
]","\android\util\Base64.java"
"NO_CLOSE","true","false","false","true","true","int","16","[]","Optional[/**
 * Flag to pass to {@link Base64OutputStream} to indicate that it
 * should not close the output stream it is wrapping when it
 * itself is closed.
 */
]","\android\util\Base64.java"
"NO_WRAP","true","false","false","true","true","int","2","[]","Optional[/**
 * Encoder flag bit to omit all line terminators (i.e., the output
 * will be on one long line).
 */
]","\android\util\Base64.java"
"tail","false","false","true","false","true","byte","null","[]","Optional.empty","\android\util\Base64.java"
"tailLen","false","false","false","false","false","int","null","[]","Optional[/* package */
]","\android\util\Base64.java"
"do_padding","true","false","false","false","true","boolean","null","[]","Optional.empty","\android\util\Base64.java"
"ENCODE_WEBSAFE","false","false","true","true","true","byte","{ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_' }","[]","Optional[/**
 * Lookup table for turning Base64 alphabet positions (6 bits)
 * into output bytes.
 */
]","\android\util\Base64.java"
"count","false","false","true","false","false","int","null","[]","Optional.empty","\android\util\Base64.java"
"LINE_GROUPS","true","false","false","true","true","int","19","[]","Optional[/**
 * Emit a new line every this many output tuples.  Corresponds to
 * a 76-character line length (the maximum allowable according to
 * <a href=""http://www.ietf.org/rfc/rfc2045.txt"">RFC 2045</a>).
 */
]","\android\util\Base64.java"
"URL_SAFE","true","false","false","true","true","int","8","[]","Optional[/**
 * Encoder/decoder flag bit to indicate using the ""URL and
 * filename safe"" variant of Base64 (see RFC 3548 section 4) where
 * {@code -} and {@code _} are used in place of {@code +} and
 * {@code /}.
 */
]","\android\util\Base64.java"
"DEFAULT","true","false","false","true","true","int","0","[]","Optional[/**
 * Default values for encoder/decoder flags.
 */
]","\android\util\Base64.java"
"output","true","false","false","false","false","byte","null","[]","Optional.empty","\android\util\Base64.java"
"do_newline","true","false","false","false","true","boolean","null","[]","Optional.empty","\android\util\Base64.java"
"do_cr","true","false","false","false","true","boolean","null","[]","Optional.empty","\android\util\Base64.java"
"SKIP","false","false","true","true","true","int","-1","[]","Optional[/**
 * Non-data values in the DECODE arrays.
 */
]","\android\util\Base64.java"
"NO_PADDING","true","false","false","true","true","int","1","[]","Optional[/**
 * Encoder flag bit to omit the padding '=' characters at the end
 * of the output (if any).
 */
]","\android\util\Base64.java"
"value","false","false","true","false","false","int","null","[]","Optional.empty","\android\util\Base64.java"
"op","true","false","false","false","false","int","null","[]","Optional.empty","\android\util\Base64.java"
"DECODE_WEBSAFE","false","false","true","true","true","int","{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -2, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }","[]","Optional[/**
 * Decode lookup table for the ""web safe"" variant (RFC 3548
 * sec. 4) where - and _ replace + and /.
 */
]","\android\util\Base64.java"
"EQUALS","false","false","true","true","true","int","-2","[]","Optional.empty","\android\util\Base64.java"
"mFamily","false","false","true","false","true","String","null","[]","Optional.empty","\android\text\style\TypefaceSpan.java"
"mVCardParserImpl","false","false","true","false","true","VCardParserImpl_V30","null","[]","Optional.empty","\android\pim\vcard\VCardParser_V40.java"
"sAcceptableEncoding","false","false","false","true","true","Set<String>","Collections.unmodifiableSet(new HashSet<String>(Arrays.asList(VCardConstants.PARAM_ENCODING_8BIT, VCardConstants.PARAM_ENCODING_B)))","[]","Optional[/* package */
]","\android\pim\vcard\VCardParser_V40.java"
"sKnownPropertyNameSet","false","false","false","true","true","Set<String>","Collections.unmodifiableSet(new HashSet<String>(Arrays.asList(""BEGIN"", ""END"", ""SOURCE"", ""NAME"", ""KIND"", ""XML"", ""FN"", ""N"", ""NICKNAME"", ""PHOTO"", ""BDAY"", ""DDAY"", ""BIRTH"", ""DEATH"", ""ANNIVERSARY"", ""SEX"", ""ADR"", ""LABEL"", ""TEL"", ""EMAIL"", ""IMPP"", ""LANG"", ""TZ"", ""GEO"", ""TITLE"", ""ROLE"", ""LOGO"", ""ORG"", ""MEMBER"", ""RELATED"", ""CATEGORIES"", ""NOTE"", ""PRODID"", ""REV"", ""SOUND"", ""UID"", ""CLIENTPIDMAP"", ""URL"", ""VERSION"", ""CLASS"", ""KEY"", ""FBURL"", ""CALENDRURI"", ""CALURI"")))","[]","Optional[/* package */
]","\android\pim\vcard\VCardParser_V40.java"
"mIsBeingDragged","false","false","true","false","false","boolean","false","[]","Optional[/**
 * True if the user is currently dragging this ScrollView around. This is
 * not the same as 'is being flinged', which can be checked by
 * mScroller.isFinished() (flinging begins when the user lifts his finger).
 */
]","\android\widget\ScrollView.java"
"mScrollViewMovedFocus","false","false","true","false","false","boolean","null","[]","Optional[/**
 * Flag to indicate that we are moving focus ourselves. This is so the
 * code that watches for focus changes initiated outside this ScrollView
 * knows that it does not have to do anything.
 */
]","\android\widget\ScrollView.java"
"mVelocityTracker","false","false","true","false","false","VelocityTracker","null","[]","Optional[/**
 * Determines speed during touch scrolling
 */
]","\android\widget\ScrollView.java"
"mSmoothScrollingEnabled","false","false","true","false","false","boolean","true","[]","Optional[/**
 * Whether arrow scrolling is animated.
 */
]","\android\widget\ScrollView.java"
"INVALID_POINTER","false","false","true","true","true","int","-1","[]","Optional[/**
 * Sentinel value for no current active pointer.
 * Used by {@link #mActivePointerId}.
 */
]","\android\widget\ScrollView.java"
"mOverscrollDistance","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ScrollView.java"
"mChildToScrollTo","false","false","true","false","false","View","null","[]","Optional[/**
 * The child to give focus to in the event that a child has requested focus while the
 * layout is dirty. This prevents the scroll from being wrong if the child has not been
 * laid out before requesting focus.
 */
]","\android\widget\ScrollView.java"
"mIsLayoutDirty","false","false","true","false","false","boolean","true","[]","Optional[/**
 * True when the layout has changed but the traversal has not come through yet.
 * Ideally the view hierarchy would keep track of this for us.
 */
]","\android\widget\ScrollView.java"
"mScroller","false","false","true","false","false","OverScroller","null","[]","Optional.empty","\android\widget\ScrollView.java"
"MAX_SCROLL_FACTOR","false","false","false","true","true","float","0.5f","[]","Optional.empty","\android\widget\ScrollView.java"
"mOverflingDistance","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ScrollView.java"
"mLastMotionY","false","false","true","false","false","float","null","[]","Optional[/**
 * Position of the last motion event.
 */
]","\android\widget\ScrollView.java"
"mTempRect","false","false","true","false","true","Rect","new Rect()","[]","Optional.empty","\android\widget\ScrollView.java"
"mActivePointerId","false","false","true","false","false","int","INVALID_POINTER","[]","Optional[/**
 * ID of the active pointer. This is used to retain consistency during
 * drags/flings if multiple pointers are used.
 */
]","\android\widget\ScrollView.java"
"mMaximumVelocity","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ScrollView.java"
"mFillViewport","false","false","true","false","false","boolean","null","[]","Optional[/**
 * When set to true, the scroll view measure its child to make it fill the currently
 * visible area.
 */
]","\android\widget\ScrollView.java"
"mEdgeGlowBottom","false","false","true","false","false","EdgeGlow","null","[]","Optional.empty","\android\widget\ScrollView.java"
"mTouchSlop","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ScrollView.java"
"mEdgeGlowTop","false","false","true","false","false","EdgeGlow","null","[]","Optional.empty","\android\widget\ScrollView.java"
"mLastScroll","false","false","true","false","false","long","null","[]","Optional.empty","\android\widget\ScrollView.java"
"ANIMATED_SCROLL_GAP","false","false","false","true","true","int","250","[]","Optional.empty","\android\widget\ScrollView.java"
"mMinimumVelocity","false","false","true","false","false","int","null","[]","Optional.empty","\android\widget\ScrollView.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<RemoteCallback>","new Parcelable.Creator<RemoteCallback>() {

    public RemoteCallback createFromParcel(Parcel in) {
        IBinder target = in.readStrongBinder();
        return target != null ? new RemoteCallbackProxy(IRemoteCallback.Stub.asInterface(target)) : null;
    }

    public RemoteCallback[] newArray(int size) {
        return new RemoteCallback[size];
    }
}","[]","Optional.empty","\android\os\RemoteCallback.java"
"mTarget","false","false","false","false","true","IRemoteCallback","null","[]","Optional.empty","\android\os\RemoteCallback.java"
"mResult","false","false","false","false","true","Bundle","null","[]","Optional.empty","\android\os\RemoteCallback.java"
"mHandler","false","false","false","false","true","Handler","null","[]","Optional.empty","\android\os\RemoteCallback.java"
"NO_ALPHA","false","false","true","true","true","int","0xFF","[]","Optional.empty","\android\widget\ToggleButton.java"
"mTextOff","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\widget\ToggleButton.java"
"mIndicatorDrawable","false","false","true","false","false","Drawable","null","[]","Optional.empty","\android\widget\ToggleButton.java"
"mTextOn","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\widget\ToggleButton.java"
"mDisabledAlpha","false","false","true","false","false","float","null","[]","Optional.empty","\android\widget\ToggleButton.java"
"EXTRA_IS_FAILOVER","true","false","false","true","true","String","""isFailover""","[]","Optional[/**
 * The lookup key for a boolean that indicates whether a connect event
 * is for a network to which the connectivity manager was failing over
 * following a disconnect on another network.
 * Retrieve it with {@link android.content.Intent#getBooleanExtra(String,boolean)}.
 */
]","\android\net\ConnectivityManager.java"
"TYPE_WIFI","true","false","false","true","true","int","1","[]","Optional[/**
 * The Default WIFI data connection.  When active, all data traffic
 * will use this connection by default.  Should not coexist with other
 * default connections.
 */
]","\android\net\ConnectivityManager.java"
"EXTRA_NO_CONNECTIVITY","true","false","false","true","true","String","""noConnectivity""","[]","Optional[/**
 * The lookup key for a boolean that indicates whether there is a
 * complete lack of connectivity, i.e., no network is available.
 * Retrieve it with {@link android.content.Intent#getBooleanExtra(String,boolean)}.
 */
]","\android\net\ConnectivityManager.java"
"EXTRA_NETWORK_INFO","true","false","false","true","true","String","""networkInfo""","[]","Optional[/**
 * The lookup key for a {@link NetworkInfo} object. Retrieve with
 * {@link android.content.Intent#getParcelableExtra(String)}.
 */
]","\android\net\ConnectivityManager.java"
"EXTRA_ERRORED_TETHER","true","false","false","true","true","String","""erroredArray""","[]","Optional[/**
 * @hide
 * gives a String[]
 */
]","\android\net\ConnectivityManager.java"
"TETHER_ERROR_UNTETHER_IFACE_ERROR","true","false","false","true","true","int","7","[]","Optional[/**
 * {@hide}
 */
]","\android\net\ConnectivityManager.java"
"TETHER_ERROR_MASTER_ERROR","true","false","false","true","true","int","5","[]","Optional[/**
 * {@hide}
 */
]","\android\net\ConnectivityManager.java"
"TETHER_ERROR_UNKNOWN_IFACE","true","false","false","true","true","int","1","[]","Optional[/**
 * {@hide}
 */
]","\android\net\ConnectivityManager.java"
"TETHER_ERROR_UNAVAIL_IFACE","true","false","false","true","true","int","4","[]","Optional[/**
 * {@hide}
 */
]","\android\net\ConnectivityManager.java"
"TETHER_ERROR_SERVICE_UNAVAIL","true","false","false","true","true","int","2","[]","Optional[/**
 * {@hide}
 */
]","\android\net\ConnectivityManager.java"
"TYPE_WIMAX","true","false","false","true","true","int","6","[]","Optional[/**
 * The Default WiMAX data connection.  When active, all data traffic
 * will use this connection by default.  Should not coexist with other
 * default connections.
 */
]","\android\net\ConnectivityManager.java"
"MAX_NETWORK_TYPE","true","false","false","true","true","int","TYPE_MOBILE_HIPRI","[]","Optional[/**
 * {@hide} TODO: Need to adjust this for WiMAX.
 */
]","\android\net\ConnectivityManager.java"
"INET_CONDITION_ACTION","true","false","false","true","true","String","""android.net.conn.INET_CONDITION_ACTION""","[]","Optional[/**
 * Broadcast Action: The network connection may not be good
 * uses {@code ConnectivityManager.EXTRA_INET_CONDITION} and
 * {@code ConnectivityManager.EXTRA_NETWORK_INFO} to specify
 * the network and it's condition.
 * @hide
 */
]","\android\net\ConnectivityManager.java"
"TYPE_MOBILE_MMS","true","false","false","true","true","int","2","[]","Optional[/**
 * An MMS-specific Mobile data connection.  This connection may be the
 * same as {@link #TYPE_MOBILE} but it may be different.  This is used
 * by applications needing to talk to the carrier's Multimedia Messaging
 * Service servers.  It may coexist with default data connections.
 */
]","\android\net\ConnectivityManager.java"
"TETHER_ERROR_DISABLE_NAT_ERROR","true","false","false","true","true","int","9","[]","Optional[/**
 * {@hide}
 */
]","\android\net\ConnectivityManager.java"
"EXTRA_ACTIVE_TETHER","true","false","false","true","true","String","""activeArray""","[]","Optional[/**
 * @hide
 * gives a String[]
 */
]","\android\net\ConnectivityManager.java"
"ACTION_BACKGROUND_DATA_SETTING_CHANGED","true","false","false","true","true","String","""android.net.conn.BACKGROUND_DATA_SETTING_CHANGED""","[@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)]","Optional[/**
 * Broadcast Action: The setting for background data usage has changed
 * values. Use {@link #getBackgroundDataSetting()} to get the current value.
 * <p>
 * If an application uses the network in the background, it should listen
 * for this broadcast and stop using the background data if the value is
 * false.
 */
]","\android\net\ConnectivityManager.java"
"TYPE_DUMMY","true","false","false","true","true","int","8","[]","Optional[/**
 * {@hide}
 */
]","\android\net\ConnectivityManager.java"
"TYPE_MOBILE_HIPRI","true","false","false","true","true","int","5","[]","Optional[/**
 * A High Priority Mobile data connection.  This connection is typically
 * the same as {@link #TYPE_MOBILE} but the routing setup is different.
 * Only requesting processes will have access to the Mobile DNS servers
 * and only IP's explicitly requested via {@link #requestRouteToHost}
 * will route over this interface if a default route exists.
 */
]","\android\net\ConnectivityManager.java"
"TETHER_ERROR_UNSUPPORTED","true","false","false","true","true","int","3","[]","Optional[/**
 * {@hide}
 */
]","\android\net\ConnectivityManager.java"
"ACTION_TETHER_STATE_CHANGED","true","false","false","true","true","String","""android.net.conn.TETHER_STATE_CHANGED""","[]","Optional[/**
 * Broadcast Action: A tetherable connection has come or gone
 * TODO - finish the doc
 * @hide
 */
]","\android\net\ConnectivityManager.java"
"TETHER_ERROR_IFACE_CFG_ERROR","true","false","false","true","true","int","10","[]","Optional[/**
 * {@hide}
 */
]","\android\net\ConnectivityManager.java"
"EXTRA_OTHER_NETWORK_INFO","true","false","false","true","true","String","""otherNetwork""","[]","Optional[/**
 * The lookup key for a {@link NetworkInfo} object. This is supplied when
 * there is another network that it may be possible to connect to. Retrieve with
 * {@link android.content.Intent#getParcelableExtra(String)}.
 */
]","\android\net\ConnectivityManager.java"
"EXTRA_INET_CONDITION","true","false","false","true","true","String","""inetCondition""","[]","Optional[/**
 * The lookup key for an int that provides information about
 * our connection to the internet at large.  0 indicates no connection,
 * 100 indicates a great connection.  Retrieve it with
 * {@link android.content.Intent@getIntExtra(String)}.
 * {@hide}
 */
]","\android\net\ConnectivityManager.java"
"TETHER_ERROR_ENABLE_NAT_ERROR","true","false","false","true","true","int","8","[]","Optional[/**
 * {@hide}
 */
]","\android\net\ConnectivityManager.java"
"DEFAULT_NETWORK_PREFERENCE","true","false","false","true","true","int","TYPE_WIFI","[]","Optional.empty","\android\net\ConnectivityManager.java"
"TYPE_ETHERNET","true","false","false","true","true","int","9","[]","Optional[/**
 * {@hide}
 */
]","\android\net\ConnectivityManager.java"
"TETHER_ERROR_TETHER_IFACE_ERROR","true","false","false","true","true","int","6","[]","Optional[/**
 * {@hide}
 */
]","\android\net\ConnectivityManager.java"
"EXTRA_REASON","true","false","false","true","true","String","""reason""","[]","Optional[/**
 * The lookup key for a string that indicates why an attempt to connect
 * to a network failed. The string has no particular structure. It is
 * intended to be used in notifications presented to users. Retrieve
 * it with {@link android.content.Intent#getStringExtra(String)}.
 */
]","\android\net\ConnectivityManager.java"
"MAX_RADIO_TYPE","true","false","false","true","true","int","TYPE_WIFI","[]","Optional[/**
 * {@hide} TODO: Need to adjust this for WiMAX.
 */
]","\android\net\ConnectivityManager.java"
"EXTRA_AVAILABLE_TETHER","true","false","false","true","true","String","""availableArray""","[]","Optional[/**
 * @hide
 * gives a String[]
 */
]","\android\net\ConnectivityManager.java"
"TETHER_ERROR_NO_ERROR","true","false","false","true","true","int","0","[]","Optional[/**
 * {@hide}
 */
]","\android\net\ConnectivityManager.java"
"TYPE_MOBILE_SUPL","true","false","false","true","true","int","3","[]","Optional[/**
 * A SUPL-specific Mobile data connection.  This connection may be the
 * same as {@link #TYPE_MOBILE} but it may be different.  This is used
 * by applications needing to talk to the carrier's Secure User Plane
 * Location servers for help locating the device.  It may coexist with
 * default data connections.
 */
]","\android\net\ConnectivityManager.java"
"TYPE_MOBILE","true","false","false","true","true","int","0","[]","Optional[/**
 * The Default Mobile data connection.  When active, all data traffic
 * will use this connection by default.  Should not coexist with other
 * default connections.
 */
]","\android\net\ConnectivityManager.java"
"TYPE_MOBILE_DUN","true","false","false","true","true","int","4","[]","Optional[/**
 * A DUN-specific Mobile data connection.  This connection may be the
 * same as {@link #TYPE_MOBILE} but it may be different.  This is used
 * by applicaitons performing a Dial Up Networking bridge so that
 * the carrier is aware of DUN traffic.  It may coexist with default data
 * connections.
 */
]","\android\net\ConnectivityManager.java"
"mService","false","false","true","false","false","IConnectivityManager","null","[]","Optional.empty","\android\net\ConnectivityManager.java"
"CONNECTIVITY_ACTION","true","false","false","true","true","String","""android.net.conn.CONNECTIVITY_CHANGE""","[]","Optional[/**
 * A change in network connectivity has occurred. A connection has either
 * been established or lost. The NetworkInfo for the affected network is
 * sent as an extra; it should be consulted to see what kind of
 * connectivity event occurred.
 * <p/>
 * If this is a connection that was the result of failing over from a
 * disconnected network, then the FAILOVER_CONNECTION boolean extra is
 * set to true.
 * <p/>
 * For a loss of connectivity, if the connectivity manager is attempting
 * to connect (or has already connected) to another network, the
 * NetworkInfo for the new network is also passed as an extra. This lets
 * any receivers of the broadcast know that they should not necessarily
 * tell the user that no data traffic will be possible. Instead, the
 * reciever should expect another broadcast soon, indicating either that
 * the failover attempt succeeded (and so there is still overall data
 * connectivity), or that the failover attempt failed, meaning that all
 * connectivity has been lost.
 * <p/>
 * For a disconnect event, the boolean extra EXTRA_NO_CONNECTIVITY
 * is set to {@code true} if there are no connected networks at all.
 */
]","\android\net\ConnectivityManager.java"
"TYPE_BLUETOOTH","true","false","false","true","true","int","7","[]","Optional[/**
 * Bluetooth data connection.
 * @hide
 */
]","\android\net\ConnectivityManager.java"
"EXTRA_EXTRA_INFO","true","false","false","true","true","String","""extraInfo""","[]","Optional[/**
 * The lookup key for a string that provides optionally supplied
 * extra information about the network state. The information
 * may be passed up from the lower networking layers, and its
 * meaning may be specific to a particular network type. Retrieve
 * it with {@link android.content.Intent#getStringExtra(String)}.
 */
]","\android\net\ConnectivityManager.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<SavedState>","new Parcelable.Creator<SavedState>() {

    public SavedState createFromParcel(Parcel in) {
        return new SavedState(in);
    }

    public SavedState[] newArray(int size) {
        return new SavedState[size];
    }
}","[]","Optional.empty","\com\android\internal\preference\YesNoPreference.java"
"wasPositiveResult","false","false","false","false","false","boolean","null","[]","Optional.empty","\com\android\internal\preference\YesNoPreference.java"
"mWasPositiveResult","false","false","true","false","false","boolean","null","[]","Optional.empty","\com\android\internal\preference\YesNoPreference.java"
"mSocket","false","false","true","false","false","BluetoothSocket","null","[]","Optional.empty","\android\bluetooth\BluetoothOutputStream.java"
"MSG_DATA","false","false","true","true","true","int","102","[]","Optional[// Send data to loader
]","\android\webkit\StreamLoader.java"
"MSG_END","false","false","true","true","true","int","103","[]","Optional[// Send endData to loader
]","\android\webkit\StreamLoader.java"
"mContext","false","true","false","false","true","Context","null","[]","Optional.empty","\android\webkit\StreamLoader.java"
"mDataStream","false","true","false","false","false","InputStream","null","[]","Optional[// stream to read data from
]","\android\webkit\StreamLoader.java"
"mLoadListener","false","true","false","false","true","LoadListener","null","[]","Optional[// loader class
]","\android\webkit\StreamLoader.java"
"MSG_HEADERS","false","false","true","true","true","int","101","[]","Optional[// Send headers to loader
]","\android\webkit\StreamLoader.java"
"MSG_STATUS","false","false","true","true","true","int","100","[]","Optional[// Send status to loader
]","\android\webkit\StreamLoader.java"
"mHandler","false","false","true","false","false","Handler","null","[]","Optional[// Handler which will be initialized in the thread where load() is called.
]","\android\webkit\StreamLoader.java"
"mContentLength","false","true","false","false","false","long","null","[]","Optional[// content length of data
]","\android\webkit\StreamLoader.java"
"mData","false","false","true","false","false","byte","null","[]","Optional[// buffer to pass data to loader with.
]","\android\webkit\StreamLoader.java"
"CREATOR","true","false","false","true","true","Parcelable.Creator<ResultReceiver>","new Parcelable.Creator<ResultReceiver>() {

    public ResultReceiver createFromParcel(Parcel in) {
        return new ResultReceiver(in);
    }

    public ResultReceiver[] newArray(int size) {
        return new ResultReceiver[size];
    }
}","[]","Optional.empty","\android\os\ResultReceiver.java"
"mLocal","false","false","false","false","true","boolean","null","[]","Optional.empty","\android\os\ResultReceiver.java"
"mHandler","false","false","false","false","true","Handler","null","[]","Optional.empty","\android\os\ResultReceiver.java"
"mResultData","false","false","false","false","true","Bundle","null","[]","Optional.empty","\android\os\ResultReceiver.java"
"mReceiver","false","false","false","false","false","IResultReceiver","null","[]","Optional.empty","\android\os\ResultReceiver.java"
"mResultCode","false","false","false","false","true","int","null","[]","Optional.empty","\android\os\ResultReceiver.java"
"SDK","true","false","false","true","true","String","getString(""ro.build.version.sdk"")","[@Deprecated]","Optional[/**
 * The user-visible SDK version of the framework in its raw String
 * representation; use {@link #SDK_INT} instead.
 *
 * @deprecated Use {@link #SDK_INT} to easily get this as an integer.
 */
]","\android\os\Build.java"
"GINGERBREAD_MR1","true","false","false","true","true","int","10","[]","Optional[/**
 * Newest version of Android, version 2.3.3.
 */
]","\android\os\Build.java"
"RELEASE","true","false","false","true","true","String","getString(""ro.build.version.release"")","[]","Optional[/**
 * The user-visible version string.  E.g., ""1.0"" or ""3.4b5"".
 */
]","\android\os\Build.java"
"TAGS","true","false","false","true","true","String","getString(""ro.build.tags"")","[]","Optional[/**
 * Comma-separated tags describing the build, like ""unsigned,debug"".
 */
]","\android\os\Build.java"
"ECLAIR_0_1","true","false","false","true","true","int","6","[]","Optional[/**
 * December 2009: Android 2.0.1
 */
]","\android\os\Build.java"
"SERIAL","true","false","false","true","true","String","getString(""ro.serialno"")","[]","Optional[/**
 * A hardware serial number, if available.  Alphanumeric only, case-insensitive.
 */
]","\android\os\Build.java"
"HARDWARE","true","false","false","true","true","String","getString(""ro.hardware"")","[]","Optional[/**
 * The name of the hardware (from the kernel command line or /proc).
 */
]","\android\os\Build.java"
"CUPCAKE","true","false","false","true","true","int","3","[]","Optional[/**
 * May 2009: Android 1.5.
 */
]","\android\os\Build.java"
"CPU_ABI","true","false","false","true","true","String","getString(""ro.product.cpu.abi"")","[]","Optional[/**
 * The name of the instruction set (CPU type + ABI convention) of native code.
 */
]","\android\os\Build.java"
"FINGERPRINT","true","false","false","true","true","String","getString(""ro.build.fingerprint"")","[]","Optional[/**
 * A string that uniquely identifies this build.  Do not attempt to parse this value.
 */
]","\android\os\Build.java"
"PRODUCT","true","false","false","true","true","String","getString(""ro.product.name"")","[]","Optional[/**
 * The name of the overall product.
 */
]","\android\os\Build.java"
"BRAND","true","false","false","true","true","String","getString(""ro.product.brand"")","[]","Optional[/**
 * The brand (e.g., carrier) the software is customized for, if any.
 */
]","\android\os\Build.java"
"INCREMENTAL","true","false","false","true","true","String","getString(""ro.build.version.incremental"")","[]","Optional[/**
 * The internal value used by the underlying source control to
 * represent this build.  E.g., a perforce changelist number
 * or a git hash.
 */
]","\android\os\Build.java"
"BASE","true","false","false","true","true","int","1","[]","Optional[/**
 * October 2008: The original, first, version of Android.  Yay!
 */
]","\android\os\Build.java"
"SDK_INT","true","false","false","true","true","int","SystemProperties.getInt(""ro.build.version.sdk"", 0)","[]","Optional[/**
 * The user-visible SDK version of the framework; its possible
 * values are defined in {@link Build.VERSION_CODES}.
 */
]","\android\os\Build.java"
"DISPLAY","true","false","false","true","true","String","getString(""ro.build.display.id"")","[]","Optional[/**
 * A build ID string meant for displaying to the user
 */
]","\android\os\Build.java"
"DONUT","true","false","false","true","true","int","4","[]","Optional[/**
 * September 2009: Android 1.6.
 *
 * <p>Applications targeting this or a later release will get these
 * new changes in behavior:</p>
 * <ul>
 * <li> They must explicitly request the
 * {@link android.Manifest.permission#WRITE_EXTERNAL_STORAGE} permission to be
 * able to modify the contents of the SD card.  (Apps targeting
 * earlier versions will always request the permission.)
 * <li> They must explicitly request the
 * {@link android.Manifest.permission#READ_PHONE_STATE} permission to be
 * able to be able to retrieve phone state info.  (Apps targeting
 * earlier versions will always request the permission.)
 * <li> They are assumed to support different screen densities and
 * sizes.  (Apps targeting earlier versions are assumed to only support
 * medium density normal size screens unless otherwise indicated).
 * They can still explicitly specify screen support either way with the
 * supports-screens manifest tag.
 * </ul>
 */
]","\android\os\Build.java"
"TIME","true","false","false","true","true","long","getLong(""ro.build.date.utc"") * 1000","[]","Optional[// The following properties only make sense for internal engineering builds.
]","\android\os\Build.java"
"BOARD","true","false","false","true","true","String","getString(""ro.product.board"")","[]","Optional[/**
 * The name of the underlying board, like ""goldfish"".
 */
]","\android\os\Build.java"
"CPU_ABI2","true","false","false","true","true","String","getString(""ro.product.cpu.abi2"")","[]","Optional[/**
 * The name of the second instruction set (CPU type + ABI convention) of native code.
 */
]","\android\os\Build.java"
"CODENAME","true","false","false","true","true","String","getString(""ro.build.version.codename"")","[]","Optional[/**
 * The current development codename, or the string ""REL"" if this is
 * a release build.
 */
]","\android\os\Build.java"
"ID","true","false","false","true","true","String","getString(""ro.build.id"")","[]","Optional[/**
 * Either a changelist number, or a label like ""M4-rc20"".
 */
]","\android\os\Build.java"
"TYPE","true","false","false","true","true","String","getString(""ro.build.type"")","[]","Optional[/**
 * The type of build, like ""user"" or ""eng"".
 */
]","\android\os\Build.java"
"BASE_1_1","true","false","false","true","true","int","2","[]","Optional[/**
 * February 2009: First Android update, officially called 1.1.
 */
]","\android\os\Build.java"
"ECLAIR_MR1","true","false","false","true","true","int","7","[]","Optional[/**
 * January 2010: Android 2.1
 */
]","\android\os\Build.java"
"FROYO","true","false","false","true","true","int","8","[]","Optional[/**
 * June 2010: Android 2.2
 */
]","\android\os\Build.java"
"MODEL","true","false","false","true","true","String","getString(""ro.product.model"")","[]","Optional[/**
 * The end-user-visible name for the end product.
 */
]","\android\os\Build.java"
"MANUFACTURER","true","false","false","true","true","String","getString(""ro.product.manufacturer"")","[]","Optional[/**
 * The manufacturer of the product/hardware.
 */
]","\android\os\Build.java"
"ECLAIR","true","false","false","true","true","int","5","[]","Optional[/**
 * November 2009: Android 2.0
 *
 * <p>Applications targeting this or a later release will get these
 * new changes in behavior:</p>
 * <ul>
 * <li> The {@link android.app.Service#onStartCommand
 * Service.onStartCommand} function will return the new
 * {@link android.app.Service#START_STICKY} behavior instead of the
 * old compatibility {@link android.app.Service#START_STICKY_COMPATIBILITY}.
 * <li> The {@link android.app.Activity} class will now execute back
 * key presses on the key up instead of key down, to be able to detect
 * canceled presses from virtual keys.
 * <li> The {@link android.widget.TabWidget} class will use a new color scheme
 * for tabs. In the new scheme, the foreground tab has a medium gray background
 * the background tabs have a dark gray background.
 * </ul>
 */
]","\android\os\Build.java"
"RADIO","true","false","false","true","true","String","getString(""gsm.version.baseband"")","[]","Optional[/**
 * The radio firmware version number.
 */
]","\android\os\Build.java"
"HOST","true","false","false","true","true","String","getString(""ro.build.host"")","[]","Optional.empty","\android\os\Build.java"
"CUR_DEVELOPMENT","true","false","false","true","true","int","10000","[]","Optional[/**
 * Magic version number for a current development build, which has
 * not yet turned into an official release.
 */
]","\android\os\Build.java"
"DEVICE","true","false","false","true","true","String","getString(""ro.product.device"")","[]","Optional[/**
 * The name of the industrial design.
 */
]","\android\os\Build.java"
"BOOTLOADER","true","false","false","true","true","String","getString(""ro.bootloader"")","[]","Optional[/**
 * The system bootloader version number.
 */
]","\android\os\Build.java"
"GINGERBREAD","true","false","false","true","true","int","9","[]","Optional[/**
 * November 2010: Android 2.3
 */
]","\android\os\Build.java"
"USER","true","false","false","true","true","String","getString(""ro.build.user"")","[]","Optional.empty","\android\os\Build.java"
"UNKNOWN","true","false","false","true","true","String","""unknown""","[]","Optional[/**
 * Value used for when a build property is unknown.
 */
]","\android\os\Build.java"
"ATTR_NAME","false","false","true","true","true","String","""name""","[]","Optional.empty","\com\android\internal\os\PowerProfile.java"
"POWER_WIFI_ACTIVE","true","false","false","true","true","String","""wifi.active""","[]","Optional[/**
 * Power consumption when WiFi driver is transmitting/receiving.
 */
]","\com\android\internal\os\PowerProfile.java"
"POWER_RADIO_ACTIVE","true","false","false","true","true","String","""radio.active""","[]","Optional[/**
 * Power consumption when talking on the phone.
 */
]","\com\android\internal\os\PowerProfile.java"
"POWER_BLUETOOTH_ACTIVE","true","false","false","true","true","String","""bluetooth.active""","[]","Optional[/**
 * Power consumption when Bluetooth driver is transmitting/receiving.
 */
]","\com\android\internal\os\PowerProfile.java"
"POWER_RADIO_SCANNING","true","false","false","true","true","String","""radio.scanning""","[]","Optional[/**
 * Power consumption when cell radio is hunting for a signal.
 */
]","\com\android\internal\os\PowerProfile.java"
"TAG_ITEM","false","false","true","true","true","String","""item""","[]","Optional.empty","\com\android\internal\os\PowerProfile.java"
"sPowerMap","false","false","false","true","true","HashMap<String,Object>","new HashMap<String, Object>()","[]","Optional.empty","\com\android\internal\os\PowerProfile.java"
"POWER_WIFI_ON","true","false","false","true","true","String","""wifi.on""","[]","Optional[/**
 * Power consumption when WiFi driver is on.
 */
]","\com\android\internal\os\PowerProfile.java"
"POWER_CPU_SPEEDS","true","false","false","true","true","String","""cpu.speeds""","[]","Optional.empty","\com\android\internal\os\PowerProfile.java"
"POWER_GPS_ON","true","false","false","true","true","String","""gps.on""","[]","Optional[/**
 * Power consumption when GPS is on.
 */
]","\com\android\internal\os\PowerProfile.java"
"POWER_NONE","true","false","false","true","true","String","""none""","[]","Optional[/**
 * No power consumption, or accounted for elsewhere.
 */
]","\com\android\internal\os\PowerProfile.java"
"POWER_RADIO_ON","true","false","false","true","true","String","""radio.on""","[]","Optional[/**
 * Power consumption when cell radio is on but not on a call.
 */
]","\com\android\internal\os\PowerProfile.java"
"TAG_ARRAYITEM","false","false","true","true","true","String","""value""","[]","Optional.empty","\com\android\internal\os\PowerProfile.java"
"POWER_SCREEN_ON","true","false","false","true","true","String","""screen.on""","[]","Optional[/**
 * Power consumption when screen is on, not including the backlight power.
 */
]","\com\android\internal\os\PowerProfile.java"
"TAG_DEVICE","false","false","true","true","true","String","""device""","[]","Optional.empty","\com\android\internal\os\PowerProfile.java"
"POWER_BLUETOOTH_AT_CMD","true","false","false","true","true","String","""bluetooth.at""","[]","Optional[/**
 * Power consumption when Bluetooth driver gets an AT command.
 */
]","\com\android\internal\os\PowerProfile.java"
"POWER_BLUETOOTH_ON","true","false","false","true","true","String","""bluetooth.on""","[]","Optional[/**
 * Power consumption when Bluetooth driver is on.
 */
]","\com\android\internal\os\PowerProfile.java"
"POWER_VIDEO","true","false","false","true","true","String","""dsp.video""","[]","Optional[/**
 * Power consumed by any media hardware when playing back video content. This is in addition
 * to the CPU power, probably due to a DSP.
 */
]","\com\android\internal\os\PowerProfile.java"
"POWER_CPU_ACTIVE","true","false","false","true","true","String","""cpu.active""","[]","Optional[/**
 * Power consumption when CPU is in power collapse mode.
 */
]","\com\android\internal\os\PowerProfile.java"
"TAG_ARRAY","false","false","true","true","true","String","""array""","[]","Optional.empty","\com\android\internal\os\PowerProfile.java"
"POWER_CPU_AWAKE","true","false","false","true","true","String","""cpu.awake""","[]","Optional[/**
 * Power consumption when CPU is awake (when a wake lock is held).  This
 * should be 0 on devices that can go into full CPU power collapse even
 * when a wake lock is held.  Otherwise, this is the power consumption in
 * addition to POWERR_CPU_IDLE due to a wake lock being held but with no
 * CPU activity.
 */
]","\com\android\internal\os\PowerProfile.java"
"POWER_AUDIO","true","false","false","true","true","String","""dsp.audio""","[]","Optional[/**
 * Power consumed by the audio hardware when playing back audio content. This is in addition
 * to the CPU power, probably due to a DSP and / or amplifier.
 */
]","\com\android\internal\os\PowerProfile.java"
"POWER_BATTERY_CAPACITY","true","false","false","true","true","String","""battery.capacity""","[]","Optional[/**
 * Battery capacity in milliAmpHour (mAh).
 */
]","\com\android\internal\os\PowerProfile.java"
"POWER_CPU_IDLE","true","false","false","true","true","String","""cpu.idle""","[]","Optional[/**
 * Power consumption when CPU is in power collapse mode.
 */
]","\com\android\internal\os\PowerProfile.java"
"POWER_WIFI_SCAN","true","false","false","true","true","String","""wifi.scan""","[]","Optional[/**
 * Power consumption when WiFi driver is scanning for networks.
 */
]","\com\android\internal\os\PowerProfile.java"
"POWER_SCREEN_FULL","true","false","false","true","true","String","""screen.full""","[]","Optional[/**
 * Power consumption at full backlight brightness. If the backlight is at
 * 50% brightness, then this should be multiplied by 0.5
 */
]","\com\android\internal\os\PowerProfile.java"
"SPAN_EXCLUSIVE_EXCLUSIVE","true","false","false","true","true","int","SPAN_POINT_MARK","[]","Optional[/**
 * Spans of type SPAN_EXCLUSIVE_EXCLUSIVE do not expand
 * to include text inserted at either their starting or ending point.
 * They can never have a length of 0 and are automatically removed
 * from the buffer if all the text they cover is removed.
 */
]","\android\text\Spanned.java"
"SPAN_POINT_MARK_MASK","true","false","false","true","true","int","0x33","[]","Optional[/**
 * Bitmask of bits that are relevent for controlling point/mark behavior
 * of spans.
 */
]","\android\text\Spanned.java"
"SPAN_PRIORITY_SHIFT","true","false","false","true","true","int","16","[]","Optional[/**
 * The bits numbered just above SPAN_PRIORITY_SHIFT determine the order
 * of change notifications -- higher numbers go first.  You probably
 * don't need to set this; it is used so that when text changes, the
 * text layout gets the chance to update itself before any other
 * callbacks can inquire about the layout of the text.
 */
]","\android\text\Spanned.java"
"SPAN_EXCLUSIVE_INCLUSIVE","true","false","false","true","true","int","SPAN_POINT_POINT","[]","Optional[/**
 * Non-0-length spans of type SPAN_INCLUSIVE_EXCLUSIVE expand
 * to include text inserted at their ending point but not at their
 * starting point.  When 0-length, they behave like points.
 */
]","\android\text\Spanned.java"
"SPAN_USER","true","false","false","true","true","int","0xFFFFFFFF << SPAN_USER_SHIFT","[]","Optional[/**
 * The bits specified by the SPAN_USER bitfield are available
 * for callers to use to store scalar data associated with their
 * span object.
 */
]","\android\text\Spanned.java"
"SPAN_MARK_MARK","true","false","false","true","true","int","0x11","[]","Optional[/**
 * 0-length spans with type SPAN_MARK_MARK behave like text marks:
 * they remain at their original offset when text is inserted
 * at that offset.
 */
]","\android\text\Spanned.java"
"SPAN_MARK_POINT","true","false","false","true","true","int","0x12","[]","Optional[/**
 * SPAN_MARK_POINT is a synonym for {@link #SPAN_INCLUSIVE_INCLUSIVE}.
 */
]","\android\text\Spanned.java"
"SPAN_POINT_POINT","true","false","false","true","true","int","0x22","[]","Optional[/**
 * 0-length spans with type SPAN_POINT_POINT behave like cursors:
 * they are pushed forward by the length of the insertion when text
 * is inserted at their offset.
 */
]","\android\text\Spanned.java"
"SPAN_COMPOSING","true","false","false","true","true","int","0x100","[]","Optional[/**
 * This flag is set on spans that are being used to apply temporary
 * styling information on the composing text of an input method, so that
 * they can be found and removed when the composing text is being
 * replaced.
 */
]","\android\text\Spanned.java"
"SPAN_POINT_MARK","true","false","false","true","true","int","0x21","[]","Optional[/**
 * SPAN_POINT_MARK is a synonym for {@link #SPAN_EXCLUSIVE_EXCLUSIVE}.
 */
]","\android\text\Spanned.java"
"SPAN_USER_SHIFT","true","false","false","true","true","int","24","[]","Optional[/**
 * The bits numbered SPAN_USER_SHIFT and above are available
 * for callers to use to store scalar data associated with their
 * span object.
 */
]","\android\text\Spanned.java"
"SPAN_INCLUSIVE_INCLUSIVE","true","false","false","true","true","int","SPAN_MARK_POINT","[]","Optional[/**
 * Spans of type SPAN_INCLUSIVE_INCLUSIVE expand
 * to include text inserted at either their starting or ending point.
 */
]","\android\text\Spanned.java"
"SPAN_PARAGRAPH","true","false","false","true","true","int","0x33","[]","Optional[/**
 * SPAN_PARAGRAPH behaves like SPAN_INCLUSIVE_EXCLUSIVE
 * (SPAN_MARK_MARK), except that if either end of the span is
 * at the end of the buffer, that end behaves like _POINT
 * instead (so SPAN_INCLUSIVE_INCLUSIVE if it starts in the
 * middle and ends at the end, or SPAN_EXCLUSIVE_INCLUSIVE
 * if it both starts and ends at the end).
 * <p>
 * Its endpoints must be the start or end of the buffer or
 * immediately after a \n character, and if the \n
 * that anchors it is deleted, the endpoint is pulled to the
 * next \n that follows in the buffer (or to the end of
 * the buffer).
 */
]","\android\text\Spanned.java"
"SPAN_INTERMEDIATE","true","false","false","true","true","int","0x200","[]","Optional[/**
 * This flag will be set for intermediate span changes, meaning there
 * is guaranteed to be another change following it.  Typically it is
 * used for {@link Selection} which automatically uses this with the first
 * offset it sets when updating the selection.
 */
]","\android\text\Spanned.java"
"SPAN_INCLUSIVE_EXCLUSIVE","true","false","false","true","true","int","SPAN_MARK_MARK","[]","Optional[/**
 * Non-0-length spans of type SPAN_INCLUSIVE_EXCLUSIVE expand
 * to include text inserted at their starting point but not at their
 * ending point.  When 0-length, they behave like marks.
 */
]","\android\text\Spanned.java"
"SPAN_PRIORITY","true","false","false","true","true","int","0xFF << SPAN_PRIORITY_SHIFT","[]","Optional[/**
 * The bits specified by the SPAN_PRIORITY bitmap determine the order
 * of change notifications -- higher numbers go first.  You probably
 * don't need to set this; it is used so that when text changes, the
 * text layout gets the chance to update itself before any other
 * callbacks can inquire about the layout of the text.
 */
]","\android\text\Spanned.java"
"UMLAUT","false","false","true","true","true","int","'\u00A8' << 16","[]","Optional.empty","\android\view\KeyCharacterMap.java"
"META_LENGTH","true","false","false","true","true","int","4","[]","Optional.empty","\android\view\KeyCharacterMap.java"
"meta","true","false","false","false","false","char","new char[META_LENGTH]","[]","Optional[/**
 * The character that will be generated in various meta states
 * (the same ones used for {@link #get} and defined as
 * {@link KeyEvent#META_SHIFT_ON} and {@link KeyEvent#META_ALT_ON}).
 * <table>
 * <tr><th>Index</th><th align=""left"">Value</th></tr>
 * <tr><td>0</td><td>no modifiers</td></tr>
 * <tr><td>1</td><td>caps</td></tr>
 * <tr><td>2</td><td>alt</td></tr>
 * <tr><td>3</td><td>caps + alt</td></tr>
 * </table>
 */
]","\android\view\KeyCharacterMap.java"
"COMBINING_ACCENT_MASK","true","false","false","true","true","int","0x7FFFFFFF","[]","Optional[/**
 * Mask the return value from {@link #get(int, int)} with this value to get
 * a printable representation of the accent character of a ""dead key.""
 */
]","\android\view\KeyCharacterMap.java"
"sLock","false","false","true","true","false","Object","new Object()","[]","Optional.empty","\android\view\KeyCharacterMap.java"
"COMBINING_ACCENT","true","false","false","true","true","int","0x80000000","[]","Optional[/*
     * This bit will be set in the return value of {@link #get(int, int)} if the
     * key is a ""dead key.""
     */
]","\android\view\KeyCharacterMap.java"
"displayLabel","true","false","false","false","false","char","null","[]","Optional[/**
 * The display label (see {@link #getDisplayLabel}).
 */
]","\android\view\KeyCharacterMap.java"
"COMBINING","false","false","true","true","false","SparseIntArray","new SparseIntArray()","[]","Optional[/**
 * Maps Unicode combining diacritical to display-form dead key
 * (display character shifted left 16 bits).
 */
]","\android\view\KeyCharacterMap.java"
"DEAD","false","false","true","true","false","SparseIntArray","new SparseIntArray()","[]","Optional[/**
 * Maps combinations of (display-form) dead key and second character
 * to combined output character.
 */
]","\android\view\KeyCharacterMap.java"
"ALPHA","true","false","false","true","true","int","3","[]","Optional[/**
 * A keyboard with all the letters, and maybe some numbers.
 */
]","\android\view\KeyCharacterMap.java"
"mKeyboardDevice","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\KeyCharacterMap.java"
"PICKER_DIALOG_INPUT","true","false","false","true","true","char","'\uEF01'","[]","Optional[/**
 * This private-use character is used to bring up a character picker for
 * miscellaneous symbols.
 */
]","\android\view\KeyCharacterMap.java"
"CIRCUMFLEX","false","false","true","true","true","int","'^' << 16","[]","Optional.empty","\android\view\KeyCharacterMap.java"
"number","true","false","false","false","false","char","null","[]","Optional[/**
 * The ""number"" value (see {@link #getNumber}).
 */
]","\android\view\KeyCharacterMap.java"
"mPointer","false","false","true","false","false","int","null","[]","Optional.empty","\android\view\KeyCharacterMap.java"
"HEX_INPUT","true","false","false","true","true","char","'\uEF00'","[]","Optional[/**
 * This private-use character is used to trigger Unicode character
 * input by hex digits.
 */
]","\android\view\KeyCharacterMap.java"
"BUILT_IN_KEYBOARD","true","false","false","true","true","int","0","[]","Optional[/**
 * The id of the device's primary built in keyboard is always 0.
 */
]","\android\view\KeyCharacterMap.java"
"sInstances","false","false","true","true","false","SparseArray<WeakReference<KeyCharacterMap>>","new SparseArray<WeakReference<KeyCharacterMap>>()","[]","Optional.empty","\android\view\KeyCharacterMap.java"
"NUMERIC","true","false","false","true","true","int","1","[]","Optional[/**
 * A numeric (12-key) keyboard.
 */
]","\android\view\KeyCharacterMap.java"
"PREDICTIVE","true","false","false","true","true","int","2","[]","Optional[/**
 * A keyboard with all the letters, but with more than one letter
 * per key.
 */
]","\android\view\KeyCharacterMap.java"
"ACUTE","false","false","true","true","true","int","'\u00B4' << 16","[]","Optional[/*
     * TODO: Change the table format to support full 21-bit-wide
     * accent characters and combined characters if ever necessary.    
     */
]","\android\view\KeyCharacterMap.java"
"GRAVE","false","false","true","true","true","int","'`' << 16","[]","Optional.empty","\android\view\KeyCharacterMap.java"
"TILDE","false","false","true","true","true","int","'~' << 16","[]","Optional.empty","\android\view\KeyCharacterMap.java"
"mRunnable","false","false","true","false","true","Runnable","new Runnable() {

    public void run() {
        if ((mOnClickListener != null) && mIsInLongpress && isEnabled()) {
            mOnClickListener.onClick(ZoomButton.this);
            mHandler.postDelayed(this, mZoomSpeed);
        }
    }
}","[]","Optional.empty","\android\widget\ZoomButton.java"
"mIsInLongpress","false","false","true","false","false","boolean","null","[]","Optional.empty","\android\widget\ZoomButton.java"
"mZoomSpeed","false","false","true","false","false","long","1000","[]","Optional.empty","\android\widget\ZoomButton.java"
"mHandler","false","false","true","false","true","Handler","null","[]","Optional.empty","\android\widget\ZoomButton.java"
"LIB_PREFIX","false","false","true","true","true","String","""lib""","[]","Optional[// Prefix that native shared libraries must have.
]","\com\android\internal\content\NativeLibraryHelper.java"
"LIB_PREFIX_LENGTH","false","false","true","true","true","int","LIB_PREFIX.length()","[]","Optional.empty","\com\android\internal\content\NativeLibraryHelper.java"
"APK_LIB_LENGTH","false","false","true","true","true","int","APK_LIB.length()","[]","Optional.empty","\com\android\internal\content\NativeLibraryHelper.java"
"LIB_SUFFIX_LENGTH","false","false","true","true","true","int","LIB_SUFFIX.length()","[]","Optional.empty","\com\android\internal\content\NativeLibraryHelper.java"
"PACKAGE_INSTALL_NATIVE_NO_LIBRARIES","false","false","true","true","true","int","1","[]","Optional.empty","\com\android\internal\content\NativeLibraryHelper.java"
"APK_LIB","false","false","true","true","true","String","""lib/""","[]","Optional[// Directory in the APK that holds all the native shared libraries.
]","\com\android\internal\content\NativeLibraryHelper.java"
"GDBSERVER","false","false","true","true","true","String","""gdbserver""","[]","Optional[// Name of the GDB binary.
]","\com\android\internal\content\NativeLibraryHelper.java"
"LIB_SUFFIX","false","false","true","true","true","String",""".so""","[]","Optional[// Suffix that the native shared libraries must have.
]","\com\android\internal\content\NativeLibraryHelper.java"
"PACKAGE_INSTALL_NATIVE_ABI_MISMATCH","false","false","true","true","true","int","2","[]","Optional.empty","\com\android\internal\content\NativeLibraryHelper.java"
"TAG","false","false","true","true","true","String","""NativeHelper""","[]","Optional.empty","\com\android\internal\content\NativeLibraryHelper.java"
"DEBUG_NATIVE","false","false","true","true","true","boolean","false","[]","Optional.empty","\com\android\internal\content\NativeLibraryHelper.java"
"PACKAGE_INSTALL_NATIVE_FOUND_LIBRARIES","false","false","true","true","true","int","0","[]","Optional[/*
     * The following constants are returned by listPackageSharedLibsForAbiLI
     * to indicate if native shared libraries were found in the package.
     * Values are:
     *    PACKAGE_INSTALL_NATIVE_FOUND_LIBRARIES => native libraries found and installed
     *    PACKAGE_INSTALL_NATIVE_NO_LIBRARIES     => no native libraries in package
     *    PACKAGE_INSTALL_NATIVE_ABI_MISMATCH     => native libraries for another ABI found
     *                                        in package (and not installed)
     *
     */
]","\com\android\internal\content\NativeLibraryHelper.java"
"MIN_ENTRY_LENGTH","false","false","true","true","true","int","APK_LIB_LENGTH + 2 + LIB_PREFIX_LENGTH + 1 + LIB_SUFFIX_LENGTH","[]","Optional[// lib/<something>/lib<name>.so.
]","\com\android\internal\content\NativeLibraryHelper.java"
"mSubValues","false","false","true","false","true","ArrayList<NamedContentValues>","null","[]","Optional.empty","\android\content\Entity.java"
"uri","true","false","false","false","true","Uri","null","[]","Optional.empty","\android\content\Entity.java"
"mValues","false","false","true","false","true","ContentValues","null","[]","Optional.empty","\android\content\Entity.java"
"values","true","false","false","false","true","ContentValues","null","[]","Optional.empty","\android\content\Entity.java"
"sInstance","false","false","true","true","false","ArrowKeyMovementMethod","null","[]","Optional.empty","\android\text\method\ArrowKeyMovementMethod.java"
"LAST_TAP_DOWN","false","false","true","true","true","Object","new Object()","[]","Optional.empty","\android\text\method\ArrowKeyMovementMethod.java"
"mIME","false","false","true","false","false","InputMethodService","null","[]","Optional.empty","\android\inputmethodservice\ExtractEditText.java"
"mSettingExtractedText","false","false","true","false","false","int","null","[]","Optional.empty","\android\inputmethodservice\ExtractEditText.java"
"MSG_CANCEL","false","false","true","true","true","int","3","[]","Optional.empty","\android\speech\SpeechRecognizer.java"
"MSG_ON_EVENT","false","false","true","true","true","int","9","[]","Optional.empty","\android\speech\SpeechRecognizer.java"
"MSG_BUFFER_RECEIVED","false","false","true","true","true","int","2","[]","Optional.empty","\android\speech\SpeechRecognizer.java"
"mContext","false","false","true","false","true","Context","null","[]","Optional[/**
 * Context with which the manager was created
 */
]","\android\speech\SpeechRecognizer.java"
"MSG_READY_FOR_SPEECH","false","false","true","true","true","int","5","[]","Optional.empty","\android\speech\SpeechRecognizer.java"
"ERROR_RECOGNIZER_BUSY","true","false","false","true","true","int","8","[]","Optional[/**
 * RecognitionService busy.
 */
]","\android\speech\SpeechRecognizer.java"
"mInternalListener","false","false","true","false","false","RecognitionListener","null","[]","Optional.empty","\android\speech\SpeechRecognizer.java"
"ERROR_SERVER","true","false","false","true","true","int","4","[]","Optional[/**
 * Server sends error status.
 */
]","\android\speech\SpeechRecognizer.java"
"MSG_START","false","false","true","true","true","int","1","[]","Optional[/**
 * action codes
 */
]","\android\speech\SpeechRecognizer.java"
"MSG_RESULTS","false","false","true","true","true","int","6","[]","Optional.empty","\android\speech\SpeechRecognizer.java"
"ERROR_NETWORK_TIMEOUT","true","false","false","true","true","int","1","[]","Optional[/**
 * Network operation timed out.
 */
]","\android\speech\SpeechRecognizer.java"
"mConnection","false","false","true","false","false","Connection","null","[]","Optional[/**
 * The connection to the actual service
 */
]","\android\speech\SpeechRecognizer.java"
"RESULTS_RECOGNITION","true","false","false","true","true","String","""results_recognition""","[]","Optional[/**
 * Used to retrieve an {@code ArrayList&lt;String&gt;} from the {@link Bundle} passed to the
 * {@link RecognitionListener#onResults(Bundle)} and
 * {@link RecognitionListener#onPartialResults(Bundle)} methods. These strings are the possible
 * recognition results, where the first element is the most likely candidate.
 */
]","\android\speech\SpeechRecognizer.java"
"mInternalHandler","false","false","true","false","true","Handler","new Handler() {

    @Override
    public void handleMessage(Message msg) {
        if (mInternalListener == null) {
            return;
        }
        switch(msg.what) {
            case MSG_BEGINNING_OF_SPEECH:
                mInternalListener.onBeginningOfSpeech();
                break;
            case MSG_BUFFER_RECEIVED:
                mInternalListener.onBufferReceived((byte[]) msg.obj);
                break;
            case MSG_END_OF_SPEECH:
                mInternalListener.onEndOfSpeech();
                break;
            case MSG_ERROR:
                mInternalListener.onError((Integer) msg.obj);
                break;
            case MSG_READY_FOR_SPEECH:
                mInternalListener.onReadyForSpeech((Bundle) msg.obj);
                break;
            case MSG_RESULTS:
                mInternalListener.onResults((Bundle) msg.obj);
                break;
            case MSG_PARTIAL_RESULTS:
                mInternalListener.onPartialResults((Bundle) msg.obj);
                break;
            case MSG_RMS_CHANGED:
                mInternalListener.onRmsChanged((Float) msg.obj);
                break;
            case MSG_ON_EVENT:
                mInternalListener.onEvent(msg.arg1, (Bundle) msg.obj);
                break;
        }
    }
}","[]","Optional.empty","\android\speech\SpeechRecognizer.java"
"MSG_BEGINNING_OF_SPEECH","false","false","true","true","true","int","1","[]","Optional.empty","\android\speech\SpeechRecognizer.java"
"mServiceComponent","false","false","true","false","true","ComponentName","null","[]","Optional[/**
 * Component to direct service intent to
 */
]","\android\speech\SpeechRecognizer.java"
"MSG_RMS_CHANGED","false","false","true","true","true","int","8","[]","Optional.empty","\android\speech\SpeechRecognizer.java"
"MSG_CHANGE_LISTENER","false","false","true","true","true","int","4","[]","Optional.empty","\android\speech\SpeechRecognizer.java"
"MSG_PARTIAL_RESULTS","false","false","true","true","true","int","7","[]","Optional.empty","\android\speech\SpeechRecognizer.java"
"ERROR_CLIENT","true","false","false","true","true","int","5","[]","Optional[/**
 * Other client side errors.
 */
]","\android\speech\SpeechRecognizer.java"
"MSG_ERROR","false","false","true","true","true","int","4","[]","Optional.empty","\android\speech\SpeechRecognizer.java"
"MSG_END_OF_SPEECH","false","false","true","true","true","int","3","[]","Optional.empty","\android\speech\SpeechRecognizer.java"
"ERROR_NO_MATCH","true","false","false","true","true","int","7","[]","Optional[/**
 * No recognition result matched.
 */
]","\android\speech\SpeechRecognizer.java"
"mHandler","false","false","true","false","false","Handler","new Handler() {

    @Override
    public void handleMessage(Message msg) {
        switch(msg.what) {
            case MSG_START:
                handleStartListening((Intent) msg.obj);
                break;
            case MSG_STOP:
                handleStopMessage();
                break;
            case MSG_CANCEL:
                handleCancelMessage();
                break;
            case MSG_CHANGE_LISTENER:
                handleChangeListener((RecognitionListener) msg.obj);
                break;
        }
    }
}","[]","Optional[/**
 * Handler that will execute the main tasks
 */
]","\android\speech\SpeechRecognizer.java"
"TAG","false","false","true","true","true","String","""SpeechRecognizer""","[]","Optional[/**
 * Log messages identifier
 */
]","\android\speech\SpeechRecognizer.java"
"ERROR_SPEECH_TIMEOUT","true","false","false","true","true","int","6","[]","Optional[/**
 * No speech input
 */
]","\android\speech\SpeechRecognizer.java"
"mListener","false","false","true","false","true","InternalListener","new InternalListener()","[]","Optional[/**
 * The Listener that will receive all the callbacks
 */
]","\android\speech\SpeechRecognizer.java"
"DBG","false","false","true","true","true","boolean","false","[]","Optional[/**
 * DEBUG value to enable verbose debug prints
 */
]","\android\speech\SpeechRecognizer.java"
"ERROR_AUDIO","true","false","false","true","true","int","3","[]","Optional[/**
 * Audio recording error.
 */
]","\android\speech\SpeechRecognizer.java"
"ERROR_INSUFFICIENT_PERMISSIONS","true","false","false","true","true","int","9","[]","Optional[/**
 * Insufficient permissions
 */
]","\android\speech\SpeechRecognizer.java"
"MSG_STOP","false","false","true","true","true","int","2","[]","Optional.empty","\android\speech\SpeechRecognizer.java"
"mService","false","false","true","false","false","IRecognitionService","null","[]","Optional[/**
 * The actual RecognitionService endpoint
 */
]","\android\speech\SpeechRecognizer.java"
"mPendingTasks","false","false","true","false","true","Queue<Message>","new LinkedList<Message>()","[]","Optional[/**
 * Temporary queue, saving the messages until the connection will be established, afterwards,
 * only mHandler will receive the messages
 */
]","\android\speech\SpeechRecognizer.java"
"ERROR_NETWORK","true","false","false","true","true","int","2","[]","Optional[/**
 * Other network related errors.
 */
]","\android\speech\SpeechRecognizer.java"
"CREATOR","true","false","false","true","true","Creator<LabeledIntent>","new Creator<LabeledIntent>() {

    public LabeledIntent createFromParcel(Parcel source) {
        return new LabeledIntent(source);
    }

    public LabeledIntent[] newArray(int size) {
        return new LabeledIntent[size];
    }
}","[]","Optional.empty","\android\content\pm\LabeledIntent.java"
"mIcon","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\pm\LabeledIntent.java"
"mSourcePackage","false","false","true","false","false","String","null","[]","Optional.empty","\android\content\pm\LabeledIntent.java"
"mLabelRes","false","false","true","false","false","int","null","[]","Optional.empty","\android\content\pm\LabeledIntent.java"
"mNonLocalizedLabel","false","false","true","false","false","CharSequence","null","[]","Optional.empty","\android\content\pm\LabeledIntent.java"
"CHARACTERS","true","false","false","true","true","char","new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'm', 'p', ':' }","[]","Optional[/**
 * The characters that are used.
 *
 * @see KeyEvent#getMatch
 * @see #getAcceptedChars
 */
]","\android\text\method\TimeKeyListener.java"
"sInstance","false","false","true","true","false","TimeKeyListener","null","[]","Optional.empty","\android\text\method\TimeKeyListener.java"
"mVCardParserImpl","false","false","true","false","true","VCardParserImpl_V30","null","[]","Optional.empty","\android\pim\vcard\VCardParser_V30.java"
"sAcceptableEncoding","false","false","false","true","true","Set<String>","Collections.unmodifiableSet(new HashSet<String>(Arrays.asList(VCardConstants.PARAM_ENCODING_7BIT, VCardConstants.PARAM_ENCODING_8BIT, VCardConstants.PARAM_ENCODING_BASE64, VCardConstants.PARAM_ENCODING_B)))","[]","Optional[/* package */
]","\android\pim\vcard\VCardParser_V30.java"
"sKnownPropertyNameSet","false","false","false","true","true","Set<String>","Collections.unmodifiableSet(new HashSet<String>(Arrays.asList(""BEGIN"", ""LOGO"", ""PHOTO"", ""LABEL"", ""FN"", ""TITLE"", ""SOUND"", ""VERSION"", ""TEL"", ""EMAIL"", ""TZ"", ""GEO"", ""NOTE"", ""URL"", // 2.1
""BDAY"", // 2.1
""ROLE"", // 2.1
""REV"", // 2.1
""UID"", // 2.1
""KEY"", // 2.1
""MAILER"", ""NAME"", ""PROFILE"", ""SOURCE"", ""NICKNAME"", ""CLASS"", ""SORT-STRING"", ""CATEGORIES"", // 3.0
""PRODID"")))","[]","Optional[/* package */
]","\android\pim\vcard\VCardParser_V30.java"
